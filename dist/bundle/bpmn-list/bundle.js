/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e,t,r={2443:(e,t,r)=>{(function(){"use strict";function e(e){var t=0;return function(){return t<e.length?{done:!1,value:e[t++]}:{done:!0}}}function t(t){var r="undefined"!=typeof Symbol&&Symbol.iterator&&t[Symbol.iterator];return r?r.call(t):{next:e(t)}}function n(e){if(!(e instanceof Array)){e=t(e);for(var r,n=[];!(r=e.next()).done;)n.push(r.value);e=n}return e}var o="function"==typeof Object.create?Object.create:function(e){function t(){}return t.prototype=e,new t};var i,s=function(e){e=["object"==typeof globalThis&&globalThis,e,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof r.g&&r.g];for(var t=0;t<e.length;++t){var n=e[t];if(n&&n.Math==Math)return n}throw Error("Cannot find global object")}(this),a=function(){if("undefined"!=typeof Reflect&&Reflect.construct){if(function(){function e(){}return new e,Reflect.construct(e,[],(function(){})),new e instanceof e}())return Reflect.construct;var e=Reflect.construct;return function(t,r,n){return t=e(t,r),n&&Reflect.setPrototypeOf(t,n.prototype),t}}return function(e,t,r){return void 0===r&&(r=e),r=o(r.prototype||Object.prototype),Function.prototype.apply.call(e,r,t)||r}}();if("function"==typeof Object.setPrototypeOf)i=Object.setPrototypeOf;else{var l;e:{var c={};try{c.__proto__={a:!0},l=c.a;break e}catch(e){}l=!1}i=l?function(e,t){if(e.__proto__=t,e.__proto__!==t)throw new TypeError(e+" is not extensible");return e}:null}var d=i;if(!ShadowRoot.prototype.createElement){var u,h=window.HTMLElement,p=window.customElements.define,f=window.customElements.get,g=window.customElements,A=new WeakMap,v=new WeakMap,m=new WeakMap,b=new WeakMap;window.CustomElementRegistry=function(){this.l=new Map,this.o=new Map,this.i=new Map,this.h=new Map},window.CustomElementRegistry.prototype.define=function(e,r){if(e=e.toLowerCase(),void 0!==this.j(e))throw new DOMException("Failed to execute 'define' on 'CustomElementRegistry': the name \""+e+'" has already been used with this registry');if(void 0!==this.o.get(r))throw new DOMException("Failed to execute 'define' on 'CustomElementRegistry': this constructor has already been used with this registry");var n=r.prototype.attributeChangedCallback,o=new Set(r.observedAttributes||[]);if(C(r,o,n),n={g:r,connectedCallback:r.prototype.connectedCallback,disconnectedCallback:r.prototype.disconnectedCallback,adoptedCallback:r.prototype.adoptedCallback,attributeChangedCallback:n,formAssociated:r.formAssociated,formAssociatedCallback:r.prototype.formAssociatedCallback,formDisabledCallback:r.prototype.formDisabledCallback,formResetCallback:r.prototype.formResetCallback,formStateRestoreCallback:r.prototype.formStateRestoreCallback,observedAttributes:o},this.l.set(e,n),this.o.set(r,n),(o=f.call(g,e))||(o=y(e),p.call(g,e,o)),this===window.customElements&&(m.set(r,n),n.s=o),o=this.h.get(e)){this.h.delete(e);for(var i=(o=t(o)).next();!i.done;i=o.next())i=i.value,v.delete(i),w(i,n,!0)}return void 0!==(n=this.i.get(e))&&(n.resolve(r),this.i.delete(e)),r},window.CustomElementRegistry.prototype.upgrade=function(){k.push(this),g.upgrade.apply(g,arguments),k.pop()},window.CustomElementRegistry.prototype.get=function(e){var t;return null==(t=this.l.get(e))?void 0:t.g},window.CustomElementRegistry.prototype.j=function(e){return this.l.get(e)},window.CustomElementRegistry.prototype.whenDefined=function(e){var t=this.j(e);if(void 0!==t)return Promise.resolve(t.g);var r=this.i.get(e);return void 0===r&&((r={}).promise=new Promise((function(e){return r.resolve=e})),this.i.set(e,r)),r.promise},window.CustomElementRegistry.prototype.m=function(e,t,r){var n=this.h.get(t);n||this.h.set(t,n=new Set),r?n.add(e):n.delete(e)},window.HTMLElement=function(){var e=u;if(e)return u=void 0,e;var t=m.get(this.constructor);if(!t)throw new TypeError("Illegal constructor (custom element class must be registered with global customElements registry to be newable)");return e=Reflect.construct(h,[],t.s),Object.setPrototypeOf(e,this.constructor.prototype),A.set(e,t),e},window.HTMLElement.prototype=h.prototype;var y=function(e){function t(){var t=Reflect.construct(h,[],this.constructor);Object.setPrototypeOf(t,HTMLElement.prototype);e:{var r=t.getRootNode();if(!(r===document||r instanceof ShadowRoot)){if((r=k[k.length-1])instanceof CustomElementRegistry){var n=r;break e}(r=r.getRootNode())===document||r instanceof ShadowRoot||(r=(null==(n=b.get(r))?void 0:n.getRootNode())||document)}n=r.customElements}return(r=(n=n||window.customElements).j(e))?w(t,r):v.set(t,n),t}return s.Object.defineProperty(t,"formAssociated",{configurable:!0,enumerable:!0,get:function(){return!0}}),t.prototype.connectedCallback=function(){var t=A.get(this);t?t.connectedCallback&&t.connectedCallback.apply(this,arguments):v.get(this).m(this,e,!0)},t.prototype.disconnectedCallback=function(){var t=A.get(this);t?t.disconnectedCallback&&t.disconnectedCallback.apply(this,arguments):v.get(this).m(this,e,!1)},t.prototype.adoptedCallback=function(){var e,t;null==(e=A.get(this))||null==(t=e.adoptedCallback)||t.apply(this,arguments)},t.prototype.formAssociatedCallback=function(){var e,t=A.get(this);t&&t.formAssociated&&(null==t||null==(e=t.formAssociatedCallback)||e.apply(this,arguments))},t.prototype.formDisabledCallback=function(){var e,t=A.get(this);null!=t&&t.formAssociated&&(null==t||null==(e=t.formDisabledCallback)||e.apply(this,arguments))},t.prototype.formResetCallback=function(){var e,t=A.get(this);null!=t&&t.formAssociated&&(null==t||null==(e=t.formResetCallback)||e.apply(this,arguments))},t.prototype.formStateRestoreCallback=function(){var e,t=A.get(this);null!=t&&t.formAssociated&&(null==t||null==(e=t.formStateRestoreCallback)||e.apply(this,arguments))},t},C=function(e,t,r){if(0!==t.size&&void 0!==r){var n=e.prototype.setAttribute;n&&(e.prototype.setAttribute=function(e,o){if(e=e.toLowerCase(),t.has(e)){var i=this.getAttribute(e);n.call(this,e,o),r.call(this,e,i,o)}else n.call(this,e,o)});var o=e.prototype.removeAttribute;o&&(e.prototype.removeAttribute=function(e){if(e=e.toLowerCase(),t.has(e)){var n=this.getAttribute(e);o.call(this,e),r.call(this,e,n,null)}else o.call(this,e)});var i=e.prototype.toggleAttribute;i&&(e.prototype.toggleAttribute=function(e){if(e=e.toLowerCase(),t.has(e)){var n=this.getAttribute(e);i.call(this,e);var o=this.getAttribute(e);r.call(this,e,n,o)}else i.call(this,e)})}},x=function(e){var t=Object.getPrototypeOf(e);if(t!==window.HTMLElement)return t===h?Object.setPrototypeOf(e,window.HTMLElement):x(t)},w=function(e,t,r){r=void 0!==r&&r,Object.setPrototypeOf(e,t.g.prototype),A.set(e,t),u=e;try{new t.g}catch(e){x(t.g),new t.g}t.observedAttributes.forEach((function(r){e.hasAttribute(r)&&t.attributeChangedCallback.call(e,r,null,e.getAttribute(r))})),r&&t.connectedCallback&&e.isConnected&&t.connectedCallback.call(e)},_=Element.prototype.attachShadow;Element.prototype.attachShadow=function(e){var t=_.apply(this,arguments);return e.customElements&&(t.customElements=e.customElements),t};var k=[document],S=function(e,t,r){var n=(r?Object.getPrototypeOf(r):e.prototype)[t];e.prototype[t]=function(){k.push(this);var e=n.apply(r||this,arguments);return void 0!==e&&b.set(e,this),k.pop(),e}};S(ShadowRoot,"createElement",document),S(ShadowRoot,"importNode",document),S(Element,"insertAdjacentHTML");var $=function(e){var t=Object.getOwnPropertyDescriptor(e.prototype,"innerHTML");Object.defineProperty(e.prototype,"innerHTML",Object.assign({},t,{set:function(e){k.push(this),t.set.call(this,e),k.pop()}}))};if($(Element),$(ShadowRoot),Object.defineProperty(window,"customElements",{value:new CustomElementRegistry,configurable:!0,writable:!0}),window.ElementInternals&&window.ElementInternals.prototype.setFormValue){var E=new WeakMap,O=HTMLElement.prototype.attachInternals;HTMLElement.prototype.attachInternals=function(e){for(var t=[],r=0;r<arguments.length;++r)t[r]=arguments[r];return t=O.call.apply(O,[this].concat(n(t))),E.set(t,this),t},["setFormValue","setValidity","checkValidity","reportValidity"].forEach((function(e){var t=window.ElementInternals.prototype,r=t[e];t[e]=function(e){for(var t=[],o=0;o<arguments.length;++o)t[o]=arguments[o];if(o=E.get(this),!0!==A.get(o).formAssociated)throw new DOMException("Failed to execute "+r+" on 'ElementInternals': The target element is not a form-associated custom element.");null==r||r.call.apply(r,[this].concat(n(t)))}}));var L=function(e){var t=a(Array,[].concat(n(e)),this.constructor);return t.h=e,t},P=L,R=Array;if(P.prototype=o(R.prototype),P.prototype.constructor=P,d)d(P,R);else for(var N in R)if("prototype"!=N)if(Object.defineProperties){var T=Object.getOwnPropertyDescriptor(R,N);T&&Object.defineProperty(P,N,T)}else P[N]=R[N];P.u=R.prototype,s.Object.defineProperty(L.prototype,"value",{configurable:!0,enumerable:!0,get:function(){var e;return(null==(e=this.h.find((function(e){return!0===e.checked})))?void 0:e.value)||""}});var z=function(e){var t=this,r=new Map;e.forEach((function(e,n){var o=e.getAttribute("name"),i=r.get(o)||[];t[+n]=e,i.push(e),r.set(o,i)})),this.length=e.length,r.forEach((function(e,r){e&&(t[r]=1===e.length?e[0]:new L(e))}))};z.prototype.namedItem=function(e){return this[e]};var F=Object.getOwnPropertyDescriptor(HTMLFormElement.prototype,"elements");Object.defineProperty(HTMLFormElement.prototype,"elements",{get:function(){for(var e=F.get.call(this,[]),r=[],n=(e=t(e)).next();!n.done;n=e.next()){n=n.value;var o=A.get(n);o&&!0!==o.formAssociated||r.push(n)}return new z(r)}})}}}).call("object"==typeof globalThis?globalThis:window)},9526:(e,t,r)=>{"use strict";r.d(t,{Z:()=>a});var n=r(272),o=r.n(n),i=r(2609),s=r.n(i)()(o());s.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600&family=Open+Sans:ital,wght@0,300;0,400;0,600;0,700;0,800;1,400&display=swap);"]),s.push([e.id,":root{--nx-sand-10: #f7f1dd;--nx-white: #fff;--nx-yellow-60: #e1b200;--nx-yellow-50: #ffcf1a;--nx-yellow-40: #ffd948;--nx-red-60: #b80000;--nx-red-50: #e60000;--nx-red-40: #ff1f1f;--nx-red-10: #ffc7c7;--nx-green-60: #006c2d;--nx-green-50: #008738;--nx-green-40: #00d257;--nx-green-10: #b6ffd4;--nx-orange-60: #f56900;--nx-blue-90: #001f3d;--nx-blue-80: #003870;--nx-blue-70: #0052a3;--nx-blue-60: #006bd6;--nx-blue-50: #0a85ff;--nx-blue-40: #3d9eff;--nx-blue-30: #70b8ff;--nx-blue-20: #a3d1ff;--nx-blue-10: #d6ebff;--nx-blue-5: #f0f7ff;--nx-violet-90: #200c34;--nx-violet-80: #3f1868;--nx-violet-70: #5f249b;--nx-violet-60: #7f30cf;--nx-violet-50: #9f64db;--nx-violet-40: #b283e2;--nx-violet-30: #c5a2e9;--nx-violet-20: #d9c1f1;--nx-violet-10: #ece0f8;--nx-grey-90: #161718;--nx-grey-80: #2c2e30;--nx-grey-70: #414548;--nx-grey-60: #575c61;--nx-grey-50: #6d7379;--nx-grey-40: #898f94;--nx-grey-30: #a7abaf;--nx-grey-20: #c4c7ca;--nx-grey-10: #e2e3e4;--nx-grey-5: #eff0f0;--nx-grey-2: #fafafa;--overlay: rgba(109 115 121 60%);--overlay-loading: rgba(250 250 250 80%);--onlight-hover-background-color: #f4f9ff;--onlight-selected-background-color: #e8f3ff;--globalnav-background-color: var(--nx-blue-80);--globalnav-text-color: var(--nx-white);--sidenav-background-color: var(--nx-grey-5);--body-primary-background-color: var(--nx-grey-2);--body-secondary-background-color: var(--nx-grey-5);--content-background-color: var(--nx-white);--content-extension-background-color: var(--nx-grey-10);--toolbar-background-color: var(--nx-white);--toolbar-text-color: var(--nx-grey-90);--primary-text-color: var(--nx-grey-90);--disabled-text-color: var(--nx-grey-70);--error-text-color: var(--nx-red-50);--destructive-text-color: var(--nx-red-60);--success-text-color: var(--nx-green-50);--header-text-color: var(--nx-orange-60);--subheader-text-color: var(--nx-grey-60);--placeholder-text-color: var(--nx-grey-50);--hyperlink-text-color: var(--nx-blue-60);--hyperlink-disabled-text-color: var(--nx-grey-70);--block-primary-background-color: var(--nx-blue-60);--block-primary-border-color: var(--nx-blue-70);--block-primary-text-color: var(--nx-white);--block-secondary-background-color: hsla(0deg 0% 0% 0%);--block-secondary-border-color: hsla(0deg 0% 0% 0%);--block-secondary-text-color: var(--nx-grey-90);--block-success-background-color: var(--nx-green-50);--block-success-border-color: var(--nx-green-60);--block-success-text-color: var(--nx-white);--block-error-background-color: var(--nx-red-50);--block-error-border-color: var(--nx-red-60);--block-error-text-color: var(--nx-white);--block-warning-background-color: var(--nx-yellow-50);--block-warning-border-color: var(--nx-yellow-60);--block-warning-text-color: var(--nx-grey-90);--button-primary-hover-background-color: #1477db;--button-primary-hover-text-color: #e2eefa;--button-secondary-background-color: var(--nx-white);--button-secondary-border-color: var(--nx-grey-10);--button-secondary-text-color: var(--nx-blue-60);--button-secondary-hover-background-color: var(--onlight-hover-background-color);--button-secondary-selected-background-color: var(--onlight-selected-background-color);--button-secondary-hover-text-color: #2f87df;--button-text-background-color: hsla(0deg 0% 0% 0%);--button-text-border-color: hsla(0deg 0% 0% 0%);--button-text-text-color: var(--nx-blue-60);--button-text-hover-background-color: var(--onlight-hover-background-color);--button-text-hover-text-color: var(--secondary-button-hover-text-color);--button-destructive-background-color: var(--nx-white);--button-destructive-border-color: var(--nx-grey-10);--button-destructive-text-color: var(--nx-red-50);--button-destructive-hover-background-color: var(--onlight-hover-background-color);--button-destructive-hover-text-color: var(--nx-red-60);--button-disabled-background-color: var(--nx-grey-20);--button-disabled-border-color: hsla(0deg 0% 0% 0%);--button-disabled-text-color: var(--nx-grey-70);--divider-line-color: var(--nx-grey-10);--input-background-color: var(--nx-white);--input-border-color: var(--nx-grey-40);--input-text-color: var(--primary-text-color);--input-placeholder-text-color: var(--placeholder-text-color);--input-focus-border-color: var(--nx-blue-60);--input-error-color: var(--nx-red-50);--input-error-text-color: var(--nx-white);--input-warning-color: var(--nx-yellow-50);--input-warning-text-color: var(--primary-text-color);--input-information-color: var(--nx-blue-60);--input-information-text-color: var(--nx-white);--input-disabled-background-color: var(--nx-grey-20);--input-disabled-border-color: hsla(0deg 0% 0% 0%);--input-disabled-text-color: var(--disabled-text-color);--input-xfix-background-color: var(--nx-grey-20);--input-xfix-border-color: var(--nx-grey-40);--input-xfix-text-color: var(--nx-grey-70);--input-pills-background-color: var(--nx-white);--input-pills-border-color: var(--nx-grey-90);--input-pills-text-color: var(--nx-grey-90);--input-block-unselected-background-color: var(--nx-white);--input-block-unselected-border-color: var(--nx-grey-60);--input-block-unselected-disabled-background-color: var(--nx-white);--input-block-unselected-disabled-border-color: var(--nx-grey-40);--input-block-selected-background-color: var(--nx-blue-60);--input-block-selected-border-color: hsla(0deg 0% 0% 0%);--input-block-selected-disabled-background-color: var(--nx-grey-40);--input-block-selected-disabled-border-color: hsla(0deg 0% 0% 0%);--input-block-hover-background-color: var(--onlight-hover-background-color);--list-group-text-color: var(--nx-grey-60);--list-item-hover-background-color: var(--onlight-hover-background-color);--list-item-selected-background-color: var(--onlight-selected-background-color);--list-item-subtext-color: var(--nx-grey-50);--list-action-background-color: var(--onlight-hover-background-color);--list-action-border-color: var(--nx-grey-5);--list-action-text-color: var(--hyperlink-text-color);--global-header-background-color: var(--nx-blue-80)}:root{--nx-font-family-body: Open Sans, helvetica, arial, sans-serif;--nx-font-family-heading: Montserrat, helvetica, arial, sans-serif}:root{--ne-ref-color-violet-20: #D9C1F1;--ne-ref-color-violet-60: #7F30CF;--ne-ref-color-grey-90-20: #16171820;--ne-ref-color-green-40: #00D257;--ne-ref-color-green-50: #008738;--ne-ref-color-green-60: #006c2d;--ne-ref-color-yellow-60: #E1B200;--ne-ref-color-yellow-50: #FFCF1A;--ne-ref-color-yellow-40: #FFD948;--ne-ref-color-yellow-10: #FFF5D1;--ne-ref-color-grey-02: #FAFAFA;--ne-ref-color-grey-05: #EFF0F0;--ne-ref-color-grey-10: #E2E3E4;--ne-ref-color-grey-20: #C4C7CA;--ne-ref-color-grey-30: #A7ABAF;--ne-ref-color-grey40: #898F94;--ne-ref-color-grey-50: #6D7379;--ne-ref-color-grey-60: #575C61;--ne-ref-color-grey-70: #414548;--ne-ref-color-grey-80: #2C2E30;--ne-ref-color-grey-90: #161718;--ne-ref-color-red-10: #FFC7C7;--ne-ref-color-red-20: #FF8F8F;--ne-ref-color-red-30: #FF5757;--ne-ref-color-red-40: #FF1F1F;--ne-ref-color-red-50: #E60000;--ne-ref-color-red-60: #B80000;--ne-ref-color-red-70: #7C0D0E;--ne-ref-color-red-80: #530909;--ne-ref-color-red-90: #290405;--ne-ref-color-blue-05: #F0F7FF;--ne-ref-color-blue-10: #D6EBFF;--ne-ref-color-blue-20: #A3D1FF;--ne-ref-color-blue-30: #70B8FF;--ne-ref-color-blue-40: #3D9EFF;--ne-ref-color-blue-50: #0A85FF;--ne-ref-color-blue-60: #006BD6;--ne-ref-color-blue-70: #0052A3;--ne-ref-color-blue-80: #003870;--ne-ref-color-blue-90: #001F3D;--ne-ref-color-nintex-orange: #F56900;--ne-ref-color-white: #ffffff}:root{--ne-ref-border-radius-circle: 50%;--ne-ref-border-radius-large: 0.5em;--ne-ref-border-radius-medium: .25em;--ne-ref-border-radius-small: 0.125em;--ne-ref-border-radius-none: 0}:root{--ne-ref-spacing-xxx-large: 3em;--ne-ref-spacing-xx-large: 2.5em;--ne-ref-spacing-x-large: 2em;--ne-ref-spacing-large: 1.5em;--ne-ref-spacing-medium: 1em;--ne-ref-spacing-small: 0.75em;--ne-ref-spacing-x-small: 0.5em;--ne-ref-spacing-xx-small: 0.25em;--ne-ref-spacing-xxx-small: 0.125em;--ne-ref-spacing-none: 0}:root{--ne-ref-font-size-09: 1.75em;--ne-ref-font-size-08: 1.5em;--ne-ref-font-size-07: 1.25em;--ne-ref-font-size-06: 1.125em;--ne-ref-font-size-05: 1em;--ne-ref-font-size-04: 0.875em;--ne-ref-font-size-03: 0.8125em;--ne-ref-font-size-02: 0.75em;--ne-ref-font-size-01: 0.625em;--ne-ref-font-size-11: 2.625em;--ne-ref-font-size-10: 2em}:root{--ne-ref-border-width-large: 4px;--ne-ref-border-width-medium: 2px;--ne-ref-border-width-small: 1px}:root{--ne-ref-sizing-09: 2.25em;--ne-ref-sizing-08: 2em;--ne-ref-sizing-07: 1.75em;--ne-ref-sizing-06: 1.5em;--ne-ref-sizing-05: 1.25em;--ne-ref-sizing-04: 1em;--ne-ref-sizing-03: 0.75em;--ne-ref-sizing-02: 0.5em;--ne-ref-sizing-01: 0.25em;--ne-ref-sizing-14: 6em;--ne-ref-sizing-13: 5em;--ne-ref-sizing-12: 4em;--ne-ref-sizing-11: 3em;--ne-ref-sizing-10: 2.5em}:root{--ne-ref-font-weight-bold: Bold;--ne-ref-font-weight-semi-bold: SemiBold;--ne-ref-font-weight-regular: Regular}:root{--ne-ref-font-family-montserrat: Montserrat;--ne-ref-font-family-open-sans: Open Sans}:root{--ne-ref-line-height-expanded: 2em;--ne-ref-line-height-regular: 1.5em;--ne-ref-line-height-condensed: 1.2em}:root{--ne-ref-paragraph-spacing-07: 2.5em;--ne-ref-paragraph-spacing-06: 2.25em;--ne-ref-paragraph-spacing-05: 2em;--ne-ref-paragraph-spacing-04: 1.75em;--ne-ref-paragraph-spacing-03: 1.625em;--ne-ref-paragraph-spacing-02: 1.5em;--ne-ref-paragraph-spacing-01: 1.25em}:root{--ne-ref-letter-spacing-09: 0.21em;--ne-ref-letter-spacing-08: 0.18em;--ne-ref-letter-spacing-07: 0.15em;--ne-ref-letter-spacing-06: 0.135em;--ne-ref-letter-spacing-05: 0.12em;--ne-ref-letter-spacing-04: 0.105em;--ne-ref-letter-spacing-03: 0.0975em;--ne-ref-letter-spacing-02: 0.09em;--ne-ref-letter-spacing-01: 0.075em;--ne-ref-letter-spacing-11: 0.315em;--ne-ref-letter-spacing-10: 0.24em}:root{--ne-ref-text-decoration-underline: underline;--ne-ref-text-decoration-none: none}:root{--ne-ref-shadow-level2: 0px 0px 8px var(--ne-ref-color-grey-90-20);--ne-ref-shadow-level1: 0px 0px 8px var(--ne-ref-color-grey-90-20)}:root{--ne-alias-color-highlight: var(--ne-ref-color-nintex-orange);--ne-alias-color-icon-white: var(--ne-ref-color-white);--ne-alias-color-icon-default: var(--ne-ref-color-grey-90);--ne-alias-color-status-success-light: var(--ne-ref-color-green-40);--ne-alias-color-status-success-default: var(--ne-ref-color-green-50);--ne-alias-color-status-success-dark: var(--ne-ref-color-green-60);--ne-alias-color-status-info-light: var(--ne-ref-color-blue-50);--ne-alias-color-status-info-default: var(--ne-ref-color-blue-60);--ne-alias-color-status-info-dark: var(--ne-ref-color-blue-70);--ne-alias-color-status-active-lighter: var(--ne-ref-color-blue-40);--ne-alias-color-status-active-light: var(--ne-ref-color-blue-50);--ne-alias-color-status-active-default: var(--ne-ref-color-blue-60);--ne-alias-color-status-warning-light: var(--ne-ref-color-yellow-40);--ne-alias-color-status-warning-default: var(--ne-ref-color-yellow-50);--ne-alias-color-status-warning-dark: var(--ne-ref-color-yellow-60);--ne-alias-color-status-error-light: var(--ne-ref-color-red-40);--ne-alias-color-status-error-default: var(--ne-ref-color-red-50);--ne-alias-color-status-error-dark: var(--ne-ref-color-red-60);--ne-alias-color-destructive-light: var(--ne-ref-color-red-40);--ne-alias-color-destructive-default: var(--ne-ref-color-red-60);--ne-alias-color-destructive-dark: var(--ne-ref-color-red-70);--ne-alias-color-state-focus-on-red: var(--ne-ref-color-red-70);--ne-alias-color-state-focus-on-white: var(--ne-ref-color-blue-05);--ne-alias-color-state-hover-on-red: var(--ne-ref-color-red-70);--ne-alias-color-state-hover-on-white: var(--ne-ref-color-blue-05);--ne-alias-color-state-disabled-dark: var(--ne-ref-color-grey-90);--ne-alias-color-state-disabled-default: var(--ne-ref-color-grey-50);--ne-alias-color-state-disabled-light: var(--ne-ref-color-grey-30);--ne-alias-color-accent-light: var(--ne-ref-color-blue-50);--ne-alias-color-accent-default: var(--ne-ref-color-blue-60);--ne-alias-color-accent-dark: var(--ne-ref-color-blue-70);--ne-alias-color-text-light: var(--ne-ref-color-grey-60);--ne-alias-color-text-default: var(--ne-ref-color-grey-90);--ne-alias-color-text-light-text-on-dark-bg: var(--ne-ref-color-white);--ne-alias-color-state-focus-on-blue: var(--ne-alias-color-accent-dark);--ne-alias-color-state-hover-on-blue: var(--ne-alias-color-accent-dark)}:root{--ne-alias-font-family-title: var(--ne-ref-font-family-montserrat);--ne-alias-font-family-body: var(--ne-ref-font-family-open-sans)}:root{--ne-alias-font-size-title: var(--ne-ref-font-size-06);--ne-alias-font-size-subtext: var(--ne-ref-font-size-02);--ne-alias-font-size-body: var(--ne-ref-font-size-04)}:root{--ne-alias-border-width-focus: var(--ne-ref-border-width-large);--ne-alias-border-width-default: var(--ne-ref-border-width-small)}:root{--ne-alias-sizing-icon-xx-large: var(--ne-ref-sizing-11);--ne-alias-sizing-icon-x-large: var(--ne-ref-sizing-08);--ne-alias-sizing-icon-large: var(--ne-ref-sizing-06);--ne-alias-sizing-icon-default: var(--ne-ref-sizing-04);--ne-alias-sizing-icon-small: var(--ne-ref-sizing-02)}:root{--ne-alias-border-focus: var(--ne-ref-color-blue-20);--ne-alias-border-dark-grey: var(--ne-ref-color-grey40);--ne-alias-border-grey: var(--ne-ref-color-grey-10)}\n\n/*# sourceMappingURL=earthling-base.min.css.map */","",{version:3,sources:["file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/typography.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/color.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-color.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-border-radius.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-spacing.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-font-size.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-border-width.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-sizing.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-font-weight.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-font-family.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-line-height.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-paragraph-spacing.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-letter-spacing.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-text-decoration.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-shadow.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-color.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-font-family.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-font-size.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-border-width.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-sizing.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-border.scss","webpack://./../../node_modules/@nintexglobal/earthling-styles/dist/earthling-base.min.css"],names:[],mappings:"AAAQ,MCEN,qBAAA,CACA,gBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,oBAAA,CACA,oBAAA,CACA,oBAAA,CACA,oBAAA,CACA,sBAAA,CACA,sBAAA,CACA,sBAAA,CACA,sBAAA,CACA,uBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,oBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,oBAAA,CACA,oBAAA,CACA,gCAAA,CACA,wCAAA,CAKA,yCAAA,CACA,4CAAA,CAKA,+CAAA,CACA,uCAAA,CAKA,4CAAA,CAKA,iDAAA,CACA,mDAAA,CAKA,2CAAA,CACA,uDAAA,CAKA,2CAAA,CACA,uCAAA,CAKA,uCAAA,CACA,wCAAA,CACA,oCAAA,CACA,0CAAA,CACA,wCAAA,CACA,wCAAA,CACA,yCAAA,CACA,2CAAA,CACA,yCAAA,CACA,kDAAA,CAOA,mDAAA,CACA,+CAAA,CACA,2CAAA,CAKA,uDAAA,CACA,mDAAA,CACA,+CAAA,CAKA,oDAAA,CACA,gDAAA,CACA,2CAAA,CAKA,gDAAA,CACA,4CAAA,CACA,yCAAA,CAKA,qDAAA,CACA,iDAAA,CACA,6CAAA,CAOA,gDAAA,CACA,0CAAA,CAKA,oDAAA,CACA,kDAAA,CACA,gDAAA,CACA,gFAAA,CACA,sFAAA,CACA,4CAAA,CAKA,mDAAA,CACA,+CAAA,CACA,2CAAA,CACA,2EAAA,CACA,wEAAA,CAKA,sDAAA,CACA,oDAAA,CACA,iDAAA,CACA,kFAAA,CACA,uDAAA,CAKA,qDAAA,CACA,mDAAA,CACA,+CAAA,CAKA,uCAAA,CAKA,yCAAA,CACA,uCAAA,CACA,6CAAA,CACA,6DAAA,CACA,6CAAA,CACA,qCAAA,CACA,yCAAA,CACA,0CAAA,CACA,qDAAA,CACA,4CAAA,CACA,+CAAA,CACA,oDAAA,CACA,kDAAA,CACA,uDAAA,CAKA,gDAAA,CACA,4CAAA,CACA,0CAAA,CAKA,+CAAA,CACA,6CAAA,CACA,2CAAA,CAKA,0DAAA,CACA,wDAAA,CACA,mEAAA,CACA,iEAAA,CACA,0DAAA,CACA,wDAAA,CACA,mEAAA,CACA,iEAAA,CACA,2EAAA,CAOA,0CAAA,CACA,yEAAA,CACA,+EAAA,CACA,4CAAA,CACA,qEAAA,CACA,4CAAA,CACA,qDAAA,CAIA,mDAAA,CD9OF,MACE,8DAAA,CACA,kEAAA,CEFF,MACE,iCAAA,CACA,iCAAA,CACA,oCAAA,CACA,gCAAA,CACA,gCAAA,CACA,gCAAA,CACA,iCAAA,CACA,iCAAA,CACA,iCAAA,CACA,iCAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,8BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,8BAAA,CACA,8BAAA,CACA,8BAAA,CACA,8BAAA,CACA,8BAAA,CACA,8BAAA,CACA,8BAAA,CACA,8BAAA,CACA,8BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,qCAAA,CACA,6BAAA,CC1CF,MACE,kCAAA,CACA,mCAAA,CACA,oCAAA,CACA,qCAAA,CACA,8BAAA,CCLF,MACE,+BAAA,CACA,gCAAA,CACA,6BAAA,CACA,6BAAA,CACA,4BAAA,CACA,8BAAA,CACA,+BAAA,CACA,iCAAA,CACA,mCAAA,CACA,wBAAA,CCVF,MACE,6BAAA,CACA,4BAAA,CACA,6BAAA,CACA,8BAAA,CACA,0BAAA,CACA,8BAAA,CACA,+BAAA,CACA,6BAAA,CACA,8BAAA,CACA,8BAAA,CACA,0BAAA,CCXF,MACE,gCAAA,CACA,iCAAA,CACA,gCAAA,CCHF,MACE,0BAAA,CACA,uBAAA,CACA,0BAAA,CACA,yBAAA,CACA,0BAAA,CACA,uBAAA,CACA,0BAAA,CACA,yBAAA,CACA,0BAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,yBAAA,CCdF,MACE,+BAAA,CACA,wCAAA,CACA,qCAAA,CCHF,MACE,2CAAA,CACA,yCAAA,CCFF,MACE,kCAAA,CACA,mCAAA,CACA,qCAAA,CCHF,MACE,oCAAA,CACA,qCAAA,CACA,kCAAA,CACA,qCAAA,CACA,sCAAA,CACA,oCAAA,CACA,qCAAA,CCPF,MACE,kCAAA,CACA,kCAAA,CACA,kCAAA,CACA,mCAAA,CACA,kCAAA,CACA,mCAAA,CACA,oCAAA,CACA,kCAAA,CACA,mCAAA,CACA,mCAAA,CACA,kCAAA,CCXF,MACE,6CAAA,CACA,mCAAA,CCFF,MACE,kEAAA,CACA,kEAAA,CCFF,MACE,6DAAA,CACA,sDAAA,CACA,0DAAA,CACA,mEAAA,CACA,qEAAA,CACA,kEAAA,CACA,+DAAA,CACA,iEAAA,CACA,8DAAA,CACA,mEAAA,CACA,iEAAA,CACA,mEAAA,CACA,oEAAA,CACA,sEAAA,CACA,mEAAA,CACA,+DAAA,CACA,iEAAA,CACA,8DAAA,CACA,8DAAA,CACA,gEAAA,CACA,6DAAA,CACA,+DAAA,CACA,kEAAA,CACA,+DAAA,CACA,kEAAA,CACA,iEAAA,CACA,oEAAA,CACA,kEAAA,CACA,0DAAA,CACA,4DAAA,CACA,yDAAA,CACA,wDAAA,CACA,0DAAA,CACA,sEAAA,CACA,uEAAA,CACA,uEAAA,CCpCF,MACE,kEAAA,CACA,gEAAA,CCFF,MACE,sDAAA,CACA,wDAAA,CACA,qDAAA,CCHF,MACE,+DAAA,CACA,iEAAA,CCFF,MACE,wDAAA,CACA,uDAAA,CACA,qDAAA,CACA,uDAAA,CACA,qDAAA,CCLF,MACE,oDAAA,CACA,uDAAA,CACA,mDAAA;;ACNF,iDAAiD",sourceRoot:""}]);const a=s},2609:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",n=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),n&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),n&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,n,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(n)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(s[l]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);n&&s[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),r&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=r):d[2]=r),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),t.push(d))}},t}},272:e=>{"use strict";e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},6062:e=>{"use strict";var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var i={},s=[],a=0;a<e.length;a++){var l=e[a],c=n.base?l[0]+n.base:l[0],d=i[c]||0,u="".concat(c," ").concat(d);i[c]=d+1;var h=r(u),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==h)t[h].references++,t[h].updater(p);else{var f=o(p,n);n.byIndex=a,t.splice(a,0,{identifier:u,updater:f,references:1})}s.push(u)}return s}function o(e,t){var r=t.domAPI(t);r.update(e);return function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,o){var i=n(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<i.length;s++){var a=r(i[s]);t[a].references--}for(var l=n(e,o),c=0;c<i.length;c++){var d=r(i[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}i=l}}},6793:e=>{"use strict";var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},1173:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},7892:(e,t,r)=>{"use strict";e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},4036:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,o&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var i=r.sourceMap;i&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},2464:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},654:(e,t,r)=>{"use strict";r(2443);class n{constructor(){this.settled=!1,this.promise=new Promise(((e,t)=>{this._resolve=e,this._reject=t}))}resolve(e){this.settled=!0,this._resolve(e)}reject(e){this.settled=!0,this._reject(e)}}const o=(e,t,r)=>{let n=e[0];for(let o=1;o<e.length;o++)n+=t[r?r[o-1]:o-1],n+=e[o];return n},i=[];for(let e=0;e<256;e++)i[e]=(e>>4&15).toString(16)+(15&e).toString(16);const s="",a="h",l="s";function c(e,t){return(t?a:l)+function(e){let t=0,r=8997,n=0,o=33826,s=0,a=40164,l=0,c=52210;for(let i=0;i<e.length;i++)r^=e.charCodeAt(i),t=435*r,n=435*o,s=435*a,l=435*c,s+=r<<8,l+=o<<8,n+=t>>>16,r=65535&t,s+=n>>>16,o=65535&n,c=l+(s>>>16)&65535,a=65535&s;return i[c>>8]+i[255&c]+i[a>>8]+i[255&a]+i[o>>8]+i[255&o]+i[r>>8]+i[255&r]}("string"==typeof e?e:e.join(s))}const d=new WeakMap,u=new Map;function h(e,t,r){var n;if(e){const i=null!==(n=null==r?void 0:r.id)&&void 0!==n?n:function(e){const t="string"==typeof e?e:e.strings;let r=u.get(t);void 0===r&&(r=c(t,"string"!=typeof e&&!("strTag"in e)),u.set(t,r));return r}(t),s=e[i];if(s){if("string"==typeof s)return s;if("strTag"in s)return o(s.strings,t.values,s.values);{let e=d.get(s);return void 0===e&&(e=s.values,d.set(s,e)),{...s,values:e.map((e=>t.values[e]))}}}}return(e=>{return"string"!=typeof(t=e)&&"strTag"in t?o(e.strings,e.values):e;var t})(t)}function p(e){window.dispatchEvent(new CustomEvent("lit-localize-status",{detail:e}))}let f,g,A,v,m,b="",y=new n;y.resolve();let C=0;const x=()=>b,w=e=>{if(e===(null!=f?f:b))return y.promise;if(!A||!v)throw new Error("Internal error");if(!A.has(e))throw new Error("Invalid locale code");C++;const t=C;f=e,y.settled&&(y=new n),p({status:"loading",loadingLocale:e});return(e===g?Promise.resolve({templates:void 0}):v(e)).then((r=>{C===t&&(b=e,f=void 0,m=r.templates,p({status:"ready",readyLocale:e}),y.resolve())}),(r=>{C===t&&(p({status:"error",errorLocale:e,errorMessage:r.toString()}),y.reject(r))})),y.promise};let _=null,k=!1;const{getLocale:S,setLocale:$}=(e=>(function(e){if(k)throw new Error("lit-localize can only be configured once");_=e,k=!0}(((e,t)=>h(m,e,t))),b=g=e.sourceLocale,A=new Set(e.targetLocales),A.add(e.sourceLocale),v=e.loadLocale,{getLocale:x,setLocale:w}))({sourceLocale:"en",targetLocales:[],loadLocale:e=>r(9671)(`./${e}.js`)}),E=new WeakMap;function O(e){return t=>{if(function(e,t){let r=t;for(;r;){if(E.get(r)===e)return!0;r=Object.getPrototypeOf(r)}return!1}(e,t))return t;const r=e(t);return E.set(r,e),r}}var L=r(9793);const P=!!ShadowRoot.prototype.createElement,R=O((e=>class extends e{static get scopedElements(){return{}}static get shadowRootOptions(){return this.__shadowRootOptions}static set shadowRootOptions(e){this.__shadowRootOptions=e}static get elementStyles(){return this.__elementStyles}static set elementStyles(e){this.__elementStyles=e}constructor(...e){super(),this.renderOptions=this.renderOptions||void 0}get registry(){return this.constructor.__registry}set registry(e){this.constructor.__registry=e}createRenderRoot(){const{scopedElements:e,shadowRootOptions:t,elementStyles:r}=this.constructor;if(!this.registry||this.registry===this.constructor.__registry&&!Object.prototype.hasOwnProperty.call(this.constructor,"__registry")){this.registry=P?new CustomElementRegistry:customElements;for(const[t,r]of Object.entries(e))this.defineScopedElement(t,r)}const n={mode:"open",...t,customElements:this.registry},o=this.attachShadow(n);return P&&(this.renderOptions.creationScope=o),o instanceof ShadowRoot&&((0,L.ec)(o,r),this.renderOptions.renderBefore=this.renderOptions.renderBefore||o.firstChild),o}createScopedElement(e){return(P?this.shadowRoot:document).createElement(e)}defineScopedElement(e,t){const r=this.registry.get(e);return r&&!1===P&&r!==t&&console.error([`You are trying to re-register the "${e}" custom element with a different class via ScopedElementsMixin.`,"This is only possible with a CustomElementRegistry.","Your browser does not support this feature so you will need to load a polyfill for it.",'Load "@webcomponents/scoped-custom-element-registry" before you register ANY web component to the global customElements registry.','e.g. add "<script src="/node_modules/@webcomponents/scoped-custom-element-registry/scoped-custom-element-registry.min.js"><\/script>" as your first script tag.',"For more details you can visit https://open-wc.org/docs/development/scoped-elements/"].join("\n")),r?this.registry.get(e):this.registry.define(e,t)}getScopedTagName(e){return this.constructor.getScopedTagName(e)}static getScopedTagName(e){return this.__registry.get(e)?e:void 0}}));var N=r(3192);const T=e=>t=>"function"==typeof t?((e,t)=>(customElements.define(e,t),t))(e,t):((e,t)=>{const{kind:r,elements:n}=t;return{kind:r,elements:n,finisher(t){customElements.define(e,t)}}})(e,t),z=(e,t)=>"method"===t.kind&&t.descriptor&&!("value"in t.descriptor)?{...t,finisher(r){r.createProperty(t.key,e)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:t.key,initializer(){"function"==typeof t.initializer&&(this[t.key]=t.initializer.call(this))},finisher(r){r.createProperty(t.key,e)}},F=(e,t,r)=>{t.constructor.createProperty(r,e)};function j(e){return(t,r)=>void 0!==r?F(e,t,r):z(e,t)}function D(e){return j({...e,state:!0})}const B=({finisher:e,descriptor:t})=>(r,n)=>{var o;if(void 0===n){const n=null!==(o=r.originalKey)&&void 0!==o?o:r.key,i=null!=t?{kind:"method",placement:"prototype",key:n,descriptor:t(r.key)}:{...r,key:n};return null!=e&&(i.finisher=function(t){e(t,n)}),i}{const o=r.constructor;void 0!==t&&Object.defineProperty(r,n,t(n)),null==e||e(o,n)}};var M;const I=null!=(null===(M=window.HTMLSlotElement)||void 0===M?void 0:M.prototype.assignedElements)?(e,t)=>e.assignedElements(t):(e,t)=>e.assignedNodes(t).filter((e=>e.nodeType===Node.ELEMENT_NODE));function H(e,t,r){let n,o=e;return"object"==typeof e?(o=e.slot,n=e):n={flatten:t},r?function(e){const{slot:t,selector:r}=null!=e?e:{};return B({descriptor:n=>({get(){var n;const o="slot"+(t?`[name=${t}]`:":not([name])"),i=null===(n=this.renderRoot)||void 0===n?void 0:n.querySelector(o),s=null!=i?I(i,e):[];return r?s.filter((e=>e.matches(r))):s},enumerable:!0,configurable:!0})})}({slot:o,flatten:t,selector:r}):B({descriptor:e=>({get(){var e,t;const r="slot"+(o?`[name=${o}]`:":not([name])"),i=null===(e=this.renderRoot)||void 0===e?void 0:e.querySelector(r);return null!==(t=null==i?void 0:i.assignedNodes(n))&&void 0!==t?t:[]},enumerable:!0,configurable:!0})})}var U=function(e,t){return U=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},U(e,t)};function V(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}U(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}Object.create;function q(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function K(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)s.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return s}function W(e,t,r){if(r||2===arguments.length)for(var n,o=0,i=t.length;o<i;o++)!n&&o in t||(n||(n=Array.prototype.slice.call(t,0,o)),n[o]=t[o]);return e.concat(n||Array.prototype.slice.call(t))}Object.create;"function"==typeof SuppressedError&&SuppressedError;function J(e){return"function"==typeof e}function Y(e){var t=e((function(e){Error.call(e),e.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}var G=Y((function(e){return function(t){e(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}));function Z(e,t){if(e){var r=e.indexOf(t);0<=r&&e.splice(r,1)}}var Q=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}var t;return e.prototype.unsubscribe=function(){var e,t,r,n,o;if(!this.closed){this.closed=!0;var i=this._parentage;if(i)if(this._parentage=null,Array.isArray(i))try{for(var s=q(i),a=s.next();!a.done;a=s.next()){a.value.remove(this)}}catch(t){e={error:t}}finally{try{a&&!a.done&&(t=s.return)&&t.call(s)}finally{if(e)throw e.error}}else i.remove(this);var l=this.initialTeardown;if(J(l))try{l()}catch(e){o=e instanceof G?e.errors:[e]}var c=this._finalizers;if(c){this._finalizers=null;try{for(var d=q(c),u=d.next();!u.done;u=d.next()){var h=u.value;try{te(h)}catch(e){o=null!=o?o:[],e instanceof G?o=W(W([],K(o)),K(e.errors)):o.push(e)}}}catch(e){r={error:e}}finally{try{u&&!u.done&&(n=d.return)&&n.call(d)}finally{if(r)throw r.error}}}if(o)throw new G(o)}},e.prototype.add=function(t){var r;if(t&&t!==this)if(this.closed)te(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(r=this._finalizers)&&void 0!==r?r:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&Z(t,e)},e.prototype.remove=function(t){var r=this._finalizers;r&&Z(r,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e}(),X=Q.EMPTY;function ee(e){return e instanceof Q||e&&"closed"in e&&J(e.remove)&&J(e.add)&&J(e.unsubscribe)}function te(e){J(e)?e():e.unsubscribe()}var re={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},ne={setTimeout:function(e,t){for(var r=[],n=2;n<arguments.length;n++)r[n-2]=arguments[n];var o=ne.delegate;return(null==o?void 0:o.setTimeout)?o.setTimeout.apply(o,W([e,t],K(r))):setTimeout.apply(void 0,W([e,t],K(r)))},clearTimeout:function(e){var t=ne.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function oe(){}var ie=se("C",void 0,void 0);function se(e,t,r){return{kind:e,value:t,error:r}}var ae=null;function le(e){if(re.useDeprecatedSynchronousErrorHandling){var t=!ae;if(t&&(ae={errorThrown:!1,error:null}),e(),t){var r=ae,n=r.errorThrown,o=r.error;if(ae=null,n)throw o}}else e()}var ce=function(e){function t(t){var r=e.call(this)||this;return r.isStopped=!1,t?(r.destination=t,ee(t)&&t.add(r)):r.destination=Ae,r}return V(t,e),t.create=function(e,t,r){return new pe(e,t,r)},t.prototype.next=function(e){this.isStopped?ge(function(e){return se("N",e,void 0)}(e),this):this._next(e)},t.prototype.error=function(e){this.isStopped?ge(se("E",void 0,e),this):(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped?ge(ie,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(Q),de=Function.prototype.bind;function ue(e,t){return de.call(e,t)}var he=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){fe(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){fe(e)}else fe(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){fe(e)}},e}(),pe=function(e){function t(t,r,n){var o,i,s=e.call(this)||this;J(t)||!t?o={next:null!=t?t:void 0,error:null!=r?r:void 0,complete:null!=n?n:void 0}:s&&re.useDeprecatedNextContext?((i=Object.create(t)).unsubscribe=function(){return s.unsubscribe()},o={next:t.next&&ue(t.next,i),error:t.error&&ue(t.error,i),complete:t.complete&&ue(t.complete,i)}):o=t;return s.destination=new he(o),s}return V(t,e),t}(ce);function fe(e){var t;re.useDeprecatedSynchronousErrorHandling?(t=e,re.useDeprecatedSynchronousErrorHandling&&ae&&(ae.errorThrown=!0,ae.error=t)):function(e){ne.setTimeout((function(){var t=re.onUnhandledError;if(!t)throw e;t(e)}))}(e)}function ge(e,t){var r=re.onStoppedNotification;r&&ne.setTimeout((function(){return r(e,t)}))}var Ae={closed:!0,next:oe,error:function(e){throw e},complete:oe},ve="function"==typeof Symbol&&Symbol.observable||"@@observable";function me(e){return e}function be(e){return 0===e.length?me:1===e.length?e[0]:function(t){return e.reduce((function(e,t){return t(e)}),t)}}var ye=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var r=new e;return r.source=this,r.operator=t,r},e.prototype.subscribe=function(e,t,r){var n,o=this,i=(n=e)&&n instanceof ce||function(e){return e&&J(e.next)&&J(e.error)&&J(e.complete)}(n)&&ee(n)?e:new pe(e,t,r);return le((function(){var e=o,t=e.operator,r=e.source;i.add(t?t.call(i,r):r?o._subscribe(i):o._trySubscribe(i))})),i},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var r=this;return new(t=Ce(t))((function(t,n){var o=new pe({next:function(t){try{e(t)}catch(e){n(e),o.unsubscribe()}},error:n,complete:t});r.subscribe(o)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[ve]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return be(e)(this)},e.prototype.toPromise=function(e){var t=this;return new(e=Ce(e))((function(e,r){var n;t.subscribe((function(e){return n=e}),(function(e){return r(e)}),(function(){return e(n)}))}))},e.create=function(t){return new e(t)},e}();function Ce(e){var t;return null!==(t=null!=e?e:re.Promise)&&void 0!==t?t:Promise}var xe,we=Y((function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),_e=function(e){function t(){var t=e.call(this)||this;return t.closed=!1,t.currentObservers=null,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return V(t,e),t.prototype.lift=function(e){var t=new ke(this,this);return t.operator=e,t},t.prototype._throwIfClosed=function(){if(this.closed)throw new we},t.prototype.next=function(e){var t=this;le((function(){var r,n;if(t._throwIfClosed(),!t.isStopped){t.currentObservers||(t.currentObservers=Array.from(t.observers));try{for(var o=q(t.currentObservers),i=o.next();!i.done;i=o.next()){i.value.next(e)}}catch(e){r={error:e}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}}}))},t.prototype.error=function(e){var t=this;le((function(){if(t._throwIfClosed(),!t.isStopped){t.hasError=t.isStopped=!0,t.thrownError=e;for(var r=t.observers;r.length;)r.shift().error(e)}}))},t.prototype.complete=function(){var e=this;le((function(){if(e._throwIfClosed(),!e.isStopped){e.isStopped=!0;for(var t=e.observers;t.length;)t.shift().complete()}}))},t.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(t.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),t.prototype._trySubscribe=function(t){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},t.prototype._innerSubscribe=function(e){var t=this,r=this,n=r.hasError,o=r.isStopped,i=r.observers;return n||o?X:(this.currentObservers=null,i.push(e),new Q((function(){t.currentObservers=null,Z(i,e)})))},t.prototype._checkFinalizedStatuses=function(e){var t=this,r=t.hasError,n=t.thrownError,o=t.isStopped;r?e.error(n):o&&e.complete()},t.prototype.asObservable=function(){var e=new ye;return e.source=this,e},t.create=function(e,t){return new ke(e,t)},t}(ye),ke=function(e){function t(t,r){var n=e.call(this)||this;return n.destination=t,n.source=r,n}return V(t,e),t.prototype.next=function(e){var t,r;null===(r=null===(t=this.destination)||void 0===t?void 0:t.next)||void 0===r||r.call(t,e)},t.prototype.error=function(e){var t,r;null===(r=null===(t=this.destination)||void 0===t?void 0:t.error)||void 0===r||r.call(t,e)},t.prototype.complete=function(){var e,t;null===(t=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===t||t.call(e)},t.prototype._subscribe=function(e){var t,r;return null!==(r=null===(t=this.source)||void 0===t?void 0:t.subscribe(e))&&void 0!==r?r:X},t}(_e);class Se{constructor(){this.propertyChangeSubject=new _e}static getInstance(){return this._contextService||(this._contextService=new Se),this._contextService}static resetInstance(){return this._contextService=new Se,this._contextService}}!function(e){e.get="GET"}(xe||(xe={}));class $e{constructor(){this.httpGet=async e=>{try{const t=await fetch(`${this.baseUrl}${e.startsWith("/")?e:`/${e}`}`,{method:xe.get});if(!t.ok)throw new Error(t.status.toString());return t}catch(e){throw console.error("HTTP GET error: ",e),e}}}get baseUrl(){const{protocol:e,host:t,pathname:r}=window.location;let n="/";const o=r.match(/^\/[^\/]+\//);return o&&o.length>0&&(n=o.at(0)),`${e}//${t}${n}modeler/api`}static{this.getInstance=()=>(this._dataService||(this._dataService=new $e),this._dataService)}static{this.resetInstance=()=>(this._dataService=new $e,this._dataService)}}class Ee{constructor(){this.triggerInitialized=()=>{this.initializedSubject.next()},this.triggerOpenProcess=e=>{this.openProcessSubscription.next(e.detail)},this.triggerCompleted=()=>{this.completedSubject.next()},this.initializedSubject=new _e,this.completedSubject=new _e,this.openProcessSubscription=new _e}static getInstance(){return this._eventService||(this._eventService=new Ee),this._eventService}static resetInstance(){return this._eventService=new Ee,this._eventService}static{this.fireExternal=(e,t,r)=>{const n={bubbles:!0,cancelable:!1,composed:!0,...r},o=new CustomEvent(t,n);return e.dispatchEvent(o),o}}}class Oe{constructor(){this._baseUrl="/v1/processes",this.getProcessList=async e=>{const t=new URLSearchParams(e).toString();try{const e=await this._dataService.httpGet(`${this._baseUrl}${""===t?"":`?${t}`}`);return await e.json()}catch(e){throw console.error("Get Process list error: ",e),e}},this._dataService=$e.getInstance()}static{this.getInstance=()=>(this._processesApiService||(this._processesApiService=new Oe),this._processesApiService)}static{this.resetInstance=()=>(this._processesApiService=new Oe,this._processesApiService)}}var Le=r(6062),Pe=r.n(Le),Re=r(4036),Ne=r.n(Re),Te=r(6793),ze=r.n(Te),Fe=r(7892),je=r.n(Fe),De=r(1173),Be=r.n(De),Me=r(2464),Ie=r.n(Me),He=r(9526),Ue={};Ue.styleTagTransform=Ie(),Ue.setAttributes=je(),Ue.insert=ze().bind(null,"head"),Ue.domAPI=Ne(),Ue.insertStyleElement=Be();Pe()(He.Z,Ue);He.Z&&He.Z.locals&&He.Z.locals;const Ve=N.iv`
  :host {
    all: initial;
  }
`,qe=(N.iv`0.1875em`,N.iv`0.5em`),Ke=(N.iv`0.625em`,N.iv`0.6875em`,N.iv`0.75em`),We=N.iv`0.9375em`,Je=N.iv`1.5em`,Ye=N.iv`1.625em`,Ge=(N.iv`1.8125em`,N.iv`3.75em`,N.iv`25.625em`,N.iv`30em`,[Ve,N.iv`
  :host {
    display: grid;
    grid-template-rows: min-content auto;

    min-height: 100%;
  }
`]),Ze=[Ve,N.iv`
  :host {
    display: grid;

    background-color: var(--nx-grey-5);
  }

  header {
    display: grid;
    grid-template-columns: ${Je} min-content auto;
    grid-template-rows: ${Ke} ${Ye} ${Ye};
  }

  h1 {
    grid-column: 2;
    grid-row: 2;

    margin: 0;

    white-space: nowrap;

    color: var(--ne-alias-color-text-default);
    font-family: var(--nx-font-family-heading);
    font-size: var(--ne-ref-font-size-07);
  }
`],Qe={type:"logger",log(e){this.output("log",e)},warn(e){this.output("warn",e)},error(e){this.output("error",e)},output(e,t){console&&console[e]&&console[e].apply(console,t)}};class Xe{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.init(e,t)}init(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.prefix=t.prefix||"i18next:",this.logger=e||Qe,this.options=t,this.debug=t.debug}log(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return this.forward(t,"log","",!0)}warn(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return this.forward(t,"warn","",!0)}error(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return this.forward(t,"error","")}deprecate(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return this.forward(t,"warn","WARNING DEPRECATED: ",!0)}forward(e,t,r,n){return n&&!this.debug?null:("string"==typeof e[0]&&(e[0]=`${r}${this.prefix} ${e[0]}`),this.logger[t](e))}create(e){return new Xe(this.logger,{prefix:`${this.prefix}:${e}:`,...this.options})}clone(e){return(e=e||this.options).prefix=e.prefix||this.prefix,new Xe(this.logger,e)}}var et=new Xe;class tt{constructor(){this.observers={}}on(e,t){return e.split(" ").forEach((e=>{this.observers[e]=this.observers[e]||[],this.observers[e].push(t)})),this}off(e,t){this.observers[e]&&(t?this.observers[e]=this.observers[e].filter((e=>e!==t)):delete this.observers[e])}emit(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];if(this.observers[e]){[].concat(this.observers[e]).forEach((e=>{e(...r)}))}if(this.observers["*"]){[].concat(this.observers["*"]).forEach((t=>{t.apply(t,[e,...r])}))}}}function rt(){let e,t;const r=new Promise(((r,n)=>{e=r,t=n}));return r.resolve=e,r.reject=t,r}function nt(e){return null==e?"":""+e}function ot(e,t,r){function n(e){return e&&e.indexOf("###")>-1?e.replace(/###/g,"."):e}function o(){return!e||"string"==typeof e}const i="string"!=typeof t?[].concat(t):t.split(".");for(;i.length>1;){if(o())return{};const t=n(i.shift());!e[t]&&r&&(e[t]=new r),e=Object.prototype.hasOwnProperty.call(e,t)?e[t]:{}}return o()?{}:{obj:e,k:n(i.shift())}}function it(e,t,r){const{obj:n,k:o}=ot(e,t,Object);n[o]=r}function st(e,t){const{obj:r,k:n}=ot(e,t);if(r)return r[n]}function at(e,t,r){for(const n in t)"__proto__"!==n&&"constructor"!==n&&(n in e?"string"==typeof e[n]||e[n]instanceof String||"string"==typeof t[n]||t[n]instanceof String?r&&(e[n]=t[n]):at(e[n],t[n],r):e[n]=t[n]);return e}function lt(e){return e.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")}var ct={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;"};function dt(e){return"string"==typeof e?e.replace(/[&<>"'\/]/g,(e=>ct[e])):e}const ut=[" ",",","?","!",";"];function ht(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:".";if(!e)return;if(e[t])return e[t];const n=t.split(r);let o=e;for(let e=0;e<n.length;++e){if(!o)return;if("string"==typeof o[n[e]]&&e+1<n.length)return;if(void 0===o[n[e]]){let i=2,s=n.slice(e,e+i).join(r),a=o[s];for(;void 0===a&&n.length>e+i;)i++,s=n.slice(e,e+i).join(r),a=o[s];if(void 0===a)return;if(null===a)return null;if(t.endsWith(s)){if("string"==typeof a)return a;if(s&&"string"==typeof a[s])return a[s]}const l=n.slice(e+i).join(r);return l?ht(a,l,r):void 0}o=o[n[e]]}return o}function pt(e){return e&&e.indexOf("_")>0?e.replace("_","-"):e}class ft extends tt{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{ns:["translation"],defaultNS:"translation"};super(),this.data=e||{},this.options=t,void 0===this.options.keySeparator&&(this.options.keySeparator="."),void 0===this.options.ignoreJSONStructure&&(this.options.ignoreJSONStructure=!0)}addNamespaces(e){this.options.ns.indexOf(e)<0&&this.options.ns.push(e)}removeNamespaces(e){const t=this.options.ns.indexOf(e);t>-1&&this.options.ns.splice(t,1)}getResource(e,t,r){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};const o=void 0!==n.keySeparator?n.keySeparator:this.options.keySeparator,i=void 0!==n.ignoreJSONStructure?n.ignoreJSONStructure:this.options.ignoreJSONStructure;let s=[e,t];r&&"string"!=typeof r&&(s=s.concat(r)),r&&"string"==typeof r&&(s=s.concat(o?r.split(o):r)),e.indexOf(".")>-1&&(s=e.split("."));const a=st(this.data,s);return a||!i||"string"!=typeof r?a:ht(this.data&&this.data[e]&&this.data[e][t],r,o)}addResource(e,t,r,n){let o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{silent:!1};const i=void 0!==o.keySeparator?o.keySeparator:this.options.keySeparator;let s=[e,t];r&&(s=s.concat(i?r.split(i):r)),e.indexOf(".")>-1&&(s=e.split("."),n=t,t=s[1]),this.addNamespaces(t),it(this.data,s,n),o.silent||this.emit("added",e,t,r,n)}addResources(e,t,r){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{silent:!1};for(const n in r)"string"!=typeof r[n]&&"[object Array]"!==Object.prototype.toString.apply(r[n])||this.addResource(e,t,n,r[n],{silent:!0});n.silent||this.emit("added",e,t,r)}addResourceBundle(e,t,r,n,o){let i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{silent:!1},s=[e,t];e.indexOf(".")>-1&&(s=e.split("."),n=r,r=t,t=s[1]),this.addNamespaces(t);let a=st(this.data,s)||{};n?at(a,r,o):a={...a,...r},it(this.data,s,a),i.silent||this.emit("added",e,t,r)}removeResourceBundle(e,t){this.hasResourceBundle(e,t)&&delete this.data[e][t],this.removeNamespaces(t),this.emit("removed",e,t)}hasResourceBundle(e,t){return void 0!==this.getResource(e,t)}getResourceBundle(e,t){return t||(t=this.options.defaultNS),"v1"===this.options.compatibilityAPI?{...this.getResource(e,t)}:this.getResource(e,t)}getDataByLanguage(e){return this.data[e]}hasLanguageSomeTranslations(e){const t=this.getDataByLanguage(e);return!!(t&&Object.keys(t)||[]).find((e=>t[e]&&Object.keys(t[e]).length>0))}toJSON(){return this.data}}var gt={processors:{},addPostProcessor(e){this.processors[e.name]=e},handle(e,t,r,n,o){return e.forEach((e=>{this.processors[e]&&(t=this.processors[e].process(t,r,n,o))})),t}};const At={};class vt extends tt{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};super(),function(e,t,r){e.forEach((e=>{t[e]&&(r[e]=t[e])}))}(["resourceStore","languageUtils","pluralResolver","interpolator","backendConnector","i18nFormat","utils"],e,this),this.options=t,void 0===this.options.keySeparator&&(this.options.keySeparator="."),this.logger=et.create("translator")}changeLanguage(e){e&&(this.language=e)}exists(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}};if(null==e)return!1;const r=this.resolve(e,t);return r&&void 0!==r.res}extractFromKey(e,t){let r=void 0!==t.nsSeparator?t.nsSeparator:this.options.nsSeparator;void 0===r&&(r=":");const n=void 0!==t.keySeparator?t.keySeparator:this.options.keySeparator;let o=t.ns||this.options.defaultNS||[];const i=r&&e.indexOf(r)>-1,s=!(this.options.userDefinedKeySeparator||t.keySeparator||this.options.userDefinedNsSeparator||t.nsSeparator||function(e,t,r){t=t||"",r=r||"";const n=ut.filter((e=>t.indexOf(e)<0&&r.indexOf(e)<0));if(0===n.length)return!0;const o=new RegExp(`(${n.map((e=>"?"===e?"\\?":e)).join("|")})`);let i=!o.test(e);if(!i){const t=e.indexOf(r);t>0&&!o.test(e.substring(0,t))&&(i=!0)}return i}(e,r,n));if(i&&!s){const t=e.match(this.interpolator.nestingRegexp);if(t&&t.length>0)return{key:e,namespaces:o};const i=e.split(r);(r!==n||r===n&&this.options.ns.indexOf(i[0])>-1)&&(o=i.shift()),e=i.join(n)}return"string"==typeof o&&(o=[o]),{key:e,namespaces:o}}translate(e,t,r){if("object"!=typeof t&&this.options.overloadTranslationOptionHandler&&(t=this.options.overloadTranslationOptionHandler(arguments)),"object"==typeof t&&(t={...t}),t||(t={}),null==e)return"";Array.isArray(e)||(e=[String(e)]);const n=void 0!==t.returnDetails?t.returnDetails:this.options.returnDetails,o=void 0!==t.keySeparator?t.keySeparator:this.options.keySeparator,{key:i,namespaces:s}=this.extractFromKey(e[e.length-1],t),a=s[s.length-1],l=t.lng||this.language,c=t.appendNamespaceToCIMode||this.options.appendNamespaceToCIMode;if(l&&"cimode"===l.toLowerCase()){if(c){const e=t.nsSeparator||this.options.nsSeparator;return n?{res:`${a}${e}${i}`,usedKey:i,exactUsedKey:i,usedLng:l,usedNS:a}:`${a}${e}${i}`}return n?{res:i,usedKey:i,exactUsedKey:i,usedLng:l,usedNS:a}:i}const d=this.resolve(e,t);let u=d&&d.res;const h=d&&d.usedKey||i,p=d&&d.exactUsedKey||i,f=Object.prototype.toString.apply(u),g=void 0!==t.joinArrays?t.joinArrays:this.options.joinArrays,A=!this.i18nFormat||this.i18nFormat.handleAsObject;if(A&&u&&("string"!=typeof u&&"boolean"!=typeof u&&"number"!=typeof u)&&["[object Number]","[object Function]","[object RegExp]"].indexOf(f)<0&&("string"!=typeof g||"[object Array]"!==f)){if(!t.returnObjects&&!this.options.returnObjects){this.options.returnedObjectHandler||this.logger.warn("accessing an object - but returnObjects options is not enabled!");const e=this.options.returnedObjectHandler?this.options.returnedObjectHandler(h,u,{...t,ns:s}):`key '${i} (${this.language})' returned an object instead of string.`;return n?(d.res=e,d):e}if(o){const e="[object Array]"===f,r=e?[]:{},n=e?p:h;for(const e in u)if(Object.prototype.hasOwnProperty.call(u,e)){const i=`${n}${o}${e}`;r[e]=this.translate(i,{...t,joinArrays:!1,ns:s}),r[e]===i&&(r[e]=u[e])}u=r}}else if(A&&"string"==typeof g&&"[object Array]"===f)u=u.join(g),u&&(u=this.extendTranslation(u,e,t,r));else{let n=!1,s=!1;const c=void 0!==t.count&&"string"!=typeof t.count,h=vt.hasDefaultValue(t),p=c?this.pluralResolver.getSuffix(l,t.count,t):"",f=t.ordinal&&c?this.pluralResolver.getSuffix(l,t.count,{ordinal:!1}):"",g=t[`defaultValue${p}`]||t[`defaultValue${f}`]||t.defaultValue;!this.isValidLookup(u)&&h&&(n=!0,u=g),this.isValidLookup(u)||(s=!0,u=i);const A=(t.missingKeyNoValueFallbackToKey||this.options.missingKeyNoValueFallbackToKey)&&s?void 0:u,v=h&&g!==u&&this.options.updateMissing;if(s||n||v){if(this.logger.log(v?"updateKey":"missingKey",l,a,i,v?g:u),o){const e=this.resolve(i,{...t,keySeparator:!1});e&&e.res&&this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.")}let e=[];const r=this.languageUtils.getFallbackCodes(this.options.fallbackLng,t.lng||this.language);if("fallback"===this.options.saveMissingTo&&r&&r[0])for(let t=0;t<r.length;t++)e.push(r[t]);else"all"===this.options.saveMissingTo?e=this.languageUtils.toResolveHierarchy(t.lng||this.language):e.push(t.lng||this.language);const n=(e,r,n)=>{const o=h&&n!==u?n:A;this.options.missingKeyHandler?this.options.missingKeyHandler(e,a,r,o,v,t):this.backendConnector&&this.backendConnector.saveMissing&&this.backendConnector.saveMissing(e,a,r,o,v,t),this.emit("missingKey",e,a,r,u)};this.options.saveMissing&&(this.options.saveMissingPlurals&&c?e.forEach((e=>{this.pluralResolver.getSuffixes(e,t).forEach((r=>{n([e],i+r,t[`defaultValue${r}`]||g)}))})):n(e,i,g))}u=this.extendTranslation(u,e,t,d,r),s&&u===i&&this.options.appendNamespaceToMissingKey&&(u=`${a}:${i}`),(s||n)&&this.options.parseMissingKeyHandler&&(u="v1"!==this.options.compatibilityAPI?this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey?`${a}:${i}`:i,n?u:void 0):this.options.parseMissingKeyHandler(u))}return n?(d.res=u,d):u}extendTranslation(e,t,r,n,o){var i=this;if(this.i18nFormat&&this.i18nFormat.parse)e=this.i18nFormat.parse(e,{...this.options.interpolation.defaultVariables,...r},n.usedLng,n.usedNS,n.usedKey,{resolved:n});else if(!r.skipInterpolation){r.interpolation&&this.interpolator.init({...r,interpolation:{...this.options.interpolation,...r.interpolation}});const s="string"==typeof e&&(r&&r.interpolation&&void 0!==r.interpolation.skipOnVariables?r.interpolation.skipOnVariables:this.options.interpolation.skipOnVariables);let a;if(s){const t=e.match(this.interpolator.nestingRegexp);a=t&&t.length}let l=r.replace&&"string"!=typeof r.replace?r.replace:r;if(this.options.interpolation.defaultVariables&&(l={...this.options.interpolation.defaultVariables,...l}),e=this.interpolator.interpolate(e,l,r.lng||this.language,r),s){const t=e.match(this.interpolator.nestingRegexp);a<(t&&t.length)&&(r.nest=!1)}!r.lng&&"v1"!==this.options.compatibilityAPI&&n&&n.res&&(r.lng=n.usedLng),!1!==r.nest&&(e=this.interpolator.nest(e,(function(){for(var e=arguments.length,n=new Array(e),s=0;s<e;s++)n[s]=arguments[s];return o&&o[0]===n[0]&&!r.context?(i.logger.warn(`It seems you are nesting recursively key: ${n[0]} in key: ${t[0]}`),null):i.translate(...n,t)}),r)),r.interpolation&&this.interpolator.reset()}const s=r.postProcess||this.options.postProcess,a="string"==typeof s?[s]:s;return null!=e&&a&&a.length&&!1!==r.applyPostProcessor&&(e=gt.handle(a,e,t,this.options&&this.options.postProcessPassResolved?{i18nResolved:n,...r}:r,this)),e}resolve(e){let t,r,n,o,i,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"string"==typeof e&&(e=[e]),e.forEach((e=>{if(this.isValidLookup(t))return;const a=this.extractFromKey(e,s),l=a.key;r=l;let c=a.namespaces;this.options.fallbackNS&&(c=c.concat(this.options.fallbackNS));const d=void 0!==s.count&&"string"!=typeof s.count,u=d&&!s.ordinal&&0===s.count&&this.pluralResolver.shouldUseIntlApi(),h=void 0!==s.context&&("string"==typeof s.context||"number"==typeof s.context)&&""!==s.context,p=s.lngs?s.lngs:this.languageUtils.toResolveHierarchy(s.lng||this.language,s.fallbackLng);c.forEach((e=>{this.isValidLookup(t)||(i=e,!At[`${p[0]}-${e}`]&&this.utils&&this.utils.hasLoadedNamespace&&!this.utils.hasLoadedNamespace(i)&&(At[`${p[0]}-${e}`]=!0,this.logger.warn(`key "${r}" for languages "${p.join(", ")}" won't get resolved as namespace "${i}" was not yet loaded`,"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!")),p.forEach((r=>{if(this.isValidLookup(t))return;o=r;const i=[l];if(this.i18nFormat&&this.i18nFormat.addLookupKeys)this.i18nFormat.addLookupKeys(i,l,r,e,s);else{let e;d&&(e=this.pluralResolver.getSuffix(r,s.count,s));const t=`${this.options.pluralSeparator}zero`,n=`${this.options.pluralSeparator}ordinal${this.options.pluralSeparator}`;if(d&&(i.push(l+e),s.ordinal&&0===e.indexOf(n)&&i.push(l+e.replace(n,this.options.pluralSeparator)),u&&i.push(l+t)),h){const r=`${l}${this.options.contextSeparator}${s.context}`;i.push(r),d&&(i.push(r+e),s.ordinal&&0===e.indexOf(n)&&i.push(r+e.replace(n,this.options.pluralSeparator)),u&&i.push(r+t))}}let a;for(;a=i.pop();)this.isValidLookup(t)||(n=a,t=this.getResource(r,e,a,s))})))}))})),{res:t,usedKey:r,exactUsedKey:n,usedLng:o,usedNS:i}}isValidLookup(e){return!(void 0===e||!this.options.returnNull&&null===e||!this.options.returnEmptyString&&""===e)}getResource(e,t,r){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return this.i18nFormat&&this.i18nFormat.getResource?this.i18nFormat.getResource(e,t,r,n):this.resourceStore.getResource(e,t,r,n)}static hasDefaultValue(e){const t="defaultValue";for(const r in e)if(Object.prototype.hasOwnProperty.call(e,r)&&t===r.substring(0,12)&&void 0!==e[r])return!0;return!1}}function mt(e){return e.charAt(0).toUpperCase()+e.slice(1)}class bt{constructor(e){this.options=e,this.supportedLngs=this.options.supportedLngs||!1,this.logger=et.create("languageUtils")}getScriptPartFromCode(e){if(!(e=pt(e))||e.indexOf("-")<0)return null;const t=e.split("-");return 2===t.length?null:(t.pop(),"x"===t[t.length-1].toLowerCase()?null:this.formatLanguageCode(t.join("-")))}getLanguagePartFromCode(e){if(!(e=pt(e))||e.indexOf("-")<0)return e;const t=e.split("-");return this.formatLanguageCode(t[0])}formatLanguageCode(e){if("string"==typeof e&&e.indexOf("-")>-1){const t=["hans","hant","latn","cyrl","cans","mong","arab"];let r=e.split("-");return this.options.lowerCaseLng?r=r.map((e=>e.toLowerCase())):2===r.length?(r[0]=r[0].toLowerCase(),r[1]=r[1].toUpperCase(),t.indexOf(r[1].toLowerCase())>-1&&(r[1]=mt(r[1].toLowerCase()))):3===r.length&&(r[0]=r[0].toLowerCase(),2===r[1].length&&(r[1]=r[1].toUpperCase()),"sgn"!==r[0]&&2===r[2].length&&(r[2]=r[2].toUpperCase()),t.indexOf(r[1].toLowerCase())>-1&&(r[1]=mt(r[1].toLowerCase())),t.indexOf(r[2].toLowerCase())>-1&&(r[2]=mt(r[2].toLowerCase()))),r.join("-")}return this.options.cleanCode||this.options.lowerCaseLng?e.toLowerCase():e}isSupportedCode(e){return("languageOnly"===this.options.load||this.options.nonExplicitSupportedLngs)&&(e=this.getLanguagePartFromCode(e)),!this.supportedLngs||!this.supportedLngs.length||this.supportedLngs.indexOf(e)>-1}getBestMatchFromCodes(e){if(!e)return null;let t;return e.forEach((e=>{if(t)return;const r=this.formatLanguageCode(e);this.options.supportedLngs&&!this.isSupportedCode(r)||(t=r)})),!t&&this.options.supportedLngs&&e.forEach((e=>{if(t)return;const r=this.getLanguagePartFromCode(e);if(this.isSupportedCode(r))return t=r;t=this.options.supportedLngs.find((e=>e===r?e:e.indexOf("-")<0&&r.indexOf("-")<0?void 0:0===e.indexOf(r)?e:void 0))})),t||(t=this.getFallbackCodes(this.options.fallbackLng)[0]),t}getFallbackCodes(e,t){if(!e)return[];if("function"==typeof e&&(e=e(t)),"string"==typeof e&&(e=[e]),"[object Array]"===Object.prototype.toString.apply(e))return e;if(!t)return e.default||[];let r=e[t];return r||(r=e[this.getScriptPartFromCode(t)]),r||(r=e[this.formatLanguageCode(t)]),r||(r=e[this.getLanguagePartFromCode(t)]),r||(r=e.default),r||[]}toResolveHierarchy(e,t){const r=this.getFallbackCodes(t||this.options.fallbackLng||[],e),n=[],o=e=>{e&&(this.isSupportedCode(e)?n.push(e):this.logger.warn(`rejecting language code not found in supportedLngs: ${e}`))};return"string"==typeof e&&(e.indexOf("-")>-1||e.indexOf("_")>-1)?("languageOnly"!==this.options.load&&o(this.formatLanguageCode(e)),"languageOnly"!==this.options.load&&"currentOnly"!==this.options.load&&o(this.getScriptPartFromCode(e)),"currentOnly"!==this.options.load&&o(this.getLanguagePartFromCode(e))):"string"==typeof e&&o(this.formatLanguageCode(e)),r.forEach((e=>{n.indexOf(e)<0&&o(this.formatLanguageCode(e))})),n}}let yt=[{lngs:["ach","ak","am","arn","br","fil","gun","ln","mfe","mg","mi","oc","pt","pt-BR","tg","tl","ti","tr","uz","wa"],nr:[1,2],fc:1},{lngs:["af","an","ast","az","bg","bn","ca","da","de","dev","el","en","eo","es","et","eu","fi","fo","fur","fy","gl","gu","ha","hi","hu","hy","ia","it","kk","kn","ku","lb","mai","ml","mn","mr","nah","nap","nb","ne","nl","nn","no","nso","pa","pap","pms","ps","pt-PT","rm","sco","se","si","so","son","sq","sv","sw","ta","te","tk","ur","yo"],nr:[1,2],fc:2},{lngs:["ay","bo","cgg","fa","ht","id","ja","jbo","ka","km","ko","ky","lo","ms","sah","su","th","tt","ug","vi","wo","zh"],nr:[1],fc:3},{lngs:["be","bs","cnr","dz","hr","ru","sr","uk"],nr:[1,2,5],fc:4},{lngs:["ar"],nr:[0,1,2,3,11,100],fc:5},{lngs:["cs","sk"],nr:[1,2,5],fc:6},{lngs:["csb","pl"],nr:[1,2,5],fc:7},{lngs:["cy"],nr:[1,2,3,8],fc:8},{lngs:["fr"],nr:[1,2],fc:9},{lngs:["ga"],nr:[1,2,3,7,11],fc:10},{lngs:["gd"],nr:[1,2,3,20],fc:11},{lngs:["is"],nr:[1,2],fc:12},{lngs:["jv"],nr:[0,1],fc:13},{lngs:["kw"],nr:[1,2,3,4],fc:14},{lngs:["lt"],nr:[1,2,10],fc:15},{lngs:["lv"],nr:[1,2,0],fc:16},{lngs:["mk"],nr:[1,2],fc:17},{lngs:["mnk"],nr:[0,1,2],fc:18},{lngs:["mt"],nr:[1,2,11,20],fc:19},{lngs:["or"],nr:[2,1],fc:2},{lngs:["ro"],nr:[1,2,20],fc:20},{lngs:["sl"],nr:[5,1,2,3],fc:21},{lngs:["he","iw"],nr:[1,2,20,21],fc:22}],Ct={1:function(e){return Number(e>1)},2:function(e){return Number(1!=e)},3:function(e){return 0},4:function(e){return Number(e%10==1&&e%100!=11?0:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?1:2)},5:function(e){return Number(0==e?0:1==e?1:2==e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5)},6:function(e){return Number(1==e?0:e>=2&&e<=4?1:2)},7:function(e){return Number(1==e?0:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?1:2)},8:function(e){return Number(1==e?0:2==e?1:8!=e&&11!=e?2:3)},9:function(e){return Number(e>=2)},10:function(e){return Number(1==e?0:2==e?1:e<7?2:e<11?3:4)},11:function(e){return Number(1==e||11==e?0:2==e||12==e?1:e>2&&e<20?2:3)},12:function(e){return Number(e%10!=1||e%100==11)},13:function(e){return Number(0!==e)},14:function(e){return Number(1==e?0:2==e?1:3==e?2:3)},15:function(e){return Number(e%10==1&&e%100!=11?0:e%10>=2&&(e%100<10||e%100>=20)?1:2)},16:function(e){return Number(e%10==1&&e%100!=11?0:0!==e?1:2)},17:function(e){return Number(1==e||e%10==1&&e%100!=11?0:1)},18:function(e){return Number(0==e?0:1==e?1:2)},19:function(e){return Number(1==e?0:0==e||e%100>1&&e%100<11?1:e%100>10&&e%100<20?2:3)},20:function(e){return Number(1==e?0:0==e||e%100>0&&e%100<20?1:2)},21:function(e){return Number(e%100==1?1:e%100==2?2:e%100==3||e%100==4?3:0)},22:function(e){return Number(1==e?0:2==e?1:(e<0||e>10)&&e%10==0?2:3)}};const xt=["v1","v2","v3"],wt=["v4"],_t={zero:0,one:1,two:2,few:3,many:4,other:5};class kt{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.languageUtils=e,this.options=t,this.logger=et.create("pluralResolver"),this.options.compatibilityJSON&&!wt.includes(this.options.compatibilityJSON)||"undefined"!=typeof Intl&&Intl.PluralRules||(this.options.compatibilityJSON="v3",this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.")),this.rules=function(){const e={};return yt.forEach((t=>{t.lngs.forEach((r=>{e[r]={numbers:t.nr,plurals:Ct[t.fc]}}))})),e}()}addRule(e,t){this.rules[e]=t}getRule(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(this.shouldUseIntlApi())try{return new Intl.PluralRules(pt(e),{type:t.ordinal?"ordinal":"cardinal"})}catch{return}return this.rules[e]||this.rules[this.languageUtils.getLanguagePartFromCode(e)]}needsPlural(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const r=this.getRule(e,t);return this.shouldUseIntlApi()?r&&r.resolvedOptions().pluralCategories.length>1:r&&r.numbers.length>1}getPluralFormsOfKey(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.getSuffixes(e,r).map((e=>`${t}${e}`))}getSuffixes(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const r=this.getRule(e,t);return r?this.shouldUseIntlApi()?r.resolvedOptions().pluralCategories.sort(((e,t)=>_t[e]-_t[t])).map((e=>`${this.options.prepend}${t.ordinal?`ordinal${this.options.prepend}`:""}${e}`)):r.numbers.map((r=>this.getSuffix(e,r,t))):[]}getSuffix(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const n=this.getRule(e,r);return n?this.shouldUseIntlApi()?`${this.options.prepend}${r.ordinal?`ordinal${this.options.prepend}`:""}${n.select(t)}`:this.getSuffixRetroCompatible(n,t):(this.logger.warn(`no plural rule found for: ${e}`),"")}getSuffixRetroCompatible(e,t){const r=e.noAbs?e.plurals(t):e.plurals(Math.abs(t));let n=e.numbers[r];this.options.simplifyPluralSuffix&&2===e.numbers.length&&1===e.numbers[0]&&(2===n?n="plural":1===n&&(n=""));const o=()=>this.options.prepend&&n.toString()?this.options.prepend+n.toString():n.toString();return"v1"===this.options.compatibilityJSON?1===n?"":"number"==typeof n?`_plural_${n.toString()}`:o():"v2"===this.options.compatibilityJSON||this.options.simplifyPluralSuffix&&2===e.numbers.length&&1===e.numbers[0]?o():this.options.prepend&&r.toString()?this.options.prepend+r.toString():r.toString()}shouldUseIntlApi(){return!xt.includes(this.options.compatibilityJSON)}}function St(e,t,r){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:".",o=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],i=function(e,t,r){const n=st(e,r);return void 0!==n?n:st(t,r)}(e,t,r);return!i&&o&&"string"==typeof r&&(i=ht(e,r,n),void 0===i&&(i=ht(t,r,n))),i}class $t{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.logger=et.create("interpolator"),this.options=e,this.format=e.interpolation&&e.interpolation.format||(e=>e),this.init(e)}init(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};e.interpolation||(e.interpolation={escapeValue:!0});const t=e.interpolation;this.escape=void 0!==t.escape?t.escape:dt,this.escapeValue=void 0===t.escapeValue||t.escapeValue,this.useRawValueToEscape=void 0!==t.useRawValueToEscape&&t.useRawValueToEscape,this.prefix=t.prefix?lt(t.prefix):t.prefixEscaped||"{{",this.suffix=t.suffix?lt(t.suffix):t.suffixEscaped||"}}",this.formatSeparator=t.formatSeparator?t.formatSeparator:t.formatSeparator||",",this.unescapePrefix=t.unescapeSuffix?"":t.unescapePrefix||"-",this.unescapeSuffix=this.unescapePrefix?"":t.unescapeSuffix||"",this.nestingPrefix=t.nestingPrefix?lt(t.nestingPrefix):t.nestingPrefixEscaped||lt("$t("),this.nestingSuffix=t.nestingSuffix?lt(t.nestingSuffix):t.nestingSuffixEscaped||lt(")"),this.nestingOptionsSeparator=t.nestingOptionsSeparator?t.nestingOptionsSeparator:t.nestingOptionsSeparator||",",this.maxReplaces=t.maxReplaces?t.maxReplaces:1e3,this.alwaysFormat=void 0!==t.alwaysFormat&&t.alwaysFormat,this.resetRegExp()}reset(){this.options&&this.init(this.options)}resetRegExp(){const e=`${this.prefix}(.+?)${this.suffix}`;this.regexp=new RegExp(e,"g");const t=`${this.prefix}${this.unescapePrefix}(.+?)${this.unescapeSuffix}${this.suffix}`;this.regexpUnescape=new RegExp(t,"g");const r=`${this.nestingPrefix}(.+?)${this.nestingSuffix}`;this.nestingRegexp=new RegExp(r,"g")}interpolate(e,t,r,n){let o,i,s;const a=this.options&&this.options.interpolation&&this.options.interpolation.defaultVariables||{};function l(e){return e.replace(/\$/g,"$$$$")}const c=e=>{if(e.indexOf(this.formatSeparator)<0){const o=St(t,a,e,this.options.keySeparator,this.options.ignoreJSONStructure);return this.alwaysFormat?this.format(o,void 0,r,{...n,...t,interpolationkey:e}):o}const o=e.split(this.formatSeparator),i=o.shift().trim(),s=o.join(this.formatSeparator).trim();return this.format(St(t,a,i,this.options.keySeparator,this.options.ignoreJSONStructure),s,r,{...n,...t,interpolationkey:i})};this.resetRegExp();const d=n&&n.missingInterpolationHandler||this.options.missingInterpolationHandler,u=n&&n.interpolation&&void 0!==n.interpolation.skipOnVariables?n.interpolation.skipOnVariables:this.options.interpolation.skipOnVariables;return[{regex:this.regexpUnescape,safeValue:e=>l(e)},{regex:this.regexp,safeValue:e=>this.escapeValue?l(this.escape(e)):l(e)}].forEach((t=>{for(s=0;o=t.regex.exec(e);){const r=o[1].trim();if(i=c(r),void 0===i)if("function"==typeof d){const t=d(e,o,n);i="string"==typeof t?t:""}else if(n&&Object.prototype.hasOwnProperty.call(n,r))i="";else{if(u){i=o[0];continue}this.logger.warn(`missed to pass in variable ${r} for interpolating ${e}`),i=""}else"string"==typeof i||this.useRawValueToEscape||(i=nt(i));const a=t.safeValue(i);if(e=e.replace(o[0],a),u?(t.regex.lastIndex+=i.length,t.regex.lastIndex-=o[0].length):t.regex.lastIndex=0,s++,s>=this.maxReplaces)break}})),e}nest(e,t){let r,n,o,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};function s(e,t){const r=this.nestingOptionsSeparator;if(e.indexOf(r)<0)return e;const n=e.split(new RegExp(`${r}[ ]*{`));let i=`{${n[1]}`;e=n[0],i=this.interpolate(i,o);const s=i.match(/'/g),a=i.match(/"/g);(s&&s.length%2==0&&!a||a.length%2!=0)&&(i=i.replace(/'/g,'"'));try{o=JSON.parse(i),t&&(o={...t,...o})}catch(t){return this.logger.warn(`failed parsing options string in nesting for key ${e}`,t),`${e}${r}${i}`}return delete o.defaultValue,e}for(;r=this.nestingRegexp.exec(e);){let a=[];o={...i},o=o.replace&&"string"!=typeof o.replace?o.replace:o,o.applyPostProcessor=!1,delete o.defaultValue;let l=!1;if(-1!==r[0].indexOf(this.formatSeparator)&&!/{.*}/.test(r[1])){const e=r[1].split(this.formatSeparator).map((e=>e.trim()));r[1]=e.shift(),a=e,l=!0}if(n=t(s.call(this,r[1].trim(),o),o),n&&r[0]===e&&"string"!=typeof n)return n;"string"!=typeof n&&(n=nt(n)),n||(this.logger.warn(`missed to resolve ${r[1]} for nesting ${e}`),n=""),l&&(n=a.reduce(((e,t)=>this.format(e,t,i.lng,{...i,interpolationkey:r[1].trim()})),n.trim())),e=e.replace(r[0],n),this.regexp.lastIndex=0}return e}}function Et(e){const t={};return function(r,n,o){const i=n+JSON.stringify(o);let s=t[i];return s||(s=e(pt(n),o),t[i]=s),s(r)}}class Ot{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.logger=et.create("formatter"),this.options=e,this.formats={number:Et(((e,t)=>{const r=new Intl.NumberFormat(e,{...t});return e=>r.format(e)})),currency:Et(((e,t)=>{const r=new Intl.NumberFormat(e,{...t,style:"currency"});return e=>r.format(e)})),datetime:Et(((e,t)=>{const r=new Intl.DateTimeFormat(e,{...t});return e=>r.format(e)})),relativetime:Et(((e,t)=>{const r=new Intl.RelativeTimeFormat(e,{...t});return e=>r.format(e,t.range||"day")})),list:Et(((e,t)=>{const r=new Intl.ListFormat(e,{...t});return e=>r.format(e)}))},this.init(e)}init(e){const t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}}).interpolation;this.formatSeparator=t.formatSeparator?t.formatSeparator:t.formatSeparator||","}add(e,t){this.formats[e.toLowerCase().trim()]=t}addCached(e,t){this.formats[e.toLowerCase().trim()]=Et(t)}format(e,t,r){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};const o=t.split(this.formatSeparator).reduce(((e,t)=>{const{formatName:o,formatOptions:i}=function(e){let t=e.toLowerCase().trim();const r={};if(e.indexOf("(")>-1){const n=e.split("(");t=n[0].toLowerCase().trim();const o=n[1].substring(0,n[1].length-1);"currency"===t&&o.indexOf(":")<0?r.currency||(r.currency=o.trim()):"relativetime"===t&&o.indexOf(":")<0?r.range||(r.range=o.trim()):o.split(";").forEach((e=>{if(!e)return;const[t,...n]=e.split(":"),o=n.join(":").trim().replace(/^'+|'+$/g,"");r[t.trim()]||(r[t.trim()]=o),"false"===o&&(r[t.trim()]=!1),"true"===o&&(r[t.trim()]=!0),isNaN(o)||(r[t.trim()]=parseInt(o,10))}))}return{formatName:t,formatOptions:r}}(t);if(this.formats[o]){let t=e;try{const s=n&&n.formatParams&&n.formatParams[n.interpolationkey]||{},a=s.locale||s.lng||n.locale||n.lng||r;t=this.formats[o](e,a,{...i,...n,...s})}catch(e){this.logger.warn(e)}return t}return this.logger.warn(`there was no format function for ${o}`),e}),e);return o}}class Lt extends tt{constructor(e,t,r){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};super(),this.backend=e,this.store=t,this.services=r,this.languageUtils=r.languageUtils,this.options=n,this.logger=et.create("backendConnector"),this.waitingReads=[],this.maxParallelReads=n.maxParallelReads||10,this.readingCalls=0,this.maxRetries=n.maxRetries>=0?n.maxRetries:5,this.retryTimeout=n.retryTimeout>=1?n.retryTimeout:350,this.state={},this.queue=[],this.backend&&this.backend.init&&this.backend.init(r,n.backend,n)}queueLoad(e,t,r,n){const o={},i={},s={},a={};return e.forEach((e=>{let n=!0;t.forEach((t=>{const s=`${e}|${t}`;!r.reload&&this.store.hasResourceBundle(e,t)?this.state[s]=2:this.state[s]<0||(1===this.state[s]?void 0===i[s]&&(i[s]=!0):(this.state[s]=1,n=!1,void 0===i[s]&&(i[s]=!0),void 0===o[s]&&(o[s]=!0),void 0===a[t]&&(a[t]=!0)))})),n||(s[e]=!0)})),(Object.keys(o).length||Object.keys(i).length)&&this.queue.push({pending:i,pendingCount:Object.keys(i).length,loaded:{},errors:[],callback:n}),{toLoad:Object.keys(o),pending:Object.keys(i),toLoadLanguages:Object.keys(s),toLoadNamespaces:Object.keys(a)}}loaded(e,t,r){const n=e.split("|"),o=n[0],i=n[1];t&&this.emit("failedLoading",o,i,t),r&&this.store.addResourceBundle(o,i,r),this.state[e]=t?-1:2;const s={};this.queue.forEach((r=>{!function(e,t,r,n){const{obj:o,k:i}=ot(e,t,Object);o[i]=o[i]||[],n&&(o[i]=o[i].concat(r)),n||o[i].push(r)}(r.loaded,[o],i),function(e,t){void 0!==e.pending[t]&&(delete e.pending[t],e.pendingCount--)}(r,e),t&&r.errors.push(t),0!==r.pendingCount||r.done||(Object.keys(r.loaded).forEach((e=>{s[e]||(s[e]={});const t=r.loaded[e];t.length&&t.forEach((t=>{void 0===s[e][t]&&(s[e][t]=!0)}))})),r.done=!0,r.errors.length?r.callback(r.errors):r.callback())})),this.emit("loaded",s),this.queue=this.queue.filter((e=>!e.done))}read(e,t,r){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:this.retryTimeout,i=arguments.length>5?arguments[5]:void 0;if(!e.length)return i(null,{});if(this.readingCalls>=this.maxParallelReads)return void this.waitingReads.push({lng:e,ns:t,fcName:r,tried:n,wait:o,callback:i});this.readingCalls++;const s=(s,a)=>{if(this.readingCalls--,this.waitingReads.length>0){const e=this.waitingReads.shift();this.read(e.lng,e.ns,e.fcName,e.tried,e.wait,e.callback)}s&&a&&n<this.maxRetries?setTimeout((()=>{this.read.call(this,e,t,r,n+1,2*o,i)}),o):i(s,a)},a=this.backend[r].bind(this.backend);if(2!==a.length)return a(e,t,s);try{const r=a(e,t);r&&"function"==typeof r.then?r.then((e=>s(null,e))).catch(s):s(null,r)}catch(e){s(e)}}prepareLoading(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=arguments.length>3?arguments[3]:void 0;if(!this.backend)return this.logger.warn("No backend was added via i18next.use. Will not load resources."),n&&n();"string"==typeof e&&(e=this.languageUtils.toResolveHierarchy(e)),"string"==typeof t&&(t=[t]);const o=this.queueLoad(e,t,r,n);if(!o.toLoad.length)return o.pending.length||n(),null;o.toLoad.forEach((e=>{this.loadOne(e)}))}load(e,t,r){this.prepareLoading(e,t,{},r)}reload(e,t,r){this.prepareLoading(e,t,{reload:!0},r)}loadOne(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";const r=e.split("|"),n=r[0],o=r[1];this.read(n,o,"read",void 0,void 0,((r,i)=>{r&&this.logger.warn(`${t}loading namespace ${o} for language ${n} failed`,r),!r&&i&&this.logger.log(`${t}loaded namespace ${o} for language ${n}`,i),this.loaded(e,r,i)}))}saveMissing(e,t,r,n,o){let i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{},s=arguments.length>6&&void 0!==arguments[6]?arguments[6]:()=>{};if(this.services.utils&&this.services.utils.hasLoadedNamespace&&!this.services.utils.hasLoadedNamespace(t))this.logger.warn(`did not save key "${r}" as the namespace "${t}" was not yet loaded`,"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");else if(null!=r&&""!==r){if(this.backend&&this.backend.create){const a={...i,isUpdate:o},l=this.backend.create.bind(this.backend);if(l.length<6)try{let o;o=5===l.length?l(e,t,r,n,a):l(e,t,r,n),o&&"function"==typeof o.then?o.then((e=>s(null,e))).catch(s):s(null,o)}catch(e){s(e)}else l(e,t,r,n,s,a)}e&&e[0]&&this.store.addResource(e[0],t,r,n)}}}function Pt(){return{debug:!1,initImmediate:!0,ns:["translation"],defaultNS:["translation"],fallbackLng:["dev"],fallbackNS:!1,supportedLngs:!1,nonExplicitSupportedLngs:!1,load:"all",preload:!1,simplifyPluralSuffix:!0,keySeparator:".",nsSeparator:":",pluralSeparator:"_",contextSeparator:"_",partialBundledLanguages:!1,saveMissing:!1,updateMissing:!1,saveMissingTo:"fallback",saveMissingPlurals:!0,missingKeyHandler:!1,missingInterpolationHandler:!1,postProcess:!1,postProcessPassResolved:!1,returnNull:!1,returnEmptyString:!0,returnObjects:!1,joinArrays:!1,returnedObjectHandler:!1,parseMissingKeyHandler:!1,appendNamespaceToMissingKey:!1,appendNamespaceToCIMode:!1,overloadTranslationOptionHandler:function(e){let t={};if("object"==typeof e[1]&&(t=e[1]),"string"==typeof e[1]&&(t.defaultValue=e[1]),"string"==typeof e[2]&&(t.tDescription=e[2]),"object"==typeof e[2]||"object"==typeof e[3]){const r=e[3]||e[2];Object.keys(r).forEach((e=>{t[e]=r[e]}))}return t},interpolation:{escapeValue:!0,format:(e,t,r,n)=>e,prefix:"{{",suffix:"}}",formatSeparator:",",unescapePrefix:"-",nestingPrefix:"$t(",nestingSuffix:")",nestingOptionsSeparator:",",maxReplaces:1e3,skipOnVariables:!0}}}function Rt(e){return"string"==typeof e.ns&&(e.ns=[e.ns]),"string"==typeof e.fallbackLng&&(e.fallbackLng=[e.fallbackLng]),"string"==typeof e.fallbackNS&&(e.fallbackNS=[e.fallbackNS]),e.supportedLngs&&e.supportedLngs.indexOf("cimode")<0&&(e.supportedLngs=e.supportedLngs.concat(["cimode"])),e}function Nt(){}class Tt extends tt{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0;var r;if(super(),this.options=Rt(e),this.services={},this.logger=et,this.modules={external:[]},r=this,Object.getOwnPropertyNames(Object.getPrototypeOf(r)).forEach((e=>{"function"==typeof r[e]&&(r[e]=r[e].bind(r))})),t&&!this.isInitialized&&!e.isClone){if(!this.options.initImmediate)return this.init(e,t),this;setTimeout((()=>{this.init(e,t)}),0)}}init(){var e=this;let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1?arguments[1]:void 0;"function"==typeof t&&(r=t,t={}),!t.defaultNS&&!1!==t.defaultNS&&t.ns&&("string"==typeof t.ns?t.defaultNS=t.ns:t.ns.indexOf("translation")<0&&(t.defaultNS=t.ns[0]));const n=Pt();function o(e){return e?"function"==typeof e?new e:e:null}if(this.options={...n,...this.options,...Rt(t)},"v1"!==this.options.compatibilityAPI&&(this.options.interpolation={...n.interpolation,...this.options.interpolation}),void 0!==t.keySeparator&&(this.options.userDefinedKeySeparator=t.keySeparator),void 0!==t.nsSeparator&&(this.options.userDefinedNsSeparator=t.nsSeparator),!this.options.isClone){let t;this.modules.logger?et.init(o(this.modules.logger),this.options):et.init(null,this.options),this.modules.formatter?t=this.modules.formatter:"undefined"!=typeof Intl&&(t=Ot);const r=new bt(this.options);this.store=new ft(this.options.resources,this.options);const i=this.services;i.logger=et,i.resourceStore=this.store,i.languageUtils=r,i.pluralResolver=new kt(r,{prepend:this.options.pluralSeparator,compatibilityJSON:this.options.compatibilityJSON,simplifyPluralSuffix:this.options.simplifyPluralSuffix}),!t||this.options.interpolation.format&&this.options.interpolation.format!==n.interpolation.format||(i.formatter=o(t),i.formatter.init(i,this.options),this.options.interpolation.format=i.formatter.format.bind(i.formatter)),i.interpolator=new $t(this.options),i.utils={hasLoadedNamespace:this.hasLoadedNamespace.bind(this)},i.backendConnector=new Lt(o(this.modules.backend),i.resourceStore,i,this.options),i.backendConnector.on("*",(function(t){for(var r=arguments.length,n=new Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];e.emit(t,...n)})),this.modules.languageDetector&&(i.languageDetector=o(this.modules.languageDetector),i.languageDetector.init&&i.languageDetector.init(i,this.options.detection,this.options)),this.modules.i18nFormat&&(i.i18nFormat=o(this.modules.i18nFormat),i.i18nFormat.init&&i.i18nFormat.init(this)),this.translator=new vt(this.services,this.options),this.translator.on("*",(function(t){for(var r=arguments.length,n=new Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];e.emit(t,...n)})),this.modules.external.forEach((e=>{e.init&&e.init(this)}))}if(this.format=this.options.interpolation.format,r||(r=Nt),this.options.fallbackLng&&!this.services.languageDetector&&!this.options.lng){const e=this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);e.length>0&&"dev"!==e[0]&&(this.options.lng=e[0])}this.services.languageDetector||this.options.lng||this.logger.warn("init: no languageDetector is used and no lng is defined");["getResource","hasResourceBundle","getResourceBundle","getDataByLanguage"].forEach((t=>{this[t]=function(){return e.store[t](...arguments)}}));["addResource","addResources","addResourceBundle","removeResourceBundle"].forEach((t=>{this[t]=function(){return e.store[t](...arguments),e}}));const i=rt(),s=()=>{const e=(e,t)=>{this.isInitialized&&!this.initializedStoreOnce&&this.logger.warn("init: i18next is already initialized. You should call init just once!"),this.isInitialized=!0,this.options.isClone||this.logger.log("initialized",this.options),this.emit("initialized",this.options),i.resolve(t),r(e,t)};if(this.languages&&"v1"!==this.options.compatibilityAPI&&!this.isInitialized)return e(null,this.t.bind(this));this.changeLanguage(this.options.lng,e)};return this.options.resources||!this.options.initImmediate?s():setTimeout(s,0),i}loadResources(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Nt;const r="string"==typeof e?e:this.language;if("function"==typeof e&&(t=e),!this.options.resources||this.options.partialBundledLanguages){if(r&&"cimode"===r.toLowerCase())return t();const e=[],n=t=>{if(!t)return;this.services.languageUtils.toResolveHierarchy(t).forEach((t=>{e.indexOf(t)<0&&e.push(t)}))};if(r)n(r);else{this.services.languageUtils.getFallbackCodes(this.options.fallbackLng).forEach((e=>n(e)))}this.options.preload&&this.options.preload.forEach((e=>n(e))),this.services.backendConnector.load(e,this.options.ns,(e=>{e||this.resolvedLanguage||!this.language||this.setResolvedLanguage(this.language),t(e)}))}else t(null)}reloadResources(e,t,r){const n=rt();return e||(e=this.languages),t||(t=this.options.ns),r||(r=Nt),this.services.backendConnector.reload(e,t,(e=>{n.resolve(),r(e)})),n}use(e){if(!e)throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");if(!e.type)throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");return"backend"===e.type&&(this.modules.backend=e),("logger"===e.type||e.log&&e.warn&&e.error)&&(this.modules.logger=e),"languageDetector"===e.type&&(this.modules.languageDetector=e),"i18nFormat"===e.type&&(this.modules.i18nFormat=e),"postProcessor"===e.type&&gt.addPostProcessor(e),"formatter"===e.type&&(this.modules.formatter=e),"3rdParty"===e.type&&this.modules.external.push(e),this}setResolvedLanguage(e){if(e&&this.languages&&!(["cimode","dev"].indexOf(e)>-1))for(let e=0;e<this.languages.length;e++){const t=this.languages[e];if(!(["cimode","dev"].indexOf(t)>-1)&&this.store.hasLanguageSomeTranslations(t)){this.resolvedLanguage=t;break}}}changeLanguage(e,t){var r=this;this.isLanguageChangingTo=e;const n=rt();this.emit("languageChanging",e);const o=e=>{this.language=e,this.languages=this.services.languageUtils.toResolveHierarchy(e),this.resolvedLanguage=void 0,this.setResolvedLanguage(e)},i=(e,i)=>{i?(o(i),this.translator.changeLanguage(i),this.isLanguageChangingTo=void 0,this.emit("languageChanged",i),this.logger.log("languageChanged",i)):this.isLanguageChangingTo=void 0,n.resolve((function(){return r.t(...arguments)})),t&&t(e,(function(){return r.t(...arguments)}))},s=t=>{e||t||!this.services.languageDetector||(t=[]);const r="string"==typeof t?t:this.services.languageUtils.getBestMatchFromCodes(t);r&&(this.language||o(r),this.translator.language||this.translator.changeLanguage(r),this.services.languageDetector&&this.services.languageDetector.cacheUserLanguage&&this.services.languageDetector.cacheUserLanguage(r)),this.loadResources(r,(e=>{i(e,r)}))};return e||!this.services.languageDetector||this.services.languageDetector.async?!e&&this.services.languageDetector&&this.services.languageDetector.async?0===this.services.languageDetector.detect.length?this.services.languageDetector.detect().then(s):this.services.languageDetector.detect(s):s(e):s(this.services.languageDetector.detect()),n}getFixedT(e,t,r){var n=this;const o=function(e,t){let i;if("object"!=typeof t){for(var s=arguments.length,a=new Array(s>2?s-2:0),l=2;l<s;l++)a[l-2]=arguments[l];i=n.options.overloadTranslationOptionHandler([e,t].concat(a))}else i={...t};i.lng=i.lng||o.lng,i.lngs=i.lngs||o.lngs,i.ns=i.ns||o.ns,i.keyPrefix=i.keyPrefix||r||o.keyPrefix;const c=n.options.keySeparator||".";let d;return d=i.keyPrefix&&Array.isArray(e)?e.map((e=>`${i.keyPrefix}${c}${e}`)):i.keyPrefix?`${i.keyPrefix}${c}${e}`:e,n.t(d,i)};return"string"==typeof e?o.lng=e:o.lngs=e,o.ns=t,o.keyPrefix=r,o}t(){return this.translator&&this.translator.translate(...arguments)}exists(){return this.translator&&this.translator.exists(...arguments)}setDefaultNamespace(e){this.options.defaultNS=e}hasLoadedNamespace(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!this.isInitialized)return this.logger.warn("hasLoadedNamespace: i18next was not initialized",this.languages),!1;if(!this.languages||!this.languages.length)return this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty",this.languages),!1;const r=t.lng||this.resolvedLanguage||this.languages[0],n=!!this.options&&this.options.fallbackLng,o=this.languages[this.languages.length-1];if("cimode"===r.toLowerCase())return!0;const i=(e,t)=>{const r=this.services.backendConnector.state[`${e}|${t}`];return-1===r||2===r};if(t.precheck){const e=t.precheck(this,i);if(void 0!==e)return e}return!!this.hasResourceBundle(r,e)||(!(this.services.backendConnector.backend&&(!this.options.resources||this.options.partialBundledLanguages))||!(!i(r,e)||n&&!i(o,e)))}loadNamespaces(e,t){const r=rt();return this.options.ns?("string"==typeof e&&(e=[e]),e.forEach((e=>{this.options.ns.indexOf(e)<0&&this.options.ns.push(e)})),this.loadResources((e=>{r.resolve(),t&&t(e)})),r):(t&&t(),Promise.resolve())}loadLanguages(e,t){const r=rt();"string"==typeof e&&(e=[e]);const n=this.options.preload||[],o=e.filter((e=>n.indexOf(e)<0));return o.length?(this.options.preload=n.concat(o),this.loadResources((e=>{r.resolve(),t&&t(e)})),r):(t&&t(),Promise.resolve())}dir(e){if(e||(e=this.resolvedLanguage||(this.languages&&this.languages.length>0?this.languages[0]:this.language)),!e)return"rtl";const t=this.services&&this.services.languageUtils||new bt(Pt());return["ar","shu","sqr","ssh","xaa","yhd","yud","aao","abh","abv","acm","acq","acw","acx","acy","adf","ads","aeb","aec","afb","ajp","apc","apd","arb","arq","ars","ary","arz","auz","avl","ayh","ayl","ayn","ayp","bbz","pga","he","iw","ps","pbt","pbu","pst","prp","prd","ug","ur","ydd","yds","yih","ji","yi","hbo","men","xmn","fa","jpr","peo","pes","prs","dv","sam","ckb"].indexOf(t.getLanguagePartFromCode(e))>-1||e.toLowerCase().indexOf("-arab")>1?"rtl":"ltr"}static createInstance(){return new Tt(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},arguments.length>1?arguments[1]:void 0)}cloneInstance(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Nt;const r=e.forkResourceStore;r&&delete e.forkResourceStore;const n={...this.options,...e,isClone:!0},o=new Tt(n);void 0===e.debug&&void 0===e.prefix||(o.logger=o.logger.clone(e));return["store","services","language"].forEach((e=>{o[e]=this[e]})),o.services={...this.services},o.services.utils={hasLoadedNamespace:o.hasLoadedNamespace.bind(o)},r&&(o.store=new ft(this.store.data,n),o.services.resourceStore=o.store),o.translator=new vt(o.services,n),o.translator.on("*",(function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];o.emit(e,...r)})),o.init(n,t),o.translator.options=n,o.translator.backendConnector.services.utils={hasLoadedNamespace:o.hasLoadedNamespace.bind(o)},o}toJSON(){return{options:this.options,store:this.store,language:this.language,languages:this.languages,resolvedLanguage:this.resolvedLanguage}}}const zt=Tt.createInstance();zt.createInstance=Tt.createInstance;const Ft=zt.createInstance,jt=(zt.dir,zt.init,zt.loadResources,zt.reloadResources,zt.use,zt.changeLanguage,zt.getFixedT,zt.t,zt.exists,zt.setDefaultNamespace,zt.hasLoadedNamespace,zt.loadNamespaces,zt.loadLanguages,JSON.parse('{"list-process-models":"FR-Process models","error-title":"FR-Error","error-retry":"FR-An error has occurred. Process model cannot be created at this time.","error-400":"FR-An error has occurred. Page not available.","error-401":"FR-<span class=\\"bolded\\">Unauthorized</span><br />You are not authorized to perform the requested action.If you think you should have access please contact your <a href=\\"mailto:promapp-noreply@nintex.com\\">Promaster</a> or internal support team to request appropriate permissions to be enabled.","error-403":"FR-<span class=\\"bolded\\">Unauthorized</span><br />You are not authorized to perform the requested action. If you think you should have access please contact your <a href=\\"mailto:promapp-noreply@nintex.com\\">Promaster</a> or internal support team to request appropriate permissions to be enabled.","error-404":"FR-We are unable to find the page you requested.<br /><br />It has probably:<br />- Moved to another location<br />- No longer exists.<br /><br />If you feel something is missing that should be here please contact Process Manager Support.","error-500":"FR-An error has occurred. Page not available. Please contact your Promaster or internal support team to request appropriate permissions to be enabled.","error-502":"FR-An error has occurred. Page not available. Please contact your Promaster or internal support team to request appropriate permissions to be enabled.","error-503":"FR-An error has occurred. Page not available. Please contact your Promaster or internal support team to request appropriate permissions to be enabled.","error-504":"FR-An error has occurred. Page not available. Please contact your Promaster or internal support team to request appropriate permissions to be enabled.","error-default":"FR-An error has occurred. Page not available. Please contact your Promaster or internal support team to request appropriate permissions to be enabled.","retry-text":"FR-Retry","close-text":"FR-close"}')),Dt=Ft({fallbackLng:"en",debug:!0,cleanCode:!0,resources:{en:{bpmnList:JSON.parse('{"list-process-models":"Process models","error-title":"Error","error-retry":"An error has occurred. Process model cannot be created at this time.","error-400":"An error has occurred. Page not available.","error-401":"<span class=\\"bolded\\">Unauthorized</span><br />You are not authorized to perform the requested action.If you think you should have access please contact your <a href=\\"mailto:promapp-noreply@nintex.com\\">Promaster</a> or internal support team to request appropriate permissions to be enabled.","error-403":"<span class=\\"bolded\\">Unauthorized</span><br />You are not authorized to perform the requested action. If you think you should have access please contact your <a href=\\"mailto:promapp-noreply@nintex.com\\">Promaster</a> or internal support team to request appropriate permissions to be enabled.","error-404":"We are unable to find the page you requested.<br /><br />It has probably:<br />- Moved to another location<br />- No longer exists.<br /><br />If you feel something is missing that should be here please contact Process Manager Support.","error-500":"An error has occurred. Page not available. Please contact your Promaster or internal support team to request appropriate permissions to be enabled.","error-502":"An error has occurred. Page not available. Please contact your Promaster or internal support team to request appropriate permissions to be enabled.","error-503":"An error has occurred. Page not available. Please contact your Promaster or internal support team to request appropriate permissions to be enabled.","error-504":"An error has occurred. Page not available. Please contact your Promaster or internal support team to request appropriate permissions to be enabled.","error-default":"An error has occurred. Page not available. Please contact your Promaster or internal support team to request appropriate permissions to be enabled.","retry-text":"Retry","close-text":"close"}')},fr:{bpmnList:{}},na:{bpmnList:jt}},defaultNS:"bpmnList"});Dt.init();const Bt=Dt;class Mt{static async setLanguage(e){await Bt.changeLanguage(e)}static getInstance(){return this._translationService||(this._translationService=new Mt,Bt.changeLanguage(navigator.language)),this._translationService}static resetInstance(){return this._translationService=null,this.getInstance()}getTranslation(e){return`${Bt.t(e)}`}getTranslationAndReplace(e,t){let r=`${Bt.t(e)}`;return t.forEach(((e,t)=>{r=r.replace(`{${t}}`,e)})),r}}class It extends(R(N.oi)){static get scopedElements(){return{}}static get styles(){return Ze}constructor(){super(),this._translationService=Mt.getInstance()}render(){return N.dy`<header>
      <h1>${this._translationService.getTranslation("list-process-models")}</h1>
    </header>`}}var Ht=r(3311);const{I:Ut}=Ht._$LH,Vt=1,qt=2,Kt=e=>(...t)=>({_$litDirective$:e,values:t});class Wt{constructor(e){}get _$AU(){return this._$AM._$AU}_$AT(e,t,r){this._$Ct=e,this._$AM=t,this._$Ci=r}_$AS(e,t){return this.update(e,t)}update(e,t){return this.render(...t)}}const Jt=(e,t)=>{var r,n;const o=e._$AN;if(void 0===o)return!1;for(const e of o)null===(n=(r=e)._$AO)||void 0===n||n.call(r,t,!1),Jt(e,t);return!0},Yt=e=>{let t,r;do{if(void 0===(t=e._$AM))break;r=t._$AN,r.delete(e),e=t}while(0===(null==r?void 0:r.size))},Gt=e=>{for(let t;t=e._$AM;e=t){let r=t._$AN;if(void 0===r)t._$AN=r=new Set;else if(r.has(e))break;r.add(e),Xt(t)}};function Zt(e){void 0!==this._$AN?(Yt(this),this._$AM=e,Gt(this)):this._$AM=e}function Qt(e,t=!1,r=0){const n=this._$AH,o=this._$AN;if(void 0!==o&&0!==o.size)if(t)if(Array.isArray(n))for(let e=r;e<n.length;e++)Jt(n[e],!1),Yt(n[e]);else null!=n&&(Jt(n,!1),Yt(n));else Jt(this,e)}const Xt=e=>{var t,r,n,o;e.type==qt&&(null!==(t=(n=e)._$AP)&&void 0!==t||(n._$AP=Qt),null!==(r=(o=e)._$AQ)&&void 0!==r||(o._$AQ=Zt))};class er extends Wt{constructor(){super(...arguments),this._$AN=void 0}_$AT(e,t,r){super._$AT(e,t,r),Gt(this),this.isConnected=e._$AU}_$AO(e,t=!0){var r,n;e!==this.isConnected&&(this.isConnected=e,e?null===(r=this.reconnected)||void 0===r||r.call(this):null===(n=this.disconnected)||void 0===n||n.call(this)),t&&(Jt(this,e),Yt(this))}setValue(e){if((e=>void 0===e.strings)(this._$Ct))this._$Ct._$AI(e,this);else{const t=[...this._$Ct._$AH];t[this._$Ci]=e,this._$Ct._$AI(t,this,0)}}disconnected(){}reconnected(){}}class tr{constructor(e){this.G=e}disconnect(){this.G=void 0}reconnect(e){this.G=e}deref(){return this.G}}class rr{constructor(){this.Y=void 0,this.Z=void 0}get(){return this.Y}pause(){var e;null!==(e=this.Y)&&void 0!==e||(this.Y=new Promise((e=>this.Z=e)))}resume(){var e;null===(e=this.Z)||void 0===e||e.call(this),this.Y=this.Z=void 0}}const nr=e=>!(e=>null===e||"object"!=typeof e&&"function"!=typeof e)(e)&&"function"==typeof e.then,or=1073741823;const ir=Kt(class extends er{constructor(){super(...arguments),this._$C_t=or,this._$Cwt=[],this._$Cq=new tr(this),this._$CK=new rr}render(...e){var t;return null!==(t=e.find((e=>!nr(e))))&&void 0!==t?t:Ht.Jb}update(e,t){const r=this._$Cwt;let n=r.length;this._$Cwt=t;const o=this._$Cq,i=this._$CK;this.isConnected||this.disconnected();for(let e=0;e<t.length&&!(e>this._$C_t);e++){const s=t[e];if(!nr(s))return this._$C_t=e,s;e<n&&s===r[e]||(this._$C_t=or,n=0,Promise.resolve(s).then((async e=>{for(;i.get();)await i.get();const t=o.deref();if(void 0!==t){const r=t._$Cwt.indexOf(s);r>-1&&r<t._$C_t&&(t._$C_t=r,t.setValue(e))}})))}return Ht.Jb}disconnected(){this._$Cq.disconnect(),this._$CK.pause()}reconnected(){this._$Cq.reconnect(this),this._$CK.resume()}}),sr=[Ve,N.iv`
  :host {
    display: grid;
  }
`];class ar extends Wt{constructor(e){if(super(e),this.et=Ht.Ld,e.type!==qt)throw Error(this.constructor.directiveName+"() can only be used in child bindings")}render(e){if(e===Ht.Ld||null==e)return this.ft=void 0,this.et=e;if(e===Ht.Jb)return e;if("string"!=typeof e)throw Error(this.constructor.directiveName+"() called with a non-string value");if(e===this.et)return this.ft;this.et=e;const t=[e];return t.raw=t,this.ft={_$litType$:this.constructor.resultType,strings:t,values:[]}}}ar.directiveName="unsafeHTML",ar.resultType=1;const lr=Kt(ar);var cr=function(e){function t(t){var r=e.call(this)||this;return r._value=t,r}return V(t,e),Object.defineProperty(t.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),t.prototype._subscribe=function(t){var r=e.prototype._subscribe.call(this,t);return!r.closed&&t.next(this._value),r},t.prototype.getValue=function(){var e=this,t=e.hasError,r=e.thrownError,n=e._value;if(t)throw r;return this._throwIfClosed(),n},t.prototype.next=function(t){e.prototype.next.call(this,this._value=t)},t}(_e);const dr=[Ve,N.iv`
  .modal-content {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    gap: ${We};
  }

  .bolded {
    font-weight: var(--ne-ref-font-weight-bold);
  }

  .message-label {
    flex-grow: 1;
    font-family: var(--ne-ref-font-family-open-sans);
    font-weight: var(--ne-ref-font-weight-regular);
    font-size: var(--ne-ref-font-size-04);
    line-height: var(--ne-ref-line-height-smal);
    color: var(--primary-text-color);
    padding-top: ${qe};
  }

  .icon {
    flex-shrink: 0;
    display: block;
    justify-content: center;
    align-items: center;
    align-content: center;
    box-sizing: border-box;
    width: 50px;
    height: 50px;
    color: var(--nx-red-60);
  }
  .modal-footer {
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    justify-content: flex-end;
    align-items: center;
    align-content: center;
  }

  .modal-footer .button {
    margin-left: ${Ke};
  }
`];var ur=function(e,t,r,n){var o,i=arguments.length,s=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,r,s):o(t,r))||s);return i>3&&s&&Object.defineProperty(t,r,s),s};class hr extends(R(N.oi)){static get scopedElements(){return{"ne-button-set":customElements.get("ne-button-set"),"ne-modal":customElements.get("ne-modal"),"ne-button":customElements.get("ne-button"),"ne-icon":customElements.get("ne-icon")}}static get styles(){return dr}constructor(){super(),this.closeEvent=new cr(null),this.retryLimit=3,this.retryCount=0,this.canRetry=!1,this._onClose=()=>{this.closeEvent.next("close")},this._onRetryClick=()=>{this.closeEvent.next("retry")},this._translationService=Mt.getInstance()}getErrorMessage(){if(this.errorMessage)return N.dy`<p>${this.errorMessage}</p>`;switch(this.errorCode){case"400":return N.dy`${lr(this._translationService.getTranslation("error-400"))}`;case"401":return N.dy`${lr(this._translationService.getTranslation("error-401"))}`;case"403":return N.dy`${lr(this._translationService.getTranslation("error-403"))}`;case"404":return N.dy`${lr(this._translationService.getTranslation("error-404"))}`;case"500":return N.dy`${lr(this._translationService.getTranslation("error-500"))}`;case"502":return N.dy`${lr(this._translationService.getTranslation("error-502"))}`;case"503":return N.dy`${lr(this._translationService.getTranslation("error-503"))}`;case"504":return N.dy`${lr(this._translationService.getTranslation("error-504"))}`;default:return N.dy`${lr(this._translationService.getTranslation("error-default"))}`}}render(){return N.dy`<ne-modal
      ?open=${this.open}
      header=${this.header}
      @ne-close=${this._onClose}
      ><div class="modal-content">
        <span class="icon">
          <ne-icon type="dangerExclamation" class="icon-fill"></ne-icon>
        </span>
        <label class="message-label">${this.getErrorMessage()}</label>
      </div>
      <div slot="footer" class="modal-footer right-start">
        <ne-button
          class="button close"
          variant=${this.retryCount<this.retryLimit&&this.canRetry?"secondary":"primary"}
          @click=${this._onClose}
          >${this._translationService.getTranslation("close-text")}</ne-button
        >
        ${this.retryCount<this.retryLimit&&this.canRetry?N.dy`<ne-button
              class="button retry"
              variant="primary"
              @click=${this._onRetryClick}
              >${this._translationService.getTranslation("retry-text")}</ne-button
            >`:null}
      </div></ne-modal
    >`}}ur([j({type:Boolean,reflect:!0})],hr.prototype,"open",void 0),ur([j({type:String,reflect:!0})],hr.prototype,"header",void 0),ur([j({type:String,reflect:!0})],hr.prototype,"errorMessage",void 0),ur([j({type:Number,reflect:!0})],hr.prototype,"retryLimit",void 0),ur([j({type:Number,reflect:!0})],hr.prototype,"retryCount",void 0),ur([j({type:String,reflect:!0})],hr.prototype,"errorCode",void 0),ur([j({type:Boolean,reflect:!0})],hr.prototype,"canRetry",void 0);var pr=function(e,t,r,n){var o,i=arguments.length,s=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,r,s):o(t,r))||s);return i>3&&s&&Object.defineProperty(t,r,s),s};class fr extends(R(N.oi)){static get scopedElements(){return{"pi-retry-error-modal":hr,"ne-table":customElements.get("ne-table"),"ne-theader":customElements.get("ne-theader"),"ne-button":customElements.get("ne-button"),"ne-label":customElements.get("ne-label"),"ne-status-overlay":customElements.get("ne-status-overlay")}}static get styles(){return sr}constructor(){super(),this._showStatusOverlay=!1,this._showErrorRetry=!1,this._canRetry=!1,this._retryCount=0,this._onCellClicked=e=>{e.detail&&0===e.detail.column&&this._eventService.triggerOpenProcess(e)},this._openProcess=e=>{Ee.fireExternal(this,"pi-open-process",{detail:e})},this._onInitialized=()=>{Ee.fireExternal(this,"pi-initialized",{})},this._onErrorRetryModalClose=e=>{if(e)switch(this._showErrorRetry=!1,e){case"close":Ee.fireExternal(this,"pi-completed",{});break;case"retry":this._processListResult=this.fetchData()}},this._processApiService=Oe.getInstance(),this._eventService=Ee.getInstance(),this._translationService=Mt.getInstance()}_sortProcesses(e){e.value.sort(((e,t)=>new Date(t.lastModified).getTime()-new Date(e.lastModified).getTime()))}_tableTemplate(e){return N.dy`<ne-table .data=${e.value} @ne-click="${this._onCellClicked}">
      <template slot="head">
        <ne-theader>Model name</ne-theader>
        <ne-theader>Version</ne-theader>
        <ne-theader>Process group</ne-theader>
        <ne-theader>Model owner</ne-theader>
        <ne-theader>Model expert</ne-theader>
        <ne-theader>Modified date</ne-theader>
      </template>
      <template slot="row">
        <ne-button id="{{title}}" variant="text" left-icon="processModel"
          >{{title}}</ne-button
        >
        <ne-label id="{{version}}">{{version}}</ne-label>
        <ne-label id="{{processGroupName}}">{{processGroupName}}</ne-label>
        <ne-label id="{{ownerName}}">{{ownerName}}</ne-label>
        <ne-label id="{{expertName}}">{{expertName}}</ne-label>
        <ne-label id="{{lastModified}}">{{lastModified}}</ne-label>
      </template>
    </ne-table>`}async fetchData(){try{this._showStatusOverlay=!0;const e=await this._processApiService.getProcessList();return this._sortProcesses(e),this._showStatusOverlay=!1,this._tableTemplate(e)}catch(e){return e instanceof Error?(this._errorMessage=e.message,"400"===this._errorMessage&&(this._canRetry=!0),this._showStatusOverlay=!1,this._showErrorRetry=!0,this._retryCount+=1,N.dy``):(this._showStatusOverlay=!1,N.dy``)}}render(){return N.dy`${ir(this._processListResult,N.dy``)}<ne-status-overlay
        ?show=${this._showStatusOverlay}
        status-delay="500"
      ></ne-status-overlay>
      <pi-retry-error-modal
        class="retry-modal"
        ?open=${this._showErrorRetry}
        header=${this._translationService.getTranslation("error-title")}
        errorCode=${this._errorMessage}
        retryCount=${this._retryCount}
        .canRetry=${this._canRetry}
      ></pi-retry-error-modal>`}connectedCallback(){super.connectedCallback&&super.connectedCallback(),this._initializedSubscription=this._eventService.initializedSubject.subscribe({next:this._onInitialized}),this._openProcessSubscription=this._eventService.openProcessSubscription.subscribe({next:this._openProcess}),this._eventService.triggerInitialized(),this._processListResult=this.fetchData()}firstUpdated(){this._errorRetryModal.closeEvent.subscribe({next:this._onErrorRetryModalClose})}disconnectedCallback(){super.disconnectedCallback&&super.disconnectedCallback(),this._initializedSubscription.unsubscribe(),this._openProcessSubscription.unsubscribe()}}function gr(e,t,r,n){var o,i=arguments.length,s=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,r,s):o(t,r))||s);return i>3&&s&&Object.defineProperty(t,r,s),s}pr([function(e,t){return B({descriptor:r=>{const n={get(){var t,r;return null!==(r=null===(t=this.renderRoot)||void 0===t?void 0:t.querySelector(e))&&void 0!==r?r:null},enumerable:!0,configurable:!0};if(t){const t="symbol"==typeof r?Symbol():"__"+r;n.get=function(){var r,n;return void 0===this[t]&&(this[t]=null!==(n=null===(r=this.renderRoot)||void 0===r?void 0:r.querySelector(e))&&void 0!==n?n:null),this[t]}}return n}})}(".retry-modal")],fr.prototype,"_errorRetryModal",void 0),pr([D()],fr.prototype,"_processListResult",void 0),pr([D()],fr.prototype,"_showStatusOverlay",void 0),pr([D()],fr.prototype,"_showErrorRetry",void 0),pr([D()],fr.prototype,"_canRetry",void 0),pr([D()],fr.prototype,"_retryCount",void 0),pr([D()],fr.prototype,"_errorMessage",void 0);const Ar=N.iv`
  :host {
    all: initial;
  }

  .hidden {
    display: none;
  }
`,vr=Kt(class extends Wt{constructor(e){var t;if(super(e),e.type!==Vt||"class"!==e.name||(null===(t=e.strings)||void 0===t?void 0:t.length)>2)throw Error("`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.")}render(e){return" "+Object.keys(e).filter((t=>e[t])).join(" ")+" "}update(e,[t]){var r,n;if(void 0===this.it){this.it=new Set,void 0!==e.strings&&(this.nt=new Set(e.strings.join(" ").split(/\s/).filter((e=>""!==e))));for(const e in t)t[e]&&!(null===(r=this.nt)||void 0===r?void 0:r.has(e))&&this.it.add(e);return this.render(t)}const o=e.element.classList;this.it.forEach((e=>{e in t||(o.remove(e),this.it.delete(e))}));for(const e in t){const r=!!t[e];r===this.it.has(e)||(null===(n=this.nt)||void 0===n?void 0:n.has(e))||(r?(o.add(e),this.it.add(e)):(o.remove(e),this.it.delete(e)))}return Ht.Jb}}),mr=new WeakMap,br=e=>"function"==typeof e&&mr.has(e),yr="undefined"!=typeof window&&null!=window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,Cr={},xr={},wr=`{{lit-${String(Math.random()).slice(2)}}}`,_r=`\x3c!--${wr}--\x3e`,kr=new RegExp(`${wr}|${_r}`),Sr="$lit$";class $r{constructor(e,t){this.parts=[],this.element=t;const r=[],n=[],o=document.createTreeWalker(t.content,133,null,!1);let i=0,s=-1,a=0;const{strings:l,values:{length:c}}=e;for(;a<c;){const e=o.nextNode();if(null!==e){if(s++,1===e.nodeType){if(e.hasAttributes()){const t=e.attributes,{length:r}=t;let n=0;for(let e=0;e<r;e++)Er(t[e].name,Sr)&&n++;for(;n-- >0;){const t=l[a],r=Pr.exec(t)[2],n=r.toLowerCase()+Sr,o=e.getAttribute(n);e.removeAttribute(n);const i=o.split(kr);this.parts.push({type:"attribute",index:s,name:r,strings:i}),a+=i.length-1}}"TEMPLATE"===e.tagName&&(n.push(e),o.currentNode=e.content)}else if(3===e.nodeType){const t=e.data;if(t.indexOf(wr)>=0){const n=e.parentNode,o=t.split(kr),i=o.length-1;for(let t=0;t<i;t++){let r,i=o[t];if(""===i)r=Lr();else{const e=Pr.exec(i);null!==e&&Er(e[2],Sr)&&(i=i.slice(0,e.index)+e[1]+e[2].slice(0,-5)+e[3]),r=document.createTextNode(i)}n.insertBefore(r,e),this.parts.push({type:"node",index:++s})}""===o[i]?(n.insertBefore(Lr(),e),r.push(e)):e.data=o[i],a+=i}}else if(8===e.nodeType)if(e.data===wr){const t=e.parentNode;null!==e.previousSibling&&s!==i||(s++,t.insertBefore(Lr(),e)),i=s,this.parts.push({type:"node",index:s}),null===e.nextSibling?e.data="":(r.push(e),s--),a++}else{let t=-1;for(;-1!==(t=e.data.indexOf(wr,t+1));)this.parts.push({type:"node",index:-1}),a++}}else o.currentNode=n.pop()}for(const e of r)e.parentNode.removeChild(e)}}const Er=(e,t)=>{const r=e.length-t.length;return r>=0&&e.slice(r)===t},Or=e=>-1!==e.index,Lr=()=>document.createComment(""),Pr=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;class Rr{constructor(e,t,r){this.__parts=[],this.template=e,this.processor=t,this.options=r}update(e){let t=0;for(const r of this.__parts)void 0!==r&&r.setValue(e[t]),t++;for(const e of this.__parts)void 0!==e&&e.commit()}_clone(){const e=yr?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),t=[],r=this.template.parts,n=document.createTreeWalker(e,133,null,!1);let o,i=0,s=0,a=n.nextNode();for(;i<r.length;)if(o=r[i],Or(o)){for(;s<o.index;)s++,"TEMPLATE"===a.nodeName&&(t.push(a),n.currentNode=a.content),null===(a=n.nextNode())&&(n.currentNode=t.pop(),a=n.nextNode());if("node"===o.type){const e=this.processor.handleTextExpression(this.options);e.insertAfterNode(a.previousSibling),this.__parts.push(e)}else this.__parts.push(...this.processor.handleAttributeExpressions(a,o.name,o.strings,this.options));i++}else this.__parts.push(void 0),i++;return yr&&(document.adoptNode(e),customElements.upgrade(e)),e}}const Nr=window.trustedTypes&&trustedTypes.createPolicy("lit-html",{createHTML:e=>e}),Tr=` ${wr} `;class zr{constructor(e,t,r,n){this.strings=e,this.values=t,this.type=r,this.processor=n}getHTML(){const e=this.strings.length-1;let t="",r=!1;for(let n=0;n<e;n++){const e=this.strings[n],o=e.lastIndexOf("\x3c!--");r=(o>-1||r)&&-1===e.indexOf("--\x3e",o+1);const i=Pr.exec(e);t+=null===i?e+(r?Tr:_r):e.substr(0,i.index)+i[1]+i[2]+Sr+i[3]+wr}return t+=this.strings[e],t}getTemplateElement(){const e=document.createElement("template");let t=this.getHTML();return void 0!==Nr&&(t=Nr.createHTML(t)),e.innerHTML=t,e}}const Fr=e=>null===e||!("object"==typeof e||"function"==typeof e),jr=e=>Array.isArray(e)||!(!e||!e[Symbol.iterator]);class Dr{constructor(e,t,r){this.dirty=!0,this.element=e,this.name=t,this.strings=r,this.parts=[];for(let e=0;e<r.length-1;e++)this.parts[e]=this._createPart()}_createPart(){return new Br(this)}_getValue(){const e=this.strings,t=e.length-1,r=this.parts;if(1===t&&""===e[0]&&""===e[1]){const e=r[0].value;if("symbol"==typeof e)return String(e);if("string"==typeof e||!jr(e))return e}let n="";for(let o=0;o<t;o++){n+=e[o];const t=r[o];if(void 0!==t){const e=t.value;if(Fr(e)||!jr(e))n+="string"==typeof e?e:String(e);else for(const t of e)n+="string"==typeof t?t:String(t)}}return n+=e[t],n}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class Br{constructor(e){this.value=void 0,this.committer=e}setValue(e){e===Cr||Fr(e)&&e===this.value||(this.value=e,br(e)||(this.committer.dirty=!0))}commit(){for(;br(this.value);){const e=this.value;this.value=Cr,e(this)}this.value!==Cr&&this.committer.commit()}}class Mr{constructor(e){this.value=void 0,this.__pendingValue=void 0,this.options=e}appendInto(e){this.startNode=e.appendChild(Lr()),this.endNode=e.appendChild(Lr())}insertAfterNode(e){this.startNode=e,this.endNode=e.nextSibling}appendIntoPart(e){e.__insert(this.startNode=Lr()),e.__insert(this.endNode=Lr())}insertAfterPart(e){e.__insert(this.startNode=Lr()),this.endNode=e.endNode,e.endNode=this.startNode}setValue(e){this.__pendingValue=e}commit(){if(null===this.startNode.parentNode)return;for(;br(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=Cr,e(this)}const e=this.__pendingValue;e!==Cr&&(Fr(e)?e!==this.value&&this.__commitText(e):e instanceof zr?this.__commitTemplateResult(e):e instanceof Node?this.__commitNode(e):jr(e)?this.__commitIterable(e):e===xr?(this.value=xr,this.clear()):this.__commitText(e))}__insert(e){this.endNode.parentNode.insertBefore(e,this.endNode)}__commitNode(e){this.value!==e&&(this.clear(),this.__insert(e),this.value=e)}__commitText(e){const t=this.startNode.nextSibling,r="string"==typeof(e=null==e?"":e)?e:String(e);t===this.endNode.previousSibling&&3===t.nodeType?t.data=r:this.__commitNode(document.createTextNode(r)),this.value=e}__commitTemplateResult(e){const t=this.options.templateFactory(e);if(this.value instanceof Rr&&this.value.template===t)this.value.update(e.values);else{const r=new Rr(t,e.processor,this.options),n=r._clone();r.update(e.values),this.__commitNode(n),this.value=r}}__commitIterable(e){Array.isArray(this.value)||(this.value=[],this.clear());const t=this.value;let r,n=0;for(const o of e)r=t[n],void 0===r&&(r=new Mr(this.options),t.push(r),0===n?r.appendIntoPart(this):r.insertAfterPart(t[n-1])),r.setValue(o),r.commit(),n++;n<t.length&&(t.length=n,this.clear(r&&r.endNode))}clear(e=this.startNode){((e,t,r=null)=>{for(;t!==r;){const r=t.nextSibling;e.removeChild(t),t=r}})(this.startNode.parentNode,e.nextSibling,this.endNode)}}class Ir{constructor(e,t,r){if(this.value=void 0,this.__pendingValue=void 0,2!==r.length||""!==r[0]||""!==r[1])throw new Error("Boolean attributes can only contain a single expression");this.element=e,this.name=t,this.strings=r}setValue(e){this.__pendingValue=e}commit(){for(;br(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=Cr,e(this)}if(this.__pendingValue===Cr)return;const e=!!this.__pendingValue;this.value!==e&&(e?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name),this.value=e),this.__pendingValue=Cr}}class Hr extends Dr{constructor(e,t,r){super(e,t,r),this.single=2===r.length&&""===r[0]&&""===r[1]}_createPart(){return new Ur(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class Ur extends Br{}let Vr=!1;(()=>{try{const e={get capture(){return Vr=!0,!1}};window.addEventListener("test",e,e),window.removeEventListener("test",e,e)}catch(e){}})();class qr{constructor(e,t,r){this.value=void 0,this.__pendingValue=void 0,this.element=e,this.eventName=t,this.eventContext=r,this.__boundHandleEvent=e=>this.handleEvent(e)}setValue(e){this.__pendingValue=e}commit(){for(;br(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=Cr,e(this)}if(this.__pendingValue===Cr)return;const e=this.__pendingValue,t=this.value,r=null==e||null!=t&&(e.capture!==t.capture||e.once!==t.once||e.passive!==t.passive),n=null!=e&&(null==t||r);r&&this.element.removeEventListener(this.eventName,this.__boundHandleEvent,this.__options),n&&(this.__options=Kr(e),this.element.addEventListener(this.eventName,this.__boundHandleEvent,this.__options)),this.value=e,this.__pendingValue=Cr}handleEvent(e){"function"==typeof this.value?this.value.call(this.eventContext||this.element,e):this.value.handleEvent(e)}}const Kr=e=>e&&(Vr?{capture:e.capture,passive:e.passive,once:e.once}:e.capture);new class{handleAttributeExpressions(e,t,r,n){const o=t[0];if("."===o){return new Hr(e,t.slice(1),r).parts}if("@"===o)return[new qr(e,t.slice(1),n.eventContext)];if("?"===o)return[new Ir(e,t.slice(1),r)];return new Dr(e,t,r).parts}handleTextExpression(e){return new Mr(e)}};const Wr=new Map;new WeakMap;"undefined"!=typeof window&&(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.4.1");class Jr{constructor(e){this._parent=e,this._cache=new Map}has(e){return!!(this._cache.has(e)||this._parent&&this._parent._cache.has(e))}set(e,t){return this._cache.set(e,t),this}get(e){return this._cache.get(e)||this._parent&&this._parent._cache.get(e)}}let Yr=Math.round(1e5*Math.random());const Gr="-|\\.|[0-9]|[a-z]",Zr=new RegExp(`[a-z](${Gr})*-(${Gr})*`),Qr=(e,t)=>{const r=`${e}-${Yr+=1}`;return((e,t)=>!!t.get(e))(r,t)?Qr(e,t):r};function Xr(e,t=customElements){if(r=e,null===Zr.exec(r))throw new Error("tagName is invalid");var r;return Qr(e,t)}const en=new WeakMap,tn=(e,t)=>en.set(t,e),rn=e=>en.get(e);const nn=(e,t,r=customElements)=>{tn(e,t),r.define(e,class extends t{})},on=(e,t,r)=>{const n=customElements;if(!function(e){let t=e;for(;t;){if(t===window.HTMLElement||"HTMLElement"===t.name)return!0;t=Object.getPrototypeOf(t)}return!1}(t))return((e,t,r)=>{const n=Xr(e,t);if(!r)throw new Error("Lazy scoped elements requires the use of tags cache");return r.set(e,n),n})(e,n,r);if(t===customElements.get(e))return tn(e,t),e;const o=Xr(e,n);return nn(o,t,n),o};function sn(e,t,r=void 0){return rn(t)||r&&r.get(e)||on(e,t,r)}const an="-|\\.|[0-9]|[a-z]",ln=new RegExp(`<\\/?([a-z](${an})*-(${an})*)`,"g"),cn=new Jr,dn=(e,t,r,n)=>{const o=e.map((e=>{let r=e;const o=(e=>{const t=[];let r;for(;null!==(r=ln.exec(e));)t.push(r);return t})(e);for(let e=o.length-1;e>=0;e-=1){const i=o[e],[s,a]=i,l=sn(a,t[a],n),c=i.index+s.length-a.length,d=c+a.length,u=0===s.indexOf("</");r=r.slice(0,c)+(u?l:`${l} data-tag-name="${a}"`)+r.slice(d)}return r}));return r.set(e,o),o};let un=!0;const{ShadyCSS:hn}=window;(void 0===hn||void 0===hn.prepareTemplateDom)&&(un=!1);const pn=new WeakMap,fn=new WeakMap,gn=e=>(fn.has(e)||fn.set(e,new Jr(fn.get(e.constructor))),fn.get(e)),An=(e,t,r,n)=>e.map((e=>e instanceof zr?vn(e,t,r,n):Array.isArray(e)?An(e,t,r,n):e)),vn=(e,t,r,n)=>new zr(function(e,t,r=cn,n){return r.get(e)||dn(e,t,r,n)}(e.strings,t,r,n),An(e.values,t,r,n),e.type,e.processor),mn=(e,t,r,n)=>o=>{const i=vn(o,t,r,n);return(e=>t=>{const r=((e,t)=>`${e}--${t}`)(t.type,e);let n=Wr.get(r);void 0===n&&(n={stringsArray:new WeakMap,keyString:new Map},Wr.set(r,n));let o=n.stringsArray.get(t.strings);if(void 0!==o)return o;const i=t.strings.join(wr);if(o=n.keyString.get(i),void 0===o){const r=t.getTemplateElement();un&&hn.prepareTemplateDom(r,e),o=new $r(t,r),n.keyString.set(i,o)}return n.stringsArray.set(t.strings,o),o})(e)(i)},bn=O((e=>class extends e{static get scopedElements(){return{}}static render(e,t,r){if(!r||"object"!=typeof r||!r.scopeName)throw new Error("The `scopeName` option is required.");const{scopeName:n,eventContext:o}=r,i=(s=o,pn.has(s)||pn.set(s,new Jr(pn.get(s.constructor))),pn.get(s));var s;const a=gn(o),{scopedElements:l}=this;return super.render(e,t,{...r,templateFactory:mn(n,l,i,a)})}defineScopedElement(e,t){return function(e,t,r){const n=r.get(e);n?void 0===customElements.get(n)&&nn(n,t,customElements):r.set(e,sn(e,t,r))}(e,t,gn(this))}static getScopedTagName(e){const t=this.scopedElements[e];return t?sn(e,t,gn(this)):gn(this).get(e)}getScopedTagName(e){const t=this.constructor.scopedElements[e];return t?sn(e,t,gn(this)):gn(this).get(e)}})),yn=(e,t,r)=>{const n={bubbles:!0,cancelable:!1,composed:!0,...r},o=new CustomEvent(t,n);return e.dispatchEvent(o),o},Cn=N.iv`
  * {
  --ne-button-color-background-primary-default: var(--ne-ref-color-blue-60, #006BD6);
  --ne-button-color-background-primary-hover: var(--ne-ref-color-blue-70, #0052A3);
  --ne-button-color-background-primary-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-background-secondary-default: var(--ne-ref-color-white, #ffffff);
  --ne-button-color-background-secondary-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-button-color-background-secondary-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-background-destructive-default: var(--ne-ref-color-red-60, #B80000);
  --ne-button-color-background-destructive-hover: var(--ne-ref-color-red-70, #7C0D0E);
  --ne-button-color-background-destructive-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-background-text-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-button-color-background-text-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-background-inverse-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-button-color-background-inverse-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-border-primary-default: var(--ne-ref-color-blue-70, #0052A3);
  --ne-button-color-border-secondary-default: var(--ne-ref-color-grey-10, #E2E3E4);
  --ne-button-color-border-destructive-default: var(--ne-ref-color-red-70, #7C0D0E);
  --ne-button-color-border-focus: var(--ne-ref-color-blue-20, #A3D1FF);
  --ne-button-color-border-inverse-default: var(--ne-ref-color-white, #ffffff);
  --ne-button-color-border-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-label-primary-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-button-color-label-primary-default: var(--ne-ref-color-white, #ffffff);
  --ne-button-color-label-secondary-default: var(--ne-ref-color-blue-60, #006BD6);
  --ne-button-color-label-secondary-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-button-color-label-destructive-default: var(--ne-ref-color-white, #ffffff);
  --ne-button-color-label-destructive-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-button-color-label-text-default: var(--ne-ref-color-blue-60, #006BD6);
  --ne-button-color-label-text-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-button-color-label-inverse-default: var(--ne-ref-color-white, #ffffff);
  --ne-button-color-label-inverse-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-button-border-radius: var(--ne-ref-border-radius-medium, .25em);
  --ne-button-padding-horizontal: var(--ne-ref-spacing-small, 0.75em);
  --ne-button-padding-vertical: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-button-gap: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-button-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-button-font-size: var(--ne-ref-font-size-04, 0.875em);
  --ne-button-sizing-icon: var(--ne-ref-sizing-04, 1em);
  --ne-button-border-width-default: var(--ne-ref-border-width-small, 1px);
  --ne-button-border-width-focus: var(--ne-ref-border-width-large, 4px);
}
`,xn="important",wn=" !"+xn,_n=Kt(class extends Wt{constructor(e){var t;if(super(e),e.type!==Vt||"style"!==e.name||(null===(t=e.strings)||void 0===t?void 0:t.length)>2)throw Error("The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.")}render(e){return Object.keys(e).reduce(((t,r)=>{const n=e[r];return null==n?t:t+`${r=r.includes("-")?r:r.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g,"-$&").toLowerCase()}:${n};`}),"")}update(e,[t]){const{style:r}=e.element;if(void 0===this.ut){this.ut=new Set;for(const e in t)this.ut.add(e);return this.render(t)}this.ut.forEach((e=>{null==t[e]&&(this.ut.delete(e),e.includes("-")?r.removeProperty(e):r[e]="")}));for(const e in t){const n=t[e];if(null!=n){this.ut.add(e);const t="string"==typeof n&&n.endsWith(wn);e.includes("-")||t?r.setProperty(e,t?n.slice(0,-11):n,t?xn:""):r[e]=n}}return Ht.Jb}}),kn={_export:()=>r.e(50).then(r.bind(r,8388)).then((e=>e._export)),_import:()=>r.e(50).then(r.bind(r,9699)).then((e=>e._import)),add:()=>r.e(50).then(r.bind(r,7352)).then((e=>e.add)),archive:()=>r.e(50).then(r.bind(r,6939)).then((e=>e.archive)),arrowDown:()=>r.e(50).then(r.bind(r,4783)).then((e=>e.arrowDown)),arrowUp:()=>r.e(50).then(r.bind(r,7404)).then((e=>e.arrowUp)),caretDown:()=>r.e(50).then(r.bind(r,588)).then((e=>e.caretDown)),caretLeft:()=>r.e(50).then(r.bind(r,1746)).then((e=>e.caretLeft)),caretRight:()=>r.e(50).then(r.bind(r,5147)).then((e=>e.caretRight)),caretUp:()=>r.e(50).then(r.bind(r,5245)).then((e=>e.caretUp)),check:()=>r.e(50).then(r.bind(r,3441)).then((e=>e.check)),chevronDown:()=>r.e(50).then(r.bind(r,157)).then((e=>e.chevronDown)),chevronLeft:()=>r.e(50).then(r.bind(r,1316)).then((e=>e.chevronLeft)),chevronLightDown:()=>r.e(50).then(r.bind(r,9683)).then((e=>e.chevronLightDown)),chevronLightLeft:()=>r.e(50).then(r.bind(r,1788)).then((e=>e.chevronLightLeft)),chevronLightRight:()=>r.e(50).then(r.bind(r,7776)).then((e=>e.chevronLightRight)),chevronLightUp:()=>r.e(50).then(r.bind(r,5154)).then((e=>e.chevronLightUp)),chevronRight:()=>r.e(50).then(r.bind(r,1704)).then((e=>e.chevronRight)),chevronUp:()=>r.e(50).then(r.bind(r,5121)).then((e=>e.chevronUp)),closeDefault:()=>r.e(50).then(r.bind(r,4754)).then((e=>e.closeDefault)),dangerExclamation:()=>r.e(50).then(r.bind(r,969)).then((e=>e.dangerExclamation)),dropzone:()=>r.e(50).then(r.bind(r,6941)).then((e=>e.dropzone)),feedback:()=>r.e(50).then(r.bind(r,2253)).then((e=>e.feedback)),file:()=>r.e(50).then(r.bind(r,1601)).then((e=>e.file)),hide:()=>r.e(50).then(r.bind(r,8138)).then((e=>e.hide)),info:()=>r.e(50).then(r.bind(r,770)).then((e=>e.info)),maximise:()=>r.e(50).then(r.bind(r,8297)).then((e=>e.maximise)),meatballs:()=>r.e(50).then(r.bind(r,1307)).then((e=>e.meatballs)),minus:()=>r.e(50).then(r.bind(r,7272)).then((e=>e.minus)),openInNewWindow:()=>r.e(50).then(r.bind(r,1895)).then((e=>e.openInNewWindow)),process:()=>r.e(50).then(r.bind(r,4137)).then((e=>e.process)),processModel:()=>r.e(50).then(r.bind(r,2605)).then((e=>e.processModel)),publish:()=>r.e(50).then(r.bind(r,5233)).then((e=>e.publish)),refresh:()=>r.e(50).then(r.bind(r,1417)).then((e=>e.refresh)),save:()=>r.e(50).then(r.bind(r,3234)).then((e=>e.save)),schedule:()=>r.e(50).then(r.bind(r,7627)).then((e=>e.schedule)),search:()=>r.e(50).then(r.bind(r,5554)).then((e=>e.search)),show:()=>r.e(50).then(r.bind(r,9376)).then((e=>e.show)),success:()=>r.e(50).then(r.bind(r,7528)).then((e=>e.success)),summary:()=>r.e(50).then(r.bind(r,8318)).then((e=>e.summary)),tick:()=>r.e(50).then(r.bind(r,5017)).then((e=>e.tick)),trash:()=>r.e(50).then(r.bind(r,7798)).then((e=>e.trash)),user:()=>r.e(50).then(r.bind(r,8592)).then((e=>e.user)),users:()=>r.e(50).then(r.bind(r,8344)).then((e=>e.users)),versionHistory:()=>r.e(50).then(r.bind(r,6525)).then((e=>e.versionHistory)),warningExclamation:()=>r.e(50).then(r.bind(r,7403)).then((e=>e.warningExclamation))},Sn=({type:e,typeAsHtml:t,fixedSize:r,className:n})=>{if(!e&&!t)return N.Ld;if(e&&!(e in kn))return console.warn("Icon not found",e),N.Ld;const o=e?kn[e]():Promise.resolve(t);return N.dy`
    <div
      aria-hidden="true"
      class=${n||"ne-icon"}
      style=${_n({height:r,width:r,display:"grid",alignItems:"center",justifyItems:"center"})}
    >
      ${ir(o,N.dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
></svg>`)}
    </div>
  `},$n=[Cn,N.iv`
  .btn {
    font-family: var(--ne-button-font-family);
    font-size: var(--ne-button-font-size);
    padding: var(--ne-button-padding-vertical)
      var(--ne-button-padding-horizontal) var(--ne-button-padding-vertical)
      var(--ne-button-padding-horizontal);
    gap: var(--ne-button-gap);
    border-radius: var(--ne-button-border-radius);
    outline: none;
    display: grid;
    grid-auto-flow: column;
  }

  .btn:focus {
    outline: 4px solid var(--ne-button-color-border-focus);
  }

  .btn-primary {
    border: 1px solid var(--ne-button-color-border-primary-default);
    color: var(--ne-button-color-label-primary-default);
    background-color: var(--ne-button-color-background-primary-default);
  }

  .btn-primary:hover {
    background-color: var(--ne-button-color-background-primary-hover);
  }

  .btn-primary:disabled {
    border: 1px solid var(--ne-button-color-border-disabled);
    color: var(--ne-button-color-label-primary-disabled);
    background-color: var(--ne-button-color-background-primary-disabled);
  }

  .btn-secondary {
    border: 1px solid var(--ne-button-color-border-secondary-default);
    color: var(--ne-button-color-label-secondary-default);
    background-color: var(--ne-button-color-background-secondary-default);
  }

  .btn-secondary:hover {
    background-color: var(--ne-button-color-background-secondary-hover);
  }

  .btn-secondary:disabled {
    border: 1px solid var(--ne-button-color-border-disabled);
    color: var(--ne-button-color-label-secondary-disabled);
    background-color: var(--ne-button-color-background-secondary-disabled);
  }

  .btn-secondary:focus {
    background-color: var(--ne-button-color-background-secondary-hover);
  }

  .btn-destructive {
    border: 1px solid var(--ne-button-color-border-destructive-default);
    color: var(--ne-button-color-label-destructive-default);
    background-color: var(--ne-button-color-background-destructive-default);
  }

  .btn-destructive:hover {
    background-color: var(--ne-button-color-background-destructive-hover);
  }

  .btn-destructive:disabled {
    border: 1px solid var(--ne-button-color-border-disabled);
    color: var(--ne-button-color-label-destructive-disabled);
    background-color: var(--ne-button-color-background-destructive-disabled);
  }

  .btn-destructive:focus {
    background-color: var(--ne-button-color-background-destructive-hover);
  }

  .btn-text {
    border: 0;
    color: var(--ne-button-color-label-text-default);
    background-color: transparent;
  }

  .btn-text:hover {
    background-color: var(--ne-button-color-background-text-hover);
  }

  .btn-text:disabled {
    border: 0;
    color: var(--ne-button-color-label-text-disabled);
    background-color: var(--ne-button-color-background-text-disabled);
  }

  .btn-text:focus {
    background-color: var(--ne-button-color-background-text-hover);
  }

  .btn-inverse {
    color: var(--ne-button-color-label-inverse-default);
    background-color: transparent;
    border: 1px solid var(--ne-button-color-border-inverse-default);
  }

  .btn-inverse:hover {
    background-color: var(--ne-button-color-background-inverse-hover);
  }

  .btn-inverse:disabled {
    border: 1px solid var(--ne-button-color-border-disabled);
    color: var(--ne-button-color-label-inverse-disabled);
    background-color: var(--ne-button-color-background-inverse-disabled);
  }

  .btn-inverse:focus {
    background-color: var(--ne-button-color-background-inverse-hover);
  }

  .icon-slot {
    min-width: 18px;
    max-width: 18px;
  }
`,Ar];let En=class extends(bn(N.oi)){constructor(){super(...arguments),this.disabled=!1,this.ariaLabel="",this.variant="primary",this.onClick=()=>{yn(this,"ne-click",{composed:!0,bubbles:!0})}}static get styles(){return $n}render(){return N.dy`
      <button
        id=${this.id}
        type="button"
        ?disabled=${this.disabled}
        @click="${this.onClick}"
        aria-label=${this.ariaLabel||N.Ld}
        class=${vr({btn:!0,"btn-primary":"primary"===this.variant,"btn-secondary":"secondary"===this.variant,"btn-destructive":"destructive"===this.variant,"btn-text":"text"===this.variant,"btn-inverse":"inverse"===this.variant})}
      >
        <span class=${void 0!==this.leftIconType?"icon-slot":"hidden"}>
          <slot name="left">${Sn({type:this.leftIconType})}</slot>
        </span>
        <slot></slot>
        <span
          class=${void 0!==this.rightIconType?"icon-slot":"hidden"}
        >
          <slot name="right">${Sn({type:this.rightIconType})}</slot>
        </span>
      </button>
    `}};gr([j({type:Boolean,reflect:!0})],En.prototype,"disabled",void 0),gr([j({attribute:"ne-aria-label",type:String,reflect:!0})],En.prototype,"ariaLabel",void 0),gr([j({type:String,attribute:"left-icon",reflect:!0})],En.prototype,"leftIconType",void 0),gr([j({type:String,attribute:"right-icon",reflect:!0})],En.prototype,"rightIconType",void 0),gr([j({reflect:!0})],En.prototype,"variant",void 0),En=gr([T("ne-button")],En);const On=N.iv`
  * {
  --ne-button-set-padding-vertical: var(--ne-ref-spacing-medium, 1em);
  --ne-button-set-gap: var(--ne-ref-spacing-medium, 1em);
  --ne-button-set-color-border: var(--ne-ref-color-grey-10, #E2E3E4);
  --ne-button-set-border-width: var(--ne-ref-border-width-small, 1px);
}
`,Ln=[N.iv`
  :host {
    width: 100%;
  }

  .ne-button-set {
    display: flex;
    flex-flow: row;
    justify-content: flex-start;
    align-items: center;
    align-content: center;
    padding-top: var(--ne-button-set-padding-vertical);
    padding-bottom: var(--ne-button-set-padding-vertical);
    gap: var(--ne-button-set-gap);
    width: 100%;
  }

  .ne-button-set ::slotted(.right-start) {
    margin-left: auto;
  }

  .divider-top {
    border-top: solid;
    border-top-width: var(--ne-button-set-border-width);
    border-top-color: var(--ne-button-set-color-border);
  }

  .divider-bottom {
    border-bottom: solid;
    border-bottom-width: var(--ne-button-set-border-width);
    border-bottom-color: var(--ne-button-set-color-border);
  }
`,Ar,On];let Pn=class extends(bn(N.oi)){constructor(){super(...arguments),this.showTopDivider=!1,this.showBottomDivider=!1}static get styles(){return Ln}render(){return N.dy`<div
      class="${vr({"ne-button-set":!0,"divider-top":this.showTopDivider,"divider-bottom":this.showBottomDivider})}"
    >
      <slot></slot>
    </div>`}};gr([j({type:Boolean,reflect:!0,attribute:"show-divider-top"})],Pn.prototype,"showTopDivider",void 0),gr([j({type:Boolean,reflect:!0,attribute:"show-divider-bottom"})],Pn.prototype,"showBottomDivider",void 0),Pn=gr([T("ne-button-set")],Pn);const Rn=e=>null!=e?e:Ht.Ld,Nn=N.iv`
  * {
  --ne-label-gap: var(--ne-ref-spacing-none, 0);
  --ne-label-color-title: var(--ne-ref-color-grey-60, #575C61);
  --ne-label-color-asterisk: var(--ne-ref-color-red-60, #B80000);
  --ne-label-font-size: var(--ne-ref-font-size-04, 0.875em);
  --ne-label-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
}
`,Tn=[N.iv`
  * {
    color: var(--ne-label-color-title);
    font-family: var(--ne-label-font-family);
    font-size: 1em;
  }

  .outer-label {
    display: flex;
    font-size: var(--ne-label-font-size);
  }

  .required-indicator {
    margin-left: var(--ne-label-gap);
    color: var(--ne-label-color-asterisk);
  }
`,Ar,Nn];let zn=class extends N.oi{constructor(){super(...arguments),this.for="",this.required=!1}static get styles(){return Tn}render(){return N.dy`<label
      class="outer-label"
      id=${Rn(this.id)}
      for=${Rn(this.for)}
    >
      <slot></slot>
      ${this.required?N.dy`<span class="required-indicator">*</span>`:N.Ld}
    </label> `}};gr([j({attribute:"for"})],zn.prototype,"for",void 0),gr([j({attribute:"required",type:Boolean,reflect:!0})],zn.prototype,"required",void 0),zn=gr([T("ne-label")],zn);class Fn extends ar{}Fn.directiveName="unsafeSVG",Fn.resultType=2;const jn=Kt(Fn),Dn=[N.iv`
  * {
  --ne-spinner-sizing-large: var(--ne-ref-sizing-12, 4em);
  --ne-spinner-sizing-medium: var(--ne-ref-sizing-11, 3em);
  --ne-spinner-sizing-small: var(--ne-ref-sizing-04, 1em);
  --ne-spinner-gap: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-spinner-color-dark-left: var(--ne-ref-color-grey-90, #161718);
  --ne-spinner-color-dark-right: var(--ne-ref-color-grey-50, #6D7379);
  --ne-spinner-color-dark-text: var(--ne-ref-color-grey-90, #161718);
  --ne-spinner-color-light-right: var(--ne-ref-color-grey-20, #C4C7CA);
  --ne-spinner-color-light-left: var(--ne-ref-color-white, #ffffff);
  --ne-spinner-color-light-text: var(--ne-ref-color-white, #ffffff);
  --ne-spinner-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-spinner-font-size-large: var(--ne-ref-font-size-06, 1.125em);
  --ne-spinner-font-size-medium: var(--ne-ref-font-size-04, 0.875em);
  --ne-spinner-font-size-small: var(--ne-ref-font-size-02, 0.75em);
}
`,N.iv`
  @keyframes middle {
    0% {
      opacity: 0;
    }

    32% {
      opacity: 0;
    }

    50% {
      opacity: 1;
    }

    100% {
      opacity: 1;
    }
  }

  @keyframes second {
    0% {
      opacity: 0;
    }

    24% {
      opacity: 0;
    }

    32% {
      opacity: 0.9;
    }

    40% {
      opacity: 0;
    }

    100% {
      opacity: 0;
    }
  }

  @keyframes third {
    0% {
      opacity: 0;
    }

    16% {
      opacity: 0;
    }

    24% {
      opacity: 0.8;
    }

    40% {
      opacity: 0;
    }

    100% {
      opacity: 0;
    }
  }

  @keyframes forth {
    0% {
      opacity: 0;
    }

    8% {
      opacity: 0.7;
    }

    24% {
      opacity: 0;
    }

    100% {
      opacity: 0;
    }
  }

  @keyframes fifth {
    0% {
      opacity: 0.6;
    }

    10% {
      opacity: 0;
    }

    100% {
      opacity: 0;
    }
  }

  .ne-spinner {
    color: var(--ne-spinner-color-dark-text);
  }

  .ne-spinner-status {
    margin: 1em;
    font-size: var(--ne-spinner-font-size-large);
    text-align: center;
    font-family: var(--ne-spinner-font-family);
  }

  .ne-spinner-container {
    width: 100%;
    position: relative;
    display: flex;
    align-items: center;
  }

  .ne-spinner-container-large {
    flex-direction: column;
  }

  .ne-spinner-container-center {
    justify-content: center;
  }

  .ne-icon {
    fill: currentcolor;
    vertical-align: top;
    pointer-events: none;
  }

  .ne-nintex-spinner .ne-icon {
    height: var(--ne-spinner-sizing-large);
    width: var(--ne-spinner-sizing-large);
  }

  .ne-nintex-spinner > div {
    display: inline-block;
  }

  .ne-nintex-spinner-middle {
    animation-name: middle;
    position: relative;
  }

  .ne-nintex-spinner-left {
    position: absolute;
  }

  .ne-nintex-spinner-trail-left,
  .ne-nintex-spinner-trail-right {
    margin: 0 -8px;
  }

  .ne-nintex-spinner-trail-left,
  .ne-nintex-spinner-left {
    color: var(--ne-spinner-color-dark-left);
  }

  .ne-nintex-spinner-trail-right,
  .ne-nintex-spinner-right {
    color: var(--ne-spinner-color-dark-right);
  }

  .ne-nintex-spinner-middle,
  .ne-nintex-spinner-second,
  .ne-nintex-spinner-third,
  .ne-nintex-spinner-forth,
  .ne-nintex-spinner-fifth {
    animation-duration: 2000ms;
    transform-origin: center;
    animation-iteration-count: infinite;
    animation-timing-function: ease-in-out;
  }

  .ne-nintex-spinner-second {
    animation-name: second;
  }

  .ne-nintex-spinner-third {
    animation-name: third;
  }

  .ne-nintex-spinner-forth {
    animation-name: forth;
  }

  .ne-nintex-spinner-fifth {
    animation-name: fifth;
  }

  .ne-nintex-spinner-small {
    padding: 0;
  }

  .ne-nintex-spinner-small .ne-icon {
    height: var(--ne-spinner-sizing-small);
    width: var(--ne-spinner-sizing-small);
  }

  .ne-nintex-spinner-small .ne-nintex-spinner-trail-left,
  .ne-nintex-spinner-small .ne-nintex-spinner-trail-right {
    margin: 0 -2px;
  }

  .ne-nintex-spinner-small .ne-spinner-status {
    font-size: var(--ne-spinner-font-size-small);
    margin: 0;
  }

  .ne-nintex-spinner-medium .ne-icon {
    height: var(--ne-spinner-sizing-medium);
    width: var(--ne-spinner-sizing-medium);
  }

  .ne-nintex-spinner-medium .ne-nintex-spinner-trail-left,
  .ne-nintex-spinner-medium .ne-nintex-spinner-trail-right {
    margin: 0 -6px;
  }

  .ne-nintex-spinner-medium .ne-spinner-status {
    font-size: var(--ne-spinner-font-size-medium);
    margin: 0.875em;
  }

  .ne-spinner-theme-light .ne-nintex-spinner-trail-left,
  .ne-spinner-theme-light .ne-nintex-spinner-trail-right {
    color: var(--ne-spinner-color-light-right);
  }

  .ne-spinner-theme-light .ne-nintex-spinner-left {
    color: var(--ne-spinner-color-light-left);
  }

  .ne-spinner-theme-light .ne-nintex-spinner-trail-right,
  .ne-spinner-theme-light .ne-nintex-spinner-right {
    color: var(--ne-spinner-color-light-right);
  }

  .ne-spinner-theme-light .ne-spinner-status {
    color: var(--ne-spinner-color-light-text);
  }

  .ne-spinner-status.visually-hidden {
    display: none;
  }
`,Ar];var Bn,Mn;!function(e){e.large="large",e.medium="medium",e.small="small"}(Bn||(Bn={})),function(e){e.light="light",e.regular="regular"}(Mn||(Mn={}));const In='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 34" width="1em" height="1em" class="ne-icon__logos-nintex-x-loader-left ne-icon ne-icon-inline"><path d="M24 17L7.01 34 0 26.99 9.98 17 0 7.01 7.01 0 24 17z"></path></svg>',Hn='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 34" width="1em" height="1em" class="ne-icon__logos-nintex-x-loader-right ne-icon ne-icon-inline"><path d="M14.02 16.99L24 26.98l-7.01 7L0 16.99 16.99 0 24 7.01l-9.98 9.98z"></path></svg>';let Un=class extends N.oi{constructor(){super(...arguments),this.size=Bn.medium,this.theme=Mn.regular}static get styles(){return Dn}render(){const e=N.dy`<div
      class=${vr({"ne-nintex-spinner ne-spinner":!0,"ne-nintex-spinner-small":this.size===Bn.small,"ne-nintex-spinner-medium":this.size===Bn.medium,"ne-nintex-spinner-large":this.size===Bn.large,"ne-spinner-theme-light":this.theme===Mn.light,"ne-spinner-theme-regular":this.theme===Mn.regular})}
    >
      <div class="ne-nintex-spinner-trail-left ne-nintex-spinner-fifth">
        ${jn(In)}
      </div>
      <div class="ne-nintex-spinner-trail-left ne-nintex-spinner-forth">
        ${jn(In)}
      </div>
      <div class="ne-nintex-spinner-trail-left ne-nintex-spinner-third">
        ${jn(In)}
      </div>
      <div class="ne-nintex-spinner-trail-left ne-nintex-spinner-second">
        ${jn(In)}
      </div>
      <div class="ne-nintex-spinner-middle">
        ${jn('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 34 34" width="1em" height="1em" class="ne-icon__logos-nintex-x-loader-center-left ne-icon ne-icon-inline ne-nintex-spinner-left"><path d="M24.01 17l-17 17L0 26.99 9.99 17 0 7.01 7.01 0l17 17z"></path></svg>')} ${jn('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 34 34" width="1em" height="1em" class="ne-icon__logos-nintex-x-loader-center-right ne-icon ne-icon-inline ne-nintex-spinner-right"><path d="M24.01 17L34 26.99 26.99 34l-17-17 17-17L34 7.01 24.01 17z"></path></svg>')}
      </div>
      <div class="ne-nintex-spinner-trail-right ne-nintex-spinner-second">
        ${jn(Hn)}
      </div>
      <div class="ne-nintex-spinner-trail-right ne-nintex-spinner-third">
        ${jn(Hn)}
      </div>
      <div class="ne-nintex-spinner-trail-right ne-nintex-spinner-forth">
        ${jn(Hn)}
      </div>
      <div class="ne-nintex-spinner-trail-right ne-nintex-spinner-fifth">
        ${jn(Hn)}
      </div>
      ${this.status?N.dy` <p class="ne-spinner-status" role="status">${this.status}</p> `:N.dy`
            <p class="ne-spinner-status visually-hidden" role="status">
              ${this.defaultStatus}
            </p>
          `}
    </div>`;return this.wrapped?N.dy`<div class="ne-spinner-container ne-spinner-container-center">
      ${e}
    </div>`:N.dy`${e}`}};gr([j({type:String,attribute:"default-status"})],Un.prototype,"defaultStatus",void 0),gr([j({type:String,attribute:"size",reflect:!0})],Un.prototype,"size",void 0),gr([j({type:String,attribute:"status",reflect:!0})],Un.prototype,"status",void 0),gr([j({type:String,reflect:!0})],Un.prototype,"theme",void 0),gr([j({type:Boolean,reflect:!0})],Un.prototype,"wrapped",void 0),Un=gr([T("ne-spinner")],Un);const Vn=[N.iv`
  * {
  --ne-overlay-color: var(--ne-ref-color-grey-90-30, #16171830);
}
`,N.iv`
  .overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: var(--ne-overlay-color);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
  }
`,Ar];let qn=class extends(bn(N.oi)){constructor(){super(...arguments),this.show=!0}static get styles(){return Vn}render(){return this.show?N.dy`
          <div>
            <div class="overlay">
              <slot></slot>
            </div>
          </div>
        `:N.dy``}};gr([j({type:Boolean,reflect:!0})],qn.prototype,"show",void 0),qn=gr([T("ne-overlay")],qn);const Kn=[Ar];let Wn=class extends(bn(N.oi)){constructor(){super(...arguments),this.show=!0,this.delay=0,this.size=Bn.medium,this.theme=Mn.regular,this._showSetTimeout=0,this._isShowOverLay=!1}static get styles(){return Kn}static get scopedElements(){return{"ne-overlay":qn,"ne-spinner":Un}}render(){return N.dy`<ne-overlay .show=${this._isShowOverLay}>
      <ne-spinner
        .status=${this.status}
        theme=${this.theme}
        .size=${this.size}
      ></ne-spinner>
    </ne-overlay>`}updated(e){e.has("show")&&(this._showSetTimeout&&window.clearTimeout(this._showSetTimeout),this.show?this.delay>0?this._showSetTimeout=window.setTimeout((()=>{this._isShowOverLay=!0}),this.delay):this._isShowOverLay=!0:this._isShowOverLay=!1)}};gr([j({type:Boolean,reflect:!0})],Wn.prototype,"show",void 0),gr([j({type:Number,attribute:"status-delay"})],Wn.prototype,"delay",void 0),gr([j({type:String,attribute:"size"})],Wn.prototype,"size",void 0),gr([j({type:String,attribute:"status"})],Wn.prototype,"status",void 0),gr([j({type:String})],Wn.prototype,"theme",void 0),gr([D()],Wn.prototype,"_showSetTimeout",void 0),gr([D()],Wn.prototype,"_isShowOverLay",void 0),Wn=gr([T("ne-status-overlay")],Wn);const Jn=[Ar,N.iv`
  :host {
    display: grid;
    color: inherit;
  }
`];let Yn=class extends N.oi{constructor(){super(...arguments),this.fixedSize=""}static get styles(){return Jn}render(){return Sn({type:this.type,fixedSize:this.fixedSize})}};gr([j({attribute:"type",reflect:!0})],Yn.prototype,"type",void 0),gr([j({type:String})],Yn.prototype,"fixedSize",void 0),Yn=gr([T("ne-icon")],Yn);const Gn=[Cn,N.iv`
  * {
  --ne-icon-button-icon-size: var(--ne-ref-sizing-04, 1em);
  --ne-icon-button-color-icon-dark-on-light-bg-default: var(--ne-ref-color-grey-90, #161718);
  --ne-icon-button-color-icon-dark-on-light-bg-disabled: var(--ne-ref-color-grey-50, #6D7379);
  --ne-icon-button-color-icon-light-on-dark-bg-default: var(--ne-ref-color-white, #ffffff);
  --ne-icon-button-color-icon-light-on-dark-bg-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-icon-button-color-icon-light-on-dark-bg-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-icon-button-color-icon-light-on-dark-bg-focused: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-icon-button-color-background-dark-on-light-bg-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-icon-button-padding: var(--ne-ref-spacing-xx-small, 0.25em);
}
`,N.iv`
  .btn {
    display: flex;
    flex-flow: row nowrap;
    justify-content: center;
    align-items: center;
    align-content: center;
    box-sizing: border-box;
    margin: 0;
    padding: var(--ne-icon-button-padding);
    font-size: 1em;
    border: none;
    border-radius: var(--ne-button-border-radius);
    outline: none;
    background-color: transparent;
    cursor: pointer;
  }

  .btn * {
    cursor: pointer;
  }

  .btn:disabled * {
    cursor: default;
  }

  .btn-dark {
    color: var(--ne-icon-button-color-icon-dark-on-light-bg-default);
  }

  .btn-dark:hover {
    background-color: var(
      --ne-icon-button-color-background-dark-on-light-bg-hover
    );
  }

  .btn-dark:focus-visible {
    outline: var(--ne-button-border-width-focus) solid
      var(--ne-button-color-border-focus);
  }

  .btn-dark:disabled,
  .btn-dark:hover:disabled {
    color: var(--ne-icon-button-color-icon-dark-on-light-bg-disabled);
    background-color: transparent;
    cursor: default;
  }

  .btn-light {
    color: var(--ne-icon-button-color-icon-light-on-dark-bg-default);
  }

  .btn-light:hover {
    color: var(--ne-icon-button-color-icon-light-on-dark-bg-hover);
  }

  .btn-light:focus-visible {
    color: var(--ne-icon-button-color-icon-light-on-dark-bg-focused);
    outline: var(--ne-button-border-width-focus) solid
      var(--ne-button-color-border-focus);
  }

  .btn-light:disabled,
  .btn-light:hover:disabled {
    color: var(--ne-icon-button-color-icon-light-on-dark-bg-disabled);
    background-color: transparent;
    cursor: default;
  }

  .icon {
    height: var(--ne-icon-button-icon-size);
    width: var(--ne-icon-button-icon-size);
  }
`,Ar];let Zn=class extends(bn(N.oi)){constructor(){super(...arguments),this.disabled=!1,this.ariaLabel="",this.variant="dark",this._onClick=()=>{yn(this,"ne-click",{composed:!0,bubbles:!0})}}static get styles(){return Gn}render(){return N.dy`<button
      id=${this.id}
      type="button"
      ?disabled=${this.disabled}
      @click="${this._onClick}"
      aria-label=${this.ariaLabel||N.Ld}
      class=${vr({btn:!0,"btn-dark":"dark"===this.variant,"btn-light":"light"===this.variant})}
    >
      <span class="icon">${Sn({type:this.iconType})}</span>
    </button>`}};gr([j({type:Boolean,reflect:!0})],Zn.prototype,"disabled",void 0),gr([j({attribute:"ne-aria-label",type:String,reflect:!0})],Zn.prototype,"ariaLabel",void 0),gr([j({type:String,attribute:"icon",reflect:!0})],Zn.prototype,"iconType",void 0),gr([j({reflect:!0})],Zn.prototype,"variant",void 0),Zn=gr([T("ne-icon-button")],Zn);const Qn="closeDefault",Xn=[N.iv`
  * {
  --ne-modal-sizing-width-small: var(--ne-ref-sizing-18, 32em);
  --ne-modal-sizing-width-medium: var(--ne-ref-sizing-21, 56em);
  --ne-modal-sizing-width-large: var(--ne-ref-sizing-22, 64em);
  --ne-modal-sizing-height-small: var(--ne-ref-sizing-16, 16em);
  --ne-modal-sizing-height-medium: var(--ne-ref-sizing-17, 24em);
  --ne-modal-sizing-height-large: var(--ne-ref-sizing-19, 40em);
  --ne-modal-padding-horizontal: var(--ne-ref-spacing-medium, 1em);
  --ne-modal-header-font-family: var(--ne-ref-font-family-montserrat, Montserrat);
  --ne-modal-header-padding-vertical: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-modal-header-gap: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-modal-header-title: var(--ne-ref-color-nintex-orange, #F56900);
  --ne-modal-header-font-size: var(--ne-ref-font-size-08, 1.5em);
  --ne-modal-header-font-weight: var(--ne-ref-font-weight-semi-bold, SemiBold);
  --ne-modal-content-padding: var(--ne-ref-spacing-medium, 1em);
  --ne-modal-content-gap-vertical: var(--ne-ref-spacing-medium, 1em);
  --ne-modal-border-radius: var(--ne-ref-border-radius-medium, .25em);
  --ne-modal-color-border: var(--ne-ref-color-grey-10, #E2E3E4);
  --ne-modal-border-width: var(--ne-ref-border-width-small, 1px);
  --ne-modal-gap-vertical: var(--ne-ref-spacing-medium, 1em);
}
`,Ar,N.iv`
  dialog {
    display: flex;
    flex-direction: column;
    padding-inline: var(--ne-modal-padding-horizontal);
    max-height: 80%;
    padding-block: 0;
    border: var(--ne-modal-border-width) solid var(--ne-modal-color-border);
    border-radius: var(--ne-modal-border-radius);
  }

  .hide {
    display: none;
  }

  .small {
    width: var(--ne-modal-sizing-width-small);
    min-height: var(--ne-modal-sizing-height-small);
  }

  .medium {
    width: var(--ne-modal-sizing-width-medium);
    min-height: var(--ne-modal-sizing-height-medium);
  }

  .large {
    width: var(--ne-modal-sizing-width-large);
    min-height: var(--ne-modal-sizing-height-large);
    height: 80%;
  }

  .heading-label {
    font-family: var(--ne-modal-header-font-family);
    font-size: var(--ne-modal-header-font-size);
    font-weight: var(--ne-modal-header-font-weight);
    color: var(--ne-modal-header-title);
    gap: var(--ne-modal-header-gap);
  }

  .content {
    display: flex;
    flex-flow: row nowrap;
    justify-content: flex-start;
    overflow-y: auto;
    flex-grow: 1;
    margin-block: var(--ne-modal-gap-vertical);
  }
`],eo="small";let to=class extends(bn(N.oi)){constructor(){super(...arguments),this.header="",this.size=eo,this.open=!0,this._handleClose=()=>{this.open=!1,yn(this,"ne-close",{composed:!0,bubbles:!0})}}static get scopedElements(){return{"ne-icon":Yn,"ne-overlay":qn,"ne-icon-button":Zn,"ne-button-set":Pn}}static get styles(){return Xn}render(){return N.dy`<ne-overlay .show=${this.open}>
      <dialog
        class="${vr({dialog:!0,[this.size]:!0,hide:!0!==this.open})}"
        part="dialog"
        aria-modal="true"
        ?open=${this.open}
        @cancel=${this._handleClose}
      >
      <span>
        <ne-button-set .showBottomDivider=${!0}>
          <label class="heading-label">${this.header}</label>
          <ne-icon-button
            class="right-start"
            variant="dark"
            ne-aria-label="close-button"
            icon=${Qn}
            @click=${this._handleClose}
          ></ne-icon-button>
          </ne-button-set>
      </span>
        <div class="content">
          <slot></slot>
        </div>
        <ne-button-set .showTopDivider=${!0}>
        <slot name="footer">
      </ne-button-set>
      </dialog>
    </ne-overlay>`}};function ro(e,t,r,n){var o,i=arguments.length,s=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,r,s):o(t,r))||s);return i>3&&s&&Object.defineProperty(t,r,s),s}gr([j({type:String,reflect:!0})],to.prototype,"header",void 0),gr([j({attribute:"modal-size",reflect:!0})],to.prototype,"size",void 0),gr([j({type:Boolean,reflect:!0})],to.prototype,"open",void 0),to=gr([T("ne-modal")],to);const no=N.iv`
  :host {
    all: initial;
  }

  .hidden {
    display: none;
  }
`,oo=N.iv`
  * {
  --ne-table-padding-vertical: var(--ne-ref-spacing-small, 0.75em);
  --ne-table-padding-horizontal: var(--ne-ref-spacing-small, 0.75em);
  --ne-table-color-border: var(--ne-ref-color-grey-10, #E2E3E4);
  --ne-table-color-column-header-background-focus: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-table-color-column-header-background-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-table-color-column-header-text: var(--ne-ref-color-grey-60, #575C61);
  --ne-table-color-column-header-icon-sorted-default: var(--ne-ref-color-grey-90, #161718);
  --ne-table-color-column-header-icon-sorted-hover: var(--ne-ref-color-blue-60, #006BD6);
  --ne-table-color-column-header-icon-sorted-focus: var(--ne-ref-color-blue-60, #006BD6);
  --ne-table-color-column-header-border-focus: var(--ne-ref-color-blue-20, #A3D1FF);
  --ne-table-column-header-icon: var(--ne-ref-sizing-04, 1em);
  --ne-table-column-header-gap: var(--ne-ref-spacing-xx-small, 0.25em);
  --ne-table-font-family-column-header: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-table-font-weight-column-header: var(--ne-ref-font-weight-bold, Bold);
  --ne-table-font-size-column-header: var(--ne-ref-font-size-04, 0.875em);
  --ne-table-border-width-column-header-default: var(--ne-ref-border-width-small, 1px);
  --ne-table-border-width-column-header-focus: var(--ne-ref-border-width-large, 4px);
}
`,io=[N.iv`
  label {
    display: flex;
    flex-direction: row;
    align-items: center;
    color: var(--ne-table-color-column-header-text);
    font-family: var(--ne-table-font-family-column-header);
    font-weight: var(--ne-table-font-weight-column-header);
    font-size: var(--ne-table-font-size-column-header);
  }

  label:focus {
    outline: none;
  }
`,no,oo];let so=class extends N.oi{static get styles(){return io}render(){return N.dy`<label id=${Rn(this.id)}>
      <slot></slot>
    </label>`}};so=ro([T("ne-theader")],so);const ao=Symbol.for(""),lo=e=>{if((null==e?void 0:e.r)===ao)return null==e?void 0:e._$litStatic$},co=new Map,uo=e=>(t,...r)=>{const n=r.length;let o,i;const s=[],a=[];let l,c=0,d=!1;for(;c<n;){for(l=t[c];c<n&&void 0!==(i=r[c],o=lo(i));)l+=o+t[++c],d=!0;c!==n&&a.push(i),s.push(l),c++}if(c===n&&s.push(t[n]),d){const e=s.join("$$lit$$");void 0===(t=co.get(e))&&(s.raw=s,co.set(e,t=s)),r=a}return e(t,...r)},ho=uo(Ht.dy),po=(uo(Ht.YP),[no,N.iv`
  :host {
    display: block;
    position: relative;
  }

  table {
    width: 100%;
  }

  td,
  th {
    box-sizing: border-box;
    padding: var(--ne-table-padding-vertical) var(--ne-table-padding-horizontal);
    font-size: var(--ne-table-font-size-column-header);
    border-bottom: 1px solid var(--ne-table-color-border);
  }

  th {
    text-align: left;
  }

  tbody tr:hover {
    background-color: var(--ne-table-color-column-header-background-hover);
  }

  tbody tr:has(:focus) {
    background-color: var(--ne-table-color-column-header-background-focus);
  }
`,oo]);let fo=class extends N.oi{constructor(){super(...arguments),this._events=[],this.data=[],this._hasHeadTemplate=!1,this._hasRowTemplate=!1}static get styles(){return po}addEventListener(e,t,r){-1===this._events.indexOf(e)&&this._events.push(e),super.addEventListener(e,t,r)}_onHeadTemplateSlotChange(){this._hasHeadTemplate=this._headTemplate.length>0}_onRowTemplateSlotChange(){this._hasRowTemplate=this._rowTemplate.length>0}render(){return N.dy`
      <slot
        name="head"
        @slotchange=${()=>this._onHeadTemplateSlotChange()}
      ></slot>
      <slot
        name="row"
        @slotchange=${()=>this._onRowTemplateSlotChange()}
      ></slot>
      <table part="table">
        <thead>
          <tr>
            ${this._renderHeadData()}
          </tr>
        </thead>
        <tbody>
          ${this.data.map(((e,t)=>N.dy`
              <tr>
                ${this._renderRowData(e,t)}
              </tr>
            `))}
        </tbody>
      </table>
    `}_renderHeadData(){if(this._hasHeadTemplate){const e=this._headTemplate[0].content;return Array.from(e.children).map(((e,t)=>{const r=document.createElement(e.tagName);this._bindHeaderEvents(r,t),this._bindHeader(r,e);const n=e.getAttribute("data-width");return n?ho`<th width="${n}">${r}</th>`:ho`<th>${r}</th>`}))}return null}_renderRowData(e,t){if(this._hasRowTemplate){const r=this._rowTemplate[0].content;return Array.from(r.children).map(((r,n)=>{const o=document.createElement(r.tagName);return this._bindEvents(o,t,n,e),this._bindControl(o,r,e),ho`<td>${o}</td>`}))}return null}_bindEvents(e,t,r,n){for(const o of this._events)e.addEventListener(o,(i=>{if(!(i instanceof CustomEvent&&i.detail&&"number"==typeof i.detail.row&&"number"==typeof i.detail.column)){i.preventDefault(),i.stopPropagation();const s={row:t,column:r,data:JSON.parse(JSON.stringify(n)),originalEvent:i},a=new CustomEvent(o,{composed:!0,bubbles:!0,detail:s});e.dispatchEvent(a)}}))}_bindControl(e,t,r){const n=/^{{.+}}$/;t.getAttributeNames().forEach((o=>{const i=t.getAttribute(o);i&&(o.startsWith(".")?i.match(n)?e[o.substring(1)]=r[i.replace(/^{{/,"").replace(/}}$/,"")]:e[o.substring(1)]=i:i.match(n)?e.setAttribute(o,r[i.replace(/^{{/,"").replace(/}}$/,"")]):e.setAttribute(o,i))})),t.textContent?.match(n)?e.textContent=r[t.textContent.replace(/^{{/,"").replace(/}}$/,"")]:e.textContent=t.textContent}_bindHeaderEvents(e,t){for(const r of this._events)e.addEventListener(r,(n=>{if(!(n instanceof CustomEvent&&n.detail&&"number"==typeof n.detail.column)){n.preventDefault(),n.stopPropagation();const o=new CustomEvent(r,{composed:!0,bubbles:!0,detail:{column:t,originalEvent:n}});e.dispatchEvent(o)}}))}_bindHeader(e,t){t.getAttributeNames().forEach((r=>{const n=t.getAttribute(r);n&&(r.startsWith(".")?e[r.substring(1)]=n:e.setAttribute(r,n))})),e.innerHTML=t.innerHTML}};ro([j({type:Array,reflect:!1})],fo.prototype,"data",void 0),ro([H({slot:"head"})],fo.prototype,"_headTemplate",void 0),ro([D()],fo.prototype,"_hasHeadTemplate",void 0),ro([H({slot:"row"})],fo.prototype,"_rowTemplate",void 0),ro([D()],fo.prototype,"_hasRowTemplate",void 0),fo=ro([T("ne-table")],fo);var go=function(e,t,r,n){var o,i=arguments.length,s=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,r,s):o(t,r))||s);return i>3&&s&&Object.defineProperty(t,r,s),s};let Ao=class extends(R(N.oi)){static get scopedElements(){return{"pi-list-component":fr,"pi-header":It}}static get styles(){return Ge}constructor(){super(),$e.resetInstance(),Oe.resetInstance(),Se.resetInstance(),Ee.resetInstance()}render(){return N.dy` <pi-header></pi-header>
      <pi-list-component></pi-list-component>`}};go([j()],Ao.prototype,"getAppSetting",void 0),Ao=go([T("pi-bpmn-list")],Ao)},9671:e=>{function t(e){return Promise.resolve().then((()=>{var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}))}t.keys=()=>[],t.resolve=t,t.id=9671,e.exports=t},9793:(e,t,r)=>{"use strict";r.d(t,{ec:()=>c,i1:()=>d,iv:()=>l});const n=window,o=n.ShadowRoot&&(void 0===n.ShadyCSS||n.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,i=Symbol(),s=new WeakMap;class a{constructor(e,t,r){if(this._$cssResult$=!0,r!==i)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=e,this.t=t}get styleSheet(){let e=this.o;const t=this.t;if(o&&void 0===e){const r=void 0!==t&&1===t.length;r&&(e=s.get(t)),void 0===e&&((this.o=e=new CSSStyleSheet).replaceSync(this.cssText),r&&s.set(t,e))}return e}toString(){return this.cssText}}const l=(e,...t)=>{const r=1===e.length?e[0]:t.reduce(((t,r,n)=>t+(e=>{if(!0===e._$cssResult$)return e.cssText;if("number"==typeof e)return e;throw Error("Value passed to 'css' function must be a 'css' function result: "+e+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(r)+e[n+1]),e[0]);return new a(r,e,i)},c=(e,t)=>{o?e.adoptedStyleSheets=t.map((e=>e instanceof CSSStyleSheet?e:e.styleSheet)):t.forEach((t=>{const r=document.createElement("style"),o=n.litNonce;void 0!==o&&r.setAttribute("nonce",o),r.textContent=t.cssText,e.appendChild(r)}))},d=o?e=>e:e=>e instanceof CSSStyleSheet?(e=>{let t="";for(const r of e.cssRules)t+=r.cssText;return(e=>new a("string"==typeof e?e:e+"",void 0,i))(t)})(e):e},3311:(e,t,r)=>{"use strict";var n;r.d(t,{Jb:()=>$,Ld:()=>E,YP:()=>S,_$LH:()=>U,dy:()=>k,sY:()=>q});const o=window,i=o.trustedTypes,s=i?i.createPolicy("lit-html",{createHTML:e=>e}):void 0,a="$lit$",l=`lit$${(Math.random()+"").slice(9)}$`,c="?"+l,d=`<${c}>`,u=document,h=()=>u.createComment(""),p=e=>null===e||"object"!=typeof e&&"function"!=typeof e,f=Array.isArray,g=e=>f(e)||"function"==typeof(null==e?void 0:e[Symbol.iterator]),A="[ \t\n\f\r]",v=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,m=/-->/g,b=/>/g,y=RegExp(`>|${A}(?:([^\\s"'>=/]+)(${A}*=${A}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),C=/'/g,x=/"/g,w=/^(?:script|style|textarea|title)$/i,_=e=>(t,...r)=>({_$litType$:e,strings:t,values:r}),k=_(1),S=_(2),$=Symbol.for("lit-noChange"),E=Symbol.for("lit-nothing"),O=new WeakMap,L=u.createTreeWalker(u,129,null,!1);function P(e,t){if(!Array.isArray(e)||!e.hasOwnProperty("raw"))throw Error("invalid template strings array");return void 0!==s?s.createHTML(t):t}const R=(e,t)=>{const r=e.length-1,n=[];let o,i=2===t?"<svg>":"",s=v;for(let t=0;t<r;t++){const r=e[t];let c,u,h=-1,p=0;for(;p<r.length&&(s.lastIndex=p,u=s.exec(r),null!==u);)p=s.lastIndex,s===v?"!--"===u[1]?s=m:void 0!==u[1]?s=b:void 0!==u[2]?(w.test(u[2])&&(o=RegExp("</"+u[2],"g")),s=y):void 0!==u[3]&&(s=y):s===y?">"===u[0]?(s=null!=o?o:v,h=-1):void 0===u[1]?h=-2:(h=s.lastIndex-u[2].length,c=u[1],s=void 0===u[3]?y:'"'===u[3]?x:C):s===x||s===C?s=y:s===m||s===b?s=v:(s=y,o=void 0);const f=s===y&&e[t+1].startsWith("/>")?" ":"";i+=s===v?r+d:h>=0?(n.push(c),r.slice(0,h)+a+r.slice(h)+l+f):r+l+(-2===h?(n.push(void 0),t):f)}return[P(e,i+(e[r]||"<?>")+(2===t?"</svg>":"")),n]};class N{constructor({strings:e,_$litType$:t},r){let n;this.parts=[];let o=0,s=0;const d=e.length-1,u=this.parts,[p,f]=R(e,t);if(this.el=N.createElement(p,r),L.currentNode=this.el.content,2===t){const e=this.el.content,t=e.firstChild;t.remove(),e.append(...t.childNodes)}for(;null!==(n=L.nextNode())&&u.length<d;){if(1===n.nodeType){if(n.hasAttributes()){const e=[];for(const t of n.getAttributeNames())if(t.endsWith(a)||t.startsWith(l)){const r=f[s++];if(e.push(t),void 0!==r){const e=n.getAttribute(r.toLowerCase()+a).split(l),t=/([.?@])?(.*)/.exec(r);u.push({type:1,index:o,name:t[2],strings:e,ctor:"."===t[1]?D:"?"===t[1]?M:"@"===t[1]?I:j})}else u.push({type:6,index:o})}for(const t of e)n.removeAttribute(t)}if(w.test(n.tagName)){const e=n.textContent.split(l),t=e.length-1;if(t>0){n.textContent=i?i.emptyScript:"";for(let r=0;r<t;r++)n.append(e[r],h()),L.nextNode(),u.push({type:2,index:++o});n.append(e[t],h())}}}else if(8===n.nodeType)if(n.data===c)u.push({type:2,index:o});else{let e=-1;for(;-1!==(e=n.data.indexOf(l,e+1));)u.push({type:7,index:o}),e+=l.length-1}o++}}static createElement(e,t){const r=u.createElement("template");return r.innerHTML=e,r}}function T(e,t,r=e,n){var o,i,s,a;if(t===$)return t;let l=void 0!==n?null===(o=r._$Co)||void 0===o?void 0:o[n]:r._$Cl;const c=p(t)?void 0:t._$litDirective$;return(null==l?void 0:l.constructor)!==c&&(null===(i=null==l?void 0:l._$AO)||void 0===i||i.call(l,!1),void 0===c?l=void 0:(l=new c(e),l._$AT(e,r,n)),void 0!==n?(null!==(s=(a=r)._$Co)&&void 0!==s?s:a._$Co=[])[n]=l:r._$Cl=l),void 0!==l&&(t=T(e,l._$AS(e,t.values),l,n)),t}class z{constructor(e,t){this._$AV=[],this._$AN=void 0,this._$AD=e,this._$AM=t}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(e){var t;const{el:{content:r},parts:n}=this._$AD,o=(null!==(t=null==e?void 0:e.creationScope)&&void 0!==t?t:u).importNode(r,!0);L.currentNode=o;let i=L.nextNode(),s=0,a=0,l=n[0];for(;void 0!==l;){if(s===l.index){let t;2===l.type?t=new F(i,i.nextSibling,this,e):1===l.type?t=new l.ctor(i,l.name,l.strings,this,e):6===l.type&&(t=new H(i,this,e)),this._$AV.push(t),l=n[++a]}s!==(null==l?void 0:l.index)&&(i=L.nextNode(),s++)}return L.currentNode=u,o}v(e){let t=0;for(const r of this._$AV)void 0!==r&&(void 0!==r.strings?(r._$AI(e,r,t),t+=r.strings.length-2):r._$AI(e[t])),t++}}class F{constructor(e,t,r,n){var o;this.type=2,this._$AH=E,this._$AN=void 0,this._$AA=e,this._$AB=t,this._$AM=r,this.options=n,this._$Cp=null===(o=null==n?void 0:n.isConnected)||void 0===o||o}get _$AU(){var e,t;return null!==(t=null===(e=this._$AM)||void 0===e?void 0:e._$AU)&&void 0!==t?t:this._$Cp}get parentNode(){let e=this._$AA.parentNode;const t=this._$AM;return void 0!==t&&11===(null==e?void 0:e.nodeType)&&(e=t.parentNode),e}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(e,t=this){e=T(this,e,t),p(e)?e===E||null==e||""===e?(this._$AH!==E&&this._$AR(),this._$AH=E):e!==this._$AH&&e!==$&&this._(e):void 0!==e._$litType$?this.g(e):void 0!==e.nodeType?this.$(e):g(e)?this.T(e):this._(e)}k(e){return this._$AA.parentNode.insertBefore(e,this._$AB)}$(e){this._$AH!==e&&(this._$AR(),this._$AH=this.k(e))}_(e){this._$AH!==E&&p(this._$AH)?this._$AA.nextSibling.data=e:this.$(u.createTextNode(e)),this._$AH=e}g(e){var t;const{values:r,_$litType$:n}=e,o="number"==typeof n?this._$AC(e):(void 0===n.el&&(n.el=N.createElement(P(n.h,n.h[0]),this.options)),n);if((null===(t=this._$AH)||void 0===t?void 0:t._$AD)===o)this._$AH.v(r);else{const e=new z(o,this),t=e.u(this.options);e.v(r),this.$(t),this._$AH=e}}_$AC(e){let t=O.get(e.strings);return void 0===t&&O.set(e.strings,t=new N(e)),t}T(e){f(this._$AH)||(this._$AH=[],this._$AR());const t=this._$AH;let r,n=0;for(const o of e)n===t.length?t.push(r=new F(this.k(h()),this.k(h()),this,this.options)):r=t[n],r._$AI(o),n++;n<t.length&&(this._$AR(r&&r._$AB.nextSibling,n),t.length=n)}_$AR(e=this._$AA.nextSibling,t){var r;for(null===(r=this._$AP)||void 0===r||r.call(this,!1,!0,t);e&&e!==this._$AB;){const t=e.nextSibling;e.remove(),e=t}}setConnected(e){var t;void 0===this._$AM&&(this._$Cp=e,null===(t=this._$AP)||void 0===t||t.call(this,e))}}class j{constructor(e,t,r,n,o){this.type=1,this._$AH=E,this._$AN=void 0,this.element=e,this.name=t,this._$AM=n,this.options=o,r.length>2||""!==r[0]||""!==r[1]?(this._$AH=Array(r.length-1).fill(new String),this.strings=r):this._$AH=E}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(e,t=this,r,n){const o=this.strings;let i=!1;if(void 0===o)e=T(this,e,t,0),i=!p(e)||e!==this._$AH&&e!==$,i&&(this._$AH=e);else{const n=e;let s,a;for(e=o[0],s=0;s<o.length-1;s++)a=T(this,n[r+s],t,s),a===$&&(a=this._$AH[s]),i||(i=!p(a)||a!==this._$AH[s]),a===E?e=E:e!==E&&(e+=(null!=a?a:"")+o[s+1]),this._$AH[s]=a}i&&!n&&this.j(e)}j(e){e===E?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=e?e:"")}}class D extends j{constructor(){super(...arguments),this.type=3}j(e){this.element[this.name]=e===E?void 0:e}}const B=i?i.emptyScript:"";class M extends j{constructor(){super(...arguments),this.type=4}j(e){e&&e!==E?this.element.setAttribute(this.name,B):this.element.removeAttribute(this.name)}}class I extends j{constructor(e,t,r,n,o){super(e,t,r,n,o),this.type=5}_$AI(e,t=this){var r;if((e=null!==(r=T(this,e,t,0))&&void 0!==r?r:E)===$)return;const n=this._$AH,o=e===E&&n!==E||e.capture!==n.capture||e.once!==n.once||e.passive!==n.passive,i=e!==E&&(n===E||o);o&&this.element.removeEventListener(this.name,this,n),i&&this.element.addEventListener(this.name,this,e),this._$AH=e}handleEvent(e){var t,r;"function"==typeof this._$AH?this._$AH.call(null!==(r=null===(t=this.options)||void 0===t?void 0:t.host)&&void 0!==r?r:this.element,e):this._$AH.handleEvent(e)}}class H{constructor(e,t,r){this.element=e,this.type=6,this._$AN=void 0,this._$AM=t,this.options=r}get _$AU(){return this._$AM._$AU}_$AI(e){T(this,e)}}const U={O:a,P:l,A:c,C:1,M:R,L:z,D:g,R:T,I:F,V:j,H:M,N:I,U:D,F:H},V=o.litHtmlPolyfillSupport;null==V||V(N,F),(null!==(n=o.litHtmlVersions)&&void 0!==n?n:o.litHtmlVersions=[]).push("2.7.5");const q=(e,t,r)=>{var n,o;const i=null!==(n=null==r?void 0:r.renderBefore)&&void 0!==n?n:t;let s=i._$litPart$;if(void 0===s){const e=null!==(o=null==r?void 0:r.renderBefore)&&void 0!==o?o:null;i._$litPart$=s=new F(t.insertBefore(h(),e),e,void 0,null!=r?r:{})}return s._$AI(e),s}},3192:(e,t,r)=>{"use strict";r.d(t,{oi:()=>v,iv:()=>o.iv,dy:()=>A.dy,Ld:()=>A.Ld});var n,o=r(9793);const i=window,s=i.trustedTypes,a=s?s.emptyScript:"",l=i.reactiveElementPolyfillSupport,c={toAttribute(e,t){switch(t){case Boolean:e=e?a:null;break;case Object:case Array:e=null==e?e:JSON.stringify(e)}return e},fromAttribute(e,t){let r=e;switch(t){case Boolean:r=null!==e;break;case Number:r=null===e?null:Number(e);break;case Object:case Array:try{r=JSON.parse(e)}catch(e){r=null}}return r}},d=(e,t)=>t!==e&&(t==t||e==e),u={attribute:!0,type:String,converter:c,reflect:!1,hasChanged:d},h="finalized";class p extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(e){var t;this.finalize(),(null!==(t=this.h)&&void 0!==t?t:this.h=[]).push(e)}static get observedAttributes(){this.finalize();const e=[];return this.elementProperties.forEach(((t,r)=>{const n=this._$Ep(r,t);void 0!==n&&(this._$Ev.set(n,r),e.push(n))})),e}static createProperty(e,t=u){if(t.state&&(t.attribute=!1),this.finalize(),this.elementProperties.set(e,t),!t.noAccessor&&!this.prototype.hasOwnProperty(e)){const r="symbol"==typeof e?Symbol():"__"+e,n=this.getPropertyDescriptor(e,r,t);void 0!==n&&Object.defineProperty(this.prototype,e,n)}}static getPropertyDescriptor(e,t,r){return{get(){return this[t]},set(n){const o=this[e];this[t]=n,this.requestUpdate(e,o,r)},configurable:!0,enumerable:!0}}static getPropertyOptions(e){return this.elementProperties.get(e)||u}static finalize(){if(this.hasOwnProperty(h))return!1;this[h]=!0;const e=Object.getPrototypeOf(this);if(e.finalize(),void 0!==e.h&&(this.h=[...e.h]),this.elementProperties=new Map(e.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const e=this.properties,t=[...Object.getOwnPropertyNames(e),...Object.getOwnPropertySymbols(e)];for(const r of t)this.createProperty(r,e[r])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(e){const t=[];if(Array.isArray(e)){const r=new Set(e.flat(1/0).reverse());for(const e of r)t.unshift((0,o.i1)(e))}else void 0!==e&&t.push((0,o.i1)(e));return t}static _$Ep(e,t){const r=t.attribute;return!1===r?void 0:"string"==typeof r?r:"string"==typeof e?e.toLowerCase():void 0}u(){var e;this._$E_=new Promise((e=>this.enableUpdating=e)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(e=this.constructor.h)||void 0===e||e.forEach((e=>e(this)))}addController(e){var t,r;(null!==(t=this._$ES)&&void 0!==t?t:this._$ES=[]).push(e),void 0!==this.renderRoot&&this.isConnected&&(null===(r=e.hostConnected)||void 0===r||r.call(e))}removeController(e){var t;null===(t=this._$ES)||void 0===t||t.splice(this._$ES.indexOf(e)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((e,t)=>{this.hasOwnProperty(t)&&(this._$Ei.set(t,this[t]),delete this[t])}))}createRenderRoot(){var e;const t=null!==(e=this.shadowRoot)&&void 0!==e?e:this.attachShadow(this.constructor.shadowRootOptions);return(0,o.ec)(t,this.constructor.elementStyles),t}connectedCallback(){var e;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostConnected)||void 0===t?void 0:t.call(e)}))}enableUpdating(e){}disconnectedCallback(){var e;null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostDisconnected)||void 0===t?void 0:t.call(e)}))}attributeChangedCallback(e,t,r){this._$AK(e,r)}_$EO(e,t,r=u){var n;const o=this.constructor._$Ep(e,r);if(void 0!==o&&!0===r.reflect){const i=(void 0!==(null===(n=r.converter)||void 0===n?void 0:n.toAttribute)?r.converter:c).toAttribute(t,r.type);this._$El=e,null==i?this.removeAttribute(o):this.setAttribute(o,i),this._$El=null}}_$AK(e,t){var r;const n=this.constructor,o=n._$Ev.get(e);if(void 0!==o&&this._$El!==o){const e=n.getPropertyOptions(o),i="function"==typeof e.converter?{fromAttribute:e.converter}:void 0!==(null===(r=e.converter)||void 0===r?void 0:r.fromAttribute)?e.converter:c;this._$El=o,this[o]=i.fromAttribute(t,e.type),this._$El=null}}requestUpdate(e,t,r){let n=!0;void 0!==e&&(((r=r||this.constructor.getPropertyOptions(e)).hasChanged||d)(this[e],t)?(this._$AL.has(e)||this._$AL.set(e,t),!0===r.reflect&&this._$El!==e&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(e,r))):n=!1),!this.isUpdatePending&&n&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(e){Promise.reject(e)}const e=this.scheduleUpdate();return null!=e&&await e,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var e;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((e,t)=>this[t]=e)),this._$Ei=void 0);let t=!1;const r=this._$AL;try{t=this.shouldUpdate(r),t?(this.willUpdate(r),null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostUpdate)||void 0===t?void 0:t.call(e)})),this.update(r)):this._$Ek()}catch(e){throw t=!1,this._$Ek(),e}t&&this._$AE(r)}willUpdate(e){}_$AE(e){var t;null===(t=this._$ES)||void 0===t||t.forEach((e=>{var t;return null===(t=e.hostUpdated)||void 0===t?void 0:t.call(e)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(e)),this.updated(e)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(e){return!0}update(e){void 0!==this._$EC&&(this._$EC.forEach(((e,t)=>this._$EO(t,this[t],e))),this._$EC=void 0),this._$Ek()}updated(e){}firstUpdated(e){}}p[h]=!0,p.elementProperties=new Map,p.elementStyles=[],p.shadowRootOptions={mode:"open"},null==l||l({ReactiveElement:p}),(null!==(n=i.reactiveElementVersions)&&void 0!==n?n:i.reactiveElementVersions=[]).push("1.6.2");var f,g,A=r(3311);class v extends p{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var e,t;const r=super.createRenderRoot();return null!==(e=(t=this.renderOptions).renderBefore)&&void 0!==e||(t.renderBefore=r.firstChild),r}update(e){const t=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(e),this._$Do=(0,A.sY)(t,this.renderRoot,this.renderOptions)}connectedCallback(){var e;super.connectedCallback(),null===(e=this._$Do)||void 0===e||e.setConnected(!0)}disconnectedCallback(){var e;super.disconnectedCallback(),null===(e=this._$Do)||void 0===e||e.setConnected(!1)}render(){return A.Jb}}v.finalized=!0,v._$litElement$=!0,null===(f=globalThis.litElementHydrateSupport)||void 0===f||f.call(globalThis,{LitElement:v});const m=globalThis.litElementPolyfillSupport;null==m||m({LitElement:v});(null!==(g=globalThis.litElementVersions)&&void 0!==g?g:globalThis.litElementVersions=[]).push("3.3.2")}},n={};function o(e){var t=n[e];if(void 0!==t)return t.exports;var i=n[e]={id:e,exports:{}};return r[e](i,i.exports,o),i.exports}o.m=r,o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.f={},o.e=e=>Promise.all(Object.keys(o.f).reduce(((t,r)=>(o.f[r](e,t),t)),[])),o.u=e=>e+".bundle.js",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="@pi/bpmn-list:",o.l=(r,n,i,s)=>{if(e[r])e[r].push(n);else{var a,l;if(void 0!==i)for(var c=document.getElementsByTagName("script"),d=0;d<c.length;d++){var u=c[d];if(u.getAttribute("src")==r||u.getAttribute("data-webpack")==t+i){a=u;break}}a||(l=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,o.nc&&a.setAttribute("nonce",o.nc),a.setAttribute("data-webpack",t+i),a.src=r),e[r]=[n];var h=(t,n)=>{a.onerror=a.onload=null,clearTimeout(p);var o=e[r];if(delete e[r],a.parentNode&&a.parentNode.removeChild(a),o&&o.forEach((e=>e(n))),t)return t(n)},p=setTimeout(h.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=h.bind(null,a.onerror),a.onload=h.bind(null,a.onload),l&&document.head.appendChild(a)}},o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var t=o.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var n=r.length-1;n>-1&&!e;)e=r[n--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{var e={179:0};o.f.j=(t,r)=>{var n=o.o(e,t)?e[t]:void 0;if(0!==n)if(n)r.push(n[2]);else{var i=new Promise(((r,o)=>n=e[t]=[r,o]));r.push(n[2]=i);var s=o.p+o.u(t),a=new Error;o.l(s,(r=>{if(o.o(e,t)&&(0!==(n=e[t])&&(e[t]=void 0),n)){var i=r&&("load"===r.type?"missing":r.type),s=r&&r.target&&r.target.src;a.message="Loading chunk "+t+" failed.\n("+i+": "+s+")",a.name="ChunkLoadError",a.type=i,a.request=s,n[1](a)}}),"chunk-"+t,t)}};var t=(t,r)=>{var n,i,[s,a,l]=r,c=0;if(s.some((t=>0!==e[t]))){for(n in a)o.o(a,n)&&(o.m[n]=a[n]);if(l)l(o)}for(t&&t(r);c<s.length;c++)i=s[c],o.o(e,i)&&e[i]&&e[i][0](),e[i]=0},r=self.webpackChunk_pi_bpmn_list=self.webpackChunk_pi_bpmn_list||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))})(),o.nc=void 0,(()=>{"use strict";o(654)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,