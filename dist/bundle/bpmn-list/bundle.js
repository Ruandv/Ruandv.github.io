/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={443:(t,e,o)=>{(function(){"use strict";function t(t){var e=0;return function(){return e<t.length?{done:!1,value:t[e++]}:{done:!0}}}function e(e){var o="undefined"!=typeof Symbol&&Symbol.iterator&&e[Symbol.iterator];return o?o.call(e):{next:t(e)}}function s(t){if(!(t instanceof Array)){t=e(t);for(var o,s=[];!(o=t.next()).done;)s.push(o.value);t=s}return t}var r="function"==typeof Object.create?Object.create:function(t){function e(){}return e.prototype=t,new e};var i,n=function(t){t=["object"==typeof globalThis&&globalThis,t,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof o.g&&o.g];for(var e=0;e<t.length;++e){var s=t[e];if(s&&s.Math==Math)return s}throw Error("Cannot find global object")}(this),l=function(){if("undefined"!=typeof Reflect&&Reflect.construct){if(function(){function t(){}return new t,Reflect.construct(t,[],(function(){})),new t instanceof t}())return Reflect.construct;var t=Reflect.construct;return function(e,o,s){return e=t(e,o),s&&Reflect.setPrototypeOf(e,s.prototype),e}}return function(t,e,o){return void 0===o&&(o=t),o=r(o.prototype||Object.prototype),Function.prototype.apply.call(t,o,e)||o}}();if("function"==typeof Object.setPrototypeOf)i=Object.setPrototypeOf;else{var a;t:{var c={};try{c.__proto__={a:!0},a=c.a;break t}catch(t){}a=!1}i=a?function(t,e){if(t.__proto__=e,t.__proto__!==e)throw new TypeError(t+" is not extensible");return t}:null}var h=i;if(!ShadowRoot.prototype.createElement){var u,d=window.HTMLElement,p=window.customElements.define,f=window.customElements.get,v=window.customElements,m=new WeakMap,y=new WeakMap,g=new WeakMap,b=new WeakMap;window.CustomElementRegistry=function(){this.l=new Map,this.o=new Map,this.i=new Map,this.h=new Map},window.CustomElementRegistry.prototype.define=function(t,o){if(t=t.toLowerCase(),void 0!==this.j(t))throw new DOMException("Failed to execute 'define' on 'CustomElementRegistry': the name \""+t+'" has already been used with this registry');if(void 0!==this.o.get(o))throw new DOMException("Failed to execute 'define' on 'CustomElementRegistry': this constructor has already been used with this registry");var s=o.prototype.attributeChangedCallback,r=new Set(o.observedAttributes||[]);if(_(o,r,s),s={g:o,connectedCallback:o.prototype.connectedCallback,disconnectedCallback:o.prototype.disconnectedCallback,adoptedCallback:o.prototype.adoptedCallback,attributeChangedCallback:s,formAssociated:o.formAssociated,formAssociatedCallback:o.prototype.formAssociatedCallback,formDisabledCallback:o.prototype.formDisabledCallback,formResetCallback:o.prototype.formResetCallback,formStateRestoreCallback:o.prototype.formStateRestoreCallback,observedAttributes:r},this.l.set(t,s),this.o.set(o,s),(r=f.call(v,t))||(r=w(t),p.call(v,t,r)),this===window.customElements&&(g.set(o,s),s.s=r),r=this.h.get(t)){this.h.delete(t);for(var i=(r=e(r)).next();!i.done;i=r.next())i=i.value,y.delete(i),A(i,s,!0)}return void 0!==(s=this.i.get(t))&&(s.resolve(o),this.i.delete(t)),o},window.CustomElementRegistry.prototype.upgrade=function(){C.push(this),v.upgrade.apply(v,arguments),C.pop()},window.CustomElementRegistry.prototype.get=function(t){var e;return null==(e=this.l.get(t))?void 0:e.g},window.CustomElementRegistry.prototype.j=function(t){return this.l.get(t)},window.CustomElementRegistry.prototype.whenDefined=function(t){var e=this.j(t);if(void 0!==e)return Promise.resolve(e.g);var o=this.i.get(t);return void 0===o&&((o={}).promise=new Promise((function(t){return o.resolve=t})),this.i.set(t,o)),o.promise},window.CustomElementRegistry.prototype.m=function(t,e,o){var s=this.h.get(e);s||this.h.set(e,s=new Set),o?s.add(t):s.delete(t)},window.HTMLElement=function(){var t=u;if(t)return u=void 0,t;var e=g.get(this.constructor);if(!e)throw new TypeError("Illegal constructor (custom element class must be registered with global customElements registry to be newable)");return t=Reflect.construct(d,[],e.s),Object.setPrototypeOf(t,this.constructor.prototype),m.set(t,e),t},window.HTMLElement.prototype=d.prototype;var w=function(t){function e(){var e=Reflect.construct(d,[],this.constructor);Object.setPrototypeOf(e,HTMLElement.prototype);t:{var o=e.getRootNode();if(!(o===document||o instanceof ShadowRoot)){if((o=C[C.length-1])instanceof CustomElementRegistry){var s=o;break t}(o=o.getRootNode())===document||o instanceof ShadowRoot||(o=(null==(s=b.get(o))?void 0:s.getRootNode())||document)}s=o.customElements}return(o=(s=s||window.customElements).j(t))?A(e,o):y.set(e,s),e}return n.Object.defineProperty(e,"formAssociated",{configurable:!0,enumerable:!0,get:function(){return!0}}),e.prototype.connectedCallback=function(){var e=m.get(this);e?e.connectedCallback&&e.connectedCallback.apply(this,arguments):y.get(this).m(this,t,!0)},e.prototype.disconnectedCallback=function(){var e=m.get(this);e?e.disconnectedCallback&&e.disconnectedCallback.apply(this,arguments):y.get(this).m(this,t,!1)},e.prototype.adoptedCallback=function(){var t,e;null==(t=m.get(this))||null==(e=t.adoptedCallback)||e.apply(this,arguments)},e.prototype.formAssociatedCallback=function(){var t,e=m.get(this);e&&e.formAssociated&&(null==e||null==(t=e.formAssociatedCallback)||t.apply(this,arguments))},e.prototype.formDisabledCallback=function(){var t,e=m.get(this);null!=e&&e.formAssociated&&(null==e||null==(t=e.formDisabledCallback)||t.apply(this,arguments))},e.prototype.formResetCallback=function(){var t,e=m.get(this);null!=e&&e.formAssociated&&(null==e||null==(t=e.formResetCallback)||t.apply(this,arguments))},e.prototype.formStateRestoreCallback=function(){var t,e=m.get(this);null!=e&&e.formAssociated&&(null==e||null==(t=e.formStateRestoreCallback)||t.apply(this,arguments))},e},_=function(t,e,o){if(0!==e.size&&void 0!==o){var s=t.prototype.setAttribute;s&&(t.prototype.setAttribute=function(t,r){if(t=t.toLowerCase(),e.has(t)){var i=this.getAttribute(t);s.call(this,t,r),o.call(this,t,i,r)}else s.call(this,t,r)});var r=t.prototype.removeAttribute;r&&(t.prototype.removeAttribute=function(t){if(t=t.toLowerCase(),e.has(t)){var s=this.getAttribute(t);r.call(this,t),o.call(this,t,s,null)}else r.call(this,t)});var i=t.prototype.toggleAttribute;i&&(t.prototype.toggleAttribute=function(t){if(t=t.toLowerCase(),e.has(t)){var s=this.getAttribute(t);i.call(this,t);var r=this.getAttribute(t);o.call(this,t,s,r)}else i.call(this,t)})}},$=function(t){var e=Object.getPrototypeOf(t);if(e!==window.HTMLElement)return e===d?Object.setPrototypeOf(t,window.HTMLElement):$(e)},A=function(t,e,o){o=void 0!==o&&o,Object.setPrototypeOf(t,e.g.prototype),m.set(t,e),u=t;try{new e.g}catch(t){$(e.g),new e.g}e.observedAttributes.forEach((function(o){t.hasAttribute(o)&&e.attributeChangedCallback.call(t,o,null,t.getAttribute(o))})),o&&e.connectedCallback&&t.isConnected&&e.connectedCallback.call(t)},E=Element.prototype.attachShadow;Element.prototype.attachShadow=function(t){var e=E.apply(this,arguments);return t.customElements&&(e.customElements=t.customElements),e};var C=[document],S=function(t,e,o){var s=(o?Object.getPrototypeOf(o):t.prototype)[e];t.prototype[e]=function(){C.push(this);var t=s.apply(o||this,arguments);return void 0!==t&&b.set(t,this),C.pop(),t}};S(ShadowRoot,"createElement",document),S(ShadowRoot,"importNode",document),S(Element,"insertAdjacentHTML");var O=function(t){var e=Object.getOwnPropertyDescriptor(t.prototype,"innerHTML");Object.defineProperty(t.prototype,"innerHTML",Object.assign({},e,{set:function(t){C.push(this),e.set.call(this,t),C.pop()}}))};if(O(Element),O(ShadowRoot),Object.defineProperty(window,"customElements",{value:new CustomElementRegistry,configurable:!0,writable:!0}),window.ElementInternals&&window.ElementInternals.prototype.setFormValue){var R=new WeakMap,k=HTMLElement.prototype.attachInternals;HTMLElement.prototype.attachInternals=function(t){for(var e=[],o=0;o<arguments.length;++o)e[o]=arguments[o];return e=k.call.apply(k,[this].concat(s(e))),R.set(e,this),e},["setFormValue","setValidity","checkValidity","reportValidity"].forEach((function(t){var e=window.ElementInternals.prototype,o=e[t];e[t]=function(t){for(var e=[],r=0;r<arguments.length;++r)e[r]=arguments[r];if(r=R.get(this),!0!==m.get(r).formAssociated)throw new DOMException("Failed to execute "+o+" on 'ElementInternals': The target element is not a form-associated custom element.");null==o||o.call.apply(o,[this].concat(s(e)))}}));var P=function(t){var e=l(Array,[].concat(s(t)),this.constructor);return e.h=t,e},x=P,j=Array;if(x.prototype=r(j.prototype),x.prototype.constructor=x,h)h(x,j);else for(var T in j)if("prototype"!=T)if(Object.defineProperties){var M=Object.getOwnPropertyDescriptor(j,T);M&&Object.defineProperty(x,T,M)}else x[T]=j[T];x.u=j.prototype,n.Object.defineProperty(P.prototype,"value",{configurable:!0,enumerable:!0,get:function(){var t;return(null==(t=this.h.find((function(t){return!0===t.checked})))?void 0:t.value)||""}});var H=function(t){var e=this,o=new Map;t.forEach((function(t,s){var r=t.getAttribute("name"),i=o.get(r)||[];e[+s]=t,i.push(t),o.set(r,i)})),this.length=t.length,o.forEach((function(t,o){t&&(e[o]=1===t.length?t[0]:new P(t))}))};H.prototype.namedItem=function(t){return this[t]};var L=Object.getOwnPropertyDescriptor(HTMLFormElement.prototype,"elements");Object.defineProperty(HTMLFormElement.prototype,"elements",{get:function(){for(var t=L.get.call(this,[]),o=[],s=(t=e(t)).next();!s.done;s=t.next()){s=s.value;var r=m.get(s);r&&!0!==r.formAssociated||o.push(s)}return new H(o)}})}}}).call("object"==typeof globalThis?globalThis:window)},671:t=>{function e(t){return Promise.resolve().then((()=>{var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}))}e.keys=()=>[],e.resolve=e,e.id=671,t.exports=e}},e={};function o(s){var r=e[s];if(void 0!==r)return r.exports;var i=e[s]={exports:{}};return t[s](i,i.exports,o),i.exports}o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";o(443);class t{constructor(){this.settled=!1,this.promise=new Promise(((t,e)=>{this._resolve=t,this._reject=e}))}resolve(t){this.settled=!0,this._resolve(t)}reject(t){this.settled=!0,this._reject(t)}}const e=(t,e,o)=>{let s=t[0];for(let r=1;r<t.length;r++)s+=e[o?o[r-1]:r-1],s+=t[r];return s},s=[];for(let t=0;t<256;t++)s[t]=(t>>4&15).toString(16)+(15&t).toString(16);function r(t,e){return(e?"h":"s")+function(t){let e=0,o=8997,r=0,i=33826,n=0,l=40164,a=0,c=52210;for(let s=0;s<t.length;s++)o^=t.charCodeAt(s),e=435*o,r=435*i,n=435*l,a=435*c,n+=o<<8,a+=i<<8,r+=e>>>16,o=65535&e,n+=r>>>16,i=65535&r,c=a+(n>>>16)&65535,l=65535&n;return s[c>>8]+s[255&c]+s[l>>8]+s[255&l]+s[i>>8]+s[255&i]+s[o>>8]+s[255&o]}("string"==typeof t?t:t.join(""))}const i=new WeakMap,n=new Map;function l(t,o,s){var l;if(t){const a=null!==(l=null==s?void 0:s.id)&&void 0!==l?l:function(t){const e="string"==typeof t?t:t.strings;let o=n.get(e);void 0===o&&(o=r(e,"string"!=typeof t&&!("strTag"in t)),n.set(e,o));return o}(o),c=t[a];if(c){if("string"==typeof c)return c;if("strTag"in c)return e(c.strings,o.values,c.values);{let t=i.get(c);return void 0===t&&(t=c.values,i.set(c,t)),{...c,values:t.map((t=>o.values[t]))}}}}return(t=>{return"string"!=typeof(o=t)&&"strTag"in o?e(t.strings,t.values):t;var o})(o)}function a(t){window.dispatchEvent(new CustomEvent("lit-localize-status",{detail:t}))}let c,h,u,d,p,f="",v=new t;v.resolve();let m=0;const y=()=>f,g=e=>{if(e===(null!=c?c:f))return v.promise;if(!u||!d)throw new Error("Internal error");if(!u.has(e))throw new Error("Invalid locale code");m++;const o=m;c=e,v.settled&&(v=new t),a({status:"loading",loadingLocale:e});return(e===h?Promise.resolve({templates:void 0}):d(e)).then((t=>{m===o&&(f=e,c=void 0,p=t.templates,a({status:"ready",readyLocale:e}),v.resolve())}),(t=>{m===o&&(a({status:"error",errorLocale:e,errorMessage:t.toString()}),v.reject(t))})),v.promise};let b=null,w=!1;const{getLocale:_,setLocale:$}=(A={sourceLocale:"en",targetLocales:[],loadLocale:t=>o(671)(`./${t}.js`)},function(t){if(w)throw new Error("lit-localize can only be configured once");b=t,w=!0}(((t,e)=>l(p,t,e))),f=h=A.sourceLocale,u=new Set(A.targetLocales),u.add(A.sourceLocale),d=A.loadLocale,{getLocale:y,setLocale:g});var A;const E=window,C=E.ShadowRoot&&(void 0===E.ShadyCSS||E.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,S=Symbol(),O=new WeakMap;class R{constructor(t,e,o){if(this._$cssResult$=!0,o!==S)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const e=this.t;if(C&&void 0===t){const o=void 0!==e&&1===e.length;o&&(t=O.get(e)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),o&&O.set(e,t))}return t}toString(){return this.cssText}}const k=(t,...e)=>{const o=1===t.length?t[0]:e.reduce(((e,o,s)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if("number"==typeof t)return t;throw Error("Value passed to 'css' function must be a 'css' function result: "+t+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(o)+t[s+1]),t[0]);return new R(o,t,S)},P=(t,e)=>{C?t.adoptedStyleSheets=e.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):e.forEach((e=>{const o=document.createElement("style"),s=E.litNonce;void 0!==s&&o.setAttribute("nonce",s),o.textContent=e.cssText,t.appendChild(o)}))},x=C?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const o of t.cssRules)e+=o.cssText;return(t=>new R("string"==typeof t?t:t+"",void 0,S))(e)})(t):t;var j;const T=window,M=T.trustedTypes,H=M?M.emptyScript:"",L=T.reactiveElementPolyfillSupport,U={toAttribute(t,e){switch(e){case Boolean:t=t?H:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let o=t;switch(e){case Boolean:o=null!==t;break;case Number:o=null===t?null:Number(t);break;case Object:case Array:try{o=JSON.parse(t)}catch(t){o=null}}return o}},N=(t,e)=>e!==t&&(e==e||t==t),D={attribute:!0,type:String,converter:U,reflect:!1,hasChanged:N};class I extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(t){var e;this.finalize(),(null!==(e=this.h)&&void 0!==e?e:this.h=[]).push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((e,o)=>{const s=this._$Ep(o,e);void 0!==s&&(this._$Ev.set(s,o),t.push(s))})),t}static createProperty(t,e=D){if(e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),!e.noAccessor&&!this.prototype.hasOwnProperty(t)){const o="symbol"==typeof t?Symbol():"__"+t,s=this.getPropertyDescriptor(t,o,e);void 0!==s&&Object.defineProperty(this.prototype,t,s)}}static getPropertyDescriptor(t,e,o){return{get(){return this[e]},set(s){const r=this[t];this[e]=s,this.requestUpdate(t,r,o)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||D}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),void 0!==t.h&&(this.h=[...t.h]),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const o of e)this.createProperty(o,t[o])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const o=new Set(t.flat(1/0).reverse());for(const t of o)e.unshift(x(t))}else void 0!==t&&e.push(x(t));return e}static _$Ep(t,e){const o=e.attribute;return!1===o?void 0:"string"==typeof o?o:"string"==typeof t?t.toLowerCase():void 0}u(){var t;this._$E_=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(t=this.constructor.h)||void 0===t||t.forEach((t=>t(this)))}addController(t){var e,o;(null!==(e=this._$ES)&&void 0!==e?e:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(o=t.hostConnected)||void 0===o||o.call(t))}removeController(t){var e;null===(e=this._$ES)||void 0===e||e.splice(this._$ES.indexOf(t)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((t,e)=>{this.hasOwnProperty(e)&&(this._$Ei.set(e,this[e]),delete this[e])}))}createRenderRoot(){var t;const e=null!==(t=this.shadowRoot)&&void 0!==t?t:this.attachShadow(this.constructor.shadowRootOptions);return P(e,this.constructor.elementStyles),e}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostConnected)||void 0===e?void 0:e.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostDisconnected)||void 0===e?void 0:e.call(t)}))}attributeChangedCallback(t,e,o){this._$AK(t,o)}_$EO(t,e,o=D){var s;const r=this.constructor._$Ep(t,o);if(void 0!==r&&!0===o.reflect){const i=(void 0!==(null===(s=o.converter)||void 0===s?void 0:s.toAttribute)?o.converter:U).toAttribute(e,o.type);this._$El=t,null==i?this.removeAttribute(r):this.setAttribute(r,i),this._$El=null}}_$AK(t,e){var o;const s=this.constructor,r=s._$Ev.get(t);if(void 0!==r&&this._$El!==r){const t=s.getPropertyOptions(r),i="function"==typeof t.converter?{fromAttribute:t.converter}:void 0!==(null===(o=t.converter)||void 0===o?void 0:o.fromAttribute)?t.converter:U;this._$El=r,this[r]=i.fromAttribute(e,t.type),this._$El=null}}requestUpdate(t,e,o){let s=!0;void 0!==t&&(((o=o||this.constructor.getPropertyOptions(t)).hasChanged||N)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===o.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,o))):s=!1),!this.isUpdatePending&&s&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((t,e)=>this[e]=t)),this._$Ei=void 0);let e=!1;const o=this._$AL;try{e=this.shouldUpdate(o),e?(this.willUpdate(o),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostUpdate)||void 0===e?void 0:e.call(t)})),this.update(o)):this._$Ek()}catch(t){throw e=!1,this._$Ek(),t}e&&this._$AE(o)}willUpdate(t){}_$AE(t){var e;null===(e=this._$ES)||void 0===e||e.forEach((t=>{var e;return null===(e=t.hostUpdated)||void 0===e?void 0:e.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return!0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,e)=>this._$EO(e,this[e],t))),this._$EC=void 0),this._$Ek()}updated(t){}firstUpdated(t){}}var z;I.finalized=!0,I.elementProperties=new Map,I.elementStyles=[],I.shadowRootOptions={mode:"open"},null==L||L({ReactiveElement:I}),(null!==(j=T.reactiveElementVersions)&&void 0!==j?j:T.reactiveElementVersions=[]).push("1.4.2");const B=window,W=B.trustedTypes,V=W?W.createPolicy("lit-html",{createHTML:t=>t}):void 0,F=`lit$${(Math.random()+"").slice(9)}$`,q="?"+F,K=`<${q}>`,Y=document,J=(t="")=>Y.createComment(t),Z=t=>null===t||"object"!=typeof t&&"function"!=typeof t,G=Array.isArray,Q=t=>G(t)||"function"==typeof(null==t?void 0:t[Symbol.iterator]),X=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,tt=/-->/g,et=/>/g,ot=RegExp(">|[ \t\n\f\r](?:([^\\s\"'>=/]+)([ \t\n\f\r]*=[ \t\n\f\r]*(?:[^ \t\n\f\r\"'`<>=]|(\"|')|))|$)","g"),st=/'/g,rt=/"/g,it=/^(?:script|style|textarea|title)$/i,nt=t=>(e,...o)=>({_$litType$:t,strings:e,values:o}),lt=nt(1),at=(nt(2),Symbol.for("lit-noChange")),ct=Symbol.for("lit-nothing"),ht=new WeakMap,ut=Y.createTreeWalker(Y,129,null,!1),dt=(t,e)=>{const o=t.length-1,s=[];let r,i=2===e?"<svg>":"",n=X;for(let e=0;e<o;e++){const o=t[e];let l,a,c=-1,h=0;for(;h<o.length&&(n.lastIndex=h,a=n.exec(o),null!==a);)h=n.lastIndex,n===X?"!--"===a[1]?n=tt:void 0!==a[1]?n=et:void 0!==a[2]?(it.test(a[2])&&(r=RegExp("</"+a[2],"g")),n=ot):void 0!==a[3]&&(n=ot):n===ot?">"===a[0]?(n=null!=r?r:X,c=-1):void 0===a[1]?c=-2:(c=n.lastIndex-a[2].length,l=a[1],n=void 0===a[3]?ot:'"'===a[3]?rt:st):n===rt||n===st?n=ot:n===tt||n===et?n=X:(n=ot,r=void 0);const u=n===ot&&t[e+1].startsWith("/>")?" ":"";i+=n===X?o+K:c>=0?(s.push(l),o.slice(0,c)+"$lit$"+o.slice(c)+F+u):o+F+(-2===c?(s.push(void 0),e):u)}const l=i+(t[o]||"<?>")+(2===e?"</svg>":"");if(!Array.isArray(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return[void 0!==V?V.createHTML(l):l,s]};class pt{constructor({strings:t,_$litType$:e},o){let s;this.parts=[];let r=0,i=0;const n=t.length-1,l=this.parts,[a,c]=dt(t,e);if(this.el=pt.createElement(a,o),ut.currentNode=this.el.content,2===e){const t=this.el.content,e=t.firstChild;e.remove(),t.append(...e.childNodes)}for(;null!==(s=ut.nextNode())&&l.length<n;){if(1===s.nodeType){if(s.hasAttributes()){const t=[];for(const e of s.getAttributeNames())if(e.endsWith("$lit$")||e.startsWith(F)){const o=c[i++];if(t.push(e),void 0!==o){const t=s.getAttribute(o.toLowerCase()+"$lit$").split(F),e=/([.?@])?(.*)/.exec(o);l.push({type:1,index:r,name:e[2],strings:t,ctor:"."===e[1]?gt:"?"===e[1]?wt:"@"===e[1]?_t:yt})}else l.push({type:6,index:r})}for(const e of t)s.removeAttribute(e)}if(it.test(s.tagName)){const t=s.textContent.split(F),e=t.length-1;if(e>0){s.textContent=W?W.emptyScript:"";for(let o=0;o<e;o++)s.append(t[o],J()),ut.nextNode(),l.push({type:2,index:++r});s.append(t[e],J())}}}else if(8===s.nodeType)if(s.data===q)l.push({type:2,index:r});else{let t=-1;for(;-1!==(t=s.data.indexOf(F,t+1));)l.push({type:7,index:r}),t+=F.length-1}r++}}static createElement(t,e){const o=Y.createElement("template");return o.innerHTML=t,o}}function ft(t,e,o=t,s){var r,i,n,l;if(e===at)return e;let a=void 0!==s?null===(r=o._$Co)||void 0===r?void 0:r[s]:o._$Cl;const c=Z(e)?void 0:e._$litDirective$;return(null==a?void 0:a.constructor)!==c&&(null===(i=null==a?void 0:a._$AO)||void 0===i||i.call(a,!1),void 0===c?a=void 0:(a=new c(t),a._$AT(t,o,s)),void 0!==s?(null!==(n=(l=o)._$Co)&&void 0!==n?n:l._$Co=[])[s]=a:o._$Cl=a),void 0!==a&&(e=ft(t,a._$AS(t,e.values),a,s)),e}class vt{constructor(t,e){this.u=[],this._$AN=void 0,this._$AD=t,this._$AM=e}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}v(t){var e;const{el:{content:o},parts:s}=this._$AD,r=(null!==(e=null==t?void 0:t.creationScope)&&void 0!==e?e:Y).importNode(o,!0);ut.currentNode=r;let i=ut.nextNode(),n=0,l=0,a=s[0];for(;void 0!==a;){if(n===a.index){let e;2===a.type?e=new mt(i,i.nextSibling,this,t):1===a.type?e=new a.ctor(i,a.name,a.strings,this,t):6===a.type&&(e=new $t(i,this,t)),this.u.push(e),a=s[++l]}n!==(null==a?void 0:a.index)&&(i=ut.nextNode(),n++)}return r}p(t){let e=0;for(const o of this.u)void 0!==o&&(void 0!==o.strings?(o._$AI(t,o,e),e+=o.strings.length-2):o._$AI(t[e])),e++}}class mt{constructor(t,e,o,s){var r;this.type=2,this._$AH=ct,this._$AN=void 0,this._$AA=t,this._$AB=e,this._$AM=o,this.options=s,this._$Cm=null===(r=null==s?void 0:s.isConnected)||void 0===r||r}get _$AU(){var t,e;return null!==(e=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==e?e:this._$Cm}get parentNode(){let t=this._$AA.parentNode;const e=this._$AM;return void 0!==e&&11===t.nodeType&&(t=e.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,e=this){t=ft(this,t,e),Z(t)?t===ct||null==t||""===t?(this._$AH!==ct&&this._$AR(),this._$AH=ct):t!==this._$AH&&t!==at&&this.g(t):void 0!==t._$litType$?this.$(t):void 0!==t.nodeType?this.T(t):Q(t)?this.k(t):this.g(t)}O(t,e=this._$AB){return this._$AA.parentNode.insertBefore(t,e)}T(t){this._$AH!==t&&(this._$AR(),this._$AH=this.O(t))}g(t){this._$AH!==ct&&Z(this._$AH)?this._$AA.nextSibling.data=t:this.T(Y.createTextNode(t)),this._$AH=t}$(t){var e;const{values:o,_$litType$:s}=t,r="number"==typeof s?this._$AC(t):(void 0===s.el&&(s.el=pt.createElement(s.h,this.options)),s);if((null===(e=this._$AH)||void 0===e?void 0:e._$AD)===r)this._$AH.p(o);else{const t=new vt(r,this),e=t.v(this.options);t.p(o),this.T(e),this._$AH=t}}_$AC(t){let e=ht.get(t.strings);return void 0===e&&ht.set(t.strings,e=new pt(t)),e}k(t){G(this._$AH)||(this._$AH=[],this._$AR());const e=this._$AH;let o,s=0;for(const r of t)s===e.length?e.push(o=new mt(this.O(J()),this.O(J()),this,this.options)):o=e[s],o._$AI(r),s++;s<e.length&&(this._$AR(o&&o._$AB.nextSibling,s),e.length=s)}_$AR(t=this._$AA.nextSibling,e){var o;for(null===(o=this._$AP)||void 0===o||o.call(this,!1,!0,e);t&&t!==this._$AB;){const e=t.nextSibling;t.remove(),t=e}}setConnected(t){var e;void 0===this._$AM&&(this._$Cm=t,null===(e=this._$AP)||void 0===e||e.call(this,t))}}class yt{constructor(t,e,o,s,r){this.type=1,this._$AH=ct,this._$AN=void 0,this.element=t,this.name=e,this._$AM=s,this.options=r,o.length>2||""!==o[0]||""!==o[1]?(this._$AH=Array(o.length-1).fill(new String),this.strings=o):this._$AH=ct}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,e=this,o,s){const r=this.strings;let i=!1;if(void 0===r)t=ft(this,t,e,0),i=!Z(t)||t!==this._$AH&&t!==at,i&&(this._$AH=t);else{const s=t;let n,l;for(t=r[0],n=0;n<r.length-1;n++)l=ft(this,s[o+n],e,n),l===at&&(l=this._$AH[n]),i||(i=!Z(l)||l!==this._$AH[n]),l===ct?t=ct:t!==ct&&(t+=(null!=l?l:"")+r[n+1]),this._$AH[n]=l}i&&!s&&this.j(t)}j(t){t===ct?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"")}}class gt extends yt{constructor(){super(...arguments),this.type=3}j(t){this.element[this.name]=t===ct?void 0:t}}const bt=W?W.emptyScript:"";class wt extends yt{constructor(){super(...arguments),this.type=4}j(t){t&&t!==ct?this.element.setAttribute(this.name,bt):this.element.removeAttribute(this.name)}}class _t extends yt{constructor(t,e,o,s,r){super(t,e,o,s,r),this.type=5}_$AI(t,e=this){var o;if((t=null!==(o=ft(this,t,e,0))&&void 0!==o?o:ct)===at)return;const s=this._$AH,r=t===ct&&s!==ct||t.capture!==s.capture||t.once!==s.once||t.passive!==s.passive,i=t!==ct&&(s===ct||r);r&&this.element.removeEventListener(this.name,this,s),i&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){var e,o;"function"==typeof this._$AH?this._$AH.call(null!==(o=null===(e=this.options)||void 0===e?void 0:e.host)&&void 0!==o?o:this.element,t):this._$AH.handleEvent(t)}}class $t{constructor(t,e,o){this.element=t,this.type=6,this._$AN=void 0,this._$AM=e,this.options=o}get _$AU(){return this._$AM._$AU}_$AI(t){ft(this,t)}}const At=B.litHtmlPolyfillSupport;null==At||At(pt,mt),(null!==(z=B.litHtmlVersions)&&void 0!==z?z:B.litHtmlVersions=[]).push("2.4.0");var Et,Ct;class St extends I{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var t,e;const o=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=o.firstChild),o}update(t){const e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=((t,e,o)=>{var s,r;const i=null!==(s=null==o?void 0:o.renderBefore)&&void 0!==s?s:e;let n=i._$litPart$;if(void 0===n){const t=null!==(r=null==o?void 0:o.renderBefore)&&void 0!==r?r:null;i._$litPart$=n=new mt(e.insertBefore(J(),t),t,void 0,null!=o?o:{})}return n._$AI(t),n})(e,this.renderRoot,this.renderOptions)}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0)}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1)}render(){return at}}St.finalized=!0,St._$litElement$=!0,null===(Et=globalThis.litElementHydrateSupport)||void 0===Et||Et.call(globalThis,{LitElement:St});const Ot=globalThis.litElementPolyfillSupport;null==Ot||Ot({LitElement:St});(null!==(Ct=globalThis.litElementVersions)&&void 0!==Ct?Ct:globalThis.litElementVersions=[]).push("3.2.2");const Rt=(t,e)=>"method"===e.kind&&e.descriptor&&!("value"in e.descriptor)?{...e,finisher(o){o.createProperty(e.key,t)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:e.key,initializer(){"function"==typeof e.initializer&&(this[e.key]=e.initializer.call(this))},finisher(o){o.createProperty(e.key,t)}};var kt;null===(kt=window.HTMLSlotElement)||void 0===kt||kt.prototype.assignedElements;const Pt=new WeakMap;const xt=!!ShadowRoot.prototype.createElement,jt=(Tt=t=>class extends t{static get scopedElements(){return{}}static get shadowRootOptions(){return this.__shadowRootOptions}static set shadowRootOptions(t){this.__shadowRootOptions=t}static get elementStyles(){return this.__elementStyles}static set elementStyles(t){this.__elementStyles=t}constructor(...t){super(),this.renderOptions=this.renderOptions||void 0}get registry(){return this.constructor.__registry}set registry(t){this.constructor.__registry=t}createRenderRoot(){const{scopedElements:t,shadowRootOptions:e,elementStyles:o}=this.constructor;if(!this.registry||this.registry===this.constructor.__registry&&!Object.prototype.hasOwnProperty.call(this.constructor,"__registry")){this.registry=xt?new CustomElementRegistry:customElements;for(const[e,o]of Object.entries(t))this.defineScopedElement(e,o)}const s={mode:"open",...e,customElements:this.registry},r=this.attachShadow(s);return xt&&(this.renderOptions.creationScope=r),r instanceof ShadowRoot&&(P(r,o),this.renderOptions.renderBefore=this.renderOptions.renderBefore||r.firstChild),r}createScopedElement(t){return(xt?this.shadowRoot:document).createElement(t)}defineScopedElement(t,e){const o=this.registry.get(t);return o&&!1===xt&&o!==e&&console.error([`You are trying to re-register the "${t}" custom element with a different class via ScopedElementsMixin.`,"This is only possible with a CustomElementRegistry.","Your browser does not support this feature so you will need to load a polyfill for it.",'Load "@webcomponents/scoped-custom-element-registry" before you register ANY web component to the global customElements registry.','e.g. add "<script src="/node_modules/@webcomponents/scoped-custom-element-registry/scoped-custom-element-registry.min.js"><\/script>" as your first script tag.',"For more details you can visit https://open-wc.org/docs/development/scoped-elements/"].join("\n")),o?this.registry.get(t):this.registry.define(t,e)}getScopedTagName(t){return t}static getScopedTagName(t){return t}},t=>{if(function(t,e){let o=e;for(;o;){if(Pt.get(o)===t)return!0;o=Object.getPrototypeOf(o)}return!1}(Tt,t))return t;const e=Tt(t);return Pt.set(e,Tt),e});var Tt;const Mt=k`
  :host {
    all: initial;
  }
`,Ht=[Mt,k`
  :host {
    display: grid;
    min-height: 100%;
  }
`],Lt=[Mt,k`
  :host {
    display: grid;
  }
`];class Ut extends St{static get styles(){return Lt}render(){return lt`<div><h3>Placeholder</h3></div>`}}var Nt=function(t,e,o,s){var r,i=arguments.length,n=i<3?e:null===s?s=Object.getOwnPropertyDescriptor(e,o):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(t,e,o,s);else for(var l=t.length-1;l>=0;l--)(r=t[l])&&(n=(i<3?r(n):i>3?r(e,o,n):r(e,o))||n);return i>3&&n&&Object.defineProperty(e,o,n),n};let Dt=class extends(jt(St)){constructor(){super(...arguments),this.role="main"}static get scopedElements(){return{"nx-list-component":Ut}}static get styles(){return Ht}render(){return lt` <nx-list-component></nx-list-component>`}};Nt([function(t){return(e,o)=>void 0!==o?((t,e,o)=>{e.constructor.createProperty(o,t)})(t,e,o):Rt(t,e)}({reflect:!0})],Dt.prototype,"role",void 0),Dt=Nt([(t=>e=>"function"==typeof e?((t,e)=>(customElements.define(t,e),e))(t,e):((t,e)=>{const{kind:o,elements:s}=e;return{kind:o,elements:s,finisher(e){customElements.define(t,e)}}})(t,e))("pi-bpmn-list")],Dt)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,