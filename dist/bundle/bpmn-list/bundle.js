/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e,t,n={2443:(e,t,n)=>{(function(){"use strict";function e(e){var t=0;return function(){return t<e.length?{done:!1,value:e[t++]}:{done:!0}}}function t(t){var n="undefined"!=typeof Symbol&&Symbol.iterator&&t[Symbol.iterator];return n?n.call(t):{next:e(t)}}function r(e){if(!(e instanceof Array)){e=t(e);for(var n,r=[];!(n=e.next()).done;)r.push(n.value);e=r}return e}var o="function"==typeof Object.create?Object.create:function(e){function t(){}return t.prototype=e,new t};var i,s=function(e){e=["object"==typeof globalThis&&globalThis,e,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof n.g&&n.g];for(var t=0;t<e.length;++t){var r=e[t];if(r&&r.Math==Math)return r}throw Error("Cannot find global object")}(this),a=function(){if("undefined"!=typeof Reflect&&Reflect.construct){if(function(){function e(){}return new e,Reflect.construct(e,[],(function(){})),new e instanceof e}())return Reflect.construct;var e=Reflect.construct;return function(t,n,r){return t=e(t,n),r&&Reflect.setPrototypeOf(t,r.prototype),t}}return function(e,t,n){return void 0===n&&(n=e),n=o(n.prototype||Object.prototype),Function.prototype.apply.call(e,n,t)||n}}();if("function"==typeof Object.setPrototypeOf)i=Object.setPrototypeOf;else{var l;e:{var c={};try{c.__proto__={a:!0},l=c.a;break e}catch(e){}l=!1}i=l?function(e,t){if(e.__proto__=t,e.__proto__!==t)throw new TypeError(e+" is not extensible");return e}:null}var d=i;if(!ShadowRoot.prototype.createElement){var u,h=window.HTMLElement,A=window.customElements.define,p=window.customElements.get,f=window.customElements,v=new WeakMap,g=new WeakMap,b=new WeakMap,m=new WeakMap;window.CustomElementRegistry=function(){this.l=new Map,this.o=new Map,this.i=new Map,this.h=new Map},window.CustomElementRegistry.prototype.define=function(e,n){if(e=e.toLowerCase(),void 0!==this.j(e))throw new DOMException("Failed to execute 'define' on 'CustomElementRegistry': the name \""+e+'" has already been used with this registry');if(void 0!==this.o.get(n))throw new DOMException("Failed to execute 'define' on 'CustomElementRegistry': this constructor has already been used with this registry");var r=n.prototype.attributeChangedCallback,o=new Set(n.observedAttributes||[]);if(C(n,o,r),r={g:n,connectedCallback:n.prototype.connectedCallback,disconnectedCallback:n.prototype.disconnectedCallback,adoptedCallback:n.prototype.adoptedCallback,attributeChangedCallback:r,formAssociated:n.formAssociated,formAssociatedCallback:n.prototype.formAssociatedCallback,formDisabledCallback:n.prototype.formDisabledCallback,formResetCallback:n.prototype.formResetCallback,formStateRestoreCallback:n.prototype.formStateRestoreCallback,observedAttributes:o},this.l.set(e,r),this.o.set(n,r),(o=p.call(f,e))||(o=y(e),A.call(f,e,o)),this===window.customElements&&(b.set(n,r),r.s=o),o=this.h.get(e)){this.h.delete(e);for(var i=(o=t(o)).next();!i.done;i=o.next())i=i.value,g.delete(i),x(i,r,!0)}return void 0!==(r=this.i.get(e))&&(r.resolve(n),this.i.delete(e)),n},window.CustomElementRegistry.prototype.upgrade=function(){k.push(this),f.upgrade.apply(f,arguments),k.pop()},window.CustomElementRegistry.prototype.get=function(e){var t;return null==(t=this.l.get(e))?void 0:t.g},window.CustomElementRegistry.prototype.j=function(e){return this.l.get(e)},window.CustomElementRegistry.prototype.whenDefined=function(e){var t=this.j(e);if(void 0!==t)return Promise.resolve(t.g);var n=this.i.get(e);return void 0===n&&((n={}).promise=new Promise((function(e){return n.resolve=e})),this.i.set(e,n)),n.promise},window.CustomElementRegistry.prototype.m=function(e,t,n){var r=this.h.get(t);r||this.h.set(t,r=new Set),n?r.add(e):r.delete(e)},window.HTMLElement=function(){var e=u;if(e)return u=void 0,e;var t=b.get(this.constructor);if(!t)throw new TypeError("Illegal constructor (custom element class must be registered with global customElements registry to be newable)");return e=Reflect.construct(h,[],t.s),Object.setPrototypeOf(e,this.constructor.prototype),v.set(e,t),e},window.HTMLElement.prototype=h.prototype;var y=function(e){function t(){var t=Reflect.construct(h,[],this.constructor);Object.setPrototypeOf(t,HTMLElement.prototype);e:{var n=t.getRootNode();if(!(n===document||n instanceof ShadowRoot)){if((n=k[k.length-1])instanceof CustomElementRegistry){var r=n;break e}(n=n.getRootNode())===document||n instanceof ShadowRoot||(n=(null==(r=m.get(n))?void 0:r.getRootNode())||document)}r=n.customElements}return(n=(r=r||window.customElements).j(e))?x(t,n):g.set(t,r),t}return s.Object.defineProperty(t,"formAssociated",{configurable:!0,enumerable:!0,get:function(){return!0}}),t.prototype.connectedCallback=function(){var t=v.get(this);t?t.connectedCallback&&t.connectedCallback.apply(this,arguments):g.get(this).m(this,e,!0)},t.prototype.disconnectedCallback=function(){var t=v.get(this);t?t.disconnectedCallback&&t.disconnectedCallback.apply(this,arguments):g.get(this).m(this,e,!1)},t.prototype.adoptedCallback=function(){var e,t;null==(e=v.get(this))||null==(t=e.adoptedCallback)||t.apply(this,arguments)},t.prototype.formAssociatedCallback=function(){var e,t=v.get(this);t&&t.formAssociated&&(null==t||null==(e=t.formAssociatedCallback)||e.apply(this,arguments))},t.prototype.formDisabledCallback=function(){var e,t=v.get(this);null!=t&&t.formAssociated&&(null==t||null==(e=t.formDisabledCallback)||e.apply(this,arguments))},t.prototype.formResetCallback=function(){var e,t=v.get(this);null!=t&&t.formAssociated&&(null==t||null==(e=t.formResetCallback)||e.apply(this,arguments))},t.prototype.formStateRestoreCallback=function(){var e,t=v.get(this);null!=t&&t.formAssociated&&(null==t||null==(e=t.formStateRestoreCallback)||e.apply(this,arguments))},t},C=function(e,t,n){if(0!==t.size&&void 0!==n){var r=e.prototype.setAttribute;r&&(e.prototype.setAttribute=function(e,o){if(e=e.toLowerCase(),t.has(e)){var i=this.getAttribute(e);r.call(this,e,o),n.call(this,e,i,o)}else r.call(this,e,o)});var o=e.prototype.removeAttribute;o&&(e.prototype.removeAttribute=function(e){if(e=e.toLowerCase(),t.has(e)){var r=this.getAttribute(e);o.call(this,e),n.call(this,e,r,null)}else o.call(this,e)});var i=e.prototype.toggleAttribute;i&&(e.prototype.toggleAttribute=function(e){if(e=e.toLowerCase(),t.has(e)){var r=this.getAttribute(e);i.call(this,e);var o=this.getAttribute(e);n.call(this,e,r,o)}else i.call(this,e)})}},w=function(e){var t=Object.getPrototypeOf(e);if(t!==window.HTMLElement)return t===h?Object.setPrototypeOf(e,window.HTMLElement):w(t)},x=function(e,t,n){n=void 0!==n&&n,Object.setPrototypeOf(e,t.g.prototype),v.set(e,t),u=e;try{new t.g}catch(e){w(t.g),new t.g}t.observedAttributes.forEach((function(n){e.hasAttribute(n)&&t.attributeChangedCallback.call(e,n,null,e.getAttribute(n))})),n&&t.connectedCallback&&e.isConnected&&t.connectedCallback.call(e)},_=Element.prototype.attachShadow;Element.prototype.attachShadow=function(e){var t=_.apply(this,arguments);return e.customElements&&(t.customElements=e.customElements),t};var k=[document],E=function(e,t,n){var r=(n?Object.getPrototypeOf(n):e.prototype)[t];e.prototype[t]=function(){k.push(this);var e=r.apply(n||this,arguments);return void 0!==e&&m.set(e,this),k.pop(),e}};E(ShadowRoot,"createElement",document),E(ShadowRoot,"importNode",document),E(Element,"insertAdjacentHTML");var $=function(e){var t=Object.getOwnPropertyDescriptor(e.prototype,"innerHTML");Object.defineProperty(e.prototype,"innerHTML",Object.assign({},t,{set:function(e){k.push(this),t.set.call(this,e),k.pop()}}))};if($(Element),$(ShadowRoot),Object.defineProperty(window,"customElements",{value:new CustomElementRegistry,configurable:!0,writable:!0}),window.ElementInternals&&window.ElementInternals.prototype.setFormValue){var S=new WeakMap,T=HTMLElement.prototype.attachInternals;HTMLElement.prototype.attachInternals=function(e){for(var t=[],n=0;n<arguments.length;++n)t[n]=arguments[n];return t=T.call.apply(T,[this].concat(r(t))),S.set(t,this),t},["setFormValue","setValidity","checkValidity","reportValidity"].forEach((function(e){var t=window.ElementInternals.prototype,n=t[e];t[e]=function(e){for(var t=[],o=0;o<arguments.length;++o)t[o]=arguments[o];if(o=S.get(this),!0!==v.get(o).formAssociated)throw new DOMException("Failed to execute "+n+" on 'ElementInternals': The target element is not a form-associated custom element.");null==n||n.call.apply(n,[this].concat(r(t)))}}));var O=function(e){var t=a(Array,[].concat(r(e)),this.constructor);return t.h=e,t},B=O,z=Array;if(B.prototype=o(z.prototype),B.prototype.constructor=B,d)d(B,z);else for(var M in z)if("prototype"!=M)if(Object.defineProperties){var D=Object.getOwnPropertyDescriptor(z,M);D&&Object.defineProperty(B,M,D)}else B[M]=z[M];B.u=z.prototype,s.Object.defineProperty(O.prototype,"value",{configurable:!0,enumerable:!0,get:function(){var e;return(null==(e=this.h.find((function(e){return!0===e.checked})))?void 0:e.value)||""}});var N=function(e){var t=this,n=new Map;e.forEach((function(e,r){var o=e.getAttribute("name"),i=n.get(o)||[];t[+r]=e,i.push(e),n.set(o,i)})),this.length=e.length,n.forEach((function(e,n){e&&(t[n]=1===e.length?e[0]:new O(e))}))};N.prototype.namedItem=function(e){return this[e]};var P=Object.getOwnPropertyDescriptor(HTMLFormElement.prototype,"elements");Object.defineProperty(HTMLFormElement.prototype,"elements",{get:function(){for(var e=P.get.call(this,[]),n=[],r=(e=t(e)).next();!r.done;r=e.next()){r=r.value;var o=v.get(r);o&&!0!==o.formAssociated||n.push(r)}return new N(n)}})}}}).call("object"==typeof globalThis?globalThis:window)},9526:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(272),o=n.n(r),i=n(2609),s=n.n(i)()(o());s.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600&family=Open+Sans:ital,wght@0,300;0,400;0,600;0,700;0,800;1,400&display=swap);"]),s.push([e.id,":root{--nx-sand-10: #f7f1dd;--nx-white: #fff;--nx-yellow-60: #e1b200;--nx-yellow-50: #ffcf1a;--nx-yellow-40: #ffd948;--nx-red-60: #b80000;--nx-red-50: #e60000;--nx-red-40: #ff1f1f;--nx-red-10: #ffc7c7;--nx-green-60: #006c2d;--nx-green-50: #008738;--nx-green-40: #00d257;--nx-green-10: #b6ffd4;--nx-orange-60: #f56900;--nx-blue-90: #001f3d;--nx-blue-80: #003870;--nx-blue-70: #0052a3;--nx-blue-60: #006bd6;--nx-blue-50: #0a85ff;--nx-blue-40: #3d9eff;--nx-blue-30: #70b8ff;--nx-blue-20: #a3d1ff;--nx-blue-10: #d6ebff;--nx-blue-5: #f0f7ff;--nx-violet-90: #200c34;--nx-violet-80: #3f1868;--nx-violet-70: #5f249b;--nx-violet-60: #7f30cf;--nx-violet-50: #9f64db;--nx-violet-40: #b283e2;--nx-violet-30: #c5a2e9;--nx-violet-20: #d9c1f1;--nx-violet-10: #ece0f8;--nx-grey-90: #161718;--nx-grey-80: #2c2e30;--nx-grey-70: #414548;--nx-grey-60: #575c61;--nx-grey-50: #6d7379;--nx-grey-40: #898f94;--nx-grey-30: #a7abaf;--nx-grey-20: #c4c7ca;--nx-grey-10: #e2e3e4;--nx-grey-5: #eff0f0;--nx-grey-2: #fafafa;--overlay: rgba(109 115 121 60%);--overlay-loading: rgba(250 250 250 80%);--onlight-hover-background-color: #f4f9ff;--onlight-selected-background-color: #e8f3ff;--globalnav-background-color: var(--nx-blue-80);--globalnav-text-color: var(--nx-white);--sidenav-background-color: var(--nx-grey-5);--body-primary-background-color: var(--nx-grey-2);--body-secondary-background-color: var(--nx-grey-5);--content-background-color: var(--nx-white);--content-extension-background-color: var(--nx-grey-10);--toolbar-background-color: var(--nx-white);--toolbar-text-color: var(--nx-grey-90);--primary-text-color: var(--nx-grey-90);--disabled-text-color: var(--nx-grey-70);--error-text-color: var(--nx-red-50);--destructive-text-color: var(--nx-red-60);--success-text-color: var(--nx-green-50);--header-text-color: var(--nx-orange-60);--subheader-text-color: var(--nx-grey-60);--placeholder-text-color: var(--nx-grey-50);--hyperlink-text-color: var(--nx-blue-60);--hyperlink-disabled-text-color: var(--nx-grey-70);--block-primary-background-color: var(--nx-blue-60);--block-primary-border-color: var(--nx-blue-70);--block-primary-text-color: var(--nx-white);--block-secondary-background-color: hsla(0deg 0% 0% 0%);--block-secondary-border-color: hsla(0deg 0% 0% 0%);--block-secondary-text-color: var(--nx-grey-90);--block-success-background-color: var(--nx-green-50);--block-success-border-color: var(--nx-green-60);--block-success-text-color: var(--nx-white);--block-error-background-color: var(--nx-red-50);--block-error-border-color: var(--nx-red-60);--block-error-text-color: var(--nx-white);--block-warning-background-color: var(--nx-yellow-50);--block-warning-border-color: var(--nx-yellow-60);--block-warning-text-color: var(--nx-grey-90);--button-primary-hover-background-color: #1477db;--button-primary-hover-text-color: #e2eefa;--button-secondary-background-color: var(--nx-white);--button-secondary-border-color: var(--nx-grey-10);--button-secondary-text-color: var(--nx-blue-60);--button-secondary-hover-background-color: var(--onlight-hover-background-color);--button-secondary-selected-background-color: var(--onlight-selected-background-color);--button-secondary-hover-text-color: #2f87df;--button-text-background-color: hsla(0deg 0% 0% 0%);--button-text-border-color: hsla(0deg 0% 0% 0%);--button-text-text-color: var(--nx-blue-60);--button-text-hover-background-color: var(--onlight-hover-background-color);--button-text-hover-text-color: var(--secondary-button-hover-text-color);--button-destructive-background-color: var(--nx-white);--button-destructive-border-color: var(--nx-grey-10);--button-destructive-text-color: var(--nx-red-50);--button-destructive-hover-background-color: var(--onlight-hover-background-color);--button-destructive-hover-text-color: var(--nx-red-60);--button-disabled-background-color: var(--nx-grey-20);--button-disabled-border-color: hsla(0deg 0% 0% 0%);--button-disabled-text-color: var(--nx-grey-70);--divider-line-color: var(--nx-grey-10);--input-background-color: var(--nx-white);--input-border-color: var(--nx-grey-40);--input-text-color: var(--primary-text-color);--input-placeholder-text-color: var(--placeholder-text-color);--input-focus-border-color: var(--nx-blue-60);--input-error-color: var(--nx-red-50);--input-error-text-color: var(--nx-white);--input-warning-color: var(--nx-yellow-50);--input-warning-text-color: var(--primary-text-color);--input-information-color: var(--nx-blue-60);--input-information-text-color: var(--nx-white);--input-disabled-background-color: var(--nx-grey-20);--input-disabled-border-color: hsla(0deg 0% 0% 0%);--input-disabled-text-color: var(--disabled-text-color);--input-xfix-background-color: var(--nx-grey-20);--input-xfix-border-color: var(--nx-grey-40);--input-xfix-text-color: var(--nx-grey-70);--input-pills-background-color: var(--nx-white);--input-pills-border-color: var(--nx-grey-90);--input-pills-text-color: var(--nx-grey-90);--input-block-unselected-background-color: var(--nx-white);--input-block-unselected-border-color: var(--nx-grey-60);--input-block-unselected-disabled-background-color: var(--nx-white);--input-block-unselected-disabled-border-color: var(--nx-grey-40);--input-block-selected-background-color: var(--nx-blue-60);--input-block-selected-border-color: hsla(0deg 0% 0% 0%);--input-block-selected-disabled-background-color: var(--nx-grey-40);--input-block-selected-disabled-border-color: hsla(0deg 0% 0% 0%);--input-block-hover-background-color: var(--onlight-hover-background-color);--list-group-text-color: var(--nx-grey-60);--list-item-hover-background-color: var(--onlight-hover-background-color);--list-item-selected-background-color: var(--onlight-selected-background-color);--list-item-subtext-color: var(--nx-grey-50);--list-action-background-color: var(--onlight-hover-background-color);--list-action-border-color: var(--nx-grey-5);--list-action-text-color: var(--hyperlink-text-color);--global-header-background-color: var(--nx-blue-80)}:root{--nx-font-family-body: Open Sans, helvetica, arial, sans-serif;--nx-font-family-heading: Montserrat, helvetica, arial, sans-serif}:root{--ne-ref-color-violet-20: #D9C1F1;--ne-ref-color-violet-60: #7F30CF;--ne-ref-color-grey-90-20: #16171820;--ne-ref-color-green-40: #00D257;--ne-ref-color-green-50: #008738;--ne-ref-color-green-60: #006c2d;--ne-ref-color-yellow-60: #E1B200;--ne-ref-color-yellow-50: #FFCF1A;--ne-ref-color-yellow-40: #FFD948;--ne-ref-color-yellow-10: #FFF5D1;--ne-ref-color-grey-02: #FAFAFA;--ne-ref-color-grey-05: #EFF0F0;--ne-ref-color-grey-10: #E2E3E4;--ne-ref-color-grey-20: #C4C7CA;--ne-ref-color-grey-30: #A7ABAF;--ne-ref-color-grey40: #898F94;--ne-ref-color-grey-50: #6D7379;--ne-ref-color-grey-60: #575C61;--ne-ref-color-grey-70: #414548;--ne-ref-color-grey-80: #2C2E30;--ne-ref-color-grey-90: #161718;--ne-ref-color-red-10: #FFC7C7;--ne-ref-color-red-20: #FF8F8F;--ne-ref-color-red-30: #FF5757;--ne-ref-color-red-40: #FF1F1F;--ne-ref-color-red-50: #E60000;--ne-ref-color-red-60: #B80000;--ne-ref-color-red-70: #7C0D0E;--ne-ref-color-red-80: #530909;--ne-ref-color-red-90: #290405;--ne-ref-color-blue-05: #F0F7FF;--ne-ref-color-blue-10: #D6EBFF;--ne-ref-color-blue-20: #A3D1FF;--ne-ref-color-blue-30: #70B8FF;--ne-ref-color-blue-40: #3D9EFF;--ne-ref-color-blue-50: #0A85FF;--ne-ref-color-blue-60: #006BD6;--ne-ref-color-blue-70: #0052A3;--ne-ref-color-blue-80: #003870;--ne-ref-color-blue-90: #001F3D;--ne-ref-color-nintex-orange: #F56900;--ne-ref-color-white: #ffffff}:root{--ne-ref-border-radius-circle: 50%;--ne-ref-border-radius-large: 0.5em;--ne-ref-border-radius-medium: .25em;--ne-ref-border-radius-small: 0.125em;--ne-ref-border-radius-none: 0}:root{--ne-ref-spacing-xxx-large: 3em;--ne-ref-spacing-xx-large: 2.5em;--ne-ref-spacing-x-large: 2em;--ne-ref-spacing-large: 1.5em;--ne-ref-spacing-medium: 1em;--ne-ref-spacing-small: 0.75em;--ne-ref-spacing-x-small: 0.5em;--ne-ref-spacing-xx-small: 0.25em;--ne-ref-spacing-xxx-small: 0.125em;--ne-ref-spacing-none: 0}:root{--ne-ref-font-size-09: 1.75em;--ne-ref-font-size-08: 1.5em;--ne-ref-font-size-07: 1.25em;--ne-ref-font-size-06: 1.125em;--ne-ref-font-size-05: 1em;--ne-ref-font-size-04: 0.875em;--ne-ref-font-size-03: 0.8125em;--ne-ref-font-size-02: 0.75em;--ne-ref-font-size-01: 0.625em;--ne-ref-font-size-11: 2.625em;--ne-ref-font-size-10: 2em}:root{--ne-ref-border-width-large: 4px;--ne-ref-border-width-medium: 2px;--ne-ref-border-width-small: 1px}:root{--ne-ref-sizing-09: 2.25em;--ne-ref-sizing-08: 2em;--ne-ref-sizing-07: 1.75em;--ne-ref-sizing-06: 1.5em;--ne-ref-sizing-05: 1.25em;--ne-ref-sizing-04: 1em;--ne-ref-sizing-03: 0.75em;--ne-ref-sizing-02: 0.5em;--ne-ref-sizing-01: 0.25em;--ne-ref-sizing-14: 6em;--ne-ref-sizing-13: 5em;--ne-ref-sizing-12: 4em;--ne-ref-sizing-11: 3em;--ne-ref-sizing-10: 2.5em}:root{--ne-ref-font-weight-bold: Bold;--ne-ref-font-weight-semi-bold: SemiBold;--ne-ref-font-weight-regular: Regular}:root{--ne-ref-font-family-montserrat: Montserrat;--ne-ref-font-family-open-sans: Open Sans}:root{--ne-ref-line-height-expanded: 2em;--ne-ref-line-height-regular: 1.5em;--ne-ref-line-height-condensed: 1.2em}:root{--ne-ref-paragraph-spacing-07: 2.5em;--ne-ref-paragraph-spacing-06: 2.25em;--ne-ref-paragraph-spacing-05: 2em;--ne-ref-paragraph-spacing-04: 1.75em;--ne-ref-paragraph-spacing-03: 1.625em;--ne-ref-paragraph-spacing-02: 1.5em;--ne-ref-paragraph-spacing-01: 1.25em}:root{--ne-ref-letter-spacing-09: 0.21em;--ne-ref-letter-spacing-08: 0.18em;--ne-ref-letter-spacing-07: 0.15em;--ne-ref-letter-spacing-06: 0.135em;--ne-ref-letter-spacing-05: 0.12em;--ne-ref-letter-spacing-04: 0.105em;--ne-ref-letter-spacing-03: 0.0975em;--ne-ref-letter-spacing-02: 0.09em;--ne-ref-letter-spacing-01: 0.075em;--ne-ref-letter-spacing-11: 0.315em;--ne-ref-letter-spacing-10: 0.24em}:root{--ne-ref-text-decoration-underline: underline;--ne-ref-text-decoration-none: none}:root{--ne-ref-shadow-level2: 0px 0px 8px var(--ne-ref-color-grey-90-20);--ne-ref-shadow-level1: 0px 0px 8px var(--ne-ref-color-grey-90-20)}:root{--ne-alias-color-highlight: var(--ne-ref-color-nintex-orange);--ne-alias-color-icon-white: var(--ne-ref-color-white);--ne-alias-color-icon-default: var(--ne-ref-color-grey-90);--ne-alias-color-status-success-light: var(--ne-ref-color-green-40);--ne-alias-color-status-success-default: var(--ne-ref-color-green-50);--ne-alias-color-status-success-dark: var(--ne-ref-color-green-60);--ne-alias-color-status-info-light: var(--ne-ref-color-blue-50);--ne-alias-color-status-info-default: var(--ne-ref-color-blue-60);--ne-alias-color-status-info-dark: var(--ne-ref-color-blue-70);--ne-alias-color-status-active-lighter: var(--ne-ref-color-blue-40);--ne-alias-color-status-active-light: var(--ne-ref-color-blue-50);--ne-alias-color-status-active-default: var(--ne-ref-color-blue-60);--ne-alias-color-status-warning-light: var(--ne-ref-color-yellow-40);--ne-alias-color-status-warning-default: var(--ne-ref-color-yellow-50);--ne-alias-color-status-warning-dark: var(--ne-ref-color-yellow-60);--ne-alias-color-status-error-light: var(--ne-ref-color-red-40);--ne-alias-color-status-error-default: var(--ne-ref-color-red-50);--ne-alias-color-status-error-dark: var(--ne-ref-color-red-60);--ne-alias-color-destructive-light: var(--ne-ref-color-red-40);--ne-alias-color-destructive-default: var(--ne-ref-color-red-60);--ne-alias-color-destructive-dark: var(--ne-ref-color-red-70);--ne-alias-color-state-focus-on-red: var(--ne-ref-color-red-70);--ne-alias-color-state-focus-on-white: var(--ne-ref-color-blue-05);--ne-alias-color-state-hover-on-red: var(--ne-ref-color-red-70);--ne-alias-color-state-hover-on-white: var(--ne-ref-color-blue-05);--ne-alias-color-state-disabled-dark: var(--ne-ref-color-grey-90);--ne-alias-color-state-disabled-default: var(--ne-ref-color-grey-50);--ne-alias-color-state-disabled-light: var(--ne-ref-color-grey-30);--ne-alias-color-accent-light: var(--ne-ref-color-blue-50);--ne-alias-color-accent-default: var(--ne-ref-color-blue-60);--ne-alias-color-accent-dark: var(--ne-ref-color-blue-70);--ne-alias-color-text-light: var(--ne-ref-color-grey-60);--ne-alias-color-text-default: var(--ne-ref-color-grey-90);--ne-alias-color-text-light-text-on-dark-bg: var(--ne-ref-color-white);--ne-alias-color-state-focus-on-blue: var(--ne-alias-color-accent-dark);--ne-alias-color-state-hover-on-blue: var(--ne-alias-color-accent-dark)}:root{--ne-alias-font-family-title: var(--ne-ref-font-family-montserrat);--ne-alias-font-family-body: var(--ne-ref-font-family-open-sans)}:root{--ne-alias-font-size-title: var(--ne-ref-font-size-06);--ne-alias-font-size-subtext: var(--ne-ref-font-size-02);--ne-alias-font-size-body: var(--ne-ref-font-size-04)}:root{--ne-alias-border-width-focus: var(--ne-ref-border-width-large);--ne-alias-border-width-default: var(--ne-ref-border-width-small)}:root{--ne-alias-sizing-icon-xx-large: var(--ne-ref-sizing-11);--ne-alias-sizing-icon-x-large: var(--ne-ref-sizing-08);--ne-alias-sizing-icon-large: var(--ne-ref-sizing-06);--ne-alias-sizing-icon-default: var(--ne-ref-sizing-04);--ne-alias-sizing-icon-small: var(--ne-ref-sizing-02)}:root{--ne-alias-border-focus: var(--ne-ref-color-blue-20);--ne-alias-border-dark-grey: var(--ne-ref-color-grey40);--ne-alias-border-grey: var(--ne-ref-color-grey-10)}\n\n/*# sourceMappingURL=earthling-base.min.css.map */","",{version:3,sources:["file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/typography.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/color.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-color.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-border-radius.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-spacing.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-font-size.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-border-width.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-sizing.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-font-weight.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-font-family.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-line-height.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-paragraph-spacing.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-letter-spacing.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-text-decoration.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-shadow.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-color.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-font-family.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-font-size.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-border-width.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-sizing.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-border.scss","webpack://./../../node_modules/@nintexglobal/earthling-styles/dist/earthling-base.min.css"],names:[],mappings:"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",sourceRoot:""}]);const a=s},2609:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(s[l]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);r&&s[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),t.push(d))}},t}},272:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},6062:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},s=[],a=0;a<e.length;a++){var l=e[a],c=r.base?l[0]+r.base:l[0],d=i[c]||0,u="".concat(c," ").concat(d);i[c]=d+1;var h=n(u),A={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==h)t[h].references++,t[h].updater(A);else{var p=o(A,r);r.byIndex=a,t.splice(a,0,{identifier:u,updater:p,references:1})}s.push(u)}return s}function o(e,t){var n=t.domAPI(t);n.update(e);return function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<i.length;s++){var a=n(i[s]);t[a].references--}for(var l=r(e,o),c=0;c<i.length;c++){var d=n(i[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}i=l}}},6793:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},1173:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},7892:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},4036:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},2464:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},9671:e=>{function t(e){return Promise.resolve().then((()=>{var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}))}t.keys=()=>[],t.resolve=t,t.id=9671,e.exports=t},9793:(e,t,n)=>{"use strict";n.d(t,{ec:()=>c,i1:()=>d,iv:()=>l});const r=window,o=r.ShadowRoot&&(void 0===r.ShadyCSS||r.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,i=Symbol(),s=new WeakMap;class a{constructor(e,t,n){if(this._$cssResult$=!0,n!==i)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=e,this.t=t}get styleSheet(){let e=this.o;const t=this.t;if(o&&void 0===e){const n=void 0!==t&&1===t.length;n&&(e=s.get(t)),void 0===e&&((this.o=e=new CSSStyleSheet).replaceSync(this.cssText),n&&s.set(t,e))}return e}toString(){return this.cssText}}const l=(e,...t)=>{const n=1===e.length?e[0]:t.reduce(((t,n,r)=>t+(e=>{if(!0===e._$cssResult$)return e.cssText;if("number"==typeof e)return e;throw Error("Value passed to 'css' function must be a 'css' function result: "+e+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(n)+e[r+1]),e[0]);return new a(n,e,i)},c=(e,t)=>{o?e.adoptedStyleSheets=t.map((e=>e instanceof CSSStyleSheet?e:e.styleSheet)):t.forEach((t=>{const n=document.createElement("style"),o=r.litNonce;void 0!==o&&n.setAttribute("nonce",o),n.textContent=t.cssText,e.appendChild(n)}))},d=o?e=>e:e=>e instanceof CSSStyleSheet?(e=>{let t="";for(const n of e.cssRules)t+=n.cssText;return(e=>new a("string"==typeof e?e:e+"",void 0,i))(t)})(e):e},3311:(e,t,n)=>{"use strict";var r;n.d(t,{Al:()=>I,Jb:()=>$,Ld:()=>S,YP:()=>E,dy:()=>k,sY:()=>q});const o=window,i=o.trustedTypes,s=i?i.createPolicy("lit-html",{createHTML:e=>e}):void 0,a="$lit$",l=`lit$${(Math.random()+"").slice(9)}$`,c="?"+l,d=`<${c}>`,u=document,h=()=>u.createComment(""),A=e=>null===e||"object"!=typeof e&&"function"!=typeof e,p=Array.isArray,f=e=>p(e)||"function"==typeof(null==e?void 0:e[Symbol.iterator]),v="[ \t\n\f\r]",g=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,b=/-->/g,m=/>/g,y=RegExp(`>|${v}(?:([^\\s"'>=/]+)(${v}*=${v}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),C=/'/g,w=/"/g,x=/^(?:script|style|textarea|title)$/i,_=e=>(t,...n)=>({_$litType$:e,strings:t,values:n}),k=_(1),E=_(2),$=Symbol.for("lit-noChange"),S=Symbol.for("lit-nothing"),T=new WeakMap,O=u.createTreeWalker(u,129,null,!1),B=(e,t)=>{const n=e.length-1,r=[];let o,i=2===t?"<svg>":"",c=g;for(let t=0;t<n;t++){const n=e[t];let s,u,h=-1,A=0;for(;A<n.length&&(c.lastIndex=A,u=c.exec(n),null!==u);)A=c.lastIndex,c===g?"!--"===u[1]?c=b:void 0!==u[1]?c=m:void 0!==u[2]?(x.test(u[2])&&(o=RegExp("</"+u[2],"g")),c=y):void 0!==u[3]&&(c=y):c===y?">"===u[0]?(c=null!=o?o:g,h=-1):void 0===u[1]?h=-2:(h=c.lastIndex-u[2].length,s=u[1],c=void 0===u[3]?y:'"'===u[3]?w:C):c===w||c===C?c=y:c===b||c===m?c=g:(c=y,o=void 0);const p=c===y&&e[t+1].startsWith("/>")?" ":"";i+=c===g?n+d:h>=0?(r.push(s),n.slice(0,h)+a+n.slice(h)+l+p):n+l+(-2===h?(r.push(void 0),t):p)}const u=i+(e[n]||"<?>")+(2===t?"</svg>":"");if(!Array.isArray(e)||!e.hasOwnProperty("raw"))throw Error("invalid template strings array");return[void 0!==s?s.createHTML(u):u,r]};class z{constructor({strings:e,_$litType$:t},n){let r;this.parts=[];let o=0,s=0;const d=e.length-1,u=this.parts,[A,p]=B(e,t);if(this.el=z.createElement(A,n),O.currentNode=this.el.content,2===t){const e=this.el.content,t=e.firstChild;t.remove(),e.append(...t.childNodes)}for(;null!==(r=O.nextNode())&&u.length<d;){if(1===r.nodeType){if(r.hasAttributes()){const e=[];for(const t of r.getAttributeNames())if(t.endsWith(a)||t.startsWith(l)){const n=p[s++];if(e.push(t),void 0!==n){const e=r.getAttribute(n.toLowerCase()+a).split(l),t=/([.?@])?(.*)/.exec(n);u.push({type:1,index:o,name:t[2],strings:e,ctor:"."===t[1]?L:"?"===t[1]?R:"@"===t[1]?j:P})}else u.push({type:6,index:o})}for(const t of e)r.removeAttribute(t)}if(x.test(r.tagName)){const e=r.textContent.split(l),t=e.length-1;if(t>0){r.textContent=i?i.emptyScript:"";for(let n=0;n<t;n++)r.append(e[n],h()),O.nextNode(),u.push({type:2,index:++o});r.append(e[t],h())}}}else if(8===r.nodeType)if(r.data===c)u.push({type:2,index:o});else{let e=-1;for(;-1!==(e=r.data.indexOf(l,e+1));)u.push({type:7,index:o}),e+=l.length-1}o++}}static createElement(e,t){const n=u.createElement("template");return n.innerHTML=e,n}}function M(e,t,n=e,r){var o,i,s,a;if(t===$)return t;let l=void 0!==r?null===(o=n._$Co)||void 0===o?void 0:o[r]:n._$Cl;const c=A(t)?void 0:t._$litDirective$;return(null==l?void 0:l.constructor)!==c&&(null===(i=null==l?void 0:l._$AO)||void 0===i||i.call(l,!1),void 0===c?l=void 0:(l=new c(e),l._$AT(e,n,r)),void 0!==r?(null!==(s=(a=n)._$Co)&&void 0!==s?s:a._$Co=[])[r]=l:n._$Cl=l),void 0!==l&&(t=M(e,l._$AS(e,t.values),l,r)),t}class D{constructor(e,t){this.u=[],this._$AN=void 0,this._$AD=e,this._$AM=t}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}v(e){var t;const{el:{content:n},parts:r}=this._$AD,o=(null!==(t=null==e?void 0:e.creationScope)&&void 0!==t?t:u).importNode(n,!0);O.currentNode=o;let i=O.nextNode(),s=0,a=0,l=r[0];for(;void 0!==l;){if(s===l.index){let t;2===l.type?t=new N(i,i.nextSibling,this,e):1===l.type?t=new l.ctor(i,l.name,l.strings,this,e):6===l.type&&(t=new H(i,this,e)),this.u.push(t),l=r[++a]}s!==(null==l?void 0:l.index)&&(i=O.nextNode(),s++)}return o}p(e){let t=0;for(const n of this.u)void 0!==n&&(void 0!==n.strings?(n._$AI(e,n,t),t+=n.strings.length-2):n._$AI(e[t])),t++}}class N{constructor(e,t,n,r){var o;this.type=2,this._$AH=S,this._$AN=void 0,this._$AA=e,this._$AB=t,this._$AM=n,this.options=r,this._$Cm=null===(o=null==r?void 0:r.isConnected)||void 0===o||o}get _$AU(){var e,t;return null!==(t=null===(e=this._$AM)||void 0===e?void 0:e._$AU)&&void 0!==t?t:this._$Cm}get parentNode(){let e=this._$AA.parentNode;const t=this._$AM;return void 0!==t&&11===(null==e?void 0:e.nodeType)&&(e=t.parentNode),e}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(e,t=this){e=M(this,e,t),A(e)?e===S||null==e||""===e?(this._$AH!==S&&this._$AR(),this._$AH=S):e!==this._$AH&&e!==$&&this.g(e):void 0!==e._$litType$?this.$(e):void 0!==e.nodeType?this.T(e):f(e)?this.k(e):this.g(e)}S(e){return this._$AA.parentNode.insertBefore(e,this._$AB)}T(e){this._$AH!==e&&(this._$AR(),this._$AH=this.S(e))}g(e){this._$AH!==S&&A(this._$AH)?this._$AA.nextSibling.data=e:this.T(u.createTextNode(e)),this._$AH=e}$(e){var t;const{values:n,_$litType$:r}=e,o="number"==typeof r?this._$AC(e):(void 0===r.el&&(r.el=z.createElement(r.h,this.options)),r);if((null===(t=this._$AH)||void 0===t?void 0:t._$AD)===o)this._$AH.p(n);else{const e=new D(o,this),t=e.v(this.options);e.p(n),this.T(t),this._$AH=e}}_$AC(e){let t=T.get(e.strings);return void 0===t&&T.set(e.strings,t=new z(e)),t}k(e){p(this._$AH)||(this._$AH=[],this._$AR());const t=this._$AH;let n,r=0;for(const o of e)r===t.length?t.push(n=new N(this.S(h()),this.S(h()),this,this.options)):n=t[r],n._$AI(o),r++;r<t.length&&(this._$AR(n&&n._$AB.nextSibling,r),t.length=r)}_$AR(e=this._$AA.nextSibling,t){var n;for(null===(n=this._$AP)||void 0===n||n.call(this,!1,!0,t);e&&e!==this._$AB;){const t=e.nextSibling;e.remove(),e=t}}setConnected(e){var t;void 0===this._$AM&&(this._$Cm=e,null===(t=this._$AP)||void 0===t||t.call(this,e))}}class P{constructor(e,t,n,r,o){this.type=1,this._$AH=S,this._$AN=void 0,this.element=e,this.name=t,this._$AM=r,this.options=o,n.length>2||""!==n[0]||""!==n[1]?(this._$AH=Array(n.length-1).fill(new String),this.strings=n):this._$AH=S}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(e,t=this,n,r){const o=this.strings;let i=!1;if(void 0===o)e=M(this,e,t,0),i=!A(e)||e!==this._$AH&&e!==$,i&&(this._$AH=e);else{const r=e;let s,a;for(e=o[0],s=0;s<o.length-1;s++)a=M(this,r[n+s],t,s),a===$&&(a=this._$AH[s]),i||(i=!A(a)||a!==this._$AH[s]),a===S?e=S:e!==S&&(e+=(null!=a?a:"")+o[s+1]),this._$AH[s]=a}i&&!r&&this.j(e)}j(e){e===S?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=e?e:"")}}class L extends P{constructor(){super(...arguments),this.type=3}j(e){this.element[this.name]=e===S?void 0:e}}const F=i?i.emptyScript:"";class R extends P{constructor(){super(...arguments),this.type=4}j(e){e&&e!==S?this.element.setAttribute(this.name,F):this.element.removeAttribute(this.name)}}class j extends P{constructor(e,t,n,r,o){super(e,t,n,r,o),this.type=5}_$AI(e,t=this){var n;if((e=null!==(n=M(this,e,t,0))&&void 0!==n?n:S)===$)return;const r=this._$AH,o=e===S&&r!==S||e.capture!==r.capture||e.once!==r.once||e.passive!==r.passive,i=e!==S&&(r===S||o);o&&this.element.removeEventListener(this.name,this,r),i&&this.element.addEventListener(this.name,this,e),this._$AH=e}handleEvent(e){var t,n;"function"==typeof this._$AH?this._$AH.call(null!==(n=null===(t=this.options)||void 0===t?void 0:t.host)&&void 0!==n?n:this.element,e):this._$AH.handleEvent(e)}}class H{constructor(e,t,n){this.element=e,this.type=6,this._$AN=void 0,this._$AM=t,this.options=n}get _$AU(){return this._$AM._$AU}_$AI(e){M(this,e)}}const I={P:a,A:l,M:c,C:1,L:B,D,R:f,V:M,I:N,H:P,N:R,U:j,F:L,B:H},U=o.litHtmlPolyfillSupport;null==U||U(z,N),(null!==(r=o.litHtmlVersions)&&void 0!==r?r:o.litHtmlVersions=[]).push("2.7.0");const q=(e,t,n)=>{var r,o;const i=null!==(r=null==n?void 0:n.renderBefore)&&void 0!==r?r:t;let s=i._$litPart$;if(void 0===s){const e=null!==(o=null==n?void 0:n.renderBefore)&&void 0!==o?o:null;i._$litPart$=s=new N(t.insertBefore(h(),e),e,void 0,null!=n?n:{})}return s._$AI(e),s}},3192:(e,t,n)=>{"use strict";n.d(t,{oi:()=>v,iv:()=>o.iv,dy:()=>f.dy,Ld:()=>f.Ld});var r,o=n(9793);const i=window,s=i.trustedTypes,a=s?s.emptyScript:"",l=i.reactiveElementPolyfillSupport,c={toAttribute(e,t){switch(t){case Boolean:e=e?a:null;break;case Object:case Array:e=null==e?e:JSON.stringify(e)}return e},fromAttribute(e,t){let n=e;switch(t){case Boolean:n=null!==e;break;case Number:n=null===e?null:Number(e);break;case Object:case Array:try{n=JSON.parse(e)}catch(e){n=null}}return n}},d=(e,t)=>t!==e&&(t==t||e==e),u={attribute:!0,type:String,converter:c,reflect:!1,hasChanged:d};class h extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(e){var t;this.finalize(),(null!==(t=this.h)&&void 0!==t?t:this.h=[]).push(e)}static get observedAttributes(){this.finalize();const e=[];return this.elementProperties.forEach(((t,n)=>{const r=this._$Ep(n,t);void 0!==r&&(this._$Ev.set(r,n),e.push(r))})),e}static createProperty(e,t=u){if(t.state&&(t.attribute=!1),this.finalize(),this.elementProperties.set(e,t),!t.noAccessor&&!this.prototype.hasOwnProperty(e)){const n="symbol"==typeof e?Symbol():"__"+e,r=this.getPropertyDescriptor(e,n,t);void 0!==r&&Object.defineProperty(this.prototype,e,r)}}static getPropertyDescriptor(e,t,n){return{get(){return this[t]},set(r){const o=this[e];this[t]=r,this.requestUpdate(e,o,n)},configurable:!0,enumerable:!0}}static getPropertyOptions(e){return this.elementProperties.get(e)||u}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const e=Object.getPrototypeOf(this);if(e.finalize(),void 0!==e.h&&(this.h=[...e.h]),this.elementProperties=new Map(e.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const e=this.properties,t=[...Object.getOwnPropertyNames(e),...Object.getOwnPropertySymbols(e)];for(const n of t)this.createProperty(n,e[n])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(e){const t=[];if(Array.isArray(e)){const n=new Set(e.flat(1/0).reverse());for(const e of n)t.unshift((0,o.i1)(e))}else void 0!==e&&t.push((0,o.i1)(e));return t}static _$Ep(e,t){const n=t.attribute;return!1===n?void 0:"string"==typeof n?n:"string"==typeof e?e.toLowerCase():void 0}u(){var e;this._$E_=new Promise((e=>this.enableUpdating=e)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(e=this.constructor.h)||void 0===e||e.forEach((e=>e(this)))}addController(e){var t,n;(null!==(t=this._$ES)&&void 0!==t?t:this._$ES=[]).push(e),void 0!==this.renderRoot&&this.isConnected&&(null===(n=e.hostConnected)||void 0===n||n.call(e))}removeController(e){var t;null===(t=this._$ES)||void 0===t||t.splice(this._$ES.indexOf(e)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((e,t)=>{this.hasOwnProperty(t)&&(this._$Ei.set(t,this[t]),delete this[t])}))}createRenderRoot(){var e;const t=null!==(e=this.shadowRoot)&&void 0!==e?e:this.attachShadow(this.constructor.shadowRootOptions);return(0,o.ec)(t,this.constructor.elementStyles),t}connectedCallback(){var e;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostConnected)||void 0===t?void 0:t.call(e)}))}enableUpdating(e){}disconnectedCallback(){var e;null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostDisconnected)||void 0===t?void 0:t.call(e)}))}attributeChangedCallback(e,t,n){this._$AK(e,n)}_$EO(e,t,n=u){var r;const o=this.constructor._$Ep(e,n);if(void 0!==o&&!0===n.reflect){const i=(void 0!==(null===(r=n.converter)||void 0===r?void 0:r.toAttribute)?n.converter:c).toAttribute(t,n.type);this._$El=e,null==i?this.removeAttribute(o):this.setAttribute(o,i),this._$El=null}}_$AK(e,t){var n;const r=this.constructor,o=r._$Ev.get(e);if(void 0!==o&&this._$El!==o){const e=r.getPropertyOptions(o),i="function"==typeof e.converter?{fromAttribute:e.converter}:void 0!==(null===(n=e.converter)||void 0===n?void 0:n.fromAttribute)?e.converter:c;this._$El=o,this[o]=i.fromAttribute(t,e.type),this._$El=null}}requestUpdate(e,t,n){let r=!0;void 0!==e&&(((n=n||this.constructor.getPropertyOptions(e)).hasChanged||d)(this[e],t)?(this._$AL.has(e)||this._$AL.set(e,t),!0===n.reflect&&this._$El!==e&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(e,n))):r=!1),!this.isUpdatePending&&r&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(e){Promise.reject(e)}const e=this.scheduleUpdate();return null!=e&&await e,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var e;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((e,t)=>this[t]=e)),this._$Ei=void 0);let t=!1;const n=this._$AL;try{t=this.shouldUpdate(n),t?(this.willUpdate(n),null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostUpdate)||void 0===t?void 0:t.call(e)})),this.update(n)):this._$Ek()}catch(e){throw t=!1,this._$Ek(),e}t&&this._$AE(n)}willUpdate(e){}_$AE(e){var t;null===(t=this._$ES)||void 0===t||t.forEach((e=>{var t;return null===(t=e.hostUpdated)||void 0===t?void 0:t.call(e)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(e)),this.updated(e)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(e){return!0}update(e){void 0!==this._$EC&&(this._$EC.forEach(((e,t)=>this._$EO(t,this[t],e))),this._$EC=void 0),this._$Ek()}updated(e){}firstUpdated(e){}}h.finalized=!0,h.elementProperties=new Map,h.elementStyles=[],h.shadowRootOptions={mode:"open"},null==l||l({ReactiveElement:h}),(null!==(r=i.reactiveElementVersions)&&void 0!==r?r:i.reactiveElementVersions=[]).push("1.6.1");var A,p,f=n(3311);class v extends h{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var e,t;const n=super.createRenderRoot();return null!==(e=(t=this.renderOptions).renderBefore)&&void 0!==e||(t.renderBefore=n.firstChild),n}update(e){const t=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(e),this._$Do=(0,f.sY)(t,this.renderRoot,this.renderOptions)}connectedCallback(){var e;super.connectedCallback(),null===(e=this._$Do)||void 0===e||e.setConnected(!0)}disconnectedCallback(){var e;super.disconnectedCallback(),null===(e=this._$Do)||void 0===e||e.setConnected(!1)}render(){return f.Jb}}v.finalized=!0,v._$litElement$=!0,null===(A=globalThis.litElementHydrateSupport)||void 0===A||A.call(globalThis,{LitElement:v});const g=globalThis.litElementPolyfillSupport;null==g||g({LitElement:v});(null!==(p=globalThis.litElementVersions)&&void 0!==p?p:globalThis.litElementVersions=[]).push("3.3.0")}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var i=r[e]={id:e,exports:{}};return n[e](i,i.exports,o),i.exports}o.m=n,o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.f={},o.e=e=>Promise.all(Object.keys(o.f).reduce(((t,n)=>(o.f[n](e,t),t)),[])),o.u=e=>e+".bundle.js",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="@pi/bpmn-list:",o.l=(n,r,i,s)=>{if(e[n])e[n].push(r);else{var a,l;if(void 0!==i)for(var c=document.getElementsByTagName("script"),d=0;d<c.length;d++){var u=c[d];if(u.getAttribute("src")==n||u.getAttribute("data-webpack")==t+i){a=u;break}}a||(l=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,o.nc&&a.setAttribute("nonce",o.nc),a.setAttribute("data-webpack",t+i),a.src=n),e[n]=[r];var h=(t,r)=>{a.onerror=a.onload=null,clearTimeout(A);var o=e[n];if(delete e[n],a.parentNode&&a.parentNode.removeChild(a),o&&o.forEach((e=>e(r))),t)return t(r)},A=setTimeout(h.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=h.bind(null,a.onerror),a.onload=h.bind(null,a.onload),l&&document.head.appendChild(a)}},o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.p="",(()=>{var e={179:0};o.f.j=(t,n)=>{var r=o.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var i=new Promise(((n,o)=>r=e[t]=[n,o]));n.push(r[2]=i);var s=o.p+o.u(t),a=new Error;o.l(s,(n=>{if(o.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var i=n&&("load"===n.type?"missing":n.type),s=n&&n.target&&n.target.src;a.message="Loading chunk "+t+" failed.\n("+i+": "+s+")",a.name="ChunkLoadError",a.type=i,a.request=s,r[1](a)}}),"chunk-"+t,t)}};var t=(t,n)=>{var r,i,[s,a,l]=n,c=0;if(s.some((t=>0!==e[t]))){for(r in a)o.o(a,r)&&(o.m[r]=a[r]);if(l)l(o)}for(t&&t(n);c<s.length;c++)i=s[c],o.o(e,i)&&e[i]&&e[i][0](),e[i]=0},n=self.webpackChunk_pi_bpmn_list=self.webpackChunk_pi_bpmn_list||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),o.nc=void 0,(()=>{"use strict";o(2443);const e=(e,t,n)=>{let r=e[0];for(let o=1;o<e.length;o++)r+=t[n?n[o-1]:o-1],r+=e[o];return r},t=t=>{return"string"!=typeof(n=t)&&"strTag"in n?e(t.strings,t.values):t;var n};class n{constructor(){this.settled=!1,this.promise=new Promise(((e,t)=>{this._resolve=e,this._reject=t}))}resolve(e){this.settled=!0,this._resolve(e)}reject(e){this.settled=!0,this._reject(e)}}const r=[];for(let e=0;e<256;e++)r[e]=(e>>4&15).toString(16)+(15&e).toString(16);const i="",s="h",a="s";function l(e,t){return(t?s:a)+function(e){let t=0,n=8997,o=0,i=33826,s=0,a=40164,l=0,c=52210;for(let r=0;r<e.length;r++)n^=e.charCodeAt(r),t=435*n,o=435*i,s=435*a,l=435*c,s+=n<<8,l+=i<<8,o+=t>>>16,n=65535&t,s+=o>>>16,i=65535&o,c=l+(s>>>16)&65535,a=65535&s;return r[c>>8]+r[255&c]+r[a>>8]+r[255&a]+r[i>>8]+r[255&i]+r[n>>8]+r[255&n]}("string"==typeof e?e:e.join(i))}const c=new WeakMap,d=new Map;function u(n,r,o){var i;if(n){const t=null!==(i=null==o?void 0:o.id)&&void 0!==i?i:function(e){const t="string"==typeof e?e:e.strings;let n=d.get(t);void 0===n&&(n=l(t,"string"!=typeof e&&!("strTag"in e)),d.set(t,n));return n}(r),s=n[t];if(s){if("string"==typeof s)return s;if("strTag"in s)return e(s.strings,r.values,s.values);{let e=c.get(s);return void 0===e&&(e=s.values,c.set(s,e)),{...s,values:e.map((e=>r.values[e]))}}}}return t(r)}function h(e){window.dispatchEvent(new CustomEvent("lit-localize-status",{detail:e}))}let A,p,f,v,g,b="",m=new n;m.resolve();let y=0;const C=()=>b,w=e=>{if(e===(null!=A?A:b))return m.promise;if(!f||!v)throw new Error("Internal error");if(!f.has(e))throw new Error("Invalid locale code");y++;const t=y;A=e,m.settled&&(m=new n),h({status:"loading",loadingLocale:e});return(e===p?Promise.resolve({templates:void 0}):v(e)).then((n=>{y===t&&(b=e,A=void 0,g=n.templates,h({status:"ready",readyLocale:e}),m.resolve())}),(n=>{y===t&&(h({status:"error",errorLocale:e,errorMessage:n.toString()}),m.reject(n))})),m.promise};let x=t,_=!1;const{getLocale:k,setLocale:E}=(e=>(function(e){if(_)throw new Error("lit-localize can only be configured once");x=e,_=!0}(((e,t)=>u(g,e,t))),b=p=e.sourceLocale,f=new Set(e.targetLocales),f.add(e.sourceLocale),v=e.loadLocale,{getLocale:C,setLocale:w}))({sourceLocale:"en",targetLocales:[],loadLocale:e=>o(9671)(`./${e}.js`)}),$=new WeakMap;function S(e){return t=>{if(function(e,t){let n=t;for(;n;){if($.get(n)===e)return!0;n=Object.getPrototypeOf(n)}return!1}(e,t))return t;const n=e(t);return $.set(n,e),n}}var T=o(9793);const O=!!ShadowRoot.prototype.createElement,B=S((e=>class extends e{static get scopedElements(){return{}}static get shadowRootOptions(){return this.__shadowRootOptions}static set shadowRootOptions(e){this.__shadowRootOptions=e}static get elementStyles(){return this.__elementStyles}static set elementStyles(e){this.__elementStyles=e}constructor(...e){super(),this.renderOptions=this.renderOptions||void 0}get registry(){return this.constructor.__registry}set registry(e){this.constructor.__registry=e}createRenderRoot(){const{scopedElements:e,shadowRootOptions:t,elementStyles:n}=this.constructor;if(!this.registry||this.registry===this.constructor.__registry&&!Object.prototype.hasOwnProperty.call(this.constructor,"__registry")){this.registry=O?new CustomElementRegistry:customElements;for(const[t,n]of Object.entries(e))this.defineScopedElement(t,n)}const r={mode:"open",...t,customElements:this.registry},o=this.attachShadow(r);return O&&(this.renderOptions.creationScope=o),o instanceof ShadowRoot&&((0,T.ec)(o,n),this.renderOptions.renderBefore=this.renderOptions.renderBefore||o.firstChild),o}createScopedElement(e){return(O?this.shadowRoot:document).createElement(e)}defineScopedElement(e,t){const n=this.registry.get(e);return n&&!1===O&&n!==t&&console.error([`You are trying to re-register the "${e}" custom element with a different class via ScopedElementsMixin.`,"This is only possible with a CustomElementRegistry.","Your browser does not support this feature so you will need to load a polyfill for it.",'Load "@webcomponents/scoped-custom-element-registry" before you register ANY web component to the global customElements registry.','e.g. add "<script src="/node_modules/@webcomponents/scoped-custom-element-registry/scoped-custom-element-registry.min.js"><\/script>" as your first script tag.',"For more details you can visit https://open-wc.org/docs/development/scoped-elements/"].join("\n")),n?this.registry.get(e):this.registry.define(e,t)}getScopedTagName(e){return e}static getScopedTagName(e){return e}}));var z=o(3192);const M=e=>t=>"function"==typeof t?((e,t)=>(customElements.define(e,t),t))(e,t):((e,t)=>{const{kind:n,elements:r}=t;return{kind:n,elements:r,finisher(t){customElements.define(e,t)}}})(e,t),D=(e,t)=>"method"===t.kind&&t.descriptor&&!("value"in t.descriptor)?{...t,finisher(n){n.createProperty(t.key,e)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:t.key,initializer(){"function"==typeof t.initializer&&(this[t.key]=t.initializer.call(this))},finisher(n){n.createProperty(t.key,e)}};function N(e){return(t,n)=>void 0!==n?((e,t,n)=>{t.constructor.createProperty(n,e)})(e,t,n):D(e,t)}function P(e){return N({...e,state:!0})}const L=({finisher:e,descriptor:t})=>(n,r)=>{var o;if(void 0===r){const r=null!==(o=n.originalKey)&&void 0!==o?o:n.key,i=null!=t?{kind:"method",placement:"prototype",key:r,descriptor:t(n.key)}:{...n,key:r};return null!=e&&(i.finisher=function(t){e(t,r)}),i}{const o=n.constructor;void 0!==t&&Object.defineProperty(n,r,t(r)),null==e||e(o,r)}};var F;const R=null!=(null===(F=window.HTMLSlotElement)||void 0===F?void 0:F.prototype.assignedElements)?(e,t)=>e.assignedElements(t):(e,t)=>e.assignedNodes(t).filter((e=>e.nodeType===Node.ELEMENT_NODE));function j(e,t,n){let r,o=e;return"object"==typeof e?(o=e.slot,r=e):r={flatten:t},n?function(e){const{slot:t,selector:n}=null!=e?e:{};return L({descriptor:r=>({get(){var r;const o="slot"+(t?`[name=${t}]`:":not([name])"),i=null===(r=this.renderRoot)||void 0===r?void 0:r.querySelector(o),s=null!=i?R(i,e):[];return n?s.filter((e=>e.matches(n))):s},enumerable:!0,configurable:!0})})}({slot:o,flatten:t,selector:n}):L({descriptor:e=>({get(){var e,t;const n="slot"+(o?`[name=${o}]`:":not([name])"),i=null===(e=this.renderRoot)||void 0===e?void 0:e.querySelector(n);return null!==(t=null==i?void 0:i.assignedNodes(r))&&void 0!==t?t:[]},enumerable:!0,configurable:!0})})}var H=function(e,t){return H=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},H(e,t)};function I(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}H(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}Object.create;function U(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function q(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s}function V(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}Object.create;function W(e){return"function"==typeof e}function K(e){var t=e((function(e){Error.call(e),e.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}var Y=K((function(e){return function(t){e(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}));function J(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var Z=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}var t;return e.prototype.unsubscribe=function(){var e,t,n,r,o;if(!this.closed){this.closed=!0;var i=this._parentage;if(i)if(this._parentage=null,Array.isArray(i))try{for(var s=U(i),a=s.next();!a.done;a=s.next()){a.value.remove(this)}}catch(t){e={error:t}}finally{try{a&&!a.done&&(t=s.return)&&t.call(s)}finally{if(e)throw e.error}}else i.remove(this);var l=this.initialTeardown;if(W(l))try{l()}catch(e){o=e instanceof Y?e.errors:[e]}var c=this._finalizers;if(c){this._finalizers=null;try{for(var d=U(c),u=d.next();!u.done;u=d.next()){var h=u.value;try{Q(h)}catch(e){o=null!=o?o:[],e instanceof Y?o=V(V([],q(o)),q(e.errors)):o.push(e)}}}catch(e){n={error:e}}finally{try{u&&!u.done&&(r=d.return)&&r.call(d)}finally{if(n)throw n.error}}}if(o)throw new Y(o)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)Q(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&J(t,e)},e.prototype.remove=function(t){var n=this._finalizers;n&&J(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e}(),G=Z.EMPTY;function X(e){return e instanceof Z||e&&"closed"in e&&W(e.remove)&&W(e.add)&&W(e.unsubscribe)}function Q(e){W(e)?e():e.unsubscribe()}var ee={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},te={setTimeout:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var o=te.delegate;return(null==o?void 0:o.setTimeout)?o.setTimeout.apply(o,V([e,t],q(n))):setTimeout.apply(void 0,V([e,t],q(n)))},clearTimeout:function(e){var t=te.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function ne(){}var re=oe("C",void 0,void 0);function oe(e,t,n){return{kind:e,value:t,error:n}}var ie=null;function se(e){if(ee.useDeprecatedSynchronousErrorHandling){var t=!ie;if(t&&(ie={errorThrown:!1,error:null}),e(),t){var n=ie,r=n.errorThrown,o=n.error;if(ie=null,r)throw o}}else e()}var ae=function(e){function t(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,X(t)&&t.add(n)):n.destination=pe,n}return I(t,e),t.create=function(e,t,n){return new ue(e,t,n)},t.prototype.next=function(e){this.isStopped?Ae(function(e){return oe("N",e,void 0)}(e),this):this._next(e)},t.prototype.error=function(e){this.isStopped?Ae(oe("E",void 0,e),this):(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped?Ae(re,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(Z),le=Function.prototype.bind;function ce(e,t){return le.call(e,t)}var de=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){he(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){he(e)}else he(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){he(e)}},e}(),ue=function(e){function t(t,n,r){var o,i,s=e.call(this)||this;W(t)||!t?o={next:null!=t?t:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:s&&ee.useDeprecatedNextContext?((i=Object.create(t)).unsubscribe=function(){return s.unsubscribe()},o={next:t.next&&ce(t.next,i),error:t.error&&ce(t.error,i),complete:t.complete&&ce(t.complete,i)}):o=t;return s.destination=new de(o),s}return I(t,e),t}(ae);function he(e){var t;ee.useDeprecatedSynchronousErrorHandling?(t=e,ee.useDeprecatedSynchronousErrorHandling&&ie&&(ie.errorThrown=!0,ie.error=t)):function(e){te.setTimeout((function(){var t=ee.onUnhandledError;if(!t)throw e;t(e)}))}(e)}function Ae(e,t){var n=ee.onStoppedNotification;n&&te.setTimeout((function(){return n(e,t)}))}var pe={closed:!0,next:ne,error:function(e){throw e},complete:ne},fe="function"==typeof Symbol&&Symbol.observable||"@@observable";function ve(e){return e}function ge(e){return 0===e.length?ve:1===e.length?e[0]:function(t){return e.reduce((function(e,t){return t(e)}),t)}}var be=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var r,o=this,i=(r=e)&&r instanceof ae||function(e){return e&&W(e.next)&&W(e.error)&&W(e.complete)}(r)&&X(r)?e:new ue(e,t,n);return se((function(){var e=o,t=e.operator,n=e.source;i.add(t?t.call(i,n):n?o._subscribe(i):o._trySubscribe(i))})),i},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=me(t))((function(t,r){var o=new ue({next:function(t){try{e(t)}catch(e){r(e),o.unsubscribe()}},error:r,complete:t});n.subscribe(o)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[fe]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return ge(e)(this)},e.prototype.toPromise=function(e){var t=this;return new(e=me(e))((function(e,n){var r;t.subscribe((function(e){return r=e}),(function(e){return n(e)}),(function(){return e(r)}))}))},e.create=function(t){return new e(t)},e}();function me(e){var t;return null!==(t=null!=e?e:ee.Promise)&&void 0!==t?t:Promise}var ye,Ce=K((function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),we=function(e){function t(){var t=e.call(this)||this;return t.closed=!1,t.currentObservers=null,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return I(t,e),t.prototype.lift=function(e){var t=new xe(this,this);return t.operator=e,t},t.prototype._throwIfClosed=function(){if(this.closed)throw new Ce},t.prototype.next=function(e){var t=this;se((function(){var n,r;if(t._throwIfClosed(),!t.isStopped){t.currentObservers||(t.currentObservers=Array.from(t.observers));try{for(var o=U(t.currentObservers),i=o.next();!i.done;i=o.next()){i.value.next(e)}}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}}}))},t.prototype.error=function(e){var t=this;se((function(){if(t._throwIfClosed(),!t.isStopped){t.hasError=t.isStopped=!0,t.thrownError=e;for(var n=t.observers;n.length;)n.shift().error(e)}}))},t.prototype.complete=function(){var e=this;se((function(){if(e._throwIfClosed(),!e.isStopped){e.isStopped=!0;for(var t=e.observers;t.length;)t.shift().complete()}}))},t.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(t.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),t.prototype._trySubscribe=function(t){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},t.prototype._innerSubscribe=function(e){var t=this,n=this,r=n.hasError,o=n.isStopped,i=n.observers;return r||o?G:(this.currentObservers=null,i.push(e),new Z((function(){t.currentObservers=null,J(i,e)})))},t.prototype._checkFinalizedStatuses=function(e){var t=this,n=t.hasError,r=t.thrownError,o=t.isStopped;n?e.error(r):o&&e.complete()},t.prototype.asObservable=function(){var e=new be;return e.source=this,e},t.create=function(e,t){return new xe(e,t)},t}(be),xe=function(e){function t(t,n){var r=e.call(this)||this;return r.destination=t,r.source=n,r}return I(t,e),t.prototype.next=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.next)||void 0===n||n.call(t,e)},t.prototype.error=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.error)||void 0===n||n.call(t,e)},t.prototype.complete=function(){var e,t;null===(t=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===t||t.call(e)},t.prototype._subscribe=function(e){var t,n;return null!==(n=null===(t=this.source)||void 0===t?void 0:t.subscribe(e))&&void 0!==n?n:G},t}(we);class _e{constructor(){this.propertyChangeSubject=new we}static getInstance(){return this._contextService||(this._contextService=new _e),this._contextService}static resetInstance(){return this._contextService=new _e,this._contextService}}!function(e){e.get="GET"}(ye||(ye={}));class ke{constructor(){this.httpGet=async e=>{try{return await fetch(`${this.baseUrl}${e.startsWith("/")?e:`/${e}`}`,{method:ye.get})}catch(e){throw console.error("HTTP GET error: ",e),e}}}get baseUrl(){const{protocol:e,host:t,pathname:n}=window.location;let r="/";const o=n.match(/^\/[^\/]+\//);return o&&o.length>0&&(r=o.at(0)),`${e}//${t}${r}modeler/api`}static{this.getInstance=()=>(this._dataService||(this._dataService=new ke),this._dataService)}static{this.resetInstance=()=>(this._dataService=new ke,this._dataService)}}class Ee{constructor(){this.triggerInitialized=()=>{this.initializedSubject.next()},this.triggerOpenProcess=e=>{this.openProcessSubscription.next(e.detail)},this.initializedSubject=new we,this.openProcessSubscription=new we}static getInstance(){return this._eventService||(this._eventService=new Ee),this._eventService}static resetInstance(){return this._eventService=new Ee,this._eventService}static{this.fireExternal=(e,t,n)=>{const r={bubbles:!0,cancelable:!1,composed:!0,...n},o=new CustomEvent(t,r);return e.dispatchEvent(o),o}}}class $e{constructor(){this._baseUrl="/v1/processes",this.getProcessList=async e=>{const t=new URLSearchParams(e).toString();try{const e=await this._dataService.httpGet(`${this._baseUrl}${""===t?"":`?${t}`}`);return await e.json()}catch(e){throw console.error("Get Process list error: ",e),e}},this._dataService=ke.getInstance()}static{this.getInstance=()=>(this._processesApiService||(this._processesApiService=new $e),this._processesApiService)}static{this.resetInstance=()=>(this._processesApiService=new $e,this._processesApiService)}}var Se=o(6062),Te=o.n(Se),Oe=o(4036),Be=o.n(Oe),ze=o(6793),Me=o.n(ze),De=o(7892),Ne=o.n(De),Pe=o(1173),Le=o.n(Pe),Fe=o(2464),Re=o.n(Fe),je=o(9526),He={};He.styleTagTransform=Re(),He.setAttributes=Ne(),He.insert=Me().bind(null,"head"),He.domAPI=Be(),He.insertStyleElement=Le();Te()(je.Z,He);je.Z&&je.Z.locals&&je.Z.locals;const Ie=z.iv`
  :host {
    all: initial;
  }
`,Ue=z.iv`0.75em`,qe=z.iv`1.5em`,Ve=z.iv`1.625em`,We=[Ie,z.iv`
  :host {
    display: grid;
    grid-template-rows: min-content auto;

    min-height: 100%;
  }
`],Ke=()=>x("Process models",{id:"list-process-models",desc:"Header for Process models on the app."}),Ye=[Ie,z.iv`
  :host {
    display: grid;

    background-color: var(--nx-grey-5);
  }

  header {
    display: grid;
    grid-template-columns: ${qe} min-content auto;
    grid-template-rows: ${Ue} ${Ve} ${Ve};
  }

  h1 {
    grid-column: 2;
    grid-row: 2;

    margin: 0;

    white-space: nowrap;

    color: var(--ne-alias-color-text-default);
    font-family: var(--nx-font-family-heading);
    font-size: var(--ne-ref-font-size-07);
  }
`];class Je extends(B(z.oi)){static get scopedElements(){return{}}static get styles(){return Ye}render(){return z.dy`<header>
      <h1>${Ke()}</h1>
    </header>`}}var Ze=o(3311);const{I:Ge}=Ze.Al,Xe=1,Qe=2,et=e=>(...t)=>({_$litDirective$:e,values:t});class tt{constructor(e){}get _$AU(){return this._$AM._$AU}_$AT(e,t,n){this._$Ct=e,this._$AM=t,this._$Ci=n}_$AS(e,t){return this.update(e,t)}update(e,t){return this.render(...t)}}const nt=(e,t)=>{var n,r;const o=e._$AN;if(void 0===o)return!1;for(const e of o)null===(r=(n=e)._$AO)||void 0===r||r.call(n,t,!1),nt(e,t);return!0},rt=e=>{let t,n;do{if(void 0===(t=e._$AM))break;n=t._$AN,n.delete(e),e=t}while(0===(null==n?void 0:n.size))},ot=e=>{for(let t;t=e._$AM;e=t){let n=t._$AN;if(void 0===n)t._$AN=n=new Set;else if(n.has(e))break;n.add(e),at(t)}};function it(e){void 0!==this._$AN?(rt(this),this._$AM=e,ot(this)):this._$AM=e}function st(e,t=!1,n=0){const r=this._$AH,o=this._$AN;if(void 0!==o&&0!==o.size)if(t)if(Array.isArray(r))for(let e=n;e<r.length;e++)nt(r[e],!1),rt(r[e]);else null!=r&&(nt(r,!1),rt(r));else nt(this,e)}const at=e=>{var t,n,r,o;e.type==Qe&&(null!==(t=(r=e)._$AP)&&void 0!==t||(r._$AP=st),null!==(n=(o=e)._$AQ)&&void 0!==n||(o._$AQ=it))};class lt extends tt{constructor(){super(...arguments),this._$AN=void 0}_$AT(e,t,n){super._$AT(e,t,n),ot(this),this.isConnected=e._$AU}_$AO(e,t=!0){var n,r;e!==this.isConnected&&(this.isConnected=e,e?null===(n=this.reconnected)||void 0===n||n.call(this):null===(r=this.disconnected)||void 0===r||r.call(this)),t&&(nt(this,e),rt(this))}setValue(e){if((e=>void 0===e.strings)(this._$Ct))this._$Ct._$AI(e,this);else{const t=[...this._$Ct._$AH];t[this._$Ci]=e,this._$Ct._$AI(t,this,0)}}disconnected(){}reconnected(){}}class ct{constructor(e){this.Y=e}disconnect(){this.Y=void 0}reconnect(e){this.Y=e}deref(){return this.Y}}class dt{constructor(){this.Z=void 0,this.q=void 0}get(){return this.Z}pause(){var e;null!==(e=this.Z)&&void 0!==e||(this.Z=new Promise((e=>this.q=e)))}resume(){var e;null===(e=this.q)||void 0===e||e.call(this),this.Z=this.q=void 0}}const ut=e=>!(e=>null===e||"object"!=typeof e&&"function"!=typeof e)(e)&&"function"==typeof e.then,ht=1073741823;const At=et(class extends lt{constructor(){super(...arguments),this._$Cwt=ht,this._$Cyt=[],this._$CK=new ct(this),this._$CX=new dt}render(...e){var t;return null!==(t=e.find((e=>!ut(e))))&&void 0!==t?t:Ze.Jb}update(e,t){const n=this._$Cyt;let r=n.length;this._$Cyt=t;const o=this._$CK,i=this._$CX;this.isConnected||this.disconnected();for(let e=0;e<t.length&&!(e>this._$Cwt);e++){const s=t[e];if(!ut(s))return this._$Cwt=e,s;e<r&&s===n[e]||(this._$Cwt=ht,r=0,Promise.resolve(s).then((async e=>{for(;i.get();)await i.get();const t=o.deref();if(void 0!==t){const n=t._$Cyt.indexOf(s);n>-1&&n<t._$Cwt&&(t._$Cwt=n,t.setValue(e))}})))}return Ze.Jb}disconnected(){this._$CK.disconnect(),this._$CX.pause()}reconnected(){this._$CK.reconnect(this),this._$CX.resume()}}),pt=[Ie,z.iv`
  :host {
    display: grid;
  }
`];var ft=function(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s};class vt extends(B(z.oi)){static get scopedElements(){return{"ne-table":customElements.get("ne-table"),"ne-theader":customElements.get("ne-theader"),"ne-button":customElements.get("ne-button"),"ne-label":customElements.get("ne-label"),"ne-status-overlay":customElements.get("ne-status-overlay")}}static get styles(){return pt}constructor(){super(),this._showStatusOverlay=!1,this._onCellClicked=e=>{e.detail&&0===e.detail.column&&this._eventService.triggerOpenProcess(e)},this._openProcess=e=>{Ee.fireExternal(this,"pi-open-process",{detail:e})},this._onInitialized=()=>{Ee.fireExternal(this,"pi-initialized",{})},this._processApiService=$e.getInstance(),this._eventService=Ee.getInstance()}_sortProcesses(e){e.value.sort(((e,t)=>new Date(t.lastModified).getTime()-new Date(e.lastModified).getTime()))}async fetchData(){try{this._showStatusOverlay=!0;const e=await this._processApiService.getProcessList();return this._sortProcesses(e),this._showStatusOverlay=!1,z.dy`<ne-table
        .data=${e.value}
        @ne-click="${this._onCellClicked}"
      >
        <template slot="head">
          <ne-theader>Model name</ne-theader>
          <ne-theader>Version</ne-theader>
          <ne-theader>Process group</ne-theader>
          <ne-theader>Model owner</ne-theader>
          <ne-theader>Model expert</ne-theader>
          <ne-theader>Modified date</ne-theader>
        </template>
        <template slot="row">
          <ne-button id="{{title}}" variant="text" left-icon="processModel"
            >{{title}}</ne-button
          >
          <ne-label id="{{version}}">{{version}}</ne-label>
          <ne-label id="{{processGroupName}}">{{processGroupName}}</ne-label>
          <ne-label id="{{ownerName}}">{{ownerName}}</ne-label>
          <ne-label id="{{expertName}}">{{expertName}}</ne-label>
          <ne-label id="{{lastModified}}">{{lastModified}}</ne-label>
        </template>
      </ne-table>`}catch(e){}return z.dy``}render(){return z.dy`${At(this._processListResult,z.dy``)}<ne-status-overlay
        ?show=${this._showStatusOverlay}
        status-delay="500"
      ></ne-status-overlay>`}connectedCallback(){super.connectedCallback&&super.connectedCallback(),this._initializedSubscription=this._eventService.initializedSubject.subscribe({next:this._onInitialized}),this._openProcessSubscription=this._eventService.openProcessSubscription.subscribe({next:this._openProcess}),this._eventService.triggerInitialized(),this._processListResult=this.fetchData()}disconnectedCallback(){super.disconnectedCallback&&super.disconnectedCallback(),this._initializedSubscription.unsubscribe(),this._openProcessSubscription.unsubscribe()}}function gt(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s}ft([P()],vt.prototype,"_processListResult",void 0),ft([P()],vt.prototype,"_showStatusOverlay",void 0);const bt=z.iv`
  :host {
    all: initial;
  }

  .hidden {
    display: none;
  }
`,mt=et(class extends tt{constructor(e){var t;if(super(e),e.type!==Xe||"class"!==e.name||(null===(t=e.strings)||void 0===t?void 0:t.length)>2)throw Error("`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.")}render(e){return" "+Object.keys(e).filter((t=>e[t])).join(" ")+" "}update(e,[t]){var n,r;if(void 0===this.nt){this.nt=new Set,void 0!==e.strings&&(this.st=new Set(e.strings.join(" ").split(/\s/).filter((e=>""!==e))));for(const e in t)t[e]&&!(null===(n=this.st)||void 0===n?void 0:n.has(e))&&this.nt.add(e);return this.render(t)}const o=e.element.classList;this.nt.forEach((e=>{e in t||(o.remove(e),this.nt.delete(e))}));for(const e in t){const n=!!t[e];n===this.nt.has(e)||(null===(r=this.st)||void 0===r?void 0:r.has(e))||(n?(o.add(e),this.nt.add(e)):(o.remove(e),this.nt.delete(e)))}return Ze.Jb}}),yt=new WeakMap,Ct=e=>"function"==typeof e&&yt.has(e),wt="undefined"!=typeof window&&null!=window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,xt={},_t={},kt=`{{lit-${String(Math.random()).slice(2)}}}`,Et=`\x3c!--${kt}--\x3e`,$t=new RegExp(`${kt}|${Et}`),St="$lit$";class Tt{constructor(e,t){this.parts=[],this.element=t;const n=[],r=[],o=document.createTreeWalker(t.content,133,null,!1);let i=0,s=-1,a=0;const{strings:l,values:{length:c}}=e;for(;a<c;){const e=o.nextNode();if(null!==e){if(s++,1===e.nodeType){if(e.hasAttributes()){const t=e.attributes,{length:n}=t;let r=0;for(let e=0;e<n;e++)Ot(t[e].name,St)&&r++;for(;r-- >0;){const t=l[a],n=Mt.exec(t)[2],r=n.toLowerCase()+St,o=e.getAttribute(r);e.removeAttribute(r);const i=o.split($t);this.parts.push({type:"attribute",index:s,name:n,strings:i}),a+=i.length-1}}"TEMPLATE"===e.tagName&&(r.push(e),o.currentNode=e.content)}else if(3===e.nodeType){const t=e.data;if(t.indexOf(kt)>=0){const r=e.parentNode,o=t.split($t),i=o.length-1;for(let t=0;t<i;t++){let n,i=o[t];if(""===i)n=zt();else{const e=Mt.exec(i);null!==e&&Ot(e[2],St)&&(i=i.slice(0,e.index)+e[1]+e[2].slice(0,-St.length)+e[3]),n=document.createTextNode(i)}r.insertBefore(n,e),this.parts.push({type:"node",index:++s})}""===o[i]?(r.insertBefore(zt(),e),n.push(e)):e.data=o[i],a+=i}}else if(8===e.nodeType)if(e.data===kt){const t=e.parentNode;null!==e.previousSibling&&s!==i||(s++,t.insertBefore(zt(),e)),i=s,this.parts.push({type:"node",index:s}),null===e.nextSibling?e.data="":(n.push(e),s--),a++}else{let t=-1;for(;-1!==(t=e.data.indexOf(kt,t+1));)this.parts.push({type:"node",index:-1}),a++}}else o.currentNode=r.pop()}for(const e of n)e.parentNode.removeChild(e)}}const Ot=(e,t)=>{const n=e.length-t.length;return n>=0&&e.slice(n)===t},Bt=e=>-1!==e.index,zt=()=>document.createComment(""),Mt=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;class Dt{constructor(e,t,n){this.__parts=[],this.template=e,this.processor=t,this.options=n}update(e){let t=0;for(const n of this.__parts)void 0!==n&&n.setValue(e[t]),t++;for(const e of this.__parts)void 0!==e&&e.commit()}_clone(){const e=wt?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),t=[],n=this.template.parts,r=document.createTreeWalker(e,133,null,!1);let o,i=0,s=0,a=r.nextNode();for(;i<n.length;)if(o=n[i],Bt(o)){for(;s<o.index;)s++,"TEMPLATE"===a.nodeName&&(t.push(a),r.currentNode=a.content),null===(a=r.nextNode())&&(r.currentNode=t.pop(),a=r.nextNode());if("node"===o.type){const e=this.processor.handleTextExpression(this.options);e.insertAfterNode(a.previousSibling),this.__parts.push(e)}else this.__parts.push(...this.processor.handleAttributeExpressions(a,o.name,o.strings,this.options));i++}else this.__parts.push(void 0),i++;return wt&&(document.adoptNode(e),customElements.upgrade(e)),e}}const Nt=window.trustedTypes&&trustedTypes.createPolicy("lit-html",{createHTML:e=>e}),Pt=` ${kt} `;class Lt{constructor(e,t,n,r){this.strings=e,this.values=t,this.type=n,this.processor=r}getHTML(){const e=this.strings.length-1;let t="",n=!1;for(let r=0;r<e;r++){const e=this.strings[r],o=e.lastIndexOf("\x3c!--");n=(o>-1||n)&&-1===e.indexOf("--\x3e",o+1);const i=Mt.exec(e);t+=null===i?e+(n?Pt:Et):e.substr(0,i.index)+i[1]+i[2]+St+i[3]+kt}return t+=this.strings[e],t}getTemplateElement(){const e=document.createElement("template");let t=this.getHTML();return void 0!==Nt&&(t=Nt.createHTML(t)),e.innerHTML=t,e}}const Ft=e=>null===e||!("object"==typeof e||"function"==typeof e),Rt=e=>Array.isArray(e)||!(!e||!e[Symbol.iterator]);class jt{constructor(e,t,n){this.dirty=!0,this.element=e,this.name=t,this.strings=n,this.parts=[];for(let e=0;e<n.length-1;e++)this.parts[e]=this._createPart()}_createPart(){return new Ht(this)}_getValue(){const e=this.strings,t=e.length-1,n=this.parts;if(1===t&&""===e[0]&&""===e[1]){const e=n[0].value;if("symbol"==typeof e)return String(e);if("string"==typeof e||!Rt(e))return e}let r="";for(let o=0;o<t;o++){r+=e[o];const t=n[o];if(void 0!==t){const e=t.value;if(Ft(e)||!Rt(e))r+="string"==typeof e?e:String(e);else for(const t of e)r+="string"==typeof t?t:String(t)}}return r+=e[t],r}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class Ht{constructor(e){this.value=void 0,this.committer=e}setValue(e){e===xt||Ft(e)&&e===this.value||(this.value=e,Ct(e)||(this.committer.dirty=!0))}commit(){for(;Ct(this.value);){const e=this.value;this.value=xt,e(this)}this.value!==xt&&this.committer.commit()}}class It{constructor(e){this.value=void 0,this.__pendingValue=void 0,this.options=e}appendInto(e){this.startNode=e.appendChild(zt()),this.endNode=e.appendChild(zt())}insertAfterNode(e){this.startNode=e,this.endNode=e.nextSibling}appendIntoPart(e){e.__insert(this.startNode=zt()),e.__insert(this.endNode=zt())}insertAfterPart(e){e.__insert(this.startNode=zt()),this.endNode=e.endNode,e.endNode=this.startNode}setValue(e){this.__pendingValue=e}commit(){if(null===this.startNode.parentNode)return;for(;Ct(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=xt,e(this)}const e=this.__pendingValue;e!==xt&&(Ft(e)?e!==this.value&&this.__commitText(e):e instanceof Lt?this.__commitTemplateResult(e):e instanceof Node?this.__commitNode(e):Rt(e)?this.__commitIterable(e):e===_t?(this.value=_t,this.clear()):this.__commitText(e))}__insert(e){this.endNode.parentNode.insertBefore(e,this.endNode)}__commitNode(e){this.value!==e&&(this.clear(),this.__insert(e),this.value=e)}__commitText(e){const t=this.startNode.nextSibling,n="string"==typeof(e=null==e?"":e)?e:String(e);t===this.endNode.previousSibling&&3===t.nodeType?t.data=n:this.__commitNode(document.createTextNode(n)),this.value=e}__commitTemplateResult(e){const t=this.options.templateFactory(e);if(this.value instanceof Dt&&this.value.template===t)this.value.update(e.values);else{const n=new Dt(t,e.processor,this.options),r=n._clone();n.update(e.values),this.__commitNode(r),this.value=n}}__commitIterable(e){Array.isArray(this.value)||(this.value=[],this.clear());const t=this.value;let n,r=0;for(const o of e)n=t[r],void 0===n&&(n=new It(this.options),t.push(n),0===r?n.appendIntoPart(this):n.insertAfterPart(t[r-1])),n.setValue(o),n.commit(),r++;r<t.length&&(t.length=r,this.clear(n&&n.endNode))}clear(e=this.startNode){((e,t,n=null)=>{for(;t!==n;){const n=t.nextSibling;e.removeChild(t),t=n}})(this.startNode.parentNode,e.nextSibling,this.endNode)}}class Ut{constructor(e,t,n){if(this.value=void 0,this.__pendingValue=void 0,2!==n.length||""!==n[0]||""!==n[1])throw new Error("Boolean attributes can only contain a single expression");this.element=e,this.name=t,this.strings=n}setValue(e){this.__pendingValue=e}commit(){for(;Ct(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=xt,e(this)}if(this.__pendingValue===xt)return;const e=!!this.__pendingValue;this.value!==e&&(e?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name),this.value=e),this.__pendingValue=xt}}class qt extends jt{constructor(e,t,n){super(e,t,n),this.single=2===n.length&&""===n[0]&&""===n[1]}_createPart(){return new Vt(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class Vt extends Ht{}let Wt=!1;(()=>{try{const e={get capture(){return Wt=!0,!1}};window.addEventListener("test",e,e),window.removeEventListener("test",e,e)}catch(e){}})();class Kt{constructor(e,t,n){this.value=void 0,this.__pendingValue=void 0,this.element=e,this.eventName=t,this.eventContext=n,this.__boundHandleEvent=e=>this.handleEvent(e)}setValue(e){this.__pendingValue=e}commit(){for(;Ct(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=xt,e(this)}if(this.__pendingValue===xt)return;const e=this.__pendingValue,t=this.value,n=null==e||null!=t&&(e.capture!==t.capture||e.once!==t.once||e.passive!==t.passive),r=null!=e&&(null==t||n);n&&this.element.removeEventListener(this.eventName,this.__boundHandleEvent,this.__options),r&&(this.__options=Yt(e),this.element.addEventListener(this.eventName,this.__boundHandleEvent,this.__options)),this.value=e,this.__pendingValue=xt}handleEvent(e){"function"==typeof this.value?this.value.call(this.eventContext||this.element,e):this.value.handleEvent(e)}}const Yt=e=>e&&(Wt?{capture:e.capture,passive:e.passive,once:e.once}:e.capture);new class{handleAttributeExpressions(e,t,n,r){const o=t[0];if("."===o){return new qt(e,t.slice(1),n).parts}if("@"===o)return[new Kt(e,t.slice(1),r.eventContext)];if("?"===o)return[new Ut(e,t.slice(1),n)];return new jt(e,t,n).parts}handleTextExpression(e){return new It(e)}};const Jt=new Map;new WeakMap;"undefined"!=typeof window&&(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.4.1");class Zt{constructor(e){this._parent=e,this._cache=new Map}has(e){return!!(this._cache.has(e)||this._parent&&this._parent._cache.has(e))}set(e,t){return this._cache.set(e,t),this}get(e){return this._cache.get(e)||this._parent&&this._parent._cache.get(e)}}let Gt=Math.round(1e5*Math.random());const Xt="-|\\.|[0-9]|[a-z]",Qt=new RegExp(`[a-z](${Xt})*-(${Xt})*`),en=(e,t)=>{const n=`${e}-${Gt+=1}`;return((e,t)=>!!t.get(e))(n,t)?en(e,t):n};function tn(e,t=customElements){if(n=e,null===Qt.exec(n))throw new Error("tagName is invalid");var n;return en(e,t)}const nn=new WeakMap,rn=(e,t)=>nn.set(t,e),on=e=>nn.get(e);const sn=(e,t,n=customElements)=>{rn(e,t),n.define(e,class extends t{})},an=(e,t,n)=>{const r=customElements;if(!function(e){let t=e;for(;t;){if(t===window.HTMLElement||"HTMLElement"===t.name)return!0;t=Object.getPrototypeOf(t)}return!1}(t))return((e,t,n)=>{const r=tn(e,t);if(!n)throw new Error("Lazy scoped elements requires the use of tags cache");return n.set(e,r),r})(e,r,n);if(t===customElements.get(e))return rn(e,t),e;const o=tn(e,r);return sn(o,t,r),o};function ln(e,t,n=undefined){return on(t)||n&&n.get(e)||an(e,t,n)}const cn="-|\\.|[0-9]|[a-z]",dn=new RegExp(`<\\/?([a-z](${cn})*-(${cn})*)`,"g"),un=new Zt,hn=(e,t,n,r)=>{const o=e.map((e=>{let n=e;const o=(e=>{const t=[];let n;for(;null!==(n=dn.exec(e));)t.push(n);return t})(e);for(let e=o.length-1;e>=0;e-=1){const i=o[e],[s,a]=i,l=ln(a,t[a],r),c=i.index+s.length-a.length,d=c+a.length,u=0===s.indexOf("</");n=n.slice(0,c)+(u?l:`${l} data-tag-name="${a}"`)+n.slice(d)}return n}));return n.set(e,o),o};let An=!0;const{ShadyCSS:pn}=window;(void 0===pn||void 0===pn.prepareTemplateDom)&&(An=!1);const fn=new WeakMap,vn=new WeakMap,gn=e=>(vn.has(e)||vn.set(e,new Zt(vn.get(e.constructor))),vn.get(e)),bn=(e,t,n,r)=>e.map((e=>e instanceof Lt?mn(e,t,n,r):Array.isArray(e)?bn(e,t,n,r):e)),mn=(e,t,n,r)=>new Lt(function(e,t,n=un,r){return n.get(e)||hn(e,t,n,r)}(e.strings,t,n,r),bn(e.values,t,n,r),e.type,e.processor),yn=(e,t,n,r)=>o=>{const i=mn(o,t,n,r);return(e=>t=>{const n=((e,t)=>`${e}--${t}`)(t.type,e);let r=Jt.get(n);void 0===r&&(r={stringsArray:new WeakMap,keyString:new Map},Jt.set(n,r));let o=r.stringsArray.get(t.strings);if(void 0!==o)return o;const i=t.strings.join(kt);if(o=r.keyString.get(i),void 0===o){const n=t.getTemplateElement();An&&pn.prepareTemplateDom(n,e),o=new Tt(t,n),r.keyString.set(i,o)}return r.stringsArray.set(t.strings,o),o})(e)(i)},Cn=S((e=>class extends e{static get scopedElements(){return{}}static render(e,t,n){if(!n||"object"!=typeof n||!n.scopeName)throw new Error("The `scopeName` option is required.");const{scopeName:r,eventContext:o}=n,i=(s=o,fn.has(s)||fn.set(s,new Zt(fn.get(s.constructor))),fn.get(s));var s;const a=gn(o),{scopedElements:l}=this;return super.render(e,t,{...n,templateFactory:yn(r,l,i,a)})}defineScopedElement(e,t){return function(e,t,n){const r=n.get(e);r?void 0===customElements.get(r)&&sn(r,t,customElements):n.set(e,ln(e,t,n))}(e,t,gn(this))}static getScopedTagName(e){const t=this.scopedElements[e];return t?ln(e,t,gn(this)):gn(this).get(e)}getScopedTagName(e){const t=this.constructor.scopedElements[e];return t?ln(e,t,gn(this)):gn(this).get(e)}})),wn=z.iv`
  * {
  --ne-button-color-background-primary-default: var(--ne-ref-color-blue-60, #006BD6);
  --ne-button-color-background-primary-hover: var(--ne-ref-color-blue-70, #0052A3);
  --ne-button-color-background-primary-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-background-secondary-default: var(--ne-ref-color-white, #ffffff);
  --ne-button-color-background-secondary-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-button-color-background-secondary-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-background-destructive-default: var(--ne-ref-color-red-60, #B80000);
  --ne-button-color-background-destructive-hover: var(--ne-ref-color-red-70, #7C0D0E);
  --ne-button-color-background-destructive-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-background-text-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-button-color-background-text-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-background-inverse-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-button-color-background-inverse-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-border-primary-default: var(--ne-ref-color-blue-70, #0052A3);
  --ne-button-color-border-secondary-default: var(--ne-ref-color-grey-10, #E2E3E4);
  --ne-button-color-border-destructive-default: var(--ne-ref-color-red-70, #7C0D0E);
  --ne-button-color-border-focus: var(--ne-ref-color-blue-20, #A3D1FF);
  --ne-button-color-border-inverse-default: var(--ne-ref-color-white, #ffffff);
  --ne-button-color-border-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-label-primary-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-button-color-label-primary-default: var(--ne-ref-color-white, #ffffff);
  --ne-button-color-label-secondary-default: var(--ne-ref-color-blue-60, #006BD6);
  --ne-button-color-label-secondary-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-button-color-label-destructive-default: var(--ne-ref-color-white, #ffffff);
  --ne-button-color-label-destructive-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-button-color-label-text-default: var(--ne-ref-color-blue-60, #006BD6);
  --ne-button-color-label-text-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-button-color-label-inverse-default: var(--ne-ref-color-white, #ffffff);
  --ne-button-color-label-inverse-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-button-border-radius: var(--ne-ref-border-radius-medium, .25em);
  --ne-button-padding-horizontal: var(--ne-ref-spacing-small, 0.75em);
  --ne-button-padding-vertical: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-button-gap: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-button-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-button-font-size: var(--ne-ref-font-size-04, 0.875em);
  --ne-button-sizing-icon: var(--ne-ref-sizing-04, 1em);
  --ne-button-border-width-default: var(--ne-ref-border-width-small, 1px);
  --ne-button-border-width-focus: var(--ne-ref-border-width-large, 4px);
}
`,xn=et(class extends tt{constructor(e){var t;if(super(e),e.type!==Xe||"style"!==e.name||(null===(t=e.strings)||void 0===t?void 0:t.length)>2)throw Error("The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.")}render(e){return Object.keys(e).reduce(((t,n)=>{const r=e[n];return null==r?t:t+`${n=n.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g,"-$&").toLowerCase()}:${r};`}),"")}update(e,[t]){const{style:n}=e.element;if(void 0===this.vt){this.vt=new Set;for(const e in t)this.vt.add(e);return this.render(t)}this.vt.forEach((e=>{null==t[e]&&(this.vt.delete(e),e.includes("-")?n.removeProperty(e):n[e]="")}));for(const e in t){const r=t[e];null!=r&&(this.vt.add(e),e.includes("-")?n.setProperty(e,r):n[e]=r)}return Ze.Jb}}),_n={_export:()=>o.e(388).then(o.bind(o,8388)).then((e=>e._export)),_import:()=>o.e(699).then(o.bind(o,9699)).then((e=>e._import)),add:()=>o.e(352).then(o.bind(o,7352)).then((e=>e.add)),archive:()=>o.e(939).then(o.bind(o,6939)).then((e=>e.archive)),arrowDown:()=>o.e(783).then(o.bind(o,4783)).then((e=>e.arrowDown)),arrowUp:()=>o.e(404).then(o.bind(o,7404)).then((e=>e.arrowUp)),caretDown:()=>o.e(588).then(o.bind(o,588)).then((e=>e.caretDown)),caretLeft:()=>o.e(746).then(o.bind(o,1746)).then((e=>e.caretLeft)),caretRight:()=>o.e(147).then(o.bind(o,5147)).then((e=>e.caretRight)),caretUp:()=>o.e(245).then(o.bind(o,5245)).then((e=>e.caretUp)),check:()=>o.e(441).then(o.bind(o,3441)).then((e=>e.check)),chevronDown:()=>o.e(157).then(o.bind(o,157)).then((e=>e.chevronDown)),chevronLeft:()=>o.e(316).then(o.bind(o,1316)).then((e=>e.chevronLeft)),chevronLightDown:()=>o.e(683).then(o.bind(o,9683)).then((e=>e.chevronLightDown)),chevronLightLeft:()=>o.e(788).then(o.bind(o,1788)).then((e=>e.chevronLightLeft)),chevronLightRight:()=>o.e(776).then(o.bind(o,7776)).then((e=>e.chevronLightRight)),chevronLightUp:()=>o.e(154).then(o.bind(o,5154)).then((e=>e.chevronLightUp)),chevronRight:()=>o.e(704).then(o.bind(o,1704)).then((e=>e.chevronRight)),chevronUp:()=>o.e(121).then(o.bind(o,5121)).then((e=>e.chevronUp)),closeDefault:()=>o.e(754).then(o.bind(o,4754)).then((e=>e.closeDefault)),dangerExclamation:()=>o.e(969).then(o.bind(o,969)).then((e=>e.dangerExclamation)),dropzone:()=>o.e(941).then(o.bind(o,6941)).then((e=>e.dropzone)),feedback:()=>o.e(253).then(o.bind(o,2253)).then((e=>e.feedback)),file:()=>o.e(514).then(o.bind(o,4514)).then((e=>e.file)),hide:()=>o.e(138).then(o.bind(o,8138)).then((e=>e.hide)),info:()=>o.e(770).then(o.bind(o,770)).then((e=>e.info)),maximise:()=>o.e(297).then(o.bind(o,8297)).then((e=>e.maximise)),meatballs:()=>o.e(307).then(o.bind(o,1307)).then((e=>e.meatballs)),minus:()=>o.e(272).then(o.bind(o,7272)).then((e=>e.minus)),openInNewWindow:()=>o.e(895).then(o.bind(o,1895)).then((e=>e.openInNewWindow)),process:()=>o.e(137).then(o.bind(o,4137)).then((e=>e.process)),processModel:()=>o.e(605).then(o.bind(o,2605)).then((e=>e.processModel)),publish:()=>o.e(233).then(o.bind(o,5233)).then((e=>e.publish)),save:()=>o.e(234).then(o.bind(o,3234)).then((e=>e.save)),search:()=>o.e(554).then(o.bind(o,5554)).then((e=>e.search)),show:()=>o.e(376).then(o.bind(o,9376)).then((e=>e.show)),success:()=>o.e(528).then(o.bind(o,7528)).then((e=>e.success)),summary:()=>o.e(318).then(o.bind(o,8318)).then((e=>e.summary)),tick:()=>o.e(17).then(o.bind(o,5017)).then((e=>e.tick)),trash:()=>o.e(798).then(o.bind(o,7798)).then((e=>e.trash)),user:()=>o.e(592).then(o.bind(o,8592)).then((e=>e.user)),users:()=>o.e(344).then(o.bind(o,8344)).then((e=>e.users)),versionHistory:()=>o.e(525).then(o.bind(o,6525)).then((e=>e.versionHistory)),warningExclamation:()=>o.e(403).then(o.bind(o,7403)).then((e=>e.warningExclamation))},kn=({type:e,typeAsHtml:t,fixedSize:n,className:r})=>{if(!e&&!t)return z.Ld;if(e&&!(e in _n))return console.warn("Icon not found",e),z.Ld;const o=e?_n[e]():Promise.resolve(t);return z.dy`
    <div
      aria-hidden="true"
      class=${r||"ne-icon"}
      style=${xn({height:n,width:n,display:"grid",alignItems:"center",justifyItems:"center"})}
    >
      ${At(o,z.dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
></svg>`)}
    </div>
  `},En=[wn,z.iv`
  .btn {
    font-family: var(--ne-button-font-family);
    font-size: var(--ne-button-font-size);
    padding: var(--ne-button-padding-vertical)
      var(--ne-button-padding-horizontal) var(--ne-button-padding-vertical)
      var(--ne-button-padding-horizontal);
    gap: var(--ne-button-gap);
    border-radius: var(--ne-button-border-radius);
    outline: none;
    display: grid;
    grid-auto-flow: column;
  }

  .btn:focus {
    outline: 4px solid var(--ne-button-color-border-focus);
  }

  .btn-primary {
    border: 1px solid var(--ne-button-color-border-primary-default);
    color: var(--ne-button-color-label-primary-default);
    background-color: var(--ne-button-color-background-primary-default);
  }

  .btn-primary:hover {
    background-color: var(--ne-button-color-background-primary-hover);
  }

  .btn-primary:disabled {
    border: 1px solid var(--ne-button-color-border-disabled);
    color: var(--ne-button-color-label-primary-disabled);
    background-color: var(--ne-button-color-background-primary-disabled);
  }

  .btn-secondary {
    border: 1px solid var(--ne-button-color-border-secondary-default);
    color: var(--ne-button-color-label-secondary-default);
    background-color: var(--ne-button-color-background-secondary-default);
  }

  .btn-secondary:hover {
    background-color: var(--ne-button-color-background-secondary-hover);
  }

  .btn-secondary:disabled {
    border: 1px solid var(--ne-button-color-border-disabled);
    color: var(--ne-button-color-label-secondary-disabled);
    background-color: var(--ne-button-color-background-secondary-disabled);
  }

  .btn-secondary:focus {
    background-color: var(--ne-button-color-background-secondary-hover);
  }

  .btn-destructive {
    border: 1px solid var(--ne-button-color-border-destructive-default);
    color: var(--ne-button-color-label-destructive-default);
    background-color: var(--ne-button-color-background-destructive-default);
  }

  .btn-destructive:hover {
    background-color: var(--ne-button-color-background-destructive-hover);
  }

  .btn-destructive:disabled {
    border: 1px solid var(--ne-button-color-border-disabled);
    color: var(--ne-button-color-label-destructive-disabled);
    background-color: var(--ne-button-color-background-destructive-disabled);
  }

  .btn-destructive:focus {
    background-color: var(--ne-button-color-background-destructive-hover);
  }

  .btn-text {
    border: 0;
    color: var(--ne-button-color-label-text-default);
    background-color: transparent;
  }

  .btn-text:hover {
    background-color: var(--ne-button-color-background-text-hover);
  }

  .btn-text:disabled {
    border: 0;
    color: var(--ne-button-color-label-text-disabled);
    background-color: var(--ne-button-color-background-text-disabled);
  }

  .btn-text:focus {
    background-color: var(--ne-button-color-background-text-hover);
  }

  .btn-inverse {
    color: var(--ne-button-color-label-inverse-default);
    background-color: transparent;
    border: 1px solid var(--ne-button-color-border-inverse-default);
  }

  .btn-inverse:hover {
    background-color: var(--ne-button-color-background-inverse-hover);
  }

  .btn-inverse:disabled {
    border: 1px solid var(--ne-button-color-border-disabled);
    color: var(--ne-button-color-label-inverse-disabled);
    background-color: var(--ne-button-color-background-inverse-disabled);
  }

  .btn-inverse:focus {
    background-color: var(--ne-button-color-background-inverse-hover);
  }

  .icon-slot {
    min-width: 18px;
    max-width: 18px;
  }
`,bt];let $n=class extends(Cn(z.oi)){constructor(){super(...arguments),this.disabled=!1,this.ariaLabel="",this.variant="primary",this.onClick=()=>{((e,t,n)=>{const r={bubbles:!0,cancelable:!1,composed:!0,...n},o=new CustomEvent(t,r);e.dispatchEvent(o)})(this,"ne-click",{composed:!0,bubbles:!0})}}static get styles(){return En}render(){return z.dy`
      <button
        id=${this.id}
        type="button"
        ?disabled=${this.disabled}
        @click="${this.onClick}"
        aria-label=${this.ariaLabel||z.Ld}
        class=${mt({btn:!0,"btn-primary":"primary"===this.variant,"btn-secondary":"secondary"===this.variant,"btn-destructive":"destructive"===this.variant,"btn-text":"text"===this.variant,"btn-inverse":"inverse"===this.variant})}
      >
        <span class=${void 0!==this.leftIconType?"icon-slot":"hidden"}>
          <slot name="left">${kn({type:this.leftIconType})}</slot>
        </span>
        <slot></slot>
        <span
          class=${void 0!==this.rightIconType?"icon-slot":"hidden"}
        >
          <slot name="right">${kn({type:this.rightIconType})}</slot>
        </span>
      </button>
    `}};function Sn(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s}gt([N({type:Boolean,reflect:!0})],$n.prototype,"disabled",void 0),gt([N({attribute:"ne-aria-label",type:String,reflect:!0})],$n.prototype,"ariaLabel",void 0),gt([N({type:String,attribute:"left-icon",reflect:!0})],$n.prototype,"leftIconType",void 0),gt([N({type:String,attribute:"right-icon",reflect:!0})],$n.prototype,"rightIconType",void 0),gt([N({reflect:!0})],$n.prototype,"variant",void 0),$n=gt([M("ne-button")],$n);const Tn=z.iv`
  :host {
    all: initial;
  }

  .hidden {
    display: none;
  }
`,On=e=>null!=e?e:Ze.Ld,Bn=z.iv`
  * {
  --ne-label-gap: var(--ne-ref-spacing-none, 0);
  --ne-label-color-title: var(--ne-ref-color-grey-60, #575C61);
  --ne-label-color-asterisk: var(--ne-ref-color-red-60, #B80000);
  --ne-label-font-size: var(--ne-ref-font-size-04, 0.875em);
  --ne-label-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
}
`,zn=[z.iv`
  * {
    color: var(--ne-label-color-title);
    font-family: var(--ne-label-font-family);
    font-size: 1em;
  }

  .outer-label {
    display: flex;
    font-size: var(--ne-label-font-size);
  }

  .required-indicator {
    margin-left: var(--ne-label-gap);
    color: var(--ne-label-color-asterisk);
  }
`,Tn,Bn];let Mn=class extends z.oi{constructor(){super(...arguments),this.for="",this.required=!1}static get styles(){return zn}render(){return z.dy`<label
      class="outer-label"
      id=${On(this.id)}
      for=${On(this.for)}
    >
      <slot></slot>
      ${this.required?z.dy`<span class="required-indicator">*</span>`:z.Ld}
    </label> `}};Sn([N({attribute:"for"})],Mn.prototype,"for",void 0),Sn([N({attribute:"required",type:Boolean,reflect:!0})],Mn.prototype,"required",void 0),Mn=Sn([M("ne-label")],Mn);class Dn extends tt{constructor(e){if(super(e),this.it=Ze.Ld,e.type!==Qe)throw Error(this.constructor.directiveName+"() can only be used in child bindings")}render(e){if(e===Ze.Ld||null==e)return this._t=void 0,this.it=e;if(e===Ze.Jb)return e;if("string"!=typeof e)throw Error(this.constructor.directiveName+"() called with a non-string value");if(e===this.it)return this._t;this.it=e;const t=[e];return t.raw=t,this._t={_$litType$:this.constructor.resultType,strings:t,values:[]}}}Dn.directiveName="unsafeHTML",Dn.resultType=1;et(Dn);class Nn extends Dn{}Nn.directiveName="unsafeSVG",Nn.resultType=2;const Pn=et(Nn);var Ln,Fn;!function(e){e.large="large",e.medium="medium",e.small="small"}(Ln||(Ln={})),function(e){e.light="light",e.regular="regular"}(Fn||(Fn={}));const Rn=[z.iv`
  * {
  --ne-spinner-sizing-large: var(--ne-ref-sizing-12, 4em);
  --ne-spinner-sizing-medium: var(--ne-ref-sizing-11, 3em);
  --ne-spinner-sizing-small: var(--ne-ref-sizing-04, 1em);
  --ne-spinner-gap: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-spinner-color-dark-left: var(--ne-ref-color-grey-90, #161718);
  --ne-spinner-color-dark-right: var(--ne-ref-color-grey-50, #6D7379);
  --ne-spinner-color-dark-text: var(--ne-ref-color-grey-90, #161718);
  --ne-spinner-color-light-right: var(--ne-ref-color-grey-20, #C4C7CA);
  --ne-spinner-color-light-left: var(--ne-ref-color-white, #ffffff);
  --ne-spinner-color-light-text: var(--ne-ref-color-white, #ffffff);
  --ne-spinner-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-spinner-font-size-large: var(--ne-ref-font-size-06, 1.125em);
  --ne-spinner-font-size-medium: var(--ne-ref-font-size-04, 0.875em);
  --ne-spinner-font-size-small: var(--ne-ref-font-size-02, 0.75em);
}
`,z.iv`
  @keyframes middle {
    0% {
      opacity: 0;
    }

    32% {
      opacity: 0;
    }

    50% {
      opacity: 1;
    }

    100% {
      opacity: 1;
    }
  }

  @keyframes second {
    0% {
      opacity: 0;
    }

    24% {
      opacity: 0;
    }

    32% {
      opacity: 0.9;
    }

    40% {
      opacity: 0;
    }

    100% {
      opacity: 0;
    }
  }

  @keyframes third {
    0% {
      opacity: 0;
    }

    16% {
      opacity: 0;
    }

    24% {
      opacity: 0.8;
    }

    40% {
      opacity: 0;
    }

    100% {
      opacity: 0;
    }
  }

  @keyframes forth {
    0% {
      opacity: 0;
    }

    8% {
      opacity: 0.7;
    }

    24% {
      opacity: 0;
    }

    100% {
      opacity: 0;
    }
  }

  @keyframes fifth {
    0% {
      opacity: 0.6;
    }

    10% {
      opacity: 0;
    }

    100% {
      opacity: 0;
    }
  }

  .ne-spinner {
    color: var(--ne-spinner-color-dark-text);
  }

  .ne-spinner-status {
    margin: 1em;
    font-size: var(--ne-spinner-font-size-large);
    text-align: center;
    font-family: var(--ne-spinner-font-family);
  }

  .ne-spinner-container {
    width: 100%;
    position: relative;
    display: flex;
    align-items: center;
  }

  .ne-spinner-container-large {
    flex-direction: column;
  }

  .ne-spinner-container-center {
    justify-content: center;
  }

  .ne-icon {
    fill: currentcolor;
    vertical-align: top;
    pointer-events: none;
  }

  .ne-nintex-spinner .ne-icon {
    height: var(--ne-spinner-sizing-large);
    width: var(--ne-spinner-sizing-large);
  }

  .ne-nintex-spinner > div {
    display: inline-block;
  }

  .ne-nintex-spinner-middle {
    animation-name: middle;
    position: relative;
  }

  .ne-nintex-spinner-left {
    position: absolute;
  }

  .ne-nintex-spinner-trail-left,
  .ne-nintex-spinner-trail-right {
    margin: 0 -8px;
  }

  .ne-nintex-spinner-trail-left,
  .ne-nintex-spinner-left {
    color: var(--ne-spinner-color-dark-left);
  }

  .ne-nintex-spinner-trail-right,
  .ne-nintex-spinner-right {
    color: var(--ne-spinner-color-dark-right);
  }

  .ne-nintex-spinner-middle,
  .ne-nintex-spinner-second,
  .ne-nintex-spinner-third,
  .ne-nintex-spinner-forth,
  .ne-nintex-spinner-fifth {
    animation-duration: 2000ms;
    transform-origin: center;
    animation-iteration-count: infinite;
    animation-timing-function: ease-in-out;
  }

  .ne-nintex-spinner-second {
    animation-name: second;
  }

  .ne-nintex-spinner-third {
    animation-name: third;
  }

  .ne-nintex-spinner-forth {
    animation-name: forth;
  }

  .ne-nintex-spinner-fifth {
    animation-name: fifth;
  }

  .ne-nintex-spinner-small {
    padding: 0;
  }

  .ne-nintex-spinner-small .ne-icon {
    height: var(--ne-spinner-sizing-small);
    width: var(--ne-spinner-sizing-small);
  }

  .ne-nintex-spinner-small .ne-nintex-spinner-trail-left,
  .ne-nintex-spinner-small .ne-nintex-spinner-trail-right {
    margin: 0 -2px;
  }

  .ne-nintex-spinner-small .ne-spinner-status {
    font-size: var(--ne-spinner-font-size-small);
    margin: 0;
  }

  .ne-nintex-spinner-medium .ne-icon {
    height: var(--ne-spinner-sizing-medium);
    width: var(--ne-spinner-sizing-medium);
  }

  .ne-nintex-spinner-medium .ne-nintex-spinner-trail-left,
  .ne-nintex-spinner-medium .ne-nintex-spinner-trail-right {
    margin: 0 -6px;
  }

  .ne-nintex-spinner-medium .ne-spinner-status {
    font-size: var(--ne-spinner-font-size-medium);
    margin: 0.875em;
  }

  .ne-spinner-theme-light .ne-nintex-spinner-trail-left,
  .ne-spinner-theme-light .ne-nintex-spinner-trail-right {
    color: var(--ne-spinner-color-light-right);
  }

  .ne-spinner-theme-light .ne-nintex-spinner-left {
    color: var(--ne-spinner-color-light-left);
  }

  .ne-spinner-theme-light .ne-nintex-spinner-trail-right,
  .ne-spinner-theme-light .ne-nintex-spinner-right {
    color: var(--ne-spinner-color-light-right);
  }

  .ne-spinner-theme-light .ne-spinner-status {
    color: var(--ne-spinner-color-light-text);
  }
`,Tn],jn='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 34" width="1em" height="1em" class="ne-icon__logos-nintex-x-loader-left ne-icon ne-icon-inline"><path d="M24 17L7.01 34 0 26.99 9.98 17 0 7.01 7.01 0 24 17z"></path></svg>',Hn='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 34" width="1em" height="1em" class="ne-icon__logos-nintex-x-loader-right ne-icon ne-icon-inline"><path d="M14.02 16.99L24 26.98l-7.01 7L0 16.99 16.99 0 24 7.01l-9.98 9.98z"></path></svg>';let In=class extends z.oi{constructor(){super(...arguments),this.size=Ln.medium,this.theme=Fn.regular}static get styles(){return Rn}render(){const e=z.dy`<div
      class=${mt({"ne-nintex-spinner ne-spinner":!0,"ne-nintex-spinner-small":this.size===Ln.small,"ne-nintex-spinner-medium":this.size===Ln.medium,"ne-nintex-spinner-large":this.size===Ln.large,"ne-spinner-theme-light":this.theme===Fn.light,"ne-spinner-theme-regular":this.theme===Fn.regular})}
    >
      <div class="ne-nintex-spinner-trail-left ne-nintex-spinner-fifth">
        ${Pn(jn)}
      </div>
      <div class="ne-nintex-spinner-trail-left ne-nintex-spinner-forth">
        ${Pn(jn)}
      </div>
      <div class="ne-nintex-spinner-trail-left ne-nintex-spinner-third">
        ${Pn(jn)}
      </div>
      <div class="ne-nintex-spinner-trail-left ne-nintex-spinner-second">
        ${Pn(jn)}
      </div>
      <div class="ne-nintex-spinner-middle">
        ${Pn('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 34 34" width="1em" height="1em" class="ne-icon__logos-nintex-x-loader-center-left ne-icon ne-icon-inline ne-nintex-spinner-left"><path d="M24.01 17l-17 17L0 26.99 9.99 17 0 7.01 7.01 0l17 17z"></path></svg>')} ${Pn('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 34 34" width="1em" height="1em" class="ne-icon__logos-nintex-x-loader-center-right ne-icon ne-icon-inline ne-nintex-spinner-right"><path d="M24.01 17L34 26.99 26.99 34l-17-17 17-17L34 7.01 24.01 17z"></path></svg>')}
      </div>
      <div class="ne-nintex-spinner-trail-right ne-nintex-spinner-second">
        ${Pn(Hn)}
      </div>
      <div class="ne-nintex-spinner-trail-right ne-nintex-spinner-third">
        ${Pn(Hn)}
      </div>
      <div class="ne-nintex-spinner-trail-right ne-nintex-spinner-forth">
        ${Pn(Hn)}
      </div>
      <div class="ne-nintex-spinner-trail-right ne-nintex-spinner-fifth">
        ${Pn(Hn)}
      </div>
      ${this.status?z.dy` <p class="ne-spinner-status" role="status">${this.status}</p> `:z.dy`
            <p class="ne-spinner-status visually-hidden" role="status">
              ${this.defaultStatus}
            </p>
          `}
    </div>`;return this.wrapped?z.dy`<div class="ne-spinner-container ne-spinner-container-center">
      ${e}
    </div>`:z.dy`${e}`}};Sn([N({type:String,attribute:"default-status"})],In.prototype,"defaultStatus",void 0),Sn([N({type:String,attribute:"size",reflect:!0})],In.prototype,"size",void 0),Sn([N({type:String,attribute:"status",reflect:!0})],In.prototype,"status",void 0),Sn([N({type:String,reflect:!0})],In.prototype,"theme",void 0),Sn([N({type:Boolean,reflect:!0})],In.prototype,"wrapped",void 0),In=Sn([M("ne-spinner")],In);class Un{}const qn=new WeakMap,Vn=et(class extends lt{render(e){return Ze.Ld}update(e,[t]){var n;const r=t!==this.Y;return r&&void 0!==this.Y&&this.rt(void 0),(r||this.lt!==this.ct)&&(this.Y=t,this.dt=null===(n=e.options)||void 0===n?void 0:n.host,this.rt(this.ct=e.element)),Ze.Ld}rt(e){var t;if("function"==typeof this.Y){const n=null!==(t=this.dt)&&void 0!==t?t:globalThis;let r=qn.get(n);void 0===r&&(r=new WeakMap,qn.set(n,r)),void 0!==r.get(this.Y)&&this.Y.call(this.dt,void 0),r.set(this.Y,e),void 0!==e&&this.Y.call(this.dt,e)}else this.Y.value=e}get lt(){var e,t,n;return"function"==typeof this.Y?null===(t=qn.get(null!==(e=this.dt)&&void 0!==e?e:globalThis))||void 0===t?void 0:t.get(this.Y):null===(n=this.Y)||void 0===n?void 0:n.value}disconnected(){this.lt===this.ct&&this.rt(void 0)}reconnected(){this.rt(this.ct)}}),Wn=[z.iv`
  .outer-wrapper {
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    display: grid;
    grid-template-columns: auto;
    grid-template-rows: auto;
    justify-items: center;
    align-items: center;
    justify-content: center;
    align-content: center;
    z-index: 9000;
  }

  .outer-wrapper.hide {
    display: none;
  }

  .backdrop {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    /* stylelint-disable-next-line color-function-notation */
    background-color: rgba(109, 115, 121, 60%);
    z-index: -1;
  }

  dialog {
    background-color: transparent;
    border: none;
    padding: 0;
  }

  .spinner-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100%;
  }
`,Tn];let Kn=class extends z.oi{constructor(){super(...arguments),this._dialogElem=new Un,this.show=!0,this.delay=0,this.size=Ln.medium,this.theme=Fn.regular,this._showSetTimeout=0,this._isShowOverLay=!1}static get styles(){return Wn}render(){return z.dy`<div
      class=${mt({"outer-wrapper":!0,hide:!this._isShowOverLay})}
    >
      <div class="backdrop"></div>
      <dialog aria-modal="true" ${Vn(this._dialogElem)}>
        <div class="spinner-wrapper">
          <ne-spinner
            .status=${this.status}
            theme=${this.theme}
            .size=${this.size}
          ></ne-spinner>
        </div>
      </dialog>
    </div>`}updated(e){e.has("show")&&(this._showSetTimeout&&window.clearTimeout(this._showSetTimeout),this.show?this.delay>0?this._showSetTimeout=window.setTimeout((()=>{this._isShowOverLay=!0,this._dialogElem.value.show()}),this.delay):(this._isShowOverLay=!0,this._dialogElem.value.show()):(this._isShowOverLay=!1,this._dialogElem.value.close()))}};Sn([N({type:Boolean,reflect:!0})],Kn.prototype,"show",void 0),Sn([N({type:Number,attribute:"status-delay"})],Kn.prototype,"delay",void 0),Sn([N({type:String,attribute:"size"})],Kn.prototype,"size",void 0),Sn([N({type:String,attribute:"status"})],Kn.prototype,"status",void 0),Sn([N({type:String})],Kn.prototype,"theme",void 0),Sn([P()],Kn.prototype,"_showSetTimeout",void 0),Sn([P()],Kn.prototype,"_isShowOverLay",void 0),Kn=Sn([M("ne-status-overlay")],Kn);const Yn=z.iv`
  * {
  --ne-table-padding-vertical: var(--ne-ref-spacing-small, 0.75em);
  --ne-table-padding-horizontal: var(--ne-ref-spacing-small, 0.75em);
  --ne-table-color-border: var(--ne-ref-color-grey-10, #E2E3E4);
  --ne-table-color-column-header-background-focus: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-table-color-column-header-background-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-table-color-column-header-text: var(--ne-ref-color-grey-60, #575C61);
  --ne-table-color-column-header-icon-sorted-default: var(--ne-ref-color-grey-90, #161718);
  --ne-table-color-column-header-icon-sorted-hover: var(--ne-ref-color-blue-60, #006BD6);
  --ne-table-color-column-header-icon-sorted-focus: var(--ne-ref-color-blue-60, #006BD6);
  --ne-table-color-column-header-border-focus: var(--ne-ref-color-blue-20, #A3D1FF);
  --ne-table-column-header-icon: var(--ne-ref-sizing-04, 1em);
  --ne-table-column-header-gap: var(--ne-ref-spacing-xx-small, 0.25em);
  --ne-table-font-family-column-header: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-table-font-weight-column-header: var(--ne-ref-font-weight-bold, Bold);
  --ne-table-font-size-column-header: var(--ne-ref-font-size-04, 0.875em);
  --ne-table-border-width-column-header-default: var(--ne-ref-border-width-small, 1px);
  --ne-table-border-width-column-header-focus: var(--ne-ref-border-width-large, 4px);
}
`,Jn=[z.iv`
  label {
    display: flex;
    flex-direction: row;
    align-items: center;
    color: var(--ne-table-color-column-header-text);
    font-family: var(--ne-table-font-family-column-header);
    font-weight: var(--ne-table-font-weight-column-header);
    font-size: var(--ne-table-font-size-column-header);
  }

  label:focus {
    outline: none;
  }
`,Tn,Yn];let Zn=class extends z.oi{static get styles(){return Jn}render(){return z.dy`<label id=${On(this.id)}>
      <slot></slot>
    </label>`}};Zn=Sn([M("ne-theader")],Zn);const Gn=Symbol.for(""),Xn=e=>{if((null==e?void 0:e.r)===Gn)return null==e?void 0:e._$litStatic$},Qn=new Map,er=e=>(t,...n)=>{const r=n.length;let o,i;const s=[],a=[];let l,c=0,d=!1;for(;c<r;){for(l=t[c];c<r&&void 0!==(i=n[c],o=Xn(i));)l+=o+t[++c],d=!0;a.push(i),s.push(l),c++}if(c===r&&s.push(t[r]),d){const e=s.join("$$lit$$");void 0===(t=Qn.get(e))&&(s.raw=s,Qn.set(e,t=s)),n=a}return e(t,...n)},tr=er(Ze.dy),nr=(er(Ze.YP),[Tn,z.iv`
  :host {
    display: block;
    position: relative;
  }

  table {
    width: 100%;
  }

  td,
  th {
    box-sizing: border-box;
    padding: var(--ne-table-padding-vertical) var(--ne-table-padding-horizontal);
    font-size: var(--ne-table-font-size-column-header);
    border-bottom: 1px solid var(--ne-table-color-border);
  }

  th {
    text-align: left;
  }

  tbody tr:hover {
    background-color: var(--ne-table-color-column-header-background-hover);
  }

  tbody tr:has(:focus) {
    background-color: var(--ne-table-color-column-header-background-focus);
  }
`,Yn]);let rr=class extends z.oi{constructor(){super(...arguments),this._events=[],this.data=[],this._hasHeadTemplate=!1,this._hasRowTemplate=!1}static get styles(){return nr}addEventListener(e,t,n){-1===this._events.indexOf(e)&&this._events.push(e),super.addEventListener(e,t,n)}_onHeadTemplateSlotChange(){this._hasHeadTemplate=this._headTemplate.length>0}_onRowTemplateSlotChange(){this._hasRowTemplate=this._rowTemplate.length>0}render(){return z.dy`
      <slot
        name="head"
        @slotchange=${()=>this._onHeadTemplateSlotChange()}
      ></slot>
      <slot
        name="row"
        @slotchange=${()=>this._onRowTemplateSlotChange()}
      ></slot>
      <table part="table">
        <thead>
          <tr>
            ${this._renderHeadData()}
          </tr>
        </thead>
        <tbody>
          ${this.data.map(((e,t)=>z.dy`
              <tr>
                ${this._renderRowData(e,t)}
              </tr>
            `))}
        </tbody>
      </table>
    `}_renderHeadData(){if(this._hasHeadTemplate){const e=this._headTemplate[0].content;return Array.from(e.children).map(((e,t)=>{const n=document.createElement(e.tagName);this._bindHeaderEvents(n,t),this._bindHeader(n,e);const r=e.getAttribute("data-width");return r?tr`<th width="${r}">${n}</th>`:tr`<th>${n}</th>`}))}return null}_renderRowData(e,t){if(this._hasRowTemplate){const n=this._rowTemplate[0].content;return Array.from(n.children).map(((n,r)=>{const o=document.createElement(n.tagName);return this._bindEvents(o,t,r,e),this._bindControl(o,n,e),tr`<td>${o}</td>`}))}return null}_bindEvents(e,t,n,r){for(const o of this._events)e.addEventListener(o,(i=>{if(!(i instanceof CustomEvent&&i.detail&&"number"==typeof i.detail.row&&"number"==typeof i.detail.column)){i.preventDefault(),i.stopPropagation();const s={row:t,column:n,data:JSON.parse(JSON.stringify(r)),originalEvent:i},a=new CustomEvent(o,{composed:!0,bubbles:!0,detail:s});e.dispatchEvent(a)}}))}_bindControl(e,t,n){const r=/^{{.+}}$/;t.getAttributeNames().forEach((o=>{const i=t.getAttribute(o);i&&(o.startsWith(".")?i.match(r)?e[o.substring(1)]=n[i.replace(/^{{/,"").replace(/}}$/,"")]:e[o.substring(1)]=i:i.match(r)?e.setAttribute(o,n[i.replace(/^{{/,"").replace(/}}$/,"")]):e.setAttribute(o,i))})),t.textContent?.match(r)?e.textContent=n[t.textContent.replace(/^{{/,"").replace(/}}$/,"")]:e.textContent=t.textContent}_bindHeaderEvents(e,t){for(const n of this._events)e.addEventListener(n,(r=>{if(!(r instanceof CustomEvent&&r.detail&&"number"==typeof r.detail.column)){r.preventDefault(),r.stopPropagation();const o=new CustomEvent(n,{composed:!0,bubbles:!0,detail:{column:t,originalEvent:r}});e.dispatchEvent(o)}}))}_bindHeader(e,t){t.getAttributeNames().forEach((n=>{const r=t.getAttribute(n);r&&(n.startsWith(".")?e[n.substring(1)]=r:e.setAttribute(n,r))})),e.innerHTML=t.innerHTML}};Sn([N({type:Array,reflect:!1})],rr.prototype,"data",void 0),Sn([j({slot:"head"})],rr.prototype,"_headTemplate",void 0),Sn([P()],rr.prototype,"_hasHeadTemplate",void 0),Sn([j({slot:"row"})],rr.prototype,"_rowTemplate",void 0),Sn([P()],rr.prototype,"_hasRowTemplate",void 0),rr=Sn([M("ne-table")],rr);var or=function(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s};let ir=class extends(B(z.oi)){static get scopedElements(){return{"pi-list-component":vt,"pi-header":Je}}static get styles(){return We}constructor(){super(),ke.resetInstance(),$e.resetInstance(),_e.resetInstance(),Ee.resetInstance()}render(){return z.dy` <pi-header></pi-header>
      <pi-list-component></pi-list-component>`}};ir=or([M("pi-bpmn-list")],ir)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUM3QndnQixLQUFNLFNBQ0hrYyxHQUFRMThCLFVBQVcsb0JBQWdCLEdBQ3hDLEdBQVcsQ0FBQyxLQUFVMDhCLEdBQVExOEIsVUFBVyx1QkFBbUIsR0FDNUQwOEIsR0FBVSxHQUFXLENBQUMsRUFBYyxhQUFjQSwrVUN2TjNDLElBQU0yQixHQUFOLGNBQTJCemYsRUFBb0IsT0FDekNFLDRCQUNULE1BQU8sQ0FDTCxvQkFBcUJvTixHQUNyQixZQUFhakIsR0FFakIsQ0FFV3pXLG9CQUNULE9BQU9BLEVBQ1QsQ0FFQTlQLGNBQ0VvTixRQUdBNFcsR0FBWWMsZ0JBQ1pZLEdBQW9CWixnQkFDcEJqQixHQUFlaUIsZ0JBQ2ZDLEdBQWFELGVBQ2YsQ0FFQXZTLFNBQ0UsT0FBTyxJQUFJOzhDQUViLEdBekJXb25CLEdBQVksSUFEeEIsRUFBYyxpQkFDRkEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0L3dlYnBhY2svcnVudGltZS9sb2FkIHNjcmlwdCIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9zY29wZWQtY3VzdG9tLWVsZW1lbnQtcmVnaXN0cnkvc2NvcGVkLWN1c3RvbS1lbGVtZW50LXJlZ2lzdHJ5Lm1pbi5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1zdHlsZXMvZGlzdC9lYXJ0aGxpbmctYmFzZS5taW4uY3NzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uL3NvdXJjZS9nZW5lcmF0ZWQvIGxhenkgXlxcLlxcLy4qXFwuanMkIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2Nzcy10YWcuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGl0LWh0bWwuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L3JlYWN0aXZlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvbGl0LWVsZW1lbnQvbGl0LWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL0BwaS9icG1uLWxpc3Qvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3Qvd2VicGFjay9ydW50aW1lL2Vuc3VyZSBjaHVuayIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0L3dlYnBhY2svcnVudGltZS9nZXQgamF2YXNjcmlwdCBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0L3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL0BwaS9icG1uLWxpc3Qvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0L3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL0BwaS9icG1uLWxpc3Qvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQGxpdC9sb2NhbGl6ZS9pbnRlcm5hbC9zdHItdGFnLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BsaXQvbG9jYWxpemUvaW50ZXJuYWwvZGVmYXVsdC1tc2cuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQGxpdC9sb2NhbGl6ZS9pbnRlcm5hbC9kZWZlcnJlZC5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbGl0L2xvY2FsaXplL2ludGVybmFsL2xvY2FsZS1zdGF0dXMtZXZlbnQuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQGxpdC9sb2NhbGl6ZS9pbnRlcm5hbC9mbnYxYTY0LmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BsaXQvbG9jYWxpemUvaW50ZXJuYWwvaWQtZ2VuZXJhdGlvbi5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbGl0L2xvY2FsaXplL2ludGVybmFsL3J1bnRpbWUtbXNnLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BsaXQvbG9jYWxpemUvaW5pdC9ydW50aW1lLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BsaXQvbG9jYWxpemUvbGl0LWxvY2FsaXplLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi9zb3VyY2UvZ2VuZXJhdGVkL2xvY2FsZS1jb2Rlcy50cyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4vc291cmNlL2NvbW1vbi5jb25maWd1cmUudHMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG9wZW4td2MvZGVkdXBlLW1peGluL3NyYy9kZWR1cGVNaXhpbi5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9Ab3Blbi13Yy9zY29wZWQtZWxlbWVudHMvc3JjL1Njb3BlZEVsZW1lbnRzTWl4aW4uanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvY3VzdG9tLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvc3RhdGUuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvYmFzZS5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9xdWVyeS1hc3NpZ25lZC1lbGVtZW50cy5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9xdWVyeS1hc3NpZ25lZC1ub2Rlcy5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvY3JlYXRlRXJyb3JDbGFzcy5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3IuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9hcnJSZW1vdmUuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvdGltZW91dFByb3ZpZGVyLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvbm9vcC5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9Ob3RpZmljYXRpb25GYWN0b3JpZXMuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9lcnJvckNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL3JlcG9ydFVuaGFuZGxlZEVycm9yLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3N5bWJvbC9vYnNlcnZhYmxlLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9waXBlLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL09ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9PYmplY3RVbnN1YnNjcmliZWRFcnJvci5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4vc291cmNlL3NlcnZpY2VzL2RhdGEuc2VydmljZS50cyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9TdWJqZWN0LmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi9zb3VyY2Uvc2VydmljZXMvY29udGV4dC5zZXJ2aWNlLnRzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi9zb3VyY2Uvc2VydmljZXMvZXZlbnQuc2VydmljZS50cyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4vc291cmNlL3NlcnZpY2VzL3Byb2Nlc3Nlcy1hcGkuc2VydmljZS50cyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1zdHlsZXMvZGlzdC9lYXJ0aGxpbmctYmFzZS5taW4uY3NzPzAyODEiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uL3NvdXJjZS9jb21tb24uc3R5bGVzLnRzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi9zb3VyY2Uvd2ViLWNvbXBvbmVudHMvYXBwLnN0eWxlcy50cyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4vc291cmNlL2NvbW1vbi5sYW5ndWFnZS5lbi50cyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4vc291cmNlL3dlYi1jb21wb25lbnRzL3BpLWhlYWRlci9waS1oZWFkZXIuc3R5bGVzLnRzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi9zb3VyY2Uvd2ViLWNvbXBvbmVudHMvcGktaGVhZGVyL3BpLWhlYWRlci50cyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9kaXJlY3RpdmUtaGVscGVycy5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9kaXJlY3RpdmUuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvYXN5bmMtZGlyZWN0aXZlLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2RpcmVjdGl2ZXMvcHJpdmF0ZS1hc3luYy1oZWxwZXJzLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2RpcmVjdGl2ZXMvdW50aWwuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uL3NvdXJjZS93ZWItY29tcG9uZW50cy9waS1saXN0LWNvbXBvbmVudC9waS1saXN0LWNvbXBvbmVudC5zdHlsZXMudHMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uL3NvdXJjZS93ZWItY29tcG9uZW50cy9waS1saXN0LWNvbXBvbmVudC9waS1saXN0LWNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2Rpc3QvZXNtL2Jhc2Uuc3R5bGVzLTExZDM5MTgxLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2RpcmVjdGl2ZXMvY2xhc3MtbWFwLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvbm9kZV9tb2R1bGVzL2xpdC1odG1sL2xpYi9kaXJlY3RpdmUuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGliL2RvbS5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saWIvcGFydC5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saWIvdGVtcGxhdGUuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGliL3RlbXBsYXRlLWluc3RhbmNlLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvbm9kZV9tb2R1bGVzL2xpdC1odG1sL2xpYi90ZW1wbGF0ZS1yZXN1bHQuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGliL3BhcnRzLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvbm9kZV9tb2R1bGVzL2xpdC1odG1sL2xpYi9kZWZhdWx0LXRlbXBsYXRlLXByb2Nlc3Nvci5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saWIvdGVtcGxhdGUtZmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saWIvcmVuZGVyLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvbm9kZV9tb2R1bGVzL2xpdC1odG1sL2xpdC1odG1sLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvbm9kZV9tb2R1bGVzL0BvcGVuLXdjL3Njb3BlZC1lbGVtZW50cy9zcmMvQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9ub2RlX21vZHVsZXMvQG9wZW4td2Mvc2NvcGVkLWVsZW1lbnRzL3NyYy9jcmVhdGVVbmlxdWVUYWcuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9ub2RlX21vZHVsZXMvQG9wZW4td2Mvc2NvcGVkLWVsZW1lbnRzL3NyYy9nbG9iYWxUYWdzQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9ub2RlX21vZHVsZXMvQG9wZW4td2Mvc2NvcGVkLWVsZW1lbnRzL3NyYy9yZWdpc3RlckVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9ub2RlX21vZHVsZXMvQG9wZW4td2Mvc2NvcGVkLWVsZW1lbnRzL3NyYy90cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9ub2RlX21vZHVsZXMvQG9wZW4td2Mvc2NvcGVkLWVsZW1lbnRzL3NyYy9zaGFkeVRlbXBsYXRlRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL25vZGVfbW9kdWxlcy9Ab3Blbi13Yy9zY29wZWQtZWxlbWVudHMvc3JjL1Njb3BlZEVsZW1lbnRzTWl4aW4uanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS9idXR0b24udG9rZW5zLWU3OWM4YmJmLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2RpcmVjdGl2ZXMvc3R5bGUtbWFwLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vaWNvbi5iYXNlLThjYzE5MWFhLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vYnV0dG9uLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vZXZlbnRzLTExNzNmNTYyLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMtYWxwaGEvZGlzdC9lc20vYmFzZS5zdHlsZXMtMTFkMzkxODEuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvZGlyZWN0aXZlcy9pZi1kZWZpbmVkLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMtYWxwaGEvZGlzdC9lc20vbGFiZWwuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvZGlyZWN0aXZlcy91bnNhZmUtaHRtbC5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9kaXJlY3RpdmVzL3Vuc2FmZS1zdmcuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy1hbHBoYS9kaXN0L2VzbS9zcGlubmVyLm1vZGVscy01MzE0NDhjZi5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzLWFscGhhL2Rpc3QvZXNtL3NwaW5uZXIuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvZGlyZWN0aXZlcy9yZWYuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy1hbHBoYS9kaXN0L2VzbS9zdGF0dXMtb3ZlcmxheS5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzLWFscGhhL2Rpc3QvZXNtL3RhYmxlLnRva2Vucy03MWEzOTNkZC5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzLWFscGhhL2Rpc3QvZXNtL3RhYmxlLWhlYWRlci5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9zdGF0aWMuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy1hbHBoYS9kaXN0L2VzbS90YWJsZS5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4vc291cmNlL3dlYi1jb21wb25lbnRzL2FwcC5jb21wb25lbnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGluUHJvZ3Jlc3MgPSB7fTtcbnZhciBkYXRhV2VicGFja1ByZWZpeCA9IFwiQHBpL2JwbW4tbGlzdDpcIjtcbi8vIGxvYWRTY3JpcHQgZnVuY3Rpb24gdG8gbG9hZCBhIHNjcmlwdCB2aWEgc2NyaXB0IHRhZ1xuX193ZWJwYWNrX3JlcXVpcmVfXy5sID0gKHVybCwgZG9uZSwga2V5LCBjaHVua0lkKSA9PiB7XG5cdGlmKGluUHJvZ3Jlc3NbdXJsXSkgeyBpblByb2dyZXNzW3VybF0ucHVzaChkb25lKTsgcmV0dXJuOyB9XG5cdHZhciBzY3JpcHQsIG5lZWRBdHRhY2g7XG5cdGlmKGtleSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc2NyaXB0cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIHMgPSBzY3JpcHRzW2ldO1xuXHRcdFx0aWYocy5nZXRBdHRyaWJ1dGUoXCJzcmNcIikgPT0gdXJsIHx8IHMuZ2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIpID09IGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KSB7IHNjcmlwdCA9IHM7IGJyZWFrOyB9XG5cdFx0fVxuXHR9XG5cdGlmKCFzY3JpcHQpIHtcblx0XHRuZWVkQXR0YWNoID0gdHJ1ZTtcblx0XHRzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblxuXHRcdHNjcmlwdC5jaGFyc2V0ID0gJ3V0Zi04Jztcblx0XHRzY3JpcHQudGltZW91dCA9IDEyMDtcblx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5uYykge1xuXHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIF9fd2VicGFja19yZXF1aXJlX18ubmMpO1xuXHRcdH1cblx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIsIGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KTtcblx0XHRzY3JpcHQuc3JjID0gdXJsO1xuXHR9XG5cdGluUHJvZ3Jlc3NbdXJsXSA9IFtkb25lXTtcblx0dmFyIG9uU2NyaXB0Q29tcGxldGUgPSAocHJldiwgZXZlbnQpID0+IHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MgaW4gSUUuXG5cdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gbnVsbDtcblx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdFx0dmFyIGRvbmVGbnMgPSBpblByb2dyZXNzW3VybF07XG5cdFx0ZGVsZXRlIGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRzY3JpcHQucGFyZW50Tm9kZSAmJiBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuXHRcdGRvbmVGbnMgJiYgZG9uZUZucy5mb3JFYWNoKChmbikgPT4gKGZuKGV2ZW50KSkpO1xuXHRcdGlmKHByZXYpIHJldHVybiBwcmV2KGV2ZW50KTtcblx0fVxuXHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQob25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHVuZGVmaW5lZCwgeyB0eXBlOiAndGltZW91dCcsIHRhcmdldDogc2NyaXB0IH0pLCAxMjAwMDApO1xuXHRzY3JpcHQub25lcnJvciA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25lcnJvcik7XG5cdHNjcmlwdC5vbmxvYWQgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9ubG9hZCk7XG5cdG5lZWRBdHRhY2ggJiYgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xufTsiLCIoZnVuY3Rpb24oKXtcbi8qXG5cbiBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbid1c2Ugc3RyaWN0JztmdW5jdGlvbiBoKGIpe3ZhciBjPTA7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGM8Yi5sZW5ndGg/e2RvbmU6ITEsdmFsdWU6YltjKytdfTp7ZG9uZTohMH19fWZ1bmN0aW9uIGsoYil7dmFyIGM9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yJiZiW1N5bWJvbC5pdGVyYXRvcl07cmV0dXJuIGM/Yy5jYWxsKGIpOntuZXh0OmgoYil9fWZ1bmN0aW9uIG0oYil7aWYoIShiIGluc3RhbmNlb2YgQXJyYXkpKXtiPWsoYik7Zm9yKHZhciBjLGE9W107IShjPWIubmV4dCgpKS5kb25lOylhLnB1c2goYy52YWx1ZSk7Yj1hfXJldHVybiBifXZhciBuPVwiZnVuY3Rpb25cIj09dHlwZW9mIE9iamVjdC5jcmVhdGU/T2JqZWN0LmNyZWF0ZTpmdW5jdGlvbihiKXtmdW5jdGlvbiBjKCl7fWMucHJvdG90eXBlPWI7cmV0dXJuIG5ldyBjfTtcbmZ1bmN0aW9uIHAoYil7Yj1bXCJvYmplY3RcIj09dHlwZW9mIGdsb2JhbFRoaXMmJmdsb2JhbFRoaXMsYixcIm9iamVjdFwiPT10eXBlb2Ygd2luZG93JiZ3aW5kb3csXCJvYmplY3RcIj09dHlwZW9mIHNlbGYmJnNlbGYsXCJvYmplY3RcIj09dHlwZW9mIGdsb2JhbCYmZ2xvYmFsXTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoOysrYyl7dmFyIGE9YltjXTtpZihhJiZhLk1hdGg9PU1hdGgpcmV0dXJuIGF9dGhyb3cgRXJyb3IoXCJDYW5ub3QgZmluZCBnbG9iYWwgb2JqZWN0XCIpO31cbnZhciBxPXAodGhpcykscj1mdW5jdGlvbigpe2Z1bmN0aW9uIGIoKXtmdW5jdGlvbiBhKCl7fW5ldyBhO1JlZmxlY3QuY29uc3RydWN0KGEsW10sZnVuY3Rpb24oKXt9KTtyZXR1cm4gbmV3IGEgaW5zdGFuY2VvZiBhfWlmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7aWYoYigpKXJldHVybiBSZWZsZWN0LmNvbnN0cnVjdDt2YXIgYz1SZWZsZWN0LmNvbnN0cnVjdDtyZXR1cm4gZnVuY3Rpb24oYSxkLGUpe2E9YyhhLGQpO2UmJlJlZmxlY3Quc2V0UHJvdG90eXBlT2YoYSxlLnByb3RvdHlwZSk7cmV0dXJuIGF9fXJldHVybiBmdW5jdGlvbihhLGQsZSl7dm9pZCAwPT09ZSYmKGU9YSk7ZT1uKGUucHJvdG90eXBlfHxPYmplY3QucHJvdG90eXBlKTtyZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwoYSxlLGQpfHxlfX0oKSx0O1xuaWYoXCJmdW5jdGlvblwiPT10eXBlb2YgT2JqZWN0LnNldFByb3RvdHlwZU9mKXQ9T2JqZWN0LnNldFByb3RvdHlwZU9mO2Vsc2V7dmFyIHU7YTp7dmFyIHY9e2E6ITB9LHc9e307dHJ5e3cuX19wcm90b19fPXY7dT13LmE7YnJlYWsgYX1jYXRjaChiKXt9dT0hMX10PXU/ZnVuY3Rpb24oYixjKXtiLl9fcHJvdG9fXz1jO2lmKGIuX19wcm90b19fIT09Yyl0aHJvdyBuZXcgVHlwZUVycm9yKGIrXCIgaXMgbm90IGV4dGVuc2libGVcIik7cmV0dXJuIGJ9Om51bGx9dmFyIHg9dDtcbmlmKCFTaGFkb3dSb290LnByb3RvdHlwZS5jcmVhdGVFbGVtZW50KXt2YXIgeT13aW5kb3cuSFRNTEVsZW1lbnQsQT13aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lLEI9d2luZG93LmN1c3RvbUVsZW1lbnRzLmdldCxDPXdpbmRvdy5jdXN0b21FbGVtZW50cyxEPW5ldyBXZWFrTWFwLEU9bmV3IFdlYWtNYXAsRj1uZXcgV2Vha01hcCxHPW5ldyBXZWFrTWFwO3dpbmRvdy5DdXN0b21FbGVtZW50UmVnaXN0cnk9ZnVuY3Rpb24oKXt0aGlzLmw9bmV3IE1hcDt0aGlzLm89bmV3IE1hcDt0aGlzLmk9bmV3IE1hcDt0aGlzLmg9bmV3IE1hcH07d2luZG93LkN1c3RvbUVsZW1lbnRSZWdpc3RyeS5wcm90b3R5cGUuZGVmaW5lPWZ1bmN0aW9uKGIsYyl7Yj1iLnRvTG93ZXJDYXNlKCk7aWYodm9pZCAwIT09dGhpcy5qKGIpKXRocm93IG5ldyBET01FeGNlcHRpb24oXCJGYWlsZWQgdG8gZXhlY3V0ZSAnZGVmaW5lJyBvbiAnQ3VzdG9tRWxlbWVudFJlZ2lzdHJ5JzogdGhlIG5hbWUgXFxcIlwiK2IrJ1wiIGhhcyBhbHJlYWR5IGJlZW4gdXNlZCB3aXRoIHRoaXMgcmVnaXN0cnknKTtcbmlmKHZvaWQgMCE9PXRoaXMuby5nZXQoYykpdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcIkZhaWxlZCB0byBleGVjdXRlICdkZWZpbmUnIG9uICdDdXN0b21FbGVtZW50UmVnaXN0cnknOiB0aGlzIGNvbnN0cnVjdG9yIGhhcyBhbHJlYWR5IGJlZW4gdXNlZCB3aXRoIHRoaXMgcmVnaXN0cnlcIik7dmFyIGE9Yy5wcm90b3R5cGUuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrLGQ9bmV3IFNldChjLm9ic2VydmVkQXR0cmlidXRlc3x8W10pO0goYyxkLGEpO2E9e2c6Yyxjb25uZWN0ZWRDYWxsYmFjazpjLnByb3RvdHlwZS5jb25uZWN0ZWRDYWxsYmFjayxkaXNjb25uZWN0ZWRDYWxsYmFjazpjLnByb3RvdHlwZS5kaXNjb25uZWN0ZWRDYWxsYmFjayxhZG9wdGVkQ2FsbGJhY2s6Yy5wcm90b3R5cGUuYWRvcHRlZENhbGxiYWNrLGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjazphLGZvcm1Bc3NvY2lhdGVkOmMuZm9ybUFzc29jaWF0ZWQsZm9ybUFzc29jaWF0ZWRDYWxsYmFjazpjLnByb3RvdHlwZS5mb3JtQXNzb2NpYXRlZENhbGxiYWNrLFxuZm9ybURpc2FibGVkQ2FsbGJhY2s6Yy5wcm90b3R5cGUuZm9ybURpc2FibGVkQ2FsbGJhY2ssZm9ybVJlc2V0Q2FsbGJhY2s6Yy5wcm90b3R5cGUuZm9ybVJlc2V0Q2FsbGJhY2ssZm9ybVN0YXRlUmVzdG9yZUNhbGxiYWNrOmMucHJvdG90eXBlLmZvcm1TdGF0ZVJlc3RvcmVDYWxsYmFjayxvYnNlcnZlZEF0dHJpYnV0ZXM6ZH07dGhpcy5sLnNldChiLGEpO3RoaXMuby5zZXQoYyxhKTtkPUIuY2FsbChDLGIpO2R8fChkPUkoYiksQS5jYWxsKEMsYixkKSk7dGhpcz09PXdpbmRvdy5jdXN0b21FbGVtZW50cyYmKEYuc2V0KGMsYSksYS5zPWQpO2lmKGQ9dGhpcy5oLmdldChiKSl7dGhpcy5oLmRlbGV0ZShiKTtkPWsoZCk7Zm9yKHZhciBlPWQubmV4dCgpOyFlLmRvbmU7ZT1kLm5leHQoKSllPWUudmFsdWUsRS5kZWxldGUoZSksSihlLGEsITApfWE9dGhpcy5pLmdldChiKTt2b2lkIDAhPT1hJiYoYS5yZXNvbHZlKGMpLHRoaXMuaS5kZWxldGUoYikpO3JldHVybiBjfTt3aW5kb3cuQ3VzdG9tRWxlbWVudFJlZ2lzdHJ5LnByb3RvdHlwZS51cGdyYWRlPVxuZnVuY3Rpb24oKXtLLnB1c2godGhpcyk7Qy51cGdyYWRlLmFwcGx5KEMsYXJndW1lbnRzKTtLLnBvcCgpfTt3aW5kb3cuQ3VzdG9tRWxlbWVudFJlZ2lzdHJ5LnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oYil7dmFyIGM7cmV0dXJuIG51bGw9PShjPXRoaXMubC5nZXQoYikpP3ZvaWQgMDpjLmd9O3dpbmRvdy5DdXN0b21FbGVtZW50UmVnaXN0cnkucHJvdG90eXBlLmo9ZnVuY3Rpb24oYil7cmV0dXJuIHRoaXMubC5nZXQoYil9O3dpbmRvdy5DdXN0b21FbGVtZW50UmVnaXN0cnkucHJvdG90eXBlLndoZW5EZWZpbmVkPWZ1bmN0aW9uKGIpe3ZhciBjPXRoaXMuaihiKTtpZih2b2lkIDAhPT1jKXJldHVybiBQcm9taXNlLnJlc29sdmUoYy5nKTt2YXIgYT10aGlzLmkuZ2V0KGIpO3ZvaWQgMD09PWEmJihhPXt9LGEucHJvbWlzZT1uZXcgUHJvbWlzZShmdW5jdGlvbihkKXtyZXR1cm4gYS5yZXNvbHZlPWR9KSx0aGlzLmkuc2V0KGIsYSkpO3JldHVybiBhLnByb21pc2V9O3dpbmRvdy5DdXN0b21FbGVtZW50UmVnaXN0cnkucHJvdG90eXBlLm09XG5mdW5jdGlvbihiLGMsYSl7dmFyIGQ9dGhpcy5oLmdldChjKTtkfHx0aGlzLmguc2V0KGMsZD1uZXcgU2V0KTthP2QuYWRkKGIpOmQuZGVsZXRlKGIpfTt2YXIgTDt3aW5kb3cuSFRNTEVsZW1lbnQ9ZnVuY3Rpb24oKXt2YXIgYj1MO2lmKGIpcmV0dXJuIEw9dm9pZCAwLGI7dmFyIGM9Ri5nZXQodGhpcy5jb25zdHJ1Y3Rvcik7aWYoIWMpdGhyb3cgbmV3IFR5cGVFcnJvcihcIklsbGVnYWwgY29uc3RydWN0b3IgKGN1c3RvbSBlbGVtZW50IGNsYXNzIG11c3QgYmUgcmVnaXN0ZXJlZCB3aXRoIGdsb2JhbCBjdXN0b21FbGVtZW50cyByZWdpc3RyeSB0byBiZSBuZXdhYmxlKVwiKTtiPVJlZmxlY3QuY29uc3RydWN0KHksW10sYy5zKTtPYmplY3Quc2V0UHJvdG90eXBlT2YoYix0aGlzLmNvbnN0cnVjdG9yLnByb3RvdHlwZSk7RC5zZXQoYixjKTtyZXR1cm4gYn07d2luZG93LkhUTUxFbGVtZW50LnByb3RvdHlwZT15LnByb3RvdHlwZTt2YXIgST1mdW5jdGlvbihiKXtmdW5jdGlvbiBjKCl7dmFyIGE9XG5SZWZsZWN0LmNvbnN0cnVjdCh5LFtdLHRoaXMuY29uc3RydWN0b3IpO09iamVjdC5zZXRQcm90b3R5cGVPZihhLEhUTUxFbGVtZW50LnByb3RvdHlwZSk7YTp7dmFyIGQ9YS5nZXRSb290Tm9kZSgpO2lmKCEoZD09PWRvY3VtZW50fHxkIGluc3RhbmNlb2YgU2hhZG93Um9vdCkpe2Q9S1tLLmxlbmd0aC0xXTtpZihkIGluc3RhbmNlb2YgQ3VzdG9tRWxlbWVudFJlZ2lzdHJ5KXt2YXIgZT1kO2JyZWFrIGF9ZD1kLmdldFJvb3ROb2RlKCk7ZD09PWRvY3VtZW50fHxkIGluc3RhbmNlb2YgU2hhZG93Um9vdHx8KGQ9KG51bGw9PShlPUcuZ2V0KGQpKT92b2lkIDA6ZS5nZXRSb290Tm9kZSgpKXx8ZG9jdW1lbnQpfWU9ZC5jdXN0b21FbGVtZW50c31lPWV8fHdpbmRvdy5jdXN0b21FbGVtZW50czsoZD1lLmooYikpP0ooYSxkKTpFLnNldChhLGUpO3JldHVybiBhfXEuT2JqZWN0LmRlZmluZVByb3BlcnR5KGMsXCJmb3JtQXNzb2NpYXRlZFwiLHtjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCxcbmdldDpmdW5jdGlvbigpe3JldHVybiEwfX0pO2MucHJvdG90eXBlLmNvbm5lY3RlZENhbGxiYWNrPWZ1bmN0aW9uKCl7dmFyIGE9RC5nZXQodGhpcyk7YT9hLmNvbm5lY3RlZENhbGxiYWNrJiZhLmNvbm5lY3RlZENhbGxiYWNrLmFwcGx5KHRoaXMsYXJndW1lbnRzKTpFLmdldCh0aGlzKS5tKHRoaXMsYiwhMCl9O2MucHJvdG90eXBlLmRpc2Nvbm5lY3RlZENhbGxiYWNrPWZ1bmN0aW9uKCl7dmFyIGE9RC5nZXQodGhpcyk7YT9hLmRpc2Nvbm5lY3RlZENhbGxiYWNrJiZhLmRpc2Nvbm5lY3RlZENhbGxiYWNrLmFwcGx5KHRoaXMsYXJndW1lbnRzKTpFLmdldCh0aGlzKS5tKHRoaXMsYiwhMSl9O2MucHJvdG90eXBlLmFkb3B0ZWRDYWxsYmFjaz1mdW5jdGlvbigpe3ZhciBhLGQ7bnVsbD09KGE9RC5nZXQodGhpcykpfHxudWxsPT0oZD1hLmFkb3B0ZWRDYWxsYmFjayl8fGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfTtjLnByb3RvdHlwZS5mb3JtQXNzb2NpYXRlZENhbGxiYWNrPWZ1bmN0aW9uKCl7dmFyIGE9XG5ELmdldCh0aGlzKTtpZihhJiZhLmZvcm1Bc3NvY2lhdGVkKXt2YXIgZDtudWxsPT1hfHxudWxsPT0oZD1hLmZvcm1Bc3NvY2lhdGVkQ2FsbGJhY2spfHxkLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19O2MucHJvdG90eXBlLmZvcm1EaXNhYmxlZENhbGxiYWNrPWZ1bmN0aW9uKCl7dmFyIGE9RC5nZXQodGhpcyk7aWYobnVsbD09YT8wOmEuZm9ybUFzc29jaWF0ZWQpe3ZhciBkO251bGw9PWF8fG51bGw9PShkPWEuZm9ybURpc2FibGVkQ2FsbGJhY2spfHxkLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19O2MucHJvdG90eXBlLmZvcm1SZXNldENhbGxiYWNrPWZ1bmN0aW9uKCl7dmFyIGE9RC5nZXQodGhpcyk7aWYobnVsbD09YT8wOmEuZm9ybUFzc29jaWF0ZWQpe3ZhciBkO251bGw9PWF8fG51bGw9PShkPWEuZm9ybVJlc2V0Q2FsbGJhY2spfHxkLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19O2MucHJvdG90eXBlLmZvcm1TdGF0ZVJlc3RvcmVDYWxsYmFjaz1mdW5jdGlvbigpe3ZhciBhPUQuZ2V0KHRoaXMpO1xuaWYobnVsbD09YT8wOmEuZm9ybUFzc29jaWF0ZWQpe3ZhciBkO251bGw9PWF8fG51bGw9PShkPWEuZm9ybVN0YXRlUmVzdG9yZUNhbGxiYWNrKXx8ZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fTtyZXR1cm4gY30sSD1mdW5jdGlvbihiLGMsYSl7aWYoMCE9PWMuc2l6ZSYmdm9pZCAwIT09YSl7dmFyIGQ9Yi5wcm90b3R5cGUuc2V0QXR0cmlidXRlO2QmJihiLnByb3RvdHlwZS5zZXRBdHRyaWJ1dGU9ZnVuY3Rpb24oZixsKXtmPWYudG9Mb3dlckNhc2UoKTtpZihjLmhhcyhmKSl7dmFyIHo9dGhpcy5nZXRBdHRyaWJ1dGUoZik7ZC5jYWxsKHRoaXMsZixsKTthLmNhbGwodGhpcyxmLHosbCl9ZWxzZSBkLmNhbGwodGhpcyxmLGwpfSk7dmFyIGU9Yi5wcm90b3R5cGUucmVtb3ZlQXR0cmlidXRlO2UmJihiLnByb3RvdHlwZS5yZW1vdmVBdHRyaWJ1dGU9ZnVuY3Rpb24oZil7Zj1mLnRvTG93ZXJDYXNlKCk7aWYoYy5oYXMoZikpe3ZhciBsPXRoaXMuZ2V0QXR0cmlidXRlKGYpO2UuY2FsbCh0aGlzLFxuZik7YS5jYWxsKHRoaXMsZixsLG51bGwpfWVsc2UgZS5jYWxsKHRoaXMsZil9KTt2YXIgZz1iLnByb3RvdHlwZS50b2dnbGVBdHRyaWJ1dGU7ZyYmKGIucHJvdG90eXBlLnRvZ2dsZUF0dHJpYnV0ZT1mdW5jdGlvbihmKXtmPWYudG9Mb3dlckNhc2UoKTtpZihjLmhhcyhmKSl7dmFyIGw9dGhpcy5nZXRBdHRyaWJ1dGUoZik7Zy5jYWxsKHRoaXMsZik7dmFyIHo9dGhpcy5nZXRBdHRyaWJ1dGUoZik7YS5jYWxsKHRoaXMsZixsLHopfWVsc2UgZy5jYWxsKHRoaXMsZil9KX19LE09ZnVuY3Rpb24oYil7dmFyIGM9T2JqZWN0LmdldFByb3RvdHlwZU9mKGIpO2lmKGMhPT13aW5kb3cuSFRNTEVsZW1lbnQpcmV0dXJuIGM9PT15P09iamVjdC5zZXRQcm90b3R5cGVPZihiLHdpbmRvdy5IVE1MRWxlbWVudCk6TShjKX0sSj1mdW5jdGlvbihiLGMsYSl7YT12b2lkIDA9PT1hPyExOmE7T2JqZWN0LnNldFByb3RvdHlwZU9mKGIsYy5nLnByb3RvdHlwZSk7RC5zZXQoYixjKTtMPWI7dHJ5e25ldyBjLmd9Y2F0Y2goZCl7TShjLmcpLFxubmV3IGMuZ31jLm9ic2VydmVkQXR0cmlidXRlcy5mb3JFYWNoKGZ1bmN0aW9uKGQpe2IuaGFzQXR0cmlidXRlKGQpJiZjLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjay5jYWxsKGIsZCxudWxsLGIuZ2V0QXR0cmlidXRlKGQpKX0pO2EmJmMuY29ubmVjdGVkQ2FsbGJhY2smJmIuaXNDb25uZWN0ZWQmJmMuY29ubmVjdGVkQ2FsbGJhY2suY2FsbChiKX0sTj1FbGVtZW50LnByb3RvdHlwZS5hdHRhY2hTaGFkb3c7RWxlbWVudC5wcm90b3R5cGUuYXR0YWNoU2hhZG93PWZ1bmN0aW9uKGIpe3ZhciBjPU4uYXBwbHkodGhpcyxhcmd1bWVudHMpO2IuY3VzdG9tRWxlbWVudHMmJihjLmN1c3RvbUVsZW1lbnRzPWIuY3VzdG9tRWxlbWVudHMpO3JldHVybiBjfTt2YXIgSz1bZG9jdW1lbnRdLE89ZnVuY3Rpb24oYixjLGEpe3ZhciBkPShhP09iamVjdC5nZXRQcm90b3R5cGVPZihhKTpiLnByb3RvdHlwZSlbY107Yi5wcm90b3R5cGVbY109ZnVuY3Rpb24oKXtLLnB1c2godGhpcyk7dmFyIGU9ZC5hcHBseShhfHxcbnRoaXMsYXJndW1lbnRzKTt2b2lkIDAhPT1lJiZHLnNldChlLHRoaXMpO0sucG9wKCk7cmV0dXJuIGV9fTtPKFNoYWRvd1Jvb3QsXCJjcmVhdGVFbGVtZW50XCIsZG9jdW1lbnQpO08oU2hhZG93Um9vdCxcImltcG9ydE5vZGVcIixkb2N1bWVudCk7TyhFbGVtZW50LFwiaW5zZXJ0QWRqYWNlbnRIVE1MXCIpO3ZhciBQPWZ1bmN0aW9uKGIpe3ZhciBjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYi5wcm90b3R5cGUsXCJpbm5lckhUTUxcIik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwiaW5uZXJIVE1MXCIsT2JqZWN0LmFzc2lnbih7fSxjLHtzZXQ6ZnVuY3Rpb24oYSl7Sy5wdXNoKHRoaXMpO2Muc2V0LmNhbGwodGhpcyxhKTtLLnBvcCgpfX0pKX07UChFbGVtZW50KTtQKFNoYWRvd1Jvb3QpO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csXCJjdXN0b21FbGVtZW50c1wiLHt2YWx1ZTpuZXcgQ3VzdG9tRWxlbWVudFJlZ2lzdHJ5LGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pO1xuaWYod2luZG93LkVsZW1lbnRJbnRlcm5hbHMmJndpbmRvdy5FbGVtZW50SW50ZXJuYWxzLnByb3RvdHlwZS5zZXRGb3JtVmFsdWUpe3ZhciBRPW5ldyBXZWFrTWFwLFI9SFRNTEVsZW1lbnQucHJvdG90eXBlLmF0dGFjaEludGVybmFscyxtZXRob2RzPVtcInNldEZvcm1WYWx1ZVwiLFwic2V0VmFsaWRpdHlcIixcImNoZWNrVmFsaWRpdHlcIixcInJlcG9ydFZhbGlkaXR5XCJdO0hUTUxFbGVtZW50LnByb3RvdHlwZS5hdHRhY2hJbnRlcm5hbHM9ZnVuY3Rpb24oYil7Zm9yKHZhciBjPVtdLGE9MDthPGFyZ3VtZW50cy5sZW5ndGg7KythKWNbYV09YXJndW1lbnRzW2FdO2M9Ui5jYWxsLmFwcGx5KFIsW3RoaXNdLmNvbmNhdChtKGMpKSk7US5zZXQoYyx0aGlzKTtyZXR1cm4gY307bWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBjPXdpbmRvdy5FbGVtZW50SW50ZXJuYWxzLnByb3RvdHlwZSxhPWNbYl07Y1tiXT1mdW5jdGlvbihkKXtmb3IodmFyIGU9W10sZz0wO2c8YXJndW1lbnRzLmxlbmd0aDsrK2cpZVtnXT1cbmFyZ3VtZW50c1tnXTtnPVEuZ2V0KHRoaXMpO2lmKCEwPT09RC5nZXQoZykuZm9ybUFzc29jaWF0ZWQpbnVsbD09YXx8YS5jYWxsLmFwcGx5KGEsW3RoaXNdLmNvbmNhdChtKGUpKSk7ZWxzZSB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKFwiRmFpbGVkIHRvIGV4ZWN1dGUgXCIrYStcIiBvbiAnRWxlbWVudEludGVybmFscyc6IFRoZSB0YXJnZXQgZWxlbWVudCBpcyBub3QgYSBmb3JtLWFzc29jaWF0ZWQgY3VzdG9tIGVsZW1lbnQuXCIpO319KTt2YXIgUmFkaW9Ob2RlTGlzdD1mdW5jdGlvbihiKXt2YXIgYz1yKEFycmF5LFtdLmNvbmNhdChtKGIpKSx0aGlzLmNvbnN0cnVjdG9yKTtjLmg9YjtyZXR1cm4gY30sUz1SYWRpb05vZGVMaXN0LFQ9QXJyYXk7Uy5wcm90b3R5cGU9bihULnByb3RvdHlwZSk7Uy5wcm90b3R5cGUuY29uc3RydWN0b3I9UztpZih4KXgoUyxUKTtlbHNlIGZvcih2YXIgVSBpbiBUKWlmKFwicHJvdG90eXBlXCIhPVUpaWYoT2JqZWN0LmRlZmluZVByb3BlcnRpZXMpe3ZhciBWPVxuT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihULFUpO1YmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShTLFUsVil9ZWxzZSBTW1VdPVRbVV07Uy51PVQucHJvdG90eXBlO3EuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJhZGlvTm9kZUxpc3QucHJvdG90eXBlLFwidmFsdWVcIix7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7dmFyIGI7cmV0dXJuKG51bGw9PShiPXRoaXMuaC5maW5kKGZ1bmN0aW9uKGMpe3JldHVybiEwPT09Yy5jaGVja2VkfSkpP3ZvaWQgMDpiLnZhbHVlKXx8XCJcIn19KTt2YXIgSFRNTEZvcm1Db250cm9sc0NvbGxlY3Rpb249ZnVuY3Rpb24oYil7dmFyIGM9dGhpcyxhPW5ldyBNYXA7Yi5mb3JFYWNoKGZ1bmN0aW9uKGQsZSl7dmFyIGc9ZC5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpLGY9YS5nZXQoZyl8fFtdO2NbK2VdPWQ7Zi5wdXNoKGQpO2Euc2V0KGcsZil9KTt0aGlzLmxlbmd0aD1iLmxlbmd0aDthLmZvckVhY2goZnVuY3Rpb24oZCxlKXtkJiZcbihjW2VdPTE9PT1kLmxlbmd0aD9kWzBdOm5ldyBSYWRpb05vZGVMaXN0KGQpKX0pfTtIVE1MRm9ybUNvbnRyb2xzQ29sbGVjdGlvbi5wcm90b3R5cGUubmFtZWRJdGVtPWZ1bmN0aW9uKGIpe3JldHVybiB0aGlzW2JdfTt2YXIgVz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKEhUTUxGb3JtRWxlbWVudC5wcm90b3R5cGUsXCJlbGVtZW50c1wiKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoSFRNTEZvcm1FbGVtZW50LnByb3RvdHlwZSxcImVsZW1lbnRzXCIse2dldDpmdW5jdGlvbigpe3ZhciBiPVcuZ2V0LmNhbGwodGhpcyxbXSksYz1bXTtiPWsoYik7Zm9yKHZhciBhPWIubmV4dCgpOyFhLmRvbmU7YT1iLm5leHQoKSl7YT1hLnZhbHVlO3ZhciBkPUQuZ2V0KGEpO2QmJiEwIT09ZC5mb3JtQXNzb2NpYXRlZHx8Yy5wdXNoKGEpfXJldHVybiBuZXcgSFRNTEZvcm1Db250cm9sc0NvbGxlY3Rpb24oYyl9fSl9fTtcbn0pLmNhbGwodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnID8gZ2xvYmFsVGhpcyA6IHdpbmRvdyk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjb3BlZC1jdXN0b20tZWxlbWVudC1yZWdpc3RyeS5taW4uanMubWFwXG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiQGltcG9ydCB1cmwoaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1Nb250c2VycmF0OndnaHRAMzAwOzQwMDs1MDA7NjAwJmZhbWlseT1PcGVuK1NhbnM6aXRhbCx3Z2h0QDAsMzAwOzAsNDAwOzAsNjAwOzAsNzAwOzAsODAwOzEsNDAwJmRpc3BsYXk9c3dhcCk7XCJdKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIjpyb290ey0tbngtc2FuZC0xMDogI2Y3ZjFkZDstLW54LXdoaXRlOiAjZmZmOy0tbngteWVsbG93LTYwOiAjZTFiMjAwOy0tbngteWVsbG93LTUwOiAjZmZjZjFhOy0tbngteWVsbG93LTQwOiAjZmZkOTQ4Oy0tbngtcmVkLTYwOiAjYjgwMDAwOy0tbngtcmVkLTUwOiAjZTYwMDAwOy0tbngtcmVkLTQwOiAjZmYxZjFmOy0tbngtcmVkLTEwOiAjZmZjN2M3Oy0tbngtZ3JlZW4tNjA6ICMwMDZjMmQ7LS1ueC1ncmVlbi01MDogIzAwODczODstLW54LWdyZWVuLTQwOiAjMDBkMjU3Oy0tbngtZ3JlZW4tMTA6ICNiNmZmZDQ7LS1ueC1vcmFuZ2UtNjA6ICNmNTY5MDA7LS1ueC1ibHVlLTkwOiAjMDAxZjNkOy0tbngtYmx1ZS04MDogIzAwMzg3MDstLW54LWJsdWUtNzA6ICMwMDUyYTM7LS1ueC1ibHVlLTYwOiAjMDA2YmQ2Oy0tbngtYmx1ZS01MDogIzBhODVmZjstLW54LWJsdWUtNDA6ICMzZDllZmY7LS1ueC1ibHVlLTMwOiAjNzBiOGZmOy0tbngtYmx1ZS0yMDogI2EzZDFmZjstLW54LWJsdWUtMTA6ICNkNmViZmY7LS1ueC1ibHVlLTU6ICNmMGY3ZmY7LS1ueC12aW9sZXQtOTA6ICMyMDBjMzQ7LS1ueC12aW9sZXQtODA6ICMzZjE4Njg7LS1ueC12aW9sZXQtNzA6ICM1ZjI0OWI7LS1ueC12aW9sZXQtNjA6ICM3ZjMwY2Y7LS1ueC12aW9sZXQtNTA6ICM5ZjY0ZGI7LS1ueC12aW9sZXQtNDA6ICNiMjgzZTI7LS1ueC12aW9sZXQtMzA6ICNjNWEyZTk7LS1ueC12aW9sZXQtMjA6ICNkOWMxZjE7LS1ueC12aW9sZXQtMTA6ICNlY2UwZjg7LS1ueC1ncmV5LTkwOiAjMTYxNzE4Oy0tbngtZ3JleS04MDogIzJjMmUzMDstLW54LWdyZXktNzA6ICM0MTQ1NDg7LS1ueC1ncmV5LTYwOiAjNTc1YzYxOy0tbngtZ3JleS01MDogIzZkNzM3OTstLW54LWdyZXktNDA6ICM4OThmOTQ7LS1ueC1ncmV5LTMwOiAjYTdhYmFmOy0tbngtZ3JleS0yMDogI2M0YzdjYTstLW54LWdyZXktMTA6ICNlMmUzZTQ7LS1ueC1ncmV5LTU6ICNlZmYwZjA7LS1ueC1ncmV5LTI6ICNmYWZhZmE7LS1vdmVybGF5OiByZ2JhKDEwOSAxMTUgMTIxIDYwJSk7LS1vdmVybGF5LWxvYWRpbmc6IHJnYmEoMjUwIDI1MCAyNTAgODAlKTstLW9ubGlnaHQtaG92ZXItYmFja2dyb3VuZC1jb2xvcjogI2Y0ZjlmZjstLW9ubGlnaHQtc2VsZWN0ZWQtYmFja2dyb3VuZC1jb2xvcjogI2U4ZjNmZjstLWdsb2JhbG5hdi1iYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ueC1ibHVlLTgwKTstLWdsb2JhbG5hdi10ZXh0LWNvbG9yOiB2YXIoLS1ueC13aGl0ZSk7LS1zaWRlbmF2LWJhY2tncm91bmQtY29sb3I6IHZhcigtLW54LWdyZXktNSk7LS1ib2R5LXByaW1hcnktYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbngtZ3JleS0yKTstLWJvZHktc2Vjb25kYXJ5LWJhY2tncm91bmQtY29sb3I6IHZhcigtLW54LWdyZXktNSk7LS1jb250ZW50LWJhY2tncm91bmQtY29sb3I6IHZhcigtLW54LXdoaXRlKTstLWNvbnRlbnQtZXh0ZW5zaW9uLWJhY2tncm91bmQtY29sb3I6IHZhcigtLW54LWdyZXktMTApOy0tdG9vbGJhci1iYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ueC13aGl0ZSk7LS10b29sYmFyLXRleHQtY29sb3I6IHZhcigtLW54LWdyZXktOTApOy0tcHJpbWFyeS10ZXh0LWNvbG9yOiB2YXIoLS1ueC1ncmV5LTkwKTstLWRpc2FibGVkLXRleHQtY29sb3I6IHZhcigtLW54LWdyZXktNzApOy0tZXJyb3ItdGV4dC1jb2xvcjogdmFyKC0tbngtcmVkLTUwKTstLWRlc3RydWN0aXZlLXRleHQtY29sb3I6IHZhcigtLW54LXJlZC02MCk7LS1zdWNjZXNzLXRleHQtY29sb3I6IHZhcigtLW54LWdyZWVuLTUwKTstLWhlYWRlci10ZXh0LWNvbG9yOiB2YXIoLS1ueC1vcmFuZ2UtNjApOy0tc3ViaGVhZGVyLXRleHQtY29sb3I6IHZhcigtLW54LWdyZXktNjApOy0tcGxhY2Vob2xkZXItdGV4dC1jb2xvcjogdmFyKC0tbngtZ3JleS01MCk7LS1oeXBlcmxpbmstdGV4dC1jb2xvcjogdmFyKC0tbngtYmx1ZS02MCk7LS1oeXBlcmxpbmstZGlzYWJsZWQtdGV4dC1jb2xvcjogdmFyKC0tbngtZ3JleS03MCk7LS1ibG9jay1wcmltYXJ5LWJhY2tncm91bmQtY29sb3I6IHZhcigtLW54LWJsdWUtNjApOy0tYmxvY2stcHJpbWFyeS1ib3JkZXItY29sb3I6IHZhcigtLW54LWJsdWUtNzApOy0tYmxvY2stcHJpbWFyeS10ZXh0LWNvbG9yOiB2YXIoLS1ueC13aGl0ZSk7LS1ibG9jay1zZWNvbmRhcnktYmFja2dyb3VuZC1jb2xvcjogaHNsYSgwZGVnIDAlIDAlIDAlKTstLWJsb2NrLXNlY29uZGFyeS1ib3JkZXItY29sb3I6IGhzbGEoMGRlZyAwJSAwJSAwJSk7LS1ibG9jay1zZWNvbmRhcnktdGV4dC1jb2xvcjogdmFyKC0tbngtZ3JleS05MCk7LS1ibG9jay1zdWNjZXNzLWJhY2tncm91bmQtY29sb3I6IHZhcigtLW54LWdyZWVuLTUwKTstLWJsb2NrLXN1Y2Nlc3MtYm9yZGVyLWNvbG9yOiB2YXIoLS1ueC1ncmVlbi02MCk7LS1ibG9jay1zdWNjZXNzLXRleHQtY29sb3I6IHZhcigtLW54LXdoaXRlKTstLWJsb2NrLWVycm9yLWJhY2tncm91bmQtY29sb3I6IHZhcigtLW54LXJlZC01MCk7LS1ibG9jay1lcnJvci1ib3JkZXItY29sb3I6IHZhcigtLW54LXJlZC02MCk7LS1ibG9jay1lcnJvci10ZXh0LWNvbG9yOiB2YXIoLS1ueC13aGl0ZSk7LS1ibG9jay13YXJuaW5nLWJhY2tncm91bmQtY29sb3I6IHZhcigtLW54LXllbGxvdy01MCk7LS1ibG9jay13YXJuaW5nLWJvcmRlci1jb2xvcjogdmFyKC0tbngteWVsbG93LTYwKTstLWJsb2NrLXdhcm5pbmctdGV4dC1jb2xvcjogdmFyKC0tbngtZ3JleS05MCk7LS1idXR0b24tcHJpbWFyeS1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiAjMTQ3N2RiOy0tYnV0dG9uLXByaW1hcnktaG92ZXItdGV4dC1jb2xvcjogI2UyZWVmYTstLWJ1dHRvbi1zZWNvbmRhcnktYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbngtd2hpdGUpOy0tYnV0dG9uLXNlY29uZGFyeS1ib3JkZXItY29sb3I6IHZhcigtLW54LWdyZXktMTApOy0tYnV0dG9uLXNlY29uZGFyeS10ZXh0LWNvbG9yOiB2YXIoLS1ueC1ibHVlLTYwKTstLWJ1dHRvbi1zZWNvbmRhcnktaG92ZXItYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tb25saWdodC1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yKTstLWJ1dHRvbi1zZWNvbmRhcnktc2VsZWN0ZWQtYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tb25saWdodC1zZWxlY3RlZC1iYWNrZ3JvdW5kLWNvbG9yKTstLWJ1dHRvbi1zZWNvbmRhcnktaG92ZXItdGV4dC1jb2xvcjogIzJmODdkZjstLWJ1dHRvbi10ZXh0LWJhY2tncm91bmQtY29sb3I6IGhzbGEoMGRlZyAwJSAwJSAwJSk7LS1idXR0b24tdGV4dC1ib3JkZXItY29sb3I6IGhzbGEoMGRlZyAwJSAwJSAwJSk7LS1idXR0b24tdGV4dC10ZXh0LWNvbG9yOiB2YXIoLS1ueC1ibHVlLTYwKTstLWJ1dHRvbi10ZXh0LWhvdmVyLWJhY2tncm91bmQtY29sb3I6IHZhcigtLW9ubGlnaHQtaG92ZXItYmFja2dyb3VuZC1jb2xvcik7LS1idXR0b24tdGV4dC1ob3Zlci10ZXh0LWNvbG9yOiB2YXIoLS1zZWNvbmRhcnktYnV0dG9uLWhvdmVyLXRleHQtY29sb3IpOy0tYnV0dG9uLWRlc3RydWN0aXZlLWJhY2tncm91bmQtY29sb3I6IHZhcigtLW54LXdoaXRlKTstLWJ1dHRvbi1kZXN0cnVjdGl2ZS1ib3JkZXItY29sb3I6IHZhcigtLW54LWdyZXktMTApOy0tYnV0dG9uLWRlc3RydWN0aXZlLXRleHQtY29sb3I6IHZhcigtLW54LXJlZC01MCk7LS1idXR0b24tZGVzdHJ1Y3RpdmUtaG92ZXItYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tb25saWdodC1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yKTstLWJ1dHRvbi1kZXN0cnVjdGl2ZS1ob3Zlci10ZXh0LWNvbG9yOiB2YXIoLS1ueC1yZWQtNjApOy0tYnV0dG9uLWRpc2FibGVkLWJhY2tncm91bmQtY29sb3I6IHZhcigtLW54LWdyZXktMjApOy0tYnV0dG9uLWRpc2FibGVkLWJvcmRlci1jb2xvcjogaHNsYSgwZGVnIDAlIDAlIDAlKTstLWJ1dHRvbi1kaXNhYmxlZC10ZXh0LWNvbG9yOiB2YXIoLS1ueC1ncmV5LTcwKTstLWRpdmlkZXItbGluZS1jb2xvcjogdmFyKC0tbngtZ3JleS0xMCk7LS1pbnB1dC1iYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ueC13aGl0ZSk7LS1pbnB1dC1ib3JkZXItY29sb3I6IHZhcigtLW54LWdyZXktNDApOy0taW5wdXQtdGV4dC1jb2xvcjogdmFyKC0tcHJpbWFyeS10ZXh0LWNvbG9yKTstLWlucHV0LXBsYWNlaG9sZGVyLXRleHQtY29sb3I6IHZhcigtLXBsYWNlaG9sZGVyLXRleHQtY29sb3IpOy0taW5wdXQtZm9jdXMtYm9yZGVyLWNvbG9yOiB2YXIoLS1ueC1ibHVlLTYwKTstLWlucHV0LWVycm9yLWNvbG9yOiB2YXIoLS1ueC1yZWQtNTApOy0taW5wdXQtZXJyb3ItdGV4dC1jb2xvcjogdmFyKC0tbngtd2hpdGUpOy0taW5wdXQtd2FybmluZy1jb2xvcjogdmFyKC0tbngteWVsbG93LTUwKTstLWlucHV0LXdhcm5pbmctdGV4dC1jb2xvcjogdmFyKC0tcHJpbWFyeS10ZXh0LWNvbG9yKTstLWlucHV0LWluZm9ybWF0aW9uLWNvbG9yOiB2YXIoLS1ueC1ibHVlLTYwKTstLWlucHV0LWluZm9ybWF0aW9uLXRleHQtY29sb3I6IHZhcigtLW54LXdoaXRlKTstLWlucHV0LWRpc2FibGVkLWJhY2tncm91bmQtY29sb3I6IHZhcigtLW54LWdyZXktMjApOy0taW5wdXQtZGlzYWJsZWQtYm9yZGVyLWNvbG9yOiBoc2xhKDBkZWcgMCUgMCUgMCUpOy0taW5wdXQtZGlzYWJsZWQtdGV4dC1jb2xvcjogdmFyKC0tZGlzYWJsZWQtdGV4dC1jb2xvcik7LS1pbnB1dC14Zml4LWJhY2tncm91bmQtY29sb3I6IHZhcigtLW54LWdyZXktMjApOy0taW5wdXQteGZpeC1ib3JkZXItY29sb3I6IHZhcigtLW54LWdyZXktNDApOy0taW5wdXQteGZpeC10ZXh0LWNvbG9yOiB2YXIoLS1ueC1ncmV5LTcwKTstLWlucHV0LXBpbGxzLWJhY2tncm91bmQtY29sb3I6IHZhcigtLW54LXdoaXRlKTstLWlucHV0LXBpbGxzLWJvcmRlci1jb2xvcjogdmFyKC0tbngtZ3JleS05MCk7LS1pbnB1dC1waWxscy10ZXh0LWNvbG9yOiB2YXIoLS1ueC1ncmV5LTkwKTstLWlucHV0LWJsb2NrLXVuc2VsZWN0ZWQtYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbngtd2hpdGUpOy0taW5wdXQtYmxvY2stdW5zZWxlY3RlZC1ib3JkZXItY29sb3I6IHZhcigtLW54LWdyZXktNjApOy0taW5wdXQtYmxvY2stdW5zZWxlY3RlZC1kaXNhYmxlZC1iYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ueC13aGl0ZSk7LS1pbnB1dC1ibG9jay11bnNlbGVjdGVkLWRpc2FibGVkLWJvcmRlci1jb2xvcjogdmFyKC0tbngtZ3JleS00MCk7LS1pbnB1dC1ibG9jay1zZWxlY3RlZC1iYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ueC1ibHVlLTYwKTstLWlucHV0LWJsb2NrLXNlbGVjdGVkLWJvcmRlci1jb2xvcjogaHNsYSgwZGVnIDAlIDAlIDAlKTstLWlucHV0LWJsb2NrLXNlbGVjdGVkLWRpc2FibGVkLWJhY2tncm91bmQtY29sb3I6IHZhcigtLW54LWdyZXktNDApOy0taW5wdXQtYmxvY2stc2VsZWN0ZWQtZGlzYWJsZWQtYm9yZGVyLWNvbG9yOiBoc2xhKDBkZWcgMCUgMCUgMCUpOy0taW5wdXQtYmxvY2staG92ZXItYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tb25saWdodC1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yKTstLWxpc3QtZ3JvdXAtdGV4dC1jb2xvcjogdmFyKC0tbngtZ3JleS02MCk7LS1saXN0LWl0ZW0taG92ZXItYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tb25saWdodC1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yKTstLWxpc3QtaXRlbS1zZWxlY3RlZC1iYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1vbmxpZ2h0LXNlbGVjdGVkLWJhY2tncm91bmQtY29sb3IpOy0tbGlzdC1pdGVtLXN1YnRleHQtY29sb3I6IHZhcigtLW54LWdyZXktNTApOy0tbGlzdC1hY3Rpb24tYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tb25saWdodC1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yKTstLWxpc3QtYWN0aW9uLWJvcmRlci1jb2xvcjogdmFyKC0tbngtZ3JleS01KTstLWxpc3QtYWN0aW9uLXRleHQtY29sb3I6IHZhcigtLWh5cGVybGluay10ZXh0LWNvbG9yKTstLWdsb2JhbC1oZWFkZXItYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbngtYmx1ZS04MCl9OnJvb3R7LS1ueC1mb250LWZhbWlseS1ib2R5OiBPcGVuIFNhbnMsIGhlbHZldGljYSwgYXJpYWwsIHNhbnMtc2VyaWY7LS1ueC1mb250LWZhbWlseS1oZWFkaW5nOiBNb250c2VycmF0LCBoZWx2ZXRpY2EsIGFyaWFsLCBzYW5zLXNlcmlmfTpyb290ey0tbmUtcmVmLWNvbG9yLXZpb2xldC0yMDogI0Q5QzFGMTstLW5lLXJlZi1jb2xvci12aW9sZXQtNjA6ICM3RjMwQ0Y7LS1uZS1yZWYtY29sb3ItZ3JleS05MC0yMDogIzE2MTcxODIwOy0tbmUtcmVmLWNvbG9yLWdyZWVuLTQwOiAjMDBEMjU3Oy0tbmUtcmVmLWNvbG9yLWdyZWVuLTUwOiAjMDA4NzM4Oy0tbmUtcmVmLWNvbG9yLWdyZWVuLTYwOiAjMDA2YzJkOy0tbmUtcmVmLWNvbG9yLXllbGxvdy02MDogI0UxQjIwMDstLW5lLXJlZi1jb2xvci15ZWxsb3ctNTA6ICNGRkNGMUE7LS1uZS1yZWYtY29sb3IteWVsbG93LTQwOiAjRkZEOTQ4Oy0tbmUtcmVmLWNvbG9yLXllbGxvdy0xMDogI0ZGRjVEMTstLW5lLXJlZi1jb2xvci1ncmV5LTAyOiAjRkFGQUZBOy0tbmUtcmVmLWNvbG9yLWdyZXktMDU6ICNFRkYwRjA7LS1uZS1yZWYtY29sb3ItZ3JleS0xMDogI0UyRTNFNDstLW5lLXJlZi1jb2xvci1ncmV5LTIwOiAjQzRDN0NBOy0tbmUtcmVmLWNvbG9yLWdyZXktMzA6ICNBN0FCQUY7LS1uZS1yZWYtY29sb3ItZ3JleTQwOiAjODk4Rjk0Oy0tbmUtcmVmLWNvbG9yLWdyZXktNTA6ICM2RDczNzk7LS1uZS1yZWYtY29sb3ItZ3JleS02MDogIzU3NUM2MTstLW5lLXJlZi1jb2xvci1ncmV5LTcwOiAjNDE0NTQ4Oy0tbmUtcmVmLWNvbG9yLWdyZXktODA6ICMyQzJFMzA7LS1uZS1yZWYtY29sb3ItZ3JleS05MDogIzE2MTcxODstLW5lLXJlZi1jb2xvci1yZWQtMTA6ICNGRkM3Qzc7LS1uZS1yZWYtY29sb3ItcmVkLTIwOiAjRkY4RjhGOy0tbmUtcmVmLWNvbG9yLXJlZC0zMDogI0ZGNTc1NzstLW5lLXJlZi1jb2xvci1yZWQtNDA6ICNGRjFGMUY7LS1uZS1yZWYtY29sb3ItcmVkLTUwOiAjRTYwMDAwOy0tbmUtcmVmLWNvbG9yLXJlZC02MDogI0I4MDAwMDstLW5lLXJlZi1jb2xvci1yZWQtNzA6ICM3QzBEMEU7LS1uZS1yZWYtY29sb3ItcmVkLTgwOiAjNTMwOTA5Oy0tbmUtcmVmLWNvbG9yLXJlZC05MDogIzI5MDQwNTstLW5lLXJlZi1jb2xvci1ibHVlLTA1OiAjRjBGN0ZGOy0tbmUtcmVmLWNvbG9yLWJsdWUtMTA6ICNENkVCRkY7LS1uZS1yZWYtY29sb3ItYmx1ZS0yMDogI0EzRDFGRjstLW5lLXJlZi1jb2xvci1ibHVlLTMwOiAjNzBCOEZGOy0tbmUtcmVmLWNvbG9yLWJsdWUtNDA6ICMzRDlFRkY7LS1uZS1yZWYtY29sb3ItYmx1ZS01MDogIzBBODVGRjstLW5lLXJlZi1jb2xvci1ibHVlLTYwOiAjMDA2QkQ2Oy0tbmUtcmVmLWNvbG9yLWJsdWUtNzA6ICMwMDUyQTM7LS1uZS1yZWYtY29sb3ItYmx1ZS04MDogIzAwMzg3MDstLW5lLXJlZi1jb2xvci1ibHVlLTkwOiAjMDAxRjNEOy0tbmUtcmVmLWNvbG9yLW5pbnRleC1vcmFuZ2U6ICNGNTY5MDA7LS1uZS1yZWYtY29sb3Itd2hpdGU6ICNmZmZmZmZ9OnJvb3R7LS1uZS1yZWYtYm9yZGVyLXJhZGl1cy1jaXJjbGU6IDUwJTstLW5lLXJlZi1ib3JkZXItcmFkaXVzLWxhcmdlOiAwLjVlbTstLW5lLXJlZi1ib3JkZXItcmFkaXVzLW1lZGl1bTogLjI1ZW07LS1uZS1yZWYtYm9yZGVyLXJhZGl1cy1zbWFsbDogMC4xMjVlbTstLW5lLXJlZi1ib3JkZXItcmFkaXVzLW5vbmU6IDB9OnJvb3R7LS1uZS1yZWYtc3BhY2luZy14eHgtbGFyZ2U6IDNlbTstLW5lLXJlZi1zcGFjaW5nLXh4LWxhcmdlOiAyLjVlbTstLW5lLXJlZi1zcGFjaW5nLXgtbGFyZ2U6IDJlbTstLW5lLXJlZi1zcGFjaW5nLWxhcmdlOiAxLjVlbTstLW5lLXJlZi1zcGFjaW5nLW1lZGl1bTogMWVtOy0tbmUtcmVmLXNwYWNpbmctc21hbGw6IDAuNzVlbTstLW5lLXJlZi1zcGFjaW5nLXgtc21hbGw6IDAuNWVtOy0tbmUtcmVmLXNwYWNpbmcteHgtc21hbGw6IDAuMjVlbTstLW5lLXJlZi1zcGFjaW5nLXh4eC1zbWFsbDogMC4xMjVlbTstLW5lLXJlZi1zcGFjaW5nLW5vbmU6IDB9OnJvb3R7LS1uZS1yZWYtZm9udC1zaXplLTA5OiAxLjc1ZW07LS1uZS1yZWYtZm9udC1zaXplLTA4OiAxLjVlbTstLW5lLXJlZi1mb250LXNpemUtMDc6IDEuMjVlbTstLW5lLXJlZi1mb250LXNpemUtMDY6IDEuMTI1ZW07LS1uZS1yZWYtZm9udC1zaXplLTA1OiAxZW07LS1uZS1yZWYtZm9udC1zaXplLTA0OiAwLjg3NWVtOy0tbmUtcmVmLWZvbnQtc2l6ZS0wMzogMC44MTI1ZW07LS1uZS1yZWYtZm9udC1zaXplLTAyOiAwLjc1ZW07LS1uZS1yZWYtZm9udC1zaXplLTAxOiAwLjYyNWVtOy0tbmUtcmVmLWZvbnQtc2l6ZS0xMTogMi42MjVlbTstLW5lLXJlZi1mb250LXNpemUtMTA6IDJlbX06cm9vdHstLW5lLXJlZi1ib3JkZXItd2lkdGgtbGFyZ2U6IDRweDstLW5lLXJlZi1ib3JkZXItd2lkdGgtbWVkaXVtOiAycHg7LS1uZS1yZWYtYm9yZGVyLXdpZHRoLXNtYWxsOiAxcHh9OnJvb3R7LS1uZS1yZWYtc2l6aW5nLTA5OiAyLjI1ZW07LS1uZS1yZWYtc2l6aW5nLTA4OiAyZW07LS1uZS1yZWYtc2l6aW5nLTA3OiAxLjc1ZW07LS1uZS1yZWYtc2l6aW5nLTA2OiAxLjVlbTstLW5lLXJlZi1zaXppbmctMDU6IDEuMjVlbTstLW5lLXJlZi1zaXppbmctMDQ6IDFlbTstLW5lLXJlZi1zaXppbmctMDM6IDAuNzVlbTstLW5lLXJlZi1zaXppbmctMDI6IDAuNWVtOy0tbmUtcmVmLXNpemluZy0wMTogMC4yNWVtOy0tbmUtcmVmLXNpemluZy0xNDogNmVtOy0tbmUtcmVmLXNpemluZy0xMzogNWVtOy0tbmUtcmVmLXNpemluZy0xMjogNGVtOy0tbmUtcmVmLXNpemluZy0xMTogM2VtOy0tbmUtcmVmLXNpemluZy0xMDogMi41ZW19OnJvb3R7LS1uZS1yZWYtZm9udC13ZWlnaHQtYm9sZDogQm9sZDstLW5lLXJlZi1mb250LXdlaWdodC1zZW1pLWJvbGQ6IFNlbWlCb2xkOy0tbmUtcmVmLWZvbnQtd2VpZ2h0LXJlZ3VsYXI6IFJlZ3VsYXJ9OnJvb3R7LS1uZS1yZWYtZm9udC1mYW1pbHktbW9udHNlcnJhdDogTW9udHNlcnJhdDstLW5lLXJlZi1mb250LWZhbWlseS1vcGVuLXNhbnM6IE9wZW4gU2Fuc306cm9vdHstLW5lLXJlZi1saW5lLWhlaWdodC1leHBhbmRlZDogMmVtOy0tbmUtcmVmLWxpbmUtaGVpZ2h0LXJlZ3VsYXI6IDEuNWVtOy0tbmUtcmVmLWxpbmUtaGVpZ2h0LWNvbmRlbnNlZDogMS4yZW19OnJvb3R7LS1uZS1yZWYtcGFyYWdyYXBoLXNwYWNpbmctMDc6IDIuNWVtOy0tbmUtcmVmLXBhcmFncmFwaC1zcGFjaW5nLTA2OiAyLjI1ZW07LS1uZS1yZWYtcGFyYWdyYXBoLXNwYWNpbmctMDU6IDJlbTstLW5lLXJlZi1wYXJhZ3JhcGgtc3BhY2luZy0wNDogMS43NWVtOy0tbmUtcmVmLXBhcmFncmFwaC1zcGFjaW5nLTAzOiAxLjYyNWVtOy0tbmUtcmVmLXBhcmFncmFwaC1zcGFjaW5nLTAyOiAxLjVlbTstLW5lLXJlZi1wYXJhZ3JhcGgtc3BhY2luZy0wMTogMS4yNWVtfTpyb290ey0tbmUtcmVmLWxldHRlci1zcGFjaW5nLTA5OiAwLjIxZW07LS1uZS1yZWYtbGV0dGVyLXNwYWNpbmctMDg6IDAuMThlbTstLW5lLXJlZi1sZXR0ZXItc3BhY2luZy0wNzogMC4xNWVtOy0tbmUtcmVmLWxldHRlci1zcGFjaW5nLTA2OiAwLjEzNWVtOy0tbmUtcmVmLWxldHRlci1zcGFjaW5nLTA1OiAwLjEyZW07LS1uZS1yZWYtbGV0dGVyLXNwYWNpbmctMDQ6IDAuMTA1ZW07LS1uZS1yZWYtbGV0dGVyLXNwYWNpbmctMDM6IDAuMDk3NWVtOy0tbmUtcmVmLWxldHRlci1zcGFjaW5nLTAyOiAwLjA5ZW07LS1uZS1yZWYtbGV0dGVyLXNwYWNpbmctMDE6IDAuMDc1ZW07LS1uZS1yZWYtbGV0dGVyLXNwYWNpbmctMTE6IDAuMzE1ZW07LS1uZS1yZWYtbGV0dGVyLXNwYWNpbmctMTA6IDAuMjRlbX06cm9vdHstLW5lLXJlZi10ZXh0LWRlY29yYXRpb24tdW5kZXJsaW5lOiB1bmRlcmxpbmU7LS1uZS1yZWYtdGV4dC1kZWNvcmF0aW9uLW5vbmU6IG5vbmV9OnJvb3R7LS1uZS1yZWYtc2hhZG93LWxldmVsMjogMHB4IDBweCA4cHggdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktOTAtMjApOy0tbmUtcmVmLXNoYWRvdy1sZXZlbDE6IDBweCAwcHggOHB4IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTkwLTIwKX06cm9vdHstLW5lLWFsaWFzLWNvbG9yLWhpZ2hsaWdodDogdmFyKC0tbmUtcmVmLWNvbG9yLW5pbnRleC1vcmFuZ2UpOy0tbmUtYWxpYXMtY29sb3ItaWNvbi13aGl0ZTogdmFyKC0tbmUtcmVmLWNvbG9yLXdoaXRlKTstLW5lLWFsaWFzLWNvbG9yLWljb24tZGVmYXVsdDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktOTApOy0tbmUtYWxpYXMtY29sb3Itc3RhdHVzLXN1Y2Nlc3MtbGlnaHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmVlbi00MCk7LS1uZS1hbGlhcy1jb2xvci1zdGF0dXMtc3VjY2Vzcy1kZWZhdWx0OiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JlZW4tNTApOy0tbmUtYWxpYXMtY29sb3Itc3RhdHVzLXN1Y2Nlc3MtZGFyazogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZWVuLTYwKTstLW5lLWFsaWFzLWNvbG9yLXN0YXR1cy1pbmZvLWxpZ2h0OiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS01MCk7LS1uZS1hbGlhcy1jb2xvci1zdGF0dXMtaW5mby1kZWZhdWx0OiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS02MCk7LS1uZS1hbGlhcy1jb2xvci1zdGF0dXMtaW5mby1kYXJrOiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS03MCk7LS1uZS1hbGlhcy1jb2xvci1zdGF0dXMtYWN0aXZlLWxpZ2h0ZXI6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTQwKTstLW5lLWFsaWFzLWNvbG9yLXN0YXR1cy1hY3RpdmUtbGlnaHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTUwKTstLW5lLWFsaWFzLWNvbG9yLXN0YXR1cy1hY3RpdmUtZGVmYXVsdDogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtNjApOy0tbmUtYWxpYXMtY29sb3Itc3RhdHVzLXdhcm5pbmctbGlnaHQ6IHZhcigtLW5lLXJlZi1jb2xvci15ZWxsb3ctNDApOy0tbmUtYWxpYXMtY29sb3Itc3RhdHVzLXdhcm5pbmctZGVmYXVsdDogdmFyKC0tbmUtcmVmLWNvbG9yLXllbGxvdy01MCk7LS1uZS1hbGlhcy1jb2xvci1zdGF0dXMtd2FybmluZy1kYXJrOiB2YXIoLS1uZS1yZWYtY29sb3IteWVsbG93LTYwKTstLW5lLWFsaWFzLWNvbG9yLXN0YXR1cy1lcnJvci1saWdodDogdmFyKC0tbmUtcmVmLWNvbG9yLXJlZC00MCk7LS1uZS1hbGlhcy1jb2xvci1zdGF0dXMtZXJyb3ItZGVmYXVsdDogdmFyKC0tbmUtcmVmLWNvbG9yLXJlZC01MCk7LS1uZS1hbGlhcy1jb2xvci1zdGF0dXMtZXJyb3ItZGFyazogdmFyKC0tbmUtcmVmLWNvbG9yLXJlZC02MCk7LS1uZS1hbGlhcy1jb2xvci1kZXN0cnVjdGl2ZS1saWdodDogdmFyKC0tbmUtcmVmLWNvbG9yLXJlZC00MCk7LS1uZS1hbGlhcy1jb2xvci1kZXN0cnVjdGl2ZS1kZWZhdWx0OiB2YXIoLS1uZS1yZWYtY29sb3ItcmVkLTYwKTstLW5lLWFsaWFzLWNvbG9yLWRlc3RydWN0aXZlLWRhcms6IHZhcigtLW5lLXJlZi1jb2xvci1yZWQtNzApOy0tbmUtYWxpYXMtY29sb3Itc3RhdGUtZm9jdXMtb24tcmVkOiB2YXIoLS1uZS1yZWYtY29sb3ItcmVkLTcwKTstLW5lLWFsaWFzLWNvbG9yLXN0YXRlLWZvY3VzLW9uLXdoaXRlOiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS0wNSk7LS1uZS1hbGlhcy1jb2xvci1zdGF0ZS1ob3Zlci1vbi1yZWQ6IHZhcigtLW5lLXJlZi1jb2xvci1yZWQtNzApOy0tbmUtYWxpYXMtY29sb3Itc3RhdGUtaG92ZXItb24td2hpdGU6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTA1KTstLW5lLWFsaWFzLWNvbG9yLXN0YXRlLWRpc2FibGVkLWRhcms6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTkwKTstLW5lLWFsaWFzLWNvbG9yLXN0YXRlLWRpc2FibGVkLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTUwKTstLW5lLWFsaWFzLWNvbG9yLXN0YXRlLWRpc2FibGVkLWxpZ2h0OiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS0zMCk7LS1uZS1hbGlhcy1jb2xvci1hY2NlbnQtbGlnaHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTUwKTstLW5lLWFsaWFzLWNvbG9yLWFjY2VudC1kZWZhdWx0OiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS02MCk7LS1uZS1hbGlhcy1jb2xvci1hY2NlbnQtZGFyazogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtNzApOy0tbmUtYWxpYXMtY29sb3ItdGV4dC1saWdodDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktNjApOy0tbmUtYWxpYXMtY29sb3ItdGV4dC1kZWZhdWx0OiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS05MCk7LS1uZS1hbGlhcy1jb2xvci10ZXh0LWxpZ2h0LXRleHQtb24tZGFyay1iZzogdmFyKC0tbmUtcmVmLWNvbG9yLXdoaXRlKTstLW5lLWFsaWFzLWNvbG9yLXN0YXRlLWZvY3VzLW9uLWJsdWU6IHZhcigtLW5lLWFsaWFzLWNvbG9yLWFjY2VudC1kYXJrKTstLW5lLWFsaWFzLWNvbG9yLXN0YXRlLWhvdmVyLW9uLWJsdWU6IHZhcigtLW5lLWFsaWFzLWNvbG9yLWFjY2VudC1kYXJrKX06cm9vdHstLW5lLWFsaWFzLWZvbnQtZmFtaWx5LXRpdGxlOiB2YXIoLS1uZS1yZWYtZm9udC1mYW1pbHktbW9udHNlcnJhdCk7LS1uZS1hbGlhcy1mb250LWZhbWlseS1ib2R5OiB2YXIoLS1uZS1yZWYtZm9udC1mYW1pbHktb3Blbi1zYW5zKX06cm9vdHstLW5lLWFsaWFzLWZvbnQtc2l6ZS10aXRsZTogdmFyKC0tbmUtcmVmLWZvbnQtc2l6ZS0wNik7LS1uZS1hbGlhcy1mb250LXNpemUtc3VidGV4dDogdmFyKC0tbmUtcmVmLWZvbnQtc2l6ZS0wMik7LS1uZS1hbGlhcy1mb250LXNpemUtYm9keTogdmFyKC0tbmUtcmVmLWZvbnQtc2l6ZS0wNCl9OnJvb3R7LS1uZS1hbGlhcy1ib3JkZXItd2lkdGgtZm9jdXM6IHZhcigtLW5lLXJlZi1ib3JkZXItd2lkdGgtbGFyZ2UpOy0tbmUtYWxpYXMtYm9yZGVyLXdpZHRoLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1ib3JkZXItd2lkdGgtc21hbGwpfTpyb290ey0tbmUtYWxpYXMtc2l6aW5nLWljb24teHgtbGFyZ2U6IHZhcigtLW5lLXJlZi1zaXppbmctMTEpOy0tbmUtYWxpYXMtc2l6aW5nLWljb24teC1sYXJnZTogdmFyKC0tbmUtcmVmLXNpemluZy0wOCk7LS1uZS1hbGlhcy1zaXppbmctaWNvbi1sYXJnZTogdmFyKC0tbmUtcmVmLXNpemluZy0wNik7LS1uZS1hbGlhcy1zaXppbmctaWNvbi1kZWZhdWx0OiB2YXIoLS1uZS1yZWYtc2l6aW5nLTA0KTstLW5lLWFsaWFzLXNpemluZy1pY29uLXNtYWxsOiB2YXIoLS1uZS1yZWYtc2l6aW5nLTAyKX06cm9vdHstLW5lLWFsaWFzLWJvcmRlci1mb2N1czogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtMjApOy0tbmUtYWxpYXMtYm9yZGVyLWRhcmstZ3JleTogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXk0MCk7LS1uZS1hbGlhcy1ib3JkZXItZ3JleTogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktMTApfVxcblxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWVhcnRobGluZy1iYXNlLm1pbi5jc3MubWFwICovXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wiZmlsZTovLy9ob21lL3J1bm5lci93b3JrL2VhcnRobGluZy1kZXNpZ24tc3lzdGVtL2VhcnRobGluZy1kZXNpZ24tc3lzdGVtL3BhY2thZ2VzL3N0eWxlcy9zcmMvc2Nzcy90eXBvZ3JhcGh5LnNjc3NcIixcImZpbGU6Ly8vaG9tZS9ydW5uZXIvd29yay9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9wYWNrYWdlcy9zdHlsZXMvc3JjL3Njc3MvY29sb3Iuc2Nzc1wiLFwiZmlsZTovLy9ob21lL3J1bm5lci93b3JrL2VhcnRobGluZy1kZXNpZ24tc3lzdGVtL2VhcnRobGluZy1kZXNpZ24tc3lzdGVtL3BhY2thZ2VzL3N0eWxlcy9zcmMvc2Nzcy90b2tlbnMvcmVmLWNvbG9yLnNjc3NcIixcImZpbGU6Ly8vaG9tZS9ydW5uZXIvd29yay9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9wYWNrYWdlcy9zdHlsZXMvc3JjL3Njc3MvdG9rZW5zL3JlZi1ib3JkZXItcmFkaXVzLnNjc3NcIixcImZpbGU6Ly8vaG9tZS9ydW5uZXIvd29yay9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9wYWNrYWdlcy9zdHlsZXMvc3JjL3Njc3MvdG9rZW5zL3JlZi1zcGFjaW5nLnNjc3NcIixcImZpbGU6Ly8vaG9tZS9ydW5uZXIvd29yay9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9wYWNrYWdlcy9zdHlsZXMvc3JjL3Njc3MvdG9rZW5zL3JlZi1mb250LXNpemUuc2Nzc1wiLFwiZmlsZTovLy9ob21lL3J1bm5lci93b3JrL2VhcnRobGluZy1kZXNpZ24tc3lzdGVtL2VhcnRobGluZy1kZXNpZ24tc3lzdGVtL3BhY2thZ2VzL3N0eWxlcy9zcmMvc2Nzcy90b2tlbnMvcmVmLWJvcmRlci13aWR0aC5zY3NzXCIsXCJmaWxlOi8vL2hvbWUvcnVubmVyL3dvcmsvZWFydGhsaW5nLWRlc2lnbi1zeXN0ZW0vZWFydGhsaW5nLWRlc2lnbi1zeXN0ZW0vcGFja2FnZXMvc3R5bGVzL3NyYy9zY3NzL3Rva2Vucy9yZWYtc2l6aW5nLnNjc3NcIixcImZpbGU6Ly8vaG9tZS9ydW5uZXIvd29yay9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9wYWNrYWdlcy9zdHlsZXMvc3JjL3Njc3MvdG9rZW5zL3JlZi1mb250LXdlaWdodC5zY3NzXCIsXCJmaWxlOi8vL2hvbWUvcnVubmVyL3dvcmsvZWFydGhsaW5nLWRlc2lnbi1zeXN0ZW0vZWFydGhsaW5nLWRlc2lnbi1zeXN0ZW0vcGFja2FnZXMvc3R5bGVzL3NyYy9zY3NzL3Rva2Vucy9yZWYtZm9udC1mYW1pbHkuc2Nzc1wiLFwiZmlsZTovLy9ob21lL3J1bm5lci93b3JrL2VhcnRobGluZy1kZXNpZ24tc3lzdGVtL2VhcnRobGluZy1kZXNpZ24tc3lzdGVtL3BhY2thZ2VzL3N0eWxlcy9zcmMvc2Nzcy90b2tlbnMvcmVmLWxpbmUtaGVpZ2h0LnNjc3NcIixcImZpbGU6Ly8vaG9tZS9ydW5uZXIvd29yay9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9wYWNrYWdlcy9zdHlsZXMvc3JjL3Njc3MvdG9rZW5zL3JlZi1wYXJhZ3JhcGgtc3BhY2luZy5zY3NzXCIsXCJmaWxlOi8vL2hvbWUvcnVubmVyL3dvcmsvZWFydGhsaW5nLWRlc2lnbi1zeXN0ZW0vZWFydGhsaW5nLWRlc2lnbi1zeXN0ZW0vcGFja2FnZXMvc3R5bGVzL3NyYy9zY3NzL3Rva2Vucy9yZWYtbGV0dGVyLXNwYWNpbmcuc2Nzc1wiLFwiZmlsZTovLy9ob21lL3J1bm5lci93b3JrL2VhcnRobGluZy1kZXNpZ24tc3lzdGVtL2VhcnRobGluZy1kZXNpZ24tc3lzdGVtL3BhY2thZ2VzL3N0eWxlcy9zcmMvc2Nzcy90b2tlbnMvcmVmLXRleHQtZGVjb3JhdGlvbi5zY3NzXCIsXCJmaWxlOi8vL2hvbWUvcnVubmVyL3dvcmsvZWFydGhsaW5nLWRlc2lnbi1zeXN0ZW0vZWFydGhsaW5nLWRlc2lnbi1zeXN0ZW0vcGFja2FnZXMvc3R5bGVzL3NyYy9zY3NzL3Rva2Vucy9yZWYtc2hhZG93LnNjc3NcIixcImZpbGU6Ly8vaG9tZS9ydW5uZXIvd29yay9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9wYWNrYWdlcy9zdHlsZXMvc3JjL3Njc3MvdG9rZW5zL2FsaWFzLWNvbG9yLnNjc3NcIixcImZpbGU6Ly8vaG9tZS9ydW5uZXIvd29yay9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9wYWNrYWdlcy9zdHlsZXMvc3JjL3Njc3MvdG9rZW5zL2FsaWFzLWZvbnQtZmFtaWx5LnNjc3NcIixcImZpbGU6Ly8vaG9tZS9ydW5uZXIvd29yay9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9wYWNrYWdlcy9zdHlsZXMvc3JjL3Njc3MvdG9rZW5zL2FsaWFzLWZvbnQtc2l6ZS5zY3NzXCIsXCJmaWxlOi8vL2hvbWUvcnVubmVyL3dvcmsvZWFydGhsaW5nLWRlc2lnbi1zeXN0ZW0vZWFydGhsaW5nLWRlc2lnbi1zeXN0ZW0vcGFja2FnZXMvc3R5bGVzL3NyYy9zY3NzL3Rva2Vucy9hbGlhcy1ib3JkZXItd2lkdGguc2Nzc1wiLFwiZmlsZTovLy9ob21lL3J1bm5lci93b3JrL2VhcnRobGluZy1kZXNpZ24tc3lzdGVtL2VhcnRobGluZy1kZXNpZ24tc3lzdGVtL3BhY2thZ2VzL3N0eWxlcy9zcmMvc2Nzcy90b2tlbnMvYWxpYXMtc2l6aW5nLnNjc3NcIixcImZpbGU6Ly8vaG9tZS9ydW5uZXIvd29yay9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9wYWNrYWdlcy9zdHlsZXMvc3JjL3Njc3MvdG9rZW5zL2FsaWFzLWJvcmRlci5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctc3R5bGVzL2Rpc3QvZWFydGhsaW5nLWJhc2UubWluLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBUSxNQ0VOLHFCQUFBLENBQ0EsZ0JBQUEsQ0FDQSx1QkFBQSxDQUNBLHVCQUFBLENBQ0EsdUJBQUEsQ0FDQSxvQkFBQSxDQUNBLG9CQUFBLENBQ0Esb0JBQUEsQ0FDQSxvQkFBQSxDQUNBLHNCQUFBLENBQ0Esc0JBQUEsQ0FDQSxzQkFBQSxDQUNBLHNCQUFBLENBQ0EsdUJBQUEsQ0FDQSxxQkFBQSxDQUNBLHFCQUFBLENBQ0EscUJBQUEsQ0FDQSxxQkFBQSxDQUNBLHFCQUFBLENBQ0EscUJBQUEsQ0FDQSxxQkFBQSxDQUNBLHFCQUFBLENBQ0EscUJBQUEsQ0FDQSxvQkFBQSxDQUNBLHVCQUFBLENBQ0EsdUJBQUEsQ0FDQSx1QkFBQSxDQUNBLHVCQUFBLENBQ0EsdUJBQUEsQ0FDQSx1QkFBQSxDQUNBLHVCQUFBLENBQ0EsdUJBQUEsQ0FDQSx1QkFBQSxDQUNBLHFCQUFBLENBQ0EscUJBQUEsQ0FDQSxxQkFBQSxDQUNBLHFCQUFBLENBQ0EscUJBQUEsQ0FDQSxxQkFBQSxDQUNBLHFCQUFBLENBQ0EscUJBQUEsQ0FDQSxxQkFBQSxDQUNBLG9CQUFBLENBQ0Esb0JBQUEsQ0FDQSxnQ0FBQSxDQUNBLHdDQUFBLENBS0EseUNBQUEsQ0FD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QUEsQ0FDQSwwREFBQSxDQUNBLDREQUFBLENBQ0EseURBQUEsQ0FDQSx3REFBQSxDQUNBLDBEQUFBLENBQ0Esc0VBQUEsQ0FDQSx1RUFBQSxDQUNBLHVFQUFBLENDcENGLE1BQ0Usa0VBQUEsQ0FDQSxnRUFBQSxDQ0ZGLE1BQ0Usc0RBQUEsQ0FDQSx3REFBQSxDQUNBLHFEQUFBLENDSEYsTUFDRSwrREFBQSxDQUNBLGlFQUFBLENDRkYsTUFDRSx3REFBQSxDQUNBLHVEQUFBLENBQ0EscURBQUEsQ0FDQSx1REFBQSxDQUNBLHFEQUFBLENDTEYsTUFDRSxvREFBQSxDQUNBLHVEQUFBLENBQ0EsbURBQUE7O0FDTkYsaURBQWlEXCIsXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiZnVuY3Rpb24gd2VicGFja0VtcHR5QXN5bmNDb250ZXh0KHJlcSkge1xuXHQvLyBIZXJlIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKSBpcyB1c2VkIGluc3RlYWQgb2YgbmV3IFByb21pc2UoKSB0byBwcmV2ZW50XG5cdC8vIHVuY2F1Z2h0IGV4Y2VwdGlvbiBwb3BwaW5nIHVwIGluIGRldnRvb2xzXG5cdHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH0pO1xufVxud2VicGFja0VtcHR5QXN5bmNDb250ZXh0LmtleXMgPSAoKSA9PiAoW10pO1xud2VicGFja0VtcHR5QXN5bmNDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrRW1wdHlBc3luY0NvbnRleHQ7XG53ZWJwYWNrRW1wdHlBc3luY0NvbnRleHQuaWQgPSA5NjcxO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrRW1wdHlBc3luY0NvbnRleHQ7IiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5jb25zdCB0PXdpbmRvdyxlPXQuU2hhZG93Um9vdCYmKHZvaWQgMD09PXQuU2hhZHlDU1N8fHQuU2hhZHlDU1MubmF0aXZlU2hhZG93KSYmXCJhZG9wdGVkU3R5bGVTaGVldHNcImluIERvY3VtZW50LnByb3RvdHlwZSYmXCJyZXBsYWNlXCJpbiBDU1NTdHlsZVNoZWV0LnByb3RvdHlwZSxzPVN5bWJvbCgpLG49bmV3IFdlYWtNYXA7Y2xhc3Mgb3tjb25zdHJ1Y3Rvcih0LGUsbil7aWYodGhpcy5fJGNzc1Jlc3VsdCQ9ITAsbiE9PXMpdGhyb3cgRXJyb3IoXCJDU1NSZXN1bHQgaXMgbm90IGNvbnN0cnVjdGFibGUuIFVzZSBgdW5zYWZlQ1NTYCBvciBgY3NzYCBpbnN0ZWFkLlwiKTt0aGlzLmNzc1RleHQ9dCx0aGlzLnQ9ZX1nZXQgc3R5bGVTaGVldCgpe2xldCB0PXRoaXMubztjb25zdCBzPXRoaXMudDtpZihlJiZ2b2lkIDA9PT10KXtjb25zdCBlPXZvaWQgMCE9PXMmJjE9PT1zLmxlbmd0aDtlJiYodD1uLmdldChzKSksdm9pZCAwPT09dCYmKCh0aGlzLm89dD1uZXcgQ1NTU3R5bGVTaGVldCkucmVwbGFjZVN5bmModGhpcy5jc3NUZXh0KSxlJiZuLnNldChzLHQpKX1yZXR1cm4gdH10b1N0cmluZygpe3JldHVybiB0aGlzLmNzc1RleHR9fWNvbnN0IHI9dD0+bmV3IG8oXCJzdHJpbmdcIj09dHlwZW9mIHQ/dDp0K1wiXCIsdm9pZCAwLHMpLGk9KHQsLi4uZSk9Pntjb25zdCBuPTE9PT10Lmxlbmd0aD90WzBdOmUucmVkdWNlKCgoZSxzLG4pPT5lKyh0PT57aWYoITA9PT10Ll8kY3NzUmVzdWx0JClyZXR1cm4gdC5jc3NUZXh0O2lmKFwibnVtYmVyXCI9PXR5cGVvZiB0KXJldHVybiB0O3Rocm93IEVycm9yKFwiVmFsdWUgcGFzc2VkIHRvICdjc3MnIGZ1bmN0aW9uIG11c3QgYmUgYSAnY3NzJyBmdW5jdGlvbiByZXN1bHQ6IFwiK3QrXCIuIFVzZSAndW5zYWZlQ1NTJyB0byBwYXNzIG5vbi1saXRlcmFsIHZhbHVlcywgYnV0IHRha2UgY2FyZSB0byBlbnN1cmUgcGFnZSBzZWN1cml0eS5cIil9KShzKSt0W24rMV0pLHRbMF0pO3JldHVybiBuZXcgbyhuLHQscyl9LFM9KHMsbik9PntlP3MuYWRvcHRlZFN0eWxlU2hlZXRzPW4ubWFwKCh0PT50IGluc3RhbmNlb2YgQ1NTU3R5bGVTaGVldD90OnQuc3R5bGVTaGVldCkpOm4uZm9yRWFjaCgoZT0+e2NvbnN0IG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpLG89dC5saXROb25jZTt2b2lkIDAhPT1vJiZuLnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsbyksbi50ZXh0Q29udGVudD1lLmNzc1RleHQscy5hcHBlbmRDaGlsZChuKX0pKX0sYz1lP3Q9PnQ6dD0+dCBpbnN0YW5jZW9mIENTU1N0eWxlU2hlZXQ/KHQ9PntsZXQgZT1cIlwiO2Zvcihjb25zdCBzIG9mIHQuY3NzUnVsZXMpZSs9cy5jc3NUZXh0O3JldHVybiByKGUpfSkodCk6dDtleHBvcnR7byBhcyBDU1NSZXN1bHQsUyBhcyBhZG9wdFN0eWxlcyxpIGFzIGNzcyxjIGFzIGdldENvbXBhdGlibGVTdHlsZSxlIGFzIHN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cyxyIGFzIHVuc2FmZUNTU307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jc3MtdGFnLmpzLm1hcFxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG52YXIgdDtjb25zdCBpPXdpbmRvdyxzPWkudHJ1c3RlZFR5cGVzLGU9cz9zLmNyZWF0ZVBvbGljeShcImxpdC1odG1sXCIse2NyZWF0ZUhUTUw6dD0+dH0pOnZvaWQgMCxvPVwiJGxpdCRcIixuPWBsaXQkJHsoTWF0aC5yYW5kb20oKStcIlwiKS5zbGljZSg5KX0kYCxsPVwiP1wiK24saD1gPCR7bH0+YCxyPWRvY3VtZW50LGQ9KCk9PnIuY3JlYXRlQ29tbWVudChcIlwiKSx1PXQ9Pm51bGw9PT10fHxcIm9iamVjdFwiIT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdCxjPUFycmF5LmlzQXJyYXksdj10PT5jKHQpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZihudWxsPT10P3ZvaWQgMDp0W1N5bWJvbC5pdGVyYXRvcl0pLGE9XCJbIFxcdFxcblxcZlxccl1cIixmPS88KD86KCEtLXxcXC9bXmEtekEtWl0pfChcXC8/W2EtekEtWl1bXj5cXHNdKil8KFxcLz8kKSkvZyxfPS8tLT4vZyxtPS8+L2cscD1SZWdFeHAoYD58JHthfSg/OihbXlxcXFxzXCInPj0vXSspKCR7YX0qPSR7YX0qKD86W14gXFx0XFxuXFxmXFxyXCInXFxgPD49XXwoXCJ8Jyl8KSl8JClgLFwiZ1wiKSxnPS8nL2csJD0vXCIvZyx5PS9eKD86c2NyaXB0fHN0eWxlfHRleHRhcmVhfHRpdGxlKSQvaSx3PXQ9PihpLC4uLnMpPT4oe18kbGl0VHlwZSQ6dCxzdHJpbmdzOmksdmFsdWVzOnN9KSx4PXcoMSksYj13KDIpLFQ9U3ltYm9sLmZvcihcImxpdC1ub0NoYW5nZVwiKSxBPVN5bWJvbC5mb3IoXCJsaXQtbm90aGluZ1wiKSxFPW5ldyBXZWFrTWFwLEM9ci5jcmVhdGVUcmVlV2Fsa2VyKHIsMTI5LG51bGwsITEpLFA9KHQsaSk9Pntjb25zdCBzPXQubGVuZ3RoLTEsbD1bXTtsZXQgcixkPTI9PT1pP1wiPHN2Zz5cIjpcIlwiLHU9Zjtmb3IobGV0IGk9MDtpPHM7aSsrKXtjb25zdCBzPXRbaV07bGV0IGUsYyx2PS0xLGE9MDtmb3IoO2E8cy5sZW5ndGgmJih1Lmxhc3RJbmRleD1hLGM9dS5leGVjKHMpLG51bGwhPT1jKTspYT11Lmxhc3RJbmRleCx1PT09Zj9cIiEtLVwiPT09Y1sxXT91PV86dm9pZCAwIT09Y1sxXT91PW06dm9pZCAwIT09Y1syXT8oeS50ZXN0KGNbMl0pJiYocj1SZWdFeHAoXCI8L1wiK2NbMl0sXCJnXCIpKSx1PXApOnZvaWQgMCE9PWNbM10mJih1PXApOnU9PT1wP1wiPlwiPT09Y1swXT8odT1udWxsIT1yP3I6Zix2PS0xKTp2b2lkIDA9PT1jWzFdP3Y9LTI6KHY9dS5sYXN0SW5kZXgtY1syXS5sZW5ndGgsZT1jWzFdLHU9dm9pZCAwPT09Y1szXT9wOidcIic9PT1jWzNdPyQ6Zyk6dT09PSR8fHU9PT1nP3U9cDp1PT09X3x8dT09PW0/dT1mOih1PXAscj12b2lkIDApO2NvbnN0IHc9dT09PXAmJnRbaSsxXS5zdGFydHNXaXRoKFwiLz5cIik/XCIgXCI6XCJcIjtkKz11PT09Zj9zK2g6dj49MD8obC5wdXNoKGUpLHMuc2xpY2UoMCx2KStvK3Muc2xpY2Uodikrbit3KTpzK24rKC0yPT09dj8obC5wdXNoKHZvaWQgMCksaSk6dyl9Y29uc3QgYz1kKyh0W3NdfHxcIjw/PlwiKSsoMj09PWk/XCI8L3N2Zz5cIjpcIlwiKTtpZighQXJyYXkuaXNBcnJheSh0KXx8IXQuaGFzT3duUHJvcGVydHkoXCJyYXdcIikpdGhyb3cgRXJyb3IoXCJpbnZhbGlkIHRlbXBsYXRlIHN0cmluZ3MgYXJyYXlcIik7cmV0dXJuW3ZvaWQgMCE9PWU/ZS5jcmVhdGVIVE1MKGMpOmMsbF19O2NsYXNzIFZ7Y29uc3RydWN0b3Ioe3N0cmluZ3M6dCxfJGxpdFR5cGUkOml9LGUpe2xldCBoO3RoaXMucGFydHM9W107bGV0IHI9MCx1PTA7Y29uc3QgYz10Lmxlbmd0aC0xLHY9dGhpcy5wYXJ0cyxbYSxmXT1QKHQsaSk7aWYodGhpcy5lbD1WLmNyZWF0ZUVsZW1lbnQoYSxlKSxDLmN1cnJlbnROb2RlPXRoaXMuZWwuY29udGVudCwyPT09aSl7Y29uc3QgdD10aGlzLmVsLmNvbnRlbnQsaT10LmZpcnN0Q2hpbGQ7aS5yZW1vdmUoKSx0LmFwcGVuZCguLi5pLmNoaWxkTm9kZXMpfWZvcig7bnVsbCE9PShoPUMubmV4dE5vZGUoKSkmJnYubGVuZ3RoPGM7KXtpZigxPT09aC5ub2RlVHlwZSl7aWYoaC5oYXNBdHRyaWJ1dGVzKCkpe2NvbnN0IHQ9W107Zm9yKGNvbnN0IGkgb2YgaC5nZXRBdHRyaWJ1dGVOYW1lcygpKWlmKGkuZW5kc1dpdGgobyl8fGkuc3RhcnRzV2l0aChuKSl7Y29uc3Qgcz1mW3UrK107aWYodC5wdXNoKGkpLHZvaWQgMCE9PXMpe2NvbnN0IHQ9aC5nZXRBdHRyaWJ1dGUocy50b0xvd2VyQ2FzZSgpK28pLnNwbGl0KG4pLGk9LyhbLj9AXSk/KC4qKS8uZXhlYyhzKTt2LnB1c2goe3R5cGU6MSxpbmRleDpyLG5hbWU6aVsyXSxzdHJpbmdzOnQsY3RvcjpcIi5cIj09PWlbMV0/azpcIj9cIj09PWlbMV0/STpcIkBcIj09PWlbMV0/TDpSfSl9ZWxzZSB2LnB1c2goe3R5cGU6NixpbmRleDpyfSl9Zm9yKGNvbnN0IGkgb2YgdCloLnJlbW92ZUF0dHJpYnV0ZShpKX1pZih5LnRlc3QoaC50YWdOYW1lKSl7Y29uc3QgdD1oLnRleHRDb250ZW50LnNwbGl0KG4pLGk9dC5sZW5ndGgtMTtpZihpPjApe2gudGV4dENvbnRlbnQ9cz9zLmVtcHR5U2NyaXB0OlwiXCI7Zm9yKGxldCBzPTA7czxpO3MrKyloLmFwcGVuZCh0W3NdLGQoKSksQy5uZXh0Tm9kZSgpLHYucHVzaCh7dHlwZToyLGluZGV4Oisrcn0pO2guYXBwZW5kKHRbaV0sZCgpKX19fWVsc2UgaWYoOD09PWgubm9kZVR5cGUpaWYoaC5kYXRhPT09bCl2LnB1c2goe3R5cGU6MixpbmRleDpyfSk7ZWxzZXtsZXQgdD0tMTtmb3IoOy0xIT09KHQ9aC5kYXRhLmluZGV4T2Yobix0KzEpKTspdi5wdXNoKHt0eXBlOjcsaW5kZXg6cn0pLHQrPW4ubGVuZ3RoLTF9cisrfX1zdGF0aWMgY3JlYXRlRWxlbWVudCh0LGkpe2NvbnN0IHM9ci5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIik7cmV0dXJuIHMuaW5uZXJIVE1MPXQsc319ZnVuY3Rpb24gTih0LGkscz10LGUpe3ZhciBvLG4sbCxoO2lmKGk9PT1UKXJldHVybiBpO2xldCByPXZvaWQgMCE9PWU/bnVsbD09PShvPXMuXyRDbyl8fHZvaWQgMD09PW8/dm9pZCAwOm9bZV06cy5fJENsO2NvbnN0IGQ9dShpKT92b2lkIDA6aS5fJGxpdERpcmVjdGl2ZSQ7cmV0dXJuKG51bGw9PXI/dm9pZCAwOnIuY29uc3RydWN0b3IpIT09ZCYmKG51bGw9PT0obj1udWxsPT1yP3ZvaWQgMDpyLl8kQU8pfHx2b2lkIDA9PT1ufHxuLmNhbGwociwhMSksdm9pZCAwPT09ZD9yPXZvaWQgMDoocj1uZXcgZCh0KSxyLl8kQVQodCxzLGUpKSx2b2lkIDAhPT1lPyhudWxsIT09KGw9KGg9cykuXyRDbykmJnZvaWQgMCE9PWw/bDpoLl8kQ289W10pW2VdPXI6cy5fJENsPXIpLHZvaWQgMCE9PXImJihpPU4odCxyLl8kQVModCxpLnZhbHVlcykscixlKSksaX1jbGFzcyBTe2NvbnN0cnVjdG9yKHQsaSl7dGhpcy51PVtdLHRoaXMuXyRBTj12b2lkIDAsdGhpcy5fJEFEPXQsdGhpcy5fJEFNPWl9Z2V0IHBhcmVudE5vZGUoKXtyZXR1cm4gdGhpcy5fJEFNLnBhcmVudE5vZGV9Z2V0IF8kQVUoKXtyZXR1cm4gdGhpcy5fJEFNLl8kQVV9dih0KXt2YXIgaTtjb25zdHtlbDp7Y29udGVudDpzfSxwYXJ0czplfT10aGlzLl8kQUQsbz0obnVsbCE9PShpPW51bGw9PXQ/dm9pZCAwOnQuY3JlYXRpb25TY29wZSkmJnZvaWQgMCE9PWk/aTpyKS5pbXBvcnROb2RlKHMsITApO0MuY3VycmVudE5vZGU9bztsZXQgbj1DLm5leHROb2RlKCksbD0wLGg9MCxkPWVbMF07Zm9yKDt2b2lkIDAhPT1kOyl7aWYobD09PWQuaW5kZXgpe2xldCBpOzI9PT1kLnR5cGU/aT1uZXcgTShuLG4ubmV4dFNpYmxpbmcsdGhpcyx0KToxPT09ZC50eXBlP2k9bmV3IGQuY3RvcihuLGQubmFtZSxkLnN0cmluZ3MsdGhpcyx0KTo2PT09ZC50eXBlJiYoaT1uZXcgeihuLHRoaXMsdCkpLHRoaXMudS5wdXNoKGkpLGQ9ZVsrK2hdfWwhPT0obnVsbD09ZD92b2lkIDA6ZC5pbmRleCkmJihuPUMubmV4dE5vZGUoKSxsKyspfXJldHVybiBvfXAodCl7bGV0IGk9MDtmb3IoY29uc3QgcyBvZiB0aGlzLnUpdm9pZCAwIT09cyYmKHZvaWQgMCE9PXMuc3RyaW5ncz8ocy5fJEFJKHQscyxpKSxpKz1zLnN0cmluZ3MubGVuZ3RoLTIpOnMuXyRBSSh0W2ldKSksaSsrfX1jbGFzcyBNe2NvbnN0cnVjdG9yKHQsaSxzLGUpe3ZhciBvO3RoaXMudHlwZT0yLHRoaXMuXyRBSD1BLHRoaXMuXyRBTj12b2lkIDAsdGhpcy5fJEFBPXQsdGhpcy5fJEFCPWksdGhpcy5fJEFNPXMsdGhpcy5vcHRpb25zPWUsdGhpcy5fJENtPW51bGw9PT0obz1udWxsPT1lP3ZvaWQgMDplLmlzQ29ubmVjdGVkKXx8dm9pZCAwPT09b3x8b31nZXQgXyRBVSgpe3ZhciB0LGk7cmV0dXJuIG51bGwhPT0oaT1udWxsPT09KHQ9dGhpcy5fJEFNKXx8dm9pZCAwPT09dD92b2lkIDA6dC5fJEFVKSYmdm9pZCAwIT09aT9pOnRoaXMuXyRDbX1nZXQgcGFyZW50Tm9kZSgpe2xldCB0PXRoaXMuXyRBQS5wYXJlbnROb2RlO2NvbnN0IGk9dGhpcy5fJEFNO3JldHVybiB2b2lkIDAhPT1pJiYxMT09PShudWxsPT10P3ZvaWQgMDp0Lm5vZGVUeXBlKSYmKHQ9aS5wYXJlbnROb2RlKSx0fWdldCBzdGFydE5vZGUoKXtyZXR1cm4gdGhpcy5fJEFBfWdldCBlbmROb2RlKCl7cmV0dXJuIHRoaXMuXyRBQn1fJEFJKHQsaT10aGlzKXt0PU4odGhpcyx0LGkpLHUodCk/dD09PUF8fG51bGw9PXR8fFwiXCI9PT10Pyh0aGlzLl8kQUghPT1BJiZ0aGlzLl8kQVIoKSx0aGlzLl8kQUg9QSk6dCE9PXRoaXMuXyRBSCYmdCE9PVQmJnRoaXMuZyh0KTp2b2lkIDAhPT10Ll8kbGl0VHlwZSQ/dGhpcy4kKHQpOnZvaWQgMCE9PXQubm9kZVR5cGU/dGhpcy5UKHQpOnYodCk/dGhpcy5rKHQpOnRoaXMuZyh0KX1TKHQpe3JldHVybiB0aGlzLl8kQUEucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodCx0aGlzLl8kQUIpfVQodCl7dGhpcy5fJEFIIT09dCYmKHRoaXMuXyRBUigpLHRoaXMuXyRBSD10aGlzLlModCkpfWcodCl7dGhpcy5fJEFIIT09QSYmdSh0aGlzLl8kQUgpP3RoaXMuXyRBQS5uZXh0U2libGluZy5kYXRhPXQ6dGhpcy5UKHIuY3JlYXRlVGV4dE5vZGUodCkpLHRoaXMuXyRBSD10fSQodCl7dmFyIGk7Y29uc3R7dmFsdWVzOnMsXyRsaXRUeXBlJDplfT10LG89XCJudW1iZXJcIj09dHlwZW9mIGU/dGhpcy5fJEFDKHQpOih2b2lkIDA9PT1lLmVsJiYoZS5lbD1WLmNyZWF0ZUVsZW1lbnQoZS5oLHRoaXMub3B0aW9ucykpLGUpO2lmKChudWxsPT09KGk9dGhpcy5fJEFIKXx8dm9pZCAwPT09aT92b2lkIDA6aS5fJEFEKT09PW8pdGhpcy5fJEFILnAocyk7ZWxzZXtjb25zdCB0PW5ldyBTKG8sdGhpcyksaT10LnYodGhpcy5vcHRpb25zKTt0LnAocyksdGhpcy5UKGkpLHRoaXMuXyRBSD10fX1fJEFDKHQpe2xldCBpPUUuZ2V0KHQuc3RyaW5ncyk7cmV0dXJuIHZvaWQgMD09PWkmJkUuc2V0KHQuc3RyaW5ncyxpPW5ldyBWKHQpKSxpfWsodCl7Yyh0aGlzLl8kQUgpfHwodGhpcy5fJEFIPVtdLHRoaXMuXyRBUigpKTtjb25zdCBpPXRoaXMuXyRBSDtsZXQgcyxlPTA7Zm9yKGNvbnN0IG8gb2YgdCllPT09aS5sZW5ndGg/aS5wdXNoKHM9bmV3IE0odGhpcy5TKGQoKSksdGhpcy5TKGQoKSksdGhpcyx0aGlzLm9wdGlvbnMpKTpzPWlbZV0scy5fJEFJKG8pLGUrKztlPGkubGVuZ3RoJiYodGhpcy5fJEFSKHMmJnMuXyRBQi5uZXh0U2libGluZyxlKSxpLmxlbmd0aD1lKX1fJEFSKHQ9dGhpcy5fJEFBLm5leHRTaWJsaW5nLGkpe3ZhciBzO2ZvcihudWxsPT09KHM9dGhpcy5fJEFQKXx8dm9pZCAwPT09c3x8cy5jYWxsKHRoaXMsITEsITAsaSk7dCYmdCE9PXRoaXMuXyRBQjspe2NvbnN0IGk9dC5uZXh0U2libGluZzt0LnJlbW92ZSgpLHQ9aX19c2V0Q29ubmVjdGVkKHQpe3ZhciBpO3ZvaWQgMD09PXRoaXMuXyRBTSYmKHRoaXMuXyRDbT10LG51bGw9PT0oaT10aGlzLl8kQVApfHx2b2lkIDA9PT1pfHxpLmNhbGwodGhpcyx0KSl9fWNsYXNzIFJ7Y29uc3RydWN0b3IodCxpLHMsZSxvKXt0aGlzLnR5cGU9MSx0aGlzLl8kQUg9QSx0aGlzLl8kQU49dm9pZCAwLHRoaXMuZWxlbWVudD10LHRoaXMubmFtZT1pLHRoaXMuXyRBTT1lLHRoaXMub3B0aW9ucz1vLHMubGVuZ3RoPjJ8fFwiXCIhPT1zWzBdfHxcIlwiIT09c1sxXT8odGhpcy5fJEFIPUFycmF5KHMubGVuZ3RoLTEpLmZpbGwobmV3IFN0cmluZyksdGhpcy5zdHJpbmdzPXMpOnRoaXMuXyRBSD1BfWdldCB0YWdOYW1lKCl7cmV0dXJuIHRoaXMuZWxlbWVudC50YWdOYW1lfWdldCBfJEFVKCl7cmV0dXJuIHRoaXMuXyRBTS5fJEFVfV8kQUkodCxpPXRoaXMscyxlKXtjb25zdCBvPXRoaXMuc3RyaW5ncztsZXQgbj0hMTtpZih2b2lkIDA9PT1vKXQ9Tih0aGlzLHQsaSwwKSxuPSF1KHQpfHx0IT09dGhpcy5fJEFIJiZ0IT09VCxuJiYodGhpcy5fJEFIPXQpO2Vsc2V7Y29uc3QgZT10O2xldCBsLGg7Zm9yKHQ9b1swXSxsPTA7bDxvLmxlbmd0aC0xO2wrKyloPU4odGhpcyxlW3MrbF0saSxsKSxoPT09VCYmKGg9dGhpcy5fJEFIW2xdKSxufHwobj0hdShoKXx8aCE9PXRoaXMuXyRBSFtsXSksaD09PUE/dD1BOnQhPT1BJiYodCs9KG51bGwhPWg/aDpcIlwiKStvW2wrMV0pLHRoaXMuXyRBSFtsXT1ofW4mJiFlJiZ0aGlzLmoodCl9aih0KXt0PT09QT90aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKHRoaXMubmFtZSk6dGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSh0aGlzLm5hbWUsbnVsbCE9dD90OlwiXCIpfX1jbGFzcyBrIGV4dGVuZHMgUntjb25zdHJ1Y3Rvcigpe3N1cGVyKC4uLmFyZ3VtZW50cyksdGhpcy50eXBlPTN9aih0KXt0aGlzLmVsZW1lbnRbdGhpcy5uYW1lXT10PT09QT92b2lkIDA6dH19Y29uc3QgSD1zP3MuZW1wdHlTY3JpcHQ6XCJcIjtjbGFzcyBJIGV4dGVuZHMgUntjb25zdHJ1Y3Rvcigpe3N1cGVyKC4uLmFyZ3VtZW50cyksdGhpcy50eXBlPTR9aih0KXt0JiZ0IT09QT90aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKHRoaXMubmFtZSxIKTp0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKHRoaXMubmFtZSl9fWNsYXNzIEwgZXh0ZW5kcyBSe2NvbnN0cnVjdG9yKHQsaSxzLGUsbyl7c3VwZXIodCxpLHMsZSxvKSx0aGlzLnR5cGU9NX1fJEFJKHQsaT10aGlzKXt2YXIgcztpZigodD1udWxsIT09KHM9Tih0aGlzLHQsaSwwKSkmJnZvaWQgMCE9PXM/czpBKT09PVQpcmV0dXJuO2NvbnN0IGU9dGhpcy5fJEFILG89dD09PUEmJmUhPT1BfHx0LmNhcHR1cmUhPT1lLmNhcHR1cmV8fHQub25jZSE9PWUub25jZXx8dC5wYXNzaXZlIT09ZS5wYXNzaXZlLG49dCE9PUEmJihlPT09QXx8byk7byYmdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy5uYW1lLHRoaXMsZSksbiYmdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodGhpcy5uYW1lLHRoaXMsdCksdGhpcy5fJEFIPXR9aGFuZGxlRXZlbnQodCl7dmFyIGkscztcImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLl8kQUg/dGhpcy5fJEFILmNhbGwobnVsbCE9PShzPW51bGw9PT0oaT10aGlzLm9wdGlvbnMpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLmhvc3QpJiZ2b2lkIDAhPT1zP3M6dGhpcy5lbGVtZW50LHQpOnRoaXMuXyRBSC5oYW5kbGVFdmVudCh0KX19Y2xhc3Mgentjb25zdHJ1Y3Rvcih0LGkscyl7dGhpcy5lbGVtZW50PXQsdGhpcy50eXBlPTYsdGhpcy5fJEFOPXZvaWQgMCx0aGlzLl8kQU09aSx0aGlzLm9wdGlvbnM9c31nZXQgXyRBVSgpe3JldHVybiB0aGlzLl8kQU0uXyRBVX1fJEFJKHQpe04odGhpcyx0KX19Y29uc3QgWj17UDpvLEE6bixNOmwsQzoxLEw6UCxEOlMsUjp2LFY6TixJOk0sSDpSLE46SSxVOkwsRjprLEI6en0saj1pLmxpdEh0bWxQb2x5ZmlsbFN1cHBvcnQ7bnVsbD09anx8aihWLE0pLChudWxsIT09KHQ9aS5saXRIdG1sVmVyc2lvbnMpJiZ2b2lkIDAhPT10P3Q6aS5saXRIdG1sVmVyc2lvbnM9W10pLnB1c2goXCIyLjcuMFwiKTtjb25zdCBCPSh0LGkscyk9Pnt2YXIgZSxvO2NvbnN0IG49bnVsbCE9PShlPW51bGw9PXM/dm9pZCAwOnMucmVuZGVyQmVmb3JlKSYmdm9pZCAwIT09ZT9lOmk7bGV0IGw9bi5fJGxpdFBhcnQkO2lmKHZvaWQgMD09PWwpe2NvbnN0IHQ9bnVsbCE9PShvPW51bGw9PXM/dm9pZCAwOnMucmVuZGVyQmVmb3JlKSYmdm9pZCAwIT09bz9vOm51bGw7bi5fJGxpdFBhcnQkPWw9bmV3IE0oaS5pbnNlcnRCZWZvcmUoZCgpLHQpLHQsdm9pZCAwLG51bGwhPXM/czp7fSl9cmV0dXJuIGwuXyRBSSh0KSxsfTtleHBvcnR7WiBhcyBfJExILHggYXMgaHRtbCxUIGFzIG5vQ2hhbmdlLEEgYXMgbm90aGluZyxCIGFzIHJlbmRlcixiIGFzIHN2Z307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXQtaHRtbC5qcy5tYXBcbiIsImltcG9ydHtnZXRDb21wYXRpYmxlU3R5bGUgYXMgdCxhZG9wdFN0eWxlcyBhcyBpfWZyb21cIi4vY3NzLXRhZy5qc1wiO2V4cG9ydHtDU1NSZXN1bHQsYWRvcHRTdHlsZXMsY3NzLGdldENvbXBhdGlibGVTdHlsZSxzdXBwb3J0c0Fkb3B0aW5nU3R5bGVTaGVldHMsdW5zYWZlQ1NTfWZyb21cIi4vY3NzLXRhZy5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovdmFyIHM7Y29uc3QgZT13aW5kb3cscj1lLnRydXN0ZWRUeXBlcyxoPXI/ci5lbXB0eVNjcmlwdDpcIlwiLG89ZS5yZWFjdGl2ZUVsZW1lbnRQb2x5ZmlsbFN1cHBvcnQsbj17dG9BdHRyaWJ1dGUodCxpKXtzd2l0Y2goaSl7Y2FzZSBCb29sZWFuOnQ9dD9oOm51bGw7YnJlYWs7Y2FzZSBPYmplY3Q6Y2FzZSBBcnJheTp0PW51bGw9PXQ/dDpKU09OLnN0cmluZ2lmeSh0KX1yZXR1cm4gdH0sZnJvbUF0dHJpYnV0ZSh0LGkpe2xldCBzPXQ7c3dpdGNoKGkpe2Nhc2UgQm9vbGVhbjpzPW51bGwhPT10O2JyZWFrO2Nhc2UgTnVtYmVyOnM9bnVsbD09PXQ/bnVsbDpOdW1iZXIodCk7YnJlYWs7Y2FzZSBPYmplY3Q6Y2FzZSBBcnJheTp0cnl7cz1KU09OLnBhcnNlKHQpfWNhdGNoKHQpe3M9bnVsbH19cmV0dXJuIHN9fSxhPSh0LGkpPT5pIT09dCYmKGk9PWl8fHQ9PXQpLGw9e2F0dHJpYnV0ZTohMCx0eXBlOlN0cmluZyxjb252ZXJ0ZXI6bixyZWZsZWN0OiExLGhhc0NoYW5nZWQ6YX07Y2xhc3MgZCBleHRlbmRzIEhUTUxFbGVtZW50e2NvbnN0cnVjdG9yKCl7c3VwZXIoKSx0aGlzLl8kRWk9bmV3IE1hcCx0aGlzLmlzVXBkYXRlUGVuZGluZz0hMSx0aGlzLmhhc1VwZGF0ZWQ9ITEsdGhpcy5fJEVsPW51bGwsdGhpcy51KCl9c3RhdGljIGFkZEluaXRpYWxpemVyKHQpe3ZhciBpO3RoaXMuZmluYWxpemUoKSwobnVsbCE9PShpPXRoaXMuaCkmJnZvaWQgMCE9PWk/aTp0aGlzLmg9W10pLnB1c2godCl9c3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKXt0aGlzLmZpbmFsaXplKCk7Y29uc3QgdD1bXTtyZXR1cm4gdGhpcy5lbGVtZW50UHJvcGVydGllcy5mb3JFYWNoKCgoaSxzKT0+e2NvbnN0IGU9dGhpcy5fJEVwKHMsaSk7dm9pZCAwIT09ZSYmKHRoaXMuXyRFdi5zZXQoZSxzKSx0LnB1c2goZSkpfSkpLHR9c3RhdGljIGNyZWF0ZVByb3BlcnR5KHQsaT1sKXtpZihpLnN0YXRlJiYoaS5hdHRyaWJ1dGU9ITEpLHRoaXMuZmluYWxpemUoKSx0aGlzLmVsZW1lbnRQcm9wZXJ0aWVzLnNldCh0LGkpLCFpLm5vQWNjZXNzb3ImJiF0aGlzLnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSh0KSl7Y29uc3Qgcz1cInN5bWJvbFwiPT10eXBlb2YgdD9TeW1ib2woKTpcIl9fXCIrdCxlPXRoaXMuZ2V0UHJvcGVydHlEZXNjcmlwdG9yKHQscyxpKTt2b2lkIDAhPT1lJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5wcm90b3R5cGUsdCxlKX19c3RhdGljIGdldFByb3BlcnR5RGVzY3JpcHRvcih0LGkscyl7cmV0dXJue2dldCgpe3JldHVybiB0aGlzW2ldfSxzZXQoZSl7Y29uc3Qgcj10aGlzW3RdO3RoaXNbaV09ZSx0aGlzLnJlcXVlc3RVcGRhdGUodCxyLHMpfSxjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMH19c3RhdGljIGdldFByb3BlcnR5T3B0aW9ucyh0KXtyZXR1cm4gdGhpcy5lbGVtZW50UHJvcGVydGllcy5nZXQodCl8fGx9c3RhdGljIGZpbmFsaXplKCl7aWYodGhpcy5oYXNPd25Qcm9wZXJ0eShcImZpbmFsaXplZFwiKSlyZXR1cm4hMTt0aGlzLmZpbmFsaXplZD0hMDtjb25zdCB0PU9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKTtpZih0LmZpbmFsaXplKCksdm9pZCAwIT09dC5oJiYodGhpcy5oPVsuLi50LmhdKSx0aGlzLmVsZW1lbnRQcm9wZXJ0aWVzPW5ldyBNYXAodC5lbGVtZW50UHJvcGVydGllcyksdGhpcy5fJEV2PW5ldyBNYXAsdGhpcy5oYXNPd25Qcm9wZXJ0eShcInByb3BlcnRpZXNcIikpe2NvbnN0IHQ9dGhpcy5wcm9wZXJ0aWVzLGk9Wy4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHQpLC4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModCldO2Zvcihjb25zdCBzIG9mIGkpdGhpcy5jcmVhdGVQcm9wZXJ0eShzLHRbc10pfXJldHVybiB0aGlzLmVsZW1lbnRTdHlsZXM9dGhpcy5maW5hbGl6ZVN0eWxlcyh0aGlzLnN0eWxlcyksITB9c3RhdGljIGZpbmFsaXplU3R5bGVzKGkpe2NvbnN0IHM9W107aWYoQXJyYXkuaXNBcnJheShpKSl7Y29uc3QgZT1uZXcgU2V0KGkuZmxhdCgxLzApLnJldmVyc2UoKSk7Zm9yKGNvbnN0IGkgb2YgZSlzLnVuc2hpZnQodChpKSl9ZWxzZSB2b2lkIDAhPT1pJiZzLnB1c2godChpKSk7cmV0dXJuIHN9c3RhdGljIF8kRXAodCxpKXtjb25zdCBzPWkuYXR0cmlidXRlO3JldHVybiExPT09cz92b2lkIDA6XCJzdHJpbmdcIj09dHlwZW9mIHM/czpcInN0cmluZ1wiPT10eXBlb2YgdD90LnRvTG93ZXJDYXNlKCk6dm9pZCAwfXUoKXt2YXIgdDt0aGlzLl8kRV89bmV3IFByb21pc2UoKHQ9PnRoaXMuZW5hYmxlVXBkYXRpbmc9dCkpLHRoaXMuXyRBTD1uZXcgTWFwLHRoaXMuXyRFZygpLHRoaXMucmVxdWVzdFVwZGF0ZSgpLG51bGw9PT0odD10aGlzLmNvbnN0cnVjdG9yLmgpfHx2b2lkIDA9PT10fHx0LmZvckVhY2goKHQ9PnQodGhpcykpKX1hZGRDb250cm9sbGVyKHQpe3ZhciBpLHM7KG51bGwhPT0oaT10aGlzLl8kRVMpJiZ2b2lkIDAhPT1pP2k6dGhpcy5fJEVTPVtdKS5wdXNoKHQpLHZvaWQgMCE9PXRoaXMucmVuZGVyUm9vdCYmdGhpcy5pc0Nvbm5lY3RlZCYmKG51bGw9PT0ocz10Lmhvc3RDb25uZWN0ZWQpfHx2b2lkIDA9PT1zfHxzLmNhbGwodCkpfXJlbW92ZUNvbnRyb2xsZXIodCl7dmFyIGk7bnVsbD09PShpPXRoaXMuXyRFUyl8fHZvaWQgMD09PWl8fGkuc3BsaWNlKHRoaXMuXyRFUy5pbmRleE9mKHQpPj4+MCwxKX1fJEVnKCl7dGhpcy5jb25zdHJ1Y3Rvci5lbGVtZW50UHJvcGVydGllcy5mb3JFYWNoKCgodCxpKT0+e3RoaXMuaGFzT3duUHJvcGVydHkoaSkmJih0aGlzLl8kRWkuc2V0KGksdGhpc1tpXSksZGVsZXRlIHRoaXNbaV0pfSkpfWNyZWF0ZVJlbmRlclJvb3QoKXt2YXIgdDtjb25zdCBzPW51bGwhPT0odD10aGlzLnNoYWRvd1Jvb3QpJiZ2b2lkIDAhPT10P3Q6dGhpcy5hdHRhY2hTaGFkb3codGhpcy5jb25zdHJ1Y3Rvci5zaGFkb3dSb290T3B0aW9ucyk7cmV0dXJuIGkocyx0aGlzLmNvbnN0cnVjdG9yLmVsZW1lbnRTdHlsZXMpLHN9Y29ubmVjdGVkQ2FsbGJhY2soKXt2YXIgdDt2b2lkIDA9PT10aGlzLnJlbmRlclJvb3QmJih0aGlzLnJlbmRlclJvb3Q9dGhpcy5jcmVhdGVSZW5kZXJSb290KCkpLHRoaXMuZW5hYmxlVXBkYXRpbmcoITApLG51bGw9PT0odD10aGlzLl8kRVMpfHx2b2lkIDA9PT10fHx0LmZvckVhY2goKHQ9Pnt2YXIgaTtyZXR1cm4gbnVsbD09PShpPXQuaG9zdENvbm5lY3RlZCl8fHZvaWQgMD09PWk/dm9pZCAwOmkuY2FsbCh0KX0pKX1lbmFibGVVcGRhdGluZyh0KXt9ZGlzY29ubmVjdGVkQ2FsbGJhY2soKXt2YXIgdDtudWxsPT09KHQ9dGhpcy5fJEVTKXx8dm9pZCAwPT09dHx8dC5mb3JFYWNoKCh0PT57dmFyIGk7cmV0dXJuIG51bGw9PT0oaT10Lmhvc3REaXNjb25uZWN0ZWQpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLmNhbGwodCl9KSl9YXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKHQsaSxzKXt0aGlzLl8kQUsodCxzKX1fJEVPKHQsaSxzPWwpe3ZhciBlO2NvbnN0IHI9dGhpcy5jb25zdHJ1Y3Rvci5fJEVwKHQscyk7aWYodm9pZCAwIT09ciYmITA9PT1zLnJlZmxlY3Qpe2NvbnN0IGg9KHZvaWQgMCE9PShudWxsPT09KGU9cy5jb252ZXJ0ZXIpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLnRvQXR0cmlidXRlKT9zLmNvbnZlcnRlcjpuKS50b0F0dHJpYnV0ZShpLHMudHlwZSk7dGhpcy5fJEVsPXQsbnVsbD09aD90aGlzLnJlbW92ZUF0dHJpYnV0ZShyKTp0aGlzLnNldEF0dHJpYnV0ZShyLGgpLHRoaXMuXyRFbD1udWxsfX1fJEFLKHQsaSl7dmFyIHM7Y29uc3QgZT10aGlzLmNvbnN0cnVjdG9yLHI9ZS5fJEV2LmdldCh0KTtpZih2b2lkIDAhPT1yJiZ0aGlzLl8kRWwhPT1yKXtjb25zdCB0PWUuZ2V0UHJvcGVydHlPcHRpb25zKHIpLGg9XCJmdW5jdGlvblwiPT10eXBlb2YgdC5jb252ZXJ0ZXI/e2Zyb21BdHRyaWJ1dGU6dC5jb252ZXJ0ZXJ9OnZvaWQgMCE9PShudWxsPT09KHM9dC5jb252ZXJ0ZXIpfHx2b2lkIDA9PT1zP3ZvaWQgMDpzLmZyb21BdHRyaWJ1dGUpP3QuY29udmVydGVyOm47dGhpcy5fJEVsPXIsdGhpc1tyXT1oLmZyb21BdHRyaWJ1dGUoaSx0LnR5cGUpLHRoaXMuXyRFbD1udWxsfX1yZXF1ZXN0VXBkYXRlKHQsaSxzKXtsZXQgZT0hMDt2b2lkIDAhPT10JiYoKChzPXN8fHRoaXMuY29uc3RydWN0b3IuZ2V0UHJvcGVydHlPcHRpb25zKHQpKS5oYXNDaGFuZ2VkfHxhKSh0aGlzW3RdLGkpPyh0aGlzLl8kQUwuaGFzKHQpfHx0aGlzLl8kQUwuc2V0KHQsaSksITA9PT1zLnJlZmxlY3QmJnRoaXMuXyRFbCE9PXQmJih2b2lkIDA9PT10aGlzLl8kRUMmJih0aGlzLl8kRUM9bmV3IE1hcCksdGhpcy5fJEVDLnNldCh0LHMpKSk6ZT0hMSksIXRoaXMuaXNVcGRhdGVQZW5kaW5nJiZlJiYodGhpcy5fJEVfPXRoaXMuXyRFaigpKX1hc3luYyBfJEVqKCl7dGhpcy5pc1VwZGF0ZVBlbmRpbmc9ITA7dHJ5e2F3YWl0IHRoaXMuXyRFX31jYXRjaCh0KXtQcm9taXNlLnJlamVjdCh0KX1jb25zdCB0PXRoaXMuc2NoZWR1bGVVcGRhdGUoKTtyZXR1cm4gbnVsbCE9dCYmYXdhaXQgdCwhdGhpcy5pc1VwZGF0ZVBlbmRpbmd9c2NoZWR1bGVVcGRhdGUoKXtyZXR1cm4gdGhpcy5wZXJmb3JtVXBkYXRlKCl9cGVyZm9ybVVwZGF0ZSgpe3ZhciB0O2lmKCF0aGlzLmlzVXBkYXRlUGVuZGluZylyZXR1cm47dGhpcy5oYXNVcGRhdGVkLHRoaXMuXyRFaSYmKHRoaXMuXyRFaS5mb3JFYWNoKCgodCxpKT0+dGhpc1tpXT10KSksdGhpcy5fJEVpPXZvaWQgMCk7bGV0IGk9ITE7Y29uc3Qgcz10aGlzLl8kQUw7dHJ5e2k9dGhpcy5zaG91bGRVcGRhdGUocyksaT8odGhpcy53aWxsVXBkYXRlKHMpLG51bGw9PT0odD10aGlzLl8kRVMpfHx2b2lkIDA9PT10fHx0LmZvckVhY2goKHQ9Pnt2YXIgaTtyZXR1cm4gbnVsbD09PShpPXQuaG9zdFVwZGF0ZSl8fHZvaWQgMD09PWk/dm9pZCAwOmkuY2FsbCh0KX0pKSx0aGlzLnVwZGF0ZShzKSk6dGhpcy5fJEVrKCl9Y2F0Y2godCl7dGhyb3cgaT0hMSx0aGlzLl8kRWsoKSx0fWkmJnRoaXMuXyRBRShzKX13aWxsVXBkYXRlKHQpe31fJEFFKHQpe3ZhciBpO251bGw9PT0oaT10aGlzLl8kRVMpfHx2b2lkIDA9PT1pfHxpLmZvckVhY2goKHQ9Pnt2YXIgaTtyZXR1cm4gbnVsbD09PShpPXQuaG9zdFVwZGF0ZWQpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLmNhbGwodCl9KSksdGhpcy5oYXNVcGRhdGVkfHwodGhpcy5oYXNVcGRhdGVkPSEwLHRoaXMuZmlyc3RVcGRhdGVkKHQpKSx0aGlzLnVwZGF0ZWQodCl9XyRFaygpe3RoaXMuXyRBTD1uZXcgTWFwLHRoaXMuaXNVcGRhdGVQZW5kaW5nPSExfWdldCB1cGRhdGVDb21wbGV0ZSgpe3JldHVybiB0aGlzLmdldFVwZGF0ZUNvbXBsZXRlKCl9Z2V0VXBkYXRlQ29tcGxldGUoKXtyZXR1cm4gdGhpcy5fJEVffXNob3VsZFVwZGF0ZSh0KXtyZXR1cm4hMH11cGRhdGUodCl7dm9pZCAwIT09dGhpcy5fJEVDJiYodGhpcy5fJEVDLmZvckVhY2goKCh0LGkpPT50aGlzLl8kRU8oaSx0aGlzW2ldLHQpKSksdGhpcy5fJEVDPXZvaWQgMCksdGhpcy5fJEVrKCl9dXBkYXRlZCh0KXt9Zmlyc3RVcGRhdGVkKHQpe319ZC5maW5hbGl6ZWQ9ITAsZC5lbGVtZW50UHJvcGVydGllcz1uZXcgTWFwLGQuZWxlbWVudFN0eWxlcz1bXSxkLnNoYWRvd1Jvb3RPcHRpb25zPXttb2RlOlwib3BlblwifSxudWxsPT1vfHxvKHtSZWFjdGl2ZUVsZW1lbnQ6ZH0pLChudWxsIT09KHM9ZS5yZWFjdGl2ZUVsZW1lbnRWZXJzaW9ucykmJnZvaWQgMCE9PXM/czplLnJlYWN0aXZlRWxlbWVudFZlcnNpb25zPVtdKS5wdXNoKFwiMS42LjFcIik7ZXhwb3J0e2QgYXMgUmVhY3RpdmVFbGVtZW50LG4gYXMgZGVmYXVsdENvbnZlcnRlcixhIGFzIG5vdEVxdWFsfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0aXZlLWVsZW1lbnQuanMubWFwXG4iLCJpbXBvcnR7UmVhY3RpdmVFbGVtZW50IGFzIHR9ZnJvbVwiQGxpdC9yZWFjdGl2ZS1lbGVtZW50XCI7ZXhwb3J0KmZyb21cIkBsaXQvcmVhY3RpdmUtZWxlbWVudFwiO2ltcG9ydHtyZW5kZXIgYXMgZSxub0NoYW5nZSBhcyBpfWZyb21cImxpdC1odG1sXCI7ZXhwb3J0KmZyb21cImxpdC1odG1sXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi92YXIgbCxvO2NvbnN0IHI9dDtjbGFzcyBzIGV4dGVuZHMgdHtjb25zdHJ1Y3Rvcigpe3N1cGVyKC4uLmFyZ3VtZW50cyksdGhpcy5yZW5kZXJPcHRpb25zPXtob3N0OnRoaXN9LHRoaXMuXyREbz12b2lkIDB9Y3JlYXRlUmVuZGVyUm9vdCgpe3ZhciB0LGU7Y29uc3QgaT1zdXBlci5jcmVhdGVSZW5kZXJSb290KCk7cmV0dXJuIG51bGwhPT0odD0oZT10aGlzLnJlbmRlck9wdGlvbnMpLnJlbmRlckJlZm9yZSkmJnZvaWQgMCE9PXR8fChlLnJlbmRlckJlZm9yZT1pLmZpcnN0Q2hpbGQpLGl9dXBkYXRlKHQpe2NvbnN0IGk9dGhpcy5yZW5kZXIoKTt0aGlzLmhhc1VwZGF0ZWR8fCh0aGlzLnJlbmRlck9wdGlvbnMuaXNDb25uZWN0ZWQ9dGhpcy5pc0Nvbm5lY3RlZCksc3VwZXIudXBkYXRlKHQpLHRoaXMuXyREbz1lKGksdGhpcy5yZW5kZXJSb290LHRoaXMucmVuZGVyT3B0aW9ucyl9Y29ubmVjdGVkQ2FsbGJhY2soKXt2YXIgdDtzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpLG51bGw9PT0odD10aGlzLl8kRG8pfHx2b2lkIDA9PT10fHx0LnNldENvbm5lY3RlZCghMCl9ZGlzY29ubmVjdGVkQ2FsbGJhY2soKXt2YXIgdDtzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpLG51bGw9PT0odD10aGlzLl8kRG8pfHx2b2lkIDA9PT10fHx0LnNldENvbm5lY3RlZCghMSl9cmVuZGVyKCl7cmV0dXJuIGl9fXMuZmluYWxpemVkPSEwLHMuXyRsaXRFbGVtZW50JD0hMCxudWxsPT09KGw9Z2xvYmFsVGhpcy5saXRFbGVtZW50SHlkcmF0ZVN1cHBvcnQpfHx2b2lkIDA9PT1sfHxsLmNhbGwoZ2xvYmFsVGhpcyx7TGl0RWxlbWVudDpzfSk7Y29uc3Qgbj1nbG9iYWxUaGlzLmxpdEVsZW1lbnRQb2x5ZmlsbFN1cHBvcnQ7bnVsbD09bnx8bih7TGl0RWxlbWVudDpzfSk7Y29uc3QgaD17XyRBSzoodCxlLGkpPT57dC5fJEFLKGUsaSl9LF8kQUw6dD0+dC5fJEFMfTsobnVsbCE9PShvPWdsb2JhbFRoaXMubGl0RWxlbWVudFZlcnNpb25zKSYmdm9pZCAwIT09bz9vOmdsb2JhbFRoaXMubGl0RWxlbWVudFZlcnNpb25zPVtdKS5wdXNoKFwiMy4zLjBcIik7ZXhwb3J0e3MgYXMgTGl0RWxlbWVudCxyIGFzIFVwZGF0aW5nRWxlbWVudCxoIGFzIF8kTEV9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGl0LWVsZW1lbnQuanMubWFwXG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5mID0ge307XG4vLyBUaGlzIGZpbGUgY29udGFpbnMgb25seSB0aGUgZW50cnkgY2h1bmsuXG4vLyBUaGUgY2h1bmsgbG9hZGluZyBmdW5jdGlvbiBmb3IgYWRkaXRpb25hbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18uZSA9IChjaHVua0lkKSA9PiB7XG5cdHJldHVybiBQcm9taXNlLmFsbChPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmYpLnJlZHVjZSgocHJvbWlzZXMsIGtleSkgPT4ge1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18uZltrZXldKGNodW5rSWQsIHByb21pc2VzKTtcblx0XHRyZXR1cm4gcHJvbWlzZXM7XG5cdH0sIFtdKSk7XG59OyIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFzeW5jIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy51ID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgY2h1bmtJZCArIFwiLmJ1bmRsZS5qc1wiO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiOyIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQxNzk6IDBcbn07XG5cbl9fd2VicGFja19yZXF1aXJlX18uZi5qID0gKGNodW5rSWQsIHByb21pc2VzKSA9PiB7XG5cdFx0Ly8gSlNPTlAgY2h1bmsgbG9hZGluZyBmb3IgamF2YXNjcmlwdFxuXHRcdHZhciBpbnN0YWxsZWRDaHVua0RhdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSA/IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA6IHVuZGVmaW5lZDtcblx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIHsgLy8gMCBtZWFucyBcImFscmVhZHkgaW5zdGFsbGVkXCIuXG5cblx0XHRcdC8vIGEgUHJvbWlzZSBtZWFucyBcImN1cnJlbnRseSBsb2FkaW5nXCIuXG5cdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcblx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYodHJ1ZSkgeyAvLyBhbGwgY2h1bmtzIGhhdmUgSlNcblx0XHRcdFx0XHQvLyBzZXR1cCBQcm9taXNlIGluIGNodW5rIGNhY2hlXG5cdFx0XHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiAoaW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gW3Jlc29sdmUsIHJlamVjdF0pKTtcblx0XHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSA9IHByb21pc2UpO1xuXG5cdFx0XHRcdFx0Ly8gc3RhcnQgY2h1bmsgbG9hZGluZ1xuXHRcdFx0XHRcdHZhciB1cmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLnUoY2h1bmtJZCk7XG5cdFx0XHRcdFx0Ly8gY3JlYXRlIGVycm9yIGJlZm9yZSBzdGFjayB1bndvdW5kIHRvIGdldCB1c2VmdWwgc3RhY2t0cmFjZSBsYXRlclxuXHRcdFx0XHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuXHRcdFx0XHRcdHZhciBsb2FkaW5nRW5kZWQgPSAoZXZlbnQpID0+IHtcblx0XHRcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpKSB7XG5cdFx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcblx0XHRcdFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhICE9PSAwKSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJlYWxTcmMgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5tZXNzYWdlID0gJ0xvYWRpbmcgY2h1bmsgJyArIGNodW5rSWQgKyAnIGZhaWxlZC5cXG4oJyArIGVycm9yVHlwZSArICc6ICcgKyByZWFsU3JjICsgJyknO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLm5hbWUgPSAnQ2h1bmtMb2FkRXJyb3InO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLnR5cGUgPSBlcnJvclR5cGU7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IucmVxdWVzdCA9IHJlYWxTcmM7XG5cdFx0XHRcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtEYXRhWzFdKGVycm9yKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5sKHVybCwgbG9hZGluZ0VuZGVkLCBcImNodW5rLVwiICsgY2h1bmtJZCwgY2h1bmtJZCk7XG5cdFx0XHRcdH0gZWxzZSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuXHRcdFx0fVxuXHRcdH1cbn07XG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0XG5cbi8vIG5vIG9uIGNodW5rcyBsb2FkZWRcblxuLy8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG52YXIgd2VicGFja0pzb25wQ2FsbGJhY2sgPSAocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24sIGRhdGEpID0+IHtcblx0dmFyIFtjaHVua0lkcywgbW9yZU1vZHVsZXMsIHJ1bnRpbWVdID0gZGF0YTtcblx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG5cdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuXHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwO1xuXHRpZihjaHVua0lkcy5zb21lKChpZCkgPT4gKGluc3RhbGxlZENodW5rc1tpZF0gIT09IDApKSkge1xuXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYocnVudGltZSkgdmFyIHJlc3VsdCA9IHJ1bnRpbWUoX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdH1cblx0aWYocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24pIHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xuXHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuXHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSgpO1xuXHRcdH1cblx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuXHR9XG5cbn1cblxudmFyIGNodW5rTG9hZGluZ0dsb2JhbCA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtfcGlfYnBtbl9saXN0XCJdID0gc2VsZltcIndlYnBhY2tDaHVua19waV9icG1uX2xpc3RcIl0gfHwgW107XG5jaHVua0xvYWRpbmdHbG9iYWwuZm9yRWFjaCh3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIDApKTtcbmNodW5rTG9hZGluZ0dsb2JhbC5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCkpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG4vKipcbiAqIFRhZyB0aGF0IGFsbG93cyBleHByZXNzaW9ucyB0byBiZSB1c2VkIGluIGxvY2FsaXplZCBub24tSFRNTCB0ZW1wbGF0ZVxuICogc3RyaW5ncy5cbiAqXG4gKiBFeGFtcGxlOiBtc2coc3RyYEhlbGxvICR7dGhpcy51c2VyfSFgKTtcbiAqXG4gKiBUaGUgTGl0IGh0bWwgdGFnIGNhbiBhbHNvIGJlIHVzZWQgZm9yIHRoaXMgcHVycG9zZSwgYnV0IEhUTUwgd2lsbCBuZWVkIHRvIGJlXG4gKiBlc2NhcGVkLCBhbmQgdGhlcmUgaXMgYSBzbWFsbCBvdmVyaGVhZCBmb3IgSFRNTCBwYXJzaW5nLlxuICpcbiAqIFVudGFnZ2VkIHRlbXBsYXRlIHN0cmluZ3Mgd2l0aCBleHByZXNzaW9ucyBhcmVuJ3Qgc3VwcG9ydGVkIGJ5IGxpdC1sb2NhbGl6ZVxuICogYmVjYXVzZSB0aGV5IGRvbid0IGFsbG93IGZvciB2YWx1ZXMgdG8gYmUgY2FwdHVyZWQgYXQgcnVudGltZS5cbiAqL1xuY29uc3QgX3N0ciA9IChzdHJpbmdzLCAuLi52YWx1ZXMpID0+ICh7XG4gICAgc3RyVGFnOiB0cnVlLFxuICAgIHN0cmluZ3MsXG4gICAgdmFsdWVzLFxufSk7XG5leHBvcnQgY29uc3Qgc3RyID0gX3N0cjtcbmV4cG9ydCBjb25zdCBpc1N0clRhZ2dlZCA9ICh2YWwpID0+IHR5cGVvZiB2YWwgIT09ICdzdHJpbmcnICYmICdzdHJUYWcnIGluIHZhbDtcbi8qKlxuICogUmVuZGVyIHRoZSByZXN1bHQgb2YgYSBgc3RyYCB0YWdnZWQgdGVtcGxhdGUgdG8gYSBzdHJpbmcuIE5vdGUgd2UgZG9uJ3QgbmVlZFxuICogdG8gZG8gdGhpcyBmb3IgTGl0IHRlbXBsYXRlcywgc2luY2UgTGl0IGl0c2VsZiBoYW5kbGVzIHJlbmRlcmluZy5cbiAqL1xuZXhwb3J0IGNvbnN0IGpvaW5TdHJpbmdzQW5kVmFsdWVzID0gKHN0cmluZ3MsIHZhbHVlcywgdmFsdWVPcmRlcikgPT4ge1xuICAgIGxldCBjb25jYXQgPSBzdHJpbmdzWzBdO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgc3RyaW5ncy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25jYXQgKz0gdmFsdWVzW3ZhbHVlT3JkZXIgPyB2YWx1ZU9yZGVyW2kgLSAxXSA6IGkgLSAxXTtcbiAgICAgICAgY29uY2F0ICs9IHN0cmluZ3NbaV07XG4gICAgfVxuICAgIHJldHVybiBjb25jYXQ7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyLXRhZy5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmltcG9ydCB7IGlzU3RyVGFnZ2VkLCBqb2luU3RyaW5nc0FuZFZhbHVlcyB9IGZyb20gJy4vc3RyLXRhZy5qcyc7XG4vKipcbiAqIERlZmF1bHQgaWRlbnRpdHkgbXNnIGltcGxlbWVudGF0aW9uLiBTaW1wbHkgcmV0dXJucyB0aGUgaW5wdXQgdGVtcGxhdGUgd2l0aFxuICogbm8gYXdhcmVuZXNzIG9mIHRyYW5zbGF0aW9ucy4gSWYgdGhlIHRlbXBsYXRlIGlzIHN0ci10YWdnZWQsIHJldHVybnMgaXQgaW5cbiAqIHN0cmluZyBmb3JtLlxuICovXG5leHBvcnQgY29uc3QgZGVmYXVsdE1zZyA9ICgodGVtcGxhdGUpID0+IGlzU3RyVGFnZ2VkKHRlbXBsYXRlKVxuICAgID8gam9pblN0cmluZ3NBbmRWYWx1ZXModGVtcGxhdGUuc3RyaW5ncywgdGVtcGxhdGUudmFsdWVzKVxuICAgIDogdGVtcGxhdGUpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmYXVsdC1tc2cuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5leHBvcnQgY2xhc3MgRGVmZXJyZWQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnNldHRsZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgICAgICB0aGlzLl9yZWplY3QgPSByZWplY3Q7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXNvbHZlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2V0dGxlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3Jlc29sdmUodmFsdWUpO1xuICAgIH1cbiAgICByZWplY3QoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5zZXR0bGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcmVqZWN0KGVycm9yKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWZlcnJlZC5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbi8qKlxuICogTmFtZSBvZiB0aGUgZXZlbnQgZGlzcGF0Y2hlZCB0byBgd2luZG93YCB3aGVuZXZlciBhIGxvY2FsZSBjaGFuZ2Ugc3RhcnRzLFxuICogZmluaXNoZXMgc3VjY2Vzc2Z1bGx5LCBvciBmYWlscy4gT25seSByZWxldmFudCB0byBydW50aW1lIG1vZGUuXG4gKlxuICogVGhlIGBkZXRhaWxgIG9mIHRoaXMgZXZlbnQgaXMgYW4gb2JqZWN0IHdpdGggYSBgc3RhdHVzYCBzdHJpbmcgdGhhdCBjYW4gYmU6XG4gKiBcImxvYWRpbmdcIiwgXCJyZWFkeVwiLCBvciBcImVycm9yXCIsIGFsb25nIHdpdGggdGhlIHJlbGV2YW50IGxvY2FsZSBjb2RlLCBhbmRcbiAqIGVycm9yIG1lc3NhZ2UgaWYgYXBwbGljYWJsZS5cbiAqXG4gKiBZb3UgY2FuIGxpc3RlbiBmb3IgdGhpcyBldmVudCB0byBrbm93IHdoZW4geW91ciBhcHBsaWNhdGlvbiBzaG91bGQgYmVcbiAqIHJlLXJlbmRlcmVkIGZvbGxvd2luZyBhIGxvY2FsZSBjaGFuZ2UuIFNlZSBhbHNvIHRoZSBMb2NhbGl6ZWQgbWl4aW4sIHdoaWNoXG4gKiBhdXRvbWF0aWNhbGx5IHJlLXJlbmRlcnMgTGl0RWxlbWVudCBjbGFzc2VzIHVzaW5nIHRoaXMgZXZlbnQuXG4gKi9cbmV4cG9ydCBjb25zdCBMT0NBTEVfU1RBVFVTX0VWRU5UID0gJ2xpdC1sb2NhbGl6ZS1zdGF0dXMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9jYWxlLXN0YXR1cy1ldmVudC5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNCBUcmF2aXMgV2ViYlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuICovXG4vLyBUaGlzIG1vZHVsZSBpcyBkZXJpdmVkIGZyb20gdGhlIGZpbGU6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGp3ZWJiL2Zudi1wbHVzL2Jsb2IvMWUyY2U2OGEwN2NiN2RkNGMzYzg1MzY0ZjNkOGQ5NmM5NTkxOTQ3NC9pbmRleC5qcyNMMzA5XG4vL1xuLy8gQ2hhbmdlczpcbi8vIC0gT25seSB0aGUgX2hhc2g2NF8xYV9mYXN0IGZ1bmN0aW9uIGlzIGluY2x1ZGVkLlxuLy8gLSBSZW1vdmVkIGxvb3AgdW5yb2xsaW5nLlxuLy8gLSBDb252ZXJ0ZWQgdG8gVHlwZVNjcmlwdCBFUyBtb2R1bGUuXG4vLyAtIHZhciAtPiBsZXQvY29uc3Rcbi8vXG4vLyBUT0RPKGFvbWFya3MpIFVwc3RyZWFtIGltcHJvdmVtZW50cyB0byBodHRwczovL2dpdGh1Yi5jb20vdGp3ZWJiL2Zudi1wbHVzLy5cbmNvbnN0IGhsID0gW107XG5mb3IgKGxldCBpID0gMDsgaSA8IDI1NjsgaSsrKSB7XG4gICAgaGxbaV0gPSAoKGkgPj4gNCkgJiAxNSkudG9TdHJpbmcoMTYpICsgKGkgJiAxNSkudG9TdHJpbmcoMTYpO1xufVxuLyoqXG4gKiBQZXJmb3JtIGEgRk5WLTFBIDY0LWJpdCBoYXNoIG9mIHRoZSBnaXZlbiBzdHJpbmcgKGFzIFVURi0xNiBjb2RlIHVuaXRzKSwgYW5kXG4gKiByZXR1cm4gYSBoZXhhZGVjaW1hbCBkaWdlc3QgKGxlZnQgemVybyBwYWRkZWQgdG8gMTYgY2hhcmFjdGVycykuXG4gKlxuICogQHNlZSB7QGxpbmsgaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvZHJhZnQtZWFzdGxha2UtZm52LTA2fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZm52MWE2NChzdHIpIHtcbiAgICBsZXQgdDAgPSAwLCB2MCA9IDB4MjMyNSwgdDEgPSAwLCB2MSA9IDB4ODQyMiwgdDIgPSAwLCB2MiA9IDB4OWNlNCwgdDMgPSAwLCB2MyA9IDB4Y2JmMjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICB2MCBePSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgdDAgPSB2MCAqIDQzNTtcbiAgICAgICAgdDEgPSB2MSAqIDQzNTtcbiAgICAgICAgdDIgPSB2MiAqIDQzNTtcbiAgICAgICAgdDMgPSB2MyAqIDQzNTtcbiAgICAgICAgdDIgKz0gdjAgPDwgODtcbiAgICAgICAgdDMgKz0gdjEgPDwgODtcbiAgICAgICAgdDEgKz0gdDAgPj4+IDE2O1xuICAgICAgICB2MCA9IHQwICYgNjU1MzU7XG4gICAgICAgIHQyICs9IHQxID4+PiAxNjtcbiAgICAgICAgdjEgPSB0MSAmIDY1NTM1O1xuICAgICAgICB2MyA9ICh0MyArICh0MiA+Pj4gMTYpKSAmIDY1NTM1O1xuICAgICAgICB2MiA9IHQyICYgNjU1MzU7XG4gICAgfVxuICAgIHJldHVybiAoaGxbdjMgPj4gOF0gK1xuICAgICAgICBobFt2MyAmIDI1NV0gK1xuICAgICAgICBobFt2MiA+PiA4XSArXG4gICAgICAgIGhsW3YyICYgMjU1XSArXG4gICAgICAgIGhsW3YxID4+IDhdICtcbiAgICAgICAgaGxbdjEgJiAyNTVdICtcbiAgICAgICAgaGxbdjAgPj4gOF0gK1xuICAgICAgICBobFt2MCAmIDI1NV0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm52MWE2NC5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmltcG9ydCB7IGZudjFhNjQgfSBmcm9tICcuL2ZudjFhNjQuanMnO1xuLyoqXG4gKiBEZWxpbWl0ZXIgdXNlZCBiZXR3ZWVuIGVhY2ggdGVtcGxhdGUgc3RyaW5nIGNvbXBvbmVudCBiZWZvcmUgaGFzaGluZy4gVXNlZCB0b1xuICogcHJldmVudCBlLmcuIFwiZm9vYmFyXCIgYW5kIFwiZm9vJHtiYXp9YmFyXCIgZnJvbSBzaGFyaW5nIGEgaGFzaC5cbiAqXG4gKiBUaGlzIGlzIHRoZSBcInJlY29yZCBzZXBhcmF0b3JcIiBBU0NJSSBjaGFyYWN0ZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBIQVNIX0RFTElNSVRFUiA9ICdcXHgxZSc7XG4vKipcbiAqIElkIHByZWZpeCBvbiBodG1sLXRhZ2dlZCB0ZW1wbGF0ZXMgdG8gZGlzdGluZ3Vpc2ggZS5nLiBgPGI+eDwvYj5gIGZyb21cbiAqIGh0bWxgPGI+eDwvYj5gLlxuICovXG5jb25zdCBIVE1MX1BSRUZJWCA9ICdoJztcbi8qKlxuICogSWQgcHJlZml4IG9uIHBsYWluIHN0cmluZyB0ZW1wbGF0ZXMgdG8gZGlzdGluZ3Vpc2ggZS5nLiBgPGI+eDwvYj5gIGZyb21cbiAqIGh0bWxgPGI+eDwvYj5gLlxuICovXG5jb25zdCBTVFJJTkdfUFJFRklYID0gJ3MnO1xuLyoqXG4gKiBHZW5lcmF0ZSBhIHVuaXF1ZSBJRCBmb3IgYSBsaXQtbG9jYWxpemUgbWVzc2FnZS5cbiAqXG4gKiBFeGFtcGxlOlxuICogICBUZW1wbGF0ZTogaHRtbGBIZWxsbyA8Yj4ke3dob308L2I+IWBcbiAqICAgICBQYXJhbXM6IFtcIkhlbGxvIDxiPlwiLCBcIjwvYj4hXCJdLCB0cnVlXG4gKiAgICAgT3V0cHV0OiBoODJjY2MzOGQ0ZDQ2ZWFhOVxuICpcbiAqIFRoZSBJRCBpcyBjb25zdHJ1Y3RlZCBhczpcbiAqXG4gKiAgIFswXSAgICBLaW5kIG9mIHRlbXBsYXRlOiBbaF10bWwgb3IgW3NddHJpbmcuXG4gKiAgIFsxLDE2XSA2NC1iaXQgRk5WLTFhIGhhc2ggaGV4IGRpZ2VzdCBvZiB0aGUgdGVtcGxhdGUgc3RyaW5ncywgYXMgVVRGLTE2XG4gKiAgICAgICAgICBjb2RlIHBvaW50cywgZGVsaW5lYXRlZCBieSBhbiBBU0NJSSBcInJlY29yZCBzZXBhcmF0b3JcIiBjaGFyYWN0ZXIuXG4gKlxuICogV2UgY2hvb3NlIEZOVi0xYSBiZWNhdXNlOlxuICpcbiAqICAgMS4gSXQncyBwcmV0dHkgZmFzdCAoZS5nLiBtdWNoIGZhc3RlciB0aGFuIFNIQS0xKS5cbiAqICAgMi4gSXQncyBwcmV0dHkgc21hbGwgKDAuMjUgS2lCIG1pbmlmaWVkICsgYnJvdGxpKS5cbiAqICAgMy4gV2UgZG9uJ3QgcmVxdWlyZSBjcnlwdG9ncmFwaGljIHNlY3VyaXR5LCBhbmQgNjQgYml0cyBzaG91bGQgZ2l2ZVxuICogICAgICBzdWZmaWNpZW50IGNvbGxpc2lvbiByZXNpc3RhbmNlIGZvciBhbnkgb25lIGFwcGxpY2F0aW9uLiBXb3JzdFxuICogICAgICBjYXNlLCB3ZSB3aWxsIGFsd2F5cyBkZXRlY3QgY29sbGlzaW9ucyBkdXJpbmcgYW5hbHlzaXMuXG4gKiAgIDQuIFdlIGNhbid0IHVzZSBXZWIgQ3J5cHRvIEFQSSAoZS5nLiBTSEEtMSksIGJlY2F1c2UgaXQncyBhc3luY2hyb25vdXMuXG4gKiAgIDUuIEl0J3MgYSB3ZWxsIGtub3duIG5vbi1jcnlwdG9ncmFwaGljIGhhc2ggd2l0aCBpbXBsZW1lbnRhdGlvbnMgaW4gbWFueVxuICogICAgICBsYW5ndWFnZXMuXG4gKiAgIDYuIFRoZXJlIHdhcyBhbiBleGlzdGluZyBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIHRoYXQgZG9lc24ndCByZXF1aXJlXG4gKiAgICAgIEJpZ0ludCwgZm9yIElFMTEgY29tcGF0aWJpbGl0eS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlTXNnSWQoc3RyaW5ncywgaXNIdG1sVGFnZ2VkKSB7XG4gICAgcmV0dXJuICgoaXNIdG1sVGFnZ2VkID8gSFRNTF9QUkVGSVggOiBTVFJJTkdfUFJFRklYKSArXG4gICAgICAgIGZudjFhNjQodHlwZW9mIHN0cmluZ3MgPT09ICdzdHJpbmcnID8gc3RyaW5ncyA6IHN0cmluZ3Muam9pbihIQVNIX0RFTElNSVRFUikpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlkLWdlbmVyYXRpb24uanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5pbXBvcnQgeyBkZWZhdWx0TXNnIH0gZnJvbSAnLi9kZWZhdWx0LW1zZy5qcyc7XG5pbXBvcnQgeyBqb2luU3RyaW5nc0FuZFZhbHVlcyB9IGZyb20gJy4vc3RyLXRhZy5qcyc7XG5pbXBvcnQgeyBnZW5lcmF0ZU1zZ0lkIH0gZnJvbSAnLi9pZC1nZW5lcmF0aW9uLmpzJztcbmNvbnN0IGV4cHJlc3Npb25PcmRlcnMgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgaGFzaENhY2hlID0gbmV3IE1hcCgpO1xuZXhwb3J0IGZ1bmN0aW9uIHJ1bnRpbWVNc2codGVtcGxhdGVzLCB0ZW1wbGF0ZSwgb3B0aW9ucykge1xuICAgIHZhciBfYTtcbiAgICBpZiAodGVtcGxhdGVzKSB7XG4gICAgICAgIGNvbnN0IGlkID0gKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmlkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBnZW5lcmF0ZUlkKHRlbXBsYXRlKTtcbiAgICAgICAgY29uc3QgbG9jYWxpemVkID0gdGVtcGxhdGVzW2lkXTtcbiAgICAgICAgaWYgKGxvY2FsaXplZCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBsb2NhbGl6ZWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgLy8gRS5nLiBcIkhlbGxvIFdvcmxkIVwiXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsaXplZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCdzdHJUYWcnIGluIGxvY2FsaXplZCkge1xuICAgICAgICAgICAgICAgIC8vIEUuZy4gc3RyYEhlbGxvICR7bmFtZX0hYFxuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gTG9jYWxpemVkIHRlbXBsYXRlcyBoYXZlICR7bnVtYmVyfSBpbiBwbGFjZSBvZiByZWFsIHRlbXBsYXRlXG4gICAgICAgICAgICAgICAgLy8gZXhwcmVzc2lvbnMuIFRoZXkgY2FuJ3QgaGF2ZSByZWFsIHRlbXBsYXRlIHZhbHVlcywgYmVjYXVzZSB0aGVcbiAgICAgICAgICAgICAgICAvLyB2YXJpYWJsZSBzY29wZSB3b3VsZCBiZSB3cm9uZy4gVGhlIG51bWJlciB0ZWxscyB1cyB0aGUgaW5kZXggb2YgdGhlXG4gICAgICAgICAgICAgICAgLy8gc291cmNlIHZhbHVlIHRvIHN1YnN0aXR1dGUgaW4gaXRzIHBsYWNlLCBiZWNhdXNlIGV4cHJlc3Npb25zIGNhbiBiZVxuICAgICAgICAgICAgICAgIC8vIG1vdmVkIHRvIGEgZGlmZmVyZW50IHBvc2l0aW9uIGR1cmluZyB0cmFuc2xhdGlvbi5cbiAgICAgICAgICAgICAgICByZXR1cm4gam9pblN0cmluZ3NBbmRWYWx1ZXMobG9jYWxpemVkLnN0cmluZ3MsIFxuICAgICAgICAgICAgICAgIC8vIENhc3QgYHRlbXBsYXRlYCBiZWNhdXNlIGl0cyB0eXBlIHdhc24ndCBhdXRvbWF0aWNhbGx5IG5hcnJvd2VkIChidXRcbiAgICAgICAgICAgICAgICAvLyB3ZSBrbm93IGl0IG11c3QgYmUgdGhlIHNhbWUgdHlwZSBhcyBgbG9jYWxpemVkYCkuXG4gICAgICAgICAgICAgICAgdGVtcGxhdGUudmFsdWVzLCBsb2NhbGl6ZWQudmFsdWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEUuZy4gaHRtbGBIZWxsbyA8Yj4ke25hbWV9PC9iPiFgXG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIHRvIGtlZXAgb3VyIG93biBtYXBwaW5nIG9mIGV4cHJlc3Npb24gb3JkZXJpbmcgYmVjYXVzZSB3ZSBkb1xuICAgICAgICAgICAgICAgIC8vIGFuIGluLXBsYWNlIHVwZGF0ZSBvZiBgdmFsdWVzYCwgYW5kIG90aGVyd2lzZSB3ZSdkIGxvc2Ugb3JkZXJpbmcgZm9yXG4gICAgICAgICAgICAgICAgLy8gc3Vic2VxdWVudCByZW5kZXJzLlxuICAgICAgICAgICAgICAgIGxldCBvcmRlciA9IGV4cHJlc3Npb25PcmRlcnMuZ2V0KGxvY2FsaXplZCk7XG4gICAgICAgICAgICAgICAgaWYgKG9yZGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgb3JkZXIgPSBsb2NhbGl6ZWQudmFsdWVzO1xuICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uT3JkZXJzLnNldChsb2NhbGl6ZWQsIG9yZGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgLi4ubG9jYWxpemVkLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IG9yZGVyLm1hcCgoaSkgPT4gdGVtcGxhdGUudmFsdWVzW2ldKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkZWZhdWx0TXNnKHRlbXBsYXRlKTtcbn1cbmZ1bmN0aW9uIGdlbmVyYXRlSWQodGVtcGxhdGUpIHtcbiAgICBjb25zdCBzdHJpbmdzID0gdHlwZW9mIHRlbXBsYXRlID09PSAnc3RyaW5nJyA/IHRlbXBsYXRlIDogdGVtcGxhdGUuc3RyaW5ncztcbiAgICBsZXQgaWQgPSBoYXNoQ2FjaGUuZ2V0KHN0cmluZ3MpO1xuICAgIGlmIChpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlkID0gZ2VuZXJhdGVNc2dJZChzdHJpbmdzLCB0eXBlb2YgdGVtcGxhdGUgIT09ICdzdHJpbmcnICYmICEoJ3N0clRhZycgaW4gdGVtcGxhdGUpKTtcbiAgICAgICAgaGFzaENhY2hlLnNldChzdHJpbmdzLCBpZCk7XG4gICAgfVxuICAgIHJldHVybiBpZDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJ1bnRpbWUtbXNnLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuaW1wb3J0IHsgX2luc3RhbGxNc2dJbXBsZW1lbnRhdGlvbiB9IGZyb20gJy4uL2xpdC1sb2NhbGl6ZS5qcyc7XG5pbXBvcnQgeyBEZWZlcnJlZCB9IGZyb20gJy4uL2ludGVybmFsL2RlZmVycmVkLmpzJztcbmltcG9ydCB7IExPQ0FMRV9TVEFUVVNfRVZFTlQgfSBmcm9tICcuLi9pbnRlcm5hbC9sb2NhbGUtc3RhdHVzLWV2ZW50LmpzJztcbmltcG9ydCB7IHJ1bnRpbWVNc2cgfSBmcm9tICcuLi9pbnRlcm5hbC9ydW50aW1lLW1zZy5qcyc7XG4vKipcbiAqIERpc3BhdGNoIGEgXCJsaXQtbG9jYWxpemUtc3RhdHVzXCIgZXZlbnQgdG8gYHdpbmRvd2Agd2l0aCB0aGUgZ2l2ZW4gZGV0YWlsLlxuICovXG5mdW5jdGlvbiBkaXNwYXRjaFN0YXR1c0V2ZW50KGRldGFpbCkge1xuICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChMT0NBTEVfU1RBVFVTX0VWRU5ULCB7IGRldGFpbCB9KSk7XG59XG5sZXQgYWN0aXZlTG9jYWxlID0gJyc7XG5sZXQgbG9hZGluZ0xvY2FsZTtcbmxldCBzb3VyY2VMb2NhbGU7XG5sZXQgdmFsaWRMb2NhbGVzO1xubGV0IGxvYWRMb2NhbGU7XG5sZXQgdGVtcGxhdGVzO1xubGV0IGxvYWRpbmcgPSBuZXcgRGVmZXJyZWQoKTtcbi8vIFRoZSBsb2FkaW5nIHByb21pc2UgbXVzdCBiZSBpbml0aWFsbHkgcmVzb2x2ZWQsIGJlY2F1c2UgdGhhdCdzIHdoYXQgd2Ugc2hvdWxkXG4vLyByZXR1cm4gaWYgdGhlIHVzZXIgaW1tZWRpYXRlbHkgY2FsbHMgc2V0TG9jYWxlKHNvdXJjZUxvY2FsZSkuXG5sb2FkaW5nLnJlc29sdmUoKTtcbmxldCByZXF1ZXN0SWQgPSAwO1xuLyoqXG4gKiBTZXQgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzIGZvciBsaXQtbG9jYWxpemUgd2hlbiBpbiBydW50aW1lIG1vZGUuIFJldHVybnNcbiAqIGFuIG9iamVjdCB3aXRoIGZ1bmN0aW9uczpcbiAqXG4gKiAtIGBnZXRMb2NhbGVgOiBSZXR1cm4gdGhlIGFjdGl2ZSBsb2NhbGUgY29kZS5cbiAqIC0gYHNldExvY2FsZWA6IFNldCB0aGUgYWN0aXZlIGxvY2FsZSBjb2RlLlxuICpcbiAqIFRocm93cyBpZiBjYWxsZWQgbW9yZSB0aGFuIG9uY2UuXG4gKi9cbmV4cG9ydCBjb25zdCBjb25maWd1cmVMb2NhbGl6YXRpb24gPSAoY29uZmlnKSA9PiB7XG4gICAgX2luc3RhbGxNc2dJbXBsZW1lbnRhdGlvbigoKHRlbXBsYXRlLCBvcHRpb25zKSA9PiBydW50aW1lTXNnKHRlbXBsYXRlcywgdGVtcGxhdGUsIG9wdGlvbnMpKSk7XG4gICAgYWN0aXZlTG9jYWxlID0gc291cmNlTG9jYWxlID0gY29uZmlnLnNvdXJjZUxvY2FsZTtcbiAgICB2YWxpZExvY2FsZXMgPSBuZXcgU2V0KGNvbmZpZy50YXJnZXRMb2NhbGVzKTtcbiAgICB2YWxpZExvY2FsZXMuYWRkKGNvbmZpZy5zb3VyY2VMb2NhbGUpO1xuICAgIGxvYWRMb2NhbGUgPSBjb25maWcubG9hZExvY2FsZTtcbiAgICByZXR1cm4geyBnZXRMb2NhbGUsIHNldExvY2FsZSB9O1xufTtcbi8qKlxuICogUmV0dXJuIHRoZSBhY3RpdmUgbG9jYWxlIGNvZGUuXG4gKi9cbmNvbnN0IGdldExvY2FsZSA9ICgpID0+IHtcbiAgICByZXR1cm4gYWN0aXZlTG9jYWxlO1xufTtcbi8qKlxuICogU2V0IHRoZSBhY3RpdmUgbG9jYWxlIGNvZGUsIGFuZCBiZWdpbiBsb2FkaW5nIHRlbXBsYXRlcyBmb3IgdGhhdCBsb2NhbGUgdXNpbmdcbiAqIHRoZSBgbG9hZExvY2FsZWAgZnVuY3Rpb24gdGhhdCB3YXMgcGFzc2VkIHRvIGBjb25maWd1cmVMb2NhbGl6YXRpb25gLiBSZXR1cm5zXG4gKiBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBuZXh0IGxvY2FsZSBpcyByZWFkeSB0byBiZSByZW5kZXJlZC5cbiAqXG4gKiBOb3RlIHRoYXQgaWYgYSBzZWNvbmQgY2FsbCB0byBgc2V0TG9jYWxlYCBpcyBtYWRlIHdoaWxlIHRoZSBmaXJzdCByZXF1ZXN0ZWRcbiAqIGxvY2FsZSBpcyBzdGlsbCBsb2FkaW5nLCB0aGVuIHRoZSBzZWNvbmQgY2FsbCB0YWtlcyBwcmVjZWRlbmNlLCBhbmQgdGhlXG4gKiBwcm9taXNlIHJldHVybmVkIGZyb20gdGhlIGZpcnN0IGNhbGwgd2lsbCByZXNvbHZlIHdoZW4gc2Vjb25kIGxvY2FsZSBpc1xuICogcmVhZHkuIElmIHlvdSBuZWVkIHRvIGtub3cgd2hldGhlciBhIHBhcnRpY3VsYXIgbG9jYWxlIHdhcyBsb2FkZWQsIGNoZWNrXG4gKiBgZ2V0TG9jYWxlYCBhZnRlciB0aGUgcHJvbWlzZSByZXNvbHZlcy5cbiAqXG4gKiBUaHJvd3MgaWYgdGhlIGdpdmVuIGxvY2FsZSBpcyBub3QgY29udGFpbmVkIGJ5IHRoZSBjb25maWd1cmVkIGBzb3VyY2VMb2NhbGVgXG4gKiBvciBgdGFyZ2V0TG9jYWxlc2AuXG4gKi9cbmNvbnN0IHNldExvY2FsZSA9IChuZXdMb2NhbGUpID0+IHtcbiAgICBpZiAobmV3TG9jYWxlID09PSAobG9hZGluZ0xvY2FsZSAhPT0gbnVsbCAmJiBsb2FkaW5nTG9jYWxlICE9PSB2b2lkIDAgPyBsb2FkaW5nTG9jYWxlIDogYWN0aXZlTG9jYWxlKSkge1xuICAgICAgICByZXR1cm4gbG9hZGluZy5wcm9taXNlO1xuICAgIH1cbiAgICBpZiAoIXZhbGlkTG9jYWxlcyB8fCAhbG9hZExvY2FsZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludGVybmFsIGVycm9yJyk7XG4gICAgfVxuICAgIGlmICghdmFsaWRMb2NhbGVzLmhhcyhuZXdMb2NhbGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBsb2NhbGUgY29kZScpO1xuICAgIH1cbiAgICByZXF1ZXN0SWQrKztcbiAgICBjb25zdCB0aGlzUmVxdWVzdElkID0gcmVxdWVzdElkO1xuICAgIGxvYWRpbmdMb2NhbGUgPSBuZXdMb2NhbGU7XG4gICAgaWYgKGxvYWRpbmcuc2V0dGxlZCkge1xuICAgICAgICBsb2FkaW5nID0gbmV3IERlZmVycmVkKCk7XG4gICAgfVxuICAgIGRpc3BhdGNoU3RhdHVzRXZlbnQoeyBzdGF0dXM6ICdsb2FkaW5nJywgbG9hZGluZ0xvY2FsZTogbmV3TG9jYWxlIH0pO1xuICAgIGNvbnN0IGxvY2FsZVByb21pc2UgPSBuZXdMb2NhbGUgPT09IHNvdXJjZUxvY2FsZVxuICAgICAgICA/IC8vIFdlIGNvdWxkIHN3aXRjaCB0byB0aGUgc291cmNlIGxvY2FsZSBzeW5jaHJvbm91c2x5LCBidXQgd2UgcHJlZmVyIHRvXG4gICAgICAgICAgICAvLyBxdWV1ZSBpdCBvbiBhIG1pY3JvdGFzayBzbyB0aGF0IHN3aXRjaGluZyBsb2NhbGVzIGlzIGNvbnNpc3RlbnRseVxuICAgICAgICAgICAgLy8gYXN5bmNocm9ub3VzLlxuICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHsgdGVtcGxhdGVzOiB1bmRlZmluZWQgfSlcbiAgICAgICAgOiBsb2FkTG9jYWxlKG5ld0xvY2FsZSk7XG4gICAgbG9jYWxlUHJvbWlzZS50aGVuKChtb2QpID0+IHtcbiAgICAgICAgaWYgKHJlcXVlc3RJZCA9PT0gdGhpc1JlcXVlc3RJZCkge1xuICAgICAgICAgICAgYWN0aXZlTG9jYWxlID0gbmV3TG9jYWxlO1xuICAgICAgICAgICAgbG9hZGluZ0xvY2FsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRlbXBsYXRlcyA9IG1vZC50ZW1wbGF0ZXM7XG4gICAgICAgICAgICBkaXNwYXRjaFN0YXR1c0V2ZW50KHsgc3RhdHVzOiAncmVhZHknLCByZWFkeUxvY2FsZTogbmV3TG9jYWxlIH0pO1xuICAgICAgICAgICAgbG9hZGluZy5yZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRWxzZSBhbm90aGVyIGxvY2FsZSB3YXMgcmVxdWVzdGVkIGluIHRoZSBtZWFudGltZS4gRG9uJ3QgcmVzb2x2ZSBvclxuICAgICAgICAvLyByZWplY3QsIGJlY2F1c2UgdGhlIG5ld2VyIGxvYWQgY2FsbCBpcyBnb2luZyB0byB1c2UgdGhlIHNhbWUgcHJvbWlzZS5cbiAgICAgICAgLy8gTm90ZSB0aGUgdXNlciBjYW4gY2FsbCBnZXRMb2NhbGUoKSBhZnRlciB0aGUgcHJvbWlzZSByZXNvbHZlcyBpZiB0aGV5XG4gICAgICAgIC8vIG5lZWQgdG8gY2hlY2sgaWYgdGhlIGxvY2FsZSBpcyBzdGlsbCB0aGUgb25lIHRoZXkgZXhwZWN0ZWQgdG8gbG9hZC5cbiAgICB9LCAoZXJyKSA9PiB7XG4gICAgICAgIGlmIChyZXF1ZXN0SWQgPT09IHRoaXNSZXF1ZXN0SWQpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoU3RhdHVzRXZlbnQoe1xuICAgICAgICAgICAgICAgIHN0YXR1czogJ2Vycm9yJyxcbiAgICAgICAgICAgICAgICBlcnJvckxvY2FsZTogbmV3TG9jYWxlLFxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZXJyLnRvU3RyaW5nKCksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxvYWRpbmcucmVqZWN0KGVycik7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbG9hZGluZy5wcm9taXNlO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJ1bnRpbWUuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5pbXBvcnQgeyBkZWZhdWx0TXNnIH0gZnJvbSAnLi9pbnRlcm5hbC9kZWZhdWx0LW1zZy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2ludGVybmFsL2xvY2FsZS1zdGF0dXMtZXZlbnQuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9pbnRlcm5hbC9zdHItdGFnLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vaW50ZXJuYWwvdHlwZXMuanMnO1xuLy8gVE9ETyhhb21hcmtzKSBJbiBhIGZ1dHVyZSBicmVha2luZyB2ZXJzaW9uLCByZW1vdmUgdGhlc2UgaW1wb3J0cyBzbyB0aGF0IHRoZVxuLy8gYnVsayBvZiB0aGUgY29kZSBpc24ndCBpbmNsdWRlZCBpbiBidW5kbGVzIGJ5IGRlZmF1bHQuIEluIHBhcnRpY3VsYXIgaW1hZ2luZVxuLy8gdGhlIGNvbXBvbmVudCBsaWJyYXJ5IHVzZS1jYXNlIHdoZXJlIG1zZygpIGNhbGxzIGFyZSBtYWRlLCBidXQgdGhlcmUgaXMgbm9cbi8vIG5lZWQgdG8gYWN0dWFsbHkgaW5pdGlhbGl6ZSBhbnkgb2YgdGhlIGxvY2FsaXphdGlvbiBydW50aW1lLlxuZXhwb3J0ICogZnJvbSAnLi9pbnRlcm5hbC9sb2NhbGl6ZWQtY29udHJvbGxlci5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2ludGVybmFsL2xvY2FsaXplZC1kZWNvcmF0b3IuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9pbml0L3J1bnRpbWUuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9pbml0L3RyYW5zZm9ybS5qcyc7XG4vKipcbiAqIE1ha2UgYSBzdHJpbmcgb3IgbGl0LWh0bWwgdGVtcGxhdGUgbG9jYWxpemFibGUuXG4gKlxuICogQHBhcmFtIHRlbXBsYXRlIEEgc3RyaW5nLCBhIGxpdC1odG1sIHRlbXBsYXRlLCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJuc1xuICogZWl0aGVyIGEgc3RyaW5nIG9yIGxpdC1odG1sIHRlbXBsYXRlLlxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKiAgIC0gaWQ6IE9wdGlvbmFsIHByb2plY3Qtd2lkZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhpcyB0ZW1wbGF0ZS4gSWZcbiAqICAgICBvbWl0dGVkLCBhbiBpZCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGZyb20gdGhlIHRlbXBsYXRlIHN0cmluZ3MuXG4gKiAgIC0gZGVzYzogT3B0aW9uYWwgZGVzY3JpcHRpb25cbiAqL1xuZXhwb3J0IGxldCBtc2cgPSBkZWZhdWx0TXNnO1xubGV0IGluc3RhbGxlZCA9IGZhbHNlO1xuLyoqXG4gKiBJbnRlcm5hbCBvbmx5LiBEbyBub3QgdXNlIHRoaXMgZnVuY3Rpb24uXG4gKlxuICogSW5zdGFsbHMgYW4gaW1wbGVtZW50YXRpb24gb2YgdGhlIG1zZyBmdW5jdGlvbiB0byByZXBsYWNlIHRoZSBkZWZhdWx0XG4gKiBpZGVudGl0eSBmdW5jdGlvbi4gVGhyb3dzIGlmIGNhbGxlZCBtb3JlIHRoYW4gb25jZS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9pbnN0YWxsTXNnSW1wbGVtZW50YXRpb24oaW1wbCkge1xuICAgIGlmIChpbnN0YWxsZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdsaXQtbG9jYWxpemUgY2FuIG9ubHkgYmUgY29uZmlndXJlZCBvbmNlJyk7XG4gICAgfVxuICAgIG1zZyA9IGltcGw7XG4gICAgaW5zdGFsbGVkID0gdHJ1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpdC1sb2NhbGl6ZS5qcy5tYXAiLCIvLyBEbyBub3QgbW9kaWZ5IHRoaXMgZmlsZSBieSBoYW5kIVxuLy8gUmUtZ2VuZXJhdGUgdGhpcyBmaWxlIGJ5IHJ1bm5pbmcgbGl0LWxvY2FsaXplLlxuXG4vKipcbiAqIFRoZSBsb2NhbGUgY29kZSB0aGF0IHRlbXBsYXRlcyBpbiB0aGlzIHNvdXJjZSBjb2RlIGFyZSB3cml0dGVuIGluLlxuICovXG5leHBvcnQgY29uc3Qgc291cmNlTG9jYWxlID0gYGVuYDtcblxuLyoqXG4gKiBUaGUgb3RoZXIgbG9jYWxlIGNvZGVzIHRoYXQgdGhpcyBhcHBsaWNhdGlvbiBpcyBsb2NhbGl6ZWQgaW50by4gU29ydGVkXG4gKiBsZXhpY29ncmFwaGljYWxseS5cbiAqL1xuZXhwb3J0IGNvbnN0IHRhcmdldExvY2FsZXMgPSBbXSBhcyBjb25zdDtcblxuLyoqXG4gKiBBbGwgdmFsaWQgcHJvamVjdCBsb2NhbGUgY29kZXMuIFNvcnRlZCBsZXhpY29ncmFwaGljYWxseS5cbiAqL1xuZXhwb3J0IGNvbnN0IGFsbExvY2FsZXMgPSBbYGVuYF0gYXMgY29uc3Q7XG4iLCJpbXBvcnQgJ0B3ZWJjb21wb25lbnRzL3Njb3BlZC1jdXN0b20tZWxlbWVudC1yZWdpc3RyeSc7XG5pbXBvcnQgeyBjb25maWd1cmVMb2NhbGl6YXRpb24gfSBmcm9tICdAbGl0L2xvY2FsaXplJztcbmltcG9ydCB7IHNvdXJjZUxvY2FsZSwgdGFyZ2V0TG9jYWxlcyB9IGZyb20gJy4vZ2VuZXJhdGVkL2xvY2FsZS1jb2Rlcyc7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgeyBnZXRMb2NhbGUsIHNldExvY2FsZSB9ID0gY29uZmlndXJlTG9jYWxpemF0aW9uKHtcbiAgc291cmNlTG9jYWxlLFxuICB0YXJnZXRMb2NhbGVzLFxuICBsb2FkTG9jYWxlOiAobG9jYWxlOiBzdHJpbmcpID0+IGltcG9ydChgLi9nZW5lcmF0ZWQvJHtsb2NhbGV9LmpzYCksXG59KTtcbiIsImNvbnN0IGFwcGxpZWRDbGFzc01peGlucyA9IG5ldyBXZWFrTWFwKCk7XG5cbi8qKiBWZWZpZnkgaWYgdGhlIE1peGluIHdhcyBwcmV2aW91c2x5IGFwcGx5ZWRcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBtaXhpbiAgICAgIE1peGluIGJlaW5nIGFwcGx5ZWRcbiAqIEBwYXJhbSB7b2JqZWN0fSBzdXBlckNsYXNzICAgQ2xhc3MgcmVjZWl2aW5nIHRoZSBuZXcgbWl4aW5cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiB3YXNNaXhpblByZXZpb3VzbHlBcHBsaWVkKG1peGluLCBzdXBlckNsYXNzKSB7XG4gIGxldCBrbGFzcyA9IHN1cGVyQ2xhc3M7XG4gIHdoaWxlIChrbGFzcykge1xuICAgIGlmIChhcHBsaWVkQ2xhc3NNaXhpbnMuZ2V0KGtsYXNzKSA9PT0gbWl4aW4pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBrbGFzcyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihrbGFzcyk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKiogQXBwbHkgZWFjaCBtaXhpbiBpbiB0aGUgY2hhaW4gdG8gbWFrZSBzdXJlIHRoZXkgYXJlIG5vdCBhcHBsaWVkIG1vcmUgdGhhbiBvbmNlIHRvIHRoZSBmaW5hbCBjbGFzcy5cbiAqIEBleHBvcnRcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG1peGluICAgICAgTWl4aW4gdG8gYmUgYXBwbHllZFxuICogQHJldHVybnMge29iamVjdH0gICAgICAgICAgICBNaXhlZCBjbGFzcyB3aXRoIG1peGluIGFwcGxpZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZHVwZU1peGluKG1peGluKSB7XG4gIHJldHVybiBzdXBlckNsYXNzID0+IHtcbiAgICBpZiAod2FzTWl4aW5QcmV2aW91c2x5QXBwbGllZChtaXhpbiwgc3VwZXJDbGFzcykpIHtcbiAgICAgIHJldHVybiBzdXBlckNsYXNzO1xuICAgIH1cbiAgICBjb25zdCBtaXhlZENsYXNzID0gbWl4aW4oc3VwZXJDbGFzcyk7XG4gICAgYXBwbGllZENsYXNzTWl4aW5zLnNldChtaXhlZENsYXNzLCBtaXhpbik7XG4gICAgcmV0dXJuIG1peGVkQ2xhc3M7XG4gIH07XG59XG4iLCJpbXBvcnQgeyBkZWR1cGVNaXhpbiB9IGZyb20gJ0BvcGVuLXdjL2RlZHVwZS1taXhpbic7XG5pbXBvcnQgeyBhZG9wdFN0eWxlcyB9IGZyb20gJ0BsaXQvcmVhY3RpdmUtZWxlbWVudC9jc3MtdGFnLmpzJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3R5cGVzJykuUmVuZGVyT3B0aW9uc30gUmVuZGVyT3B0aW9uc1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi90eXBlcycpLlNjb3BlZEVsZW1lbnRzTWl4aW59IFNjb3BlZEVsZW1lbnRzTWl4aW5cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vdHlwZXMnKS5TY29wZWRFbGVtZW50c0hvc3R9IFNjb3BlZEVsZW1lbnRzSG9zdFxuICogQHR5cGVkZWYge2ltcG9ydCgnLi90eXBlcycpLlNjb3BlZEVsZW1lbnRzTWFwfSBTY29wZWRFbGVtZW50c01hcFxuICogQHR5cGVkZWYge2ltcG9ydCgnQGxpdC9yZWFjdGl2ZS1lbGVtZW50JykuQ1NTUmVzdWx0T3JOYXRpdmV9IENTU1Jlc3VsdE9yTmF0aXZlXG4gKi9cblxuLy8gQHRzLWlnbm9yZVxuY29uc3Qgc3VwcG9ydHNTY29wZWRSZWdpc3RyeSA9ICEhU2hhZG93Um9vdC5wcm90b3R5cGUuY3JlYXRlRWxlbWVudDtcblxuLyoqXG4gKiBAdGVtcGxhdGUge2ltcG9ydCgnLi90eXBlcycpLkNvbnN0cnVjdG9yPEhUTUxFbGVtZW50Pn0gVFxuICogQHBhcmFtIHtUfSBzdXBlcmNsYXNzXG4gKiBAcmV0dXJuIHtUICYgaW1wb3J0KCcuL3R5cGVzJykuQ29uc3RydWN0b3I8U2NvcGVkRWxlbWVudHNIb3N0Pn1cbiAqL1xuY29uc3QgU2NvcGVkRWxlbWVudHNNaXhpbkltcGxlbWVudGF0aW9uID0gc3VwZXJjbGFzcyA9PlxuICAvKiogQHR5cGUge1Njb3BlZEVsZW1lbnRzSG9zdH0gKi9cbiAgY2xhc3MgU2NvcGVkRWxlbWVudHNIb3N0IGV4dGVuZHMgc3VwZXJjbGFzcyB7XG4gICAgLyoqXG4gICAgICogT2J0YWlucyB0aGUgc2NvcGVkIGVsZW1lbnRzIGRlZmluaXRpb25zIG1hcCBpZiBzcGVjaWZpZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7U2NvcGVkRWxlbWVudHNNYXB9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBzY29wZWRFbGVtZW50cygpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPYnRhaW5zIHRoZSBTaGFkb3dSb290IG9wdGlvbnMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7U2hhZG93Um9vdEluaXR9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBzaGFkb3dSb290T3B0aW9ucygpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fc2hhZG93Um9vdE9wdGlvbnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBzaGFkb3dSb290IG9wdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1NoYWRvd1Jvb3RJbml0fSB2YWx1ZVxuICAgICAqL1xuICAgIHN0YXRpYyBzZXQgc2hhZG93Um9vdE9wdGlvbnModmFsdWUpIHtcbiAgICAgIHRoaXMuX19zaGFkb3dSb290T3B0aW9ucyA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9idGFpbnMgdGhlIGVsZW1lbnQgc3R5bGVzLlxuICAgICAqXG4gICAgICogQHJldHVybnMge0NTU1Jlc3VsdE9yTmF0aXZlW119XG4gICAgICovXG4gICAgc3RhdGljIGdldCBlbGVtZW50U3R5bGVzKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX19lbGVtZW50U3R5bGVzO1xuICAgIH1cblxuICAgIHN0YXRpYyBzZXQgZWxlbWVudFN0eWxlcyhzdHlsZXMpIHtcbiAgICAgIHRoaXMuX19lbGVtZW50U3R5bGVzID0gc3R5bGVzO1xuICAgIH1cblxuICAgIC8vIGVpdGhlciBUUyBvciBFU0xpbnQgd2lsbCBjb21wbGFpbiBoZXJlXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgY29uc3RydWN0b3IoLi4uX2FyZ3MpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgICAvKiogQHR5cGUge1JlbmRlck9wdGlvbnN9ICovXG4gICAgICB0aGlzLnJlbmRlck9wdGlvbnMgPSB0aGlzLnJlbmRlck9wdGlvbnMgfHwgdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9idGFpbnMgdGhlIEN1c3RvbUVsZW1lbnRSZWdpc3RyeSBhc3NvY2lhdGVkIHRvIHRoZSBTaGFkb3dSb290LlxuICAgICAqXG4gICAgICogQHJldHVybnMge0N1c3RvbUVsZW1lbnRSZWdpc3RyeX1cbiAgICAgKi9cbiAgICBnZXQgcmVnaXN0cnkoKSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5fX3JlZ2lzdHJ5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgQ3VzdG9tRWxlbWVudFJlZ2lzdHJ5IGFzc29jaWF0ZWQgdG8gdGhlIFNoYWRvd1Jvb3RcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Q3VzdG9tRWxlbWVudFJlZ2lzdHJ5fSByZWdpc3RyeVxuICAgICAqL1xuICAgIHNldCByZWdpc3RyeShyZWdpc3RyeSkge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5fX3JlZ2lzdHJ5ID0gcmVnaXN0cnk7XG4gICAgfVxuXG4gICAgY3JlYXRlUmVuZGVyUm9vdCgpIHtcbiAgICAgIGNvbnN0IHsgc2NvcGVkRWxlbWVudHMsIHNoYWRvd1Jvb3RPcHRpb25zLCBlbGVtZW50U3R5bGVzIH0gPVxuICAgICAgICAvKiogQHR5cGUge3R5cGVvZiBTY29wZWRFbGVtZW50c0hvc3R9ICovICh0aGlzLmNvbnN0cnVjdG9yKTtcblxuICAgICAgY29uc3Qgc2hvdWxkQ3JlYXRlUmVnaXN0cnkgPVxuICAgICAgICAhdGhpcy5yZWdpc3RyeSB8fFxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICh0aGlzLnJlZ2lzdHJ5ID09PSB0aGlzLmNvbnN0cnVjdG9yLl9fcmVnaXN0cnkgJiZcbiAgICAgICAgICAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuY29uc3RydWN0b3IsICdfX3JlZ2lzdHJ5JykpO1xuXG4gICAgICAvKipcbiAgICAgICAqIENyZWF0ZSBhIG5ldyByZWdpc3RyeSBpZjpcbiAgICAgICAqIC0gdGhlIHJlZ2lzdHJ5IGlzIG5vdCBkZWZpbmVkXG4gICAgICAgKiAtIHRoaXMgY2xhc3MgZG9lc24ndCBoYXZlIGl0cyBvd24gcmVnaXN0cnkgKkFORCogaGFzIG5vIHNoYXJlZCByZWdpc3RyeVxuICAgICAgICovXG4gICAgICBpZiAoc2hvdWxkQ3JlYXRlUmVnaXN0cnkpIHtcbiAgICAgICAgdGhpcy5yZWdpc3RyeSA9IHN1cHBvcnRzU2NvcGVkUmVnaXN0cnkgPyBuZXcgQ3VzdG9tRWxlbWVudFJlZ2lzdHJ5KCkgOiBjdXN0b21FbGVtZW50cztcbiAgICAgICAgZm9yIChjb25zdCBbdGFnTmFtZSwga2xhc3NdIG9mIE9iamVjdC5lbnRyaWVzKHNjb3BlZEVsZW1lbnRzKSkge1xuICAgICAgICAgIHRoaXMuZGVmaW5lU2NvcGVkRWxlbWVudCh0YWdOYW1lLCBrbGFzcyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqIEB0eXBlIHtTaGFkb3dSb290SW5pdH0gKi9cbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIG1vZGU6ICdvcGVuJyxcbiAgICAgICAgLi4uc2hhZG93Um9vdE9wdGlvbnMsXG4gICAgICAgIGN1c3RvbUVsZW1lbnRzOiB0aGlzLnJlZ2lzdHJ5LFxuICAgICAgfTtcblxuICAgICAgY29uc3QgY3JlYXRlZFJvb3QgPSB0aGlzLmF0dGFjaFNoYWRvdyhvcHRpb25zKTtcbiAgICAgIGlmIChzdXBwb3J0c1Njb3BlZFJlZ2lzdHJ5KSB7XG4gICAgICAgIHRoaXMucmVuZGVyT3B0aW9ucy5jcmVhdGlvblNjb3BlID0gY3JlYXRlZFJvb3Q7XG4gICAgICB9XG5cbiAgICAgIGlmIChjcmVhdGVkUm9vdCBpbnN0YW5jZW9mIFNoYWRvd1Jvb3QpIHtcbiAgICAgICAgYWRvcHRTdHlsZXMoY3JlYXRlZFJvb3QsIGVsZW1lbnRTdHlsZXMpO1xuICAgICAgICB0aGlzLnJlbmRlck9wdGlvbnMucmVuZGVyQmVmb3JlID0gdGhpcy5yZW5kZXJPcHRpb25zLnJlbmRlckJlZm9yZSB8fCBjcmVhdGVkUm9vdC5maXJzdENoaWxkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY3JlYXRlZFJvb3Q7XG4gICAgfVxuXG4gICAgY3JlYXRlU2NvcGVkRWxlbWVudCh0YWdOYW1lKSB7XG4gICAgICBjb25zdCByb290ID0gc3VwcG9ydHNTY29wZWRSZWdpc3RyeSA/IHRoaXMuc2hhZG93Um9vdCA6IGRvY3VtZW50O1xuICAgICAgLy8gQHRzLWlnbm9yZSBwb2x5ZmlsbCB0byBzdXBwb3J0IGNyZWF0ZUVsZW1lbnQgb24gc2hhZG93Um9vdCBpcyBsb2FkZWRcbiAgICAgIHJldHVybiByb290LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyBhIHNjb3BlZCBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWVcbiAgICAgKiBAcGFyYW0ge3R5cGVvZiBIVE1MRWxlbWVudH0ga2xhc3NcbiAgICAgKi9cbiAgICBkZWZpbmVTY29wZWRFbGVtZW50KHRhZ05hbWUsIGtsYXNzKSB7XG4gICAgICBjb25zdCByZWdpc3RlcmVkQ2xhc3MgPSB0aGlzLnJlZ2lzdHJ5LmdldCh0YWdOYW1lKTtcbiAgICAgIGlmIChyZWdpc3RlcmVkQ2xhc3MgJiYgc3VwcG9ydHNTY29wZWRSZWdpc3RyeSA9PT0gZmFsc2UgJiYgcmVnaXN0ZXJlZENsYXNzICE9PSBrbGFzcykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIGBZb3UgYXJlIHRyeWluZyB0byByZS1yZWdpc3RlciB0aGUgXCIke3RhZ05hbWV9XCIgY3VzdG9tIGVsZW1lbnQgd2l0aCBhIGRpZmZlcmVudCBjbGFzcyB2aWEgU2NvcGVkRWxlbWVudHNNaXhpbi5gLFxuICAgICAgICAgICAgJ1RoaXMgaXMgb25seSBwb3NzaWJsZSB3aXRoIGEgQ3VzdG9tRWxlbWVudFJlZ2lzdHJ5LicsXG4gICAgICAgICAgICAnWW91ciBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdGhpcyBmZWF0dXJlIHNvIHlvdSB3aWxsIG5lZWQgdG8gbG9hZCBhIHBvbHlmaWxsIGZvciBpdC4nLFxuICAgICAgICAgICAgJ0xvYWQgXCJAd2ViY29tcG9uZW50cy9zY29wZWQtY3VzdG9tLWVsZW1lbnQtcmVnaXN0cnlcIiBiZWZvcmUgeW91IHJlZ2lzdGVyIEFOWSB3ZWIgY29tcG9uZW50IHRvIHRoZSBnbG9iYWwgY3VzdG9tRWxlbWVudHMgcmVnaXN0cnkuJyxcbiAgICAgICAgICAgICdlLmcuIGFkZCBcIjxzY3JpcHQgc3JjPVwiL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9zY29wZWQtY3VzdG9tLWVsZW1lbnQtcmVnaXN0cnkvc2NvcGVkLWN1c3RvbS1lbGVtZW50LXJlZ2lzdHJ5Lm1pbi5qc1wiPjwvc2NyaXB0PlwiIGFzIHlvdXIgZmlyc3Qgc2NyaXB0IHRhZy4nLFxuICAgICAgICAgICAgJ0ZvciBtb3JlIGRldGFpbHMgeW91IGNhbiB2aXNpdCBodHRwczovL29wZW4td2Mub3JnL2RvY3MvZGV2ZWxvcG1lbnQvc2NvcGVkLWVsZW1lbnRzLycsXG4gICAgICAgICAgXS5qb2luKCdcXG4nKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmICghcmVnaXN0ZXJlZENsYXNzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZ2lzdHJ5LmRlZmluZSh0YWdOYW1lLCBrbGFzcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5yZWdpc3RyeS5nZXQodGFnTmFtZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgdXNlIHRoZSBuYXRpdmUgZWwudGFnTmFtZSBpbnN0ZWFkXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnTmFtZVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSB0YWcgbmFtZVxuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgZ2V0U2NvcGVkVGFnTmFtZSh0YWdOYW1lKSB7XG4gICAgICByZXR1cm4gdGFnTmFtZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCB1c2UgdGhlIG5hdGl2ZSBlbC50YWdOYW1lIGluc3RlYWRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWdOYW1lXG4gICAgICogQHJldHVybnMge3N0cmluZ30gdGhlIHRhZyBuYW1lXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBzdGF0aWMgZ2V0U2NvcGVkVGFnTmFtZSh0YWdOYW1lKSB7XG4gICAgICByZXR1cm4gdGFnTmFtZTtcbiAgICB9XG4gIH07XG5cbmV4cG9ydCBjb25zdCBTY29wZWRFbGVtZW50c01peGluID0gZGVkdXBlTWl4aW4oU2NvcGVkRWxlbWVudHNNaXhpbkltcGxlbWVudGF0aW9uKTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuY29uc3QgZT1lPT5uPT5cImZ1bmN0aW9uXCI9PXR5cGVvZiBuPygoZSxuKT0+KGN1c3RvbUVsZW1lbnRzLmRlZmluZShlLG4pLG4pKShlLG4pOigoZSxuKT0+e2NvbnN0e2tpbmQ6dCxlbGVtZW50czpzfT1uO3JldHVybntraW5kOnQsZWxlbWVudHM6cyxmaW5pc2hlcihuKXtjdXN0b21FbGVtZW50cy5kZWZpbmUoZSxuKX19fSkoZSxuKTtleHBvcnR7ZSBhcyBjdXN0b21FbGVtZW50fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWN1c3RvbS1lbGVtZW50LmpzLm1hcFxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5jb25zdCBpPShpLGUpPT5cIm1ldGhvZFwiPT09ZS5raW5kJiZlLmRlc2NyaXB0b3ImJiEoXCJ2YWx1ZVwiaW4gZS5kZXNjcmlwdG9yKT97Li4uZSxmaW5pc2hlcihuKXtuLmNyZWF0ZVByb3BlcnR5KGUua2V5LGkpfX06e2tpbmQ6XCJmaWVsZFwiLGtleTpTeW1ib2woKSxwbGFjZW1lbnQ6XCJvd25cIixkZXNjcmlwdG9yOnt9LG9yaWdpbmFsS2V5OmUua2V5LGluaXRpYWxpemVyKCl7XCJmdW5jdGlvblwiPT10eXBlb2YgZS5pbml0aWFsaXplciYmKHRoaXNbZS5rZXldPWUuaW5pdGlhbGl6ZXIuY2FsbCh0aGlzKSl9LGZpbmlzaGVyKG4pe24uY3JlYXRlUHJvcGVydHkoZS5rZXksaSl9fTtmdW5jdGlvbiBlKGUpe3JldHVybihuLHQpPT52b2lkIDAhPT10PygoaSxlLG4pPT57ZS5jb25zdHJ1Y3Rvci5jcmVhdGVQcm9wZXJ0eShuLGkpfSkoZSxuLHQpOmkoZSxuKX1leHBvcnR7ZSBhcyBwcm9wZXJ0eX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9wZXJ0eS5qcy5tYXBcbiIsImltcG9ydHtwcm9wZXJ0eSBhcyByfWZyb21cIi4vcHJvcGVydHkuanNcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL2Z1bmN0aW9uIHQodCl7cmV0dXJuIHIoey4uLnQsc3RhdGU6ITB9KX1leHBvcnR7dCBhcyBzdGF0ZX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGF0ZS5qcy5tYXBcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuY29uc3QgZT0oZSx0LG8pPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsbyxlKX0sdD0oZSx0KT0+KHtraW5kOlwibWV0aG9kXCIscGxhY2VtZW50OlwicHJvdG90eXBlXCIsa2V5OnQua2V5LGRlc2NyaXB0b3I6ZX0pLG89KHtmaW5pc2hlcjplLGRlc2NyaXB0b3I6dH0pPT4obyxuKT0+e3ZhciByO2lmKHZvaWQgMD09PW4pe2NvbnN0IG49bnVsbCE9PShyPW8ub3JpZ2luYWxLZXkpJiZ2b2lkIDAhPT1yP3I6by5rZXksaT1udWxsIT10P3traW5kOlwibWV0aG9kXCIscGxhY2VtZW50OlwicHJvdG90eXBlXCIsa2V5Om4sZGVzY3JpcHRvcjp0KG8ua2V5KX06ey4uLm8sa2V5Om59O3JldHVybiBudWxsIT1lJiYoaS5maW5pc2hlcj1mdW5jdGlvbih0KXtlKHQsbil9KSxpfXtjb25zdCByPW8uY29uc3RydWN0b3I7dm9pZCAwIT09dCYmT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sbix0KG4pKSxudWxsPT1lfHxlKHIsbil9fTtleHBvcnR7byBhcyBkZWNvcmF0ZVByb3BlcnR5LGUgYXMgbGVnYWN5UHJvdG90eXBlTWV0aG9kLHQgYXMgc3RhbmRhcmRQcm90b3R5cGVNZXRob2R9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZS5qcy5tYXBcbiIsImltcG9ydHtkZWNvcmF0ZVByb3BlcnR5IGFzIG99ZnJvbVwiLi9iYXNlLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi92YXIgbjtjb25zdCBlPW51bGwhPShudWxsPT09KG49d2luZG93LkhUTUxTbG90RWxlbWVudCl8fHZvaWQgMD09PW4/dm9pZCAwOm4ucHJvdG90eXBlLmFzc2lnbmVkRWxlbWVudHMpPyhvLG4pPT5vLmFzc2lnbmVkRWxlbWVudHMobik6KG8sbik9Pm8uYXNzaWduZWROb2RlcyhuKS5maWx0ZXIoKG89Pm8ubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERSkpO2Z1bmN0aW9uIGwobil7Y29uc3R7c2xvdDpsLHNlbGVjdG9yOnR9PW51bGwhPW4/bjp7fTtyZXR1cm4gbyh7ZGVzY3JpcHRvcjpvPT4oe2dldCgpe3ZhciBvO2NvbnN0IHI9XCJzbG90XCIrKGw/YFtuYW1lPSR7bH1dYDpcIjpub3QoW25hbWVdKVwiKSxpPW51bGw9PT0obz10aGlzLnJlbmRlclJvb3QpfHx2b2lkIDA9PT1vP3ZvaWQgMDpvLnF1ZXJ5U2VsZWN0b3Iocikscz1udWxsIT1pP2UoaSxuKTpbXTtyZXR1cm4gdD9zLmZpbHRlcigobz0+by5tYXRjaGVzKHQpKSk6c30sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KX0pfWV4cG9ydHtsIGFzIHF1ZXJ5QXNzaWduZWRFbGVtZW50c307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1xdWVyeS1hc3NpZ25lZC1lbGVtZW50cy5qcy5tYXBcbiIsImltcG9ydHtkZWNvcmF0ZVByb3BlcnR5IGFzIGV9ZnJvbVwiLi9iYXNlLmpzXCI7aW1wb3J0e3F1ZXJ5QXNzaWduZWRFbGVtZW50cyBhcyB0fWZyb21cIi4vcXVlcnktYXNzaWduZWQtZWxlbWVudHMuanNcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL2Z1bmN0aW9uIG8obyxuLHIpe2xldCBsLHM9bztyZXR1cm5cIm9iamVjdFwiPT10eXBlb2Ygbz8ocz1vLnNsb3QsbD1vKTpsPXtmbGF0dGVuOm59LHI/dCh7c2xvdDpzLGZsYXR0ZW46bixzZWxlY3RvcjpyfSk6ZSh7ZGVzY3JpcHRvcjplPT4oe2dldCgpe3ZhciBlLHQ7Y29uc3Qgbz1cInNsb3RcIisocz9gW25hbWU9JHtzfV1gOlwiOm5vdChbbmFtZV0pXCIpLG49bnVsbD09PShlPXRoaXMucmVuZGVyUm9vdCl8fHZvaWQgMD09PWU/dm9pZCAwOmUucXVlcnlTZWxlY3RvcihvKTtyZXR1cm4gbnVsbCE9PSh0PW51bGw9PW4/dm9pZCAwOm4uYXNzaWduZWROb2RlcyhsKSkmJnZvaWQgMCE9PXQ/dDpbXX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KX0pfWV4cG9ydHtvIGFzIHF1ZXJ5QXNzaWduZWROb2Rlc307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1xdWVyeS1hc3NpZ25lZC1ub2Rlcy5qcy5tYXBcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19lc0RlY29yYXRlKGN0b3IsIGRlc2NyaXB0b3JJbiwgZGVjb3JhdG9ycywgY29udGV4dEluLCBpbml0aWFsaXplcnMsIGV4dHJhSW5pdGlhbGl6ZXJzKSB7XHJcbiAgICBmdW5jdGlvbiBhY2NlcHQoZikgeyBpZiAoZiAhPT0gdm9pZCAwICYmIHR5cGVvZiBmICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGdW5jdGlvbiBleHBlY3RlZFwiKTsgcmV0dXJuIGY7IH1cclxuICAgIHZhciBraW5kID0gY29udGV4dEluLmtpbmQsIGtleSA9IGtpbmQgPT09IFwiZ2V0dGVyXCIgPyBcImdldFwiIDoga2luZCA9PT0gXCJzZXR0ZXJcIiA/IFwic2V0XCIgOiBcInZhbHVlXCI7XHJcbiAgICB2YXIgdGFyZ2V0ID0gIWRlc2NyaXB0b3JJbiAmJiBjdG9yID8gY29udGV4dEluW1wic3RhdGljXCJdID8gY3RvciA6IGN0b3IucHJvdG90eXBlIDogbnVsbDtcclxuICAgIHZhciBkZXNjcmlwdG9yID0gZGVzY3JpcHRvckluIHx8ICh0YXJnZXQgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgY29udGV4dEluLm5hbWUpIDoge30pO1xyXG4gICAgdmFyIF8sIGRvbmUgPSBmYWxzZTtcclxuICAgIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgdmFyIGNvbnRleHQgPSB7fTtcclxuICAgICAgICBmb3IgKHZhciBwIGluIGNvbnRleHRJbikgY29udGV4dFtwXSA9IHAgPT09IFwiYWNjZXNzXCIgPyB7fSA6IGNvbnRleHRJbltwXTtcclxuICAgICAgICBmb3IgKHZhciBwIGluIGNvbnRleHRJbi5hY2Nlc3MpIGNvbnRleHQuYWNjZXNzW3BdID0gY29udGV4dEluLmFjY2Vzc1twXTtcclxuICAgICAgICBjb250ZXh0LmFkZEluaXRpYWxpemVyID0gZnVuY3Rpb24gKGYpIHsgaWYgKGRvbmUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgYWRkIGluaXRpYWxpemVycyBhZnRlciBkZWNvcmF0aW9uIGhhcyBjb21wbGV0ZWRcIik7IGV4dHJhSW5pdGlhbGl6ZXJzLnB1c2goYWNjZXB0KGYgfHwgbnVsbCkpOyB9O1xyXG4gICAgICAgIHZhciByZXN1bHQgPSAoMCwgZGVjb3JhdG9yc1tpXSkoa2luZCA9PT0gXCJhY2Nlc3NvclwiID8geyBnZXQ6IGRlc2NyaXB0b3IuZ2V0LCBzZXQ6IGRlc2NyaXB0b3Iuc2V0IH0gOiBkZXNjcmlwdG9yW2tleV0sIGNvbnRleHQpO1xyXG4gICAgICAgIGlmIChraW5kID09PSBcImFjY2Vzc29yXCIpIHtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSBjb250aW51ZTtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCB8fCB0eXBlb2YgcmVzdWx0ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IGV4cGVjdGVkXCIpO1xyXG4gICAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuZ2V0KSkgZGVzY3JpcHRvci5nZXQgPSBfO1xyXG4gICAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuc2V0KSkgZGVzY3JpcHRvci5zZXQgPSBfO1xyXG4gICAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuaW5pdCkpIGluaXRpYWxpemVycy5wdXNoKF8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChfID0gYWNjZXB0KHJlc3VsdCkpIHtcclxuICAgICAgICAgICAgaWYgKGtpbmQgPT09IFwiZmllbGRcIikgaW5pdGlhbGl6ZXJzLnB1c2goXyk7XHJcbiAgICAgICAgICAgIGVsc2UgZGVzY3JpcHRvcltrZXldID0gXztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAodGFyZ2V0KSBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBjb250ZXh0SW4ubmFtZSwgZGVzY3JpcHRvcik7XHJcbiAgICBkb25lID0gdHJ1ZTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3J1bkluaXRpYWxpemVycyh0aGlzQXJnLCBpbml0aWFsaXplcnMsIHZhbHVlKSB7XHJcbiAgICB2YXIgdXNlVmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5pdGlhbGl6ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFsdWUgPSB1c2VWYWx1ZSA/IGluaXRpYWxpemVyc1tpXS5jYWxsKHRoaXNBcmcsIHZhbHVlKSA6IGluaXRpYWxpemVyc1tpXS5jYWxsKHRoaXNBcmcpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVzZVZhbHVlID8gdmFsdWUgOiB2b2lkIDA7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wcm9wS2V5KHgpIHtcclxuICAgIHJldHVybiB0eXBlb2YgeCA9PT0gXCJzeW1ib2xcIiA/IHggOiBcIlwiLmNvbmNhdCh4KTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NldEZ1bmN0aW9uTmFtZShmLCBuYW1lLCBwcmVmaXgpIHtcclxuICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzeW1ib2xcIikgbmFtZSA9IG5hbWUuZGVzY3JpcHRpb24gPyBcIltcIi5jb25jYXQobmFtZS5kZXNjcmlwdGlvbiwgXCJdXCIpIDogXCJcIjtcclxuICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZiwgXCJuYW1lXCIsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogcHJlZml4ID8gXCJcIi5jb25jYXQocHJlZml4LCBcIiBcIiwgbmFtZSkgOiBuYW1lIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChnICYmIChnID0gMCwgb3BbMF0gJiYgKF8gPSAwKSksIF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2NyZWF0ZUJpbmRpbmcgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xyXG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcclxuICAgICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20sIHBhY2spIHtcclxuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xyXG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xyXG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogZmFsc2UgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XHJcbn0pIDogZnVuY3Rpb24obywgdikge1xyXG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XHJcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkSW4oc3RhdGUsIHJlY2VpdmVyKSB7XHJcbiAgICBpZiAocmVjZWl2ZXIgPT09IG51bGwgfHwgKHR5cGVvZiByZWNlaXZlciAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgcmVjZWl2ZXIgIT09IFwiZnVuY3Rpb25cIikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgdXNlICdpbicgb3BlcmF0b3Igb24gbm9uLW9iamVjdFwiKTtcclxuICAgIHJldHVybiB0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyID09PSBzdGF0ZSA6IHN0YXRlLmhhcyhyZWNlaXZlcik7XHJcbn1cclxuIiwiZXhwb3J0IGZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNGdW5jdGlvbi5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gY3JlYXRlRXJyb3JDbGFzcyhjcmVhdGVJbXBsKSB7XG4gICAgdmFyIF9zdXBlciA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgICBFcnJvci5jYWxsKGluc3RhbmNlKTtcbiAgICAgICAgaW5zdGFuY2Uuc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICB9O1xuICAgIHZhciBjdG9yRnVuYyA9IGNyZWF0ZUltcGwoX3N1cGVyKTtcbiAgICBjdG9yRnVuYy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG4gICAgY3RvckZ1bmMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvckZ1bmM7XG4gICAgcmV0dXJuIGN0b3JGdW5jO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlRXJyb3JDbGFzcy5qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVFcnJvckNsYXNzIH0gZnJvbSAnLi9jcmVhdGVFcnJvckNsYXNzJztcbmV4cG9ydCB2YXIgVW5zdWJzY3JpcHRpb25FcnJvciA9IGNyZWF0ZUVycm9yQ2xhc3MoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiBVbnN1YnNjcmlwdGlvbkVycm9ySW1wbChlcnJvcnMpIHtcbiAgICAgICAgX3N1cGVyKHRoaXMpO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnJvcnNcbiAgICAgICAgICAgID8gZXJyb3JzLmxlbmd0aCArIFwiIGVycm9ycyBvY2N1cnJlZCBkdXJpbmcgdW5zdWJzY3JpcHRpb246XFxuXCIgKyBlcnJvcnMubWFwKGZ1bmN0aW9uIChlcnIsIGkpIHsgcmV0dXJuIGkgKyAxICsgXCIpIFwiICsgZXJyLnRvU3RyaW5nKCk7IH0pLmpvaW4oJ1xcbiAgJylcbiAgICAgICAgICAgIDogJyc7XG4gICAgICAgIHRoaXMubmFtZSA9ICdVbnN1YnNjcmlwdGlvbkVycm9yJztcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XG4gICAgfTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VW5zdWJzY3JpcHRpb25FcnJvci5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gYXJyUmVtb3ZlKGFyciwgaXRlbSkge1xuICAgIGlmIChhcnIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYXJyLmluZGV4T2YoaXRlbSk7XG4gICAgICAgIDAgPD0gaW5kZXggJiYgYXJyLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJyUmVtb3ZlLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWRBcnJheSwgX192YWx1ZXMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBVbnN1YnNjcmlwdGlvbkVycm9yIH0gZnJvbSAnLi91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xuaW1wb3J0IHsgYXJyUmVtb3ZlIH0gZnJvbSAnLi91dGlsL2FyclJlbW92ZSc7XG52YXIgU3Vic2NyaXB0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oaW5pdGlhbFRlYXJkb3duKSB7XG4gICAgICAgIHRoaXMuaW5pdGlhbFRlYXJkb3duID0gaW5pdGlhbFRlYXJkb3duO1xuICAgICAgICB0aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICB0aGlzLl9maW5hbGl6ZXJzID0gbnVsbDtcbiAgICB9XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVfMSwgX2EsIGVfMiwgX2I7XG4gICAgICAgIHZhciBlcnJvcnM7XG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICAgICAgaWYgKF9wYXJlbnRhZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfcGFyZW50YWdlXzEgPSBfX3ZhbHVlcyhfcGFyZW50YWdlKSwgX3BhcmVudGFnZV8xXzEgPSBfcGFyZW50YWdlXzEubmV4dCgpOyAhX3BhcmVudGFnZV8xXzEuZG9uZTsgX3BhcmVudGFnZV8xXzEgPSBfcGFyZW50YWdlXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudF8xID0gX3BhcmVudGFnZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50XzEucmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3BhcmVudGFnZV8xXzEgJiYgIV9wYXJlbnRhZ2VfMV8xLmRvbmUgJiYgKF9hID0gX3BhcmVudGFnZV8xLnJldHVybikpIF9hLmNhbGwoX3BhcmVudGFnZV8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3BhcmVudGFnZS5yZW1vdmUodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGluaXRpYWxGaW5hbGl6ZXIgPSB0aGlzLmluaXRpYWxUZWFyZG93bjtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGluaXRpYWxGaW5hbGl6ZXIpKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbEZpbmFsaXplcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvciA/IGUuZXJyb3JzIDogW2VdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBfZmluYWxpemVycyA9IHRoaXMuX2ZpbmFsaXplcnM7XG4gICAgICAgICAgICBpZiAoX2ZpbmFsaXplcnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9maW5hbGl6ZXJzID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZmluYWxpemVyc18xID0gX192YWx1ZXMoX2ZpbmFsaXplcnMpLCBfZmluYWxpemVyc18xXzEgPSBfZmluYWxpemVyc18xLm5leHQoKTsgIV9maW5hbGl6ZXJzXzFfMS5kb25lOyBfZmluYWxpemVyc18xXzEgPSBfZmluYWxpemVyc18xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbmFsaXplciA9IF9maW5hbGl6ZXJzXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhlY0ZpbmFsaXplcihmaW5hbGl6ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycyAhPT0gbnVsbCAmJiBlcnJvcnMgIT09IHZvaWQgMCA/IGVycm9ycyA6IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShbXSwgX19yZWFkKGVycm9ycykpLCBfX3JlYWQoZXJyLmVycm9ycykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVfMl8xKSB7IGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07IH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZmluYWxpemVyc18xXzEgJiYgIV9maW5hbGl6ZXJzXzFfMS5kb25lICYmIChfYiA9IF9maW5hbGl6ZXJzXzEucmV0dXJuKSkgX2IuY2FsbChfZmluYWxpemVyc18xKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVycm9ycykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbnN1YnNjcmlwdGlvbkVycm9yKGVycm9ycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHRlYXJkb3duKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHRlYXJkb3duICYmIHRlYXJkb3duICE9PSB0aGlzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBleGVjRmluYWxpemVyKHRlYXJkb3duKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0ZWFyZG93biBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGVhcmRvd24uY2xvc2VkIHx8IHRlYXJkb3duLl9oYXNQYXJlbnQodGhpcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0ZWFyZG93bi5fYWRkUGFyZW50KHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAodGhpcy5fZmluYWxpemVycyA9IChfYSA9IHRoaXMuX2ZpbmFsaXplcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFtdKS5wdXNoKHRlYXJkb3duKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5faGFzUGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgcmV0dXJuIF9wYXJlbnRhZ2UgPT09IHBhcmVudCB8fCAoQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSAmJiBfcGFyZW50YWdlLmluY2x1ZGVzKHBhcmVudCkpO1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5fYWRkUGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSA/IChfcGFyZW50YWdlLnB1c2gocGFyZW50KSwgX3BhcmVudGFnZSkgOiBfcGFyZW50YWdlID8gW19wYXJlbnRhZ2UsIHBhcmVudF0gOiBwYXJlbnQ7XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9yZW1vdmVQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICBpZiAoX3BhcmVudGFnZSA9PT0gcGFyZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkpIHtcbiAgICAgICAgICAgIGFyclJlbW92ZShfcGFyZW50YWdlLCBwYXJlbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICh0ZWFyZG93bikge1xuICAgICAgICB2YXIgX2ZpbmFsaXplcnMgPSB0aGlzLl9maW5hbGl6ZXJzO1xuICAgICAgICBfZmluYWxpemVycyAmJiBhcnJSZW1vdmUoX2ZpbmFsaXplcnMsIHRlYXJkb3duKTtcbiAgICAgICAgaWYgKHRlYXJkb3duIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0ZWFyZG93bi5fcmVtb3ZlUGFyZW50KHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24uRU1QVFkgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZW1wdHkgPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIGVtcHR5LmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBlbXB0eTtcbiAgICB9KSgpO1xuICAgIHJldHVybiBTdWJzY3JpcHRpb247XG59KCkpO1xuZXhwb3J0IHsgU3Vic2NyaXB0aW9uIH07XG5leHBvcnQgdmFyIEVNUFRZX1NVQlNDUklQVElPTiA9IFN1YnNjcmlwdGlvbi5FTVBUWTtcbmV4cG9ydCBmdW5jdGlvbiBpc1N1YnNjcmlwdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24gfHxcbiAgICAgICAgKHZhbHVlICYmICdjbG9zZWQnIGluIHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUucmVtb3ZlKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmFkZCkgJiYgaXNGdW5jdGlvbih2YWx1ZS51bnN1YnNjcmliZSkpKTtcbn1cbmZ1bmN0aW9uIGV4ZWNGaW5hbGl6ZXIoZmluYWxpemVyKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oZmluYWxpemVyKSkge1xuICAgICAgICBmaW5hbGl6ZXIoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGZpbmFsaXplci51bnN1YnNjcmliZSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmlwdGlvbi5qcy5tYXAiLCJleHBvcnQgdmFyIGNvbmZpZyA9IHtcbiAgICBvblVuaGFuZGxlZEVycm9yOiBudWxsLFxuICAgIG9uU3RvcHBlZE5vdGlmaWNhdGlvbjogbnVsbCxcbiAgICBQcm9taXNlOiB1bmRlZmluZWQsXG4gICAgdXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZzogZmFsc2UsXG4gICAgdXNlRGVwcmVjYXRlZE5leHRDb250ZXh0OiBmYWxzZSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWcuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5leHBvcnQgdmFyIHRpbWVvdXRQcm92aWRlciA9IHtcbiAgICBzZXRUaW1lb3V0OiBmdW5jdGlvbiAoaGFuZGxlciwgdGltZW91dCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsZWdhdGUgPSB0aW1lb3V0UHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuc2V0VGltZW91dCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlLnNldFRpbWVvdXQuYXBwbHkoZGVsZWdhdGUsIF9fc3ByZWFkQXJyYXkoW2hhbmRsZXIsIHRpbWVvdXRdLCBfX3JlYWQoYXJncykpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2V0VGltZW91dC5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW2hhbmRsZXIsIHRpbWVvdXRdLCBfX3JlYWQoYXJncykpKTtcbiAgICB9LFxuICAgIGNsZWFyVGltZW91dDogZnVuY3Rpb24gKGhhbmRsZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSB0aW1lb3V0UHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIHJldHVybiAoKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5jbGVhclRpbWVvdXQpIHx8IGNsZWFyVGltZW91dCkoaGFuZGxlKTtcbiAgICB9LFxuICAgIGRlbGVnYXRlOiB1bmRlZmluZWQsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZW91dFByb3ZpZGVyLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBub29wKCkgeyB9XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub29wLmpzLm1hcCIsImV4cG9ydCB2YXIgQ09NUExFVEVfTk9USUZJQ0FUSU9OID0gKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignQycsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTsgfSkoKTtcbmV4cG9ydCBmdW5jdGlvbiBlcnJvck5vdGlmaWNhdGlvbihlcnJvcikge1xuICAgIHJldHVybiBjcmVhdGVOb3RpZmljYXRpb24oJ0UnLCB1bmRlZmluZWQsIGVycm9yKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBuZXh0Tm90aWZpY2F0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignTicsIHZhbHVlLCB1bmRlZmluZWQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU5vdGlmaWNhdGlvbihraW5kLCB2YWx1ZSwgZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBraW5kOiBraW5kLFxuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Tm90aWZpY2F0aW9uRmFjdG9yaWVzLmpzLm1hcCIsImltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZyc7XG52YXIgY29udGV4dCA9IG51bGw7XG5leHBvcnQgZnVuY3Rpb24gZXJyb3JDb250ZXh0KGNiKSB7XG4gICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgIHZhciBpc1Jvb3QgPSAhY29udGV4dDtcbiAgICAgICAgaWYgKGlzUm9vdCkge1xuICAgICAgICAgICAgY29udGV4dCA9IHsgZXJyb3JUaHJvd246IGZhbHNlLCBlcnJvcjogbnVsbCB9O1xuICAgICAgICB9XG4gICAgICAgIGNiKCk7XG4gICAgICAgIGlmIChpc1Jvb3QpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IGNvbnRleHQsIGVycm9yVGhyb3duID0gX2EuZXJyb3JUaHJvd24sIGVycm9yID0gX2EuZXJyb3I7XG4gICAgICAgICAgICBjb250ZXh0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChlcnJvclRocm93bikge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjYigpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBjYXB0dXJlRXJyb3IoZXJyKSB7XG4gICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nICYmIGNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5lcnJvclRocm93biA9IHRydWU7XG4gICAgICAgIGNvbnRleHQuZXJyb3IgPSBlcnI7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JDb250ZXh0LmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IGlzU3Vic2NyaXB0aW9uLCBTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyByZXBvcnRVbmhhbmRsZWRFcnJvciB9IGZyb20gJy4vdXRpbC9yZXBvcnRVbmhhbmRsZWRFcnJvcic7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi91dGlsL25vb3AnO1xuaW1wb3J0IHsgbmV4dE5vdGlmaWNhdGlvbiwgZXJyb3JOb3RpZmljYXRpb24sIENPTVBMRVRFX05PVElGSUNBVElPTiB9IGZyb20gJy4vTm90aWZpY2F0aW9uRmFjdG9yaWVzJztcbmltcG9ydCB7IHRpbWVvdXRQcm92aWRlciB9IGZyb20gJy4vc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlcic7XG5pbXBvcnQgeyBjYXB0dXJlRXJyb3IgfSBmcm9tICcuL3V0aWwvZXJyb3JDb250ZXh0JztcbnZhciBTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICBpZiAoZGVzdGluYXRpb24pIHtcbiAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgICAgICBpZiAoaXNTdWJzY3JpcHRpb24oZGVzdGluYXRpb24pKSB7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24uYWRkKF90aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gRU1QVFlfT0JTRVJWRVI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdWJzY3JpYmVyLmNyZWF0ZSA9IGZ1bmN0aW9uIChuZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTYWZlU3Vic2NyaWJlcihuZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24obmV4dE5vdGlmaWNhdGlvbih2YWx1ZSksIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fbmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24oZXJyb3JOb3RpZmljYXRpb24oZXJyKSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKENPTVBMRVRFX05PVElGSUNBVElPTiwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFN1YnNjcmliZXI7XG59KFN1YnNjcmlwdGlvbikpO1xuZXhwb3J0IHsgU3Vic2NyaWJlciB9O1xudmFyIF9iaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQ7XG5mdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIF9iaW5kLmNhbGwoZm4sIHRoaXNBcmcpO1xufVxudmFyIENvbnN1bWVyT2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbnN1bWVyT2JzZXJ2ZXIocGFydGlhbE9ic2VydmVyKSB7XG4gICAgICAgIHRoaXMucGFydGlhbE9ic2VydmVyID0gcGFydGlhbE9ic2VydmVyO1xuICAgIH1cbiAgICBDb25zdW1lck9ic2VydmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXIgPSB0aGlzLnBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKHBhcnRpYWxPYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29uc3VtZXJPYnNlcnZlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXIgPSB0aGlzLnBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKHBhcnRpYWxPYnNlcnZlci5lcnJvcikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbnN1bWVyT2JzZXJ2ZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcGFydGlhbE9ic2VydmVyID0gdGhpcy5wYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgICAgIGlmIChwYXJ0aWFsT2JzZXJ2ZXIuY29tcGxldGUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBDb25zdW1lck9ic2VydmVyO1xufSgpKTtcbnZhciBTYWZlU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFNhZmVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNhZmVTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgdmFyIHBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ob2JzZXJ2ZXJPck5leHQpIHx8ICFvYnNlcnZlck9yTmV4dCkge1xuICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyID0ge1xuICAgICAgICAgICAgICAgIG5leHQ6IChvYnNlcnZlck9yTmV4dCAhPT0gbnVsbCAmJiBvYnNlcnZlck9yTmV4dCAhPT0gdm9pZCAwID8gb2JzZXJ2ZXJPck5leHQgOiB1bmRlZmluZWQpLFxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvciAhPT0gbnVsbCAmJiBlcnJvciAhPT0gdm9pZCAwID8gZXJyb3IgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IGNvbXBsZXRlICE9PSBudWxsICYmIGNvbXBsZXRlICE9PSB2b2lkIDAgPyBjb21wbGV0ZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgY29udGV4dF8xO1xuICAgICAgICAgICAgaWYgKF90aGlzICYmIGNvbmZpZy51c2VEZXByZWNhdGVkTmV4dENvbnRleHQpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzEgPSBPYmplY3QuY3JlYXRlKG9ic2VydmVyT3JOZXh0KTtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzEudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy51bnN1YnNjcmliZSgpOyB9O1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dDogb2JzZXJ2ZXJPck5leHQubmV4dCAmJiBiaW5kKG9ic2VydmVyT3JOZXh0Lm5leHQsIGNvbnRleHRfMSksXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBvYnNlcnZlck9yTmV4dC5lcnJvciAmJiBiaW5kKG9ic2VydmVyT3JOZXh0LmVycm9yLCBjb250ZXh0XzEpLFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogb2JzZXJ2ZXJPck5leHQuY29tcGxldGUgJiYgYmluZChvYnNlcnZlck9yTmV4dC5jb21wbGV0ZSwgY29udGV4dF8xKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyID0gb2JzZXJ2ZXJPck5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBuZXcgQ29uc3VtZXJPYnNlcnZlcihwYXJ0aWFsT2JzZXJ2ZXIpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBTYWZlU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgU2FmZVN1YnNjcmliZXIgfTtcbmZ1bmN0aW9uIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKSB7XG4gICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgIGNhcHR1cmVFcnJvcihlcnJvcik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXBvcnRVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgfVxufVxuZnVuY3Rpb24gZGVmYXVsdEVycm9ySGFuZGxlcihlcnIpIHtcbiAgICB0aHJvdyBlcnI7XG59XG5mdW5jdGlvbiBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbiwgc3Vic2NyaWJlcikge1xuICAgIHZhciBvblN0b3BwZWROb3RpZmljYXRpb24gPSBjb25maWcub25TdG9wcGVkTm90aWZpY2F0aW9uO1xuICAgIG9uU3RvcHBlZE5vdGlmaWNhdGlvbiAmJiB0aW1lb3V0UHJvdmlkZXIuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBvblN0b3BwZWROb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCBzdWJzY3JpYmVyKTsgfSk7XG59XG5leHBvcnQgdmFyIEVNUFRZX09CU0VSVkVSID0ge1xuICAgIGNsb3NlZDogdHJ1ZSxcbiAgICBuZXh0OiBub29wLFxuICAgIGVycm9yOiBkZWZhdWx0RXJyb3JIYW5kbGVyLFxuICAgIGNvbXBsZXRlOiBub29wLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmliZXIuanMubWFwIiwiaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB7IHRpbWVvdXRQcm92aWRlciB9IGZyb20gJy4uL3NjaGVkdWxlci90aW1lb3V0UHJvdmlkZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHJlcG9ydFVuaGFuZGxlZEVycm9yKGVycikge1xuICAgIHRpbWVvdXRQcm92aWRlci5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9uVW5oYW5kbGVkRXJyb3IgPSBjb25maWcub25VbmhhbmRsZWRFcnJvcjtcbiAgICAgICAgaWYgKG9uVW5oYW5kbGVkRXJyb3IpIHtcbiAgICAgICAgICAgIG9uVW5oYW5kbGVkRXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVwb3J0VW5oYW5kbGVkRXJyb3IuanMubWFwIiwiZXhwb3J0IHZhciBvYnNlcnZhYmxlID0gKGZ1bmN0aW9uICgpIHsgcmV0dXJuICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5vYnNlcnZhYmxlKSB8fCAnQEBvYnNlcnZhYmxlJzsgfSkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmFibGUuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KHgpIHtcbiAgICByZXR1cm4geDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlkZW50aXR5LmpzLm1hcCIsImltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi9pZGVudGl0eSc7XG5leHBvcnQgZnVuY3Rpb24gcGlwZSgpIHtcbiAgICB2YXIgZm5zID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgZm5zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBwaXBlRnJvbUFycmF5KGZucyk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGlwZUZyb21BcnJheShmbnMpIHtcbiAgICBpZiAoZm5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gaWRlbnRpdHk7XG4gICAgfVxuICAgIGlmIChmbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBmbnNbMF07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBwaXBlZChpbnB1dCkge1xuICAgICAgICByZXR1cm4gZm5zLnJlZHVjZShmdW5jdGlvbiAocHJldiwgZm4pIHsgcmV0dXJuIGZuKHByZXYpOyB9LCBpbnB1dCk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBpcGUuanMubWFwIiwiaW1wb3J0IHsgU2FmZVN1YnNjcmliZXIsIFN1YnNjcmliZXIgfSBmcm9tICcuL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgaXNTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBwaXBlRnJvbUFycmF5IH0gZnJvbSAnLi91dGlsL3BpcGUnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IGVycm9yQ29udGV4dCB9IGZyb20gJy4vdXRpbC9lcnJvckNvbnRleHQnO1xudmFyIE9ic2VydmFibGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9ic2VydmFibGUoc3Vic2NyaWJlKSB7XG4gICAgICAgIGlmIChzdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5saWZ0ID0gZnVuY3Rpb24gKG9wZXJhdG9yKSB7XG4gICAgICAgIHZhciBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGUoKTtcbiAgICAgICAgb2JzZXJ2YWJsZS5zb3VyY2UgPSB0aGlzO1xuICAgICAgICBvYnNlcnZhYmxlLm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHN1YnNjcmliZXIgPSBpc1N1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQpID8gb2JzZXJ2ZXJPck5leHQgOiBuZXcgU2FmZVN1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgICAgIGVycm9yQ29udGV4dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcywgb3BlcmF0b3IgPSBfYS5vcGVyYXRvciwgc291cmNlID0gX2Euc291cmNlO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQob3BlcmF0b3JcbiAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yLmNhbGwoc3Vic2NyaWJlciwgc291cmNlKVxuICAgICAgICAgICAgICAgIDogc291cmNlXG4gICAgICAgICAgICAgICAgICAgID9cbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9zdWJzY3JpYmUoc3Vic2NyaWJlcilcbiAgICAgICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3RyeVN1YnNjcmliZShzdWJzY3JpYmVyKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc3Vic2NyaWJlcjtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl90cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiAoc2luaykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N1YnNjcmliZShzaW5rKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzaW5rLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAobmV4dCwgcHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcHJvbWlzZUN0b3IgPSBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcik7XG4gICAgICAgIHJldHVybiBuZXcgcHJvbWlzZUN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHN1YnNjcmliZXIgPSBuZXcgU2FmZVN1YnNjcmliZXIoe1xuICAgICAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiByZWplY3QsXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IHJlc29sdmUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5zb3VyY2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZVtTeW1ib2xfb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9wZXJhdGlvbnMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbnNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGlwZUZyb21BcnJheShvcGVyYXRpb25zKSh0aGlzKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnRvUHJvbWlzZSA9IGZ1bmN0aW9uIChwcm9taXNlQ3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBwcm9taXNlQ3RvciA9IGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKTtcbiAgICAgICAgcmV0dXJuIG5ldyBwcm9taXNlQ3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHgpIHsgcmV0dXJuICh2YWx1ZSA9IHgpOyB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiByZWplY3QoZXJyKTsgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZSh2YWx1ZSk7IH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKHN1YnNjcmliZSkge1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoc3Vic2NyaWJlKTtcbiAgICB9O1xuICAgIHJldHVybiBPYnNlcnZhYmxlO1xufSgpKTtcbmV4cG9ydCB7IE9ic2VydmFibGUgfTtcbmZ1bmN0aW9uIGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoX2EgPSBwcm9taXNlQ3RvciAhPT0gbnVsbCAmJiBwcm9taXNlQ3RvciAhPT0gdm9pZCAwID8gcHJvbWlzZUN0b3IgOiBjb25maWcuUHJvbWlzZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogUHJvbWlzZTtcbn1cbmZ1bmN0aW9uIGlzT2JzZXJ2ZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS5uZXh0KSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmVycm9yKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmNvbXBsZXRlKTtcbn1cbmZ1bmN0aW9uIGlzU3Vic2NyaWJlcih2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgJiYgdmFsdWUgaW5zdGFuY2VvZiBTdWJzY3JpYmVyKSB8fCAoaXNPYnNlcnZlcih2YWx1ZSkgJiYgaXNTdWJzY3JpcHRpb24odmFsdWUpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9ic2VydmFibGUuanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlRXJyb3JDbGFzcyB9IGZyb20gJy4vY3JlYXRlRXJyb3JDbGFzcyc7XG5leHBvcnQgdmFyIE9iamVjdFVuc3Vic2NyaWJlZEVycm9yID0gY3JlYXRlRXJyb3JDbGFzcyhmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIE9iamVjdFVuc3Vic2NyaWJlZEVycm9ySW1wbCgpIHtcbiAgICAgICAgX3N1cGVyKHRoaXMpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3InO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnb2JqZWN0IHVuc3Vic2NyaWJlZCc7XG4gICAgfTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IuanMubWFwIiwiLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3dcbmV4cG9ydCBlbnVtIGh0dHBNZXRob2Qge1xuICBnZXQgPSAnR0VUJyxcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGF0YVNlcnZpY2Uge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgcHJpdmF0ZSBzdGF0aWMgX2RhdGFTZXJ2aWNlOiBEYXRhU2VydmljZTtcblxuICBwdWJsaWMgZ2V0IGJhc2VVcmwoKSB7XG4gICAgY29uc3QgeyBwcm90b2NvbCwgaG9zdCwgcGF0aG5hbWUgfSA9IHdpbmRvdy5sb2NhdGlvbjtcblxuICAgIGxldCB0ZW5hbnRJZCA9ICcvJztcbiAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1lc2NhcGUgKi9cbiAgICBjb25zdCBtYXRjaCA9IHBhdGhuYW1lLm1hdGNoKC9eXFwvW15cXC9dK1xcLy8pO1xuICAgIGlmIChtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAwKSB7XG4gICAgICB0ZW5hbnRJZCA9IG1hdGNoLmF0KDApO1xuICAgIH1cblxuICAgIHJldHVybiBgJHtwcm90b2NvbH0vLyR7aG9zdH0ke3RlbmFudElkfW1vZGVsZXIvYXBpYDtcbiAgfVxuXG4gIHB1YmxpYyBodHRwR2V0ID0gYXN5bmMgKHVybDogc3RyaW5nKTogUHJvbWlzZTxSZXNwb25zZT4gPT4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgZmV0Y2goXG4gICAgICAgIGAke3RoaXMuYmFzZVVybH0ke3VybC5zdGFydHNXaXRoKCcvJykgPyB1cmwgOiBgLyR7dXJsfWB9YCxcbiAgICAgICAge1xuICAgICAgICAgIG1ldGhvZDogaHR0cE1ldGhvZC5nZXQsXG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIC8vIFRPRE86IEFkZCBnZW5lcmFsIGVycm9yIGhhbmRsaW5nIGZvciBHRVQgbWV0aG9kXG4gICAgICBjb25zb2xlLmVycm9yKCdIVFRQIEdFVCBlcnJvcjogJywgZXgpO1xuICAgICAgdGhyb3cgZXg7XG4gICAgfVxuICB9O1xuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UgPSAoKTogRGF0YVNlcnZpY2UgPT4ge1xuICAgIGlmICghdGhpcy5fZGF0YVNlcnZpY2UpIHtcbiAgICAgIHRoaXMuX2RhdGFTZXJ2aWNlID0gbmV3IERhdGFTZXJ2aWNlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2RhdGFTZXJ2aWNlO1xuICB9O1xuXG4gIHB1YmxpYyBzdGF0aWMgcmVzZXRJbnN0YW5jZSA9ICgpOiBEYXRhU2VydmljZSA9PiB7XG4gICAgdGhpcy5fZGF0YVNlcnZpY2UgPSBuZXcgRGF0YVNlcnZpY2UoKTtcblxuICAgIHJldHVybiB0aGlzLl9kYXRhU2VydmljZTtcbiAgfTtcbn1cbiIsImltcG9ydCB7IF9fZXh0ZW5kcywgX192YWx1ZXMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuL09ic2VydmFibGUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uLCBFTVBUWV9TVUJTQ1JJUFRJT04gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBPYmplY3RVbnN1YnNjcmliZWRFcnJvciB9IGZyb20gJy4vdXRpbC9PYmplY3RVbnN1YnNjcmliZWRFcnJvcic7XG5pbXBvcnQgeyBhcnJSZW1vdmUgfSBmcm9tICcuL3V0aWwvYXJyUmVtb3ZlJztcbmltcG9ydCB7IGVycm9yQ29udGV4dCB9IGZyb20gJy4vdXRpbC9lcnJvckNvbnRleHQnO1xudmFyIFN1YmplY3QgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YmplY3QoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5jdXJyZW50T2JzZXJ2ZXJzID0gbnVsbDtcbiAgICAgICAgX3RoaXMub2JzZXJ2ZXJzID0gW107XG4gICAgICAgIF90aGlzLmlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5oYXNFcnJvciA9IGZhbHNlO1xuICAgICAgICBfdGhpcy50aHJvd25FcnJvciA9IG51bGw7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3ViamVjdC5wcm90b3R5cGUubGlmdCA9IGZ1bmN0aW9uIChvcGVyYXRvcikge1xuICAgICAgICB2YXIgc3ViamVjdCA9IG5ldyBBbm9ueW1vdXNTdWJqZWN0KHRoaXMsIHRoaXMpO1xuICAgICAgICBzdWJqZWN0Lm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgICAgIHJldHVybiBzdWJqZWN0O1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX3Rocm93SWZDbG9zZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgZXJyb3JDb250ZXh0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICAgICAgX3RoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgICAgIGlmICghX3RoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5jdXJyZW50T2JzZXJ2ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmN1cnJlbnRPYnNlcnZlcnMgPSBBcnJheS5mcm9tKF90aGlzLm9ic2VydmVycyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9iID0gX192YWx1ZXMoX3RoaXMuY3VycmVudE9ic2VydmVycyksIF9jID0gX2IubmV4dCgpOyAhX2MuZG9uZTsgX2MgPSBfYi5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvYnNlcnZlciA9IF9jLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBlcnJvckNvbnRleHQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgICAgIGlmICghX3RoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaGFzRXJyb3IgPSBfdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF90aGlzLnRocm93bkVycm9yID0gZXJyO1xuICAgICAgICAgICAgICAgIHZhciBvYnNlcnZlcnMgPSBfdGhpcy5vYnNlcnZlcnM7XG4gICAgICAgICAgICAgICAgd2hpbGUgKG9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXJzLnNoaWZ0KCkuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGVycm9yQ29udGV4dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBvYnNlcnZlcnMgPSBfdGhpcy5vYnNlcnZlcnM7XG4gICAgICAgICAgICAgICAgd2hpbGUgKG9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXJzLnNoaWZ0KCkuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLm9ic2VydmVycyA9IHRoaXMuY3VycmVudE9ic2VydmVycyA9IG51bGw7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3ViamVjdC5wcm90b3R5cGUsIFwib2JzZXJ2ZWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHJldHVybiAoKF9hID0gdGhpcy5vYnNlcnZlcnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sZW5ndGgpID4gMDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIFN1YmplY3QucHJvdG90eXBlLl90cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB0aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLl90cnlTdWJzY3JpYmUuY2FsbCh0aGlzLCBzdWJzY3JpYmVyKTtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB0aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgIHRoaXMuX2NoZWNrRmluYWxpemVkU3RhdHVzZXMoc3Vic2NyaWJlcik7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbm5lclN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLl9pbm5lclN1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGhhc0Vycm9yID0gX2EuaGFzRXJyb3IsIGlzU3RvcHBlZCA9IF9hLmlzU3RvcHBlZCwgb2JzZXJ2ZXJzID0gX2Eub2JzZXJ2ZXJzO1xuICAgICAgICBpZiAoaGFzRXJyb3IgfHwgaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gRU1QVFlfU1VCU0NSSVBUSU9OO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3VycmVudE9ic2VydmVycyA9IG51bGw7XG4gICAgICAgIG9ic2VydmVycy5wdXNoKHN1YnNjcmliZXIpO1xuICAgICAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5jdXJyZW50T2JzZXJ2ZXJzID0gbnVsbDtcbiAgICAgICAgICAgIGFyclJlbW92ZShvYnNlcnZlcnMsIHN1YnNjcmliZXIpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLl9jaGVja0ZpbmFsaXplZFN0YXR1c2VzID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgaGFzRXJyb3IgPSBfYS5oYXNFcnJvciwgdGhyb3duRXJyb3IgPSBfYS50aHJvd25FcnJvciwgaXNTdG9wcGVkID0gX2EuaXNTdG9wcGVkO1xuICAgICAgICBpZiAoaGFzRXJyb3IpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IodGhyb3duRXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzU3RvcHBlZCkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5hc09ic2VydmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGUoKTtcbiAgICAgICAgb2JzZXJ2YWJsZS5zb3VyY2UgPSB0aGlzO1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbiAgICB9O1xuICAgIFN1YmplY3QuY3JlYXRlID0gZnVuY3Rpb24gKGRlc3RpbmF0aW9uLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBbm9ueW1vdXNTdWJqZWN0KGRlc3RpbmF0aW9uLCBzb3VyY2UpO1xuICAgIH07XG4gICAgcmV0dXJuIFN1YmplY3Q7XG59KE9ic2VydmFibGUpKTtcbmV4cG9ydCB7IFN1YmplY3QgfTtcbnZhciBBbm9ueW1vdXNTdWJqZWN0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQW5vbnltb3VzU3ViamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBbm9ueW1vdXNTdWJqZWN0KGRlc3RpbmF0aW9uLCBzb3VyY2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgX3RoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEFub255bW91c1N1YmplY3QucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy5kZXN0aW5hdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm5leHQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCB2YWx1ZSk7XG4gICAgfTtcbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy5kZXN0aW5hdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmVycm9yKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgZXJyKTtcbiAgICB9O1xuICAgIEFub255bW91c1N1YmplY3QucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmRlc3RpbmF0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29tcGxldGUpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hKTtcbiAgICB9O1xuICAgIEFub255bW91c1N1YmplY3QucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICByZXR1cm4gKF9iID0gKF9hID0gdGhpcy5zb3VyY2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdWJzY3JpYmUoc3Vic2NyaWJlcikpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IEVNUFRZX1NVQlNDUklQVElPTjtcbiAgICB9O1xuICAgIHJldHVybiBBbm9ueW1vdXNTdWJqZWN0O1xufShTdWJqZWN0KSk7XG5leHBvcnQgeyBBbm9ueW1vdXNTdWJqZWN0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJqZWN0LmpzLm1hcCIsImltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGludGVyZmFjZSBQcm9wZXJ0eUNoYW5nZURhdGEge1xuICBwcm9wZXJ0eU5hbWU6IHN0cmluZyB8IG51bWJlcjtcbiAgcHJvcGVydHlWYWx1ZTogc3RyaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb250ZXh0U2VydmljZSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICBwcml2YXRlIHN0YXRpYyBfY29udGV4dFNlcnZpY2U6IENvbnRleHRTZXJ2aWNlO1xuXG4gIHB1YmxpYyBwcm9wZXJ0eUNoYW5nZVN1YmplY3Q6IFN1YmplY3Q8UHJvcGVydHlDaGFuZ2VEYXRhPiA9XG4gICAgbmV3IFN1YmplY3Q8UHJvcGVydHlDaGFuZ2VEYXRhPigpO1xuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoKTogQ29udGV4dFNlcnZpY2Uge1xuICAgIGlmICghdGhpcy5fY29udGV4dFNlcnZpY2UpIHtcbiAgICAgIHRoaXMuX2NvbnRleHRTZXJ2aWNlID0gbmV3IENvbnRleHRTZXJ2aWNlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHRTZXJ2aWNlO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyByZXNldEluc3RhbmNlKCk6IENvbnRleHRTZXJ2aWNlIHtcbiAgICB0aGlzLl9jb250ZXh0U2VydmljZSA9IG5ldyBDb250ZXh0U2VydmljZSgpO1xuXG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHRTZXJ2aWNlO1xuICB9XG59XG4iLCJpbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBUYWJsZVJvd0V2ZW50RGV0YWlsIH0gZnJvbSAnLi4vbW9kZWxzL3RhYmxlUm93RXZlbnREZXRhaWwnO1xuXG5leHBvcnQgdHlwZSBDdXN0b21FeHRlcm5hbEV2ZW50VHlwZSA9ICdwaS1pbml0aWFsaXplZCcgfCAncGktb3Blbi1wcm9jZXNzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXZlbnRTZXJ2aWNlIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG4gIHByaXZhdGUgc3RhdGljIF9ldmVudFNlcnZpY2U6IEV2ZW50U2VydmljZTtcblxuICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaW5pdGlhbGl6ZWRTdWJqZWN0ID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcbiAgICB0aGlzLm9wZW5Qcm9jZXNzU3Vic2NyaXB0aW9uID0gbmV3IFN1YmplY3Q8VGFibGVSb3dFdmVudERldGFpbD4oKTtcbiAgfVxuXG4gIHB1YmxpYyBpbml0aWFsaXplZFN1YmplY3Q6IFN1YmplY3Q8dm9pZD47XG5cbiAgcHVibGljIG9wZW5Qcm9jZXNzU3Vic2NyaXB0aW9uOiBTdWJqZWN0PFRhYmxlUm93RXZlbnREZXRhaWw+O1xuXG4gIHB1YmxpYyB0cmlnZ2VySW5pdGlhbGl6ZWQgPSAoKSA9PiB7XG4gICAgdGhpcy5pbml0aWFsaXplZFN1YmplY3QubmV4dCgpO1xuICB9O1xuXG4gIHB1YmxpYyB0cmlnZ2VyT3BlblByb2Nlc3MgPSAoZGF0YTogQ3VzdG9tRXZlbnQpID0+IHtcbiAgICB0aGlzLm9wZW5Qcm9jZXNzU3Vic2NyaXB0aW9uLm5leHQoZGF0YS5kZXRhaWwgYXMgVGFibGVSb3dFdmVudERldGFpbCk7XG4gIH07XG5cbiAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBFdmVudFNlcnZpY2Uge1xuICAgIGlmICghdGhpcy5fZXZlbnRTZXJ2aWNlKSB7XG4gICAgICB0aGlzLl9ldmVudFNlcnZpY2UgPSBuZXcgRXZlbnRTZXJ2aWNlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2V2ZW50U2VydmljZTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgcmVzZXRJbnN0YW5jZSgpOiBFdmVudFNlcnZpY2Uge1xuICAgIHRoaXMuX2V2ZW50U2VydmljZSA9IG5ldyBFdmVudFNlcnZpY2UoKTtcblxuICAgIHJldHVybiB0aGlzLl9ldmVudFNlcnZpY2U7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGZpcmVFeHRlcm5hbCA9IDxUPihcbiAgICBlbGVtZW50OiBIVE1MRWxlbWVudCxcbiAgICBldmVudFR5cGU6IEN1c3RvbUV4dGVybmFsRXZlbnRUeXBlLFxuICAgIGRhdGE6IHtcbiAgICAgIGJ1YmJsZXM/OiBib29sZWFuO1xuICAgICAgY2FuY2VsYWJsZT86IGJvb2xlYW47XG4gICAgICBjb21wb3NlZD86IGJvb2xlYW47XG4gICAgICBkZXRhaWw/OiBUO1xuICAgIH1cbiAgKTogQ3VzdG9tRXZlbnQ8VD4gPT4ge1xuICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgY2FuY2VsYWJsZTogZmFsc2UsXG4gICAgICBjb21wb3NlZDogdHJ1ZSxcbiAgICAgIC4uLmRhdGEsXG4gICAgfTtcblxuICAgIGNvbnN0IGV2ZW50OiBDdXN0b21FdmVudDxUPiA9IG5ldyBDdXN0b21FdmVudDxUPihldmVudFR5cGUsIGFyZ3MpO1xuICAgIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgcmV0dXJuIGV2ZW50O1xuICB9O1xufVxuIiwiaW1wb3J0IHsgTGlzdFByb2Nlc3NTZWFyY2hQYXJhbXMgfSBmcm9tICcuLi9tb2RlbHMvbGlzdC1wcm9jZXNzLXNlYXJjaC1wYXJhbXMnO1xuaW1wb3J0IHsgUHJvY2Vzc1Jlc3BvbnNlRHRvIH0gZnJvbSAnLi4vbW9kZWxzL3Byb2Nlc3MtcmVzcG9uc2UtZHRvJztcbmltcG9ydCBEYXRhU2VydmljZSBmcm9tICcuL2RhdGEuc2VydmljZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb2Nlc3Nlc0FwaVNlcnZpY2Uge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgcHJpdmF0ZSBzdGF0aWMgX3Byb2Nlc3Nlc0FwaVNlcnZpY2U6IFByb2Nlc3Nlc0FwaVNlcnZpY2U7XG5cbiAgcHJpdmF0ZSBfZGF0YVNlcnZpY2U6IERhdGFTZXJ2aWNlO1xuXG4gIHByaXZhdGUgX2Jhc2VVcmwgPSAnL3YxL3Byb2Nlc3Nlcyc7XG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9kYXRhU2VydmljZSA9IERhdGFTZXJ2aWNlLmdldEluc3RhbmNlKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0UHJvY2Vzc0xpc3QgPSBhc3luYyAoXG4gICAgbGlzdFByb2Nlc3NTZWFyY2hQYXJhbXM/OiBMaXN0UHJvY2Vzc1NlYXJjaFBhcmFtc1xuICApOiBQcm9taXNlPFByb2Nlc3NSZXNwb25zZUR0bz4gPT4ge1xuICAgIGNvbnN0IHVybFNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoXG4gICAgICBsaXN0UHJvY2Vzc1NlYXJjaFBhcmFtcyBhcyBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+XG4gICAgKTtcbiAgICBjb25zdCB1cmxTZWFyY2hQYXJhbXNTdHJpbmcgPSB1cmxTZWFyY2hQYXJhbXMudG9TdHJpbmcoKTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLl9kYXRhU2VydmljZS5odHRwR2V0KFxuICAgICAgICBgJHt0aGlzLl9iYXNlVXJsfSR7XG4gICAgICAgICAgdXJsU2VhcmNoUGFyYW1zU3RyaW5nID09PSAnJyA/ICcnIDogYD8ke3VybFNlYXJjaFBhcmFtc1N0cmluZ31gXG4gICAgICAgIH1gXG4gICAgICApO1xuICAgICAgY29uc3QgcmVzcG9uc2VKc29uID0gKGF3YWl0IHJlc3BvbnNlLmpzb24oKSkgYXMgUHJvY2Vzc1Jlc3BvbnNlRHRvO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgLy8gVE9ETzogQWRkIGdlbmVyYWwgZXJyb3IgaGFuZGxpbmcgZm9yIGVuZHBvaW50XG4gICAgICBjb25zb2xlLmVycm9yKCdHZXQgUHJvY2VzcyBsaXN0IGVycm9yOiAnLCBleCk7XG4gICAgICB0aHJvdyBleDtcbiAgICB9XG4gIH07XG5cbiAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSA9ICgpOiBQcm9jZXNzZXNBcGlTZXJ2aWNlID0+IHtcbiAgICBpZiAoIXRoaXMuX3Byb2Nlc3Nlc0FwaVNlcnZpY2UpIHtcbiAgICAgIHRoaXMuX3Byb2Nlc3Nlc0FwaVNlcnZpY2UgPSBuZXcgUHJvY2Vzc2VzQXBpU2VydmljZSgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9wcm9jZXNzZXNBcGlTZXJ2aWNlO1xuICB9O1xuXG4gIHB1YmxpYyBzdGF0aWMgcmVzZXRJbnN0YW5jZSA9ICgpOiBQcm9jZXNzZXNBcGlTZXJ2aWNlID0+IHtcbiAgICB0aGlzLl9wcm9jZXNzZXNBcGlTZXJ2aWNlID0gbmV3IFByb2Nlc3Nlc0FwaVNlcnZpY2UoKTtcblxuICAgIHJldHVybiB0aGlzLl9wcm9jZXNzZXNBcGlTZXJ2aWNlO1xuICB9O1xufVxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZWFydGhsaW5nLWJhc2UubWluLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9lYXJ0aGxpbmctYmFzZS5taW4uY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGl0JztcblxuLy8gQ29tbW9uIHN0eWxlcyBjYW4gYmUgYWRkZWQgaGVyZVxuZXhwb3J0IGNvbnN0IGNvbW1vblN0eWxlcyA9IGNzc2BcbiAgOmhvc3Qge1xuICAgIGFsbDogaW5pdGlhbDtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IGNvbW1vbkVtID0ge1xuICBweDEyOiBjc3NgMC43NWVtYCxcbiAgcHgyNDogY3NzYDEuNWVtYCxcbiAgcHgyNjogY3NzYDEuNjI1ZW1gLFxufTtcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgJ0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLXN0eWxlcy9kaXN0L2VhcnRobGluZy1iYXNlLm1pbi5jc3MnO1xuaW1wb3J0IHsgY29tbW9uU3R5bGVzIH0gZnJvbSAnLi4vY29tbW9uLnN0eWxlcyc7XG5cbmNvbnN0IGJhc2VTdHlsZXMgPSBjc3NgXG4gIDpob3N0IHtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGdyaWQtdGVtcGxhdGUtcm93czogbWluLWNvbnRlbnQgYXV0bztcblxuICAgIG1pbi1oZWlnaHQ6IDEwMCU7XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBzdHlsZXMgPSBbY29tbW9uU3R5bGVzLCBiYXNlU3R5bGVzXTtcbiIsIi8vIFRoaXMgZmlsZSBzaG91bGQgY29udGFpbiB0aGUgYmFzZSBFbmdsaXNoIHRyYW5zbGF0aW9uLCBpZCBhbmQgZGVzY3JpcHRpb25zLlxuXG5pbXBvcnQgeyBtc2cgfSBmcm9tICdAbGl0L2xvY2FsaXplJztcblxuZXhwb3J0IGNvbnN0IGNvbW1vbkxhbmcgPSB7XG4gIE9LOiAoKSA9PlxuICAgIG1zZygnT0snLCB7XG4gICAgICBpZDogJ2NvbW1vbi1vaycsXG4gICAgICBkZXNjOiAnT0sgdXNlZCBpbiBjb25mb3JtYXRpb24gYnV0dG9ucy4nLFxuICAgIH0pLFxufTtcblxuZXhwb3J0IGNvbnN0IGxpc3RMYW5nID0ge1xuICBwcm9jZXNzTW9kZWxzOiAoKSA9PlxuICAgIG1zZygnUHJvY2VzcyBtb2RlbHMnLCB7XG4gICAgICBpZDogJ2xpc3QtcHJvY2Vzcy1tb2RlbHMnLFxuICAgICAgZGVzYzogJ0hlYWRlciBmb3IgUHJvY2VzcyBtb2RlbHMgb24gdGhlIGFwcC4nLFxuICAgIH0pLFxufTtcblxuZXhwb3J0IGNvbnN0IHRlc3RMYW5nID0ge1xuICB0ZXN0VmFsdWU6ICgpID0+XG4gICAgbXNnKCdUZXN0IFZhbHVlJywge1xuICAgICAgaWQ6ICd0ZXN0LXZhbHVlJyxcbiAgICAgIGRlc2M6ICdBIHJhbmRvbSB0ZXN0IHZhbHVlJyxcbiAgICB9KSxcbn07XG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdsaXQnO1xuaW1wb3J0IHsgY29tbW9uRW0sIGNvbW1vblN0eWxlcyB9IGZyb20gJy4uLy4uL2NvbW1vbi5zdHlsZXMnO1xuXG5jb25zdCBiYXNlID0gY3NzYFxuICA6aG9zdCB7XG4gICAgZGlzcGxheTogZ3JpZDtcblxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW54LWdyZXktNSk7XG4gIH1cblxuICBoZWFkZXIge1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAke2NvbW1vbkVtLnB4MjR9IG1pbi1jb250ZW50IGF1dG87XG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAke2NvbW1vbkVtLnB4MTJ9ICR7Y29tbW9uRW0ucHgyNn0gJHtjb21tb25FbS5weDI2fTtcbiAgfVxuXG4gIGgxIHtcbiAgICBncmlkLWNvbHVtbjogMjtcbiAgICBncmlkLXJvdzogMjtcblxuICAgIG1hcmdpbjogMDtcblxuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG5cbiAgICBjb2xvcjogdmFyKC0tbmUtYWxpYXMtY29sb3ItdGV4dC1kZWZhdWx0KTtcbiAgICBmb250LWZhbWlseTogdmFyKC0tbngtZm9udC1mYW1pbHktaGVhZGluZyk7XG4gICAgZm9udC1zaXplOiB2YXIoLS1uZS1yZWYtZm9udC1zaXplLTA3KTtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IHN0eWxlcyA9IFtjb21tb25TdHlsZXMsIGJhc2VdO1xuIiwiaW1wb3J0IHsgU2NvcGVkRWxlbWVudHNNaXhpbiB9IGZyb20gJ0BvcGVuLXdjL3Njb3BlZC1lbGVtZW50cyc7XG5pbXBvcnQgeyBDU1NSZXN1bHQsIExpdEVsZW1lbnQsIGh0bWwgfSBmcm9tICdsaXQnO1xuaW1wb3J0IHsgbGlzdExhbmcgfSBmcm9tICcuLi8uLi9jb21tb24ubGFuZ3VhZ2UuZW4nO1xuaW1wb3J0IHsgc3R5bGVzIH0gZnJvbSAnLi9waS1oZWFkZXIuc3R5bGVzJztcblxuZXhwb3J0IGNsYXNzIFBpSGVhZGVyIGV4dGVuZHMgU2NvcGVkRWxlbWVudHNNaXhpbihMaXRFbGVtZW50KSB7XG4gIHN0YXRpYyBnZXQgc2NvcGVkRWxlbWVudHMoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgc3RhdGljIG92ZXJyaWRlIGdldCBzdHlsZXMoKTogQ1NTUmVzdWx0W10ge1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIGh0bWxgPGhlYWRlcj5cbiAgICAgIDxoMT4ke2xpc3RMYW5nLnByb2Nlc3NNb2RlbHMoKX08L2gxPlxuICAgIDwvaGVhZGVyPmA7XG4gIH1cbn1cblxuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgSFRNTEVsZW1lbnRUYWdOYW1lTWFwIHtcbiAgICAncGktaGVhZGVyJzogUGlIZWFkZXI7XG4gIH1cbn1cbiIsImltcG9ydHtfJExIIGFzIG99ZnJvbVwiLi9saXQtaHRtbC5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovY29uc3R7STpsfT1vLHQ9bz0+bnVsbD09PW98fFwib2JqZWN0XCIhPXR5cGVvZiBvJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBvLGk9e0hUTUw6MSxTVkc6Mn0sbj0obyxsKT0+dm9pZCAwPT09bD92b2lkIDAhPT0obnVsbD09bz92b2lkIDA6by5fJGxpdFR5cGUkKToobnVsbD09bz92b2lkIDA6by5fJGxpdFR5cGUkKT09PWwsZD1vPT52b2lkIDAhPT0obnVsbD09bz92b2lkIDA6by5fJGxpdERpcmVjdGl2ZSQpLHY9bz0+bnVsbD09bz92b2lkIDA6by5fJGxpdERpcmVjdGl2ZSQsZT1vPT52b2lkIDA9PT1vLnN0cmluZ3MsYz0oKT0+ZG9jdW1lbnQuY3JlYXRlQ29tbWVudChcIlwiKSxyPShvLHQsaSk9Pnt2YXIgbjtjb25zdCBkPW8uXyRBQS5wYXJlbnROb2RlLHY9dm9pZCAwPT09dD9vLl8kQUI6dC5fJEFBO2lmKHZvaWQgMD09PWkpe2NvbnN0IHQ9ZC5pbnNlcnRCZWZvcmUoYygpLHYpLG49ZC5pbnNlcnRCZWZvcmUoYygpLHYpO2k9bmV3IGwodCxuLG8sby5vcHRpb25zKX1lbHNle2NvbnN0IGw9aS5fJEFCLm5leHRTaWJsaW5nLHQ9aS5fJEFNLGU9dCE9PW87aWYoZSl7bGV0IGw7bnVsbD09PShuPWkuXyRBUSl8fHZvaWQgMD09PW58fG4uY2FsbChpLG8pLGkuXyRBTT1vLHZvaWQgMCE9PWkuXyRBUCYmKGw9by5fJEFVKSE9PXQuXyRBVSYmaS5fJEFQKGwpfWlmKGwhPT12fHxlKXtsZXQgbz1pLl8kQUE7Zm9yKDtvIT09bDspe2NvbnN0IGw9by5uZXh0U2libGluZztkLmluc2VydEJlZm9yZShvLHYpLG89bH19fXJldHVybiBpfSx1PShvLGwsdD1vKT0+KG8uXyRBSShsLHQpLG8pLGY9e30scz0obyxsPWYpPT5vLl8kQUg9bCxtPW89Pm8uXyRBSCxwPW89Pnt2YXIgbDtudWxsPT09KGw9by5fJEFQKXx8dm9pZCAwPT09bHx8bC5jYWxsKG8sITEsITApO2xldCB0PW8uXyRBQTtjb25zdCBpPW8uXyRBQi5uZXh0U2libGluZztmb3IoO3QhPT1pOyl7Y29uc3Qgbz10Lm5leHRTaWJsaW5nO3QucmVtb3ZlKCksdD1vfX0sYT1vPT57by5fJEFSKCl9O2V4cG9ydHtpIGFzIFRlbXBsYXRlUmVzdWx0VHlwZSxhIGFzIGNsZWFyUGFydCxtIGFzIGdldENvbW1pdHRlZFZhbHVlLHYgYXMgZ2V0RGlyZWN0aXZlQ2xhc3MsciBhcyBpbnNlcnRQYXJ0LGQgYXMgaXNEaXJlY3RpdmVSZXN1bHQsdCBhcyBpc1ByaW1pdGl2ZSxlIGFzIGlzU2luZ2xlRXhwcmVzc2lvbixuIGFzIGlzVGVtcGxhdGVSZXN1bHQscCBhcyByZW1vdmVQYXJ0LHUgYXMgc2V0Q2hpbGRQYXJ0VmFsdWUscyBhcyBzZXRDb21taXR0ZWRWYWx1ZX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXJlY3RpdmUtaGVscGVycy5qcy5tYXBcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuY29uc3QgdD17QVRUUklCVVRFOjEsQ0hJTEQ6MixQUk9QRVJUWTozLEJPT0xFQU5fQVRUUklCVVRFOjQsRVZFTlQ6NSxFTEVNRU5UOjZ9LGU9dD0+KC4uLmUpPT4oe18kbGl0RGlyZWN0aXZlJDp0LHZhbHVlczplfSk7Y2xhc3MgaXtjb25zdHJ1Y3Rvcih0KXt9Z2V0IF8kQVUoKXtyZXR1cm4gdGhpcy5fJEFNLl8kQVV9XyRBVCh0LGUsaSl7dGhpcy5fJEN0PXQsdGhpcy5fJEFNPWUsdGhpcy5fJENpPWl9XyRBUyh0LGUpe3JldHVybiB0aGlzLnVwZGF0ZSh0LGUpfXVwZGF0ZSh0LGUpe3JldHVybiB0aGlzLnJlbmRlciguLi5lKX19ZXhwb3J0e2kgYXMgRGlyZWN0aXZlLHQgYXMgUGFydFR5cGUsZSBhcyBkaXJlY3RpdmV9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlyZWN0aXZlLmpzLm1hcFxuIiwiaW1wb3J0e2lzU2luZ2xlRXhwcmVzc2lvbiBhcyBpfWZyb21cIi4vZGlyZWN0aXZlLWhlbHBlcnMuanNcIjtpbXBvcnR7RGlyZWN0aXZlIGFzIHQsUGFydFR5cGUgYXMgZX1mcm9tXCIuL2RpcmVjdGl2ZS5qc1wiO2V4cG9ydHtEaXJlY3RpdmUsUGFydFR5cGUsZGlyZWN0aXZlfWZyb21cIi4vZGlyZWN0aXZlLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9jb25zdCBzPShpLHQpPT57dmFyIGUsbztjb25zdCByPWkuXyRBTjtpZih2b2lkIDA9PT1yKXJldHVybiExO2Zvcihjb25zdCBpIG9mIHIpbnVsbD09PShvPShlPWkpLl8kQU8pfHx2b2lkIDA9PT1vfHxvLmNhbGwoZSx0LCExKSxzKGksdCk7cmV0dXJuITB9LG89aT0+e2xldCB0LGU7ZG97aWYodm9pZCAwPT09KHQ9aS5fJEFNKSlicmVhaztlPXQuXyRBTixlLmRlbGV0ZShpKSxpPXR9d2hpbGUoMD09PShudWxsPT1lP3ZvaWQgMDplLnNpemUpKX0scj1pPT57Zm9yKGxldCB0O3Q9aS5fJEFNO2k9dCl7bGV0IGU9dC5fJEFOO2lmKHZvaWQgMD09PWUpdC5fJEFOPWU9bmV3IFNldDtlbHNlIGlmKGUuaGFzKGkpKWJyZWFrO2UuYWRkKGkpLGwodCl9fTtmdW5jdGlvbiBuKGkpe3ZvaWQgMCE9PXRoaXMuXyRBTj8obyh0aGlzKSx0aGlzLl8kQU09aSxyKHRoaXMpKTp0aGlzLl8kQU09aX1mdW5jdGlvbiBoKGksdD0hMSxlPTApe2NvbnN0IHI9dGhpcy5fJEFILG49dGhpcy5fJEFOO2lmKHZvaWQgMCE9PW4mJjAhPT1uLnNpemUpaWYodClpZihBcnJheS5pc0FycmF5KHIpKWZvcihsZXQgaT1lO2k8ci5sZW5ndGg7aSsrKXMocltpXSwhMSksbyhyW2ldKTtlbHNlIG51bGwhPXImJihzKHIsITEpLG8ocikpO2Vsc2Ugcyh0aGlzLGkpfWNvbnN0IGw9aT0+e3ZhciB0LHMsbyxyO2kudHlwZT09ZS5DSElMRCYmKG51bGwhPT0odD0obz1pKS5fJEFQKSYmdm9pZCAwIT09dHx8KG8uXyRBUD1oKSxudWxsIT09KHM9KHI9aSkuXyRBUSkmJnZvaWQgMCE9PXN8fChyLl8kQVE9bikpfTtjbGFzcyBjIGV4dGVuZHMgdHtjb25zdHJ1Y3Rvcigpe3N1cGVyKC4uLmFyZ3VtZW50cyksdGhpcy5fJEFOPXZvaWQgMH1fJEFUKGksdCxlKXtzdXBlci5fJEFUKGksdCxlKSxyKHRoaXMpLHRoaXMuaXNDb25uZWN0ZWQ9aS5fJEFVfV8kQU8oaSx0PSEwKXt2YXIgZSxyO2khPT10aGlzLmlzQ29ubmVjdGVkJiYodGhpcy5pc0Nvbm5lY3RlZD1pLGk/bnVsbD09PShlPXRoaXMucmVjb25uZWN0ZWQpfHx2b2lkIDA9PT1lfHxlLmNhbGwodGhpcyk6bnVsbD09PShyPXRoaXMuZGlzY29ubmVjdGVkKXx8dm9pZCAwPT09cnx8ci5jYWxsKHRoaXMpKSx0JiYocyh0aGlzLGkpLG8odGhpcykpfXNldFZhbHVlKHQpe2lmKGkodGhpcy5fJEN0KSl0aGlzLl8kQ3QuXyRBSSh0LHRoaXMpO2Vsc2V7Y29uc3QgaT1bLi4udGhpcy5fJEN0Ll8kQUhdO2lbdGhpcy5fJENpXT10LHRoaXMuXyRDdC5fJEFJKGksdGhpcywwKX19ZGlzY29ubmVjdGVkKCl7fXJlY29ubmVjdGVkKCl7fX1leHBvcnR7YyBhcyBBc3luY0RpcmVjdGl2ZX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3luYy1kaXJlY3RpdmUuanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmNvbnN0IHQ9YXN5bmModCxzKT0+e2ZvciBhd2FpdChjb25zdCBpIG9mIHQpaWYoITE9PT1hd2FpdCBzKGkpKXJldHVybn07Y2xhc3Mgc3tjb25zdHJ1Y3Rvcih0KXt0aGlzLlk9dH1kaXNjb25uZWN0KCl7dGhpcy5ZPXZvaWQgMH1yZWNvbm5lY3QodCl7dGhpcy5ZPXR9ZGVyZWYoKXtyZXR1cm4gdGhpcy5ZfX1jbGFzcyBpe2NvbnN0cnVjdG9yKCl7dGhpcy5aPXZvaWQgMCx0aGlzLnE9dm9pZCAwfWdldCgpe3JldHVybiB0aGlzLlp9cGF1c2UoKXt2YXIgdDtudWxsIT09KHQ9dGhpcy5aKSYmdm9pZCAwIT09dHx8KHRoaXMuWj1uZXcgUHJvbWlzZSgodD0+dGhpcy5xPXQpKSl9cmVzdW1lKCl7dmFyIHQ7bnVsbD09PSh0PXRoaXMucSl8fHZvaWQgMD09PXR8fHQuY2FsbCh0aGlzKSx0aGlzLlo9dGhpcy5xPXZvaWQgMH19ZXhwb3J0e2kgYXMgUGF1c2VyLHMgYXMgUHNldWRvV2Vha1JlZix0IGFzIGZvckF3YWl0T2Z9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJpdmF0ZS1hc3luYy1oZWxwZXJzLmpzLm1hcFxuIiwiaW1wb3J0e25vQ2hhbmdlIGFzIHR9ZnJvbVwiLi4vbGl0LWh0bWwuanNcIjtpbXBvcnR7aXNQcmltaXRpdmUgYXMgc31mcm9tXCIuLi9kaXJlY3RpdmUtaGVscGVycy5qc1wiO2ltcG9ydHtBc3luY0RpcmVjdGl2ZSBhcyBpfWZyb21cIi4uL2FzeW5jLWRpcmVjdGl2ZS5qc1wiO2ltcG9ydHtQc2V1ZG9XZWFrUmVmIGFzIHIsUGF1c2VyIGFzIGV9ZnJvbVwiLi9wcml2YXRlLWFzeW5jLWhlbHBlcnMuanNcIjtpbXBvcnR7ZGlyZWN0aXZlIGFzIG99ZnJvbVwiLi4vZGlyZWN0aXZlLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9jb25zdCBuPXQ9PiFzKHQpJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LnRoZW4saD0xMDczNzQxODIzO2NsYXNzIGMgZXh0ZW5kcyBpe2NvbnN0cnVjdG9yKCl7c3VwZXIoLi4uYXJndW1lbnRzKSx0aGlzLl8kQ3d0PWgsdGhpcy5fJEN5dD1bXSx0aGlzLl8kQ0s9bmV3IHIodGhpcyksdGhpcy5fJENYPW5ldyBlfXJlbmRlciguLi5zKXt2YXIgaTtyZXR1cm4gbnVsbCE9PShpPXMuZmluZCgodD0+IW4odCkpKSkmJnZvaWQgMCE9PWk/aTp0fXVwZGF0ZShzLGkpe2NvbnN0IHI9dGhpcy5fJEN5dDtsZXQgZT1yLmxlbmd0aDt0aGlzLl8kQ3l0PWk7Y29uc3Qgbz10aGlzLl8kQ0ssYz10aGlzLl8kQ1g7dGhpcy5pc0Nvbm5lY3RlZHx8dGhpcy5kaXNjb25uZWN0ZWQoKTtmb3IobGV0IHQ9MDt0PGkubGVuZ3RoJiYhKHQ+dGhpcy5fJEN3dCk7dCsrKXtjb25zdCBzPWlbdF07aWYoIW4ocykpcmV0dXJuIHRoaXMuXyRDd3Q9dCxzO3Q8ZSYmcz09PXJbdF18fCh0aGlzLl8kQ3d0PWgsZT0wLFByb21pc2UucmVzb2x2ZShzKS50aGVuKChhc3luYyB0PT57Zm9yKDtjLmdldCgpOylhd2FpdCBjLmdldCgpO2NvbnN0IGk9by5kZXJlZigpO2lmKHZvaWQgMCE9PWkpe2NvbnN0IHI9aS5fJEN5dC5pbmRleE9mKHMpO3I+LTEmJnI8aS5fJEN3dCYmKGkuXyRDd3Q9cixpLnNldFZhbHVlKHQpKX19KSkpfXJldHVybiB0fWRpc2Nvbm5lY3RlZCgpe3RoaXMuXyRDSy5kaXNjb25uZWN0KCksdGhpcy5fJENYLnBhdXNlKCl9cmVjb25uZWN0ZWQoKXt0aGlzLl8kQ0sucmVjb25uZWN0KHRoaXMpLHRoaXMuXyRDWC5yZXN1bWUoKX19Y29uc3QgbT1vKGMpO2V4cG9ydHtjIGFzIFVudGlsRGlyZWN0aXZlLG0gYXMgdW50aWx9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dW50aWwuanMubWFwXG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdsaXQnO1xuaW1wb3J0IHsgY29tbW9uU3R5bGVzIH0gZnJvbSAnLi4vLi4vY29tbW9uLnN0eWxlcyc7XG5cbmNvbnN0IGJhc2UgPSBjc3NgXG4gIDpob3N0IHtcbiAgICBkaXNwbGF5OiBncmlkO1xuICB9XG5gO1xuXG5leHBvcnQgY29uc3Qgc3R5bGVzID0gW2NvbW1vblN0eWxlcywgYmFzZV07XG4iLCJpbXBvcnQgeyBTY29wZWRFbGVtZW50c01peGluIH0gZnJvbSAnQG9wZW4td2Mvc2NvcGVkLWVsZW1lbnRzJztcbmltcG9ydCB7IENTU1Jlc3VsdCwgaHRtbCwgTGl0RWxlbWVudCwgVGVtcGxhdGVSZXN1bHQgfSBmcm9tICdsaXQnO1xuaW1wb3J0IHsgc3RhdGUgfSBmcm9tICdsaXQvZGVjb3JhdG9ycy5qcyc7XG5pbXBvcnQgeyB1bnRpbCB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL3VudGlsLmpzJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUHJvY2Vzc1Jlc3BvbnNlRHRvIH0gZnJvbSAnLi4vLi4vbW9kZWxzL3Byb2Nlc3MtcmVzcG9uc2UtZHRvJztcbmltcG9ydCB7IFRhYmxlUm93RXZlbnREZXRhaWwgfSBmcm9tICcuLi8uLi9tb2RlbHMvdGFibGVSb3dFdmVudERldGFpbCc7XG5pbXBvcnQgRXZlbnRTZXJ2aWNlIGZyb20gJy4uLy4uL3NlcnZpY2VzL2V2ZW50LnNlcnZpY2UnO1xuaW1wb3J0IFByb2Nlc3Nlc0FwaVNlcnZpY2UgZnJvbSAnLi4vLi4vc2VydmljZXMvcHJvY2Vzc2VzLWFwaS5zZXJ2aWNlJztcbmltcG9ydCB7IHN0eWxlcyB9IGZyb20gJy4vcGktbGlzdC1jb21wb25lbnQuc3R5bGVzJztcblxuLyoqXG4gKiBAdGFnIHBpLWxpc3QtY29tcG9uZW50XG4gKiBAdGFnbmFtZSBwaS1saXN0LWNvbXBvbmVudFxuICpcbiAqL1xuZXhwb3J0IGNsYXNzIFBpTGlzdENvbXBvbmVudCBleHRlbmRzIFNjb3BlZEVsZW1lbnRzTWl4aW4oTGl0RWxlbWVudCkge1xuICBzdGF0aWMgZ2V0IHNjb3BlZEVsZW1lbnRzKCkge1xuICAgIHJldHVybiB7XG4gICAgICAnbmUtdGFibGUnOiBjdXN0b21FbGVtZW50cy5nZXQoJ25lLXRhYmxlJyksXG4gICAgICAnbmUtdGhlYWRlcic6IGN1c3RvbUVsZW1lbnRzLmdldCgnbmUtdGhlYWRlcicpLFxuICAgICAgJ25lLWJ1dHRvbic6IGN1c3RvbUVsZW1lbnRzLmdldCgnbmUtYnV0dG9uJyksXG4gICAgICAnbmUtbGFiZWwnOiBjdXN0b21FbGVtZW50cy5nZXQoJ25lLWxhYmVsJyksXG4gICAgICAnbmUtc3RhdHVzLW92ZXJsYXknOiBjdXN0b21FbGVtZW50cy5nZXQoJ25lLXN0YXR1cy1vdmVybGF5JyksXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBvdmVycmlkZSBnZXQgc3R5bGVzKCk6IENTU1Jlc3VsdFtdIHtcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9XG5cbiAgcHJpdmF0ZSBfcHJvY2Vzc0FwaVNlcnZpY2U6IFByb2Nlc3Nlc0FwaVNlcnZpY2U7XG5cbiAgcHJpdmF0ZSBfZXZlbnRTZXJ2aWNlOiBFdmVudFNlcnZpY2U7XG5cbiAgcHJpdmF0ZSBfaW5pdGlhbGl6ZWRTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICBwcml2YXRlIF9vcGVuUHJvY2Vzc1N1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3Byb2Nlc3NBcGlTZXJ2aWNlID0gUHJvY2Vzc2VzQXBpU2VydmljZS5nZXRJbnN0YW5jZSgpO1xuICAgIHRoaXMuX2V2ZW50U2VydmljZSA9IEV2ZW50U2VydmljZS5nZXRJbnN0YW5jZSgpO1xuICB9XG5cbiAgQHN0YXRlKClcbiAgcHJpdmF0ZSBfcHJvY2Vzc0xpc3RSZXN1bHQ6IFByb21pc2U8VGVtcGxhdGVSZXN1bHQ+O1xuXG4gIEBzdGF0ZSgpXG4gIHByaXZhdGUgX3Nob3dTdGF0dXNPdmVybGF5ID0gZmFsc2U7XG5cbiAgX29uQ2VsbENsaWNrZWQgPSAoZTogQ3VzdG9tRXZlbnQpID0+IHtcbiAgICAvLyBjaGVjayBpZiBpdCB3YXMgdGhlIGZpcnN0IGNvbHVtbiB0aGF0IHdhcyBjbGlja2VkIGJlZm9yZSB3ZSAgcmFpc2UgdGhlIGV2ZW50LlxuICAgIGlmIChlLmRldGFpbCAmJiAoZS5kZXRhaWwgYXMgVGFibGVSb3dFdmVudERldGFpbCkuY29sdW1uID09PSAwKSB7XG4gICAgICB0aGlzLl9ldmVudFNlcnZpY2UudHJpZ2dlck9wZW5Qcm9jZXNzKGUpO1xuICAgIH1cbiAgfTtcblxuICBfb3BlblByb2Nlc3MgPSAoZGF0YTogVGFibGVSb3dFdmVudERldGFpbCkgPT4ge1xuICAgIEV2ZW50U2VydmljZS5maXJlRXh0ZXJuYWwodGhpcywgJ3BpLW9wZW4tcHJvY2VzcycsIHsgZGV0YWlsOiBkYXRhIH0pO1xuICB9O1xuXG4gIHByaXZhdGUgX29uSW5pdGlhbGl6ZWQgPSAoKTogdm9pZCA9PiB7XG4gICAgRXZlbnRTZXJ2aWNlLmZpcmVFeHRlcm5hbCh0aGlzLCAncGktaW5pdGlhbGl6ZWQnLCB7fSk7XG4gIH07XG5cbiAgcHJpdmF0ZSBfc29ydFByb2Nlc3NlcyhkdG86IFByb2Nlc3NSZXNwb25zZUR0bykge1xuICAgIGR0by52YWx1ZS5zb3J0KFxuICAgICAgKGEsIGIpID0+XG4gICAgICAgIG5ldyBEYXRlKGIubGFzdE1vZGlmaWVkKS5nZXRUaW1lKCkgLSBuZXcgRGF0ZShhLmxhc3RNb2RpZmllZCkuZ2V0VGltZSgpXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIGZldGNoRGF0YSgpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5fc2hvd1N0YXR1c092ZXJsYXkgPSB0cnVlO1xuICAgICAgY29uc3QgZHRvID0gYXdhaXQgdGhpcy5fcHJvY2Vzc0FwaVNlcnZpY2UuZ2V0UHJvY2Vzc0xpc3QoKTtcbiAgICAgIHRoaXMuX3NvcnRQcm9jZXNzZXMoZHRvKTtcbiAgICAgIHRoaXMuX3Nob3dTdGF0dXNPdmVybGF5ID0gZmFsc2U7XG4gICAgICByZXR1cm4gaHRtbGA8bmUtdGFibGVcbiAgICAgICAgLmRhdGE9JHtkdG8udmFsdWV9XG4gICAgICAgIEBuZS1jbGljaz1cIiR7dGhpcy5fb25DZWxsQ2xpY2tlZH1cIlxuICAgICAgPlxuICAgICAgICA8dGVtcGxhdGUgc2xvdD1cImhlYWRcIj5cbiAgICAgICAgICA8bmUtdGhlYWRlcj5Nb2RlbCBuYW1lPC9uZS10aGVhZGVyPlxuICAgICAgICAgIDxuZS10aGVhZGVyPlZlcnNpb248L25lLXRoZWFkZXI+XG4gICAgICAgICAgPG5lLXRoZWFkZXI+UHJvY2VzcyBncm91cDwvbmUtdGhlYWRlcj5cbiAgICAgICAgICA8bmUtdGhlYWRlcj5Nb2RlbCBvd25lcjwvbmUtdGhlYWRlcj5cbiAgICAgICAgICA8bmUtdGhlYWRlcj5Nb2RlbCBleHBlcnQ8L25lLXRoZWFkZXI+XG4gICAgICAgICAgPG5lLXRoZWFkZXI+TW9kaWZpZWQgZGF0ZTwvbmUtdGhlYWRlcj5cbiAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPHRlbXBsYXRlIHNsb3Q9XCJyb3dcIj5cbiAgICAgICAgICA8bmUtYnV0dG9uIGlkPVwie3t0aXRsZX19XCIgdmFyaWFudD1cInRleHRcIiBsZWZ0LWljb249XCJwcm9jZXNzTW9kZWxcIlxuICAgICAgICAgICAgPnt7dGl0bGV9fTwvbmUtYnV0dG9uXG4gICAgICAgICAgPlxuICAgICAgICAgIDxuZS1sYWJlbCBpZD1cInt7dmVyc2lvbn19XCI+e3t2ZXJzaW9ufX08L25lLWxhYmVsPlxuICAgICAgICAgIDxuZS1sYWJlbCBpZD1cInt7cHJvY2Vzc0dyb3VwTmFtZX19XCI+e3twcm9jZXNzR3JvdXBOYW1lfX08L25lLWxhYmVsPlxuICAgICAgICAgIDxuZS1sYWJlbCBpZD1cInt7b3duZXJOYW1lfX1cIj57e293bmVyTmFtZX19PC9uZS1sYWJlbD5cbiAgICAgICAgICA8bmUtbGFiZWwgaWQ9XCJ7e2V4cGVydE5hbWV9fVwiPnt7ZXhwZXJ0TmFtZX19PC9uZS1sYWJlbD5cbiAgICAgICAgICA8bmUtbGFiZWwgaWQ9XCJ7e2xhc3RNb2RpZmllZH19XCI+e3tsYXN0TW9kaWZpZWR9fTwvbmUtbGFiZWw+XG4gICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICA8L25lLXRhYmxlPmA7XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIC8vIFRPRE86IFByb3BlciBlcnJvciBoYW5kbGluZyBpcyBuZWVkZWQgaGVyZVxuICAgIH1cbiAgICByZXR1cm4gaHRtbGBgO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBodG1sYCR7dW50aWwodGhpcy5fcHJvY2Vzc0xpc3RSZXN1bHQsIGh0bWxgYCl9PG5lLXN0YXR1cy1vdmVybGF5XG4gICAgICAgID9zaG93PSR7dGhpcy5fc2hvd1N0YXR1c092ZXJsYXl9XG4gICAgICAgIHN0YXR1cy1kZWxheT1cIjUwMFwiXG4gICAgICA+PC9uZS1zdGF0dXMtb3ZlcmxheT5gO1xuICB9XG5cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgaWYgKHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKSB7XG4gICAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIH1cbiAgICB0aGlzLl9pbml0aWFsaXplZFN1YnNjcmlwdGlvbiA9XG4gICAgICB0aGlzLl9ldmVudFNlcnZpY2UuaW5pdGlhbGl6ZWRTdWJqZWN0LnN1YnNjcmliZSh7XG4gICAgICAgIG5leHQ6IHRoaXMuX29uSW5pdGlhbGl6ZWQsXG4gICAgICB9KTtcblxuICAgIHRoaXMuX29wZW5Qcm9jZXNzU3Vic2NyaXB0aW9uID1cbiAgICAgIHRoaXMuX2V2ZW50U2VydmljZS5vcGVuUHJvY2Vzc1N1YnNjcmlwdGlvbi5zdWJzY3JpYmUoe1xuICAgICAgICBuZXh0OiB0aGlzLl9vcGVuUHJvY2VzcyxcbiAgICAgIH0pO1xuXG4gICAgdGhpcy5fZXZlbnRTZXJ2aWNlLnRyaWdnZXJJbml0aWFsaXplZCgpO1xuICAgIHRoaXMuX3Byb2Nlc3NMaXN0UmVzdWx0ID0gdGhpcy5mZXRjaERhdGEoKTtcbiAgfVxuXG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIGlmIChzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaykge1xuICAgICAgc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB9XG4gICAgdGhpcy5faW5pdGlhbGl6ZWRTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB0aGlzLl9vcGVuUHJvY2Vzc1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG59XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgaW50ZXJmYWNlIEhUTUxFbGVtZW50VGFnTmFtZU1hcCB7XG4gICAgJ3BpLWxpc3QtY29tcG9uZW50JzogUGlMaXN0Q29tcG9uZW50O1xuICB9XG59XG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdsaXQnO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuXHJcbmZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cblxuLy8gQ29tbW9uIHN0eWxlcyBjYW4gYmUgYWRkZWQgaGVyZVxuY29uc3QgY29tbW9uU3R5bGVzID0gY3NzYFxuICA6aG9zdCB7XG4gICAgYWxsOiBpbml0aWFsO1xuICB9XG5cbiAgLmhpZGRlbiB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuYDtcblxuZXhwb3J0IHsgX19kZWNvcmF0ZSBhcyBfLCBjb21tb25TdHlsZXMgYXMgYyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZS5zdHlsZXMtMTFkMzkxODEuanMubWFwXG4iLCJpbXBvcnR7bm9DaGFuZ2UgYXMgdH1mcm9tXCIuLi9saXQtaHRtbC5qc1wiO2ltcG9ydHtkaXJlY3RpdmUgYXMgaSxEaXJlY3RpdmUgYXMgcyxQYXJ0VHlwZSBhcyByfWZyb21cIi4uL2RpcmVjdGl2ZS5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovY29uc3Qgbz1pKGNsYXNzIGV4dGVuZHMgc3tjb25zdHJ1Y3Rvcih0KXt2YXIgaTtpZihzdXBlcih0KSx0LnR5cGUhPT1yLkFUVFJJQlVURXx8XCJjbGFzc1wiIT09dC5uYW1lfHwobnVsbD09PShpPXQuc3RyaW5ncyl8fHZvaWQgMD09PWk/dm9pZCAwOmkubGVuZ3RoKT4yKXRocm93IEVycm9yKFwiYGNsYXNzTWFwKClgIGNhbiBvbmx5IGJlIHVzZWQgaW4gdGhlIGBjbGFzc2AgYXR0cmlidXRlIGFuZCBtdXN0IGJlIHRoZSBvbmx5IHBhcnQgaW4gdGhlIGF0dHJpYnV0ZS5cIil9cmVuZGVyKHQpe3JldHVyblwiIFwiK09iamVjdC5rZXlzKHQpLmZpbHRlcigoaT0+dFtpXSkpLmpvaW4oXCIgXCIpK1wiIFwifXVwZGF0ZShpLFtzXSl7dmFyIHIsbztpZih2b2lkIDA9PT10aGlzLm50KXt0aGlzLm50PW5ldyBTZXQsdm9pZCAwIT09aS5zdHJpbmdzJiYodGhpcy5zdD1uZXcgU2V0KGkuc3RyaW5ncy5qb2luKFwiIFwiKS5zcGxpdCgvXFxzLykuZmlsdGVyKCh0PT5cIlwiIT09dCkpKSk7Zm9yKGNvbnN0IHQgaW4gcylzW3RdJiYhKG51bGw9PT0ocj10aGlzLnN0KXx8dm9pZCAwPT09cj92b2lkIDA6ci5oYXModCkpJiZ0aGlzLm50LmFkZCh0KTtyZXR1cm4gdGhpcy5yZW5kZXIocyl9Y29uc3QgZT1pLmVsZW1lbnQuY2xhc3NMaXN0O3RoaXMubnQuZm9yRWFjaCgodD0+e3QgaW4gc3x8KGUucmVtb3ZlKHQpLHRoaXMubnQuZGVsZXRlKHQpKX0pKTtmb3IoY29uc3QgdCBpbiBzKXtjb25zdCBpPSEhc1t0XTtpPT09dGhpcy5udC5oYXModCl8fChudWxsPT09KG89dGhpcy5zdCl8fHZvaWQgMD09PW8/dm9pZCAwOm8uaGFzKHQpKXx8KGk/KGUuYWRkKHQpLHRoaXMubnQuYWRkKHQpKTooZS5yZW1vdmUodCksdGhpcy5udC5kZWxldGUodCkpKX1yZXR1cm4gdH19KTtleHBvcnR7byBhcyBjbGFzc01hcH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGFzcy1tYXAuanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG5jb25zdCBkaXJlY3RpdmVzID0gbmV3IFdlYWtNYXAoKTtcbi8qKlxuICogQnJhbmRzIGEgZnVuY3Rpb24gYXMgYSBkaXJlY3RpdmUgZmFjdG9yeSBmdW5jdGlvbiBzbyB0aGF0IGxpdC1odG1sIHdpbGwgY2FsbFxuICogdGhlIGZ1bmN0aW9uIGR1cmluZyB0ZW1wbGF0ZSByZW5kZXJpbmcsIHJhdGhlciB0aGFuIHBhc3NpbmcgYXMgYSB2YWx1ZS5cbiAqXG4gKiBBIF9kaXJlY3RpdmVfIGlzIGEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIFBhcnQgYXMgYW4gYXJndW1lbnQuIEl0IGhhcyB0aGVcbiAqIHNpZ25hdHVyZTogYChwYXJ0OiBQYXJ0KSA9PiB2b2lkYC5cbiAqXG4gKiBBIGRpcmVjdGl2ZSBfZmFjdG9yeV8gaXMgYSBmdW5jdGlvbiB0aGF0IHRha2VzIGFyZ3VtZW50cyBmb3IgZGF0YSBhbmRcbiAqIGNvbmZpZ3VyYXRpb24gYW5kIHJldHVybnMgYSBkaXJlY3RpdmUuIFVzZXJzIG9mIGRpcmVjdGl2ZSB1c3VhbGx5IHJlZmVyIHRvXG4gKiB0aGUgZGlyZWN0aXZlIGZhY3RvcnkgYXMgdGhlIGRpcmVjdGl2ZS4gRm9yIGV4YW1wbGUsIFwiVGhlIHJlcGVhdCBkaXJlY3RpdmVcIi5cbiAqXG4gKiBVc3VhbGx5IGEgdGVtcGxhdGUgYXV0aG9yIHdpbGwgaW52b2tlIGEgZGlyZWN0aXZlIGZhY3RvcnkgaW4gdGhlaXIgdGVtcGxhdGVcbiAqIHdpdGggcmVsZXZhbnQgYXJndW1lbnRzLCB3aGljaCB3aWxsIHRoZW4gcmV0dXJuIGEgZGlyZWN0aXZlIGZ1bmN0aW9uLlxuICpcbiAqIEhlcmUncyBhbiBleGFtcGxlIG9mIHVzaW5nIHRoZSBgcmVwZWF0KClgIGRpcmVjdGl2ZSBmYWN0b3J5IHRoYXQgdGFrZXMgYW5cbiAqIGFycmF5IGFuZCBhIGZ1bmN0aW9uIHRvIHJlbmRlciBhbiBpdGVtOlxuICpcbiAqIGBgYGpzXG4gKiBodG1sYDx1bD48JHtyZXBlYXQoaXRlbXMsIChpdGVtKSA9PiBodG1sYDxsaT4ke2l0ZW19PC9saT5gKX08L3VsPmBcbiAqIGBgYFxuICpcbiAqIFdoZW4gYHJlcGVhdGAgaXMgaW52b2tlZCwgaXQgcmV0dXJucyBhIGRpcmVjdGl2ZSBmdW5jdGlvbiB0aGF0IGNsb3NlcyBvdmVyXG4gKiBgaXRlbXNgIGFuZCB0aGUgdGVtcGxhdGUgZnVuY3Rpb24uIFdoZW4gdGhlIG91dGVyIHRlbXBsYXRlIGlzIHJlbmRlcmVkLCB0aGVcbiAqIHJldHVybiBkaXJlY3RpdmUgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggdGhlIFBhcnQgZm9yIHRoZSBleHByZXNzaW9uLlxuICogYHJlcGVhdGAgdGhlbiBwZXJmb3JtcyBpdCdzIGN1c3RvbSBsb2dpYyB0byByZW5kZXIgbXVsdGlwbGUgaXRlbXMuXG4gKlxuICogQHBhcmFtIGYgVGhlIGRpcmVjdGl2ZSBmYWN0b3J5IGZ1bmN0aW9uLiBNdXN0IGJlIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFcbiAqIGZ1bmN0aW9uIG9mIHRoZSBzaWduYXR1cmUgYChwYXJ0OiBQYXJ0KSA9PiB2b2lkYC4gVGhlIHJldHVybmVkIGZ1bmN0aW9uIHdpbGxcbiAqIGJlIGNhbGxlZCB3aXRoIHRoZSBwYXJ0IG9iamVjdC5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGltcG9ydCB7ZGlyZWN0aXZlLCBodG1sfSBmcm9tICdsaXQtaHRtbCc7XG4gKlxuICogY29uc3QgaW1tdXRhYmxlID0gZGlyZWN0aXZlKCh2KSA9PiAocGFydCkgPT4ge1xuICogICBpZiAocGFydC52YWx1ZSAhPT0gdikge1xuICogICAgIHBhcnQuc2V0VmFsdWUodilcbiAqICAgfVxuICogfSk7XG4gKi9cbmV4cG9ydCBjb25zdCBkaXJlY3RpdmUgPSAoZikgPT4gKCguLi5hcmdzKSA9PiB7XG4gICAgY29uc3QgZCA9IGYoLi4uYXJncyk7XG4gICAgZGlyZWN0aXZlcy5zZXQoZCwgdHJ1ZSk7XG4gICAgcmV0dXJuIGQ7XG59KTtcbmV4cG9ydCBjb25zdCBpc0RpcmVjdGl2ZSA9IChvKSA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiBvID09PSAnZnVuY3Rpb24nICYmIGRpcmVjdGl2ZXMuaGFzKG8pO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpcmVjdGl2ZS5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG4vKipcbiAqIFRydWUgaWYgdGhlIGN1c3RvbSBlbGVtZW50cyBwb2x5ZmlsbCBpcyBpbiB1c2UuXG4gKi9cbmV4cG9ydCBjb25zdCBpc0NFUG9seWZpbGwgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHdpbmRvdy5jdXN0b21FbGVtZW50cyAhPSBudWxsICYmXG4gICAgd2luZG93LmN1c3RvbUVsZW1lbnRzLnBvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2sgIT09XG4gICAgICAgIHVuZGVmaW5lZDtcbi8qKlxuICogUmVwYXJlbnRzIG5vZGVzLCBzdGFydGluZyBmcm9tIGBzdGFydGAgKGluY2x1c2l2ZSkgdG8gYGVuZGAgKGV4Y2x1c2l2ZSksXG4gKiBpbnRvIGFub3RoZXIgY29udGFpbmVyIChjb3VsZCBiZSB0aGUgc2FtZSBjb250YWluZXIpLCBiZWZvcmUgYGJlZm9yZWAuIElmXG4gKiBgYmVmb3JlYCBpcyBudWxsLCBpdCBhcHBlbmRzIHRoZSBub2RlcyB0byB0aGUgY29udGFpbmVyLlxuICovXG5leHBvcnQgY29uc3QgcmVwYXJlbnROb2RlcyA9IChjb250YWluZXIsIHN0YXJ0LCBlbmQgPSBudWxsLCBiZWZvcmUgPSBudWxsKSA9PiB7XG4gICAgd2hpbGUgKHN0YXJ0ICE9PSBlbmQpIHtcbiAgICAgICAgY29uc3QgbiA9IHN0YXJ0Lm5leHRTaWJsaW5nO1xuICAgICAgICBjb250YWluZXIuaW5zZXJ0QmVmb3JlKHN0YXJ0LCBiZWZvcmUpO1xuICAgICAgICBzdGFydCA9IG47XG4gICAgfVxufTtcbi8qKlxuICogUmVtb3ZlcyBub2Rlcywgc3RhcnRpbmcgZnJvbSBgc3RhcnRgIChpbmNsdXNpdmUpIHRvIGBlbmRgIChleGNsdXNpdmUpLCBmcm9tXG4gKiBgY29udGFpbmVyYC5cbiAqL1xuZXhwb3J0IGNvbnN0IHJlbW92ZU5vZGVzID0gKGNvbnRhaW5lciwgc3RhcnQsIGVuZCA9IG51bGwpID0+IHtcbiAgICB3aGlsZSAoc3RhcnQgIT09IGVuZCkge1xuICAgICAgICBjb25zdCBuID0gc3RhcnQubmV4dFNpYmxpbmc7XG4gICAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChzdGFydCk7XG4gICAgICAgIHN0YXJ0ID0gbjtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZG9tLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxOCBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbi8qKlxuICogQSBzZW50aW5lbCB2YWx1ZSB0aGF0IHNpZ25hbHMgdGhhdCBhIHZhbHVlIHdhcyBoYW5kbGVkIGJ5IGEgZGlyZWN0aXZlIGFuZFxuICogc2hvdWxkIG5vdCBiZSB3cml0dGVuIHRvIHRoZSBET00uXG4gKi9cbmV4cG9ydCBjb25zdCBub0NoYW5nZSA9IHt9O1xuLyoqXG4gKiBBIHNlbnRpbmVsIHZhbHVlIHRoYXQgc2lnbmFscyBhIE5vZGVQYXJ0IHRvIGZ1bGx5IGNsZWFyIGl0cyBjb250ZW50LlxuICovXG5leHBvcnQgY29uc3Qgbm90aGluZyA9IHt9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFydC5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG4vKipcbiAqIEFuIGV4cHJlc3Npb24gbWFya2VyIHdpdGggZW1iZWRkZWQgdW5pcXVlIGtleSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aFxuICogcG9zc2libGUgdGV4dCBpbiB0ZW1wbGF0ZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBtYXJrZXIgPSBge3tsaXQtJHtTdHJpbmcoTWF0aC5yYW5kb20oKSkuc2xpY2UoMil9fX1gO1xuLyoqXG4gKiBBbiBleHByZXNzaW9uIG1hcmtlciB1c2VkIHRleHQtcG9zaXRpb25zLCBtdWx0aS1iaW5kaW5nIGF0dHJpYnV0ZXMsIGFuZFxuICogYXR0cmlidXRlcyB3aXRoIG1hcmt1cC1saWtlIHRleHQgdmFsdWVzLlxuICovXG5leHBvcnQgY29uc3Qgbm9kZU1hcmtlciA9IGA8IS0tJHttYXJrZXJ9LS0+YDtcbmV4cG9ydCBjb25zdCBtYXJrZXJSZWdleCA9IG5ldyBSZWdFeHAoYCR7bWFya2VyfXwke25vZGVNYXJrZXJ9YCk7XG4vKipcbiAqIFN1ZmZpeCBhcHBlbmRlZCB0byBhbGwgYm91bmQgYXR0cmlidXRlIG5hbWVzLlxuICovXG5leHBvcnQgY29uc3QgYm91bmRBdHRyaWJ1dGVTdWZmaXggPSAnJGxpdCQnO1xuLyoqXG4gKiBBbiB1cGRhdGFibGUgVGVtcGxhdGUgdGhhdCB0cmFja3MgdGhlIGxvY2F0aW9uIG9mIGR5bmFtaWMgcGFydHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUZW1wbGF0ZSB7XG4gICAgY29uc3RydWN0b3IocmVzdWx0LCBlbGVtZW50KSB7XG4gICAgICAgIHRoaXMucGFydHMgPSBbXTtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgY29uc3Qgbm9kZXNUb1JlbW92ZSA9IFtdO1xuICAgICAgICBjb25zdCBzdGFjayA9IFtdO1xuICAgICAgICAvLyBFZGdlIG5lZWRzIGFsbCA0IHBhcmFtZXRlcnMgcHJlc2VudDsgSUUxMSBuZWVkcyAzcmQgcGFyYW1ldGVyIHRvIGJlIG51bGxcbiAgICAgICAgY29uc3Qgd2Fsa2VyID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihlbGVtZW50LmNvbnRlbnQsIDEzMyAvKiBOb2RlRmlsdGVyLlNIT1dfe0VMRU1FTlR8Q09NTUVOVHxURVhUfSAqLywgbnVsbCwgZmFsc2UpO1xuICAgICAgICAvLyBLZWVwcyB0cmFjayBvZiB0aGUgbGFzdCBpbmRleCBhc3NvY2lhdGVkIHdpdGggYSBwYXJ0LiBXZSB0cnkgdG8gZGVsZXRlXG4gICAgICAgIC8vIHVubmVjZXNzYXJ5IG5vZGVzLCBidXQgd2UgbmV2ZXIgd2FudCB0byBhc3NvY2lhdGUgdHdvIGRpZmZlcmVudCBwYXJ0c1xuICAgICAgICAvLyB0byB0aGUgc2FtZSBpbmRleC4gVGhleSBtdXN0IGhhdmUgYSBjb25zdGFudCBub2RlIGJldHdlZW4uXG4gICAgICAgIGxldCBsYXN0UGFydEluZGV4ID0gMDtcbiAgICAgICAgbGV0IGluZGV4ID0gLTE7XG4gICAgICAgIGxldCBwYXJ0SW5kZXggPSAwO1xuICAgICAgICBjb25zdCB7IHN0cmluZ3MsIHZhbHVlczogeyBsZW5ndGggfSB9ID0gcmVzdWx0O1xuICAgICAgICB3aGlsZSAocGFydEluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gd2Fsa2VyLm5leHROb2RlKCk7XG4gICAgICAgICAgICBpZiAobm9kZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIFdlJ3ZlIGV4aGF1c3RlZCB0aGUgY29udGVudCBpbnNpZGUgYSBuZXN0ZWQgdGVtcGxhdGUgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBCZWNhdXNlIHdlIHN0aWxsIGhhdmUgcGFydHMgKHRoZSBvdXRlciBmb3ItbG9vcCksIHdlIGtub3c6XG4gICAgICAgICAgICAgICAgLy8gLSBUaGVyZSBpcyBhIHRlbXBsYXRlIGluIHRoZSBzdGFja1xuICAgICAgICAgICAgICAgIC8vIC0gVGhlIHdhbGtlciB3aWxsIGZpbmQgYSBuZXh0Tm9kZSBvdXRzaWRlIHRoZSB0ZW1wbGF0ZVxuICAgICAgICAgICAgICAgIHdhbGtlci5jdXJyZW50Tm9kZSA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAxIC8qIE5vZGUuRUxFTUVOVF9OT0RFICovKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuaGFzQXR0cmlidXRlcygpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBub2RlLmF0dHJpYnV0ZXM7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSBhdHRyaWJ1dGVzO1xuICAgICAgICAgICAgICAgICAgICAvLyBQZXJcbiAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL05hbWVkTm9kZU1hcCxcbiAgICAgICAgICAgICAgICAgICAgLy8gYXR0cmlidXRlcyBhcmUgbm90IGd1YXJhbnRlZWQgdG8gYmUgcmV0dXJuZWQgaW4gZG9jdW1lbnQgb3JkZXIuXG4gICAgICAgICAgICAgICAgICAgIC8vIEluIHBhcnRpY3VsYXIsIEVkZ2UvSUUgY2FuIHJldHVybiB0aGVtIG91dCBvZiBvcmRlciwgc28gd2UgY2Fubm90XG4gICAgICAgICAgICAgICAgICAgIC8vIGFzc3VtZSBhIGNvcnJlc3BvbmRlbmNlIGJldHdlZW4gcGFydCBpbmRleCBhbmQgYXR0cmlidXRlIGluZGV4LlxuICAgICAgICAgICAgICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW5kc1dpdGgoYXR0cmlidXRlc1tpXS5uYW1lLCBib3VuZEF0dHJpYnV0ZVN1ZmZpeCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChjb3VudC0tID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSB0ZW1wbGF0ZSBsaXRlcmFsIHNlY3Rpb24gbGVhZGluZyB1cCB0byB0aGUgZmlyc3RcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGV4cHJlc3Npb24gaW4gdGhpcyBhdHRyaWJ1dGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0cmluZ0ZvclBhcnQgPSBzdHJpbmdzW3BhcnRJbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGaW5kIHRoZSBhdHRyaWJ1dGUgbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IGxhc3RBdHRyaWJ1dGVOYW1lUmVnZXguZXhlYyhzdHJpbmdGb3JQYXJ0KVsyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpbmQgdGhlIGNvcnJlc3BvbmRpbmcgYXR0cmlidXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBbGwgYm91bmQgYXR0cmlidXRlcyBoYXZlIGhhZCBhIHN1ZmZpeCBhZGRlZCBpblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGVtcGxhdGVSZXN1bHQjZ2V0SFRNTCB0byBvcHQgb3V0IG9mIHNwZWNpYWwgYXR0cmlidXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBoYW5kbGluZy4gVG8gbG9vayB1cCB0aGUgYXR0cmlidXRlIHZhbHVlIHdlIGFsc28gbmVlZCB0byBhZGRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBzdWZmaXguXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVMb29rdXBOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpICsgYm91bmRBdHRyaWJ1dGVTdWZmaXg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVWYWx1ZSA9IG5vZGUuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZUxvb2t1cE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlTG9va3VwTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGF0aWNzID0gYXR0cmlidXRlVmFsdWUuc3BsaXQobWFya2VyUmVnZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJ0cy5wdXNoKHsgdHlwZTogJ2F0dHJpYnV0ZScsIGluZGV4LCBuYW1lLCBzdHJpbmdzOiBzdGF0aWNzIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFydEluZGV4ICs9IHN0YXRpY3MubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobm9kZS50YWdOYW1lID09PSAnVEVNUExBVEUnKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIHdhbGtlci5jdXJyZW50Tm9kZSA9IG5vZGUuY29udGVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChub2RlLm5vZGVUeXBlID09PSAzIC8qIE5vZGUuVEVYVF9OT0RFICovKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IG5vZGUuZGF0YTtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5pbmRleE9mKG1hcmtlcikgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0cmluZ3MgPSBkYXRhLnNwbGl0KG1hcmtlclJlZ2V4KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFzdEluZGV4ID0gc3RyaW5ncy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBhIG5ldyB0ZXh0IG5vZGUgZm9yIGVhY2ggbGl0ZXJhbCBzZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZXNlIG5vZGVzIGFyZSBhbHNvIHVzZWQgYXMgdGhlIG1hcmtlcnMgZm9yIG5vZGUgcGFydHNcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXN0SW5kZXg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGluc2VydDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzID0gc3RyaW5nc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydCA9IGNyZWF0ZU1hcmtlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSBsYXN0QXR0cmlidXRlTmFtZVJlZ2V4LmV4ZWMocyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoICE9PSBudWxsICYmIGVuZHNXaXRoKG1hdGNoWzJdLCBib3VuZEF0dHJpYnV0ZVN1ZmZpeCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcyA9IHMuc2xpY2UoMCwgbWF0Y2guaW5kZXgpICsgbWF0Y2hbMV0gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMl0uc2xpY2UoMCwgLWJvdW5kQXR0cmlidXRlU3VmZml4Lmxlbmd0aCkgKyBtYXRjaFszXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGluc2VydCwgbm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnRzLnB1c2goeyB0eXBlOiAnbm9kZScsIGluZGV4OiArK2luZGV4IH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gdGV4dCwgd2UgbXVzdCBpbnNlcnQgYSBjb21tZW50IHRvIG1hcmsgb3VyIHBsYWNlLlxuICAgICAgICAgICAgICAgICAgICAvLyBFbHNlLCB3ZSBjYW4gdHJ1c3QgaXQgd2lsbCBzdGljayBhcm91bmQgYWZ0ZXIgY2xvbmluZy5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0cmluZ3NbbGFzdEluZGV4XSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoY3JlYXRlTWFya2VyKCksIG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNUb1JlbW92ZS5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5kYXRhID0gc3RyaW5nc1tsYXN0SW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgYSBwYXJ0IGZvciBlYWNoIG1hdGNoIGZvdW5kXG4gICAgICAgICAgICAgICAgICAgIHBhcnRJbmRleCArPSBsYXN0SW5kZXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCAvKiBOb2RlLkNPTU1FTlRfTk9ERSAqLykge1xuICAgICAgICAgICAgICAgIGlmIChub2RlLmRhdGEgPT09IG1hcmtlcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCBhIG5ldyBtYXJrZXIgbm9kZSB0byBiZSB0aGUgc3RhcnROb2RlIG9mIHRoZSBQYXJ0IGlmIGFueSBvZlxuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgZm9sbG93aW5nIGFyZSB0cnVlOlxuICAgICAgICAgICAgICAgICAgICAvLyAgKiBXZSBkb24ndCBoYXZlIGEgcHJldmlvdXNTaWJsaW5nXG4gICAgICAgICAgICAgICAgICAgIC8vICAqIFRoZSBwcmV2aW91c1NpYmxpbmcgaXMgYWxyZWFkeSB0aGUgc3RhcnQgb2YgYSBwcmV2aW91cyBwYXJ0XG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlLnByZXZpb3VzU2libGluZyA9PT0gbnVsbCB8fCBpbmRleCA9PT0gbGFzdFBhcnRJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoY3JlYXRlTWFya2VyKCksIG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxhc3RQYXJ0SW5kZXggPSBpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJ0cy5wdXNoKHsgdHlwZTogJ25vZGUnLCBpbmRleCB9KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhIG5leHRTaWJsaW5nLCBrZWVwIHRoaXMgbm9kZSBzbyB3ZSBoYXZlIGFuIGVuZC5cbiAgICAgICAgICAgICAgICAgICAgLy8gRWxzZSwgd2UgY2FuIHJlbW92ZSBpdCB0byBzYXZlIGZ1dHVyZSBjb3N0cy5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUubmV4dFNpYmxpbmcgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuZGF0YSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNUb1JlbW92ZS5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgtLTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwYXJ0SW5kZXgrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpID0gLTE7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICgoaSA9IG5vZGUuZGF0YS5pbmRleE9mKG1hcmtlciwgaSArIDEpKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbW1lbnQgbm9kZSBoYXMgYSBiaW5kaW5nIG1hcmtlciBpbnNpZGUsIG1ha2UgYW4gaW5hY3RpdmUgcGFydFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGJpbmRpbmcgd29uJ3Qgd29yaywgYnV0IHN1YnNlcXVlbnQgYmluZGluZ3Mgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyAoanVzdGluZmFnbmFuaSk6IGNvbnNpZGVyIHdoZXRoZXIgaXQncyBldmVuIHdvcnRoIGl0IHRvXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYWtlIGJpbmRpbmdzIGluIGNvbW1lbnRzIHdvcmtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFydHMucHVzaCh7IHR5cGU6ICdub2RlJywgaW5kZXg6IC0xIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFydEluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVtb3ZlIHRleHQgYmluZGluZyBub2RlcyBhZnRlciB0aGUgd2FsayB0byBub3QgZGlzdHVyYiB0aGUgVHJlZVdhbGtlclxuICAgICAgICBmb3IgKGNvbnN0IG4gb2Ygbm9kZXNUb1JlbW92ZSkge1xuICAgICAgICAgICAgbi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG4pO1xuICAgICAgICB9XG4gICAgfVxufVxuY29uc3QgZW5kc1dpdGggPSAoc3RyLCBzdWZmaXgpID0+IHtcbiAgICBjb25zdCBpbmRleCA9IHN0ci5sZW5ndGggLSBzdWZmaXgubGVuZ3RoO1xuICAgIHJldHVybiBpbmRleCA+PSAwICYmIHN0ci5zbGljZShpbmRleCkgPT09IHN1ZmZpeDtcbn07XG5leHBvcnQgY29uc3QgaXNUZW1wbGF0ZVBhcnRBY3RpdmUgPSAocGFydCkgPT4gcGFydC5pbmRleCAhPT0gLTE7XG4vLyBBbGxvd3MgYGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJycpYCB0byBiZSByZW5hbWVkIGZvciBhXG4vLyBzbWFsbCBtYW51YWwgc2l6ZS1zYXZpbmdzLlxuZXhwb3J0IGNvbnN0IGNyZWF0ZU1hcmtlciA9ICgpID0+IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJycpO1xuLyoqXG4gKiBUaGlzIHJlZ2V4IGV4dHJhY3RzIHRoZSBhdHRyaWJ1dGUgbmFtZSBwcmVjZWRpbmcgYW4gYXR0cmlidXRlLXBvc2l0aW9uXG4gKiBleHByZXNzaW9uLiBJdCBkb2VzIHRoaXMgYnkgbWF0Y2hpbmcgdGhlIHN5bnRheCBhbGxvd2VkIGZvciBhdHRyaWJ1dGVzXG4gKiBhZ2FpbnN0IHRoZSBzdHJpbmcgbGl0ZXJhbCBkaXJlY3RseSBwcmVjZWRpbmcgdGhlIGV4cHJlc3Npb24sIGFzc3VtaW5nIHRoYXRcbiAqIHRoZSBleHByZXNzaW9uIGlzIGluIGFuIGF0dHJpYnV0ZS12YWx1ZSBwb3NpdGlvbi5cbiAqXG4gKiBTZWUgYXR0cmlidXRlcyBpbiB0aGUgSFRNTCBzcGVjOlxuICogaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L3N5bnRheC5odG1sI2VsZW1lbnRzLWF0dHJpYnV0ZXNcbiAqXG4gKiBcIiBcXHgwOVxceDBhXFx4MGNcXHgwZFwiIGFyZSBIVE1MIHNwYWNlIGNoYXJhY3RlcnM6XG4gKiBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvaW5mcmFzdHJ1Y3R1cmUuaHRtbCNzcGFjZS1jaGFyYWN0ZXJzXG4gKlxuICogXCJcXDAtXFx4MUZcXHg3Ri1cXHg5RlwiIGFyZSBVbmljb2RlIGNvbnRyb2wgY2hhcmFjdGVycywgd2hpY2ggaW5jbHVkZXMgZXZlcnlcbiAqIHNwYWNlIGNoYXJhY3RlciBleGNlcHQgXCIgXCIuXG4gKlxuICogU28gYW4gYXR0cmlidXRlIGlzOlxuICogICogVGhlIG5hbWU6IGFueSBjaGFyYWN0ZXIgZXhjZXB0IGEgY29udHJvbCBjaGFyYWN0ZXIsIHNwYWNlIGNoYXJhY3RlciwgKCcpLFxuICogICAgKFwiKSwgXCI+XCIsIFwiPVwiLCBvciBcIi9cIlxuICogICogRm9sbG93ZWQgYnkgemVybyBvciBtb3JlIHNwYWNlIGNoYXJhY3RlcnNcbiAqICAqIEZvbGxvd2VkIGJ5IFwiPVwiXG4gKiAgKiBGb2xsb3dlZCBieSB6ZXJvIG9yIG1vcmUgc3BhY2UgY2hhcmFjdGVyc1xuICogICogRm9sbG93ZWQgYnk6XG4gKiAgICAqIEFueSBjaGFyYWN0ZXIgZXhjZXB0IHNwYWNlLCAoJyksIChcIiksIFwiPFwiLCBcIj5cIiwgXCI9XCIsIChgKSwgb3JcbiAqICAgICogKFwiKSB0aGVuIGFueSBub24tKFwiKSwgb3JcbiAqICAgICogKCcpIHRoZW4gYW55IG5vbi0oJylcbiAqL1xuZXhwb3J0IGNvbnN0IGxhc3RBdHRyaWJ1dGVOYW1lUmVnZXggPSBcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4XG4vKFsgXFx4MDlcXHgwYVxceDBjXFx4MGRdKShbXlxcMC1cXHgxRlxceDdGLVxceDlGIFwiJz49L10rKShbIFxceDA5XFx4MGFcXHgwY1xceDBkXSo9WyBcXHgwOVxceDBhXFx4MGNcXHgwZF0qKD86W14gXFx4MDlcXHgwYVxceDBjXFx4MGRcIidgPD49XSp8XCJbXlwiXSp8J1teJ10qKSkkLztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRlbXBsYXRlLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbmltcG9ydCB7IGlzQ0VQb2x5ZmlsbCB9IGZyb20gJy4vZG9tLmpzJztcbmltcG9ydCB7IGlzVGVtcGxhdGVQYXJ0QWN0aXZlIH0gZnJvbSAnLi90ZW1wbGF0ZS5qcyc7XG4vKipcbiAqIEFuIGluc3RhbmNlIG9mIGEgYFRlbXBsYXRlYCB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byB0aGUgRE9NIGFuZCB1cGRhdGVkXG4gKiB3aXRoIG5ldyB2YWx1ZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUZW1wbGF0ZUluc3RhbmNlIHtcbiAgICBjb25zdHJ1Y3Rvcih0ZW1wbGF0ZSwgcHJvY2Vzc29yLCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX19wYXJ0cyA9IFtdO1xuICAgICAgICB0aGlzLnRlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgICAgIHRoaXMucHJvY2Vzc29yID0gcHJvY2Vzc29yO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICB1cGRhdGUodmFsdWVzKSB7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBwYXJ0IG9mIHRoaXMuX19wYXJ0cykge1xuICAgICAgICAgICAgaWYgKHBhcnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHBhcnQuc2V0VmFsdWUodmFsdWVzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHBhcnQgb2YgdGhpcy5fX3BhcnRzKSB7XG4gICAgICAgICAgICBpZiAocGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcGFydC5jb21taXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBfY2xvbmUoKSB7XG4gICAgICAgIC8vIFRoZXJlIGFyZSBhIG51bWJlciBvZiBzdGVwcyBpbiB0aGUgbGlmZWN5Y2xlIG9mIGEgdGVtcGxhdGUgaW5zdGFuY2Unc1xuICAgICAgICAvLyBET00gZnJhZ21lbnQ6XG4gICAgICAgIC8vICAxLiBDbG9uZSAtIGNyZWF0ZSB0aGUgaW5zdGFuY2UgZnJhZ21lbnRcbiAgICAgICAgLy8gIDIuIEFkb3B0IC0gYWRvcHQgaW50byB0aGUgbWFpbiBkb2N1bWVudFxuICAgICAgICAvLyAgMy4gUHJvY2VzcyAtIGZpbmQgcGFydCBtYXJrZXJzIGFuZCBjcmVhdGUgcGFydHNcbiAgICAgICAgLy8gIDQuIFVwZ3JhZGUgLSB1cGdyYWRlIGN1c3RvbSBlbGVtZW50c1xuICAgICAgICAvLyAgNS4gVXBkYXRlIC0gc2V0IG5vZGUsIGF0dHJpYnV0ZSwgcHJvcGVydHksIGV0Yy4sIHZhbHVlc1xuICAgICAgICAvLyAgNi4gQ29ubmVjdCAtIGNvbm5lY3QgdG8gdGhlIGRvY3VtZW50LiBPcHRpb25hbCBhbmQgb3V0c2lkZSBvZiB0aGlzXG4gICAgICAgIC8vICAgICBtZXRob2QuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFdlIGhhdmUgYSBmZXcgY29uc3RyYWludHMgb24gdGhlIG9yZGVyaW5nIG9mIHRoZXNlIHN0ZXBzOlxuICAgICAgICAvLyAgKiBXZSBuZWVkIHRvIHVwZ3JhZGUgYmVmb3JlIHVwZGF0aW5nLCBzbyB0aGF0IHByb3BlcnR5IHZhbHVlcyB3aWxsIHBhc3NcbiAgICAgICAgLy8gICAgdGhyb3VnaCBhbnkgcHJvcGVydHkgc2V0dGVycy5cbiAgICAgICAgLy8gICogV2Ugd291bGQgbGlrZSB0byBwcm9jZXNzIGJlZm9yZSB1cGdyYWRpbmcgc28gdGhhdCB3ZSdyZSBzdXJlIHRoYXQgdGhlXG4gICAgICAgIC8vICAgIGNsb25lZCBmcmFnbWVudCBpcyBpbmVydCBhbmQgbm90IGRpc3R1cmJlZCBieSBzZWxmLW1vZGlmeWluZyBET00uXG4gICAgICAgIC8vICAqIFdlIHdhbnQgY3VzdG9tIGVsZW1lbnRzIHRvIHVwZ3JhZGUgZXZlbiBpbiBkaXNjb25uZWN0ZWQgZnJhZ21lbnRzLlxuICAgICAgICAvL1xuICAgICAgICAvLyBHaXZlbiB0aGVzZSBjb25zdHJhaW50cywgd2l0aCBmdWxsIGN1c3RvbSBlbGVtZW50cyBzdXBwb3J0IHdlIHdvdWxkXG4gICAgICAgIC8vIHByZWZlciB0aGUgb3JkZXI6IENsb25lLCBQcm9jZXNzLCBBZG9wdCwgVXBncmFkZSwgVXBkYXRlLCBDb25uZWN0XG4gICAgICAgIC8vXG4gICAgICAgIC8vIEJ1dCBTYWZhcmkgZG9lcyBub3QgaW1wbGVtZW50IEN1c3RvbUVsZW1lbnRSZWdpc3RyeSN1cGdyYWRlLCBzbyB3ZVxuICAgICAgICAvLyBjYW4gbm90IGltcGxlbWVudCB0aGF0IG9yZGVyIGFuZCBzdGlsbCBoYXZlIHVwZ3JhZGUtYmVmb3JlLXVwZGF0ZSBhbmRcbiAgICAgICAgLy8gdXBncmFkZSBkaXNjb25uZWN0ZWQgZnJhZ21lbnRzLiBTbyB3ZSBpbnN0ZWFkIHNhY3JpZmljZSB0aGVcbiAgICAgICAgLy8gcHJvY2Vzcy1iZWZvcmUtdXBncmFkZSBjb25zdHJhaW50LCBzaW5jZSBpbiBDdXN0b20gRWxlbWVudHMgdjEgZWxlbWVudHNcbiAgICAgICAgLy8gbXVzdCBub3QgbW9kaWZ5IHRoZWlyIGxpZ2h0IERPTSBpbiB0aGUgY29uc3RydWN0b3IuIFdlIHN0aWxsIGhhdmUgaXNzdWVzXG4gICAgICAgIC8vIHdoZW4gY28tZXhpc3Rpbmcgd2l0aCBDRXYwIGVsZW1lbnRzIGxpa2UgUG9seW1lciAxLCBhbmQgd2l0aCBwb2x5ZmlsbHNcbiAgICAgICAgLy8gdGhhdCBkb24ndCBzdHJpY3RseSBhZGhlcmUgdG8gdGhlIG5vLW1vZGlmaWNhdGlvbiBydWxlIGJlY2F1c2Ugc2hhZG93XG4gICAgICAgIC8vIERPTSwgd2hpY2ggbWF5IGJlIGNyZWF0ZWQgaW4gdGhlIGNvbnN0cnVjdG9yLCBpcyBlbXVsYXRlZCBieSBiZWluZyBwbGFjZWRcbiAgICAgICAgLy8gaW4gdGhlIGxpZ2h0IERPTS5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gVGhlIHJlc3VsdGluZyBvcmRlciBpcyBvbiBuYXRpdmUgaXM6IENsb25lLCBBZG9wdCwgVXBncmFkZSwgUHJvY2VzcyxcbiAgICAgICAgLy8gVXBkYXRlLCBDb25uZWN0LiBkb2N1bWVudC5pbXBvcnROb2RlKCkgcGVyZm9ybXMgQ2xvbmUsIEFkb3B0LCBhbmQgVXBncmFkZVxuICAgICAgICAvLyBpbiBvbmUgc3RlcC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gVGhlIEN1c3RvbSBFbGVtZW50cyB2MSBwb2x5ZmlsbCBzdXBwb3J0cyB1cGdyYWRlKCksIHNvIHRoZSBvcmRlciB3aGVuXG4gICAgICAgIC8vIHBvbHlmaWxsZWQgaXMgdGhlIG1vcmUgaWRlYWw6IENsb25lLCBQcm9jZXNzLCBBZG9wdCwgVXBncmFkZSwgVXBkYXRlLFxuICAgICAgICAvLyBDb25uZWN0LlxuICAgICAgICBjb25zdCBmcmFnbWVudCA9IGlzQ0VQb2x5ZmlsbCA/XG4gICAgICAgICAgICB0aGlzLnRlbXBsYXRlLmVsZW1lbnQuY29udGVudC5jbG9uZU5vZGUodHJ1ZSkgOlxuICAgICAgICAgICAgZG9jdW1lbnQuaW1wb3J0Tm9kZSh0aGlzLnRlbXBsYXRlLmVsZW1lbnQuY29udGVudCwgdHJ1ZSk7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gW107XG4gICAgICAgIGNvbnN0IHBhcnRzID0gdGhpcy50ZW1wbGF0ZS5wYXJ0cztcbiAgICAgICAgLy8gRWRnZSBuZWVkcyBhbGwgNCBwYXJhbWV0ZXJzIHByZXNlbnQ7IElFMTEgbmVlZHMgM3JkIHBhcmFtZXRlciB0byBiZSBudWxsXG4gICAgICAgIGNvbnN0IHdhbGtlciA9IGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoZnJhZ21lbnQsIDEzMyAvKiBOb2RlRmlsdGVyLlNIT1dfe0VMRU1FTlR8Q09NTUVOVHxURVhUfSAqLywgbnVsbCwgZmFsc2UpO1xuICAgICAgICBsZXQgcGFydEluZGV4ID0gMDtcbiAgICAgICAgbGV0IG5vZGVJbmRleCA9IDA7XG4gICAgICAgIGxldCBwYXJ0O1xuICAgICAgICBsZXQgbm9kZSA9IHdhbGtlci5uZXh0Tm9kZSgpO1xuICAgICAgICAvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBub2RlcyBhbmQgcGFydHMgb2YgYSB0ZW1wbGF0ZVxuICAgICAgICB3aGlsZSAocGFydEluZGV4IDwgcGFydHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBwYXJ0ID0gcGFydHNbcGFydEluZGV4XTtcbiAgICAgICAgICAgIGlmICghaXNUZW1wbGF0ZVBhcnRBY3RpdmUocGFydCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9fcGFydHMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgIHBhcnRJbmRleCsrO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUHJvZ3Jlc3MgdGhlIHRyZWUgd2Fsa2VyIHVudGlsIHdlIGZpbmQgb3VyIG5leHQgcGFydCdzIG5vZGUuXG4gICAgICAgICAgICAvLyBOb3RlIHRoYXQgbXVsdGlwbGUgcGFydHMgbWF5IHNoYXJlIHRoZSBzYW1lIG5vZGUgKGF0dHJpYnV0ZSBwYXJ0c1xuICAgICAgICAgICAgLy8gb24gYSBzaW5nbGUgZWxlbWVudCksIHNvIHRoaXMgbG9vcCBtYXkgbm90IHJ1biBhdCBhbGwuXG4gICAgICAgICAgICB3aGlsZSAobm9kZUluZGV4IDwgcGFydC5pbmRleCkge1xuICAgICAgICAgICAgICAgIG5vZGVJbmRleCsrO1xuICAgICAgICAgICAgICAgIGlmIChub2RlLm5vZGVOYW1lID09PSAnVEVNUExBVEUnKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIHdhbGtlci5jdXJyZW50Tm9kZSA9IG5vZGUuY29udGVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKChub2RlID0gd2Fsa2VyLm5leHROb2RlKCkpID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlJ3ZlIGV4aGF1c3RlZCB0aGUgY29udGVudCBpbnNpZGUgYSBuZXN0ZWQgdGVtcGxhdGUgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAgICAgLy8gQmVjYXVzZSB3ZSBzdGlsbCBoYXZlIHBhcnRzICh0aGUgb3V0ZXIgZm9yLWxvb3ApLCB3ZSBrbm93OlxuICAgICAgICAgICAgICAgICAgICAvLyAtIFRoZXJlIGlzIGEgdGVtcGxhdGUgaW4gdGhlIHN0YWNrXG4gICAgICAgICAgICAgICAgICAgIC8vIC0gVGhlIHdhbGtlciB3aWxsIGZpbmQgYSBuZXh0Tm9kZSBvdXRzaWRlIHRoZSB0ZW1wbGF0ZVxuICAgICAgICAgICAgICAgICAgICB3YWxrZXIuY3VycmVudE5vZGUgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHdhbGtlci5uZXh0Tm9kZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFdlJ3ZlIGFycml2ZWQgYXQgb3VyIHBhcnQncyBub2RlLlxuICAgICAgICAgICAgaWYgKHBhcnQudHlwZSA9PT0gJ25vZGUnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFydCA9IHRoaXMucHJvY2Vzc29yLmhhbmRsZVRleHRFeHByZXNzaW9uKHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcGFydC5pbnNlcnRBZnRlck5vZGUobm9kZS5wcmV2aW91c1NpYmxpbmcpO1xuICAgICAgICAgICAgICAgIHRoaXMuX19wYXJ0cy5wdXNoKHBhcnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fX3BhcnRzLnB1c2goLi4udGhpcy5wcm9jZXNzb3IuaGFuZGxlQXR0cmlidXRlRXhwcmVzc2lvbnMobm9kZSwgcGFydC5uYW1lLCBwYXJ0LnN0cmluZ3MsIHRoaXMub3B0aW9ucykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFydEluZGV4Kys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ0VQb2x5ZmlsbCkge1xuICAgICAgICAgICAgZG9jdW1lbnQuYWRvcHROb2RlKGZyYWdtZW50KTtcbiAgICAgICAgICAgIGN1c3RvbUVsZW1lbnRzLnVwZ3JhZGUoZnJhZ21lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmcmFnbWVudDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZW1wbGF0ZS1pbnN0YW5jZS5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG4vKipcbiAqIEBtb2R1bGUgbGl0LWh0bWxcbiAqL1xuaW1wb3J0IHsgcmVwYXJlbnROb2RlcyB9IGZyb20gJy4vZG9tLmpzJztcbmltcG9ydCB7IGJvdW5kQXR0cmlidXRlU3VmZml4LCBsYXN0QXR0cmlidXRlTmFtZVJlZ2V4LCBtYXJrZXIsIG5vZGVNYXJrZXIgfSBmcm9tICcuL3RlbXBsYXRlLmpzJztcbi8qKlxuICogT3VyIFRydXN0ZWRUeXBlUG9saWN5IGZvciBIVE1MIHdoaWNoIGlzIGRlY2xhcmVkIHVzaW5nIHRoZSBodG1sIHRlbXBsYXRlXG4gKiB0YWcgZnVuY3Rpb24uXG4gKlxuICogVGhhdCBIVE1MIGlzIGEgZGV2ZWxvcGVyLWF1dGhvcmVkIGNvbnN0YW50LCBhbmQgaXMgcGFyc2VkIHdpdGggaW5uZXJIVE1MXG4gKiBiZWZvcmUgYW55IHVudHJ1c3RlZCBleHByZXNzaW9ucyBoYXZlIGJlZW4gbWl4ZWQgaW4uIFRoZXJlZm9yIGl0IGlzXG4gKiBjb25zaWRlcmVkIHNhZmUgYnkgY29uc3RydWN0aW9uLlxuICovXG5jb25zdCBwb2xpY3kgPSB3aW5kb3cudHJ1c3RlZFR5cGVzICYmXG4gICAgdHJ1c3RlZFR5cGVzLmNyZWF0ZVBvbGljeSgnbGl0LWh0bWwnLCB7IGNyZWF0ZUhUTUw6IChzKSA9PiBzIH0pO1xuY29uc3QgY29tbWVudE1hcmtlciA9IGAgJHttYXJrZXJ9IGA7XG4vKipcbiAqIFRoZSByZXR1cm4gdHlwZSBvZiBgaHRtbGAsIHdoaWNoIGhvbGRzIGEgVGVtcGxhdGUgYW5kIHRoZSB2YWx1ZXMgZnJvbVxuICogaW50ZXJwb2xhdGVkIGV4cHJlc3Npb25zLlxuICovXG5leHBvcnQgY2xhc3MgVGVtcGxhdGVSZXN1bHQge1xuICAgIGNvbnN0cnVjdG9yKHN0cmluZ3MsIHZhbHVlcywgdHlwZSwgcHJvY2Vzc29yKSB7XG4gICAgICAgIHRoaXMuc3RyaW5ncyA9IHN0cmluZ3M7XG4gICAgICAgIHRoaXMudmFsdWVzID0gdmFsdWVzO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnByb2Nlc3NvciA9IHByb2Nlc3NvcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHN0cmluZyBvZiBIVE1MIHVzZWQgdG8gY3JlYXRlIGEgYDx0ZW1wbGF0ZT5gIGVsZW1lbnQuXG4gICAgICovXG4gICAgZ2V0SFRNTCgpIHtcbiAgICAgICAgY29uc3QgbCA9IHRoaXMuc3RyaW5ncy5sZW5ndGggLSAxO1xuICAgICAgICBsZXQgaHRtbCA9ICcnO1xuICAgICAgICBsZXQgaXNDb21tZW50QmluZGluZyA9IGZhbHNlO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgcyA9IHRoaXMuc3RyaW5nc1tpXTtcbiAgICAgICAgICAgIC8vIEZvciBlYWNoIGJpbmRpbmcgd2Ugd2FudCB0byBkZXRlcm1pbmUgdGhlIGtpbmQgb2YgbWFya2VyIHRvIGluc2VydFxuICAgICAgICAgICAgLy8gaW50byB0aGUgdGVtcGxhdGUgc291cmNlIGJlZm9yZSBpdCdzIHBhcnNlZCBieSB0aGUgYnJvd3NlcidzIEhUTUxcbiAgICAgICAgICAgIC8vIHBhcnNlci4gVGhlIG1hcmtlciB0eXBlIGlzIGJhc2VkIG9uIHdoZXRoZXIgdGhlIGV4cHJlc3Npb24gaXMgaW4gYW5cbiAgICAgICAgICAgIC8vIGF0dHJpYnV0ZSwgdGV4dCwgb3IgY29tbWVudCBwb3NpdGlvbi5cbiAgICAgICAgICAgIC8vICAgKiBGb3Igbm9kZS1wb3NpdGlvbiBiaW5kaW5ncyB3ZSBpbnNlcnQgYSBjb21tZW50IHdpdGggdGhlIG1hcmtlclxuICAgICAgICAgICAgLy8gICAgIHNlbnRpbmVsIGFzIGl0cyB0ZXh0IGNvbnRlbnQsIGxpa2UgPCEtLXt7bGl0LWd1aWR9fS0tPi5cbiAgICAgICAgICAgIC8vICAgKiBGb3IgYXR0cmlidXRlIGJpbmRpbmdzIHdlIGluc2VydCBqdXN0IHRoZSBtYXJrZXIgc2VudGluZWwgZm9yIHRoZVxuICAgICAgICAgICAgLy8gICAgIGZpcnN0IGJpbmRpbmcsIHNvIHRoYXQgd2Ugc3VwcG9ydCB1bnF1b3RlZCBhdHRyaWJ1dGUgYmluZGluZ3MuXG4gICAgICAgICAgICAvLyAgICAgU3Vic2VxdWVudCBiaW5kaW5ncyBjYW4gdXNlIGEgY29tbWVudCBtYXJrZXIgYmVjYXVzZSBtdWx0aS1iaW5kaW5nXG4gICAgICAgICAgICAvLyAgICAgYXR0cmlidXRlcyBtdXN0IGJlIHF1b3RlZC5cbiAgICAgICAgICAgIC8vICAgKiBGb3IgY29tbWVudCBiaW5kaW5ncyB3ZSBpbnNlcnQganVzdCB0aGUgbWFya2VyIHNlbnRpbmVsIHNvIHdlIGRvbid0XG4gICAgICAgICAgICAvLyAgICAgY2xvc2UgdGhlIGNvbW1lbnQuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBjb2RlIHNjYW5zIHRoZSB0ZW1wbGF0ZSBzb3VyY2UsIGJ1dCBpcyAqbm90KiBhbiBIVE1MXG4gICAgICAgICAgICAvLyBwYXJzZXIuIFdlIGRvbid0IG5lZWQgdG8gdHJhY2sgdGhlIHRyZWUgc3RydWN0dXJlIG9mIHRoZSBIVE1MLCBvbmx5XG4gICAgICAgICAgICAvLyB3aGV0aGVyIGEgYmluZGluZyBpcyBpbnNpZGUgYSBjb21tZW50LCBhbmQgaWYgbm90LCBpZiBpdCBhcHBlYXJzIHRvIGJlXG4gICAgICAgICAgICAvLyB0aGUgZmlyc3QgYmluZGluZyBpbiBhbiBhdHRyaWJ1dGUuXG4gICAgICAgICAgICBjb25zdCBjb21tZW50T3BlbiA9IHMubGFzdEluZGV4T2YoJzwhLS0nKTtcbiAgICAgICAgICAgIC8vIFdlJ3JlIGluIGNvbW1lbnQgcG9zaXRpb24gaWYgd2UgaGF2ZSBhIGNvbW1lbnQgb3BlbiB3aXRoIG5vIGZvbGxvd2luZ1xuICAgICAgICAgICAgLy8gY29tbWVudCBjbG9zZS4gQmVjYXVzZSA8LS0gY2FuIGFwcGVhciBpbiBhbiBhdHRyaWJ1dGUgdmFsdWUgdGhlcmUgY2FuXG4gICAgICAgICAgICAvLyBiZSBmYWxzZSBwb3NpdGl2ZXMuXG4gICAgICAgICAgICBpc0NvbW1lbnRCaW5kaW5nID0gKGNvbW1lbnRPcGVuID4gLTEgfHwgaXNDb21tZW50QmluZGluZykgJiZcbiAgICAgICAgICAgICAgICBzLmluZGV4T2YoJy0tPicsIGNvbW1lbnRPcGVuICsgMSkgPT09IC0xO1xuICAgICAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYW4gYXR0cmlidXRlLWxpa2Ugc2VxdWVuY2UgcHJlY2VkaW5nIHRoZVxuICAgICAgICAgICAgLy8gZXhwcmVzc2lvbi4gVGhpcyBjYW4gbWF0Y2ggXCJuYW1lPXZhbHVlXCIgbGlrZSBzdHJ1Y3R1cmVzIGluIHRleHQsXG4gICAgICAgICAgICAvLyBjb21tZW50cywgYW5kIGF0dHJpYnV0ZSB2YWx1ZXMsIHNvIHRoZXJlIGNhbiBiZSBmYWxzZS1wb3NpdGl2ZXMuXG4gICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVNYXRjaCA9IGxhc3RBdHRyaWJ1dGVOYW1lUmVnZXguZXhlYyhzKTtcbiAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVNYXRjaCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIFdlJ3JlIG9ubHkgaW4gdGhpcyBicmFuY2ggaWYgd2UgZG9uJ3QgaGF2ZSBhIGF0dHJpYnV0ZS1saWtlXG4gICAgICAgICAgICAgICAgLy8gcHJlY2VkaW5nIHNlcXVlbmNlLiBGb3IgY29tbWVudHMsIHRoaXMgZ3VhcmRzIGFnYWluc3QgdW51c3VhbFxuICAgICAgICAgICAgICAgIC8vIGF0dHJpYnV0ZSB2YWx1ZXMgbGlrZSA8ZGl2IGZvbz1cIjwhLS0keydiYXInfVwiPi4gQ2FzZXMgbGlrZVxuICAgICAgICAgICAgICAgIC8vIDwhLS0gZm9vPSR7J2Jhcid9LS0+IGFyZSBoYW5kbGVkIGNvcnJlY3RseSBpbiB0aGUgYXR0cmlidXRlIGJyYW5jaFxuICAgICAgICAgICAgICAgIC8vIGJlbG93LlxuICAgICAgICAgICAgICAgIGh0bWwgKz0gcyArIChpc0NvbW1lbnRCaW5kaW5nID8gY29tbWVudE1hcmtlciA6IG5vZGVNYXJrZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gRm9yIGF0dHJpYnV0ZXMgd2UgdXNlIGp1c3QgYSBtYXJrZXIgc2VudGluZWwsIGFuZCBhbHNvIGFwcGVuZCBhXG4gICAgICAgICAgICAgICAgLy8gJGxpdCQgc3VmZml4IHRvIHRoZSBuYW1lIHRvIG9wdC1vdXQgb2YgYXR0cmlidXRlLXNwZWNpZmljIHBhcnNpbmdcbiAgICAgICAgICAgICAgICAvLyB0aGF0IElFIGFuZCBFZGdlIGRvIGZvciBzdHlsZSBhbmQgY2VydGFpbiBTVkcgYXR0cmlidXRlcy5cbiAgICAgICAgICAgICAgICBodG1sICs9IHMuc3Vic3RyKDAsIGF0dHJpYnV0ZU1hdGNoLmluZGV4KSArIGF0dHJpYnV0ZU1hdGNoWzFdICtcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlTWF0Y2hbMl0gKyBib3VuZEF0dHJpYnV0ZVN1ZmZpeCArIGF0dHJpYnV0ZU1hdGNoWzNdICtcbiAgICAgICAgICAgICAgICAgICAgbWFya2VyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGh0bWwgKz0gdGhpcy5zdHJpbmdzW2xdO1xuICAgICAgICByZXR1cm4gaHRtbDtcbiAgICB9XG4gICAgZ2V0VGVtcGxhdGVFbGVtZW50KCkge1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG4gICAgICAgIGxldCB2YWx1ZSA9IHRoaXMuZ2V0SFRNTCgpO1xuICAgICAgICBpZiAocG9saWN5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgc2VjdXJlIGJlY2F1c2UgYHRoaXMuc3RyaW5nc2AgaXMgYSBUZW1wbGF0ZVN0cmluZ3NBcnJheS5cbiAgICAgICAgICAgIC8vIFRPRE86IHZhbGlkYXRlIHRoaXMgd2hlblxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtYXJyYXktaXMtdGVtcGxhdGUtb2JqZWN0IGlzXG4gICAgICAgICAgICAvLyBpbXBsZW1lbnRlZC5cbiAgICAgICAgICAgIHZhbHVlID0gcG9saWN5LmNyZWF0ZUhUTUwodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgfVxufVxuLyoqXG4gKiBBIFRlbXBsYXRlUmVzdWx0IGZvciBTVkcgZnJhZ21lbnRzLlxuICpcbiAqIFRoaXMgY2xhc3Mgd3JhcHMgSFRNTCBpbiBhbiBgPHN2Zz5gIHRhZyBpbiBvcmRlciB0byBwYXJzZSBpdHMgY29udGVudHMgaW4gdGhlXG4gKiBTVkcgbmFtZXNwYWNlLCB0aGVuIG1vZGlmaWVzIHRoZSB0ZW1wbGF0ZSB0byByZW1vdmUgdGhlIGA8c3ZnPmAgdGFnIHNvIHRoYXRcbiAqIGNsb25lcyBvbmx5IGNvbnRhaW5lciB0aGUgb3JpZ2luYWwgZnJhZ21lbnQuXG4gKi9cbmV4cG9ydCBjbGFzcyBTVkdUZW1wbGF0ZVJlc3VsdCBleHRlbmRzIFRlbXBsYXRlUmVzdWx0IHtcbiAgICBnZXRIVE1MKCkge1xuICAgICAgICByZXR1cm4gYDxzdmc+JHtzdXBlci5nZXRIVE1MKCl9PC9zdmc+YDtcbiAgICB9XG4gICAgZ2V0VGVtcGxhdGVFbGVtZW50KCkge1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IHN1cGVyLmdldFRlbXBsYXRlRWxlbWVudCgpO1xuICAgICAgICBjb25zdCBjb250ZW50ID0gdGVtcGxhdGUuY29udGVudDtcbiAgICAgICAgY29uc3Qgc3ZnRWxlbWVudCA9IGNvbnRlbnQuZmlyc3RDaGlsZDtcbiAgICAgICAgY29udGVudC5yZW1vdmVDaGlsZChzdmdFbGVtZW50KTtcbiAgICAgICAgcmVwYXJlbnROb2Rlcyhjb250ZW50LCBzdmdFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGVtcGxhdGUtcmVzdWx0LmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbmltcG9ydCB7IGlzRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmUuanMnO1xuaW1wb3J0IHsgcmVtb3ZlTm9kZXMgfSBmcm9tICcuL2RvbS5qcyc7XG5pbXBvcnQgeyBub0NoYW5nZSwgbm90aGluZyB9IGZyb20gJy4vcGFydC5qcyc7XG5pbXBvcnQgeyBUZW1wbGF0ZUluc3RhbmNlIH0gZnJvbSAnLi90ZW1wbGF0ZS1pbnN0YW5jZS5qcyc7XG5pbXBvcnQgeyBUZW1wbGF0ZVJlc3VsdCB9IGZyb20gJy4vdGVtcGxhdGUtcmVzdWx0LmpzJztcbmltcG9ydCB7IGNyZWF0ZU1hcmtlciB9IGZyb20gJy4vdGVtcGxhdGUuanMnO1xuZXhwb3J0IGNvbnN0IGlzUHJpbWl0aXZlID0gKHZhbHVlKSA9PiB7XG4gICAgcmV0dXJuICh2YWx1ZSA9PT0gbnVsbCB8fFxuICAgICAgICAhKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSk7XG59O1xuZXhwb3J0IGNvbnN0IGlzSXRlcmFibGUgPSAodmFsdWUpID0+IHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHxcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgISEodmFsdWUgJiYgdmFsdWVbU3ltYm9sLml0ZXJhdG9yXSk7XG59O1xuLyoqXG4gKiBXcml0ZXMgYXR0cmlidXRlIHZhbHVlcyB0byB0aGUgRE9NIGZvciBhIGdyb3VwIG9mIEF0dHJpYnV0ZVBhcnRzIGJvdW5kIHRvIGFcbiAqIHNpbmdsZSBhdHRyaWJ1dGUuIFRoZSB2YWx1ZSBpcyBvbmx5IHNldCBvbmNlIGV2ZW4gaWYgdGhlcmUgYXJlIG11bHRpcGxlIHBhcnRzXG4gKiBmb3IgYW4gYXR0cmlidXRlLlxuICovXG5leHBvcnQgY2xhc3MgQXR0cmlidXRlQ29tbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBuYW1lLCBzdHJpbmdzKSB7XG4gICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnN0cmluZ3MgPSBzdHJpbmdzO1xuICAgICAgICB0aGlzLnBhcnRzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyaW5ncy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMucGFydHNbaV0gPSB0aGlzLl9jcmVhdGVQYXJ0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNpbmdsZSBwYXJ0LiBPdmVycmlkZSB0aGlzIHRvIGNyZWF0ZSBhIGRpZmZlcm50IHR5cGUgb2YgcGFydC5cbiAgICAgKi9cbiAgICBfY3JlYXRlUGFydCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBdHRyaWJ1dGVQYXJ0KHRoaXMpO1xuICAgIH1cbiAgICBfZ2V0VmFsdWUoKSB7XG4gICAgICAgIGNvbnN0IHN0cmluZ3MgPSB0aGlzLnN0cmluZ3M7XG4gICAgICAgIGNvbnN0IGwgPSBzdHJpbmdzLmxlbmd0aCAtIDE7XG4gICAgICAgIGNvbnN0IHBhcnRzID0gdGhpcy5wYXJ0cztcbiAgICAgICAgLy8gSWYgd2UncmUgYXNzaWduaW5nIGFuIGF0dHJpYnV0ZSB2aWEgc3ludGF4IGxpa2U6XG4gICAgICAgIC8vICAgIGF0dHI9XCIke2Zvb31cIiAgb3IgIGF0dHI9JHtmb299XG4gICAgICAgIC8vIGJ1dCBub3RcbiAgICAgICAgLy8gICAgYXR0cj1cIiR7Zm9vfSAke2Jhcn1cIiBvciBhdHRyPVwiJHtmb299IGJhelwiXG4gICAgICAgIC8vIHRoZW4gd2UgZG9uJ3Qgd2FudCB0byBjb2VyY2UgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBpbnRvIG9uZSBsb25nXG4gICAgICAgIC8vIHN0cmluZy4gSW5zdGVhZCB3ZSB3YW50IHRvIGp1c3QgcmV0dXJuIHRoZSB2YWx1ZSBpdHNlbGYgZGlyZWN0bHksXG4gICAgICAgIC8vIHNvIHRoYXQgc2FuaXRpemVET01WYWx1ZSBjYW4gZ2V0IHRoZSBhY3R1YWwgdmFsdWUgcmF0aGVyIHRoYW5cbiAgICAgICAgLy8gU3RyaW5nKHZhbHVlKVxuICAgICAgICAvLyBUaGUgZXhjZXB0aW9uIGlzIGlmIHYgaXMgYW4gYXJyYXksIGluIHdoaWNoIGNhc2Ugd2UgZG8gd2FudCB0byBzbWFzaFxuICAgICAgICAvLyBpdCB0b2dldGhlciBpbnRvIGEgc3RyaW5nIHdpdGhvdXQgY2FsbGluZyBTdHJpbmcoKSBvbiB0aGUgYXJyYXkuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFRoaXMgYWxzbyBhbGxvd3MgdHJ1c3RlZCB2YWx1ZXMgKHdoZW4gdXNpbmcgVHJ1c3RlZFR5cGVzKSBiZWluZ1xuICAgICAgICAvLyBhc3NpZ25lZCB0byBET00gc2lua3Mgd2l0aG91dCBiZWluZyBzdHJpbmdpZmllZCBpbiB0aGUgcHJvY2Vzcy5cbiAgICAgICAgaWYgKGwgPT09IDEgJiYgc3RyaW5nc1swXSA9PT0gJycgJiYgc3RyaW5nc1sxXSA9PT0gJycpIHtcbiAgICAgICAgICAgIGNvbnN0IHYgPSBwYXJ0c1swXS52YWx1ZTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdiA9PT0gJ3N5bWJvbCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nKHYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2ID09PSAnc3RyaW5nJyB8fCAhaXNJdGVyYWJsZSh2KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCB0ZXh0ID0gJyc7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICB0ZXh0ICs9IHN0cmluZ3NbaV07XG4gICAgICAgICAgICBjb25zdCBwYXJ0ID0gcGFydHNbaV07XG4gICAgICAgICAgICBpZiAocGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdiA9IHBhcnQudmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKGlzUHJpbWl0aXZlKHYpIHx8ICFpc0l0ZXJhYmxlKHYpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHQgKz0gdHlwZW9mIHYgPT09ICdzdHJpbmcnID8gdiA6IFN0cmluZyh2KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiB2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9IHR5cGVvZiB0ID09PSAnc3RyaW5nJyA/IHQgOiBTdHJpbmcodCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGV4dCArPSBzdHJpbmdzW2xdO1xuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG4gICAgY29tbWl0KCkge1xuICAgICAgICBpZiAodGhpcy5kaXJ0eSkge1xuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSh0aGlzLm5hbWUsIHRoaXMuX2dldFZhbHVlKCkpO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBBIFBhcnQgdGhhdCBjb250cm9scyBhbGwgb3IgcGFydCBvZiBhbiBhdHRyaWJ1dGUgdmFsdWUuXG4gKi9cbmV4cG9ydCBjbGFzcyBBdHRyaWJ1dGVQYXJ0IHtcbiAgICBjb25zdHJ1Y3Rvcihjb21taXR0ZXIpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jb21taXR0ZXIgPSBjb21taXR0ZXI7XG4gICAgfVxuICAgIHNldFZhbHVlKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbm9DaGFuZ2UgJiYgKCFpc1ByaW1pdGl2ZSh2YWx1ZSkgfHwgdmFsdWUgIT09IHRoaXMudmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAvLyBJZiB0aGUgdmFsdWUgaXMgYSBub3QgYSBkaXJlY3RpdmUsIGRpcnR5IHRoZSBjb21taXR0ZXIgc28gdGhhdCBpdCdsbFxuICAgICAgICAgICAgLy8gY2FsbCBzZXRBdHRyaWJ1dGUuIElmIHRoZSB2YWx1ZSBpcyBhIGRpcmVjdGl2ZSwgaXQnbGwgZGlydHkgdGhlXG4gICAgICAgICAgICAvLyBjb21taXR0ZXIgaWYgaXQgY2FsbHMgc2V0VmFsdWUoKS5cbiAgICAgICAgICAgIGlmICghaXNEaXJlY3RpdmUodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb21taXR0ZXIuZGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNvbW1pdCgpIHtcbiAgICAgICAgd2hpbGUgKGlzRGlyZWN0aXZlKHRoaXMudmFsdWUpKSB7XG4gICAgICAgICAgICBjb25zdCBkaXJlY3RpdmUgPSB0aGlzLnZhbHVlO1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IG5vQ2hhbmdlO1xuICAgICAgICAgICAgZGlyZWN0aXZlKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnZhbHVlID09PSBub0NoYW5nZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29tbWl0dGVyLmNvbW1pdCgpO1xuICAgIH1cbn1cbi8qKlxuICogQSBQYXJ0IHRoYXQgY29udHJvbHMgYSBsb2NhdGlvbiB3aXRoaW4gYSBOb2RlIHRyZWUuIExpa2UgYSBSYW5nZSwgTm9kZVBhcnRcbiAqIGhhcyBzdGFydCBhbmQgZW5kIGxvY2F0aW9ucyBhbmQgY2FuIHNldCBhbmQgdXBkYXRlIHRoZSBOb2RlcyBiZXR3ZWVuIHRob3NlXG4gKiBsb2NhdGlvbnMuXG4gKlxuICogTm9kZVBhcnRzIHN1cHBvcnQgc2V2ZXJhbCB2YWx1ZSB0eXBlczogcHJpbWl0aXZlcywgTm9kZXMsIFRlbXBsYXRlUmVzdWx0cyxcbiAqIGFzIHdlbGwgYXMgYXJyYXlzIGFuZCBpdGVyYWJsZXMgb2YgdGhvc2UgdHlwZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBOb2RlUGFydCB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB0aGlzLnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBcHBlbmRzIHRoaXMgcGFydCBpbnRvIGEgY29udGFpbmVyLlxuICAgICAqXG4gICAgICogVGhpcyBwYXJ0IG11c3QgYmUgZW1wdHksIGFzIGl0cyBjb250ZW50cyBhcmUgbm90IGF1dG9tYXRpY2FsbHkgbW92ZWQuXG4gICAgICovXG4gICAgYXBwZW5kSW50byhjb250YWluZXIpIHtcbiAgICAgICAgdGhpcy5zdGFydE5vZGUgPSBjb250YWluZXIuYXBwZW5kQ2hpbGQoY3JlYXRlTWFya2VyKCkpO1xuICAgICAgICB0aGlzLmVuZE5vZGUgPSBjb250YWluZXIuYXBwZW5kQ2hpbGQoY3JlYXRlTWFya2VyKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnNlcnRzIHRoaXMgcGFydCBhZnRlciB0aGUgYHJlZmAgbm9kZSAoYmV0d2VlbiBgcmVmYCBhbmQgYHJlZmAncyBuZXh0XG4gICAgICogc2libGluZykuIEJvdGggYHJlZmAgYW5kIGl0cyBuZXh0IHNpYmxpbmcgbXVzdCBiZSBzdGF0aWMsIHVuY2hhbmdpbmcgbm9kZXNcbiAgICAgKiBzdWNoIGFzIHRob3NlIHRoYXQgYXBwZWFyIGluIGEgbGl0ZXJhbCBzZWN0aW9uIG9mIGEgdGVtcGxhdGUuXG4gICAgICpcbiAgICAgKiBUaGlzIHBhcnQgbXVzdCBiZSBlbXB0eSwgYXMgaXRzIGNvbnRlbnRzIGFyZSBub3QgYXV0b21hdGljYWxseSBtb3ZlZC5cbiAgICAgKi9cbiAgICBpbnNlcnRBZnRlck5vZGUocmVmKSB7XG4gICAgICAgIHRoaXMuc3RhcnROb2RlID0gcmVmO1xuICAgICAgICB0aGlzLmVuZE5vZGUgPSByZWYubmV4dFNpYmxpbmc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGVuZHMgdGhpcyBwYXJ0IGludG8gYSBwYXJlbnQgcGFydC5cbiAgICAgKlxuICAgICAqIFRoaXMgcGFydCBtdXN0IGJlIGVtcHR5LCBhcyBpdHMgY29udGVudHMgYXJlIG5vdCBhdXRvbWF0aWNhbGx5IG1vdmVkLlxuICAgICAqL1xuICAgIGFwcGVuZEludG9QYXJ0KHBhcnQpIHtcbiAgICAgICAgcGFydC5fX2luc2VydCh0aGlzLnN0YXJ0Tm9kZSA9IGNyZWF0ZU1hcmtlcigpKTtcbiAgICAgICAgcGFydC5fX2luc2VydCh0aGlzLmVuZE5vZGUgPSBjcmVhdGVNYXJrZXIoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluc2VydHMgdGhpcyBwYXJ0IGFmdGVyIHRoZSBgcmVmYCBwYXJ0LlxuICAgICAqXG4gICAgICogVGhpcyBwYXJ0IG11c3QgYmUgZW1wdHksIGFzIGl0cyBjb250ZW50cyBhcmUgbm90IGF1dG9tYXRpY2FsbHkgbW92ZWQuXG4gICAgICovXG4gICAgaW5zZXJ0QWZ0ZXJQYXJ0KHJlZikge1xuICAgICAgICByZWYuX19pbnNlcnQodGhpcy5zdGFydE5vZGUgPSBjcmVhdGVNYXJrZXIoKSk7XG4gICAgICAgIHRoaXMuZW5kTm9kZSA9IHJlZi5lbmROb2RlO1xuICAgICAgICByZWYuZW5kTm9kZSA9IHRoaXMuc3RhcnROb2RlO1xuICAgIH1cbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGNvbW1pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhcnROb2RlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoaXNEaXJlY3RpdmUodGhpcy5fX3BlbmRpbmdWYWx1ZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGl2ZSA9IHRoaXMuX19wZW5kaW5nVmFsdWU7XG4gICAgICAgICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gbm9DaGFuZ2U7XG4gICAgICAgICAgICBkaXJlY3RpdmUodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLl9fcGVuZGluZ1ZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgPT09IG5vQ2hhbmdlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJpbWl0aXZlKHZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB0aGlzLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fX2NvbW1pdFRleHQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIHRoaXMuX19jb21taXRUZW1wbGF0ZVJlc3VsdCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBOb2RlKSB7XG4gICAgICAgICAgICB0aGlzLl9fY29tbWl0Tm9kZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNJdGVyYWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX19jb21taXRJdGVyYWJsZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUgPT09IG5vdGhpbmcpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBub3RoaW5nO1xuICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gRmFsbGJhY2ssIHdpbGwgcmVuZGVyIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb25cbiAgICAgICAgICAgIHRoaXMuX19jb21taXRUZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfX2luc2VydChub2RlKSB7XG4gICAgICAgIHRoaXMuZW5kTm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCB0aGlzLmVuZE5vZGUpO1xuICAgIH1cbiAgICBfX2NvbW1pdE5vZGUodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMudmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICB0aGlzLl9faW5zZXJ0KHZhbHVlKTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBfX2NvbW1pdFRleHQodmFsdWUpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xuICAgICAgICAvLyBJZiBgdmFsdWVgIGlzbid0IGFscmVhZHkgYSBzdHJpbmcsIHdlIGV4cGxpY2l0bHkgY29udmVydCBpdCBoZXJlIGluIGNhc2VcbiAgICAgICAgLy8gaXQgY2FuJ3QgYmUgaW1wbGljaXRseSBjb252ZXJ0ZWQgLSBpLmUuIGl0J3MgYSBzeW1ib2wuXG4gICAgICAgIGNvbnN0IHZhbHVlQXNTdHJpbmcgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gdmFsdWUgOiBTdHJpbmcodmFsdWUpO1xuICAgICAgICBpZiAobm9kZSA9PT0gdGhpcy5lbmROb2RlLnByZXZpb3VzU2libGluZyAmJlxuICAgICAgICAgICAgbm9kZS5ub2RlVHlwZSA9PT0gMyAvKiBOb2RlLlRFWFRfTk9ERSAqLykge1xuICAgICAgICAgICAgLy8gSWYgd2Ugb25seSBoYXZlIGEgc2luZ2xlIHRleHQgbm9kZSBiZXR3ZWVuIHRoZSBtYXJrZXJzLCB3ZSBjYW4ganVzdFxuICAgICAgICAgICAgLy8gc2V0IGl0cyB2YWx1ZSwgcmF0aGVyIHRoYW4gcmVwbGFjaW5nIGl0LlxuICAgICAgICAgICAgLy8gVE9ETyhqdXN0aW5mYWduYW5pKTogQ2FuIHdlIGp1c3QgY2hlY2sgaWYgdGhpcy52YWx1ZSBpcyBwcmltaXRpdmU/XG4gICAgICAgICAgICBub2RlLmRhdGEgPSB2YWx1ZUFzU3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fX2NvbW1pdE5vZGUoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodmFsdWVBc1N0cmluZykpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgX19jb21taXRUZW1wbGF0ZVJlc3VsdCh2YWx1ZSkge1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRoaXMub3B0aW9ucy50ZW1wbGF0ZUZhY3RvcnkodmFsdWUpO1xuICAgICAgICBpZiAodGhpcy52YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlSW5zdGFuY2UgJiZcbiAgICAgICAgICAgIHRoaXMudmFsdWUudGVtcGxhdGUgPT09IHRlbXBsYXRlKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlLnVwZGF0ZSh2YWx1ZS52YWx1ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHdlIHByb3BhZ2F0ZSB0aGUgdGVtcGxhdGUgcHJvY2Vzc29yIGZyb20gdGhlIFRlbXBsYXRlUmVzdWx0XG4gICAgICAgICAgICAvLyBzbyB0aGF0IHdlIHVzZSBpdHMgc3ludGF4IGV4dGVuc2lvbiwgZXRjLiBUaGUgdGVtcGxhdGUgZmFjdG9yeSBjb21lc1xuICAgICAgICAgICAgLy8gZnJvbSB0aGUgcmVuZGVyIGZ1bmN0aW9uIG9wdGlvbnMgc28gdGhhdCBpdCBjYW4gY29udHJvbCB0ZW1wbGF0ZVxuICAgICAgICAgICAgLy8gY2FjaGluZyBhbmQgcHJlcHJvY2Vzc2luZy5cbiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gbmV3IFRlbXBsYXRlSW5zdGFuY2UodGVtcGxhdGUsIHZhbHVlLnByb2Nlc3NvciwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGZyYWdtZW50ID0gaW5zdGFuY2UuX2Nsb25lKCk7XG4gICAgICAgICAgICBpbnN0YW5jZS51cGRhdGUodmFsdWUudmFsdWVzKTtcbiAgICAgICAgICAgIHRoaXMuX19jb21taXROb2RlKGZyYWdtZW50KTtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBpbnN0YW5jZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfX2NvbW1pdEl0ZXJhYmxlKHZhbHVlKSB7XG4gICAgICAgIC8vIEZvciBhbiBJdGVyYWJsZSwgd2UgY3JlYXRlIGEgbmV3IEluc3RhbmNlUGFydCBwZXIgaXRlbSwgdGhlbiBzZXQgaXRzXG4gICAgICAgIC8vIHZhbHVlIHRvIHRoZSBpdGVtLiBUaGlzIGlzIGEgbGl0dGxlIGJpdCBvZiBvdmVyaGVhZCBmb3IgZXZlcnkgaXRlbSBpblxuICAgICAgICAvLyBhbiBJdGVyYWJsZSwgYnV0IGl0IGxldHMgdXMgcmVjdXJzZSBlYXNpbHkgYW5kIGVmZmljaWVudGx5IHVwZGF0ZSBBcnJheXNcbiAgICAgICAgLy8gb2YgVGVtcGxhdGVSZXN1bHRzIHRoYXQgd2lsbCBiZSBjb21tb25seSByZXR1cm5lZCBmcm9tIGV4cHJlc3Npb25zIGxpa2U6XG4gICAgICAgIC8vIGFycmF5Lm1hcCgoaSkgPT4gaHRtbGAke2l9YCksIGJ5IHJldXNpbmcgZXhpc3RpbmcgVGVtcGxhdGVJbnN0YW5jZXMuXG4gICAgICAgIC8vIElmIF92YWx1ZSBpcyBhbiBhcnJheSwgdGhlbiB0aGUgcHJldmlvdXMgcmVuZGVyIHdhcyBvZiBhblxuICAgICAgICAvLyBpdGVyYWJsZSBhbmQgX3ZhbHVlIHdpbGwgY29udGFpbiB0aGUgTm9kZVBhcnRzIGZyb20gdGhlIHByZXZpb3VzXG4gICAgICAgIC8vIHJlbmRlci4gSWYgX3ZhbHVlIGlzIG5vdCBhbiBhcnJheSwgY2xlYXIgdGhpcyBwYXJ0IGFuZCBtYWtlIGEgbmV3XG4gICAgICAgIC8vIGFycmF5IGZvciBOb2RlUGFydHMuXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh0aGlzLnZhbHVlKSkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIC8vIExldHMgdXMga2VlcCB0cmFjayBvZiBob3cgbWFueSBpdGVtcyB3ZSBzdGFtcGVkIHNvIHdlIGNhbiBjbGVhciBsZWZ0b3ZlclxuICAgICAgICAvLyBpdGVtcyBmcm9tIGEgcHJldmlvdXMgcmVuZGVyXG4gICAgICAgIGNvbnN0IGl0ZW1QYXJ0cyA9IHRoaXMudmFsdWU7XG4gICAgICAgIGxldCBwYXJ0SW5kZXggPSAwO1xuICAgICAgICBsZXQgaXRlbVBhcnQ7XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB2YWx1ZSkge1xuICAgICAgICAgICAgLy8gVHJ5IHRvIHJldXNlIGFuIGV4aXN0aW5nIHBhcnRcbiAgICAgICAgICAgIGl0ZW1QYXJ0ID0gaXRlbVBhcnRzW3BhcnRJbmRleF07XG4gICAgICAgICAgICAvLyBJZiBubyBleGlzdGluZyBwYXJ0LCBjcmVhdGUgYSBuZXcgb25lXG4gICAgICAgICAgICBpZiAoaXRlbVBhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGl0ZW1QYXJ0ID0gbmV3IE5vZGVQYXJ0KHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgaXRlbVBhcnRzLnB1c2goaXRlbVBhcnQpO1xuICAgICAgICAgICAgICAgIGlmIChwYXJ0SW5kZXggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbVBhcnQuYXBwZW5kSW50b1BhcnQodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpdGVtUGFydC5pbnNlcnRBZnRlclBhcnQoaXRlbVBhcnRzW3BhcnRJbmRleCAtIDFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpdGVtUGFydC5zZXRWYWx1ZShpdGVtKTtcbiAgICAgICAgICAgIGl0ZW1QYXJ0LmNvbW1pdCgpO1xuICAgICAgICAgICAgcGFydEluZGV4Kys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRJbmRleCA8IGl0ZW1QYXJ0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIFRydW5jYXRlIHRoZSBwYXJ0cyBhcnJheSBzbyBfdmFsdWUgcmVmbGVjdHMgdGhlIGN1cnJlbnQgc3RhdGVcbiAgICAgICAgICAgIGl0ZW1QYXJ0cy5sZW5ndGggPSBwYXJ0SW5kZXg7XG4gICAgICAgICAgICB0aGlzLmNsZWFyKGl0ZW1QYXJ0ICYmIGl0ZW1QYXJ0LmVuZE5vZGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNsZWFyKHN0YXJ0Tm9kZSA9IHRoaXMuc3RhcnROb2RlKSB7XG4gICAgICAgIHJlbW92ZU5vZGVzKHRoaXMuc3RhcnROb2RlLnBhcmVudE5vZGUsIHN0YXJ0Tm9kZS5uZXh0U2libGluZywgdGhpcy5lbmROb2RlKTtcbiAgICB9XG59XG4vKipcbiAqIEltcGxlbWVudHMgYSBib29sZWFuIGF0dHJpYnV0ZSwgcm91Z2hseSBhcyBkZWZpbmVkIGluIHRoZSBIVE1MXG4gKiBzcGVjaWZpY2F0aW9uLlxuICpcbiAqIElmIHRoZSB2YWx1ZSBpcyB0cnV0aHksIHRoZW4gdGhlIGF0dHJpYnV0ZSBpcyBwcmVzZW50IHdpdGggYSB2YWx1ZSBvZlxuICogJycuIElmIHRoZSB2YWx1ZSBpcyBmYWxzZXksIHRoZSBhdHRyaWJ1dGUgaXMgcmVtb3ZlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIEJvb2xlYW5BdHRyaWJ1dGVQYXJ0IHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBuYW1lLCBzdHJpbmdzKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChzdHJpbmdzLmxlbmd0aCAhPT0gMiB8fCBzdHJpbmdzWzBdICE9PSAnJyB8fCBzdHJpbmdzWzFdICE9PSAnJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdCb29sZWFuIGF0dHJpYnV0ZXMgY2FuIG9ubHkgY29udGFpbiBhIHNpbmdsZSBleHByZXNzaW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5zdHJpbmdzID0gc3RyaW5ncztcbiAgICB9XG4gICAgc2V0VmFsdWUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBjb21taXQoKSB7XG4gICAgICAgIHdoaWxlIChpc0RpcmVjdGl2ZSh0aGlzLl9fcGVuZGluZ1ZhbHVlKSkge1xuICAgICAgICAgICAgY29uc3QgZGlyZWN0aXZlID0gdGhpcy5fX3BlbmRpbmdWYWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSBub0NoYW5nZTtcbiAgICAgICAgICAgIGRpcmVjdGl2ZSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fX3BlbmRpbmdWYWx1ZSA9PT0gbm9DaGFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2YWx1ZSA9ICEhdGhpcy5fX3BlbmRpbmdWYWx1ZTtcbiAgICAgICAgaWYgKHRoaXMudmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKHRoaXMubmFtZSwgJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSh0aGlzLm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSBub0NoYW5nZTtcbiAgICB9XG59XG4vKipcbiAqIFNldHMgYXR0cmlidXRlIHZhbHVlcyBmb3IgUHJvcGVydHlQYXJ0cywgc28gdGhhdCB0aGUgdmFsdWUgaXMgb25seSBzZXQgb25jZVxuICogZXZlbiBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgcGFydHMgZm9yIGEgcHJvcGVydHkuXG4gKlxuICogSWYgYW4gZXhwcmVzc2lvbiBjb250cm9scyB0aGUgd2hvbGUgcHJvcGVydHkgdmFsdWUsIHRoZW4gdGhlIHZhbHVlIGlzIHNpbXBseVxuICogYXNzaWduZWQgdG8gdGhlIHByb3BlcnR5IHVuZGVyIGNvbnRyb2wuIElmIHRoZXJlIGFyZSBzdHJpbmcgbGl0ZXJhbHMgb3JcbiAqIG11bHRpcGxlIGV4cHJlc3Npb25zLCB0aGVuIHRoZSBzdHJpbmdzIGFyZSBleHByZXNzaW9ucyBhcmUgaW50ZXJwb2xhdGVkIGludG9cbiAqIGEgc3RyaW5nIGZpcnN0LlxuICovXG5leHBvcnQgY2xhc3MgUHJvcGVydHlDb21taXR0ZXIgZXh0ZW5kcyBBdHRyaWJ1dGVDb21taXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG5hbWUsIHN0cmluZ3MpIHtcbiAgICAgICAgc3VwZXIoZWxlbWVudCwgbmFtZSwgc3RyaW5ncyk7XG4gICAgICAgIHRoaXMuc2luZ2xlID1cbiAgICAgICAgICAgIChzdHJpbmdzLmxlbmd0aCA9PT0gMiAmJiBzdHJpbmdzWzBdID09PSAnJyAmJiBzdHJpbmdzWzFdID09PSAnJyk7XG4gICAgfVxuICAgIF9jcmVhdGVQYXJ0KCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb3BlcnR5UGFydCh0aGlzKTtcbiAgICB9XG4gICAgX2dldFZhbHVlKCkge1xuICAgICAgICBpZiAodGhpcy5zaW5nbGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnRzWzBdLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5fZ2V0VmFsdWUoKTtcbiAgICB9XG4gICAgY29tbWl0KCkge1xuICAgICAgICBpZiAodGhpcy5kaXJ0eSkge1xuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudFt0aGlzLm5hbWVdID0gdGhpcy5fZ2V0VmFsdWUoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBQcm9wZXJ0eVBhcnQgZXh0ZW5kcyBBdHRyaWJ1dGVQYXJ0IHtcbn1cbi8vIERldGVjdCBldmVudCBsaXN0ZW5lciBvcHRpb25zIHN1cHBvcnQuIElmIHRoZSBgY2FwdHVyZWAgcHJvcGVydHkgaXMgcmVhZFxuLy8gZnJvbSB0aGUgb3B0aW9ucyBvYmplY3QsIHRoZW4gb3B0aW9ucyBhcmUgc3VwcG9ydGVkLiBJZiBub3QsIHRoZW4gdGhlIHRoaXJkXG4vLyBhcmd1bWVudCB0byBhZGQvcmVtb3ZlRXZlbnRMaXN0ZW5lciBpcyBpbnRlcnByZXRlZCBhcyB0aGUgYm9vbGVhbiBjYXB0dXJlXG4vLyB2YWx1ZSBzbyB3ZSBzaG91bGQgb25seSBwYXNzIHRoZSBgY2FwdHVyZWAgcHJvcGVydHkuXG5sZXQgZXZlbnRPcHRpb25zU3VwcG9ydGVkID0gZmFsc2U7XG4vLyBXcmFwIGludG8gYW4gSUlGRSBiZWNhdXNlIE1TIEVkZ2UgPD0gdjQxIGRvZXMgbm90IHN1cHBvcnQgaGF2aW5nIHRyeS9jYXRjaFxuLy8gYmxvY2tzIHJpZ2h0IGludG8gdGhlIGJvZHkgb2YgYSBtb2R1bGVcbigoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGdldCBjYXB0dXJlKCkge1xuICAgICAgICAgICAgICAgIGV2ZW50T3B0aW9uc1N1cHBvcnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIG9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndGVzdCcsIG9wdGlvbnMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBjYXRjaCAoX2UpIHtcbiAgICAgICAgLy8gZXZlbnQgb3B0aW9ucyBub3Qgc3VwcG9ydGVkXG4gICAgfVxufSkoKTtcbmV4cG9ydCBjbGFzcyBFdmVudFBhcnQge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGV2ZW50TmFtZSwgZXZlbnRDb250ZXh0KSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuZXZlbnROYW1lID0gZXZlbnROYW1lO1xuICAgICAgICB0aGlzLmV2ZW50Q29udGV4dCA9IGV2ZW50Q29udGV4dDtcbiAgICAgICAgdGhpcy5fX2JvdW5kSGFuZGxlRXZlbnQgPSAoZSkgPT4gdGhpcy5oYW5kbGVFdmVudChlKTtcbiAgICB9XG4gICAgc2V0VmFsdWUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBjb21taXQoKSB7XG4gICAgICAgIHdoaWxlIChpc0RpcmVjdGl2ZSh0aGlzLl9fcGVuZGluZ1ZhbHVlKSkge1xuICAgICAgICAgICAgY29uc3QgZGlyZWN0aXZlID0gdGhpcy5fX3BlbmRpbmdWYWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSBub0NoYW5nZTtcbiAgICAgICAgICAgIGRpcmVjdGl2ZSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fX3BlbmRpbmdWYWx1ZSA9PT0gbm9DaGFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdMaXN0ZW5lciA9IHRoaXMuX19wZW5kaW5nVmFsdWU7XG4gICAgICAgIGNvbnN0IG9sZExpc3RlbmVyID0gdGhpcy52YWx1ZTtcbiAgICAgICAgY29uc3Qgc2hvdWxkUmVtb3ZlTGlzdGVuZXIgPSBuZXdMaXN0ZW5lciA9PSBudWxsIHx8XG4gICAgICAgICAgICBvbGRMaXN0ZW5lciAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgKG5ld0xpc3RlbmVyLmNhcHR1cmUgIT09IG9sZExpc3RlbmVyLmNhcHR1cmUgfHxcbiAgICAgICAgICAgICAgICAgICAgbmV3TGlzdGVuZXIub25jZSAhPT0gb2xkTGlzdGVuZXIub25jZSB8fFxuICAgICAgICAgICAgICAgICAgICBuZXdMaXN0ZW5lci5wYXNzaXZlICE9PSBvbGRMaXN0ZW5lci5wYXNzaXZlKTtcbiAgICAgICAgY29uc3Qgc2hvdWxkQWRkTGlzdGVuZXIgPSBuZXdMaXN0ZW5lciAhPSBudWxsICYmIChvbGRMaXN0ZW5lciA9PSBudWxsIHx8IHNob3VsZFJlbW92ZUxpc3RlbmVyKTtcbiAgICAgICAgaWYgKHNob3VsZFJlbW92ZUxpc3RlbmVyKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLmV2ZW50TmFtZSwgdGhpcy5fX2JvdW5kSGFuZGxlRXZlbnQsIHRoaXMuX19vcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hvdWxkQWRkTGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX19vcHRpb25zID0gZ2V0T3B0aW9ucyhuZXdMaXN0ZW5lcik7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLmV2ZW50TmFtZSwgdGhpcy5fX2JvdW5kSGFuZGxlRXZlbnQsIHRoaXMuX19vcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbHVlID0gbmV3TGlzdGVuZXI7XG4gICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSBub0NoYW5nZTtcbiAgICB9XG4gICAgaGFuZGxlRXZlbnQoZXZlbnQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlLmNhbGwodGhpcy5ldmVudENvbnRleHQgfHwgdGhpcy5lbGVtZW50LCBldmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlLmhhbmRsZUV2ZW50KGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIFdlIGNvcHkgb3B0aW9ucyBiZWNhdXNlIG9mIHRoZSBpbmNvbnNpc3RlbnQgYmVoYXZpb3Igb2YgYnJvd3NlcnMgd2hlbiByZWFkaW5nXG4vLyB0aGUgdGhpcmQgYXJndW1lbnQgb2YgYWRkL3JlbW92ZUV2ZW50TGlzdGVuZXIuIElFMTEgZG9lc24ndCBzdXBwb3J0IG9wdGlvbnNcbi8vIGF0IGFsbC4gQ2hyb21lIDQxIG9ubHkgcmVhZHMgYGNhcHR1cmVgIGlmIHRoZSBhcmd1bWVudCBpcyBhbiBvYmplY3QuXG5jb25zdCBnZXRPcHRpb25zID0gKG8pID0+IG8gJiZcbiAgICAoZXZlbnRPcHRpb25zU3VwcG9ydGVkID9cbiAgICAgICAgeyBjYXB0dXJlOiBvLmNhcHR1cmUsIHBhc3NpdmU6IG8ucGFzc2l2ZSwgb25jZTogby5vbmNlIH0gOlxuICAgICAgICBvLmNhcHR1cmUpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFydHMuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuaW1wb3J0IHsgQXR0cmlidXRlQ29tbWl0dGVyLCBCb29sZWFuQXR0cmlidXRlUGFydCwgRXZlbnRQYXJ0LCBOb2RlUGFydCwgUHJvcGVydHlDb21taXR0ZXIgfSBmcm9tICcuL3BhcnRzLmpzJztcbi8qKlxuICogQ3JlYXRlcyBQYXJ0cyB3aGVuIGEgdGVtcGxhdGUgaXMgaW5zdGFudGlhdGVkLlxuICovXG5leHBvcnQgY2xhc3MgRGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgcGFydHMgZm9yIGFuIGF0dHJpYnV0ZS1wb3NpdGlvbiBiaW5kaW5nLCBnaXZlbiB0aGUgZXZlbnQsIGF0dHJpYnV0ZVxuICAgICAqIG5hbWUsIGFuZCBzdHJpbmcgbGl0ZXJhbHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBUaGUgZWxlbWVudCBjb250YWluaW5nIHRoZSBiaW5kaW5nXG4gICAgICogQHBhcmFtIG5hbWUgIFRoZSBhdHRyaWJ1dGUgbmFtZVxuICAgICAqIEBwYXJhbSBzdHJpbmdzIFRoZSBzdHJpbmcgbGl0ZXJhbHMuIFRoZXJlIGFyZSBhbHdheXMgYXQgbGVhc3QgdHdvIHN0cmluZ3MsXG4gICAgICogICBldmVudCBmb3IgZnVsbHktY29udHJvbGxlZCBiaW5kaW5ncyB3aXRoIGEgc2luZ2xlIGV4cHJlc3Npb24uXG4gICAgICovXG4gICAgaGFuZGxlQXR0cmlidXRlRXhwcmVzc2lvbnMoZWxlbWVudCwgbmFtZSwgc3RyaW5ncywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBwcmVmaXggPSBuYW1lWzBdO1xuICAgICAgICBpZiAocHJlZml4ID09PSAnLicpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbW1pdHRlciA9IG5ldyBQcm9wZXJ0eUNvbW1pdHRlcihlbGVtZW50LCBuYW1lLnNsaWNlKDEpLCBzdHJpbmdzKTtcbiAgICAgICAgICAgIHJldHVybiBjb21taXR0ZXIucGFydHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZWZpeCA9PT0gJ0AnKSB7XG4gICAgICAgICAgICByZXR1cm4gW25ldyBFdmVudFBhcnQoZWxlbWVudCwgbmFtZS5zbGljZSgxKSwgb3B0aW9ucy5ldmVudENvbnRleHQpXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJlZml4ID09PSAnPycpIHtcbiAgICAgICAgICAgIHJldHVybiBbbmV3IEJvb2xlYW5BdHRyaWJ1dGVQYXJ0KGVsZW1lbnQsIG5hbWUuc2xpY2UoMSksIHN0cmluZ3MpXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb21taXR0ZXIgPSBuZXcgQXR0cmlidXRlQ29tbWl0dGVyKGVsZW1lbnQsIG5hbWUsIHN0cmluZ3MpO1xuICAgICAgICByZXR1cm4gY29tbWl0dGVyLnBhcnRzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgcGFydHMgZm9yIGEgdGV4dC1wb3NpdGlvbiBiaW5kaW5nLlxuICAgICAqIEBwYXJhbSB0ZW1wbGF0ZUZhY3RvcnlcbiAgICAgKi9cbiAgICBoYW5kbGVUZXh0RXhwcmVzc2lvbihvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgTm9kZVBhcnQob3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IGRlZmF1bHRUZW1wbGF0ZVByb2Nlc3NvciA9IG5ldyBEZWZhdWx0VGVtcGxhdGVQcm9jZXNzb3IoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHQtdGVtcGxhdGUtcHJvY2Vzc29yLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbmltcG9ydCB7IG1hcmtlciwgVGVtcGxhdGUgfSBmcm9tICcuL3RlbXBsYXRlLmpzJztcbi8qKlxuICogVGhlIGRlZmF1bHQgVGVtcGxhdGVGYWN0b3J5IHdoaWNoIGNhY2hlcyBUZW1wbGF0ZXMga2V5ZWQgb25cbiAqIHJlc3VsdC50eXBlIGFuZCByZXN1bHQuc3RyaW5ncy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRlbXBsYXRlRmFjdG9yeShyZXN1bHQpIHtcbiAgICBsZXQgdGVtcGxhdGVDYWNoZSA9IHRlbXBsYXRlQ2FjaGVzLmdldChyZXN1bHQudHlwZSk7XG4gICAgaWYgKHRlbXBsYXRlQ2FjaGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0ZW1wbGF0ZUNhY2hlID0ge1xuICAgICAgICAgICAgc3RyaW5nc0FycmF5OiBuZXcgV2Vha01hcCgpLFxuICAgICAgICAgICAga2V5U3RyaW5nOiBuZXcgTWFwKClcbiAgICAgICAgfTtcbiAgICAgICAgdGVtcGxhdGVDYWNoZXMuc2V0KHJlc3VsdC50eXBlLCB0ZW1wbGF0ZUNhY2hlKTtcbiAgICB9XG4gICAgbGV0IHRlbXBsYXRlID0gdGVtcGxhdGVDYWNoZS5zdHJpbmdzQXJyYXkuZ2V0KHJlc3VsdC5zdHJpbmdzKTtcbiAgICBpZiAodGVtcGxhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgfVxuICAgIC8vIElmIHRoZSBUZW1wbGF0ZVN0cmluZ3NBcnJheSBpcyBuZXcsIGdlbmVyYXRlIGEga2V5IGZyb20gdGhlIHN0cmluZ3NcbiAgICAvLyBUaGlzIGtleSBpcyBzaGFyZWQgYmV0d2VlbiBhbGwgdGVtcGxhdGVzIHdpdGggaWRlbnRpY2FsIGNvbnRlbnRcbiAgICBjb25zdCBrZXkgPSByZXN1bHQuc3RyaW5ncy5qb2luKG1hcmtlcik7XG4gICAgLy8gQ2hlY2sgaWYgd2UgYWxyZWFkeSBoYXZlIGEgVGVtcGxhdGUgZm9yIHRoaXMga2V5XG4gICAgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhY2hlLmtleVN0cmluZy5nZXQoa2V5KTtcbiAgICBpZiAodGVtcGxhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIG5vdCBzZWVuIHRoaXMga2V5IGJlZm9yZSwgY3JlYXRlIGEgbmV3IFRlbXBsYXRlXG4gICAgICAgIHRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKHJlc3VsdCwgcmVzdWx0LmdldFRlbXBsYXRlRWxlbWVudCgpKTtcbiAgICAgICAgLy8gQ2FjaGUgdGhlIFRlbXBsYXRlIGZvciB0aGlzIGtleVxuICAgICAgICB0ZW1wbGF0ZUNhY2hlLmtleVN0cmluZy5zZXQoa2V5LCB0ZW1wbGF0ZSk7XG4gICAgfVxuICAgIC8vIENhY2hlIGFsbCBmdXR1cmUgcXVlcmllcyBmb3IgdGhpcyBUZW1wbGF0ZVN0cmluZ3NBcnJheVxuICAgIHRlbXBsYXRlQ2FjaGUuc3RyaW5nc0FycmF5LnNldChyZXN1bHQuc3RyaW5ncywgdGVtcGxhdGUpO1xuICAgIHJldHVybiB0ZW1wbGF0ZTtcbn1cbmV4cG9ydCBjb25zdCB0ZW1wbGF0ZUNhY2hlcyA9IG5ldyBNYXAoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRlbXBsYXRlLWZhY3RvcnkuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuaW1wb3J0IHsgcmVtb3ZlTm9kZXMgfSBmcm9tICcuL2RvbS5qcyc7XG5pbXBvcnQgeyBOb2RlUGFydCB9IGZyb20gJy4vcGFydHMuanMnO1xuaW1wb3J0IHsgdGVtcGxhdGVGYWN0b3J5IH0gZnJvbSAnLi90ZW1wbGF0ZS1mYWN0b3J5LmpzJztcbmV4cG9ydCBjb25zdCBwYXJ0cyA9IG5ldyBXZWFrTWFwKCk7XG4vKipcbiAqIFJlbmRlcnMgYSB0ZW1wbGF0ZSByZXN1bHQgb3Igb3RoZXIgdmFsdWUgdG8gYSBjb250YWluZXIuXG4gKlxuICogVG8gdXBkYXRlIGEgY29udGFpbmVyIHdpdGggbmV3IHZhbHVlcywgcmVldmFsdWF0ZSB0aGUgdGVtcGxhdGUgbGl0ZXJhbCBhbmRcbiAqIGNhbGwgYHJlbmRlcmAgd2l0aCB0aGUgbmV3IHJlc3VsdC5cbiAqXG4gKiBAcGFyYW0gcmVzdWx0IEFueSB2YWx1ZSByZW5kZXJhYmxlIGJ5IE5vZGVQYXJ0IC0gdHlwaWNhbGx5IGEgVGVtcGxhdGVSZXN1bHRcbiAqICAgICBjcmVhdGVkIGJ5IGV2YWx1YXRpbmcgYSB0ZW1wbGF0ZSB0YWcgbGlrZSBgaHRtbGAgb3IgYHN2Z2AuXG4gKiBAcGFyYW0gY29udGFpbmVyIEEgRE9NIHBhcmVudCB0byByZW5kZXIgdG8uIFRoZSBlbnRpcmUgY29udGVudHMgYXJlIGVpdGhlclxuICogICAgIHJlcGxhY2VkLCBvciBlZmZpY2llbnRseSB1cGRhdGVkIGlmIHRoZSBzYW1lIHJlc3VsdCB0eXBlIHdhcyBwcmV2aW91c1xuICogICAgIHJlbmRlcmVkIHRoZXJlLlxuICogQHBhcmFtIG9wdGlvbnMgUmVuZGVyT3B0aW9ucyBmb3IgdGhlIGVudGlyZSByZW5kZXIgdHJlZSByZW5kZXJlZCB0byB0aGlzXG4gKiAgICAgY29udGFpbmVyLiBSZW5kZXIgb3B0aW9ucyBtdXN0ICpub3QqIGNoYW5nZSBiZXR3ZWVuIHJlbmRlcnMgdG8gdGhlIHNhbWVcbiAqICAgICBjb250YWluZXIsIGFzIHRob3NlIGNoYW5nZXMgd2lsbCBub3QgZWZmZWN0IHByZXZpb3VzbHkgcmVuZGVyZWQgRE9NLlxuICovXG5leHBvcnQgY29uc3QgcmVuZGVyID0gKHJlc3VsdCwgY29udGFpbmVyLCBvcHRpb25zKSA9PiB7XG4gICAgbGV0IHBhcnQgPSBwYXJ0cy5nZXQoY29udGFpbmVyKTtcbiAgICBpZiAocGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlbW92ZU5vZGVzKGNvbnRhaW5lciwgY29udGFpbmVyLmZpcnN0Q2hpbGQpO1xuICAgICAgICBwYXJ0cy5zZXQoY29udGFpbmVyLCBwYXJ0ID0gbmV3IE5vZGVQYXJ0KE9iamVjdC5hc3NpZ24oeyB0ZW1wbGF0ZUZhY3RvcnkgfSwgb3B0aW9ucykpKTtcbiAgICAgICAgcGFydC5hcHBlbmRJbnRvKGNvbnRhaW5lcik7XG4gICAgfVxuICAgIHBhcnQuc2V0VmFsdWUocmVzdWx0KTtcbiAgICBwYXJ0LmNvbW1pdCgpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlbmRlci5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG4vKipcbiAqXG4gKiBNYWluIGxpdC1odG1sIG1vZHVsZS5cbiAqXG4gKiBNYWluIGV4cG9ydHM6XG4gKlxuICogLSAgW1todG1sXV1cbiAqIC0gIFtbc3ZnXV1cbiAqIC0gIFtbcmVuZGVyXV1cbiAqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqL1xuLyoqXG4gKiBEbyBub3QgcmVtb3ZlIHRoaXMgY29tbWVudDsgaXQga2VlcHMgdHlwZWRvYyBmcm9tIG1pc3BsYWNpbmcgdGhlIG1vZHVsZVxuICogZG9jcy5cbiAqL1xuaW1wb3J0IHsgZGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yIH0gZnJvbSAnLi9saWIvZGVmYXVsdC10ZW1wbGF0ZS1wcm9jZXNzb3IuanMnO1xuaW1wb3J0IHsgU1ZHVGVtcGxhdGVSZXN1bHQsIFRlbXBsYXRlUmVzdWx0IH0gZnJvbSAnLi9saWIvdGVtcGxhdGUtcmVzdWx0LmpzJztcbmV4cG9ydCB7IERlZmF1bHRUZW1wbGF0ZVByb2Nlc3NvciwgZGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yIH0gZnJvbSAnLi9saWIvZGVmYXVsdC10ZW1wbGF0ZS1wcm9jZXNzb3IuanMnO1xuZXhwb3J0IHsgZGlyZWN0aXZlLCBpc0RpcmVjdGl2ZSB9IGZyb20gJy4vbGliL2RpcmVjdGl2ZS5qcyc7XG4vLyBUT0RPKGp1c3RpbmZhZ25hbmkpOiByZW1vdmUgbGluZSB3aGVuIHdlIGdldCBOb2RlUGFydCBtb3ZpbmcgbWV0aG9kc1xuZXhwb3J0IHsgcmVtb3ZlTm9kZXMsIHJlcGFyZW50Tm9kZXMgfSBmcm9tICcuL2xpYi9kb20uanMnO1xuZXhwb3J0IHsgbm9DaGFuZ2UsIG5vdGhpbmcgfSBmcm9tICcuL2xpYi9wYXJ0LmpzJztcbmV4cG9ydCB7IEF0dHJpYnV0ZUNvbW1pdHRlciwgQXR0cmlidXRlUGFydCwgQm9vbGVhbkF0dHJpYnV0ZVBhcnQsIEV2ZW50UGFydCwgaXNJdGVyYWJsZSwgaXNQcmltaXRpdmUsIE5vZGVQYXJ0LCBQcm9wZXJ0eUNvbW1pdHRlciwgUHJvcGVydHlQYXJ0IH0gZnJvbSAnLi9saWIvcGFydHMuanMnO1xuZXhwb3J0IHsgcGFydHMsIHJlbmRlciB9IGZyb20gJy4vbGliL3JlbmRlci5qcyc7XG5leHBvcnQgeyB0ZW1wbGF0ZUNhY2hlcywgdGVtcGxhdGVGYWN0b3J5IH0gZnJvbSAnLi9saWIvdGVtcGxhdGUtZmFjdG9yeS5qcyc7XG5leHBvcnQgeyBUZW1wbGF0ZUluc3RhbmNlIH0gZnJvbSAnLi9saWIvdGVtcGxhdGUtaW5zdGFuY2UuanMnO1xuZXhwb3J0IHsgU1ZHVGVtcGxhdGVSZXN1bHQsIFRlbXBsYXRlUmVzdWx0IH0gZnJvbSAnLi9saWIvdGVtcGxhdGUtcmVzdWx0LmpzJztcbmV4cG9ydCB7IGNyZWF0ZU1hcmtlciwgaXNUZW1wbGF0ZVBhcnRBY3RpdmUsIFRlbXBsYXRlIH0gZnJvbSAnLi9saWIvdGVtcGxhdGUuanMnO1xuLy8gSU1QT1JUQU5UOiBkbyBub3QgY2hhbmdlIHRoZSBwcm9wZXJ0eSBuYW1lIG9yIHRoZSBhc3NpZ25tZW50IGV4cHJlc3Npb24uXG4vLyBUaGlzIGxpbmUgd2lsbCBiZSB1c2VkIGluIHJlZ2V4ZXMgdG8gc2VhcmNoIGZvciBsaXQtaHRtbCB1c2FnZS5cbi8vIFRPRE8oanVzdGluZmFnbmFuaSk6IGluamVjdCB2ZXJzaW9uIG51bWJlciBhdCBidWlsZCB0aW1lXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAod2luZG93WydsaXRIdG1sVmVyc2lvbnMnXSB8fCAod2luZG93WydsaXRIdG1sVmVyc2lvbnMnXSA9IFtdKSkucHVzaCgnMS40LjEnKTtcbn1cbi8qKlxuICogSW50ZXJwcmV0cyBhIHRlbXBsYXRlIGxpdGVyYWwgYXMgYW4gSFRNTCB0ZW1wbGF0ZSB0aGF0IGNhbiBlZmZpY2llbnRseVxuICogcmVuZGVyIHRvIGFuZCB1cGRhdGUgYSBjb250YWluZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBodG1sID0gKHN0cmluZ3MsIC4uLnZhbHVlcykgPT4gbmV3IFRlbXBsYXRlUmVzdWx0KHN0cmluZ3MsIHZhbHVlcywgJ2h0bWwnLCBkZWZhdWx0VGVtcGxhdGVQcm9jZXNzb3IpO1xuLyoqXG4gKiBJbnRlcnByZXRzIGEgdGVtcGxhdGUgbGl0ZXJhbCBhcyBhbiBTVkcgdGVtcGxhdGUgdGhhdCBjYW4gZWZmaWNpZW50bHlcbiAqIHJlbmRlciB0byBhbmQgdXBkYXRlIGEgY29udGFpbmVyLlxuICovXG5leHBvcnQgY29uc3Qgc3ZnID0gKHN0cmluZ3MsIC4uLnZhbHVlcykgPT4gbmV3IFNWR1RlbXBsYXRlUmVzdWx0KHN0cmluZ3MsIHZhbHVlcywgJ3N2ZycsIGRlZmF1bHRUZW1wbGF0ZVByb2Nlc3Nvcik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXQtaHRtbC5qcy5tYXAiLCIvKipcbiAqIENhY2hlIGNsYXNzIHRoYXQgYWxsb3dzIHRvIHNlYXJjaCBpbiBhIGNhY2hlIGhpZXJhcmNoeS5cbiAqIEB0ZW1wbGF0ZSBULCBRXG4gKi9cbmV4cG9ydCBjbGFzcyBDYWNoZSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgQ2FjaGUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtDYWNoZX0gW3BhcmVudF1cbiAgICovXG4gIGNvbnN0cnVjdG9yKHBhcmVudCkge1xuICAgIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgICB0aGlzLl9jYWNoZSA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgYm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgYW4gZWxlbWVudCB3aXRoIHRoZSBzcGVjaWZpZWQga2V5IGV4aXN0cyBvciBub3QuXG4gICAqXG4gICAqIEBwYXJhbSB7VH0ga2V5IC0gVGhlIGtleSBvZiB0aGUgZWxlbWVudCB0byB0ZXN0IGZvciBwcmVzZW5jZSBpbiB0aGUgQ2FjaGUgb2JqZWN0LlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaGFzKGtleSkge1xuICAgIHJldHVybiAhISh0aGlzLl9jYWNoZS5oYXMoa2V5KSB8fCAodGhpcy5fcGFyZW50ICYmIHRoaXMuX3BhcmVudC5fY2FjaGUuaGFzKGtleSkpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIG9yIHVwZGF0ZXMgYW4gZWxlbWVudCB3aXRoIGEgc3BlY2lmaWVkIGtleSBhbmQgYSB2YWx1ZSB0byBhIENhY2hlIG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtIHtUfSBrZXkgLSBUaGUga2V5IG9mIHRoZSBlbGVtZW50IHRvIGFkZCB0byB0aGUgQ2FjaGUgb2JqZWN0LlxuICAgKiBAcGFyYW0ge1F9IHZhbHVlIC0gVGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50IHRvIGFkZCB0byB0aGUgQ2FjaGUgb2JqZWN0LlxuICAgKiBAcmV0dXJuIHtDYWNoZTxULCBRPn0gdGhlIGNhY2hlIG9iamVjdFxuICAgKi9cbiAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICB0aGlzLl9jYWNoZS5zZXQoa2V5LCB2YWx1ZSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3BlY2lmaWVkIGVsZW1lbnQgZnJvbSBhIE1hcCBvYmplY3QuIElmIHRoZSB2YWx1ZSB0aGF0IGlzIGFzc29jaWF0ZWQgdG8gdGhlIHByb3ZpZGVkIGtleSBpcyBhblxuICAgKiBvYmplY3QsIHRoZW4geW91IHdpbGwgZ2V0IGEgcmVmZXJlbmNlIHRvIHRoYXQgb2JqZWN0IGFuZCBhbnkgY2hhbmdlIG1hZGUgdG8gdGhhdCBvYmplY3Qgd2lsbCBlZmZlY3RpdmVseSBtb2RpZnlcbiAgICogaXQgaW5zaWRlIHRoZSBNYXAgb2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0ge1R9IGtleSAtIFRoZSBrZXkgb2YgdGhlIGVsZW1lbnQgdG8gcmV0dXJuIGZyb20gdGhlIENhY2hlIG9iamVjdC5cbiAgICogQHJldHVybiB7UX1cbiAgICovXG4gIGdldChrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FjaGUuZ2V0KGtleSkgfHwgKHRoaXMuX3BhcmVudCAmJiB0aGlzLl9wYXJlbnQuX2NhY2hlLmdldChrZXkpKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBHbG9iYWwgY291bnRlciB0byBzY29wZSB0aGUgY3VzdG9tIGVsZW1lbnRzXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqL1xubGV0IGNvdW50ZXIgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMDAwMDApO1xuXG4vKipcbiAqIEFsbG93ZWQgdGFnIG5hbWUgY2hhcnNcbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBjaGFycyA9IGAtfFxcXFwufFswLTldfFthLXpdYDtcblxuLyoqXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gY2hlY2sgaWYgYSB2YWx1ZSBpcyBhIHZhbGlkIHRhZyBuYW1lXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xuY29uc3QgdGFnUmVnRXhwID0gbmV3IFJlZ0V4cChgW2Etel0oJHtjaGFyc30pKi0oJHtjaGFyc30pKmApO1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgdGFnIG5hbWUgaXMgdmFsaWRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgaXNWYWxpZCA9IHRhZyA9PiB0YWdSZWdFeHAuZXhlYyh0YWcpICE9PSBudWxsO1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgdGFnIGlzIGFscmVhZHkgcmVnaXN0ZXJlZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge0N1c3RvbUVsZW1lbnRSZWdpc3RyeX0gcmVnaXN0cnlcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBpc1RhZ1JlZ2lzdGVyZWQgPSAobmFtZSwgcmVnaXN0cnkpID0+ICEhcmVnaXN0cnkuZ2V0KG5hbWUpO1xuXG4vKipcbiAqIEdpdmVuIGEgdGFnIG5hbWUgc2NvcGVzIGl0IHdpdGggYSBudW1iZXIgc3VmZml4XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWVcbiAqIEBwYXJhbSB7Q3VzdG9tRWxlbWVudFJlZ2lzdHJ5fSByZWdpc3RyeVxuICogQHJldHVybnMge3N0cmluZ30gc2NvcGVkIHRhZyBuYW1lXG4gKi9cbmNvbnN0IGluY3JlbWVudFRhZ05hbWUgPSAodGFnTmFtZSwgcmVnaXN0cnkpID0+IHtcbiAgY29uc3QgbmV3VGFnTmFtZSA9IGAke3RhZ05hbWV9LSR7KGNvdW50ZXIgKz0gMSl9YDtcblxuICBpZiAoaXNUYWdSZWdpc3RlcmVkKG5ld1RhZ05hbWUsIHJlZ2lzdHJ5KSkge1xuICAgIHJldHVybiBpbmNyZW1lbnRUYWdOYW1lKHRhZ05hbWUsIHJlZ2lzdHJ5KTtcbiAgfVxuXG4gIHJldHVybiBuZXdUYWdOYW1lO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgdW5pcXVlIHNjb3BlZCB0YWcgbmFtZVxuICpcbiAqIEBleHBvcnRzXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnTmFtZSAtIHRhZyBuYW1lIHRvIHNjb3BlXG4gKiBAcGFyYW0ge0N1c3RvbUVsZW1lbnRSZWdpc3RyeX0gcmVnaXN0cnlcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHNjb3BlZCB0YWcgbmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVW5pcXVlVGFnKHRhZ05hbWUsIHJlZ2lzdHJ5ID0gY3VzdG9tRWxlbWVudHMpIHtcbiAgaWYgKCFpc1ZhbGlkKHRhZ05hbWUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd0YWdOYW1lIGlzIGludmFsaWQnKTtcbiAgfVxuXG4gIHJldHVybiBpbmNyZW1lbnRUYWdOYW1lKHRhZ05hbWUsIHJlZ2lzdHJ5KTtcbn1cbiIsIi8qKlxuICogVGhlIGdsb2JhbCBjYWNoZSBmb3IgdGFnIG5hbWVzXG4gKlxuICogQHR5cGUge1dlYWtNYXA8dHlwZW9mIEhUTUxFbGVtZW50LCBzdHJpbmc+fVxuICovXG5jb25zdCBnbG9iYWxUYWdzQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuXG4vKipcbiAqIEFkZHMgYSB0YWcgdG8gdGhlIGdsb2JhbCB0YWdzIGNhY2hlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZ1xuICogQHBhcmFtIHt0eXBlb2YgSFRNTEVsZW1lbnR9IGtsYXNzXG4gKi9cbmV4cG9ydCBjb25zdCBhZGRUb0dsb2JhbFRhZ3NDYWNoZSA9ICh0YWcsIGtsYXNzKSA9PiBnbG9iYWxUYWdzQ2FjaGUuc2V0KGtsYXNzLCB0YWcpO1xuXG4vKipcbiAqIEdldHMgYSB0YWcgZnJvbSB0aGUgZ2xvYmFsIHRhZ3MgY2FjaGVcbiAqXG4gKiBAZXhwb3J0c1xuICogQHBhcmFtIHt0eXBlb2YgSFRNTEVsZW1lbnR9IGtsYXNzXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfHN0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IGdldEZyb21HbG9iYWxUYWdzQ2FjaGUgPSBrbGFzcyA9PiBnbG9iYWxUYWdzQ2FjaGUuZ2V0KGtsYXNzKTtcbiIsImltcG9ydCB7IGNyZWF0ZVVuaXF1ZVRhZyB9IGZyb20gJy4vY3JlYXRlVW5pcXVlVGFnLmpzJztcbmltcG9ydCB7IGdldEZyb21HbG9iYWxUYWdzQ2FjaGUsIGFkZFRvR2xvYmFsVGFnc0NhY2hlIH0gZnJvbSAnLi9nbG9iYWxUYWdzQ2FjaGUuanMnO1xuXG4vKipcbiAqIENoZWNrcyBpZiBrbGFzcyBpcyBhIHN1YmNsYXNzIG9mIG5hdGl2ZSBIVE1MRWxlbWVudCBvciBwb2x5ZmlsbGVkIEhUTUxFbGVtZW50LlxuICogV2UgbWFudWFsbHkgbG9vcCBvdmVyIHRoZSBwcm90b3RwZSwgc28gd2UgY2FuIGRldGVjdCBpZiB3ZSBleHRlbmQgZnJvbSBuYXRpdmUgSFRNTEVsZW1lbnRcbiAqIG9yIHRoZSBwb2x5ZmlsbGVkIG9uZSBmcm9tIHNjb3BlZC1jdXN0b20tZWxlbWVudC1yZWdpc3RyeSAod2luZG93LkhUTUxFbGVtZW50KVxuICogQHBhcmFtIHt0eXBlb2YgSFRNTEVsZW1lbnR9IGtsYXNzIGEgY2xhc3MsIGxpa2UgTGl0RWxlbWVudFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGV4dGVuZHNIVE1MRWxlbWVudChrbGFzcykge1xuICBsZXQgY3VycmVudENsYXNzID0ga2xhc3M7XG4gIHdoaWxlIChjdXJyZW50Q2xhc3MpIHtcbiAgICAvLyBjdXJyZW50Q2xhc3MgY291bGQgZWl0aGVyIGJlOlxuICAgIC8vIDEuIHVucGF0Y2hlZCwgbmF0aXZlIEhUTUxFbGVtZW50ICh3aGVuIHBvbHlmaWxsIG5vdCBsb2FkZWQgdGhpcyBpcyBhbHdheXMgdGhlIGNhc2UpLCBvcjpcbiAgICAvLyAyLiBwYXRjaGVkIHdpbmRvdy5IVE1MRWxlbWVudCAoY2FuIGJlIHRoZSBjYXNlIHdoZW4gcG9seWZpbGwgaXMgbG9hZGVkKVxuICAgIC8vIElmIHBvbHlmaWxsIGlzIGxvYWRlZCBhbmQgY3VycmVudENsYXNzIGlzIHRoZSBuYXRpdmUgSFRNTEVsZW1lbnQsIHdlIGRvbid0IGhhdmUgYVxuICAgIC8vIHJlZmVyZW5jZSB0byBpdCAocG9seWZpbGwgY2FsbHMgaXQgTmF0aXZlSFRNTEVsZW1lbnQsIGJ1dCBkb2Vzbid0IGV4cG9zZSBpdCksXG4gICAgLy8gc28gd2UgY2hlY2sgaXRzIG5hbWUuXG4gICAgaWYgKGN1cnJlbnRDbGFzcyA9PT0gd2luZG93LkhUTUxFbGVtZW50IHx8IGN1cnJlbnRDbGFzcy5uYW1lID09PSAnSFRNTEVsZW1lbnQnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY3VycmVudENsYXNzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGN1cnJlbnRDbGFzcyk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIERlZmluZXMgYSBjdXN0b20gZWxlbWVudFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWdOYW1lXG4gKiBAcGFyYW0ge3R5cGVvZiBIVE1MRWxlbWVudH0ga2xhc3NcbiAqIEBwYXJhbSB7Q3VzdG9tRWxlbWVudFJlZ2lzdHJ5fSByZWdpc3RyeVxuICovXG5jb25zdCBkZWZpbmVFbGVtZW50ID0gKHRhZ05hbWUsIGtsYXNzLCByZWdpc3RyeSA9IGN1c3RvbUVsZW1lbnRzKSA9PiB7XG4gIGFkZFRvR2xvYmFsVGFnc0NhY2hlKHRhZ05hbWUsIGtsYXNzKTtcbiAgcmVnaXN0cnkuZGVmaW5lKHRhZ05hbWUsIGNsYXNzIGV4dGVuZHMga2xhc3Mge30pO1xufTtcblxuLyoqXG4gKiBTdG9yZXMgYSBsYXp5IGVsZW1lbnQgaW4gdGhlIGNhY2hlIHRvIGJlIHVzZWQgaW4gZnV0dXJlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWVcbiAqIEBwYXJhbSB7Q3VzdG9tRWxlbWVudFJlZ2lzdHJ5fSByZWdpc3RyeVxuICogQHBhcmFtIHtpbXBvcnQoJy4vQ2FjaGUuanMnKS5DYWNoZTxzdHJpbmcsIHN0cmluZz59IHRhZ3NDYWNoZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuY29uc3Qgc3RvcmVMYXp5RWxlbWVudEluQ2FjaGUgPSAodGFnTmFtZSwgcmVnaXN0cnksIHRhZ3NDYWNoZSkgPT4ge1xuICBjb25zdCB0YWcgPSBjcmVhdGVVbmlxdWVUYWcodGFnTmFtZSwgcmVnaXN0cnkpO1xuXG4gIGlmICghdGFnc0NhY2hlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdMYXp5IHNjb3BlZCBlbGVtZW50cyByZXF1aXJlcyB0aGUgdXNlIG9mIHRhZ3MgY2FjaGUnKTtcbiAgfVxuXG4gIHRhZ3NDYWNoZS5zZXQodGFnTmFtZSwgdGFnKTtcblxuICByZXR1cm4gdGFnO1xufTtcblxuLyoqXG4gKiBEZWZpbmUgYSBzY29wZWQgY3VzdG9tIGVsZW1lbnQgc3RvcmluZyB0aGUgc2NvcGVkIHRhZyBuYW1lIGluIHRoZSBjYWNoZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWdOYW1lXG4gKiBAcGFyYW0ge3R5cGVvZiBIVE1MRWxlbWVudH0ga2xhc3NcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL0NhY2hlLmpzJykuQ2FjaGU8c3RyaW5nLCBzdHJpbmc+fSB0YWdzQ2FjaGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmNvbnN0IGRlZmluZUVsZW1lbnRBbmRTdG9yZUluQ2FjaGUgPSAodGFnTmFtZSwga2xhc3MsIHRhZ3NDYWNoZSkgPT4ge1xuICBjb25zdCByZWdpc3RyeSA9IGN1c3RvbUVsZW1lbnRzO1xuXG4gIGlmICghZXh0ZW5kc0hUTUxFbGVtZW50KGtsYXNzKSkge1xuICAgIHJldHVybiBzdG9yZUxhenlFbGVtZW50SW5DYWNoZSh0YWdOYW1lLCByZWdpc3RyeSwgdGFnc0NhY2hlKTtcbiAgfVxuXG4gIGlmIChrbGFzcyA9PT0gY3VzdG9tRWxlbWVudHMuZ2V0KHRhZ05hbWUpKSB7XG4gICAgYWRkVG9HbG9iYWxUYWdzQ2FjaGUodGFnTmFtZSwga2xhc3MpO1xuXG4gICAgcmV0dXJuIHRhZ05hbWU7XG4gIH1cblxuICBjb25zdCB0YWcgPSBjcmVhdGVVbmlxdWVUYWcodGFnTmFtZSwgcmVnaXN0cnkpO1xuICAvLyBAdHMtaWdub3JlXG4gIC8vIHdlIGV4dGVuZCBpdCBqdXN0IGluIGNhc2UgdGhlIGNsYXNzIGhhcyBiZWVuIGRlZmluZWQgbWFudWFsbHlcbiAgZGVmaW5lRWxlbWVudCh0YWcsIGtsYXNzLCByZWdpc3RyeSk7XG5cbiAgcmV0dXJuIHRhZztcbn07XG5cbi8qKlxuICogR2V0cyBhIHNjb3BlZCB0YWcgbmFtZSBmcm9tIHRoZSBjYWNoZSBvciBnZW5lcmF0ZXMgYSBuZXcgb25lIGFuZCBkZWZpbmVzIHRoZSBlbGVtZW50IGlmIG5lZWRlZFxuICpcbiAqIEBleHBvcnRzXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnTmFtZVxuICogQHBhcmFtIHt0eXBlb2YgSFRNTEVsZW1lbnR9IGtsYXNzXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9DYWNoZS5qcycpLkNhY2hlPHN0cmluZywgc3RyaW5nPn0gdGFnc0NhY2hlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJFbGVtZW50KHRhZ05hbWUsIGtsYXNzLCB0YWdzQ2FjaGUgPSB1bmRlZmluZWQpIHtcbiAgY29uc3QgdGFnID1cbiAgICBnZXRGcm9tR2xvYmFsVGFnc0NhY2hlKGtsYXNzKSB8fFxuICAgICh0YWdzQ2FjaGUgJiYgdGFnc0NhY2hlLmdldCh0YWdOYW1lKSkgfHxcbiAgICBkZWZpbmVFbGVtZW50QW5kU3RvcmVJbkNhY2hlKHRhZ05hbWUsIGtsYXNzLCB0YWdzQ2FjaGUpO1xuXG4gIHJldHVybiB0YWc7XG59XG5cbi8qKlxuICogRGVmaW5lcyBhIGxhenkgZWxlbWVudFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWdOYW1lXG4gKiBAcGFyYW0ge3R5cGVvZiBIVE1MRWxlbWVudH0ga2xhc3NcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL0NhY2hlLmpzJykuQ2FjaGU8c3RyaW5nLCBzdHJpbmc+fSB0YWdzQ2FjaGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZVNjb3BlZEVsZW1lbnQodGFnTmFtZSwga2xhc3MsIHRhZ3NDYWNoZSkge1xuICBjb25zdCB0YWcgPSB0YWdzQ2FjaGUuZ2V0KHRhZ05hbWUpO1xuXG4gIGlmICh0YWcpIHtcbiAgICBpZiAoY3VzdG9tRWxlbWVudHMuZ2V0KHRhZykgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZGVmaW5lRWxlbWVudCh0YWcsIGtsYXNzLCBjdXN0b21FbGVtZW50cyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRhZ3NDYWNoZS5zZXQodGFnTmFtZSwgcmVnaXN0ZXJFbGVtZW50KHRhZ05hbWUsIGtsYXNzLCB0YWdzQ2FjaGUpKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgcmVnaXN0ZXJFbGVtZW50IH0gZnJvbSAnLi9yZWdpc3RlckVsZW1lbnQuanMnO1xuaW1wb3J0IHsgQ2FjaGUgfSBmcm9tICcuL0NhY2hlLmpzJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3R5cGVzJykuU2NvcGVkRWxlbWVudHNNYXB9IFNjb3BlZEVsZW1lbnRzTWFwXG4gKi9cblxuLyoqXG4gKiBBbGxvd2VkIHRhZyBuYW1lIGNoYXJzXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgY2hhcnMgPSBgLXxcXFxcLnxbMC05XXxbYS16XWA7XG5cbi8qKlxuICogUmVndWxhciBFeHByZXNzaW9uIHRvIGZpbmQgYSBjdXN0b20gZWxlbWVudCB0YWdcbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG5jb25zdCByZSA9IG5ldyBSZWdFeHAoYDxcXFxcLz8oW2Etel0oJHtjaGFyc30pKi0oJHtjaGFyc30pKilgLCAnZycpO1xuXG4vKipcbiAqIFRoZSBnbG9iYWwgY2FjaGUgb2YgcHJvY2Vzc2VkIHN0cmluZyBhcnJheXNcbiAqXG4gKiBAdHlwZSB7Q2FjaGU8VGVtcGxhdGVTdHJpbmdzQXJyYXksIFRlbXBsYXRlU3RyaW5nc0FycmF5Pn1cbiAqL1xuY29uc3QgZ2xvYmFsQ2FjaGUgPSBuZXcgQ2FjaGUoKTtcblxuLyoqXG4gKiBGaW5kIGN1c3RvbSBlbGVtZW50IHRhZ3MgaW4gdGhlIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm5zIHtSZWdFeHBFeGVjQXJyYXlbXX1cbiAqL1xuY29uc3QgbWF0Y2hBbGwgPSBzdHIgPT4ge1xuICBjb25zdCBtYXRjaGVzID0gW107XG4gIGxldCByZXN1bHQ7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25kLWFzc2lnblxuICB3aGlsZSAoKHJlc3VsdCA9IHJlLmV4ZWMoc3RyKSkgIT09IG51bGwpIHtcbiAgICBtYXRjaGVzLnB1c2gocmVzdWx0KTtcbiAgfVxuXG4gIHJldHVybiBtYXRjaGVzO1xufTtcblxuLyoqXG4gKiBUcmFuc2Zvcm1zIGEgc3RyaW5nIGFycmF5IGludG8gYW5vdGhlciBvbmUgd2l0aCByZXNvbHZlZCBzY29wZWQgZWxlbWVudHMgYW5kIGNhY2hlcyBpdCBmb3IgZnV0dXJlIHJlZmVyZW5jZXNcbiAqXG4gKiBAcGFyYW0ge1RlbXBsYXRlU3RyaW5nc0FycmF5fSBzdHJpbmdzXG4gKiBAcGFyYW0ge1Njb3BlZEVsZW1lbnRzTWFwfSBzY29wZWRFbGVtZW50c1xuICogQHBhcmFtIHtDYWNoZTxUZW1wbGF0ZVN0cmluZ3NBcnJheSwgVGVtcGxhdGVTdHJpbmdzQXJyYXk+fSB0ZW1wbGF0ZUNhY2hlXG4gKiBAcGFyYW0ge0NhY2hlPHN0cmluZywgc3RyaW5nPn0gdGFnc0NhY2hlXG4gKiBAcmV0dXJucyB7VGVtcGxhdGVTdHJpbmdzQXJyYXl9XG4gKi9cbmNvbnN0IHRyYW5zZm9ybVRlbXBsYXRlID0gKHN0cmluZ3MsIHNjb3BlZEVsZW1lbnRzLCB0ZW1wbGF0ZUNhY2hlLCB0YWdzQ2FjaGUpID0+IHtcbiAgY29uc3QgdHJhbnNmb3JtZWRTdHJpbmdzID0gc3RyaW5ncy5tYXAoc3RyID0+IHtcbiAgICBsZXQgYWNjID0gc3RyO1xuICAgIGNvbnN0IG1hdGNoZXMgPSBtYXRjaEFsbChzdHIpO1xuXG4gICAgZm9yIChsZXQgaSA9IG1hdGNoZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBtYXRjaGVzW2ldO1xuICAgICAgY29uc3QgW2Jsb2NrLCB0YWdOYW1lXSA9IGl0ZW07XG4gICAgICBjb25zdCB0YWcgPSByZWdpc3RlckVsZW1lbnQodGFnTmFtZSwgc2NvcGVkRWxlbWVudHNbdGFnTmFtZV0sIHRhZ3NDYWNoZSk7XG4gICAgICBjb25zdCBzdGFydCA9IGl0ZW0uaW5kZXggKyBibG9jay5sZW5ndGggLSB0YWdOYW1lLmxlbmd0aDtcbiAgICAgIGNvbnN0IGVuZCA9IHN0YXJ0ICsgdGFnTmFtZS5sZW5ndGg7XG4gICAgICBjb25zdCBpc0Nsb3NpbmdUYWcgPSBibG9jay5pbmRleE9mKCc8LycpID09PSAwO1xuXG4gICAgICBhY2MgPVxuICAgICAgICBhY2Muc2xpY2UoMCwgc3RhcnQpICtcbiAgICAgICAgKGlzQ2xvc2luZ1RhZyA/IHRhZyA6IGAke3RhZ30gZGF0YS10YWctbmFtZT1cIiR7dGFnTmFtZX1cImApICtcbiAgICAgICAgYWNjLnNsaWNlKGVuZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSk7XG5cbiAgLy8gQHRzLWlnbm9yZVxuICAvLyBub2luc3BlY3Rpb24gSlNDaGVja0Z1bmN0aW9uU2lnbmF0dXJlc1xuICB0ZW1wbGF0ZUNhY2hlLnNldChzdHJpbmdzLCB0cmFuc2Zvcm1lZFN0cmluZ3MpO1xuXG4gIC8vIEB0cy1pZ25vcmVcbiAgLy8gbm9pbnNwZWN0aW9uIEpTVmFsaWRhdGVUeXBlc1xuICByZXR1cm4gdHJhbnNmb3JtZWRTdHJpbmdzO1xufTtcblxuLyoqXG4gKiBPYnRhaW5zIHRoZSBjYWNoZWQgc3RyaW5ncyBhcnJheSB3aXRoIHJlc29sdmVkIHNjb3BlZCBlbGVtZW50cyBvciBjcmVhdGVzIGl0XG4gKlxuICogQGV4cG9ydHNcbiAqIEBwYXJhbSB7VGVtcGxhdGVTdHJpbmdzQXJyYXl9IHN0cmluZ3NcbiAqIEBwYXJhbSB7U2NvcGVkRWxlbWVudHNNYXB9IHNjb3BlZEVsZW1lbnRzXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9DYWNoZS5qcycpLkNhY2hlPFRlbXBsYXRlU3RyaW5nc0FycmF5LCBUZW1wbGF0ZVN0cmluZ3NBcnJheT59IHRlbXBsYXRlQ2FjaGVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL0NhY2hlLmpzJykuQ2FjaGU8c3RyaW5nLCBzdHJpbmc+fSB0YWdzQ2FjaGVcbiAqIEByZXR1cm5zIHtUZW1wbGF0ZVN0cmluZ3NBcnJheX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybShzdHJpbmdzLCBzY29wZWRFbGVtZW50cywgdGVtcGxhdGVDYWNoZSA9IGdsb2JhbENhY2hlLCB0YWdzQ2FjaGUpIHtcbiAgcmV0dXJuIChcbiAgICB0ZW1wbGF0ZUNhY2hlLmdldChzdHJpbmdzKSB8fFxuICAgIHRyYW5zZm9ybVRlbXBsYXRlKHN0cmluZ3MsIHNjb3BlZEVsZW1lbnRzLCB0ZW1wbGF0ZUNhY2hlLCB0YWdzQ2FjaGUpXG4gICk7XG59XG4iLCJpbXBvcnQgeyB0ZW1wbGF0ZUNhY2hlcyB9IGZyb20gJ2xpdC1odG1sL2xpYi90ZW1wbGF0ZS1mYWN0b3J5LmpzJztcbmltcG9ydCB7IG1hcmtlciwgVGVtcGxhdGUgfSBmcm9tICdsaXQtaHRtbC9saWIvdGVtcGxhdGUuanMnO1xuXG5jb25zdCBnZXRUZW1wbGF0ZUNhY2hlS2V5ID0gKHR5cGUsIHNjb3BlTmFtZSkgPT4gYCR7dHlwZX0tLSR7c2NvcGVOYW1lfWA7XG5cbmxldCBjb21wYXRpYmxlU2hhZHlDU1NWZXJzaW9uID0gdHJ1ZTtcblxuLy8gQHRzLWlnbm9yZVxuY29uc3QgeyBTaGFkeUNTUyB9ID0gd2luZG93O1xuXG5pZiAodHlwZW9mIFNoYWR5Q1NTID09PSAndW5kZWZpbmVkJykge1xuICBjb21wYXRpYmxlU2hhZHlDU1NWZXJzaW9uID0gZmFsc2U7XG59IGVsc2UgaWYgKHR5cGVvZiBTaGFkeUNTUy5wcmVwYXJlVGVtcGxhdGVEb20gPT09ICd1bmRlZmluZWQnKSB7XG4gIGNvbXBhdGlibGVTaGFkeUNTU1ZlcnNpb24gPSBmYWxzZTtcbn1cblxuLyoqXG4gKiBUZW1wbGF0ZSBmYWN0b3J5IHdoaWNoIHNjb3BlcyB0ZW1wbGF0ZSBET00gdXNpbmcgU2hhZHlDU1MuXG4gKiBAcGFyYW0gc2NvcGVOYW1lIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCBzaGFkeVRlbXBsYXRlRmFjdG9yeSA9IHNjb3BlTmFtZSA9PiByZXN1bHQgPT4ge1xuICBjb25zdCBjYWNoZUtleSA9IGdldFRlbXBsYXRlQ2FjaGVLZXkocmVzdWx0LnR5cGUsIHNjb3BlTmFtZSk7XG4gIGxldCB0ZW1wbGF0ZUNhY2hlID0gdGVtcGxhdGVDYWNoZXMuZ2V0KGNhY2hlS2V5KTtcbiAgaWYgKHRlbXBsYXRlQ2FjaGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHRlbXBsYXRlQ2FjaGUgPSB7XG4gICAgICBzdHJpbmdzQXJyYXk6IG5ldyBXZWFrTWFwKCksXG4gICAgICBrZXlTdHJpbmc6IG5ldyBNYXAoKSxcbiAgICB9O1xuICAgIHRlbXBsYXRlQ2FjaGVzLnNldChjYWNoZUtleSwgdGVtcGxhdGVDYWNoZSk7XG4gIH1cbiAgbGV0IHRlbXBsYXRlID0gdGVtcGxhdGVDYWNoZS5zdHJpbmdzQXJyYXkuZ2V0KHJlc3VsdC5zdHJpbmdzKTtcbiAgaWYgKHRlbXBsYXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdGVtcGxhdGU7XG4gIH1cbiAgY29uc3Qga2V5ID0gcmVzdWx0LnN0cmluZ3Muam9pbihtYXJrZXIpO1xuICB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ2FjaGUua2V5U3RyaW5nLmdldChrZXkpO1xuICBpZiAodGVtcGxhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSByZXN1bHQuZ2V0VGVtcGxhdGVFbGVtZW50KCk7XG4gICAgaWYgKGNvbXBhdGlibGVTaGFkeUNTU1ZlcnNpb24pIHtcbiAgICAgIFNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZURvbShlbGVtZW50LCBzY29wZU5hbWUpO1xuICAgIH1cbiAgICB0ZW1wbGF0ZSA9IG5ldyBUZW1wbGF0ZShyZXN1bHQsIGVsZW1lbnQpO1xuICAgIHRlbXBsYXRlQ2FjaGUua2V5U3RyaW5nLnNldChrZXksIHRlbXBsYXRlKTtcbiAgfVxuICB0ZW1wbGF0ZUNhY2hlLnN0cmluZ3NBcnJheS5zZXQocmVzdWx0LnN0cmluZ3MsIHRlbXBsYXRlKTtcbiAgcmV0dXJuIHRlbXBsYXRlO1xufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXVzZS1iZWZvcmUtZGVmaW5lICovXG5pbXBvcnQgeyBUZW1wbGF0ZVJlc3VsdCB9IGZyb20gJ2xpdC1odG1sJztcbmltcG9ydCB7IGRlZHVwZU1peGluIH0gZnJvbSAnQG9wZW4td2MvZGVkdXBlLW1peGluJztcbmltcG9ydCB7IENhY2hlIH0gZnJvbSAnLi9DYWNoZS5qcyc7XG5pbXBvcnQgeyB0cmFuc2Zvcm0gfSBmcm9tICcuL3RyYW5zZm9ybS5qcyc7XG5pbXBvcnQgeyBkZWZpbmVTY29wZWRFbGVtZW50LCByZWdpc3RlckVsZW1lbnQgfSBmcm9tICcuL3JlZ2lzdGVyRWxlbWVudC5qcyc7XG5pbXBvcnQgeyBzaGFkeVRlbXBsYXRlRmFjdG9yeSB9IGZyb20gJy4vc2hhZHlUZW1wbGF0ZUZhY3RvcnkuanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vdHlwZXMnKS5TY29wZWRFbGVtZW50c01peGlufSBTY29wZWRFbGVtZW50c01peGluXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3R5cGVzJykuU2NvcGVkRWxlbWVudHNNYXB9IFNjb3BlZEVsZW1lbnRzTWFwXG4gKiBAdHlwZWRlZiB7aW1wb3J0KFwibGl0LWVsZW1lbnRcIikuTGl0RWxlbWVudH0gTGl0RWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnbGl0LWh0bWwvbGliL3NoYWR5LXJlbmRlcicpLlNoYWR5UmVuZGVyT3B0aW9uc30gU2hhZHlSZW5kZXJPcHRpb25zXG4gKiBAdHlwZWRlZiB7ZnVuY3Rpb24oVGVtcGxhdGVSZXN1bHQsIEVsZW1lbnR8RG9jdW1lbnRGcmFnbWVudHxTaGFkb3dSb290LCBTaGFkeVJlbmRlck9wdGlvbnMpOiB2b2lkfSBSZW5kZXJGdW5jdGlvblxuICovXG5cbi8qKlxuICogVGVtcGxhdGUgY2FjaGVzXG4gKlxuICogQHR5cGUge1dlYWtNYXA8RnVuY3Rpb24sIENhY2hlPFRlbXBsYXRlU3RyaW5nc0FycmF5LCBUZW1wbGF0ZVN0cmluZ3NBcnJheT4+fVxuICovXG5jb25zdCB0ZW1wbGF0ZUNhY2hlcyA9IG5ldyBXZWFrTWFwKCk7XG5cbi8qKlxuICogUmV0cmlldmVzIG9yIGNyZWF0ZXMgYSB0ZW1wbGF0ZUNhY2hlIGZvciBhIHNwZWNpZmljIGtleVxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleVxuICogQHJldHVybnMge0NhY2hlPFRlbXBsYXRlU3RyaW5nc0FycmF5LCBUZW1wbGF0ZVN0cmluZ3NBcnJheT59XG4gKi9cbmNvbnN0IGdldFRlbXBsYXRlQ2FjaGUgPSBrZXkgPT4ge1xuICBpZiAoIXRlbXBsYXRlQ2FjaGVzLmhhcyhrZXkpKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHRlbXBsYXRlQ2FjaGVzLnNldChrZXksIG5ldyBDYWNoZSh0ZW1wbGF0ZUNhY2hlcy5nZXQoa2V5LmNvbnN0cnVjdG9yKSkpO1xuICB9XG5cbiAgcmV0dXJuIHRlbXBsYXRlQ2FjaGVzLmdldChrZXkpO1xufTtcblxuLyoqXG4gKiBUYWdzIGNhY2hlc1xuICpcbiAqIEB0eXBlIHtXZWFrTWFwPG9iamVjdCwgQ2FjaGU8c3RyaW5nLCBzdHJpbmc+Pn1cbiAqL1xuY29uc3QgdGFnc0NhY2hlcyA9IG5ldyBXZWFrTWFwKCk7XG5cbi8qKlxuICogUmV0cmlldmVzIG9yIGNyZWF0ZXMgYSB0YWdzQ2FjaGUgZm9yIGEgc3BlY2lmaWMga2V5XG4gKiBAcGFyYW0ge29iamVjdH0ga2V5XG4gKiBAcmV0dXJucyB7Q2FjaGU8c3RyaW5nLCBzdHJpbmc+fVxuICovXG5jb25zdCBnZXRUYWdzQ2FjaGUgPSBrZXkgPT4ge1xuICBpZiAoIXRhZ3NDYWNoZXMuaGFzKGtleSkpIHtcbiAgICB0YWdzQ2FjaGVzLnNldChrZXksIG5ldyBDYWNoZSh0YWdzQ2FjaGVzLmdldChrZXkuY29uc3RydWN0b3IpKSk7XG4gIH1cblxuICByZXR1cm4gdGFnc0NhY2hlcy5nZXQoa2V5KTtcbn07XG5cbi8qKlxuICogVHJhbnNmb3JtcyBhbiBhcnJheSBvZiBUZW1wbGF0ZVJlc3VsdHMgb3IgYXJyYXlzIGludG8gYW5vdGhlciBvbmUgd2l0aCByZXNvbHZlZCBzY29wZWQgZWxlbWVudHNcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5QXJyYXl9IGl0ZW1zXG4gKiBAcGFyYW0ge1Njb3BlZEVsZW1lbnRzTWFwfSBzY29wZWRFbGVtZW50c1xuICogQHBhcmFtIHtDYWNoZTxUZW1wbGF0ZVN0cmluZ3NBcnJheSwgVGVtcGxhdGVTdHJpbmdzQXJyYXk+fSB0ZW1wbGF0ZUNhY2hlXG4gKiBAcGFyYW0ge0NhY2hlPHN0cmluZywgc3RyaW5nPn0gdGFnc0NhY2hlXG4gKiBAcmV0dXJucyB7UmVhZG9ubHlBcnJheX1cbiAqL1xuY29uc3QgdHJhbnNmb3JtQXJyYXkgPSAoaXRlbXMsIHNjb3BlZEVsZW1lbnRzLCB0ZW1wbGF0ZUNhY2hlLCB0YWdzQ2FjaGUpID0+XG4gIGl0ZW1zLm1hcCh2YWx1ZSA9PiB7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVSZXN1bHQpIHtcbiAgICAgIHJldHVybiB0cmFuc2Zvcm1UZW1wbGF0ZSh2YWx1ZSwgc2NvcGVkRWxlbWVudHMsIHRlbXBsYXRlQ2FjaGUsIHRhZ3NDYWNoZSk7XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdHJhbnNmb3JtQXJyYXkodmFsdWUsIHNjb3BlZEVsZW1lbnRzLCB0ZW1wbGF0ZUNhY2hlLCB0YWdzQ2FjaGUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfSk7XG5cbi8qKlxuICogVHJhbnNmb3JtcyBhIFRlbXBsYXRlUmVzdWx0IGludG8gYW5vdGhlciBvbmUgd2l0aCByZXNvbHZlZCBzY29wZWQgZWxlbWVudHNcbiAqXG4gKiBAcGFyYW0ge1RlbXBsYXRlUmVzdWx0fSB0ZW1wbGF0ZVxuICogQHBhcmFtIHtTY29wZWRFbGVtZW50c01hcH0gc2NvcGVkRWxlbWVudHNcbiAqIEBwYXJhbSB7Q2FjaGU8VGVtcGxhdGVTdHJpbmdzQXJyYXksIFRlbXBsYXRlU3RyaW5nc0FycmF5Pn0gdGVtcGxhdGVDYWNoZVxuICogQHBhcmFtIHtDYWNoZTxzdHJpbmcsIHN0cmluZz59IHRhZ3NDYWNoZVxuICogQHJldHVybnMge1RlbXBsYXRlUmVzdWx0fVxuICovXG5jb25zdCB0cmFuc2Zvcm1UZW1wbGF0ZSA9ICh0ZW1wbGF0ZSwgc2NvcGVkRWxlbWVudHMsIHRlbXBsYXRlQ2FjaGUsIHRhZ3NDYWNoZSkgPT5cbiAgbmV3IFRlbXBsYXRlUmVzdWx0KFxuICAgIHRyYW5zZm9ybSh0ZW1wbGF0ZS5zdHJpbmdzLCBzY29wZWRFbGVtZW50cywgdGVtcGxhdGVDYWNoZSwgdGFnc0NhY2hlKSxcbiAgICB0cmFuc2Zvcm1BcnJheSh0ZW1wbGF0ZS52YWx1ZXMsIHNjb3BlZEVsZW1lbnRzLCB0ZW1wbGF0ZUNhY2hlLCB0YWdzQ2FjaGUpLFxuICAgIHRlbXBsYXRlLnR5cGUsXG4gICAgdGVtcGxhdGUucHJvY2Vzc29yLFxuICApO1xuXG4vKipcbiAqIEdldHMgYW4gaW5zdGFuY2Ugb2YgdGhlIFNjb3BlZEVsZW1lbnRzVGVtcGxhdGVGYWN0b3J5XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHNjb3BlTmFtZVxuICogQHBhcmFtIHtTY29wZWRFbGVtZW50c01hcH0gc2NvcGVkRWxlbWVudHNcbiAqIEBwYXJhbSB7Q2FjaGU8VGVtcGxhdGVTdHJpbmdzQXJyYXksIFRlbXBsYXRlU3RyaW5nc0FycmF5Pn0gdGVtcGxhdGVDYWNoZVxuICogQHBhcmFtIHtDYWNoZTxzdHJpbmcsIHN0cmluZz59IHRhZ3NDYWNoZVxuICogQHJldHVybnMge2Z1bmN0aW9uKGFueSk6IGFueX1cbiAqL1xuY29uc3Qgc2NvcGVkRWxlbWVudHNUZW1wbGF0ZUZhY3RvcnkgPSAoXG4gIHNjb3BlTmFtZSxcbiAgc2NvcGVkRWxlbWVudHMsXG4gIHRlbXBsYXRlQ2FjaGUsXG4gIHRhZ3NDYWNoZSxcbikgPT4gdGVtcGxhdGUgPT4ge1xuICBjb25zdCBuZXdUZW1wbGF0ZSA9IHRyYW5zZm9ybVRlbXBsYXRlKHRlbXBsYXRlLCBzY29wZWRFbGVtZW50cywgdGVtcGxhdGVDYWNoZSwgdGFnc0NhY2hlKTtcblxuICByZXR1cm4gc2hhZHlUZW1wbGF0ZUZhY3Rvcnkoc2NvcGVOYW1lKShuZXdUZW1wbGF0ZSk7XG59O1xuXG4vKiogQHR5cGUge1Njb3BlZEVsZW1lbnRzTWl4aW59ICovXG5jb25zdCBTY29wZWRFbGVtZW50c01peGluSW1wbGVtZW50YXRpb24gPSBzdXBlcmNsYXNzID0+XG4gIGNsYXNzIFNjb3BlZEVsZW1lbnRzSG9zdCBleHRlbmRzIHN1cGVyY2xhc3Mge1xuICAgIC8qKlxuICAgICAqIE9idGFpbnMgdGhlIHNjb3BlZCBlbGVtZW50cyBkZWZpbml0aW9ucyBtYXBcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtTY29wZWRFbGVtZW50c01hcH1cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IHNjb3BlZEVsZW1lbnRzKCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIC8qKiBAb3ZlcnJpZGUgKi9cbiAgICBzdGF0aWMgcmVuZGVyKHRlbXBsYXRlLCBjb250YWluZXIsIG9wdGlvbnMpIHtcbiAgICAgIGlmICghb3B0aW9ucyB8fCB0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcgfHwgIW9wdGlvbnMuc2NvcGVOYW1lKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGBzY29wZU5hbWVgIG9wdGlvbiBpcyByZXF1aXJlZC4nKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHsgc2NvcGVOYW1lLCBldmVudENvbnRleHQgfSA9IG9wdGlvbnM7XG5cbiAgICAgIGNvbnN0IHRlbXBsYXRlQ2FjaGUgPSBnZXRUZW1wbGF0ZUNhY2hlKGV2ZW50Q29udGV4dCk7XG4gICAgICBjb25zdCB0YWdzQ2FjaGUgPSBnZXRUYWdzQ2FjaGUoZXZlbnRDb250ZXh0KTtcbiAgICAgIGNvbnN0IHsgc2NvcGVkRWxlbWVudHMgfSA9IHRoaXM7XG5cbiAgICAgIHJldHVybiBzdXBlci5yZW5kZXIodGVtcGxhdGUsIGNvbnRhaW5lciwge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICB0ZW1wbGF0ZUZhY3Rvcnk6IHNjb3BlZEVsZW1lbnRzVGVtcGxhdGVGYWN0b3J5KFxuICAgICAgICAgIHNjb3BlTmFtZSxcbiAgICAgICAgICBzY29wZWRFbGVtZW50cyxcbiAgICAgICAgICB0ZW1wbGF0ZUNhY2hlLFxuICAgICAgICAgIHRhZ3NDYWNoZSxcbiAgICAgICAgKSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlZmluZXMgYSBzY29wZWQgZWxlbWVudFxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWVcbiAgICAgKiBAcGFyYW0ge3R5cGVvZiBIVE1MRWxlbWVudH0ga2xhc3NcbiAgICAgKi9cbiAgICBkZWZpbmVTY29wZWRFbGVtZW50KHRhZ05hbWUsIGtsYXNzKSB7XG4gICAgICByZXR1cm4gZGVmaW5lU2NvcGVkRWxlbWVudCh0YWdOYW1lLCBrbGFzcywgZ2V0VGFnc0NhY2hlKHRoaXMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgc2NvcGVkIHRhZyBuYW1lXG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZCBQbGVhc2UsIHVzZSB0aGUgaW5zdGFuY2UgbWV0aG9kIGluc3RlYWQgb2YgdGhlIHN0YXRpYyBvbmUuIFRoaXMgc3RhdGljIG1ldGhvZCBpcyBub3QgYWJsZSB0b1xuICAgICAqIG9idGFpbiB0aGUgdGFnTmFtZSBvZiBsYXp5IGRlZmluZWQgZWxlbWVudHMsIHdoaWxlIHRoZSBpbnN0YW5jZSBvbmUgaXMuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWVcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0U2NvcGVkVGFnTmFtZSh0YWdOYW1lKSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBjb25zdCBrbGFzcyA9IHRoaXMuc2NvcGVkRWxlbWVudHNbdGFnTmFtZV07XG5cbiAgICAgIHJldHVybiBrbGFzc1xuICAgICAgICA/IHJlZ2lzdGVyRWxlbWVudCh0YWdOYW1lLCBrbGFzcywgZ2V0VGFnc0NhY2hlKHRoaXMpKVxuICAgICAgICA6IGdldFRhZ3NDYWNoZSh0aGlzKS5nZXQodGFnTmFtZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHNjb3BlZCB0YWcgbmFtZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWVcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICBnZXRTY29wZWRUYWdOYW1lKHRhZ05hbWUpIHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGNvbnN0IGtsYXNzID0gdGhpcy5jb25zdHJ1Y3Rvci5zY29wZWRFbGVtZW50c1t0YWdOYW1lXTtcblxuICAgICAgcmV0dXJuIGtsYXNzXG4gICAgICAgID8gcmVnaXN0ZXJFbGVtZW50KHRhZ05hbWUsIGtsYXNzLCBnZXRUYWdzQ2FjaGUodGhpcykpXG4gICAgICAgIDogZ2V0VGFnc0NhY2hlKHRoaXMpLmdldCh0YWdOYW1lKTtcbiAgICB9XG4gIH07XG5cbmV4cG9ydCBjb25zdCBTY29wZWRFbGVtZW50c01peGluID0gZGVkdXBlTWl4aW4oU2NvcGVkRWxlbWVudHNNaXhpbkltcGxlbWVudGF0aW9uKTtcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2xpdCc7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5jb25zdCB0b2tlbnMgPSBjc3NgXG4gICoge1xuICAtLW5lLWJ1dHRvbi1jb2xvci1iYWNrZ3JvdW5kLXByaW1hcnktZGVmYXVsdDogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtNjAsICMwMDZCRDYpO1xuICAtLW5lLWJ1dHRvbi1jb2xvci1iYWNrZ3JvdW5kLXByaW1hcnktaG92ZXI6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTcwLCAjMDA1MkEzKTtcbiAgLS1uZS1idXR0b24tY29sb3ItYmFja2dyb3VuZC1wcmltYXJ5LWRpc2FibGVkOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS0zMCwgI0E3QUJBRik7XG4gIC0tbmUtYnV0dG9uLWNvbG9yLWJhY2tncm91bmQtc2Vjb25kYXJ5LWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci13aGl0ZSwgI2ZmZmZmZik7XG4gIC0tbmUtYnV0dG9uLWNvbG9yLWJhY2tncm91bmQtc2Vjb25kYXJ5LWhvdmVyOiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS0wNSwgI0YwRjdGRik7XG4gIC0tbmUtYnV0dG9uLWNvbG9yLWJhY2tncm91bmQtc2Vjb25kYXJ5LWRpc2FibGVkOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS0zMCwgI0E3QUJBRik7XG4gIC0tbmUtYnV0dG9uLWNvbG9yLWJhY2tncm91bmQtZGVzdHJ1Y3RpdmUtZGVmYXVsdDogdmFyKC0tbmUtcmVmLWNvbG9yLXJlZC02MCwgI0I4MDAwMCk7XG4gIC0tbmUtYnV0dG9uLWNvbG9yLWJhY2tncm91bmQtZGVzdHJ1Y3RpdmUtaG92ZXI6IHZhcigtLW5lLXJlZi1jb2xvci1yZWQtNzAsICM3QzBEMEUpO1xuICAtLW5lLWJ1dHRvbi1jb2xvci1iYWNrZ3JvdW5kLWRlc3RydWN0aXZlLWRpc2FibGVkOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS0zMCwgI0E3QUJBRik7XG4gIC0tbmUtYnV0dG9uLWNvbG9yLWJhY2tncm91bmQtdGV4dC1ob3ZlcjogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtMDUsICNGMEY3RkYpO1xuICAtLW5lLWJ1dHRvbi1jb2xvci1iYWNrZ3JvdW5kLXRleHQtZGlzYWJsZWQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTMwLCAjQTdBQkFGKTtcbiAgLS1uZS1idXR0b24tY29sb3ItYmFja2dyb3VuZC1pbnZlcnNlLWhvdmVyOiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS0wNSwgI0YwRjdGRik7XG4gIC0tbmUtYnV0dG9uLWNvbG9yLWJhY2tncm91bmQtaW52ZXJzZS1kaXNhYmxlZDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktMzAsICNBN0FCQUYpO1xuICAtLW5lLWJ1dHRvbi1jb2xvci1ib3JkZXItcHJpbWFyeS1kZWZhdWx0OiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS03MCwgIzAwNTJBMyk7XG4gIC0tbmUtYnV0dG9uLWNvbG9yLWJvcmRlci1zZWNvbmRhcnktZGVmYXVsdDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktMTAsICNFMkUzRTQpO1xuICAtLW5lLWJ1dHRvbi1jb2xvci1ib3JkZXItZGVzdHJ1Y3RpdmUtZGVmYXVsdDogdmFyKC0tbmUtcmVmLWNvbG9yLXJlZC03MCwgIzdDMEQwRSk7XG4gIC0tbmUtYnV0dG9uLWNvbG9yLWJvcmRlci1mb2N1czogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtMjAsICNBM0QxRkYpO1xuICAtLW5lLWJ1dHRvbi1jb2xvci1ib3JkZXItaW52ZXJzZS1kZWZhdWx0OiB2YXIoLS1uZS1yZWYtY29sb3Itd2hpdGUsICNmZmZmZmYpO1xuICAtLW5lLWJ1dHRvbi1jb2xvci1ib3JkZXItZGlzYWJsZWQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTMwLCAjQTdBQkFGKTtcbiAgLS1uZS1idXR0b24tY29sb3ItbGFiZWwtcHJpbWFyeS1kaXNhYmxlZDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktOTAsICMxNjE3MTgpO1xuICAtLW5lLWJ1dHRvbi1jb2xvci1sYWJlbC1wcmltYXJ5LWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci13aGl0ZSwgI2ZmZmZmZik7XG4gIC0tbmUtYnV0dG9uLWNvbG9yLWxhYmVsLXNlY29uZGFyeS1kZWZhdWx0OiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS02MCwgIzAwNkJENik7XG4gIC0tbmUtYnV0dG9uLWNvbG9yLWxhYmVsLXNlY29uZGFyeS1kaXNhYmxlZDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktOTAsICMxNjE3MTgpO1xuICAtLW5lLWJ1dHRvbi1jb2xvci1sYWJlbC1kZXN0cnVjdGl2ZS1kZWZhdWx0OiB2YXIoLS1uZS1yZWYtY29sb3Itd2hpdGUsICNmZmZmZmYpO1xuICAtLW5lLWJ1dHRvbi1jb2xvci1sYWJlbC1kZXN0cnVjdGl2ZS1kaXNhYmxlZDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktOTAsICMxNjE3MTgpO1xuICAtLW5lLWJ1dHRvbi1jb2xvci1sYWJlbC10ZXh0LWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTYwLCAjMDA2QkQ2KTtcbiAgLS1uZS1idXR0b24tY29sb3ItbGFiZWwtdGV4dC1kaXNhYmxlZDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktOTAsICMxNjE3MTgpO1xuICAtLW5lLWJ1dHRvbi1jb2xvci1sYWJlbC1pbnZlcnNlLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci13aGl0ZSwgI2ZmZmZmZik7XG4gIC0tbmUtYnV0dG9uLWNvbG9yLWxhYmVsLWludmVyc2UtZGlzYWJsZWQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTkwLCAjMTYxNzE4KTtcbiAgLS1uZS1idXR0b24tYm9yZGVyLXJhZGl1czogdmFyKC0tbmUtcmVmLWJvcmRlci1yYWRpdXMtbWVkaXVtLCAuMjVlbSk7XG4gIC0tbmUtYnV0dG9uLXBhZGRpbmctaG9yaXpvbnRhbDogdmFyKC0tbmUtcmVmLXNwYWNpbmctc21hbGwsIDAuNzVlbSk7XG4gIC0tbmUtYnV0dG9uLXBhZGRpbmctdmVydGljYWw6IHZhcigtLW5lLXJlZi1zcGFjaW5nLXgtc21hbGwsIDAuNWVtKTtcbiAgLS1uZS1idXR0b24tZ2FwOiB2YXIoLS1uZS1yZWYtc3BhY2luZy14LXNtYWxsLCAwLjVlbSk7XG4gIC0tbmUtYnV0dG9uLWZvbnQtZmFtaWx5OiB2YXIoLS1uZS1yZWYtZm9udC1mYW1pbHktb3Blbi1zYW5zLCBPcGVuIFNhbnMpO1xuICAtLW5lLWJ1dHRvbi1mb250LXNpemU6IHZhcigtLW5lLXJlZi1mb250LXNpemUtMDQsIDAuODc1ZW0pO1xuICAtLW5lLWJ1dHRvbi1zaXppbmctaWNvbjogdmFyKC0tbmUtcmVmLXNpemluZy0wNCwgMWVtKTtcbiAgLS1uZS1idXR0b24tYm9yZGVyLXdpZHRoLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1ib3JkZXItd2lkdGgtc21hbGwsIDFweCk7XG4gIC0tbmUtYnV0dG9uLWJvcmRlci13aWR0aC1mb2N1czogdmFyKC0tbmUtcmVmLWJvcmRlci13aWR0aC1sYXJnZSwgNHB4KTtcbn1cbmA7XG5cbmV4cG9ydCB7IHRva2VucyBhcyB0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idXR0b24udG9rZW5zLWU3OWM4YmJmLmpzLm1hcFxuIiwiaW1wb3J0e25vQ2hhbmdlIGFzIHR9ZnJvbVwiLi4vbGl0LWh0bWwuanNcIjtpbXBvcnR7ZGlyZWN0aXZlIGFzIGUsRGlyZWN0aXZlIGFzIHIsUGFydFR5cGUgYXMgc31mcm9tXCIuLi9kaXJlY3RpdmUuanNcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL2NvbnN0IGk9ZShjbGFzcyBleHRlbmRzIHJ7Y29uc3RydWN0b3IodCl7dmFyIGU7aWYoc3VwZXIodCksdC50eXBlIT09cy5BVFRSSUJVVEV8fFwic3R5bGVcIiE9PXQubmFtZXx8KG51bGw9PT0oZT10LnN0cmluZ3MpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLmxlbmd0aCk+Mil0aHJvdyBFcnJvcihcIlRoZSBgc3R5bGVNYXBgIGRpcmVjdGl2ZSBtdXN0IGJlIHVzZWQgaW4gdGhlIGBzdHlsZWAgYXR0cmlidXRlIGFuZCBtdXN0IGJlIHRoZSBvbmx5IHBhcnQgaW4gdGhlIGF0dHJpYnV0ZS5cIil9cmVuZGVyKHQpe3JldHVybiBPYmplY3Qua2V5cyh0KS5yZWR1Y2UoKChlLHIpPT57Y29uc3Qgcz10W3JdO3JldHVybiBudWxsPT1zP2U6ZStgJHtyPXIucmVwbGFjZSgvKD86Xih3ZWJraXR8bW96fG1zfG8pfCkoPz1bQS1aXSkvZyxcIi0kJlwiKS50b0xvd2VyQ2FzZSgpfToke3N9O2B9KSxcIlwiKX11cGRhdGUoZSxbcl0pe2NvbnN0e3N0eWxlOnN9PWUuZWxlbWVudDtpZih2b2lkIDA9PT10aGlzLnZ0KXt0aGlzLnZ0PW5ldyBTZXQ7Zm9yKGNvbnN0IHQgaW4gcil0aGlzLnZ0LmFkZCh0KTtyZXR1cm4gdGhpcy5yZW5kZXIocil9dGhpcy52dC5mb3JFYWNoKCh0PT57bnVsbD09clt0XSYmKHRoaXMudnQuZGVsZXRlKHQpLHQuaW5jbHVkZXMoXCItXCIpP3MucmVtb3ZlUHJvcGVydHkodCk6c1t0XT1cIlwiKX0pKTtmb3IoY29uc3QgdCBpbiByKXtjb25zdCBlPXJbdF07bnVsbCE9ZSYmKHRoaXMudnQuYWRkKHQpLHQuaW5jbHVkZXMoXCItXCIpP3Muc2V0UHJvcGVydHkodCxlKTpzW3RdPWUpfXJldHVybiB0fX0pO2V4cG9ydHtpIGFzIHN0eWxlTWFwfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0eWxlLW1hcC5qcy5tYXBcbiIsImltcG9ydCB7IG5vdGhpbmcsIGh0bWwgfSBmcm9tICdsaXQnO1xuaW1wb3J0IHsgc3R5bGVNYXAgfSBmcm9tICdsaXQvZGlyZWN0aXZlcy9zdHlsZS1tYXAuanMnO1xuaW1wb3J0IHsgdW50aWwgfSBmcm9tICdsaXQvZGlyZWN0aXZlcy91bnRpbC5qcyc7XG5cbmNvbnN0IGljb25Mb29rdXAgPSB7XG4gIF9leHBvcnQ6ICgpID0+IGltcG9ydCgnLi9fZXhwb3J0LWRlMjVlODk1LmpzJykudGhlbih4ID0+IHguX2V4cG9ydCksXG4gIF9pbXBvcnQ6ICgpID0+IGltcG9ydCgnLi9faW1wb3J0LTgwNjQzOThkLmpzJykudGhlbih4ID0+IHguX2ltcG9ydCksXG4gIGFkZDogKCkgPT4gaW1wb3J0KCcuL2FkZC1lY2QwOWQxYS5qcycpLnRoZW4oeCA9PiB4LmFkZCksXG4gIGFyY2hpdmU6ICgpID0+IGltcG9ydCgnLi9hcmNoaXZlLWQyYzVhZDRmLmpzJykudGhlbih4ID0+IHguYXJjaGl2ZSksXG4gIGFycm93RG93bjogKCkgPT4gaW1wb3J0KCcuL2Fycm93RG93bi01NTVhMjhlMS5qcycpLnRoZW4oeCA9PiB4LmFycm93RG93biksXG4gIGFycm93VXA6ICgpID0+IGltcG9ydCgnLi9hcnJvd1VwLTliNTYyOWQ2LmpzJykudGhlbih4ID0+IHguYXJyb3dVcCksXG4gIGNhcmV0RG93bjogKCkgPT4gaW1wb3J0KCcuL2NhcmV0RG93bi03ZjcyODZjOC5qcycpLnRoZW4oeCA9PiB4LmNhcmV0RG93biksXG4gIGNhcmV0TGVmdDogKCkgPT4gaW1wb3J0KCcuL2NhcmV0TGVmdC0zMDgwMzhlNS5qcycpLnRoZW4oeCA9PiB4LmNhcmV0TGVmdCksXG4gIGNhcmV0UmlnaHQ6ICgpID0+IGltcG9ydCgnLi9jYXJldFJpZ2h0LTE0MTAzNjhmLmpzJykudGhlbih4ID0+IHguY2FyZXRSaWdodCksXG4gIGNhcmV0VXA6ICgpID0+IGltcG9ydCgnLi9jYXJldFVwLTY0ZDE5MTE5LmpzJykudGhlbih4ID0+IHguY2FyZXRVcCksXG4gIGNoZWNrOiAoKSA9PiBpbXBvcnQoJy4vY2hlY2stMTMyYzk4OTQuanMnKS50aGVuKHggPT4geC5jaGVjayksXG4gIGNoZXZyb25Eb3duOiAoKSA9PiBpbXBvcnQoJy4vY2hldnJvbkRvd24tZWI0N2IyMWYuanMnKS50aGVuKHggPT4geC5jaGV2cm9uRG93biksXG4gIGNoZXZyb25MZWZ0OiAoKSA9PiBpbXBvcnQoJy4vY2hldnJvbkxlZnQtZjAxMzk4ODMuanMnKS50aGVuKHggPT4geC5jaGV2cm9uTGVmdCksXG4gIGNoZXZyb25MaWdodERvd246ICgpID0+IGltcG9ydCgnLi9jaGV2cm9uTGlnaHREb3duLTFkY2QxNmZmLmpzJykudGhlbih4ID0+IHguY2hldnJvbkxpZ2h0RG93biksXG4gIGNoZXZyb25MaWdodExlZnQ6ICgpID0+IGltcG9ydCgnLi9jaGV2cm9uTGlnaHRMZWZ0LTIxM2M0YzA5LmpzJykudGhlbih4ID0+IHguY2hldnJvbkxpZ2h0TGVmdCksXG4gIGNoZXZyb25MaWdodFJpZ2h0OiAoKSA9PiBpbXBvcnQoJy4vY2hldnJvbkxpZ2h0UmlnaHQtNTg5ZGE1YjcuanMnKS50aGVuKHggPT4geC5jaGV2cm9uTGlnaHRSaWdodCksXG4gIGNoZXZyb25MaWdodFVwOiAoKSA9PiBpbXBvcnQoJy4vY2hldnJvbkxpZ2h0VXAtYWU4NGUyNzguanMnKS50aGVuKHggPT4geC5jaGV2cm9uTGlnaHRVcCksXG4gIGNoZXZyb25SaWdodDogKCkgPT4gaW1wb3J0KCcuL2NoZXZyb25SaWdodC1iZmNiY2QwZi5qcycpLnRoZW4oeCA9PiB4LmNoZXZyb25SaWdodCksXG4gIGNoZXZyb25VcDogKCkgPT4gaW1wb3J0KCcuL2NoZXZyb25VcC0zMjJhMGViYS5qcycpLnRoZW4oeCA9PiB4LmNoZXZyb25VcCksXG4gIGNsb3NlRGVmYXVsdDogKCkgPT4gaW1wb3J0KCcuL2Nsb3NlRGVmYXVsdC1lNmRhM2FkOC5qcycpLnRoZW4oeCA9PiB4LmNsb3NlRGVmYXVsdCksXG4gIGRhbmdlckV4Y2xhbWF0aW9uOiAoKSA9PiBpbXBvcnQoJy4vZGFuZ2VyRXhjbGFtYXRpb24tMDMwNWVjZTIuanMnKS50aGVuKHggPT4geC5kYW5nZXJFeGNsYW1hdGlvbiksXG4gIGRyb3B6b25lOiAoKSA9PiBpbXBvcnQoJy4vZHJvcHpvbmUtNzAxNjZhNzkuanMnKS50aGVuKHggPT4geC5kcm9wem9uZSksXG4gIGZlZWRiYWNrOiAoKSA9PiBpbXBvcnQoJy4vZmVlZGJhY2stZThlY2I3NjQuanMnKS50aGVuKHggPT4geC5mZWVkYmFjayksXG4gIGZpbGU6ICgpID0+IGltcG9ydCgnLi9maWxlLWI1NWQ0Y2UyLmpzJykudGhlbih4ID0+IHguZmlsZSksXG4gIGhpZGU6ICgpID0+IGltcG9ydCgnLi9oaWRlLWQ2ZmE2MmQxLmpzJykudGhlbih4ID0+IHguaGlkZSksXG4gIGluZm86ICgpID0+IGltcG9ydCgnLi9pbmZvLTI5ZWVhMGNkLmpzJykudGhlbih4ID0+IHguaW5mbyksXG4gIG1heGltaXNlOiAoKSA9PiBpbXBvcnQoJy4vbWF4aW1pc2UtNWJmNTBiMDAuanMnKS50aGVuKHggPT4geC5tYXhpbWlzZSksXG4gIG1lYXRiYWxsczogKCkgPT4gaW1wb3J0KCcuL21lYXRiYWxscy1jMzg4ZDc2YS5qcycpLnRoZW4oeCA9PiB4Lm1lYXRiYWxscyksXG4gIG1pbnVzOiAoKSA9PiBpbXBvcnQoJy4vbWludXMtMDE4NzI5YzQuanMnKS50aGVuKHggPT4geC5taW51cyksXG4gIG9wZW5Jbk5ld1dpbmRvdzogKCkgPT4gaW1wb3J0KCcuL29wZW5Jbk5ld1dpbmRvdy1lMTJkZTY0NS5qcycpLnRoZW4oeCA9PiB4Lm9wZW5Jbk5ld1dpbmRvdyksXG4gIHByb2Nlc3M6ICgpID0+IGltcG9ydCgnLi9wcm9jZXNzLWNlZjE0MDg2LmpzJykudGhlbih4ID0+IHgucHJvY2VzcyksXG4gIHByb2Nlc3NNb2RlbDogKCkgPT4gaW1wb3J0KCcuL3Byb2Nlc3NNb2RlbC0yMWJlNzk2ZS5qcycpLnRoZW4oeCA9PiB4LnByb2Nlc3NNb2RlbCksXG4gIHB1Ymxpc2g6ICgpID0+IGltcG9ydCgnLi9wdWJsaXNoLTRkYTk5OWJlLmpzJykudGhlbih4ID0+IHgucHVibGlzaCksXG4gIHNhdmU6ICgpID0+IGltcG9ydCgnLi9zYXZlLTAxYzFiMDIyLmpzJykudGhlbih4ID0+IHguc2F2ZSksXG4gIHNlYXJjaDogKCkgPT4gaW1wb3J0KCcuL3NlYXJjaC1iMWIwNjJkYS5qcycpLnRoZW4oeCA9PiB4LnNlYXJjaCksXG4gIHNob3c6ICgpID0+IGltcG9ydCgnLi9zaG93LWNlYjNiYmEzLmpzJykudGhlbih4ID0+IHguc2hvdyksXG4gIHN1Y2Nlc3M6ICgpID0+IGltcG9ydCgnLi9zdWNjZXNzLTdmYjlmMzM2LmpzJykudGhlbih4ID0+IHguc3VjY2VzcyksXG4gIHN1bW1hcnk6ICgpID0+IGltcG9ydCgnLi9zdW1tYXJ5LWRhN2FkZGFhLmpzJykudGhlbih4ID0+IHguc3VtbWFyeSksXG4gIHRpY2s6ICgpID0+IGltcG9ydCgnLi90aWNrLTI4Y2Y3MjdkLmpzJykudGhlbih4ID0+IHgudGljayksXG4gIHRyYXNoOiAoKSA9PiBpbXBvcnQoJy4vdHJhc2gtNTZhMTNjYzYuanMnKS50aGVuKHggPT4geC50cmFzaCksXG4gIHVzZXI6ICgpID0+IGltcG9ydCgnLi91c2VyLTZmY2U1M2FmLmpzJykudGhlbih4ID0+IHgudXNlciksXG4gIHVzZXJzOiAoKSA9PiBpbXBvcnQoJy4vdXNlcnMtOTljMWMzNDguanMnKS50aGVuKHggPT4geC51c2VycyksXG4gIHZlcnNpb25IaXN0b3J5OiAoKSA9PiBpbXBvcnQoJy4vdmVyc2lvbkhpc3RvcnktYmFlYzVhZDguanMnKS50aGVuKHggPT4geC52ZXJzaW9uSGlzdG9yeSksXG4gIHdhcm5pbmdFeGNsYW1hdGlvbjogKCkgPT4gaW1wb3J0KCcuL3dhcm5pbmdFeGNsYW1hdGlvbi00YTY5NGU3ZS5qcycpLnRoZW4oeCA9PiB4Lndhcm5pbmdFeGNsYW1hdGlvbilcbn07XG5cbmNvbnN0IHBsYWNlSG9sZGVySWNvbiA9ICgpID0+IGh0bWxgPHN2Z1xuICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgdmlld0JveD1cIjAgMCAxNiAxNlwiXG4+PC9zdmc+YDtcbi8qKlxuICogVGhlIGJhc2UgZnVuY3Rpb24gZm9yIHJlbmRlcmluZyBhbiBpY29uLCB0aGlzIGNhbiBiZSB1c2UgdG8gYXZpb2QgbGF6eSBsb2FkaW5nIG9mIFNWRyByZXNvdXJjZXNcbiAqIEByZXR1cm5zIFRoZSBodG1sIGVsZW1lbnQgd2l0aCB0aGUgU1ZHIGljb24gcmVuZGVyZWRcbiAqL1xuY29uc3QgcmVuZGVySWNvbiA9ICh7XG4gIHR5cGUsXG4gIHR5cGVBc0h0bWwsXG4gIGZpeGVkU2l6ZSxcbiAgY2xhc3NOYW1lXG59KSA9PiB7XG4gIGlmICghdHlwZSAmJiAhdHlwZUFzSHRtbCkge1xuICAgIHJldHVybiBub3RoaW5nO1xuICB9XG4gIGlmICh0eXBlICYmICEodHlwZSBpbiBpY29uTG9va3VwKSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS53YXJuKCdJY29uIG5vdCBmb3VuZCcsIHR5cGUpO1xuICAgIHJldHVybiBub3RoaW5nO1xuICB9XG4gIGNvbnN0IGljb25Qcm9taXNlID0gdHlwZSA/IGljb25Mb29rdXBbdHlwZV0oKSA6IFByb21pc2UucmVzb2x2ZSh0eXBlQXNIdG1sKTtcbiAgcmV0dXJuIGh0bWxgXG4gICAgPGRpdlxuICAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgICAgIGNsYXNzPSR7Y2xhc3NOYW1lIHx8ICduZS1pY29uJ31cbiAgICAgIHN0eWxlPSR7c3R5bGVNYXAoe1xuICAgIGhlaWdodDogZml4ZWRTaXplLFxuICAgIHdpZHRoOiBmaXhlZFNpemUsXG4gICAgZGlzcGxheTogJ2dyaWQnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGp1c3RpZnlJdGVtczogJ2NlbnRlcidcbiAgfSl9XG4gICAgPlxuICAgICAgJHt1bnRpbChpY29uUHJvbWlzZSwgcGxhY2VIb2xkZXJJY29uKCkpfVxuICAgIDwvZGl2PlxuICBgO1xufTtcblxuZXhwb3J0IHsgcmVuZGVySWNvbiBhcyByIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pY29uLmJhc2UtOGNjMTkxYWEuanMubWFwXG4iLCJpbXBvcnQgeyBjIGFzIGNvbW1vblN0eWxlcywgXyBhcyBfX2RlY29yYXRlIH0gZnJvbSAnLi9iYXNlLnN0eWxlcy0xMWQzOTE4MS5qcyc7XG5pbXBvcnQgeyBjc3MsIExpdEVsZW1lbnQsIGh0bWwsIG5vdGhpbmcgfSBmcm9tICdsaXQnO1xuaW1wb3J0IHsgcHJvcGVydHksIGN1c3RvbUVsZW1lbnQgfSBmcm9tICdsaXQvZGVjb3JhdG9ycy5qcyc7XG5pbXBvcnQgeyBjbGFzc01hcCB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL2NsYXNzLW1hcC5qcyc7XG5pbXBvcnQgeyBTY29wZWRFbGVtZW50c01peGluIH0gZnJvbSAnQG9wZW4td2Mvc2NvcGVkLWVsZW1lbnRzJztcbmltcG9ydCB7IGYgYXMgZmlyZSB9IGZyb20gJy4vZXZlbnRzLTExNzNmNTYyLmpzJztcbmltcG9ydCB7IHQgYXMgdG9rZW5zIH0gZnJvbSAnLi9idXR0b24udG9rZW5zLWU3OWM4YmJmLmpzJztcbmltcG9ydCB7IHIgYXMgcmVuZGVySWNvbiB9IGZyb20gJy4vaWNvbi5iYXNlLThjYzE5MWFhLmpzJztcbmltcG9ydCAnbGl0L2RpcmVjdGl2ZXMvc3R5bGUtbWFwLmpzJztcbmltcG9ydCAnbGl0L2RpcmVjdGl2ZXMvdW50aWwuanMnO1xuXG5jb25zdCBiYXNlQnV0dG9uID0gY3NzYFxuICAuYnRuIHtcbiAgICBmb250LWZhbWlseTogdmFyKC0tbmUtYnV0dG9uLWZvbnQtZmFtaWx5KTtcbiAgICBmb250LXNpemU6IHZhcigtLW5lLWJ1dHRvbi1mb250LXNpemUpO1xuICAgIHBhZGRpbmc6IHZhcigtLW5lLWJ1dHRvbi1wYWRkaW5nLXZlcnRpY2FsKVxuICAgICAgdmFyKC0tbmUtYnV0dG9uLXBhZGRpbmctaG9yaXpvbnRhbCkgdmFyKC0tbmUtYnV0dG9uLXBhZGRpbmctdmVydGljYWwpXG4gICAgICB2YXIoLS1uZS1idXR0b24tcGFkZGluZy1ob3Jpem9udGFsKTtcbiAgICBnYXA6IHZhcigtLW5lLWJ1dHRvbi1nYXApO1xuICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLW5lLWJ1dHRvbi1ib3JkZXItcmFkaXVzKTtcbiAgICBvdXRsaW5lOiBub25lO1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC1hdXRvLWZsb3c6IGNvbHVtbjtcbiAgfVxuXG4gIC5idG46Zm9jdXMge1xuICAgIG91dGxpbmU6IDRweCBzb2xpZCB2YXIoLS1uZS1idXR0b24tY29sb3ItYm9yZGVyLWZvY3VzKTtcbiAgfVxuXG4gIC5idG4tcHJpbWFyeSB7XG4gICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tbmUtYnV0dG9uLWNvbG9yLWJvcmRlci1wcmltYXJ5LWRlZmF1bHQpO1xuICAgIGNvbG9yOiB2YXIoLS1uZS1idXR0b24tY29sb3ItbGFiZWwtcHJpbWFyeS1kZWZhdWx0KTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1idXR0b24tY29sb3ItYmFja2dyb3VuZC1wcmltYXJ5LWRlZmF1bHQpO1xuICB9XG5cbiAgLmJ0bi1wcmltYXJ5OmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1idXR0b24tY29sb3ItYmFja2dyb3VuZC1wcmltYXJ5LWhvdmVyKTtcbiAgfVxuXG4gIC5idG4tcHJpbWFyeTpkaXNhYmxlZCB7XG4gICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tbmUtYnV0dG9uLWNvbG9yLWJvcmRlci1kaXNhYmxlZCk7XG4gICAgY29sb3I6IHZhcigtLW5lLWJ1dHRvbi1jb2xvci1sYWJlbC1wcmltYXJ5LWRpc2FibGVkKTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1idXR0b24tY29sb3ItYmFja2dyb3VuZC1wcmltYXJ5LWRpc2FibGVkKTtcbiAgfVxuXG4gIC5idG4tc2Vjb25kYXJ5IHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1uZS1idXR0b24tY29sb3ItYm9yZGVyLXNlY29uZGFyeS1kZWZhdWx0KTtcbiAgICBjb2xvcjogdmFyKC0tbmUtYnV0dG9uLWNvbG9yLWxhYmVsLXNlY29uZGFyeS1kZWZhdWx0KTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1idXR0b24tY29sb3ItYmFja2dyb3VuZC1zZWNvbmRhcnktZGVmYXVsdCk7XG4gIH1cblxuICAuYnRuLXNlY29uZGFyeTpob3ZlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmUtYnV0dG9uLWNvbG9yLWJhY2tncm91bmQtc2Vjb25kYXJ5LWhvdmVyKTtcbiAgfVxuXG4gIC5idG4tc2Vjb25kYXJ5OmRpc2FibGVkIHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1uZS1idXR0b24tY29sb3ItYm9yZGVyLWRpc2FibGVkKTtcbiAgICBjb2xvcjogdmFyKC0tbmUtYnV0dG9uLWNvbG9yLWxhYmVsLXNlY29uZGFyeS1kaXNhYmxlZCk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmUtYnV0dG9uLWNvbG9yLWJhY2tncm91bmQtc2Vjb25kYXJ5LWRpc2FibGVkKTtcbiAgfVxuXG4gIC5idG4tc2Vjb25kYXJ5OmZvY3VzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1idXR0b24tY29sb3ItYmFja2dyb3VuZC1zZWNvbmRhcnktaG92ZXIpO1xuICB9XG5cbiAgLmJ0bi1kZXN0cnVjdGl2ZSB7XG4gICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tbmUtYnV0dG9uLWNvbG9yLWJvcmRlci1kZXN0cnVjdGl2ZS1kZWZhdWx0KTtcbiAgICBjb2xvcjogdmFyKC0tbmUtYnV0dG9uLWNvbG9yLWxhYmVsLWRlc3RydWN0aXZlLWRlZmF1bHQpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLWJ1dHRvbi1jb2xvci1iYWNrZ3JvdW5kLWRlc3RydWN0aXZlLWRlZmF1bHQpO1xuICB9XG5cbiAgLmJ0bi1kZXN0cnVjdGl2ZTpob3ZlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmUtYnV0dG9uLWNvbG9yLWJhY2tncm91bmQtZGVzdHJ1Y3RpdmUtaG92ZXIpO1xuICB9XG5cbiAgLmJ0bi1kZXN0cnVjdGl2ZTpkaXNhYmxlZCB7XG4gICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tbmUtYnV0dG9uLWNvbG9yLWJvcmRlci1kaXNhYmxlZCk7XG4gICAgY29sb3I6IHZhcigtLW5lLWJ1dHRvbi1jb2xvci1sYWJlbC1kZXN0cnVjdGl2ZS1kaXNhYmxlZCk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmUtYnV0dG9uLWNvbG9yLWJhY2tncm91bmQtZGVzdHJ1Y3RpdmUtZGlzYWJsZWQpO1xuICB9XG5cbiAgLmJ0bi1kZXN0cnVjdGl2ZTpmb2N1cyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmUtYnV0dG9uLWNvbG9yLWJhY2tncm91bmQtZGVzdHJ1Y3RpdmUtaG92ZXIpO1xuICB9XG5cbiAgLmJ0bi10ZXh0IHtcbiAgICBib3JkZXI6IDA7XG4gICAgY29sb3I6IHZhcigtLW5lLWJ1dHRvbi1jb2xvci1sYWJlbC10ZXh0LWRlZmF1bHQpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICB9XG5cbiAgLmJ0bi10ZXh0OmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1idXR0b24tY29sb3ItYmFja2dyb3VuZC10ZXh0LWhvdmVyKTtcbiAgfVxuXG4gIC5idG4tdGV4dDpkaXNhYmxlZCB7XG4gICAgYm9yZGVyOiAwO1xuICAgIGNvbG9yOiB2YXIoLS1uZS1idXR0b24tY29sb3ItbGFiZWwtdGV4dC1kaXNhYmxlZCk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmUtYnV0dG9uLWNvbG9yLWJhY2tncm91bmQtdGV4dC1kaXNhYmxlZCk7XG4gIH1cblxuICAuYnRuLXRleHQ6Zm9jdXMge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLWJ1dHRvbi1jb2xvci1iYWNrZ3JvdW5kLXRleHQtaG92ZXIpO1xuICB9XG5cbiAgLmJ0bi1pbnZlcnNlIHtcbiAgICBjb2xvcjogdmFyKC0tbmUtYnV0dG9uLWNvbG9yLWxhYmVsLWludmVyc2UtZGVmYXVsdCk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tbmUtYnV0dG9uLWNvbG9yLWJvcmRlci1pbnZlcnNlLWRlZmF1bHQpO1xuICB9XG5cbiAgLmJ0bi1pbnZlcnNlOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1idXR0b24tY29sb3ItYmFja2dyb3VuZC1pbnZlcnNlLWhvdmVyKTtcbiAgfVxuXG4gIC5idG4taW52ZXJzZTpkaXNhYmxlZCB7XG4gICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tbmUtYnV0dG9uLWNvbG9yLWJvcmRlci1kaXNhYmxlZCk7XG4gICAgY29sb3I6IHZhcigtLW5lLWJ1dHRvbi1jb2xvci1sYWJlbC1pbnZlcnNlLWRpc2FibGVkKTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1idXR0b24tY29sb3ItYmFja2dyb3VuZC1pbnZlcnNlLWRpc2FibGVkKTtcbiAgfVxuXG4gIC5idG4taW52ZXJzZTpmb2N1cyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmUtYnV0dG9uLWNvbG9yLWJhY2tncm91bmQtaW52ZXJzZS1ob3Zlcik7XG4gIH1cblxuICAuaWNvbi1zbG90IHtcbiAgICBtaW4td2lkdGg6IDE4cHg7XG4gICAgbWF4LXdpZHRoOiAxOHB4O1xuICB9XG5gO1xuY29uc3Qgc3R5bGVzID0gW3Rva2VucywgYmFzZUJ1dHRvbiwgY29tbW9uU3R5bGVzXTtcblxuY29uc3QgYnV0dG9uVmFyaWFudHNBcnJheSA9IFsncHJpbWFyeScsICdzZWNvbmRhcnknLCAnZGVzdHJ1Y3RpdmUnLCAndGV4dCcsICdpbnZlcnNlJ107XG4vKipcbiAqIEB0YWcgbmUtYnV0dG9uXG4gKiBAdGFnbmFtZSBuZS1idXR0b25cbiAqXG4gKiBAc2xvdCBkZWZhdWx0IFRoaXMgaXMgd2hlcmUgdGhlIGNvbnRlbnRzIG9mIHRoZSBidXR0b24gd2lsbCBiZSBpbnNlcnRlZFxuICpcbiAqIEBldmVudCBuZS1jbGljayBSYWlzZWQgd2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQuXG4gKi9cbmxldCBOZUJ1dHRvbiA9IGNsYXNzIE5lQnV0dG9uIGV4dGVuZHMgU2NvcGVkRWxlbWVudHNNaXhpbihMaXRFbGVtZW50KSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgLyoqIFNwZWNpZmllcyB0aGF0IGEgYnV0dG9uIHNob3VsZCBiZSBkaXNhYmxlZCAqL1xuICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAvKiogU3BlY2lmaWVzIHRoZSB0ZXh0IHRoYXQgd2lsbCBiZSByZWFkIGJ5IHRoZSBzY3JlZW4gcmVhZGVyICovXG4gICAgdGhpcy5hcmlhTGFiZWwgPSAnJztcbiAgICB0aGlzLnZhcmlhbnQgPSAncHJpbWFyeSc7XG4gICAgdGhpcy5vbkNsaWNrID0gKCkgPT4ge1xuICAgICAgZmlyZSh0aGlzLCAnbmUtY2xpY2snLCB7XG4gICAgICAgIGNvbXBvc2VkOiB0cnVlLFxuICAgICAgICBidWJibGVzOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuICB9XG4gIHN0YXRpYyBnZXQgc3R5bGVzKCkge1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBodG1sYFxuICAgICAgPGJ1dHRvblxuICAgICAgICBpZD0ke3RoaXMuaWR9XG4gICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICA/ZGlzYWJsZWQ9JHt0aGlzLmRpc2FibGVkfVxuICAgICAgICBAY2xpY2s9XCIke3RoaXMub25DbGlja31cIlxuICAgICAgICBhcmlhLWxhYmVsPSR7dGhpcy5hcmlhTGFiZWwgfHwgbm90aGluZ31cbiAgICAgICAgY2xhc3M9JHtjbGFzc01hcCh7XG4gICAgICBidG46IHRydWUsXG4gICAgICAnYnRuLXByaW1hcnknOiB0aGlzLnZhcmlhbnQgPT09ICdwcmltYXJ5JyxcbiAgICAgICdidG4tc2Vjb25kYXJ5JzogdGhpcy52YXJpYW50ID09PSAnc2Vjb25kYXJ5JyxcbiAgICAgICdidG4tZGVzdHJ1Y3RpdmUnOiB0aGlzLnZhcmlhbnQgPT09ICdkZXN0cnVjdGl2ZScsXG4gICAgICAnYnRuLXRleHQnOiB0aGlzLnZhcmlhbnQgPT09ICd0ZXh0JyxcbiAgICAgICdidG4taW52ZXJzZSc6IHRoaXMudmFyaWFudCA9PT0gJ2ludmVyc2UnXG4gICAgfSl9XG4gICAgICA+XG4gICAgICAgIDxzcGFuIGNsYXNzPSR7dGhpcy5sZWZ0SWNvblR5cGUgIT09IHVuZGVmaW5lZCA/ICdpY29uLXNsb3QnIDogJ2hpZGRlbid9PlxuICAgICAgICAgIDxzbG90IG5hbWU9XCJsZWZ0XCI+JHtyZW5kZXJJY29uKHtcbiAgICAgIHR5cGU6IHRoaXMubGVmdEljb25UeXBlXG4gICAgfSl9PC9zbG90PlxuICAgICAgICA8L3NwYW4+XG4gICAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICAgICAgPHNwYW5cbiAgICAgICAgICBjbGFzcz0ke3RoaXMucmlnaHRJY29uVHlwZSAhPT0gdW5kZWZpbmVkID8gJ2ljb24tc2xvdCcgOiAnaGlkZGVuJ31cbiAgICAgICAgPlxuICAgICAgICAgIDxzbG90IG5hbWU9XCJyaWdodFwiPiR7cmVuZGVySWNvbih7XG4gICAgICB0eXBlOiB0aGlzLnJpZ2h0SWNvblR5cGVcbiAgICB9KX08L3Nsb3Q+XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgIDwvYnV0dG9uPlxuICAgIGA7XG4gIH1cbn07XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IEJvb2xlYW4sXG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVCdXR0b24ucHJvdG90eXBlLCBcImRpc2FibGVkXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIGF0dHJpYnV0ZTogJ25lLWFyaWEtbGFiZWwnLFxuICB0eXBlOiBTdHJpbmcsXG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVCdXR0b24ucHJvdG90eXBlLCBcImFyaWFMYWJlbFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBTdHJpbmcsXG4gIGF0dHJpYnV0ZTogJ2xlZnQtaWNvbicsXG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVCdXR0b24ucHJvdG90eXBlLCBcImxlZnRJY29uVHlwZVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBTdHJpbmcsXG4gIGF0dHJpYnV0ZTogJ3JpZ2h0LWljb24nLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIE5lQnV0dG9uLnByb3RvdHlwZSwgXCJyaWdodEljb25UeXBlXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVCdXR0b24ucHJvdG90eXBlLCBcInZhcmlhbnRcIiwgdm9pZCAwKTtcbk5lQnV0dG9uID0gX19kZWNvcmF0ZShbY3VzdG9tRWxlbWVudCgnbmUtYnV0dG9uJyldLCBOZUJ1dHRvbik7XG5cbmV4cG9ydCB7IE5lQnV0dG9uLCBidXR0b25WYXJpYW50c0FycmF5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idXR0b24uanMubWFwXG4iLCIvKipcbiAqXG4gKiBAcGFyYW0gZWxlbWVudCBUaGUgRWxlbWVudCB0aGF0IHRyaWdnZXJzIHRoZSBldmVudCwgbm9ybWFsbHkgJ3RoaXMnXG4gKiBAcGFyYW0gZXZlbnRUeXBlIGNob3NlIGZyb20gQ3VzdG9tRXZlbnRUeXBlc1xuICogQHBhcmFtIGRhdGEgdGhlIGRhdGEgcGFzc2VkIGluIHRoZSBldmVudFxuICogQHJldHVybnMgYW4gaW5zdGFuY2Ugb2YgdGhlIGV2ZW50IHRoYXQgd2FzIGRpc3BhdGNoZWRcbiAqL1xuY29uc3QgZmlyZSA9IChlbGVtZW50LCBldmVudFR5cGUsIGRhdGEpID0+IHtcbiAgY29uc3QgYXJncyA9IHtcbiAgICBidWJibGVzOiB0cnVlLFxuICAgIGNhbmNlbGFibGU6IGZhbHNlLFxuICAgIGNvbXBvc2VkOiB0cnVlLFxuICAgIC4uLmRhdGFcbiAgfTtcbiAgY29uc3QgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoZXZlbnRUeXBlLCBhcmdzKTtcbiAgZWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgcmV0dXJuIGV2ZW50O1xufTtcblxuZXhwb3J0IHsgZmlyZSBhcyBmIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldmVudHMtMTE3M2Y1NjIuanMubWFwXG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdsaXQnO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuXHJcbmZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cblxuLy8gQ29tbW9uIHN0eWxlcyBjYW4gYmUgYWRkZWQgaGVyZVxuY29uc3QgY29tbW9uU3R5bGVzID0gY3NzYFxuICA6aG9zdCB7XG4gICAgYWxsOiBpbml0aWFsO1xuICB9XG5cbiAgLmhpZGRlbiB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuYDtcblxuZXhwb3J0IHsgX19kZWNvcmF0ZSBhcyBfLCBjb21tb25TdHlsZXMgYXMgYyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZS5zdHlsZXMtMTFkMzkxODEuanMubWFwXG4iLCJpbXBvcnR7bm90aGluZyBhcyB0fWZyb21cIi4uL2xpdC1odG1sLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9jb25zdCBsPWw9Pm51bGwhPWw/bDp0O2V4cG9ydHtsIGFzIGlmRGVmaW5lZH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZi1kZWZpbmVkLmpzLm1hcFxuIiwiaW1wb3J0IHsgYyBhcyBjb21tb25TdHlsZXMsIF8gYXMgX19kZWNvcmF0ZSB9IGZyb20gJy4vYmFzZS5zdHlsZXMtMTFkMzkxODEuanMnO1xuaW1wb3J0IHsgY3NzLCBMaXRFbGVtZW50LCBodG1sLCBub3RoaW5nIH0gZnJvbSAnbGl0JztcbmltcG9ydCB7IGlmRGVmaW5lZCB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL2lmLWRlZmluZWQuanMnO1xuaW1wb3J0IHsgcHJvcGVydHksIGN1c3RvbUVsZW1lbnQgfSBmcm9tICdsaXQvZGVjb3JhdG9ycy5qcyc7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5jb25zdCB0b2tlbnMgPSBjc3NgXG4gICoge1xuICAtLW5lLWxhYmVsLWdhcDogdmFyKC0tbmUtcmVmLXNwYWNpbmctbm9uZSwgMCk7XG4gIC0tbmUtbGFiZWwtY29sb3ItdGl0bGU6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTYwLCAjNTc1QzYxKTtcbiAgLS1uZS1sYWJlbC1jb2xvci1hc3RlcmlzazogdmFyKC0tbmUtcmVmLWNvbG9yLXJlZC02MCwgI0I4MDAwMCk7XG4gIC0tbmUtbGFiZWwtZm9udC1zaXplOiB2YXIoLS1uZS1yZWYtZm9udC1zaXplLTA0LCAwLjg3NWVtKTtcbiAgLS1uZS1sYWJlbC1mb250LWZhbWlseTogdmFyKC0tbmUtcmVmLWZvbnQtZmFtaWx5LW9wZW4tc2FucywgT3BlbiBTYW5zKTtcbn1cbmA7XG5cbmNvbnN0IGJhc2VMYWJlbCA9IGNzc2BcbiAgKiB7XG4gICAgY29sb3I6IHZhcigtLW5lLWxhYmVsLWNvbG9yLXRpdGxlKTtcbiAgICBmb250LWZhbWlseTogdmFyKC0tbmUtbGFiZWwtZm9udC1mYW1pbHkpO1xuICAgIGZvbnQtc2l6ZTogMWVtO1xuICB9XG5cbiAgLm91dGVyLWxhYmVsIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZvbnQtc2l6ZTogdmFyKC0tbmUtbGFiZWwtZm9udC1zaXplKTtcbiAgfVxuXG4gIC5yZXF1aXJlZC1pbmRpY2F0b3Ige1xuICAgIG1hcmdpbi1sZWZ0OiB2YXIoLS1uZS1sYWJlbC1nYXApO1xuICAgIGNvbG9yOiB2YXIoLS1uZS1sYWJlbC1jb2xvci1hc3Rlcmlzayk7XG4gIH1cbmA7XG5jb25zdCBzdHlsZXMgPSBbYmFzZUxhYmVsLCBjb21tb25TdHlsZXMsIHRva2Vuc107XG5cbi8qKlxuICogQHRhZyBuZS1sYWJlbFxuICogQHRhZ25hbWUgbmUtbGFiZWxcbiAqXG4gKi9cbmxldCBOZUxhYmVsID0gY2xhc3MgTmVMYWJlbCBleHRlbmRzIExpdEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMuZm9yID0gJyc7XG4gICAgdGhpcy5yZXF1aXJlZCA9IGZhbHNlO1xuICB9XG4gIHN0YXRpYyBnZXQgc3R5bGVzKCkge1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBodG1sYDxsYWJlbFxuICAgICAgY2xhc3M9XCJvdXRlci1sYWJlbFwiXG4gICAgICBpZD0ke2lmRGVmaW5lZCh0aGlzLmlkKX1cbiAgICAgIGZvcj0ke2lmRGVmaW5lZCh0aGlzLmZvcil9XG4gICAgPlxuICAgICAgPHNsb3Q+PC9zbG90PlxuICAgICAgJHt0aGlzLnJlcXVpcmVkID8gaHRtbGA8c3BhbiBjbGFzcz1cInJlcXVpcmVkLWluZGljYXRvclwiPio8L3NwYW4+YCA6IG5vdGhpbmd9XG4gICAgPC9sYWJlbD4gYDtcbiAgfVxufTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgYXR0cmlidXRlOiAnZm9yJ1xufSldLCBOZUxhYmVsLnByb3RvdHlwZSwgXCJmb3JcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgYXR0cmlidXRlOiAncmVxdWlyZWQnLFxuICB0eXBlOiBCb29sZWFuLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIE5lTGFiZWwucHJvdG90eXBlLCBcInJlcXVpcmVkXCIsIHZvaWQgMCk7XG5OZUxhYmVsID0gX19kZWNvcmF0ZShbY3VzdG9tRWxlbWVudCgnbmUtbGFiZWwnKV0sIE5lTGFiZWwpO1xuXG5leHBvcnQgeyBOZUxhYmVsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sYWJlbC5qcy5tYXBcbiIsImltcG9ydHtub3RoaW5nIGFzIHQsbm9DaGFuZ2UgYXMgaX1mcm9tXCIuLi9saXQtaHRtbC5qc1wiO2ltcG9ydHtEaXJlY3RpdmUgYXMgcixQYXJ0VHlwZSBhcyBzLGRpcmVjdGl2ZSBhcyBufWZyb21cIi4uL2RpcmVjdGl2ZS5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovY2xhc3MgZSBleHRlbmRzIHJ7Y29uc3RydWN0b3IoaSl7aWYoc3VwZXIoaSksdGhpcy5pdD10LGkudHlwZSE9PXMuQ0hJTEQpdGhyb3cgRXJyb3IodGhpcy5jb25zdHJ1Y3Rvci5kaXJlY3RpdmVOYW1lK1wiKCkgY2FuIG9ubHkgYmUgdXNlZCBpbiBjaGlsZCBiaW5kaW5nc1wiKX1yZW5kZXIocil7aWYocj09PXR8fG51bGw9PXIpcmV0dXJuIHRoaXMuX3Q9dm9pZCAwLHRoaXMuaXQ9cjtpZihyPT09aSlyZXR1cm4gcjtpZihcInN0cmluZ1wiIT10eXBlb2Ygcil0aHJvdyBFcnJvcih0aGlzLmNvbnN0cnVjdG9yLmRpcmVjdGl2ZU5hbWUrXCIoKSBjYWxsZWQgd2l0aCBhIG5vbi1zdHJpbmcgdmFsdWVcIik7aWYocj09PXRoaXMuaXQpcmV0dXJuIHRoaXMuX3Q7dGhpcy5pdD1yO2NvbnN0IHM9W3JdO3JldHVybiBzLnJhdz1zLHRoaXMuX3Q9e18kbGl0VHlwZSQ6dGhpcy5jb25zdHJ1Y3Rvci5yZXN1bHRUeXBlLHN0cmluZ3M6cyx2YWx1ZXM6W119fX1lLmRpcmVjdGl2ZU5hbWU9XCJ1bnNhZmVIVE1MXCIsZS5yZXN1bHRUeXBlPTE7Y29uc3Qgbz1uKGUpO2V4cG9ydHtlIGFzIFVuc2FmZUhUTUxEaXJlY3RpdmUsbyBhcyB1bnNhZmVIVE1MfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVuc2FmZS1odG1sLmpzLm1hcFxuIiwiaW1wb3J0e2RpcmVjdGl2ZSBhcyBzfWZyb21cIi4uL2RpcmVjdGl2ZS5qc1wiO2ltcG9ydHtVbnNhZmVIVE1MRGlyZWN0aXZlIGFzIGV9ZnJvbVwiLi91bnNhZmUtaHRtbC5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovY2xhc3MgdCBleHRlbmRzIGV7fXQuZGlyZWN0aXZlTmFtZT1cInVuc2FmZVNWR1wiLHQucmVzdWx0VHlwZT0yO2NvbnN0IG89cyh0KTtleHBvcnR7byBhcyB1bnNhZmVTVkd9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dW5zYWZlLXN2Zy5qcy5tYXBcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXNoYWRvdyAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBTcGlubmVyVHlwZTtcbihmdW5jdGlvbiAoU3Bpbm5lclR5cGUpIHtcbiAgU3Bpbm5lclR5cGVbXCJsYXJnZVwiXSA9IFwibGFyZ2VcIjtcbiAgU3Bpbm5lclR5cGVbXCJtZWRpdW1cIl0gPSBcIm1lZGl1bVwiO1xuICBTcGlubmVyVHlwZVtcInNtYWxsXCJdID0gXCJzbWFsbFwiO1xufSkoU3Bpbm5lclR5cGUgfHwgKFNwaW5uZXJUeXBlID0ge30pKTtcbnZhciBTcGlubmVyVGhlbWVUeXBlO1xuKGZ1bmN0aW9uIChTcGlubmVyVGhlbWVUeXBlKSB7XG4gIFNwaW5uZXJUaGVtZVR5cGVbXCJsaWdodFwiXSA9IFwibGlnaHRcIjtcbiAgU3Bpbm5lclRoZW1lVHlwZVtcInJlZ3VsYXJcIl0gPSBcInJlZ3VsYXJcIjtcbn0pKFNwaW5uZXJUaGVtZVR5cGUgfHwgKFNwaW5uZXJUaGVtZVR5cGUgPSB7fSkpO1xuXG5leHBvcnQgeyBTcGlubmVyVHlwZSBhcyBTLCBTcGlubmVyVGhlbWVUeXBlIGFzIGEgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNwaW5uZXIubW9kZWxzLTUzMTQ0OGNmLmpzLm1hcFxuIiwiaW1wb3J0IHsgYyBhcyBjb21tb25TdHlsZXMsIF8gYXMgX19kZWNvcmF0ZSB9IGZyb20gJy4vYmFzZS5zdHlsZXMtMTFkMzkxODEuanMnO1xuaW1wb3J0IHsgY3NzLCBMaXRFbGVtZW50LCBodG1sIH0gZnJvbSAnbGl0JztcbmltcG9ydCB7IHByb3BlcnR5LCBjdXN0b21FbGVtZW50IH0gZnJvbSAnbGl0L2RlY29yYXRvcnMuanMnO1xuaW1wb3J0IHsgdW5zYWZlU1ZHIH0gZnJvbSAnbGl0L2RpcmVjdGl2ZXMvdW5zYWZlLXN2Zy5qcyc7XG5pbXBvcnQgeyBjbGFzc01hcCB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL2NsYXNzLW1hcC5qcyc7XG5pbXBvcnQgeyBTIGFzIFNwaW5uZXJUeXBlLCBhIGFzIFNwaW5uZXJUaGVtZVR5cGUgfSBmcm9tICcuL3NwaW5uZXIubW9kZWxzLTUzMTQ0OGNmLmpzJztcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmNvbnN0IHRva2VucyA9IGNzc2BcbiAgKiB7XG4gIC0tbmUtc3Bpbm5lci1zaXppbmctbGFyZ2U6IHZhcigtLW5lLXJlZi1zaXppbmctMTIsIDRlbSk7XG4gIC0tbmUtc3Bpbm5lci1zaXppbmctbWVkaXVtOiB2YXIoLS1uZS1yZWYtc2l6aW5nLTExLCAzZW0pO1xuICAtLW5lLXNwaW5uZXItc2l6aW5nLXNtYWxsOiB2YXIoLS1uZS1yZWYtc2l6aW5nLTA0LCAxZW0pO1xuICAtLW5lLXNwaW5uZXItZ2FwOiB2YXIoLS1uZS1yZWYtc3BhY2luZy14LXNtYWxsLCAwLjVlbSk7XG4gIC0tbmUtc3Bpbm5lci1jb2xvci1kYXJrLWxlZnQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTkwLCAjMTYxNzE4KTtcbiAgLS1uZS1zcGlubmVyLWNvbG9yLWRhcmstcmlnaHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTUwLCAjNkQ3Mzc5KTtcbiAgLS1uZS1zcGlubmVyLWNvbG9yLWRhcmstdGV4dDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktOTAsICMxNjE3MTgpO1xuICAtLW5lLXNwaW5uZXItY29sb3ItbGlnaHQtcmlnaHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTIwLCAjQzRDN0NBKTtcbiAgLS1uZS1zcGlubmVyLWNvbG9yLWxpZ2h0LWxlZnQ6IHZhcigtLW5lLXJlZi1jb2xvci13aGl0ZSwgI2ZmZmZmZik7XG4gIC0tbmUtc3Bpbm5lci1jb2xvci1saWdodC10ZXh0OiB2YXIoLS1uZS1yZWYtY29sb3Itd2hpdGUsICNmZmZmZmYpO1xuICAtLW5lLXNwaW5uZXItZm9udC1mYW1pbHk6IHZhcigtLW5lLXJlZi1mb250LWZhbWlseS1vcGVuLXNhbnMsIE9wZW4gU2Fucyk7XG4gIC0tbmUtc3Bpbm5lci1mb250LXNpemUtbGFyZ2U6IHZhcigtLW5lLXJlZi1mb250LXNpemUtMDYsIDEuMTI1ZW0pO1xuICAtLW5lLXNwaW5uZXItZm9udC1zaXplLW1lZGl1bTogdmFyKC0tbmUtcmVmLWZvbnQtc2l6ZS0wNCwgMC44NzVlbSk7XG4gIC0tbmUtc3Bpbm5lci1mb250LXNpemUtc21hbGw6IHZhcigtLW5lLXJlZi1mb250LXNpemUtMDIsIDAuNzVlbSk7XG59XG5gO1xuXG5jb25zdCBiYXNlTG9hZGluZ0luZGljYXRvciA9IGNzc2BcbiAgQGtleWZyYW1lcyBtaWRkbGUge1xuICAgIDAlIHtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgfVxuXG4gICAgMzIlIHtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgfVxuXG4gICAgNTAlIHtcbiAgICAgIG9wYWNpdHk6IDE7XG4gICAgfVxuXG4gICAgMTAwJSB7XG4gICAgICBvcGFjaXR5OiAxO1xuICAgIH1cbiAgfVxuXG4gIEBrZXlmcmFtZXMgc2Vjb25kIHtcbiAgICAwJSB7XG4gICAgICBvcGFjaXR5OiAwO1xuICAgIH1cblxuICAgIDI0JSB7XG4gICAgICBvcGFjaXR5OiAwO1xuICAgIH1cblxuICAgIDMyJSB7XG4gICAgICBvcGFjaXR5OiAwLjk7XG4gICAgfVxuXG4gICAgNDAlIHtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgfVxuXG4gICAgMTAwJSB7XG4gICAgICBvcGFjaXR5OiAwO1xuICAgIH1cbiAgfVxuXG4gIEBrZXlmcmFtZXMgdGhpcmQge1xuICAgIDAlIHtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgfVxuXG4gICAgMTYlIHtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgfVxuXG4gICAgMjQlIHtcbiAgICAgIG9wYWNpdHk6IDAuODtcbiAgICB9XG5cbiAgICA0MCUge1xuICAgICAgb3BhY2l0eTogMDtcbiAgICB9XG5cbiAgICAxMDAlIHtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgfVxuICB9XG5cbiAgQGtleWZyYW1lcyBmb3J0aCB7XG4gICAgMCUge1xuICAgICAgb3BhY2l0eTogMDtcbiAgICB9XG5cbiAgICA4JSB7XG4gICAgICBvcGFjaXR5OiAwLjc7XG4gICAgfVxuXG4gICAgMjQlIHtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgfVxuXG4gICAgMTAwJSB7XG4gICAgICBvcGFjaXR5OiAwO1xuICAgIH1cbiAgfVxuXG4gIEBrZXlmcmFtZXMgZmlmdGgge1xuICAgIDAlIHtcbiAgICAgIG9wYWNpdHk6IDAuNjtcbiAgICB9XG5cbiAgICAxMCUge1xuICAgICAgb3BhY2l0eTogMDtcbiAgICB9XG5cbiAgICAxMDAlIHtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgfVxuICB9XG5cbiAgLm5lLXNwaW5uZXIge1xuICAgIGNvbG9yOiB2YXIoLS1uZS1zcGlubmVyLWNvbG9yLWRhcmstdGV4dCk7XG4gIH1cblxuICAubmUtc3Bpbm5lci1zdGF0dXMge1xuICAgIG1hcmdpbjogMWVtO1xuICAgIGZvbnQtc2l6ZTogdmFyKC0tbmUtc3Bpbm5lci1mb250LXNpemUtbGFyZ2UpO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBmb250LWZhbWlseTogdmFyKC0tbmUtc3Bpbm5lci1mb250LWZhbWlseSk7XG4gIH1cblxuICAubmUtc3Bpbm5lci1jb250YWluZXIge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIH1cblxuICAubmUtc3Bpbm5lci1jb250YWluZXItbGFyZ2Uge1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIH1cblxuICAubmUtc3Bpbm5lci1jb250YWluZXItY2VudGVyIHtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgfVxuXG4gIC5uZS1pY29uIHtcbiAgICBmaWxsOiBjdXJyZW50Y29sb3I7XG4gICAgdmVydGljYWwtYWxpZ246IHRvcDtcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgfVxuXG4gIC5uZS1uaW50ZXgtc3Bpbm5lciAubmUtaWNvbiB7XG4gICAgaGVpZ2h0OiB2YXIoLS1uZS1zcGlubmVyLXNpemluZy1sYXJnZSk7XG4gICAgd2lkdGg6IHZhcigtLW5lLXNwaW5uZXItc2l6aW5nLWxhcmdlKTtcbiAgfVxuXG4gIC5uZS1uaW50ZXgtc3Bpbm5lciA+IGRpdiB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB9XG5cbiAgLm5lLW5pbnRleC1zcGlubmVyLW1pZGRsZSB7XG4gICAgYW5pbWF0aW9uLW5hbWU6IG1pZGRsZTtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIH1cblxuICAubmUtbmludGV4LXNwaW5uZXItbGVmdCB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICB9XG5cbiAgLm5lLW5pbnRleC1zcGlubmVyLXRyYWlsLWxlZnQsXG4gIC5uZS1uaW50ZXgtc3Bpbm5lci10cmFpbC1yaWdodCB7XG4gICAgbWFyZ2luOiAwIC04cHg7XG4gIH1cblxuICAubmUtbmludGV4LXNwaW5uZXItdHJhaWwtbGVmdCxcbiAgLm5lLW5pbnRleC1zcGlubmVyLWxlZnQge1xuICAgIGNvbG9yOiB2YXIoLS1uZS1zcGlubmVyLWNvbG9yLWRhcmstbGVmdCk7XG4gIH1cblxuICAubmUtbmludGV4LXNwaW5uZXItdHJhaWwtcmlnaHQsXG4gIC5uZS1uaW50ZXgtc3Bpbm5lci1yaWdodCB7XG4gICAgY29sb3I6IHZhcigtLW5lLXNwaW5uZXItY29sb3ItZGFyay1yaWdodCk7XG4gIH1cblxuICAubmUtbmludGV4LXNwaW5uZXItbWlkZGxlLFxuICAubmUtbmludGV4LXNwaW5uZXItc2Vjb25kLFxuICAubmUtbmludGV4LXNwaW5uZXItdGhpcmQsXG4gIC5uZS1uaW50ZXgtc3Bpbm5lci1mb3J0aCxcbiAgLm5lLW5pbnRleC1zcGlubmVyLWZpZnRoIHtcbiAgICBhbmltYXRpb24tZHVyYXRpb246IDIwMDBtcztcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXI7XG4gICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogaW5maW5pdGU7XG4gICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbi1vdXQ7XG4gIH1cblxuICAubmUtbmludGV4LXNwaW5uZXItc2Vjb25kIHtcbiAgICBhbmltYXRpb24tbmFtZTogc2Vjb25kO1xuICB9XG5cbiAgLm5lLW5pbnRleC1zcGlubmVyLXRoaXJkIHtcbiAgICBhbmltYXRpb24tbmFtZTogdGhpcmQ7XG4gIH1cblxuICAubmUtbmludGV4LXNwaW5uZXItZm9ydGgge1xuICAgIGFuaW1hdGlvbi1uYW1lOiBmb3J0aDtcbiAgfVxuXG4gIC5uZS1uaW50ZXgtc3Bpbm5lci1maWZ0aCB7XG4gICAgYW5pbWF0aW9uLW5hbWU6IGZpZnRoO1xuICB9XG5cbiAgLm5lLW5pbnRleC1zcGlubmVyLXNtYWxsIHtcbiAgICBwYWRkaW5nOiAwO1xuICB9XG5cbiAgLm5lLW5pbnRleC1zcGlubmVyLXNtYWxsIC5uZS1pY29uIHtcbiAgICBoZWlnaHQ6IHZhcigtLW5lLXNwaW5uZXItc2l6aW5nLXNtYWxsKTtcbiAgICB3aWR0aDogdmFyKC0tbmUtc3Bpbm5lci1zaXppbmctc21hbGwpO1xuICB9XG5cbiAgLm5lLW5pbnRleC1zcGlubmVyLXNtYWxsIC5uZS1uaW50ZXgtc3Bpbm5lci10cmFpbC1sZWZ0LFxuICAubmUtbmludGV4LXNwaW5uZXItc21hbGwgLm5lLW5pbnRleC1zcGlubmVyLXRyYWlsLXJpZ2h0IHtcbiAgICBtYXJnaW46IDAgLTJweDtcbiAgfVxuXG4gIC5uZS1uaW50ZXgtc3Bpbm5lci1zbWFsbCAubmUtc3Bpbm5lci1zdGF0dXMge1xuICAgIGZvbnQtc2l6ZTogdmFyKC0tbmUtc3Bpbm5lci1mb250LXNpemUtc21hbGwpO1xuICAgIG1hcmdpbjogMDtcbiAgfVxuXG4gIC5uZS1uaW50ZXgtc3Bpbm5lci1tZWRpdW0gLm5lLWljb24ge1xuICAgIGhlaWdodDogdmFyKC0tbmUtc3Bpbm5lci1zaXppbmctbWVkaXVtKTtcbiAgICB3aWR0aDogdmFyKC0tbmUtc3Bpbm5lci1zaXppbmctbWVkaXVtKTtcbiAgfVxuXG4gIC5uZS1uaW50ZXgtc3Bpbm5lci1tZWRpdW0gLm5lLW5pbnRleC1zcGlubmVyLXRyYWlsLWxlZnQsXG4gIC5uZS1uaW50ZXgtc3Bpbm5lci1tZWRpdW0gLm5lLW5pbnRleC1zcGlubmVyLXRyYWlsLXJpZ2h0IHtcbiAgICBtYXJnaW46IDAgLTZweDtcbiAgfVxuXG4gIC5uZS1uaW50ZXgtc3Bpbm5lci1tZWRpdW0gLm5lLXNwaW5uZXItc3RhdHVzIHtcbiAgICBmb250LXNpemU6IHZhcigtLW5lLXNwaW5uZXItZm9udC1zaXplLW1lZGl1bSk7XG4gICAgbWFyZ2luOiAwLjg3NWVtO1xuICB9XG5cbiAgLm5lLXNwaW5uZXItdGhlbWUtbGlnaHQgLm5lLW5pbnRleC1zcGlubmVyLXRyYWlsLWxlZnQsXG4gIC5uZS1zcGlubmVyLXRoZW1lLWxpZ2h0IC5uZS1uaW50ZXgtc3Bpbm5lci10cmFpbC1yaWdodCB7XG4gICAgY29sb3I6IHZhcigtLW5lLXNwaW5uZXItY29sb3ItbGlnaHQtcmlnaHQpO1xuICB9XG5cbiAgLm5lLXNwaW5uZXItdGhlbWUtbGlnaHQgLm5lLW5pbnRleC1zcGlubmVyLWxlZnQge1xuICAgIGNvbG9yOiB2YXIoLS1uZS1zcGlubmVyLWNvbG9yLWxpZ2h0LWxlZnQpO1xuICB9XG5cbiAgLm5lLXNwaW5uZXItdGhlbWUtbGlnaHQgLm5lLW5pbnRleC1zcGlubmVyLXRyYWlsLXJpZ2h0LFxuICAubmUtc3Bpbm5lci10aGVtZS1saWdodCAubmUtbmludGV4LXNwaW5uZXItcmlnaHQge1xuICAgIGNvbG9yOiB2YXIoLS1uZS1zcGlubmVyLWNvbG9yLWxpZ2h0LXJpZ2h0KTtcbiAgfVxuXG4gIC5uZS1zcGlubmVyLXRoZW1lLWxpZ2h0IC5uZS1zcGlubmVyLXN0YXR1cyB7XG4gICAgY29sb3I6IHZhcigtLW5lLXNwaW5uZXItY29sb3ItbGlnaHQtdGV4dCk7XG4gIH1cbmA7XG5jb25zdCBzdHlsZXMgPSBbdG9rZW5zLCBiYXNlTG9hZGluZ0luZGljYXRvciwgY29tbW9uU3R5bGVzXTtcblxuY29uc3QgY2VudGVyTGVmdCA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDM0IDM0XCIgd2lkdGg9XCIxZW1cIiBoZWlnaHQ9XCIxZW1cIiBjbGFzcz1cIm5lLWljb25fX2xvZ29zLW5pbnRleC14LWxvYWRlci1jZW50ZXItbGVmdCBuZS1pY29uIG5lLWljb24taW5saW5lIG5lLW5pbnRleC1zcGlubmVyLWxlZnRcIj48cGF0aCBkPVwiTTI0LjAxIDE3bC0xNyAxN0wwIDI2Ljk5IDkuOTkgMTcgMCA3LjAxIDcuMDEgMGwxNyAxN3pcIj48L3BhdGg+PC9zdmc+JztcblxuY29uc3QgY2VudGVyUmlnaHQgPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAzNCAzNFwiIHdpZHRoPVwiMWVtXCIgaGVpZ2h0PVwiMWVtXCIgY2xhc3M9XCJuZS1pY29uX19sb2dvcy1uaW50ZXgteC1sb2FkZXItY2VudGVyLXJpZ2h0IG5lLWljb24gbmUtaWNvbi1pbmxpbmUgbmUtbmludGV4LXNwaW5uZXItcmlnaHRcIj48cGF0aCBkPVwiTTI0LjAxIDE3TDM0IDI2Ljk5IDI2Ljk5IDM0bC0xNy0xNyAxNy0xN0wzNCA3LjAxIDI0LjAxIDE3elwiPjwvcGF0aD48L3N2Zz4nO1xuXG5jb25zdCBsZWZ0ID0gJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjQgMzRcIiB3aWR0aD1cIjFlbVwiIGhlaWdodD1cIjFlbVwiIGNsYXNzPVwibmUtaWNvbl9fbG9nb3MtbmludGV4LXgtbG9hZGVyLWxlZnQgbmUtaWNvbiBuZS1pY29uLWlubGluZVwiPjxwYXRoIGQ9XCJNMjQgMTdMNy4wMSAzNCAwIDI2Ljk5IDkuOTggMTcgMCA3LjAxIDcuMDEgMCAyNCAxN3pcIj48L3BhdGg+PC9zdmc+JztcblxuY29uc3QgcmlnaHQgPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyNCAzNFwiIHdpZHRoPVwiMWVtXCIgaGVpZ2h0PVwiMWVtXCIgY2xhc3M9XCJuZS1pY29uX19sb2dvcy1uaW50ZXgteC1sb2FkZXItcmlnaHQgbmUtaWNvbiBuZS1pY29uLWlubGluZVwiPjxwYXRoIGQ9XCJNMTQuMDIgMTYuOTlMMjQgMjYuOThsLTcuMDEgN0wwIDE2Ljk5IDE2Ljk5IDAgMjQgNy4wMWwtOS45OCA5Ljk4elwiPjwvcGF0aD48L3N2Zz4nO1xuXG4vKipcbiAqIEB0YWcgbmUtc3Bpbm5lclxuICogQHRhZ25hbWUgbmUtc3Bpbm5lclxuICogQGRlc2NyaXB0aW9uIENvbnRyb2wgdGhhdCByZW5kZXJzIHRoZSBzcGlubmVyLlxuICpcbiAqL1xubGV0IE5lU3Bpbm5lciA9IGNsYXNzIE5lU3Bpbm5lciBleHRlbmRzIExpdEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgc2l6ZSBvZiB0aGUgbG9hZGluZyBpY29uXG4gICAgICovXG4gICAgdGhpcy5zaXplID0gU3Bpbm5lclR5cGUubWVkaXVtO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgdGhlbWUgb2YgdGhlIGxvYWRpbmcgaWNvblxuICAgICAqL1xuICAgIHRoaXMudGhlbWUgPSBTcGlubmVyVGhlbWVUeXBlLnJlZ3VsYXI7XG4gIH1cbiAgLy8gU3R5bGVzXG4gIHN0YXRpYyBnZXQgc3R5bGVzKCkge1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHNwaW5uZXIgPSBodG1sYDxkaXZcbiAgICAgIGNsYXNzPSR7Y2xhc3NNYXAoe1xuICAgICAgJ25lLW5pbnRleC1zcGlubmVyIG5lLXNwaW5uZXInOiB0cnVlLFxuICAgICAgJ25lLW5pbnRleC1zcGlubmVyLXNtYWxsJzogdGhpcy5zaXplID09PSBTcGlubmVyVHlwZS5zbWFsbCxcbiAgICAgICduZS1uaW50ZXgtc3Bpbm5lci1tZWRpdW0nOiB0aGlzLnNpemUgPT09IFNwaW5uZXJUeXBlLm1lZGl1bSxcbiAgICAgICduZS1uaW50ZXgtc3Bpbm5lci1sYXJnZSc6IHRoaXMuc2l6ZSA9PT0gU3Bpbm5lclR5cGUubGFyZ2UsXG4gICAgICAnbmUtc3Bpbm5lci10aGVtZS1saWdodCc6IHRoaXMudGhlbWUgPT09IFNwaW5uZXJUaGVtZVR5cGUubGlnaHQsXG4gICAgICAnbmUtc3Bpbm5lci10aGVtZS1yZWd1bGFyJzogdGhpcy50aGVtZSA9PT0gU3Bpbm5lclRoZW1lVHlwZS5yZWd1bGFyXG4gICAgfSl9XG4gICAgPlxuICAgICAgPGRpdiBjbGFzcz1cIm5lLW5pbnRleC1zcGlubmVyLXRyYWlsLWxlZnQgbmUtbmludGV4LXNwaW5uZXItZmlmdGhcIj5cbiAgICAgICAgJHt1bnNhZmVTVkcobGVmdCl9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJuZS1uaW50ZXgtc3Bpbm5lci10cmFpbC1sZWZ0IG5lLW5pbnRleC1zcGlubmVyLWZvcnRoXCI+XG4gICAgICAgICR7dW5zYWZlU1ZHKGxlZnQpfVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibmUtbmludGV4LXNwaW5uZXItdHJhaWwtbGVmdCBuZS1uaW50ZXgtc3Bpbm5lci10aGlyZFwiPlxuICAgICAgICAke3Vuc2FmZVNWRyhsZWZ0KX1cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm5lLW5pbnRleC1zcGlubmVyLXRyYWlsLWxlZnQgbmUtbmludGV4LXNwaW5uZXItc2Vjb25kXCI+XG4gICAgICAgICR7dW5zYWZlU1ZHKGxlZnQpfVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibmUtbmludGV4LXNwaW5uZXItbWlkZGxlXCI+XG4gICAgICAgICR7dW5zYWZlU1ZHKGNlbnRlckxlZnQpfSAke3Vuc2FmZVNWRyhjZW50ZXJSaWdodCl9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJuZS1uaW50ZXgtc3Bpbm5lci10cmFpbC1yaWdodCBuZS1uaW50ZXgtc3Bpbm5lci1zZWNvbmRcIj5cbiAgICAgICAgJHt1bnNhZmVTVkcocmlnaHQpfVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibmUtbmludGV4LXNwaW5uZXItdHJhaWwtcmlnaHQgbmUtbmludGV4LXNwaW5uZXItdGhpcmRcIj5cbiAgICAgICAgJHt1bnNhZmVTVkcocmlnaHQpfVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibmUtbmludGV4LXNwaW5uZXItdHJhaWwtcmlnaHQgbmUtbmludGV4LXNwaW5uZXItZm9ydGhcIj5cbiAgICAgICAgJHt1bnNhZmVTVkcocmlnaHQpfVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibmUtbmludGV4LXNwaW5uZXItdHJhaWwtcmlnaHQgbmUtbmludGV4LXNwaW5uZXItZmlmdGhcIj5cbiAgICAgICAgJHt1bnNhZmVTVkcocmlnaHQpfVxuICAgICAgPC9kaXY+XG4gICAgICAke3RoaXMuc3RhdHVzID8gaHRtbGAgPHAgY2xhc3M9XCJuZS1zcGlubmVyLXN0YXR1c1wiIHJvbGU9XCJzdGF0dXNcIj4ke3RoaXMuc3RhdHVzfTwvcD4gYCA6IGh0bWxgXG4gICAgICAgICAgICA8cCBjbGFzcz1cIm5lLXNwaW5uZXItc3RhdHVzIHZpc3VhbGx5LWhpZGRlblwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgICAgJHt0aGlzLmRlZmF1bHRTdGF0dXN9XG4gICAgICAgICAgICA8L3A+XG4gICAgICAgICAgYH1cbiAgICA8L2Rpdj5gO1xuICAgIGlmICghdGhpcy53cmFwcGVkKSB7XG4gICAgICByZXR1cm4gaHRtbGAke3NwaW5uZXJ9YDtcbiAgICB9XG4gICAgcmV0dXJuIGh0bWxgPGRpdiBjbGFzcz1cIm5lLXNwaW5uZXItY29udGFpbmVyIG5lLXNwaW5uZXItY29udGFpbmVyLWNlbnRlclwiPlxuICAgICAgJHtzcGlubmVyfVxuICAgIDwvZGl2PmA7XG4gIH1cbn07XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZyxcbiAgYXR0cmlidXRlOiAnZGVmYXVsdC1zdGF0dXMnXG59KV0sIE5lU3Bpbm5lci5wcm90b3R5cGUsIFwiZGVmYXVsdFN0YXR1c1wiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBTdHJpbmcsXG4gIGF0dHJpYnV0ZTogJ3NpemUnLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIE5lU3Bpbm5lci5wcm90b3R5cGUsIFwic2l6ZVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBTdHJpbmcsXG4gIGF0dHJpYnV0ZTogJ3N0YXR1cycsXG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVTcGlubmVyLnByb3RvdHlwZSwgXCJzdGF0dXNcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogU3RyaW5nLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIE5lU3Bpbm5lci5wcm90b3R5cGUsIFwidGhlbWVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogQm9vbGVhbixcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZVNwaW5uZXIucHJvdG90eXBlLCBcIndyYXBwZWRcIiwgdm9pZCAwKTtcbk5lU3Bpbm5lciA9IF9fZGVjb3JhdGUoW2N1c3RvbUVsZW1lbnQoJ25lLXNwaW5uZXInKV0sIE5lU3Bpbm5lcik7XG5cbmV4cG9ydCB7IE5lU3Bpbm5lciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Bpbm5lci5qcy5tYXBcbiIsImltcG9ydHtub3RoaW5nIGFzIGl9ZnJvbVwiLi4vbGl0LWh0bWwuanNcIjtpbXBvcnR7QXN5bmNEaXJlY3RpdmUgYXMgdH1mcm9tXCIuLi9hc3luYy1kaXJlY3RpdmUuanNcIjtpbXBvcnR7ZGlyZWN0aXZlIGFzIHN9ZnJvbVwiLi4vZGlyZWN0aXZlLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9jb25zdCBlPSgpPT5uZXcgbztjbGFzcyBve31jb25zdCBoPW5ldyBXZWFrTWFwLG49cyhjbGFzcyBleHRlbmRzIHR7cmVuZGVyKHQpe3JldHVybiBpfXVwZGF0ZSh0LFtzXSl7dmFyIGU7Y29uc3Qgbz1zIT09dGhpcy5ZO3JldHVybiBvJiZ2b2lkIDAhPT10aGlzLlkmJnRoaXMucnQodm9pZCAwKSwob3x8dGhpcy5sdCE9PXRoaXMuY3QpJiYodGhpcy5ZPXMsdGhpcy5kdD1udWxsPT09KGU9dC5vcHRpb25zKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS5ob3N0LHRoaXMucnQodGhpcy5jdD10LmVsZW1lbnQpKSxpfXJ0KGkpe3ZhciB0O2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuWSl7Y29uc3Qgcz1udWxsIT09KHQ9dGhpcy5kdCkmJnZvaWQgMCE9PXQ/dDpnbG9iYWxUaGlzO2xldCBlPWguZ2V0KHMpO3ZvaWQgMD09PWUmJihlPW5ldyBXZWFrTWFwLGguc2V0KHMsZSkpLHZvaWQgMCE9PWUuZ2V0KHRoaXMuWSkmJnRoaXMuWS5jYWxsKHRoaXMuZHQsdm9pZCAwKSxlLnNldCh0aGlzLlksaSksdm9pZCAwIT09aSYmdGhpcy5ZLmNhbGwodGhpcy5kdCxpKX1lbHNlIHRoaXMuWS52YWx1ZT1pfWdldCBsdCgpe3ZhciBpLHQscztyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLlk/bnVsbD09PSh0PWguZ2V0KG51bGwhPT0oaT10aGlzLmR0KSYmdm9pZCAwIT09aT9pOmdsb2JhbFRoaXMpKXx8dm9pZCAwPT09dD92b2lkIDA6dC5nZXQodGhpcy5ZKTpudWxsPT09KHM9dGhpcy5ZKXx8dm9pZCAwPT09cz92b2lkIDA6cy52YWx1ZX1kaXNjb25uZWN0ZWQoKXt0aGlzLmx0PT09dGhpcy5jdCYmdGhpcy5ydCh2b2lkIDApfXJlY29ubmVjdGVkKCl7dGhpcy5ydCh0aGlzLmN0KX19KTtleHBvcnR7ZSBhcyBjcmVhdGVSZWYsbiBhcyByZWZ9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVmLmpzLm1hcFxuIiwiaW1wb3J0IHsgYyBhcyBjb21tb25TdHlsZXMsIF8gYXMgX19kZWNvcmF0ZSB9IGZyb20gJy4vYmFzZS5zdHlsZXMtMTFkMzkxODEuanMnO1xuaW1wb3J0IHsgY3NzLCBMaXRFbGVtZW50LCBodG1sIH0gZnJvbSAnbGl0JztcbmltcG9ydCB7IHByb3BlcnR5LCBzdGF0ZSwgY3VzdG9tRWxlbWVudCB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IGNsYXNzTWFwIH0gZnJvbSAnbGl0L2RpcmVjdGl2ZXMvY2xhc3MtbWFwLmpzJztcbmltcG9ydCB7IGNyZWF0ZVJlZiwgcmVmIH0gZnJvbSAnbGl0L2RpcmVjdGl2ZXMvcmVmLmpzJztcbmltcG9ydCB7IFMgYXMgU3Bpbm5lclR5cGUsIGEgYXMgU3Bpbm5lclRoZW1lVHlwZSB9IGZyb20gJy4vc3Bpbm5lci5tb2RlbHMtNTMxNDQ4Y2YuanMnO1xuXG5jb25zdCBiYXNlU3RhdHVzT3ZlcmxheSA9IGNzc2BcbiAgLm91dGVyLXdyYXBwZXIge1xuICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICB0b3A6IDA7XG4gICAgcmlnaHQ6IDA7XG4gICAgYm90dG9tOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IGF1dG87XG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBhdXRvO1xuICAgIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcbiAgICB6LWluZGV4OiA5MDAwO1xuICB9XG5cbiAgLm91dGVyLXdyYXBwZXIuaGlkZSB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuXG4gIC5iYWNrZHJvcCB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBsZWZ0OiAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICAvKiBzdHlsZWxpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29sb3ItZnVuY3Rpb24tbm90YXRpb24gKi9cbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDEwOSwgMTE1LCAxMjEsIDYwJSk7XG4gICAgei1pbmRleDogLTE7XG4gIH1cblxuICBkaWFsb2cge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICBwYWRkaW5nOiAwO1xuICB9XG5cbiAgLnNwaW5uZXItd3JhcHBlciB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGhlaWdodDogMTAwJTtcbiAgfVxuYDtcbmNvbnN0IHN0eWxlcyA9IFtiYXNlU3RhdHVzT3ZlcmxheSwgY29tbW9uU3R5bGVzXTtcblxuLy8gaW1wb3J0IHsgZmlyZSB9IGZyb20gJy4uLy4uL3V0aWxzL2V2ZW50cyc7XG4vKipcbiAqIEB0YWcgbmUtc3RhdHVzLW92ZXJsYXlcbiAqIEB0YWduYW1lIG5lLXN0YXR1cy1vdmVybGF5XG4gKlxuICovXG5sZXQgTmVTdGF0dXNPdmVybGF5ID0gY2xhc3MgTmVTdGF0dXNPdmVybGF5IGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgLy8gUHJvcGVydGllc1xuICAgIHRoaXMuX2RpYWxvZ0VsZW0gPSBjcmVhdGVSZWYoKTtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHNob3dpbmcgYW5kIGhpZGluZyBvZiB0aGUgb3ZlcmxheVxuICAgICAqL1xuICAgIHRoaXMuc2hvdyA9IHRydWU7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBkZWxheSBiZWZvcmUgdGhlIG92ZXJsYXkgaXMgcmVuZGVyZWRcbiAgICAgKi9cbiAgICB0aGlzLmRlbGF5ID0gMDtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHNpemUgb2YgdGhlIGxvYWRpbmcgaW5kaWNhdG9yXG4gICAgICovXG4gICAgdGhpcy5zaXplID0gU3Bpbm5lclR5cGUubWVkaXVtO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgdGhlbWUgb2YgdGhlIGxvYWRpbmcgaWNvblxuICAgICAqL1xuICAgIHRoaXMudGhlbWUgPSBTcGlubmVyVGhlbWVUeXBlLnJlZ3VsYXI7XG4gICAgdGhpcy5fc2hvd1NldFRpbWVvdXQgPSAwO1xuICAgIHRoaXMuX2lzU2hvd092ZXJMYXkgPSBmYWxzZTtcbiAgfVxuICAvLyBTdHlsZXNcbiAgc3RhdGljIGdldCBzdHlsZXMoKSB7XG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIGh0bWxgPGRpdlxuICAgICAgY2xhc3M9JHtjbGFzc01hcCh7XG4gICAgICAnb3V0ZXItd3JhcHBlcic6IHRydWUsXG4gICAgICBoaWRlOiAhdGhpcy5faXNTaG93T3ZlckxheVxuICAgIH0pfVxuICAgID5cbiAgICAgIDxkaXYgY2xhc3M9XCJiYWNrZHJvcFwiPjwvZGl2PlxuICAgICAgPGRpYWxvZyBhcmlhLW1vZGFsPVwidHJ1ZVwiICR7cmVmKHRoaXMuX2RpYWxvZ0VsZW0pfT5cbiAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItd3JhcHBlclwiPlxuICAgICAgICAgIDxuZS1zcGlubmVyXG4gICAgICAgICAgICAuc3RhdHVzPSR7dGhpcy5zdGF0dXN9XG4gICAgICAgICAgICB0aGVtZT0ke3RoaXMudGhlbWV9XG4gICAgICAgICAgICAuc2l6ZT0ke3RoaXMuc2l6ZX1cbiAgICAgICAgICA+PC9uZS1zcGlubmVyPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGlhbG9nPlxuICAgIDwvZGl2PmA7XG4gIH1cbiAgdXBkYXRlZChjaGFuZ2VkUHJvcHMpIHtcbiAgICBpZiAoY2hhbmdlZFByb3BzLmhhcygnc2hvdycpKSB7XG4gICAgICBpZiAodGhpcy5fc2hvd1NldFRpbWVvdXQpIHtcbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLl9zaG93U2V0VGltZW91dCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zaG93KSB7XG4gICAgICAgIGlmICh0aGlzLmRlbGF5ID4gMCkge1xuICAgICAgICAgIHRoaXMuX3Nob3dTZXRUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5faXNTaG93T3ZlckxheSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9kaWFsb2dFbGVtLnZhbHVlLnNob3coKTtcbiAgICAgICAgICB9LCB0aGlzLmRlbGF5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9pc1Nob3dPdmVyTGF5ID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLl9kaWFsb2dFbGVtLnZhbHVlLnNob3coKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faXNTaG93T3ZlckxheSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9kaWFsb2dFbGVtLnZhbHVlLmNsb3NlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBCb29sZWFuLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIE5lU3RhdHVzT3ZlcmxheS5wcm90b3R5cGUsIFwic2hvd1wiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBOdW1iZXIsXG4gIGF0dHJpYnV0ZTogJ3N0YXR1cy1kZWxheSdcbn0pXSwgTmVTdGF0dXNPdmVybGF5LnByb3RvdHlwZSwgXCJkZWxheVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBTdHJpbmcsXG4gIGF0dHJpYnV0ZTogJ3NpemUnXG59KV0sIE5lU3RhdHVzT3ZlcmxheS5wcm90b3R5cGUsIFwic2l6ZVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBTdHJpbmcsXG4gIGF0dHJpYnV0ZTogJ3N0YXR1cydcbn0pXSwgTmVTdGF0dXNPdmVybGF5LnByb3RvdHlwZSwgXCJzdGF0dXNcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogU3RyaW5nXG59KV0sIE5lU3RhdHVzT3ZlcmxheS5wcm90b3R5cGUsIFwidGhlbWVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3N0YXRlKCldLCBOZVN0YXR1c092ZXJsYXkucHJvdG90eXBlLCBcIl9zaG93U2V0VGltZW91dFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbc3RhdGUoKV0sIE5lU3RhdHVzT3ZlcmxheS5wcm90b3R5cGUsIFwiX2lzU2hvd092ZXJMYXlcIiwgdm9pZCAwKTtcbk5lU3RhdHVzT3ZlcmxheSA9IF9fZGVjb3JhdGUoW2N1c3RvbUVsZW1lbnQoJ25lLXN0YXR1cy1vdmVybGF5JyldLCBOZVN0YXR1c092ZXJsYXkpO1xuXG5leHBvcnQgeyBOZVN0YXR1c092ZXJsYXkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXR1cy1vdmVybGF5LmpzLm1hcFxuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGl0JztcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmNvbnN0IHRva2VucyA9IGNzc2BcbiAgKiB7XG4gIC0tbmUtdGFibGUtcGFkZGluZy12ZXJ0aWNhbDogdmFyKC0tbmUtcmVmLXNwYWNpbmctc21hbGwsIDAuNzVlbSk7XG4gIC0tbmUtdGFibGUtcGFkZGluZy1ob3Jpem9udGFsOiB2YXIoLS1uZS1yZWYtc3BhY2luZy1zbWFsbCwgMC43NWVtKTtcbiAgLS1uZS10YWJsZS1jb2xvci1ib3JkZXI6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTEwLCAjRTJFM0U0KTtcbiAgLS1uZS10YWJsZS1jb2xvci1jb2x1bW4taGVhZGVyLWJhY2tncm91bmQtZm9jdXM6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTA1LCAjRjBGN0ZGKTtcbiAgLS1uZS10YWJsZS1jb2xvci1jb2x1bW4taGVhZGVyLWJhY2tncm91bmQtaG92ZXI6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTA1LCAjRjBGN0ZGKTtcbiAgLS1uZS10YWJsZS1jb2xvci1jb2x1bW4taGVhZGVyLXRleHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTYwLCAjNTc1QzYxKTtcbiAgLS1uZS10YWJsZS1jb2xvci1jb2x1bW4taGVhZGVyLWljb24tc29ydGVkLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTkwLCAjMTYxNzE4KTtcbiAgLS1uZS10YWJsZS1jb2xvci1jb2x1bW4taGVhZGVyLWljb24tc29ydGVkLWhvdmVyOiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS02MCwgIzAwNkJENik7XG4gIC0tbmUtdGFibGUtY29sb3ItY29sdW1uLWhlYWRlci1pY29uLXNvcnRlZC1mb2N1czogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtNjAsICMwMDZCRDYpO1xuICAtLW5lLXRhYmxlLWNvbG9yLWNvbHVtbi1oZWFkZXItYm9yZGVyLWZvY3VzOiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS0yMCwgI0EzRDFGRik7XG4gIC0tbmUtdGFibGUtY29sdW1uLWhlYWRlci1pY29uOiB2YXIoLS1uZS1yZWYtc2l6aW5nLTA0LCAxZW0pO1xuICAtLW5lLXRhYmxlLWNvbHVtbi1oZWFkZXItZ2FwOiB2YXIoLS1uZS1yZWYtc3BhY2luZy14eC1zbWFsbCwgMC4yNWVtKTtcbiAgLS1uZS10YWJsZS1mb250LWZhbWlseS1jb2x1bW4taGVhZGVyOiB2YXIoLS1uZS1yZWYtZm9udC1mYW1pbHktb3Blbi1zYW5zLCBPcGVuIFNhbnMpO1xuICAtLW5lLXRhYmxlLWZvbnQtd2VpZ2h0LWNvbHVtbi1oZWFkZXI6IHZhcigtLW5lLXJlZi1mb250LXdlaWdodC1ib2xkLCBCb2xkKTtcbiAgLS1uZS10YWJsZS1mb250LXNpemUtY29sdW1uLWhlYWRlcjogdmFyKC0tbmUtcmVmLWZvbnQtc2l6ZS0wNCwgMC44NzVlbSk7XG4gIC0tbmUtdGFibGUtYm9yZGVyLXdpZHRoLWNvbHVtbi1oZWFkZXItZGVmYXVsdDogdmFyKC0tbmUtcmVmLWJvcmRlci13aWR0aC1zbWFsbCwgMXB4KTtcbiAgLS1uZS10YWJsZS1ib3JkZXItd2lkdGgtY29sdW1uLWhlYWRlci1mb2N1czogdmFyKC0tbmUtcmVmLWJvcmRlci13aWR0aC1sYXJnZSwgNHB4KTtcbn1cbmA7XG5cbmV4cG9ydCB7IHRva2VucyBhcyB0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10YWJsZS50b2tlbnMtNzFhMzkzZGQuanMubWFwXG4iLCJpbXBvcnQgeyBjIGFzIGNvbW1vblN0eWxlcywgXyBhcyBfX2RlY29yYXRlIH0gZnJvbSAnLi9iYXNlLnN0eWxlcy0xMWQzOTE4MS5qcyc7XG5pbXBvcnQgeyBjc3MsIExpdEVsZW1lbnQsIGh0bWwgfSBmcm9tICdsaXQnO1xuaW1wb3J0IHsgaWZEZWZpbmVkIH0gZnJvbSAnbGl0L2RpcmVjdGl2ZXMvaWYtZGVmaW5lZC5qcyc7XG5pbXBvcnQgeyBjdXN0b21FbGVtZW50IH0gZnJvbSAnbGl0L2RlY29yYXRvcnMuanMnO1xuaW1wb3J0IHsgdCBhcyB0b2tlbnMgfSBmcm9tICcuL3RhYmxlLnRva2Vucy03MWEzOTNkZC5qcyc7XG5cbmNvbnN0IGJhc2VMYWJlbCA9IGNzc2BcbiAgbGFiZWwge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGNvbG9yOiB2YXIoLS1uZS10YWJsZS1jb2xvci1jb2x1bW4taGVhZGVyLXRleHQpO1xuICAgIGZvbnQtZmFtaWx5OiB2YXIoLS1uZS10YWJsZS1mb250LWZhbWlseS1jb2x1bW4taGVhZGVyKTtcbiAgICBmb250LXdlaWdodDogdmFyKC0tbmUtdGFibGUtZm9udC13ZWlnaHQtY29sdW1uLWhlYWRlcik7XG4gICAgZm9udC1zaXplOiB2YXIoLS1uZS10YWJsZS1mb250LXNpemUtY29sdW1uLWhlYWRlcik7XG4gIH1cblxuICBsYWJlbDpmb2N1cyB7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgfVxuYDtcbmNvbnN0IHN0eWxlcyA9IFtiYXNlTGFiZWwsIGNvbW1vblN0eWxlcywgdG9rZW5zXTtcblxuLyoqXG4gKiBAdGFnIG5lLXRoZWFkZXJcbiAqIEB0YWduYW1lIG5lLXRoZWFkZXJcbiAqXG4gKi9cbmxldCBOZVRhYmxlSGVhZGVyID0gY2xhc3MgTmVUYWJsZUhlYWRlciBleHRlbmRzIExpdEVsZW1lbnQge1xuICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gaHRtbGA8bGFiZWwgaWQ9JHtpZkRlZmluZWQodGhpcy5pZCl9PlxuICAgICAgPHNsb3Q+PC9zbG90PlxuICAgIDwvbGFiZWw+YDtcbiAgfVxufTtcbk5lVGFibGVIZWFkZXIgPSBfX2RlY29yYXRlKFtjdXN0b21FbGVtZW50KCduZS10aGVhZGVyJyldLCBOZVRhYmxlSGVhZGVyKTtcblxuZXhwb3J0IHsgTmVUYWJsZUhlYWRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGFibGUtaGVhZGVyLmpzLm1hcFxuIiwiaW1wb3J0e2h0bWwgYXMgdCxzdmcgYXMgcn1mcm9tXCIuL2xpdC1odG1sLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9jb25zdCBlPVN5bWJvbC5mb3IoXCJcIiksbD10PT57aWYoKG51bGw9PXQ/dm9pZCAwOnQucik9PT1lKXJldHVybiBudWxsPT10P3ZvaWQgMDp0Ll8kbGl0U3RhdGljJH0sbz10PT4oe18kbGl0U3RhdGljJDp0LHI6ZX0pLGk9KHQsLi4ucik9Pih7XyRsaXRTdGF0aWMkOnIucmVkdWNlKCgocixlLGwpPT5yKyh0PT57aWYodm9pZCAwIT09dC5fJGxpdFN0YXRpYyQpcmV0dXJuIHQuXyRsaXRTdGF0aWMkO3Rocm93IEVycm9yKGBWYWx1ZSBwYXNzZWQgdG8gJ2xpdGVyYWwnIGZ1bmN0aW9uIG11c3QgYmUgYSAnbGl0ZXJhbCcgcmVzdWx0OiAke3R9LiBVc2UgJ3Vuc2FmZVN0YXRpYycgdG8gcGFzcyBub24tbGl0ZXJhbCB2YWx1ZXMsIGJ1dFxcbiAgICAgICAgICAgIHRha2UgY2FyZSB0byBlbnN1cmUgcGFnZSBzZWN1cml0eS5gKX0pKGUpK3RbbCsxXSksdFswXSkscjplfSkscz1uZXcgTWFwLGE9dD0+KHIsLi4uZSk9Pntjb25zdCBvPWUubGVuZ3RoO2xldCBpLGE7Y29uc3Qgbj1bXSx1PVtdO2xldCBjLCQ9MCxmPSExO2Zvcig7JDxvOyl7Zm9yKGM9clskXTskPG8mJnZvaWQgMCE9PShhPWVbJF0saT1sKGEpKTspYys9aStyWysrJF0sZj0hMDt1LnB1c2goYSksbi5wdXNoKGMpLCQrK31pZigkPT09byYmbi5wdXNoKHJbb10pLGYpe2NvbnN0IHQ9bi5qb2luKFwiJCRsaXQkJFwiKTt2b2lkIDA9PT0ocj1zLmdldCh0KSkmJihuLnJhdz1uLHMuc2V0KHQscj1uKSksZT11fXJldHVybiB0KHIsLi4uZSl9LG49YSh0KSx1PWEocik7ZXhwb3J0e24gYXMgaHRtbCxpIGFzIGxpdGVyYWwsdSBhcyBzdmcsbyBhcyB1bnNhZmVTdGF0aWMsYSBhcyB3aXRoU3RhdGljfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXRpYy5qcy5tYXBcbiIsImltcG9ydCB7IGMgYXMgY29tbW9uU3R5bGVzLCBfIGFzIF9fZGVjb3JhdGUgfSBmcm9tICcuL2Jhc2Uuc3R5bGVzLTExZDM5MTgxLmpzJztcbmltcG9ydCB7IGNzcywgTGl0RWxlbWVudCwgaHRtbCB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBodG1sIGFzIGh0bWwkMSB9IGZyb20gJ2xpdC1odG1sL3N0YXRpYy5qcyc7XG5pbXBvcnQgeyBwcm9wZXJ0eSwgcXVlcnlBc3NpZ25lZE5vZGVzLCBzdGF0ZSwgY3VzdG9tRWxlbWVudCB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IHQgYXMgdG9rZW5zIH0gZnJvbSAnLi90YWJsZS50b2tlbnMtNzFhMzkzZGQuanMnO1xuXG5jb25zdCBiYXNlVGFibGUgPSBjc3NgXG4gIDpob3N0IHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIH1cblxuICB0YWJsZSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cblxuICB0ZCxcbiAgdGgge1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgcGFkZGluZzogdmFyKC0tbmUtdGFibGUtcGFkZGluZy12ZXJ0aWNhbCkgdmFyKC0tbmUtdGFibGUtcGFkZGluZy1ob3Jpem9udGFsKTtcbiAgICBmb250LXNpemU6IHZhcigtLW5lLXRhYmxlLWZvbnQtc2l6ZS1jb2x1bW4taGVhZGVyKTtcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdmFyKC0tbmUtdGFibGUtY29sb3ItYm9yZGVyKTtcbiAgfVxuXG4gIHRoIHtcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICB9XG5cbiAgdGJvZHkgdHI6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLXRhYmxlLWNvbG9yLWNvbHVtbi1oZWFkZXItYmFja2dyb3VuZC1ob3Zlcik7XG4gIH1cblxuICB0Ym9keSB0cjpoYXMoOmZvY3VzKSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmUtdGFibGUtY29sb3ItY29sdW1uLWhlYWRlci1iYWNrZ3JvdW5kLWZvY3VzKTtcbiAgfVxuYDtcbmNvbnN0IHN0eWxlcyA9IFtjb21tb25TdHlsZXMsIGJhc2VUYWJsZSwgdG9rZW5zXTtcblxuLyoqXG4gKiBAdGFnIG5lLXRhYmxlXG4gKiBAdGFnbmFtZSBuZS10YWJsZVxuICovXG5sZXQgTmVUYWJsZSA9IGNsYXNzIE5lVGFibGUgZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLl9ldmVudHMgPSBbXTtcbiAgICB0aGlzLmRhdGEgPSBbXTtcbiAgICB0aGlzLl9oYXNIZWFkVGVtcGxhdGUgPSBmYWxzZTtcbiAgICB0aGlzLl9oYXNSb3dUZW1wbGF0ZSA9IGZhbHNlO1xuICB9XG4gIHN0YXRpYyBnZXQgc3R5bGVzKCkge1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH1cbiAgYWRkRXZlbnRMaXN0ZW5lcihcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHR5cGUsXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycywgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBsaXN0ZW5lciwgb3B0aW9ucykge1xuICAgIGlmICh0aGlzLl9ldmVudHMuaW5kZXhPZih0eXBlKSA9PT0gLTEpIHtcbiAgICAgIHRoaXMuX2V2ZW50cy5wdXNoKHR5cGUpO1xuICAgIH1cbiAgICBzdXBlci5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKTtcbiAgfVxuICBfb25IZWFkVGVtcGxhdGVTbG90Q2hhbmdlKCkge1xuICAgIHRoaXMuX2hhc0hlYWRUZW1wbGF0ZSA9IHRoaXMuX2hlYWRUZW1wbGF0ZS5sZW5ndGggPiAwO1xuICB9XG4gIF9vblJvd1RlbXBsYXRlU2xvdENoYW5nZSgpIHtcbiAgICB0aGlzLl9oYXNSb3dUZW1wbGF0ZSA9IHRoaXMuX3Jvd1RlbXBsYXRlLmxlbmd0aCA+IDA7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBodG1sYFxuICAgICAgPHNsb3RcbiAgICAgICAgbmFtZT1cImhlYWRcIlxuICAgICAgICBAc2xvdGNoYW5nZT0keygpID0+IHRoaXMuX29uSGVhZFRlbXBsYXRlU2xvdENoYW5nZSgpfVxuICAgICAgPjwvc2xvdD5cbiAgICAgIDxzbG90XG4gICAgICAgIG5hbWU9XCJyb3dcIlxuICAgICAgICBAc2xvdGNoYW5nZT0keygpID0+IHRoaXMuX29uUm93VGVtcGxhdGVTbG90Q2hhbmdlKCl9XG4gICAgICA+PC9zbG90PlxuICAgICAgPHRhYmxlIHBhcnQ9XCJ0YWJsZVwiPlxuICAgICAgICA8dGhlYWQ+XG4gICAgICAgICAgPHRyPlxuICAgICAgICAgICAgJHt0aGlzLl9yZW5kZXJIZWFkRGF0YSgpfVxuICAgICAgICAgIDwvdHI+XG4gICAgICAgIDwvdGhlYWQ+XG4gICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAke3RoaXMuZGF0YS5tYXAoKHJvd0RhdGFPYmosIGluZGV4KSA9PiBodG1sYFxuICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgJHt0aGlzLl9yZW5kZXJSb3dEYXRhKHJvd0RhdGFPYmosIGluZGV4KX1cbiAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgIGApfVxuICAgICAgICA8L3Rib2R5PlxuICAgICAgPC90YWJsZT5cbiAgICBgO1xuICB9XG4gIF9yZW5kZXJIZWFkRGF0YSgpIHtcbiAgICBpZiAodGhpcy5faGFzSGVhZFRlbXBsYXRlKSB7XG4gICAgICBjb25zdCBodG1sVGVtcGxhdGUgPSB0aGlzLl9oZWFkVGVtcGxhdGVbMF0uY29udGVudDtcbiAgICAgIHJldHVybiBBcnJheS5mcm9tKGh0bWxUZW1wbGF0ZS5jaGlsZHJlbikubWFwKCh0ZW1wbGF0ZUVsZW0sIGNvbHVtbikgPT4ge1xuICAgICAgICBjb25zdCBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0ZW1wbGF0ZUVsZW0udGFnTmFtZSk7XG4gICAgICAgIHRoaXMuX2JpbmRIZWFkZXJFdmVudHMoZWxlbSwgY29sdW1uKTtcbiAgICAgICAgdGhpcy5fYmluZEhlYWRlcihlbGVtLCB0ZW1wbGF0ZUVsZW0pO1xuICAgICAgICBjb25zdCB3aWR0aCA9IHRlbXBsYXRlRWxlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtd2lkdGgnKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuICAgICAgICBpZiAod2lkdGgpIHtcbiAgICAgICAgICByZXR1cm4gaHRtbCQxYDx0aCB3aWR0aD1cIiR7d2lkdGh9XCI+JHtlbGVtfTwvdGg+YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaHRtbCQxYDx0aD4ke2VsZW19PC90aD5gO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIF9yZW5kZXJSb3dEYXRhKHJvd0RhdGFPYmosIHJvdykge1xuICAgIGlmICh0aGlzLl9oYXNSb3dUZW1wbGF0ZSkge1xuICAgICAgY29uc3QgaHRtbFRlbXBsYXRlID0gdGhpcy5fcm93VGVtcGxhdGVbMF0uY29udGVudDtcbiAgICAgIHJldHVybiBBcnJheS5mcm9tKGh0bWxUZW1wbGF0ZS5jaGlsZHJlbikubWFwKCh0ZW1wbGF0ZUVsZW0sIGNvbHVtbikgPT4ge1xuICAgICAgICBjb25zdCBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0ZW1wbGF0ZUVsZW0udGFnTmFtZSk7XG4gICAgICAgIHRoaXMuX2JpbmRFdmVudHMoZWxlbSwgcm93LCBjb2x1bW4sIHJvd0RhdGFPYmopO1xuICAgICAgICB0aGlzLl9iaW5kQ29udHJvbChlbGVtLCB0ZW1wbGF0ZUVsZW0sIHJvd0RhdGFPYmopO1xuICAgICAgICByZXR1cm4gaHRtbCQxYDx0ZD4ke2VsZW19PC90ZD5gO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIF9iaW5kRXZlbnRzKGVsZW0sIHJvdywgY29sdW1uLCByb3dEYXRhT2JqKSB7XG4gICAgZm9yIChjb25zdCBldmVudFR5cGUgb2YgdGhpcy5fZXZlbnRzKSB7XG4gICAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBldiA9PiB7XG4gICAgICAgIC8vIENhcHR1cmUgZXZlbnQgYW5kIGFkZCByb3cvY29sdW1uIGNvbnRleHQuXG4gICAgICAgIGlmICghKGV2IGluc3RhbmNlb2YgQ3VzdG9tRXZlbnQgJiYgZXYuZGV0YWlsICYmXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgdHlwZW9mIGV2LmRldGFpbC5yb3cgPT09ICdudW1iZXInICYmXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgdHlwZW9mIGV2LmRldGFpbC5jb2x1bW4gPT09ICdudW1iZXInKSkge1xuICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgY29uc3QgZGV0YWlsID0ge1xuICAgICAgICAgICAgcm93LFxuICAgICAgICAgICAgY29sdW1uLFxuICAgICAgICAgICAgZGF0YTogSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShyb3dEYXRhT2JqKSksXG4gICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldlxuICAgICAgICAgIH07XG4gICAgICAgICAgY29uc3QgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoZXZlbnRUeXBlLCB7XG4gICAgICAgICAgICBjb21wb3NlZDogdHJ1ZSxcbiAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICBkZXRhaWxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBlbGVtLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgX2JpbmRDb250cm9sKGVsZW0sIHRlbXBsYXRlRWxlbSwgcm93RGF0YU9iaikge1xuICAgIGNvbnN0IHJlZ2V4MSA9IC9ee3suK319JC87XG4gICAgLy8gU2hvdWxkIGJlIHJlcGxhY2VkIGJ5IHRoZSBzcHJlYWQgb3BlcmF0b3I6IGh0dHBzOi8vb3Blbi13Yy5vcmcvYmxvZy91cGRhdGluZy10by1saXQtMi0wLyNvcGVuLXdjbGl0LWhlbHBlcnNuZXh0XG4gICAgdGVtcGxhdGVFbGVtLmdldEF0dHJpYnV0ZU5hbWVzKCkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgY29uc3QgcHJvcCA9IHRlbXBsYXRlRWxlbS5nZXRBdHRyaWJ1dGUoa2V5KTtcbiAgICAgIGlmIChwcm9wKSB7XG4gICAgICAgIGlmIChrZXkuc3RhcnRzV2l0aCgnLicpKSB7XG4gICAgICAgICAgaWYgKHByb3AubWF0Y2gocmVnZXgxKSkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXNzaWdubWVudCwgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzLCBuby1wYXJhbS1yZWFzc2lnbiwgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgZWxlbVtrZXkuc3Vic3RyaW5nKDEpXSA9IHJvd0RhdGFPYmpbcHJvcC5yZXBsYWNlKC9ee3svLCAnJykucmVwbGFjZSgvfX0kLywgJycpXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzcywgbm8tcGFyYW0tcmVhc3NpZ24sIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgIGVsZW1ba2V5LnN1YnN0cmluZygxKV0gPSBwcm9wO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwcm9wLm1hdGNoKHJlZ2V4MSkpIHtcbiAgICAgICAgICBlbGVtLnNldEF0dHJpYnV0ZShrZXksXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXJndW1lbnQsIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcywgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgIHJvd0RhdGFPYmpbcHJvcC5yZXBsYWNlKC9ee3svLCAnJykucmVwbGFjZSgvfX0kLywgJycpXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWxlbS5zZXRBdHRyaWJ1dGUoa2V5LCBwcm9wKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICh0ZW1wbGF0ZUVsZW0udGV4dENvbnRlbnQ/Lm1hdGNoKHJlZ2V4MSkpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFzc2lnbm1lbnQsIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcywgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSwgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIGVsZW0udGV4dENvbnRlbnQgPSByb3dEYXRhT2JqW3RlbXBsYXRlRWxlbS50ZXh0Q29udGVudC5yZXBsYWNlKC9ee3svLCAnJykucmVwbGFjZSgvfX0kLywgJycpXTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBlbGVtLnRleHRDb250ZW50ID0gdGVtcGxhdGVFbGVtLnRleHRDb250ZW50O1xuICAgIH1cbiAgfVxuICBfYmluZEhlYWRlckV2ZW50cyhlbGVtLCBjb2x1bW4pIHtcbiAgICBmb3IgKGNvbnN0IGV2ZW50VHlwZSBvZiB0aGlzLl9ldmVudHMpIHtcbiAgICAgIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGV2ID0+IHtcbiAgICAgICAgLy8gQ2FwdHVyZSBldmVudCBhbmQgYWRkIHJvdy9jb2x1bW4gY29udGV4dC5cbiAgICAgICAgaWYgKCEoZXYgaW5zdGFuY2VvZiBDdXN0b21FdmVudCAmJiBldi5kZXRhaWwgJiZcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgICB0eXBlb2YgZXYuZGV0YWlsLmNvbHVtbiA9PT0gJ251bWJlcicpKSB7XG4gICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBjb25zdCBkZXRhaWwgPSB7XG4gICAgICAgICAgICBjb2x1bW4sXG4gICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldlxuICAgICAgICAgIH07XG4gICAgICAgICAgY29uc3QgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoZXZlbnRUeXBlLCB7XG4gICAgICAgICAgICBjb21wb3NlZDogdHJ1ZSxcbiAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICBkZXRhaWxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBlbGVtLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgX2JpbmRIZWFkZXIoZWxlbSwgdGVtcGxhdGVFbGVtKSB7XG4gICAgLy8gU2hvdWxkIGJlIHJlcGxhY2VkIGJ5IHRoZSBzcHJlYWQgb3BlcmF0b3I6IGh0dHBzOi8vb3Blbi13Yy5vcmcvYmxvZy91cGRhdGluZy10by1saXQtMi0wLyNvcGVuLXdjbGl0LWhlbHBlcnNuZXh0XG4gICAgdGVtcGxhdGVFbGVtLmdldEF0dHJpYnV0ZU5hbWVzKCkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgY29uc3QgcHJvcCA9IHRlbXBsYXRlRWxlbS5nZXRBdHRyaWJ1dGUoa2V5KTtcbiAgICAgIGlmIChwcm9wKSB7XG4gICAgICAgIGlmIChrZXkuc3RhcnRzV2l0aCgnLicpKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzcywgbm8tcGFyYW0tcmVhc3NpZ24sIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICBlbGVtW2tleS5zdWJzdHJpbmcoMSldID0gcHJvcDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbGVtLnNldEF0dHJpYnV0ZShrZXksIHByb3ApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgZWxlbS5pbm5lckhUTUwgPSB0ZW1wbGF0ZUVsZW0uaW5uZXJIVE1MO1xuICB9XG59O1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBBcnJheSxcbiAgcmVmbGVjdDogZmFsc2Vcbn0pXSwgTmVUYWJsZS5wcm90b3R5cGUsIFwiZGF0YVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcXVlcnlBc3NpZ25lZE5vZGVzKHtcbiAgc2xvdDogJ2hlYWQnXG59KV0sIE5lVGFibGUucHJvdG90eXBlLCBcIl9oZWFkVGVtcGxhdGVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3N0YXRlKCldLCBOZVRhYmxlLnByb3RvdHlwZSwgXCJfaGFzSGVhZFRlbXBsYXRlXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtxdWVyeUFzc2lnbmVkTm9kZXMoe1xuICBzbG90OiAncm93J1xufSldLCBOZVRhYmxlLnByb3RvdHlwZSwgXCJfcm93VGVtcGxhdGVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3N0YXRlKCldLCBOZVRhYmxlLnByb3RvdHlwZSwgXCJfaGFzUm93VGVtcGxhdGVcIiwgdm9pZCAwKTtcbk5lVGFibGUgPSBfX2RlY29yYXRlKFtjdXN0b21FbGVtZW50KCduZS10YWJsZScpXSwgTmVUYWJsZSk7XG5cbmV4cG9ydCB7IE5lVGFibGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRhYmxlLmpzLm1hcFxuIiwiaW1wb3J0ICcuLi9jb21tb24uY29uZmlndXJlJztcbmltcG9ydCB7IFNjb3BlZEVsZW1lbnRzTWl4aW4gfSBmcm9tICdAb3Blbi13Yy9zY29wZWQtZWxlbWVudHMnO1xuaW1wb3J0IHsgQ1NTUmVzdWx0LCBodG1sLCBMaXRFbGVtZW50IH0gZnJvbSAnbGl0JztcbmltcG9ydCB7IGN1c3RvbUVsZW1lbnQgfSBmcm9tICdsaXQvZGVjb3JhdG9ycy5qcyc7XG5pbXBvcnQgQ29udGV4dFNlcnZpY2UgZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC5zZXJ2aWNlJztcbmltcG9ydCBEYXRhU2VydmljZSBmcm9tICcuLi9zZXJ2aWNlcy9kYXRhLnNlcnZpY2UnO1xuaW1wb3J0IEV2ZW50U2VydmljZSBmcm9tICcuLi9zZXJ2aWNlcy9ldmVudC5zZXJ2aWNlJztcbmltcG9ydCBQcm9jZXNzZXNBcGlTZXJ2aWNlIGZyb20gJy4uL3NlcnZpY2VzL3Byb2Nlc3Nlcy1hcGkuc2VydmljZSc7XG5pbXBvcnQgeyBzdHlsZXMgfSBmcm9tICcuL2FwcC5zdHlsZXMnO1xuaW1wb3J0IHsgUGlIZWFkZXIgfSBmcm9tICcuL3BpLWhlYWRlci9waS1oZWFkZXInO1xuaW1wb3J0IHsgUGlMaXN0Q29tcG9uZW50IH0gZnJvbSAnLi9waS1saXN0LWNvbXBvbmVudC9waS1saXN0LWNvbXBvbmVudCc7XG5pbXBvcnQgJ0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvY29tcG9uZW50cy9idXR0b24nO1xuaW1wb3J0ICdAbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzLWFscGhhL2NvbXBvbmVudHMvbGFiZWwnO1xuaW1wb3J0ICdAbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzLWFscGhhL2NvbXBvbmVudHMvc3Bpbm5lcic7XG5pbXBvcnQgJ0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMtYWxwaGEvY29tcG9uZW50cy9zdGF0dXMtb3ZlcmxheSc7XG5pbXBvcnQgJ0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMtYWxwaGEvY29tcG9uZW50cy90YWJsZS1oZWFkZXInO1xuaW1wb3J0ICdAbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzLWFscGhhL2NvbXBvbmVudHMvdGFibGUnO1xuXG5AY3VzdG9tRWxlbWVudCgncGktYnBtbi1saXN0JylcbmV4cG9ydCBjbGFzcyBBcHBDb21wb25lbnQgZXh0ZW5kcyBTY29wZWRFbGVtZW50c01peGluKExpdEVsZW1lbnQpIHtcbiAgc3RhdGljIGdldCBzY29wZWRFbGVtZW50cygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgJ3BpLWxpc3QtY29tcG9uZW50JzogUGlMaXN0Q29tcG9uZW50LFxuICAgICAgJ3BpLWhlYWRlcic6IFBpSGVhZGVyLFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0IHN0eWxlcygpOiBDU1NSZXN1bHRbXSB7XG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICAvLyAhISEgT3JkZXIgaXMgaW1wb3J0YW50IHJlc2V0IGluIG9yZGVyIG9mIHNlcnZpY2UgaW50ZXJuYWwgZGVwZW5kZW5jaWVzICEhIVxuICAgIERhdGFTZXJ2aWNlLnJlc2V0SW5zdGFuY2UoKTtcbiAgICBQcm9jZXNzZXNBcGlTZXJ2aWNlLnJlc2V0SW5zdGFuY2UoKTtcbiAgICBDb250ZXh0U2VydmljZS5yZXNldEluc3RhbmNlKCk7XG4gICAgRXZlbnRTZXJ2aWNlLnJlc2V0SW5zdGFuY2UoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gaHRtbGAgPHBpLWhlYWRlcj48L3BpLWhlYWRlcj5cbiAgICAgIDxwaS1saXN0LWNvbXBvbmVudD48L3BpLWxpc3QtY29tcG9uZW50PmA7XG4gIH1cbn1cblxuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgSFRNTEVsZW1lbnRUYWdOYW1lTWFwIHtcbiAgICAncGktYnBtbi1saXN0JzogQXBwQ29tcG9uZW50O1xuICB9XG59XG4iXSwibmFtZXMiOlsiaW5Qcm9ncmVzcyIsImRhdGFXZWJwYWNrUHJlZml4IiwiaCIsImIiLCJjIiwibGVuZ3RoIiwiZG9uZSIsInZhbHVlIiwiayIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY2FsbCIsIm5leHQiLCJtIiwiQXJyYXkiLCJhIiwicHVzaCIsIm4iLCJPYmplY3QiLCJjcmVhdGUiLCJwcm90b3R5cGUiLCJ0IiwicSIsImdsb2JhbFRoaXMiLCJ3aW5kb3ciLCJzZWxmIiwiZyIsIk1hdGgiLCJFcnJvciIsInAiLCJ0aGlzIiwiciIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJkIiwiZSIsInNldFByb3RvdHlwZU9mIiwiRnVuY3Rpb24iLCJhcHBseSIsInUiLCJ3IiwiX19wcm90b19fIiwiVHlwZUVycm9yIiwieCIsIlNoYWRvd1Jvb3QiLCJjcmVhdGVFbGVtZW50IiwiTCIsInkiLCJIVE1MRWxlbWVudCIsIkEiLCJjdXN0b21FbGVtZW50cyIsImRlZmluZSIsIkIiLCJnZXQiLCJDIiwiRCIsIldlYWtNYXAiLCJFIiwiRiIsIkciLCJDdXN0b21FbGVtZW50UmVnaXN0cnkiLCJsIiwiTWFwIiwibyIsImkiLCJ0b0xvd2VyQ2FzZSIsImoiLCJET01FeGNlcHRpb24iLCJhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2siLCJTZXQiLCJvYnNlcnZlZEF0dHJpYnV0ZXMiLCJIIiwiY29ubmVjdGVkQ2FsbGJhY2siLCJkaXNjb25uZWN0ZWRDYWxsYmFjayIsImFkb3B0ZWRDYWxsYmFjayIsImZvcm1Bc3NvY2lhdGVkIiwiZm9ybUFzc29jaWF0ZWRDYWxsYmFjayIsImZvcm1EaXNhYmxlZENhbGxiYWNrIiwiZm9ybVJlc2V0Q2FsbGJhY2siLCJmb3JtU3RhdGVSZXN0b3JlQ2FsbGJhY2siLCJzZXQiLCJJIiwicyIsImRlbGV0ZSIsIkoiLCJyZXNvbHZlIiwidXBncmFkZSIsIksiLCJhcmd1bWVudHMiLCJwb3AiLCJ3aGVuRGVmaW5lZCIsIlByb21pc2UiLCJwcm9taXNlIiwiYWRkIiwiY29uc3RydWN0b3IiLCJnZXRSb290Tm9kZSIsImRvY3VtZW50IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwic2l6ZSIsInNldEF0dHJpYnV0ZSIsImYiLCJoYXMiLCJ6IiwiZ2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwidG9nZ2xlQXR0cmlidXRlIiwiTSIsImdldFByb3RvdHlwZU9mIiwiZm9yRWFjaCIsImhhc0F0dHJpYnV0ZSIsImlzQ29ubmVjdGVkIiwiTiIsIkVsZW1lbnQiLCJhdHRhY2hTaGFkb3ciLCJPIiwiUCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImFzc2lnbiIsIndyaXRhYmxlIiwiRWxlbWVudEludGVybmFscyIsInNldEZvcm1WYWx1ZSIsIlEiLCJSIiwiYXR0YWNoSW50ZXJuYWxzIiwiY29uY2F0IiwiUmFkaW9Ob2RlTGlzdCIsIlMiLCJUIiwiVSIsImRlZmluZVByb3BlcnRpZXMiLCJWIiwiZmluZCIsImNoZWNrZWQiLCJIVE1MRm9ybUNvbnRyb2xzQ29sbGVjdGlvbiIsIm5hbWVkSXRlbSIsIlciLCJIVE1MRm9ybUVsZW1lbnQiLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImpvaW4iLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJnZXRUYXJnZXQiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIndlYnBhY2tFbXB0eUFzeW5jQ29udGV4dCIsInJlcSIsInRoZW4iLCJjb2RlIiwia2V5cyIsIlNoYWR5Q1NTIiwibmF0aXZlU2hhZG93IiwiRG9jdW1lbnQiLCJDU1NTdHlsZVNoZWV0IiwiXyRjc3NSZXN1bHQkIiwicmVwbGFjZVN5bmMiLCJyZWR1Y2UiLCJhZG9wdGVkU3R5bGVTaGVldHMiLCJsaXROb25jZSIsInRleHRDb250ZW50IiwiY3NzUnVsZXMiLCJ0cnVzdGVkVHlwZXMiLCJjcmVhdGVQb2xpY3kiLCJjcmVhdGVIVE1MIiwicmFuZG9tIiwic2xpY2UiLCJjcmVhdGVDb21tZW50IiwiaXNBcnJheSIsInYiLCJfIiwiUmVnRXhwIiwiJCIsIl8kbGl0VHlwZSQiLCJzdHJpbmdzIiwidmFsdWVzIiwiZm9yIiwiY3JlYXRlVHJlZVdhbGtlciIsImxhc3RJbmRleCIsImV4ZWMiLCJ0ZXN0Iiwic3RhcnRzV2l0aCIsImhhc093blByb3BlcnR5IiwicGFydHMiLCJlbCIsImN1cnJlbnROb2RlIiwiYXBwZW5kIiwiY2hpbGROb2RlcyIsIm5leHROb2RlIiwibm9kZVR5cGUiLCJoYXNBdHRyaWJ1dGVzIiwiZ2V0QXR0cmlidXRlTmFtZXMiLCJlbmRzV2l0aCIsInNwbGl0IiwidHlwZSIsIm5hbWUiLCJjdG9yIiwidGFnTmFtZSIsImVtcHR5U2NyaXB0IiwiaW5kZXhPZiIsInN0YXRpYyIsImlubmVySFRNTCIsIl8kQ28iLCJfJENsIiwiXyRsaXREaXJlY3RpdmUkIiwiXyRBTyIsIl8kQVQiLCJfJEFTIiwiXyRBTiIsIl8kQUQiLCJfJEFNIiwiXyRBVSIsImNyZWF0aW9uU2NvcGUiLCJpbXBvcnROb2RlIiwibmV4dFNpYmxpbmciLCJfJEFJIiwiXyRBSCIsIl8kQUEiLCJfJEFCIiwiXyRDbSIsInN0YXJ0Tm9kZSIsImVuZE5vZGUiLCJfJEFSIiwiaW5zZXJ0QmVmb3JlIiwiXyRBQyIsIl8kQVAiLCJzZXRDb25uZWN0ZWQiLCJmaWxsIiwiU3RyaW5nIiwic3VwZXIiLCJjYXB0dXJlIiwib25jZSIsInBhc3NpdmUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZUV2ZW50IiwiaG9zdCIsIloiLCJsaXRIdG1sUG9seWZpbGxTdXBwb3J0IiwibGl0SHRtbFZlcnNpb25zIiwicmVuZGVyQmVmb3JlIiwiXyRsaXRQYXJ0JCIsInJlYWN0aXZlRWxlbWVudFBvbHlmaWxsU3VwcG9ydCIsInRvQXR0cmlidXRlIiwiQm9vbGVhbiIsImZyb21BdHRyaWJ1dGUiLCJOdW1iZXIiLCJwYXJzZSIsImF0dHJpYnV0ZSIsImNvbnZlcnRlciIsInJlZmxlY3QiLCJoYXNDaGFuZ2VkIiwiXyRFaSIsImlzVXBkYXRlUGVuZGluZyIsImhhc1VwZGF0ZWQiLCJfJEVsIiwiZmluYWxpemUiLCJlbGVtZW50UHJvcGVydGllcyIsIl8kRXAiLCJfJEV2Iiwic3RhdGUiLCJub0FjY2Vzc29yIiwiZ2V0UHJvcGVydHlEZXNjcmlwdG9yIiwicmVxdWVzdFVwZGF0ZSIsImZpbmFsaXplZCIsInByb3BlcnRpZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiY3JlYXRlUHJvcGVydHkiLCJlbGVtZW50U3R5bGVzIiwiZmluYWxpemVTdHlsZXMiLCJzdHlsZXMiLCJmbGF0IiwicmV2ZXJzZSIsInVuc2hpZnQiLCJfJEVfIiwiZW5hYmxlVXBkYXRpbmciLCJfJEFMIiwiXyRFZyIsImFkZENvbnRyb2xsZXIiLCJfJEVTIiwicmVuZGVyUm9vdCIsImhvc3RDb25uZWN0ZWQiLCJyZW1vdmVDb250cm9sbGVyIiwiY3JlYXRlUmVuZGVyUm9vdCIsInNoYWRvd1Jvb3QiLCJzaGFkb3dSb290T3B0aW9ucyIsImhvc3REaXNjb25uZWN0ZWQiLCJfJEFLIiwiXyRFTyIsImdldFByb3BlcnR5T3B0aW9ucyIsIl8kRUMiLCJfJEVqIiwiYXN5bmMiLCJyZWplY3QiLCJzY2hlZHVsZVVwZGF0ZSIsInBlcmZvcm1VcGRhdGUiLCJzaG91bGRVcGRhdGUiLCJ3aWxsVXBkYXRlIiwiaG9zdFVwZGF0ZSIsIl8kRWsiLCJfJEFFIiwiaG9zdFVwZGF0ZWQiLCJmaXJzdFVwZGF0ZWQiLCJ1cGRhdGVkIiwidXBkYXRlQ29tcGxldGUiLCJnZXRVcGRhdGVDb21wbGV0ZSIsIm1vZGUiLCJSZWFjdGl2ZUVsZW1lbnQiLCJyZWFjdGl2ZUVsZW1lbnRWZXJzaW9ucyIsInJlbmRlck9wdGlvbnMiLCJfJERvIiwicmVuZGVyIiwiXyRsaXRFbGVtZW50JCIsImxpdEVsZW1lbnRIeWRyYXRlU3VwcG9ydCIsIkxpdEVsZW1lbnQiLCJsaXRFbGVtZW50UG9seWZpbGxTdXBwb3J0IiwibGl0RWxlbWVudFZlcnNpb25zIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkZWZpbml0aW9uIiwia2V5IiwiY2h1bmtJZCIsImFsbCIsInByb21pc2VzIiwicHJvcCIsInVybCIsInNjcmlwdCIsIm5lZWRBdHRhY2giLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJjaGFyc2V0IiwidGltZW91dCIsIm5jIiwic3JjIiwib25TY3JpcHRDb21wbGV0ZSIsInByZXYiLCJldmVudCIsIm9uZXJyb3IiLCJvbmxvYWQiLCJjbGVhclRpbWVvdXQiLCJkb25lRm5zIiwiZm4iLCJzZXRUaW1lb3V0IiwiYmluZCIsInRvU3RyaW5nVGFnIiwiaW5zdGFsbGVkQ2h1bmtzIiwiaW5zdGFsbGVkQ2h1bmtEYXRhIiwiZXJyb3IiLCJlcnJvclR5cGUiLCJyZWFsU3JjIiwibWVzc2FnZSIsInJlcXVlc3QiLCJ3ZWJwYWNrSnNvbnBDYWxsYmFjayIsInBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uIiwiY2h1bmtJZHMiLCJtb3JlTW9kdWxlcyIsInJ1bnRpbWUiLCJzb21lIiwiY2h1bmtMb2FkaW5nR2xvYmFsIiwiam9pblN0cmluZ3NBbmRWYWx1ZXMiLCJ2YWx1ZU9yZGVyIiwidGVtcGxhdGUiLCJpc1N0clRhZ2dlZCIsInZhbCIsIkRlZmVycmVkIiwic2V0dGxlZCIsIl9yZXNvbHZlIiwiX3JlamVjdCIsImhsIiwiSEFTSF9ERUxJTUlURVIiLCJIVE1MX1BSRUZJWCIsIlNUUklOR19QUkVGSVgiLCJnZW5lcmF0ZU1zZ0lkIiwiaXNIdG1sVGFnZ2VkIiwic3RyIiwidDAiLCJ2MCIsInQxIiwidjEiLCJ0MiIsInYyIiwidDMiLCJ2MyIsImNoYXJDb2RlQXQiLCJmbnYxYTY0IiwiZXhwcmVzc2lvbk9yZGVycyIsImhhc2hDYWNoZSIsInJ1bnRpbWVNc2ciLCJ0ZW1wbGF0ZXMiLCJfYSIsImdlbmVyYXRlSWQiLCJsb2NhbGl6ZWQiLCJvcmRlciIsImRpc3BhdGNoU3RhdHVzRXZlbnQiLCJkZXRhaWwiLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJsb2FkaW5nTG9jYWxlIiwic291cmNlTG9jYWxlIiwidmFsaWRMb2NhbGVzIiwibG9hZExvY2FsZSIsImFjdGl2ZUxvY2FsZSIsImxvYWRpbmciLCJyZXF1ZXN0SWQiLCJnZXRMb2NhbGUiLCJzZXRMb2NhbGUiLCJuZXdMb2NhbGUiLCJ0aGlzUmVxdWVzdElkIiwic3RhdHVzIiwibW9kIiwicmVhZHlMb2NhbGUiLCJlcnIiLCJlcnJvckxvY2FsZSIsImVycm9yTWVzc2FnZSIsIm1zZyIsImluc3RhbGxlZCIsImNvbmZpZyIsImltcGwiLCJ0YXJnZXRMb2NhbGVzIiwiY29uZmlndXJlTG9jYWxpemF0aW9uIiwibG9jYWxlIiwiYXBwbGllZENsYXNzTWl4aW5zIiwiZGVkdXBlTWl4aW4iLCJtaXhpbiIsInN1cGVyQ2xhc3MiLCJrbGFzcyIsIndhc01peGluUHJldmlvdXNseUFwcGxpZWQiLCJtaXhlZENsYXNzIiwic3VwcG9ydHNTY29wZWRSZWdpc3RyeSIsIlNjb3BlZEVsZW1lbnRzTWl4aW4iLCJzdXBlcmNsYXNzIiwic2NvcGVkRWxlbWVudHMiLCJfX3NoYWRvd1Jvb3RPcHRpb25zIiwiX19lbGVtZW50U3R5bGVzIiwiX2FyZ3MiLCJyZWdpc3RyeSIsIl9fcmVnaXN0cnkiLCJlbnRyaWVzIiwiZGVmaW5lU2NvcGVkRWxlbWVudCIsImNyZWF0ZWRSb290IiwiY3JlYXRlU2NvcGVkRWxlbWVudCIsInJlZ2lzdGVyZWRDbGFzcyIsImNvbnNvbGUiLCJnZXRTY29wZWRUYWdOYW1lIiwia2luZCIsImVsZW1lbnRzIiwiZmluaXNoZXIiLCJkZXNjcmlwdG9yIiwicGxhY2VtZW50Iiwib3JpZ2luYWxLZXkiLCJpbml0aWFsaXplciIsIkhUTUxTbG90RWxlbWVudCIsImFzc2lnbmVkRWxlbWVudHMiLCJhc3NpZ25lZE5vZGVzIiwiZmlsdGVyIiwiTm9kZSIsIkVMRU1FTlRfTk9ERSIsInNsb3QiLCJmbGF0dGVuIiwic2VsZWN0b3IiLCJtYXRjaGVzIiwiZXh0ZW5kU3RhdGljcyIsIl9fZXh0ZW5kcyIsIl9fIiwiX192YWx1ZXMiLCJfX3JlYWQiLCJhciIsIl9fc3ByZWFkQXJyYXkiLCJ0byIsImZyb20iLCJwYWNrIiwiaXNGdW5jdGlvbiIsImNyZWF0ZUVycm9yQ2xhc3MiLCJjcmVhdGVJbXBsIiwiY3RvckZ1bmMiLCJpbnN0YW5jZSIsInN0YWNrIiwiVW5zdWJzY3JpcHRpb25FcnJvciIsIl9zdXBlciIsImVycm9ycyIsImFyclJlbW92ZSIsImFyciIsIlN1YnNjcmlwdGlvbiIsImluaXRpYWxUZWFyZG93biIsImNsb3NlZCIsIl9wYXJlbnRhZ2UiLCJfZmluYWxpemVycyIsImVtcHR5IiwidW5zdWJzY3JpYmUiLCJlXzEiLCJlXzIiLCJfYiIsIl9wYXJlbnRhZ2VfMSIsIl9wYXJlbnRhZ2VfMV8xIiwiZV8xXzEiLCJyZXR1cm4iLCJpbml0aWFsRmluYWxpemVyIiwiX2ZpbmFsaXplcnNfMSIsIl9maW5hbGl6ZXJzXzFfMSIsImZpbmFsaXplciIsImV4ZWNGaW5hbGl6ZXIiLCJlXzJfMSIsInRlYXJkb3duIiwiX2hhc1BhcmVudCIsIl9hZGRQYXJlbnQiLCJwYXJlbnQiLCJpbmNsdWRlcyIsIl9yZW1vdmVQYXJlbnQiLCJFTVBUWSIsIkVNUFRZX1NVQlNDUklQVElPTiIsImlzU3Vic2NyaXB0aW9uIiwib25VbmhhbmRsZWRFcnJvciIsIm9uU3RvcHBlZE5vdGlmaWNhdGlvbiIsInVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmciLCJ1c2VEZXByZWNhdGVkTmV4dENvbnRleHQiLCJ0aW1lb3V0UHJvdmlkZXIiLCJoYW5kbGVyIiwiYXJncyIsImRlbGVnYXRlIiwiaGFuZGxlIiwibm9vcCIsIkNPTVBMRVRFX05PVElGSUNBVElPTiIsImNyZWF0ZU5vdGlmaWNhdGlvbiIsImNvbnRleHQiLCJlcnJvckNvbnRleHQiLCJjYiIsImlzUm9vdCIsImVycm9yVGhyb3duIiwiU3Vic2NyaWJlciIsImRlc3RpbmF0aW9uIiwiX3RoaXMiLCJpc1N0b3BwZWQiLCJFTVBUWV9PQlNFUlZFUiIsImNvbXBsZXRlIiwiU2FmZVN1YnNjcmliZXIiLCJoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uIiwibmV4dE5vdGlmaWNhdGlvbiIsIl9uZXh0IiwiX2Vycm9yIiwiX2NvbXBsZXRlIiwiX2JpbmQiLCJ0aGlzQXJnIiwiQ29uc3VtZXJPYnNlcnZlciIsInBhcnRpYWxPYnNlcnZlciIsImhhbmRsZVVuaGFuZGxlZEVycm9yIiwib2JzZXJ2ZXJPck5leHQiLCJjb250ZXh0XzEiLCJyZXBvcnRVbmhhbmRsZWRFcnJvciIsIm5vdGlmaWNhdGlvbiIsInN1YnNjcmliZXIiLCJvYnNlcnZhYmxlIiwiaWRlbnRpdHkiLCJwaXBlRnJvbUFycmF5IiwiZm5zIiwiaW5wdXQiLCJPYnNlcnZhYmxlIiwic3Vic2NyaWJlIiwiX3N1YnNjcmliZSIsImxpZnQiLCJvcGVyYXRvciIsInNvdXJjZSIsImlzT2JzZXJ2ZXIiLCJfdHJ5U3Vic2NyaWJlIiwic2luayIsInByb21pc2VDdG9yIiwiZ2V0UHJvbWlzZUN0b3IiLCJwaXBlIiwib3BlcmF0aW9ucyIsInRvUHJvbWlzZSIsImh0dHBNZXRob2QiLCJPYmplY3RVbnN1YnNjcmliZWRFcnJvciIsIlN1YmplY3QiLCJjdXJyZW50T2JzZXJ2ZXJzIiwib2JzZXJ2ZXJzIiwiaGFzRXJyb3IiLCJ0aHJvd25FcnJvciIsInN1YmplY3QiLCJBbm9ueW1vdXNTdWJqZWN0IiwiX3Rocm93SWZDbG9zZWQiLCJfYyIsInNoaWZ0IiwiX2NoZWNrRmluYWxpemVkU3RhdHVzZXMiLCJfaW5uZXJTdWJzY3JpYmUiLCJhc09ic2VydmFibGUiLCJDb250ZXh0U2VydmljZSIsInByb3BlcnR5Q2hhbmdlU3ViamVjdCIsIl9jb250ZXh0U2VydmljZSIsIkRhdGFTZXJ2aWNlIiwiaHR0cEdldCIsImZldGNoIiwiYmFzZVVybCIsIm1ldGhvZCIsImV4IiwicHJvdG9jb2wiLCJwYXRobmFtZSIsImxvY2F0aW9uIiwidGVuYW50SWQiLCJtYXRjaCIsImF0IiwiZ2V0SW5zdGFuY2UiLCJfZGF0YVNlcnZpY2UiLCJyZXNldEluc3RhbmNlIiwiRXZlbnRTZXJ2aWNlIiwidHJpZ2dlckluaXRpYWxpemVkIiwiaW5pdGlhbGl6ZWRTdWJqZWN0IiwidHJpZ2dlck9wZW5Qcm9jZXNzIiwib3BlblByb2Nlc3NTdWJzY3JpcHRpb24iLCJfZXZlbnRTZXJ2aWNlIiwiZmlyZUV4dGVybmFsIiwiZXZlbnRUeXBlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjb21wb3NlZCIsIlByb2Nlc3Nlc0FwaVNlcnZpY2UiLCJfYmFzZVVybCIsImdldFByb2Nlc3NMaXN0IiwibGlzdFByb2Nlc3NTZWFyY2hQYXJhbXMiLCJ1cmxTZWFyY2hQYXJhbXNTdHJpbmciLCJVUkxTZWFyY2hQYXJhbXMiLCJyZXNwb25zZSIsImpzb24iLCJfcHJvY2Vzc2VzQXBpU2VydmljZSIsImNvbW1vblN0eWxlcyIsImNvbW1vbkVtIiwibGlzdExhbmciLCJkZXNjIiwiUGlIZWFkZXIiLCJfJEN0IiwiXyRDaSIsIl8kQVEiLCJyZWNvbm5lY3RlZCIsImRpc2Nvbm5lY3RlZCIsInNldFZhbHVlIiwiWSIsImRpc2Nvbm5lY3QiLCJyZWNvbm5lY3QiLCJkZXJlZiIsInBhdXNlIiwicmVzdW1lIiwiXyRDd3QiLCJfJEN5dCIsIl8kQ0siLCJfJENYIiwiUGlMaXN0Q29tcG9uZW50IiwiX3Nob3dTdGF0dXNPdmVybGF5IiwiX29uQ2VsbENsaWNrZWQiLCJjb2x1bW4iLCJfb3BlblByb2Nlc3MiLCJfb25Jbml0aWFsaXplZCIsIl9wcm9jZXNzQXBpU2VydmljZSIsIl9zb3J0UHJvY2Vzc2VzIiwiZHRvIiwic29ydCIsIkRhdGUiLCJsYXN0TW9kaWZpZWQiLCJnZXRUaW1lIiwiX3Byb2Nlc3NMaXN0UmVzdWx0IiwiX2luaXRpYWxpemVkU3Vic2NyaXB0aW9uIiwiX29wZW5Qcm9jZXNzU3Vic2NyaXB0aW9uIiwiZmV0Y2hEYXRhIiwiZGVjb3JhdG9ycyIsImRlY29yYXRlIiwibnQiLCJzdCIsImNsYXNzTGlzdCIsImRpcmVjdGl2ZXMiLCJpc0RpcmVjdGl2ZSIsImlzQ0VQb2x5ZmlsbCIsInBvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2siLCJub0NoYW5nZSIsIm5vdGhpbmciLCJub2RlTWFya2VyIiwibWFya2VyUmVnZXgiLCJib3VuZEF0dHJpYnV0ZVN1ZmZpeCIsIm5vZGVzVG9SZW1vdmUiLCJ3YWxrZXIiLCJsYXN0UGFydEluZGV4IiwicGFydEluZGV4Iiwibm9kZSIsInN0cmluZ0ZvclBhcnQiLCJsYXN0QXR0cmlidXRlTmFtZVJlZ2V4IiwiYXR0cmlidXRlTG9va3VwTmFtZSIsImF0dHJpYnV0ZVZhbHVlIiwic3RhdGljcyIsImNyZWF0ZU1hcmtlciIsInByZXZpb3VzU2libGluZyIsInN1ZmZpeCIsImlzVGVtcGxhdGVQYXJ0QWN0aXZlIiwicGFydCIsIlRlbXBsYXRlSW5zdGFuY2UiLCJwcm9jZXNzb3IiLCJfX3BhcnRzIiwiY29tbWl0IiwiX2Nsb25lIiwiZnJhZ21lbnQiLCJjbG9uZU5vZGUiLCJub2RlSW5kZXgiLCJub2RlTmFtZSIsImhhbmRsZVRleHRFeHByZXNzaW9uIiwiaW5zZXJ0QWZ0ZXJOb2RlIiwiaGFuZGxlQXR0cmlidXRlRXhwcmVzc2lvbnMiLCJhZG9wdE5vZGUiLCJwb2xpY3kiLCJjb21tZW50TWFya2VyIiwiZ2V0SFRNTCIsImh0bWwiLCJpc0NvbW1lbnRCaW5kaW5nIiwiY29tbWVudE9wZW4iLCJsYXN0SW5kZXhPZiIsImF0dHJpYnV0ZU1hdGNoIiwic3Vic3RyIiwiZ2V0VGVtcGxhdGVFbGVtZW50IiwiaXNQcmltaXRpdmUiLCJpc0l0ZXJhYmxlIiwiQXR0cmlidXRlQ29tbWl0dGVyIiwiZGlydHkiLCJfY3JlYXRlUGFydCIsIkF0dHJpYnV0ZVBhcnQiLCJfZ2V0VmFsdWUiLCJ0ZXh0IiwiY29tbWl0dGVyIiwiZGlyZWN0aXZlIiwiX19wZW5kaW5nVmFsdWUiLCJhcHBlbmRJbnRvIiwiY29udGFpbmVyIiwicmVmIiwiYXBwZW5kSW50b1BhcnQiLCJfX2luc2VydCIsImluc2VydEFmdGVyUGFydCIsIl9fY29tbWl0VGV4dCIsIl9fY29tbWl0VGVtcGxhdGVSZXN1bHQiLCJfX2NvbW1pdE5vZGUiLCJfX2NvbW1pdEl0ZXJhYmxlIiwiY2xlYXIiLCJ2YWx1ZUFzU3RyaW5nIiwidGVtcGxhdGVGYWN0b3J5IiwiaXRlbVBhcnRzIiwiaXRlbVBhcnQiLCJzdGFydCIsImVuZCIsIkJvb2xlYW5BdHRyaWJ1dGVQYXJ0IiwiUHJvcGVydHlDb21taXR0ZXIiLCJzaW5nbGUiLCJQcm9wZXJ0eVBhcnQiLCJldmVudE9wdGlvbnNTdXBwb3J0ZWQiLCJfZSIsIkV2ZW50UGFydCIsImV2ZW50TmFtZSIsImV2ZW50Q29udGV4dCIsIl9fYm91bmRIYW5kbGVFdmVudCIsIm5ld0xpc3RlbmVyIiwib2xkTGlzdGVuZXIiLCJzaG91bGRSZW1vdmVMaXN0ZW5lciIsInNob3VsZEFkZExpc3RlbmVyIiwiX19vcHRpb25zIiwiZ2V0T3B0aW9ucyIsInByZWZpeCIsInRlbXBsYXRlQ2FjaGVzIiwiQ2FjaGUiLCJfcGFyZW50IiwiX2NhY2hlIiwiY291bnRlciIsInJvdW5kIiwiY2hhcnMiLCJ0YWdSZWdFeHAiLCJpbmNyZW1lbnRUYWdOYW1lIiwibmV3VGFnTmFtZSIsImlzVGFnUmVnaXN0ZXJlZCIsImNyZWF0ZVVuaXF1ZVRhZyIsInRhZyIsImdsb2JhbFRhZ3NDYWNoZSIsImFkZFRvR2xvYmFsVGFnc0NhY2hlIiwiZ2V0RnJvbUdsb2JhbFRhZ3NDYWNoZSIsImRlZmluZUVsZW1lbnQiLCJkZWZpbmVFbGVtZW50QW5kU3RvcmVJbkNhY2hlIiwidGFnc0NhY2hlIiwiY3VycmVudENsYXNzIiwiZXh0ZW5kc0hUTUxFbGVtZW50Iiwic3RvcmVMYXp5RWxlbWVudEluQ2FjaGUiLCJyZWdpc3RlckVsZW1lbnQiLCJyZSIsImdsb2JhbENhY2hlIiwidHJhbnNmb3JtVGVtcGxhdGUiLCJ0ZW1wbGF0ZUNhY2hlIiwidHJhbnNmb3JtZWRTdHJpbmdzIiwiYWNjIiwibWF0Y2hBbGwiLCJibG9jayIsImlzQ2xvc2luZ1RhZyIsImNvbXBhdGlibGVTaGFkeUNTU1ZlcnNpb24iLCJwcmVwYXJlVGVtcGxhdGVEb20iLCJ0YWdzQ2FjaGVzIiwiZ2V0VGFnc0NhY2hlIiwidHJhbnNmb3JtQXJyYXkiLCJpdGVtcyIsInRyYW5zZm9ybSIsInNjb3BlZEVsZW1lbnRzVGVtcGxhdGVGYWN0b3J5Iiwic2NvcGVOYW1lIiwibmV3VGVtcGxhdGUiLCJjYWNoZUtleSIsImdldFRlbXBsYXRlQ2FjaGVLZXkiLCJzdHJpbmdzQXJyYXkiLCJrZXlTdHJpbmciLCJzaGFkeVRlbXBsYXRlRmFjdG9yeSIsInRva2VucyIsInJlcGxhY2UiLCJ2dCIsInJlbW92ZVByb3BlcnR5Iiwic2V0UHJvcGVydHkiLCJpY29uTG9va3VwIiwiX2V4cG9ydCIsIl9pbXBvcnQiLCJhcmNoaXZlIiwiYXJyb3dEb3duIiwiYXJyb3dVcCIsImNhcmV0RG93biIsImNhcmV0TGVmdCIsImNhcmV0UmlnaHQiLCJjYXJldFVwIiwiY2hlY2siLCJjaGV2cm9uRG93biIsImNoZXZyb25MZWZ0IiwiY2hldnJvbkxpZ2h0RG93biIsImNoZXZyb25MaWdodExlZnQiLCJjaGV2cm9uTGlnaHRSaWdodCIsImNoZXZyb25MaWdodFVwIiwiY2hldnJvblJpZ2h0IiwiY2hldnJvblVwIiwiY2xvc2VEZWZhdWx0IiwiZGFuZ2VyRXhjbGFtYXRpb24iLCJkcm9wem9uZSIsImZlZWRiYWNrIiwiZmlsZSIsImhpZGUiLCJpbmZvIiwibWF4aW1pc2UiLCJtZWF0YmFsbHMiLCJtaW51cyIsIm9wZW5Jbk5ld1dpbmRvdyIsInByb2Nlc3MiLCJwcm9jZXNzTW9kZWwiLCJwdWJsaXNoIiwic2F2ZSIsInNlYXJjaCIsInNob3ciLCJzdWNjZXNzIiwic3VtbWFyeSIsInRpY2siLCJ0cmFzaCIsInVzZXIiLCJ1c2VycyIsInZlcnNpb25IaXN0b3J5Iiwid2FybmluZ0V4Y2xhbWF0aW9uIiwicmVuZGVySWNvbiIsInR5cGVBc0h0bWwiLCJmaXhlZFNpemUiLCJjbGFzc05hbWUiLCJ3YXJuIiwiaWNvblByb21pc2UiLCJoZWlnaHQiLCJ3aWR0aCIsImRpc3BsYXkiLCJhbGlnbkl0ZW1zIiwianVzdGlmeUl0ZW1zIiwiTmVCdXR0b24iLCJkaXNhYmxlZCIsImFyaWFMYWJlbCIsInZhcmlhbnQiLCJvbkNsaWNrIiwiZmlyZSIsImJ0biIsImxlZnRJY29uVHlwZSIsInJpZ2h0SWNvblR5cGUiLCJOZUxhYmVsIiwicmVxdWlyZWQiLCJpdCIsImRpcmVjdGl2ZU5hbWUiLCJfdCIsInJhdyIsInJlc3VsdFR5cGUiLCJTcGlubmVyVHlwZSIsIlNwaW5uZXJUaGVtZVR5cGUiLCJsZWZ0IiwicmlnaHQiLCJOZVNwaW5uZXIiLCJtZWRpdW0iLCJ0aGVtZSIsInJlZ3VsYXIiLCJzcGlubmVyIiwic21hbGwiLCJsYXJnZSIsImxpZ2h0IiwiZGVmYXVsdFN0YXR1cyIsIndyYXBwZWQiLCJydCIsImx0IiwiY3QiLCJkdCIsIk5lU3RhdHVzT3ZlcmxheSIsIl9kaWFsb2dFbGVtIiwiZGVsYXkiLCJfc2hvd1NldFRpbWVvdXQiLCJfaXNTaG93T3ZlckxheSIsImNoYW5nZWRQcm9wcyIsImNsb3NlIiwiTmVUYWJsZUhlYWRlciIsIl8kbGl0U3RhdGljJCIsIk5lVGFibGUiLCJfZXZlbnRzIiwiX2hhc0hlYWRUZW1wbGF0ZSIsIl9oYXNSb3dUZW1wbGF0ZSIsImxpc3RlbmVyIiwiX29uSGVhZFRlbXBsYXRlU2xvdENoYW5nZSIsIl9oZWFkVGVtcGxhdGUiLCJfb25Sb3dUZW1wbGF0ZVNsb3RDaGFuZ2UiLCJfcm93VGVtcGxhdGUiLCJfcmVuZGVySGVhZERhdGEiLCJyb3dEYXRhT2JqIiwiX3JlbmRlclJvd0RhdGEiLCJodG1sVGVtcGxhdGUiLCJjaGlsZHJlbiIsInRlbXBsYXRlRWxlbSIsImVsZW0iLCJfYmluZEhlYWRlckV2ZW50cyIsIl9iaW5kSGVhZGVyIiwicm93IiwiX2JpbmRFdmVudHMiLCJfYmluZENvbnRyb2wiLCJldiIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwib3JpZ2luYWxFdmVudCIsInJlZ2V4MSIsInN1YnN0cmluZyIsIkFwcENvbXBvbmVudCJdLCJzb3VyY2VSb290IjoiIn0=