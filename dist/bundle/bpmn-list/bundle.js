/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={8388:(e,t,r)=>{"use strict";r.r(t),r.d(t,{_export:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M9.824 3.514a.48.48 0 0 1-.11-.507.444.444 0 0 1 .417-.29l3.202-.05-.05 3.204a.449.449 0 0 1-.457.446.491.491 0 0 1-.344-.144.454.454 0 0 1-.133-.343l.043-1.497-4.779 4.782a.413.413 0 0 1-.296.116.566.566 0 0 1-.389-.162.494.494 0 0 1-.04-.68l4.778-4.781-1.496.043a.48.48 0 0 1-.346-.137Zm2.285 3.597c.074.29.113.59.118.889A4.228 4.228 0 1 1 8 3.773c.3.002.597.036.889.103v-1.12A5.055 5.055 0 0 0 8 2.666 5.333 5.333 0 1 0 13.333 8a5.052 5.052 0 0 0-.089-.889H12.11Z"
  />
</svg>`},9699:(e,t,r)=>{"use strict";r.r(t),r.d(t,{_import:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M3.12 3.87A.43.43 0 0 1 3 3.567a.584.584 0 0 1 .167-.402.509.509 0 0 1 .702-.041L8.798 8.05l-.043-1.544a.49.49 0 0 1 .829-.362.458.458 0 0 1 .133.322l.053 3.3-3.306-.053a.464.464 0 0 1-.46-.471.518.518 0 0 1 .148-.355.477.477 0 0 1 .355-.137l1.543.045-4.93-4.924ZM8.5 3a5.435 5.435 0 0 0-2.2.474l.887.887a4.272 4.272 0 0 1 1.313-.22A4.36 4.36 0 1 1 4.141 8.5a4.315 4.315 0 0 1 .47-1.946l-.836-.837a5.44 5.44 0 0 0 .152 5.839A5.5 5.5 0 1 0 8.5 3Z"
  />
</svg>`},7352:(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M10.69 2.388a6.222 6.222 0 1 0 2.917 8.302 6.193 6.193 0 0 0-2.916-8.302Zm.847 6.5H8.889v2.668a.889.889 0 0 1-1.778 0V8.889H4.463a.889.889 0 1 1 0-1.778h2.648V4.463a.889.889 0 1 1 1.778 0v2.648h2.648a.889.889 0 0 1 0 1.778Z"
  />
</svg>`},6939:(e,t,r)=>{"use strict";r.r(t),r.d(t,{archive:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M12.889 3.556H3.11A.444.444 0 0 0 2.667 4v1.778a.444.444 0 0 0 .444.444h.445V12a.445.445 0 0 0 .444.444h8a.445.445 0 0 0 .444-.444V6.217h.445a.445.445 0 0 0 .444-.445V3.995a.444.444 0 0 0-.444-.44Zm-1.333 7.78a.222.222 0 0 1-.223.221H4.667a.222.222 0 0 1-.223-.222V6.217h7.112v5.118Zm.666-6.892a.222.222 0 0 1 .222.223v.444a.222.222 0 0 1-.222.222H3.778a.222.222 0 0 1-.222-.222v-.444a.222.222 0 0 1 .222-.223h8.444ZM5.333 7.556a.444.444 0 0 1 .445-.445h4.444a.445.445 0 0 1 0 .889H5.778a.444.444 0 0 1-.445-.444Z"
  />
</svg>`},4783:(e,t,r)=>{"use strict";r.r(t),r.d(t,{arrowDown:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M12.444 9.74a.77.77 0 0 1-.25.566l-4.175 3.916-4.215-3.895a.793.793 0 0 1-.248-.572.807.807 0 0 1 .266-.579c.182-.16.416-.249.658-.25a.857.857 0 0 1 .628.267l1.95 1.938h.053V3.556a.889.889 0 1 1 1.778 0v7.568h.059l1.955-1.915a.95.95 0 0 1 .64-.281.912.912 0 0 1 .606.204.799.799 0 0 1 .295.608Z"
  />
</svg>`},7404:(e,t,r)=>{"use strict";r.r(t),r.d(t,{arrowUp:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M3.556 7.15a.773.773 0 0 1 .25-.567l4.175-3.916 4.215 3.895a.793.793 0 0 1 .248.572.805.805 0 0 1-.266.579c-.182.16-.416.249-.658.25a.856.856 0 0 1-.628-.267l-1.95-1.938H8.89v7.575a.889.889 0 1 1-1.778 0V5.765h-.059L5.097 7.68a.95.95 0 0 1-.64.28.912.912 0 0 1-.606-.204.8.8 0 0 1-.295-.607Z"
  />
</svg>`},588:(e,t,r)=>{"use strict";r.r(t),r.d(t,{caretDown:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M8.45 10.555a.553.553 0 0 1-.669 0L5.996 8.612 4.584 7.118a.544.544 0 0 1 .293-.896h6.548a.544.544 0 0 1 .296.896L10.31 8.612l-1.86 1.943Z"
  />
</svg>`},1746:(e,t,r)=>{"use strict";r.r(t),r.d(t,{caretLeft:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M6.043 8.45a.553.553 0 0 1 0-.669l1.942-1.785 1.494-1.412a.544.544 0 0 1 .896.293v6.548a.544.544 0 0 1-.896.296L7.985 10.31 6.043 8.45Z"
  />
</svg>`},5147:(e,t,r)=>{"use strict";r.r(t),r.d(t,{caretRight:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M10.262 7.854a.553.553 0 0 1 0 .67L8.32 10.309 6.826 11.72a.544.544 0 0 1-.896-.293V4.88a.544.544 0 0 1 .896-.297L8.32 5.996l1.942 1.858Z"
  />
</svg>`},5245:(e,t,r)=>{"use strict";r.r(t),r.d(t,{caretUp:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M7.854 6.335a.553.553 0 0 1 .67 0l1.785 1.942 1.412 1.494a.545.545 0 0 1-.293.896H4.88a.544.544 0 0 1-.297-.896l1.413-1.494 1.858-1.942Z"
  />
</svg>`},3441:(e,t,r)=>{"use strict";r.r(t),r.d(t,{check:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 11 8"
>
  <path
    fill="currentColor"
    d="M9.779 1.997 5.045 7.29a.867.867 0 0 1-1.249 0L.814 4.302a.929.929 0 0 1 0-1.286.866.866 0 0 1 1.25 0L4.421 5.36 8.528.71a.868.868 0 0 1 1.25 0 .932.932 0 0 1 0 1.287Z"
  />
</svg>`},157:(e,t,r)=>{"use strict";r.r(t),r.d(t,{chevronDown:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M3.92 4.444a1.25 1.25 0 0 1 1.007.509L8 9.103l3.073-4.15a1.256 1.256 0 1 1 2.012 1.502l-4.078 5.511a1.296 1.296 0 0 1-2.012 0l-4.08-5.51a1.262 1.262 0 0 1 .257-1.763c.216-.161.478-.249.748-.249Z"
  />
</svg>`},1316:(e,t,r)=>{"use strict";r.r(t),r.d(t,{chevronLeft:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M12 4.345a1.25 1.25 0 0 1-.508 1.007l-4.15 3.073 4.15 3.073a1.255 1.255 0 1 1-1.503 2.012L4.48 9.432a1.296 1.296 0 0 1 0-2.012l5.51-4.08a1.262 1.262 0 0 1 1.762.257c.162.216.25.478.25.748Z"
  />
</svg>`},9683:(e,t,r)=>{"use strict";r.r(t),r.d(t,{chevronLightDown:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M8 10.667a.51.51 0 0 1-.343-.13L2.809 6.092a.42.42 0 0 1 0-.629.516.516 0 0 1 .685 0L8 9.593l4.506-4.13a.516.516 0 0 1 .685 0 .419.419 0 0 1 0 .63l-4.848 4.444a.51.51 0 0 1-.343.13Z"
  />
</svg>`},1788:(e,t,r)=>{"use strict";r.r(t),r.d(t,{chevronLightLeft:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M5.333 8a.51.51 0 0 1 .13-.343l4.444-4.848a.42.42 0 0 1 .63 0 .517.517 0 0 1 0 .685L6.407 8l4.13 4.506a.516.516 0 0 1 0 .685.42.42 0 0 1-.63 0L5.463 8.343A.51.51 0 0 1 5.333 8Z"
  />
</svg>`},7776:(e,t,r)=>{"use strict";r.r(t),r.d(t,{chevronLightRight:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M10.667 8a.51.51 0 0 1-.13.343l-4.444 4.848a.42.42 0 0 1-.63 0 .517.517 0 0 1 0-.685L9.593 8l-4.13-4.506a.516.516 0 0 1 0-.685.42.42 0 0 1 .63 0l4.444 4.848a.51.51 0 0 1 .13.343Z"
  />
</svg>`},5154:(e,t,r)=>{"use strict";r.r(t),r.d(t,{chevronLightUp:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M8 5.333a.51.51 0 0 1 .343.13l4.848 4.444a.42.42 0 0 1 0 .63.517.517 0 0 1-.685 0L8 6.406l-4.506 4.13a.516.516 0 0 1-.685 0 .42.42 0 0 1 0-.629l4.848-4.444A.51.51 0 0 1 8 5.333Z"
  />
</svg>`},1704:(e,t,r)=>{"use strict";r.r(t),r.d(t,{chevronRight:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M4.02 12.525a1.251 1.251 0 0 1 .508-1.008l4.15-3.072-4.15-3.073A1.256 1.256 0 1 1 6.03 3.359l5.511 4.078a1.296 1.296 0 0 1 0 2.013l-5.51 4.08a1.262 1.262 0 0 1-1.763-.258 1.244 1.244 0 0 1-.249-.747Z"
  />
</svg>`},5121:(e,t,r)=>{"use strict";r.r(t),r.d(t,{chevronUp:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M12.1 12.425a1.251 1.251 0 0 1-1.008-.508L8.02 7.767l-3.073 4.15a1.257 1.257 0 1 1-2.013-1.502l4.078-5.512a1.296 1.296 0 0 1 2.013 0l4.08 5.512a1.262 1.262 0 0 1-.258 1.761 1.245 1.245 0 0 1-.747.25Z"
  />
</svg>`},4754:(e,t,r)=>{"use strict";r.r(t),r.d(t,{closeDefault:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M13.028 2.972a.889.889 0 0 1 0 1.256L9.257 8l3.771 3.772a.888.888 0 0 1-1.256 1.256L8 9.257l-3.772 3.771a.888.888 0 0 1-1.256-1.256L6.743 8 2.972 4.228a.889.889 0 0 1 1.256-1.256L8 6.743l3.772-3.771a.889.889 0 0 1 1.256 0Z"
  />
</svg>`},969:(e,t,r)=>{"use strict";r.r(t),r.d(t,{dangerExclamation:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 18 18"
>
  <path
    fill="currentColor"
    d="M9 16a6.957 6.957 0 0 0 7-7 6.956 6.956 0 0 0-7-7 6.957 6.957 0 0 0-7 7 6.957 6.957 0 0 0 7 7ZM8 5.1a1 1 0 0 1 2 0v3.6c0 .6-.4 1.3-1 1.3s-1-.7-1-1.3V5.1ZM9 11a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Z"
  />
</svg>`},6941:(e,t,r)=>{"use strict";r.r(t),r.d(t,{dropzone:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M8 4.444a.445.445 0 0 1 .444.401V8.21l.89-.871a.432.432 0 0 1 .577 0c.08.067.13.163.142.266a.514.514 0 0 1-.106.296L8 9.778 6.059 7.844a.378.378 0 0 1-.103-.297.435.435 0 0 1 .72-.267l.888.872V4.845a.444.444 0 0 1 .441-.4H8Z"
  />
  <path
    fill="currentColor"
    d="M13.778 12.444H2.222a.444.444 0 0 1-.423-.58l1.156-3.556A.444.444 0 0 1 3.378 8H5.11a.444.444 0 0 1 0 .889H3.703l-.87 2.667h10.333l-.87-2.667H10.89a.445.445 0 0 1 0-.889h1.733a.444.444 0 0 1 .423.307l1.156 3.555a.445.445 0 0 1-.423.582Z"
  />
</svg>`},2253:(e,t,r)=>{"use strict";r.r(t),r.d(t,{feedback:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M12.444 3.556H3.556a.889.889 0 0 0-.89.888v5.334a.889.889 0 0 0 .89.889h.888v1.777l1.778-1.777h6.222a.889.889 0 0 0 .89-.89V4.445a.889.889 0 0 0-.89-.888Zm-1.278 5.5H4.834a.39.39 0 0 1 0-.779h6.332a.39.39 0 1 1 0 .779Zm0-1.556H4.834a.39.39 0 0 1 0-.778h6.332a.39.39 0 1 1 0 .778Zm0-1.555H4.834a.39.39 0 0 1 0-.779h6.332a.39.39 0 1 1 0 .779Z"
  />
</svg>`},1601:(e,t,r)=>{"use strict";r.r(t),r.d(t,{file:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 17 20"
>
  <path
    fill="currentColor"
    d="M11.167.667H1.756A1.26 1.26 0 0 0 .5 1.923v17.6a1.137 1.137 0 0 0 1.137 1.137h13.726a1.137 1.137 0 0 0 1.137-1.13V6L11.167.667Zm0 5.333V2l4 4h-4Z"
  />
</svg>`},8138:(e,t,r)=>{"use strict";r.r(t),r.d(t,{hide:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="m14.1 7.895.008-.014c.024-.049.044-.089.06-.125l.012-.027.042-.098A6.623 6.623 0 0 0 8.016 3.66a6.768 6.768 0 0 0-2.007.28l-.773-1.272-.662.413.682 1.124A6.844 6.844 0 0 0 1.778 7.63a6.654 6.654 0 0 0 6.228 3.925c.54.002 1.08-.054 1.608-.168l1.182 1.945.663-.412-1.067-1.756a6.642 6.642 0 0 0 3.708-3.27ZM7.378 6.191c.195-.102.41-.158.63-.163A1.548 1.548 0 0 1 9.52 7.606a1.574 1.574 0 0 1-.56 1.2L7.379 6.191Zm.63 4.1a5.422 5.422 0 0 1-4.831-2.659 5.529 5.529 0 0 1 2.747-2.33l.851 1.4a1.593 1.593 0 0 0-.28.904 1.547 1.547 0 0 0 1.51 1.577c.085-.003.17-.014.252-.033l.65 1.067c-.298.046-.6.07-.9.074h.002Z"
  />
</svg>`},770:(e,t,r)=>{"use strict";r.r(t),r.d(t,{info:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M8 1.778a6.222 6.222 0 1 0 0 12.444A6.222 6.222 0 0 0 8 1.778Zm.889 9.713a.889.889 0 1 1-1.778 0v-3.23c0-.528.36-1.15.889-1.15s.889.622.889 1.156v3.225Zm-.896-5.378a1.227 1.227 0 1 1 0-2.453 1.227 1.227 0 0 1 0 2.453Z"
  />
</svg>`},8297:(e,t,r)=>{"use strict";r.r(t),r.d(t,{maximise:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <rect
    width="11"
    height="11"
    x="2.5"
    y="2.5"
    fill="transparent"
    stroke="currentColor"
    rx="2.5"
  />
</svg>`},1307:(e,t,r)=>{"use strict";r.r(t),r.d(t,{meatballs:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <g clip-path="url(#a)">
    <path
      fill="currentColor"
      d="M4 8a2 2 0 1 1-4 0 2 2 0 0 1 4 0Zm4-2a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm6 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Z"
    />
  </g>
  <defs>
    <clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z" /></clipPath>
  </defs>
</svg>`},7272:(e,t,r)=>{"use strict";r.r(t),r.d(t,{minus:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M3.556 8a.889.889 0 0 1 .888-.889h7.112a.889.889 0 0 1 0 1.778H4.444A.889.889 0 0 1 3.556 8Z"
  />
</svg>`},1895:(e,t,r)=>{"use strict";r.r(t),r.d(t,{openInNewWindow:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M12.444 6.962v6.371a.889.889 0 0 1-.888.89h-8.89a.889.889 0 0 1-.888-.89v-8.87a.911.911 0 0 1 .91-.907h6.48c.02.029.028.064.05.093l-.796.795H2.667v8.89h8.889V7.85l.888-.888ZM10.09 1.778a.579.579 0 0 0 0 1.155h2.16L6.125 9.058a.578.578 0 0 0 .817.818l6.125-6.125v2.16a.578.578 0 1 0 1.155 0V1.778H10.09Z"
  />
</svg>`},4137:(e,t,r)=>{"use strict";r.r(t),r.d(t,{process:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="m13.23 7.2-2.652-2.652a.356.356 0 0 0-.255-.104H4a.444.444 0 0 0-.444.445v6.214a.445.445 0 0 0 .444.445h2.568v.008c.028 0 .058-.008.089-.008h3.23c.027 0 .056.006.088.008v-.008h2.914a.445.445 0 0 0 .444-.445V7.445a.355.355 0 0 0-.104-.245Zm-2.563-.089V5.333l1.777 1.778h-1.777Z"
  />
</svg>`},2605:(e,t,r)=>{"use strict";r.r(t),r.d(t,{processModel:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M14.531 6.562h-1.406V4.218a.469.469 0 0 0-.469-.469H6.732L3.983 1 1 3.983l2.749 2.75v4.517H2.343a.469.469 0 0 0-.47.469v2.812c0 .259.21.469.47.469H7.03c.258 0 .468-.21.468-.469v-1.406h5.157c.259 0 .469-.21.469-.469v-2.344h1.406c.259 0 .469-.21.469-.469V7.031a.469.469 0 0 0-.469-.47ZM2.326 3.983l1.657-1.657 1.658 1.657-1.658 1.658-1.657-1.658Zm4.236 10.08h-3.75v-1.876h3.75v1.875Zm5.625-1.876H7.5v-.468a.469.469 0 0 0-.468-.47H4.687V6.265l1.577-1.577h5.923v1.875H9.843a.469.469 0 0 0-.469.469v2.812c0 .26.21.47.47.47h2.343v1.874Zm1.875-2.813h-3.75V7.5h3.75v1.875Z"
  />
</svg>`},5233:(e,t,r)=>{"use strict";r.r(t),r.d(t,{publish:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M14.164 7.16c-.023-.179-.065-.352-.104-.527-.02-.095-.038-.192-.064-.285a6.486 6.486 0 0 0-.199-.596l-.061-.153a6.094 6.094 0 0 0-1.318-2A6.23 6.23 0 1 0 8.01 14.221c.48-.001.957-.061 1.422-.178.012 0 .024-.008.036-.011a6.351 6.351 0 0 0 1.244-.465c.039-.019.079-.033.117-.053l-.003-.004a6.209 6.209 0 0 0 2.706-2.703c.023-.045.037-.094.059-.14.117-.24.22-.486.306-.738.02-.06.03-.122.048-.182.079-.252.14-.508.186-.768.054-.323.082-.65.085-.977V8a6.238 6.238 0 0 0-.053-.84Zm-3.506.409a.633.633 0 0 1-.418.151.732.732 0 0 1-.484-.178L8.54 6.338v5.012a.584.584 0 0 1-.616.542.57.57 0 0 1-.603-.542V6.335L6.176 7.54a.599.599 0 0 1-.428.177.607.607 0 0 1-.549-.336.526.526 0 0 1 .113-.6l2.69-2.667 2.689 2.672a.527.527 0 0 1 .16.377.544.544 0 0 1-.193.406Z"
  />
</svg>`},1417:(e,t,r)=>{"use strict";r.r(t),r.d(t,{refresh:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="m13.313 6.846-.694.047a.376.376 0 0 1-.391-.308 3.97 3.97 0 0 0-1.052-1.979 4.106 4.106 0 0 0-4.217-.973 3.829 3.829 0 0 0-2.33 2.132l.006.01 1.555.146a.158.158 0 0 1 .068.293l-3.204 1.93a.17.17 0 0 1-.149-.007c-.02-.008-.027-.03-.042-.045-.016-.015-.04-.028-.048-.053 0 0-.007 0-.008-.009l-.806-3.458a.16.16 0 0 1 .268-.135l1.009.848a3.36 3.36 0 0 1 .357-.73l.005.006a5.134 5.134 0 0 1 2.782-2.247 5.579 5.579 0 0 1 5.87 1.401 5.377 5.377 0 0 1 1.358 2.71.369.369 0 0 1-.337.42ZM2.821 10.149a5.378 5.378 0 0 0 1.389 2.694 5.58 5.58 0 0 0 5.885 1.331 5.134 5.134 0 0 0 2.756-2.278l.005.006c.147-.23.265-.477.352-.735l1.022.837a.159.159 0 0 0 .268-.139l-.846-3.445-.008-.01c-.008-.024-.032-.034-.05-.052-.016-.018-.023-.037-.041-.045a.179.179 0 0 0-.15-.005l-3.18 1.964a.158.158 0 0 0 .07.292l1.557.128.006.01a3.823 3.823 0 0 1-2.304 2.158 4.106 4.106 0 0 1-4.228-.923 3.966 3.966 0 0 1-1.07-1.964.377.377 0 0 0-.396-.306l-.694.057a.366.366 0 0 0-.343.425Z"
  />
</svg>`},3234:(e,t,r)=>{"use strict";r.r(t),r.d(t,{save:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M9.778 5.333H8V3.556h1.778v1.777ZM12.8 2.667h-2.133v2.666c0 .295-.258.669-.554.669H5.916a.711.711 0 0 1-.583-.669V2.667H3.2a.533.533 0 0 0-.533.533v9.6a.534.534 0 0 0 .533.538h9.6a.535.535 0 0 0 .533-.538V3.2a.539.539 0 0 0-.533-.533Z"
  />
</svg>`},7627:(e,t,r)=>{"use strict";r.r(t),r.d(t,{schedule:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M8.25 2a6.25 6.25 0 1 0 6.25 6.25A6.258 6.258 0 0 0 8.25 2Zm0 11.267a5.017 5.017 0 1 1 5.017-5.017 5.023 5.023 0 0 1-5.017 5.017Zm2.045-4.22H7.454V5.764c0-.35-.144-.635-.494-.635s-.496.285-.496.635v4.27h3.83c.35 0 .635-.143.635-.494 0-.35-.284-.495-.634-.495Z"
  />
</svg>`},5554:(e,t,r)=>{"use strict";r.r(t),r.d(t,{search:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="m13.108 12.017-2.593-2.595a4.32 4.32 0 1 0-1.093 1.093l2.593 2.593a.773.773 0 0 0 1.333-.541.773.773 0 0 0-.242-.55h.002ZM6.974 9.914a2.94 2.94 0 1 1-.002-5.88 2.94 2.94 0 0 1 .002 5.88Z"
  />
</svg>`},9376:(e,t,r)=>{"use strict";r.r(t),r.d(t,{show:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M8.016 3.556A6.736 6.736 0 0 0 1.778 7.58a6.667 6.667 0 0 0 6.228 3.975 6.64 6.64 0 0 0 6.216-3.975 6.667 6.667 0 0 0-6.206-4.025Zm-.01 6.72a5.41 5.41 0 0 1-4.832-2.695 5.45 5.45 0 0 1 4.842-2.746 5.384 5.384 0 0 1 4.813 2.743 5.387 5.387 0 0 1-4.823 2.699Zm1.327-2.72a1.333 1.333 0 1 1-2.666 0 1.333 1.333 0 0 1 2.666 0Z"
  />
</svg>`},7528:(e,t,r)=>{"use strict";r.r(t),r.d(t,{success:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M8 1.772a6.222 6.222 0 1 0 6.222 6.222A6.23 6.23 0 0 0 8 1.772Zm3.362 4.726-3.55 3.97a.651.651 0 0 1-.937 0L4.638 8.226a.696.696 0 0 1 0-.965.65.65 0 0 1 .938 0L7.344 9.02l3.08-3.488a.652.652 0 0 1 .938 0 .698.698 0 0 1 0 .966Z"
  />
</svg>`},8318:(e,t,r)=>{"use strict";r.r(t),r.d(t,{summary:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M4 3h8.889H4Zm1.778 2.667h7.11v.889h-7.11v-.89ZM4 5.667h.889v.889H4v-.89Zm1.778 1.777h5.333v.89H5.778v-.89ZM4 7.444h.899v.89H4v-.89Zm0 1.778h.899v.89H4v-.89ZM4 11h.899v.889H4V11Zm0-8h8.889v1.778H4V3Zm1.778 7.111h7.11v-.889h-7.11v.89Zm0 1.778H12V11H5.778v.889ZM4 12.778h.899v.889H4v-.89Zm1.778.889h4.444v-.89H5.778v.89Z"
  />
</svg>`},5017:(e,t,r)=>{"use strict";r.r(t),r.d(t,{tick:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M12.779 5.997 8.045 11.29a.865.865 0 0 1-1.249 0L3.814 8.302a.929.929 0 0 1 0-1.286.866.866 0 0 1 1.25 0L7.421 9.36l4.107-4.649a.868.868 0 0 1 1.25 0 .932.932 0 0 1 0 1.287Z"
  />
</svg>`},7798:(e,t,r)=>{"use strict";r.r(t),r.d(t,{trash:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M12.444 5.769a1.785 1.785 0 0 0-.088-.436h-8.73a1.571 1.571 0 0 0-.068.436v7.862a1.712 1.712 0 0 0 1.52 1.48h5.89a1.664 1.664 0 0 0 1.476-1.48V5.77Zm-6.222 7.564h-.889V7.111c0-.883.89-.883.89 0v6.222Zm4.445 0h-.89V7.111c0-.883.89-.883.89 0v6.222Zm2.05-10.666h-2.05V1.482a.593.593 0 0 0-.593-.593H5.916a.585.585 0 0 0-.583.593v1.185H3.26a.592.592 0 0 0-.593.593v.629a.593.593 0 0 0 .593.593h9.462a.593.593 0 0 0 .593-.593l.018-.63a.608.608 0 0 0-.611-.592h-.005Zm-2.94 0H6.223v-.89h3.556v.89Z"
  />
</svg>`},8592:(e,t,r)=>{"use strict";r.r(t),r.d(t,{user:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M11.004 14.222H5.01c-3.996 0-1.823-3.745-1.121-4.562a1.78 1.78 0 0 1 .167-.178 1.885 1.885 0 0 1 2.158-.417 4.622 4.622 0 0 0 3.684.066 1.916 1.916 0 0 1 2.21.514c.703.8 2.876 4.561-1.104 4.577ZM8 8a2.667 2.667 0 1 0 0-5.333A2.667 2.667 0 0 0 8 8Z"
  />
</svg>`},8344:(e,t,r)=>{"use strict";r.r(t),r.d(t,{users:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M7.788 7.474a2.301 2.301 0 0 1-.183-2.986 2.442 2.442 0 0 1 3.855-.05 2.295 2.295 0 0 1-.184 3.074l-.024.025a2.432 2.432 0 0 1-3.452-.05l-.012-.013Zm5.343 2.208-.01-.01a1.86 1.86 0 0 0-1.977-.415 4.59 4.59 0 0 1-3.295-.053 1.844 1.844 0 0 0-1.929.336c-.05.046-.1.093-.147.142-.622.64-2.569 3.651 1 3.651h5.358c3.569 0 1.625-3.011 1-3.651Zm-7.957-.64a3.41 3.41 0 0 1 .183-.178 2.631 2.631 0 0 1 1.982-.676 4.747 4.747 0 0 1-.144-.135 3.134 3.134 0 0 1-.702-1.126 3.391 3.391 0 0 1-2.37-.06 1.363 1.363 0 0 0-1.423.25 2.01 2.01 0 0 0-.108.104c-.462.473-1.899 2.83.739 2.83h1.141c.206-.355.44-.692.702-1.01ZM4.083 5.6a1.796 1.796 0 0 0 2.216.29 3.152 3.152 0 0 1 .63-1.962c.035-.045.075-.089.112-.13a1.689 1.689 0 0 0-.253-.451 1.803 1.803 0 0 0-2.845.037 1.7 1.7 0 0 0 .134 2.207l.006.009Z"
  />
</svg>`},6525:(e,t,r)=>{"use strict";r.r(t),r.d(t,{versionHistory:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M13.778 8.475a5.778 5.778 0 1 1-6.59-5.684V1.84a.061.061 0 0 1 .1-.048l.99.773 1.03.8a.061.061 0 0 1 0 .096l-1.03.8-.99.774a.061.061 0 0 1-.1-.048V3.953a4.61 4.61 0 1 0 5.093 2.795L8.333 9.52a.58.58 0 0 1-.696-.022L5.135 7.485a.572.572 0 0 1 .3-1.02.58.58 0 0 1 .424.123l2.162 1.74 4.134-2.902.023-.015a.58.58 0 0 1 .848.24c.49.86.75 1.833.752 2.824Z"
  />
</svg>`},7403:(e,t,r)=>{"use strict";r.r(t),r.d(t,{warningExclamation:()=>o});const o=r(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="m14.885 12.625-6.044-11.2A1.037 1.037 0 0 0 7.507.98c-.189.1-.344.255-.444.445l-6.044 11.2a1.09 1.09 0 0 0 .355 1.422c.178.089.267.178.445.178h12.266a1.067 1.067 0 0 0 .978-1.067 1.263 1.263 0 0 0-.178-.533Zm-7.822-8.09a.889.889 0 1 1 1.778 0v3.2c0 .534-.356 1.156-.89 1.156-.532 0-.888-.622-.888-1.155v-3.2Zm.889 7.912a1.333 1.333 0 1 1 1.333-1.334 1.367 1.367 0 0 1-1.333 1.334Z"
  />
</svg>`},2443:(e,t,r)=>{(function(){"use strict";function e(e){var t=0;return function(){return t<e.length?{done:!1,value:e[t++]}:{done:!0}}}function t(t){var r="undefined"!=typeof Symbol&&Symbol.iterator&&t[Symbol.iterator];return r?r.call(t):{next:e(t)}}function o(e){if(!(e instanceof Array)){e=t(e);for(var r,o=[];!(r=e.next()).done;)o.push(r.value);e=o}return e}var n="function"==typeof Object.create?Object.create:function(e){function t(){}return t.prototype=e,new t};var i,a=function(e){e=["object"==typeof globalThis&&globalThis,e,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof r.g&&r.g];for(var t=0;t<e.length;++t){var o=e[t];if(o&&o.Math==Math)return o}throw Error("Cannot find global object")}(this),s=function(){if("undefined"!=typeof Reflect&&Reflect.construct){if(function(){function e(){}return new e,Reflect.construct(e,[],(function(){})),new e instanceof e}())return Reflect.construct;var e=Reflect.construct;return function(t,r,o){return t=e(t,r),o&&Reflect.setPrototypeOf(t,o.prototype),t}}return function(e,t,r){return void 0===r&&(r=e),r=n(r.prototype||Object.prototype),Function.prototype.apply.call(e,r,t)||r}}();if("function"==typeof Object.setPrototypeOf)i=Object.setPrototypeOf;else{var l;e:{var c={};try{c.__proto__={a:!0},l=c.a;break e}catch(e){}l=!1}i=l?function(e,t){if(e.__proto__=t,e.__proto__!==t)throw new TypeError(e+" is not extensible");return e}:null}var d=i;if(!ShadowRoot.prototype.createElement){var u,h=window.HTMLElement,p=window.customElements.define,f=window.customElements.get,g=window.customElements,v=new WeakMap,b=new WeakMap,m=new WeakMap,y=new WeakMap;window.CustomElementRegistry=function(){this.l=new Map,this.o=new Map,this.i=new Map,this.h=new Map},window.CustomElementRegistry.prototype.define=function(e,r){if(e=e.toLowerCase(),void 0!==this.j(e))throw new DOMException("Failed to execute 'define' on 'CustomElementRegistry': the name \""+e+'" has already been used with this registry');if(void 0!==this.o.get(r))throw new DOMException("Failed to execute 'define' on 'CustomElementRegistry': this constructor has already been used with this registry");var o=r.prototype.attributeChangedCallback,n=new Set(r.observedAttributes||[]);if(w(r,n,o),o={g:r,connectedCallback:r.prototype.connectedCallback,disconnectedCallback:r.prototype.disconnectedCallback,adoptedCallback:r.prototype.adoptedCallback,attributeChangedCallback:o,formAssociated:r.formAssociated,formAssociatedCallback:r.prototype.formAssociatedCallback,formDisabledCallback:r.prototype.formDisabledCallback,formResetCallback:r.prototype.formResetCallback,formStateRestoreCallback:r.prototype.formStateRestoreCallback,observedAttributes:n},this.l.set(e,o),this.o.set(r,o),(n=f.call(g,e))||(n=A(e),p.call(g,e,n)),this===window.customElements&&(m.set(r,o),o.s=n),n=this.h.get(e)){this.h.delete(e);for(var i=(n=t(n)).next();!i.done;i=n.next())i=i.value,b.delete(i),k(i,o,!0)}return void 0!==(o=this.i.get(e))&&(o.resolve(r),this.i.delete(e)),r},window.CustomElementRegistry.prototype.upgrade=function(){_.push(this),g.upgrade.apply(g,arguments),_.pop()},window.CustomElementRegistry.prototype.get=function(e){var t;return null==(t=this.l.get(e))?void 0:t.g},window.CustomElementRegistry.prototype.j=function(e){return this.l.get(e)},window.CustomElementRegistry.prototype.whenDefined=function(e){var t=this.j(e);if(void 0!==t)return Promise.resolve(t.g);var r=this.i.get(e);return void 0===r&&((r={}).promise=new Promise((function(e){return r.resolve=e})),this.i.set(e,r)),r.promise},window.CustomElementRegistry.prototype.m=function(e,t,r){var o=this.h.get(t);o||this.h.set(t,o=new Set),r?o.add(e):o.delete(e)},window.HTMLElement=function(){var e=u;if(e)return u=void 0,e;var t=m.get(this.constructor);if(!t)throw new TypeError("Illegal constructor (custom element class must be registered with global customElements registry to be newable)");return e=Reflect.construct(h,[],t.s),Object.setPrototypeOf(e,this.constructor.prototype),v.set(e,t),e},window.HTMLElement.prototype=h.prototype;var A=function(e){function t(){var t=Reflect.construct(h,[],this.constructor);Object.setPrototypeOf(t,HTMLElement.prototype);e:{var r=t.getRootNode();if(!(r===document||r instanceof ShadowRoot)){if((r=_[_.length-1])instanceof CustomElementRegistry){var o=r;break e}(r=r.getRootNode())===document||r instanceof ShadowRoot||(r=(null==(o=y.get(r))?void 0:o.getRootNode())||document)}o=r.customElements}return(r=(o=o||window.customElements).j(e))?k(t,r):b.set(t,o),t}return a.Object.defineProperty(t,"formAssociated",{configurable:!0,enumerable:!0,get:function(){return!0}}),t.prototype.connectedCallback=function(){var t=v.get(this);t?t.connectedCallback&&t.connectedCallback.apply(this,arguments):b.get(this).m(this,e,!0)},t.prototype.disconnectedCallback=function(){var t=v.get(this);t?t.disconnectedCallback&&t.disconnectedCallback.apply(this,arguments):b.get(this).m(this,e,!1)},t.prototype.adoptedCallback=function(){var e,t;null==(e=v.get(this))||null==(t=e.adoptedCallback)||t.apply(this,arguments)},t.prototype.formAssociatedCallback=function(){var e,t=v.get(this);t&&t.formAssociated&&(null==t||null==(e=t.formAssociatedCallback)||e.apply(this,arguments))},t.prototype.formDisabledCallback=function(){var e,t=v.get(this);null!=t&&t.formAssociated&&(null==t||null==(e=t.formDisabledCallback)||e.apply(this,arguments))},t.prototype.formResetCallback=function(){var e,t=v.get(this);null!=t&&t.formAssociated&&(null==t||null==(e=t.formResetCallback)||e.apply(this,arguments))},t.prototype.formStateRestoreCallback=function(){var e,t=v.get(this);null!=t&&t.formAssociated&&(null==t||null==(e=t.formStateRestoreCallback)||e.apply(this,arguments))},t},w=function(e,t,r){if(0!==t.size&&void 0!==r){var o=e.prototype.setAttribute;o&&(e.prototype.setAttribute=function(e,n){if(e=e.toLowerCase(),t.has(e)){var i=this.getAttribute(e);o.call(this,e,n),r.call(this,e,i,n)}else o.call(this,e,n)});var n=e.prototype.removeAttribute;n&&(e.prototype.removeAttribute=function(e){if(e=e.toLowerCase(),t.has(e)){var o=this.getAttribute(e);n.call(this,e),r.call(this,e,o,null)}else n.call(this,e)});var i=e.prototype.toggleAttribute;i&&(e.prototype.toggleAttribute=function(e){if(e=e.toLowerCase(),t.has(e)){var o=this.getAttribute(e);i.call(this,e);var n=this.getAttribute(e);r.call(this,e,o,n)}else i.call(this,e)})}},x=function(e){var t=Object.getPrototypeOf(e);if(t!==window.HTMLElement)return t===h?Object.setPrototypeOf(e,window.HTMLElement):x(t)},k=function(e,t,r){r=void 0!==r&&r,Object.setPrototypeOf(e,t.g.prototype),v.set(e,t),u=e;try{new t.g}catch(e){x(t.g),new t.g}t.observedAttributes.forEach((function(r){e.hasAttribute(r)&&t.attributeChangedCallback.call(e,r,null,e.getAttribute(r))})),r&&t.connectedCallback&&e.isConnected&&t.connectedCallback.call(e)},C=Element.prototype.attachShadow;Element.prototype.attachShadow=function(e){var t=C.apply(this,arguments);return e.customElements&&(t.customElements=e.customElements),t};var _=[document],$=function(e,t,r){var o=(r?Object.getPrototypeOf(r):e.prototype)[t];e.prototype[t]=function(){_.push(this);var e=o.apply(r||this,arguments);return void 0!==e&&y.set(e,this),_.pop(),e}};$(ShadowRoot,"createElement",document),$(ShadowRoot,"importNode",document),$(Element,"insertAdjacentHTML");var S=function(e){var t=Object.getOwnPropertyDescriptor(e.prototype,"innerHTML");Object.defineProperty(e.prototype,"innerHTML",Object.assign({},t,{set:function(e){_.push(this),t.set.call(this,e),_.pop()}}))};if(S(Element),S(ShadowRoot),Object.defineProperty(window,"customElements",{value:new CustomElementRegistry,configurable:!0,writable:!0}),window.ElementInternals&&window.ElementInternals.prototype.setFormValue){var z=new WeakMap,E=HTMLElement.prototype.attachInternals;HTMLElement.prototype.attachInternals=function(e){for(var t=[],r=0;r<arguments.length;++r)t[r]=arguments[r];return t=E.call.apply(E,[this].concat(o(t))),z.set(t,this),t},["setFormValue","setValidity","checkValidity","reportValidity"].forEach((function(e){var t=window.ElementInternals.prototype,r=t[e];t[e]=function(e){for(var t=[],n=0;n<arguments.length;++n)t[n]=arguments[n];if(n=z.get(this),!0!==v.get(n).formAssociated)throw new DOMException("Failed to execute "+r+" on 'ElementInternals': The target element is not a form-associated custom element.");null==r||r.call.apply(r,[this].concat(o(t)))}}));var L=function(e){var t=s(Array,[].concat(o(e)),this.constructor);return t.h=e,t},T=L,P=Array;if(T.prototype=n(P.prototype),T.prototype.constructor=T,d)d(T,P);else for(var D in P)if("prototype"!=D)if(Object.defineProperties){var F=Object.getOwnPropertyDescriptor(P,D);F&&Object.defineProperty(T,D,F)}else T[D]=P[D];T.u=P.prototype,a.Object.defineProperty(L.prototype,"value",{configurable:!0,enumerable:!0,get:function(){var e;return(null==(e=this.h.find((function(e){return!0===e.checked})))?void 0:e.value)||""}});var O=function(e){var t=this,r=new Map;e.forEach((function(e,o){var n=e.getAttribute("name"),i=r.get(n)||[];t[+o]=e,i.push(e),r.set(n,i)})),this.length=e.length,r.forEach((function(e,r){e&&(t[r]=1===e.length?e[0]:new L(e))}))};O.prototype.namedItem=function(e){return this[e]};var N=Object.getOwnPropertyDescriptor(HTMLFormElement.prototype,"elements");Object.defineProperty(HTMLFormElement.prototype,"elements",{get:function(){for(var e=N.get.call(this,[]),r=[],o=(e=t(e)).next();!o.done;o=e.next()){o=o.value;var n=v.get(o);n&&!0!==n.formAssociated||r.push(o)}return new O(r)}})}}}).call("object"==typeof globalThis?globalThis:window)},9526:(e,t,r)=>{"use strict";r.d(t,{Z:()=>s});var o=r(272),n=r.n(o),i=r(2609),a=r.n(i)()(n());a.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600&family=Open+Sans:ital,wght@0,300;0,400;0,600;0,700;0,800;1,400&display=swap);"]),a.push([e.id,":root{--nx-sand-10: #f7f1dd;--nx-white: #fff;--nx-yellow-60: #e1b200;--nx-yellow-50: #ffcf1a;--nx-yellow-40: #ffd948;--nx-red-60: #b80000;--nx-red-50: #e60000;--nx-red-40: #ff1f1f;--nx-red-10: #ffc7c7;--nx-green-60: #006c2d;--nx-green-50: #008738;--nx-green-40: #00d257;--nx-green-10: #b6ffd4;--nx-orange-60: #f56900;--nx-blue-90: #001f3d;--nx-blue-80: #003870;--nx-blue-70: #0052a3;--nx-blue-60: #006bd6;--nx-blue-50: #0a85ff;--nx-blue-40: #3d9eff;--nx-blue-30: #70b8ff;--nx-blue-20: #a3d1ff;--nx-blue-10: #d6ebff;--nx-blue-5: #f0f7ff;--nx-violet-90: #200c34;--nx-violet-80: #3f1868;--nx-violet-70: #5f249b;--nx-violet-60: #7f30cf;--nx-violet-50: #9f64db;--nx-violet-40: #b283e2;--nx-violet-30: #c5a2e9;--nx-violet-20: #d9c1f1;--nx-violet-10: #ece0f8;--nx-grey-90: #161718;--nx-grey-80: #2c2e30;--nx-grey-70: #414548;--nx-grey-60: #575c61;--nx-grey-50: #6d7379;--nx-grey-40: #898f94;--nx-grey-30: #a7abaf;--nx-grey-20: #c4c7ca;--nx-grey-10: #e2e3e4;--nx-grey-5: #eff0f0;--nx-grey-2: #fafafa;--overlay: rgba(109 115 121 60%);--overlay-loading: rgba(250 250 250 80%);--onlight-hover-background-color: #f4f9ff;--onlight-selected-background-color: #e8f3ff;--globalnav-background-color: var(--nx-blue-80);--globalnav-text-color: var(--nx-white);--sidenav-background-color: var(--nx-grey-5);--body-primary-background-color: var(--nx-grey-2);--body-secondary-background-color: var(--nx-grey-5);--content-background-color: var(--nx-white);--content-extension-background-color: var(--nx-grey-10);--toolbar-background-color: var(--nx-white);--toolbar-text-color: var(--nx-grey-90);--primary-text-color: var(--nx-grey-90);--disabled-text-color: var(--nx-grey-70);--error-text-color: var(--nx-red-50);--destructive-text-color: var(--nx-red-60);--success-text-color: var(--nx-green-50);--header-text-color: var(--nx-orange-60);--subheader-text-color: var(--nx-grey-60);--placeholder-text-color: var(--nx-grey-50);--hyperlink-text-color: var(--nx-blue-60);--hyperlink-disabled-text-color: var(--nx-grey-70);--block-primary-background-color: var(--nx-blue-60);--block-primary-border-color: var(--nx-blue-70);--block-primary-text-color: var(--nx-white);--block-secondary-background-color: hsla(0deg 0% 0% 0%);--block-secondary-border-color: hsla(0deg 0% 0% 0%);--block-secondary-text-color: var(--nx-grey-90);--block-success-background-color: var(--nx-green-50);--block-success-border-color: var(--nx-green-60);--block-success-text-color: var(--nx-white);--block-error-background-color: var(--nx-red-50);--block-error-border-color: var(--nx-red-60);--block-error-text-color: var(--nx-white);--block-warning-background-color: var(--nx-yellow-50);--block-warning-border-color: var(--nx-yellow-60);--block-warning-text-color: var(--nx-grey-90);--button-primary-hover-background-color: #1477db;--button-primary-hover-text-color: #e2eefa;--button-secondary-background-color: var(--nx-white);--button-secondary-border-color: var(--nx-grey-10);--button-secondary-text-color: var(--nx-blue-60);--button-secondary-hover-background-color: var(--onlight-hover-background-color);--button-secondary-selected-background-color: var(--onlight-selected-background-color);--button-secondary-hover-text-color: #2f87df;--button-text-background-color: hsla(0deg 0% 0% 0%);--button-text-border-color: hsla(0deg 0% 0% 0%);--button-text-text-color: var(--nx-blue-60);--button-text-hover-background-color: var(--onlight-hover-background-color);--button-text-hover-text-color: var(--secondary-button-hover-text-color);--button-destructive-background-color: var(--nx-white);--button-destructive-border-color: var(--nx-grey-10);--button-destructive-text-color: var(--nx-red-50);--button-destructive-hover-background-color: var(--onlight-hover-background-color);--button-destructive-hover-text-color: var(--nx-red-60);--button-disabled-background-color: var(--nx-grey-20);--button-disabled-border-color: hsla(0deg 0% 0% 0%);--button-disabled-text-color: var(--nx-grey-70);--divider-line-color: var(--nx-grey-10);--input-background-color: var(--nx-white);--input-border-color: var(--nx-grey-40);--input-text-color: var(--primary-text-color);--input-placeholder-text-color: var(--placeholder-text-color);--input-focus-border-color: var(--nx-blue-60);--input-error-color: var(--nx-red-50);--input-error-text-color: var(--nx-white);--input-warning-color: var(--nx-yellow-50);--input-warning-text-color: var(--primary-text-color);--input-information-color: var(--nx-blue-60);--input-information-text-color: var(--nx-white);--input-disabled-background-color: var(--nx-grey-20);--input-disabled-border-color: hsla(0deg 0% 0% 0%);--input-disabled-text-color: var(--disabled-text-color);--input-xfix-background-color: var(--nx-grey-20);--input-xfix-border-color: var(--nx-grey-40);--input-xfix-text-color: var(--nx-grey-70);--input-pills-background-color: var(--nx-white);--input-pills-border-color: var(--nx-grey-90);--input-pills-text-color: var(--nx-grey-90);--input-block-unselected-background-color: var(--nx-white);--input-block-unselected-border-color: var(--nx-grey-60);--input-block-unselected-disabled-background-color: var(--nx-white);--input-block-unselected-disabled-border-color: var(--nx-grey-40);--input-block-selected-background-color: var(--nx-blue-60);--input-block-selected-border-color: hsla(0deg 0% 0% 0%);--input-block-selected-disabled-background-color: var(--nx-grey-40);--input-block-selected-disabled-border-color: hsla(0deg 0% 0% 0%);--input-block-hover-background-color: var(--onlight-hover-background-color);--list-group-text-color: var(--nx-grey-60);--list-item-hover-background-color: var(--onlight-hover-background-color);--list-item-selected-background-color: var(--onlight-selected-background-color);--list-item-subtext-color: var(--nx-grey-50);--list-action-background-color: var(--onlight-hover-background-color);--list-action-border-color: var(--nx-grey-5);--list-action-text-color: var(--hyperlink-text-color);--global-header-background-color: var(--nx-blue-80)}:root{--nx-font-family-body: Open Sans, helvetica, arial, sans-serif;--nx-font-family-heading: Montserrat, helvetica, arial, sans-serif}:root{--ne-ref-color-violet-20: #D9C1F1;--ne-ref-color-violet-60: #7F30CF;--ne-ref-color-grey-90-20: #16171820;--ne-ref-color-green-40: #00D257;--ne-ref-color-green-50: #008738;--ne-ref-color-green-60: #006c2d;--ne-ref-color-yellow-60: #E1B200;--ne-ref-color-yellow-50: #FFCF1A;--ne-ref-color-yellow-40: #FFD948;--ne-ref-color-yellow-10: #FFF5D1;--ne-ref-color-grey-02: #FAFAFA;--ne-ref-color-grey-05: #EFF0F0;--ne-ref-color-grey-10: #E2E3E4;--ne-ref-color-grey-20: #C4C7CA;--ne-ref-color-grey-30: #A7ABAF;--ne-ref-color-grey40: #898F94;--ne-ref-color-grey-50: #6D7379;--ne-ref-color-grey-60: #575C61;--ne-ref-color-grey-70: #414548;--ne-ref-color-grey-80: #2C2E30;--ne-ref-color-grey-90: #161718;--ne-ref-color-red-10: #FFC7C7;--ne-ref-color-red-20: #FF8F8F;--ne-ref-color-red-30: #FF5757;--ne-ref-color-red-40: #FF1F1F;--ne-ref-color-red-50: #E60000;--ne-ref-color-red-60: #B80000;--ne-ref-color-red-70: #7C0D0E;--ne-ref-color-red-80: #530909;--ne-ref-color-red-90: #290405;--ne-ref-color-blue-05: #F0F7FF;--ne-ref-color-blue-10: #D6EBFF;--ne-ref-color-blue-20: #A3D1FF;--ne-ref-color-blue-30: #70B8FF;--ne-ref-color-blue-40: #3D9EFF;--ne-ref-color-blue-50: #0A85FF;--ne-ref-color-blue-60: #006BD6;--ne-ref-color-blue-70: #0052A3;--ne-ref-color-blue-80: #003870;--ne-ref-color-blue-90: #001F3D;--ne-ref-color-nintex-orange: #F56900;--ne-ref-color-white: #ffffff}:root{--ne-ref-border-radius-circle: 50%;--ne-ref-border-radius-large: 0.5em;--ne-ref-border-radius-medium: .25em;--ne-ref-border-radius-small: 0.125em;--ne-ref-border-radius-none: 0}:root{--ne-ref-spacing-xxx-large: 3em;--ne-ref-spacing-xx-large: 2.5em;--ne-ref-spacing-x-large: 2em;--ne-ref-spacing-large: 1.5em;--ne-ref-spacing-medium: 1em;--ne-ref-spacing-small: 0.75em;--ne-ref-spacing-x-small: 0.5em;--ne-ref-spacing-xx-small: 0.25em;--ne-ref-spacing-xxx-small: 0.125em;--ne-ref-spacing-none: 0}:root{--ne-ref-font-size-09: 1.75em;--ne-ref-font-size-08: 1.5em;--ne-ref-font-size-07: 1.25em;--ne-ref-font-size-06: 1.125em;--ne-ref-font-size-05: 1em;--ne-ref-font-size-04: 0.875em;--ne-ref-font-size-03: 0.8125em;--ne-ref-font-size-02: 0.75em;--ne-ref-font-size-01: 0.625em;--ne-ref-font-size-11: 2.625em;--ne-ref-font-size-10: 2em}:root{--ne-ref-border-width-large: 4px;--ne-ref-border-width-medium: 2px;--ne-ref-border-width-small: 1px}:root{--ne-ref-sizing-09: 2.25em;--ne-ref-sizing-08: 2em;--ne-ref-sizing-07: 1.75em;--ne-ref-sizing-06: 1.5em;--ne-ref-sizing-05: 1.25em;--ne-ref-sizing-04: 1em;--ne-ref-sizing-03: 0.75em;--ne-ref-sizing-02: 0.5em;--ne-ref-sizing-01: 0.25em;--ne-ref-sizing-14: 6em;--ne-ref-sizing-13: 5em;--ne-ref-sizing-12: 4em;--ne-ref-sizing-11: 3em;--ne-ref-sizing-10: 2.5em}:root{--ne-ref-font-weight-bold: Bold;--ne-ref-font-weight-semi-bold: SemiBold;--ne-ref-font-weight-regular: Regular}:root{--ne-ref-font-family-montserrat: Montserrat;--ne-ref-font-family-open-sans: Open Sans}:root{--ne-ref-line-height-expanded: 2em;--ne-ref-line-height-regular: 1.5em;--ne-ref-line-height-condensed: 1.2em}:root{--ne-ref-paragraph-spacing-07: 2.5em;--ne-ref-paragraph-spacing-06: 2.25em;--ne-ref-paragraph-spacing-05: 2em;--ne-ref-paragraph-spacing-04: 1.75em;--ne-ref-paragraph-spacing-03: 1.625em;--ne-ref-paragraph-spacing-02: 1.5em;--ne-ref-paragraph-spacing-01: 1.25em}:root{--ne-ref-letter-spacing-09: 0.21em;--ne-ref-letter-spacing-08: 0.18em;--ne-ref-letter-spacing-07: 0.15em;--ne-ref-letter-spacing-06: 0.135em;--ne-ref-letter-spacing-05: 0.12em;--ne-ref-letter-spacing-04: 0.105em;--ne-ref-letter-spacing-03: 0.0975em;--ne-ref-letter-spacing-02: 0.09em;--ne-ref-letter-spacing-01: 0.075em;--ne-ref-letter-spacing-11: 0.315em;--ne-ref-letter-spacing-10: 0.24em}:root{--ne-ref-text-decoration-underline: underline;--ne-ref-text-decoration-none: none}:root{--ne-ref-shadow-level2: 0px 0px 8px var(--ne-ref-color-grey-90-20);--ne-ref-shadow-level1: 0px 0px 8px var(--ne-ref-color-grey-90-20)}:root{--ne-alias-color-highlight: var(--ne-ref-color-nintex-orange);--ne-alias-color-icon-white: var(--ne-ref-color-white);--ne-alias-color-icon-default: var(--ne-ref-color-grey-90);--ne-alias-color-status-success-light: var(--ne-ref-color-green-40);--ne-alias-color-status-success-default: var(--ne-ref-color-green-50);--ne-alias-color-status-success-dark: var(--ne-ref-color-green-60);--ne-alias-color-status-info-light: var(--ne-ref-color-blue-50);--ne-alias-color-status-info-default: var(--ne-ref-color-blue-60);--ne-alias-color-status-info-dark: var(--ne-ref-color-blue-70);--ne-alias-color-status-active-lighter: var(--ne-ref-color-blue-40);--ne-alias-color-status-active-light: var(--ne-ref-color-blue-50);--ne-alias-color-status-active-default: var(--ne-ref-color-blue-60);--ne-alias-color-status-warning-light: var(--ne-ref-color-yellow-40);--ne-alias-color-status-warning-default: var(--ne-ref-color-yellow-50);--ne-alias-color-status-warning-dark: var(--ne-ref-color-yellow-60);--ne-alias-color-status-error-light: var(--ne-ref-color-red-40);--ne-alias-color-status-error-default: var(--ne-ref-color-red-50);--ne-alias-color-status-error-dark: var(--ne-ref-color-red-60);--ne-alias-color-destructive-light: var(--ne-ref-color-red-40);--ne-alias-color-destructive-default: var(--ne-ref-color-red-60);--ne-alias-color-destructive-dark: var(--ne-ref-color-red-70);--ne-alias-color-state-focus-on-red: var(--ne-ref-color-red-70);--ne-alias-color-state-focus-on-white: var(--ne-ref-color-blue-05);--ne-alias-color-state-hover-on-red: var(--ne-ref-color-red-70);--ne-alias-color-state-hover-on-white: var(--ne-ref-color-blue-05);--ne-alias-color-state-disabled-dark: var(--ne-ref-color-grey-90);--ne-alias-color-state-disabled-default: var(--ne-ref-color-grey-50);--ne-alias-color-state-disabled-light: var(--ne-ref-color-grey-30);--ne-alias-color-accent-light: var(--ne-ref-color-blue-50);--ne-alias-color-accent-default: var(--ne-ref-color-blue-60);--ne-alias-color-accent-dark: var(--ne-ref-color-blue-70);--ne-alias-color-text-light: var(--ne-ref-color-grey-60);--ne-alias-color-text-default: var(--ne-ref-color-grey-90);--ne-alias-color-text-light-text-on-dark-bg: var(--ne-ref-color-white);--ne-alias-color-state-focus-on-blue: var(--ne-alias-color-accent-dark);--ne-alias-color-state-hover-on-blue: var(--ne-alias-color-accent-dark)}:root{--ne-alias-font-family-title: var(--ne-ref-font-family-montserrat);--ne-alias-font-family-body: var(--ne-ref-font-family-open-sans)}:root{--ne-alias-font-size-title: var(--ne-ref-font-size-06);--ne-alias-font-size-subtext: var(--ne-ref-font-size-02);--ne-alias-font-size-body: var(--ne-ref-font-size-04)}:root{--ne-alias-border-width-focus: var(--ne-ref-border-width-large);--ne-alias-border-width-default: var(--ne-ref-border-width-small)}:root{--ne-alias-sizing-icon-xx-large: var(--ne-ref-sizing-11);--ne-alias-sizing-icon-x-large: var(--ne-ref-sizing-08);--ne-alias-sizing-icon-large: var(--ne-ref-sizing-06);--ne-alias-sizing-icon-default: var(--ne-ref-sizing-04);--ne-alias-sizing-icon-small: var(--ne-ref-sizing-02)}:root{--ne-alias-border-focus: var(--ne-ref-color-blue-20);--ne-alias-border-dark-grey: var(--ne-ref-color-grey40);--ne-alias-border-grey: var(--ne-ref-color-grey-10)}\n\n/*# sourceMappingURL=earthling-base.min.css.map */","",{version:3,sources:["file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/typography.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/color.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-color.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-border-radius.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-spacing.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-font-size.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-border-width.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-sizing.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-font-weight.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-font-family.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-line-height.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-paragraph-spacing.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-letter-spacing.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-text-decoration.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-shadow.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-color.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-font-family.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-font-size.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-border-width.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-sizing.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-border.scss","webpack://./../../node_modules/@nintexglobal/earthling-styles/dist/earthling-base.min.css"],names:[],mappings:"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",sourceRoot:""}]);const s=a},2609:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",o=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),o&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),o&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,o,n,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);o&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),r&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=r):d[2]=r),n&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=n):d[4]="".concat(n)),t.push(d))}},t}},272:e=>{"use strict";e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),n="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(n," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},6062:e=>{"use strict";var t=[];function r(e){for(var r=-1,o=0;o<t.length;o++)if(t[o].identifier===e){r=o;break}return r}function o(e,o){for(var i={},a=[],s=0;s<e.length;s++){var l=e[s],c=o.base?l[0]+o.base:l[0],d=i[c]||0,u="".concat(c," ").concat(d);i[c]=d+1;var h=r(u),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==h)t[h].references++,t[h].updater(p);else{var f=n(p,o);o.byIndex=s,t.splice(s,0,{identifier:u,updater:f,references:1})}a.push(u)}return a}function n(e,t){var r=t.domAPI(t);r.update(e);return function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,n){var i=o(e=e||[],n=n||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=r(i[a]);t[s].references--}for(var l=o(e,n),c=0;c<i.length;c++){var d=r(i[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}i=l}}},6793:e=>{"use strict";var t={};e.exports=function(e,r){var o=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(r)}},1173:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},7892:(e,t,r)=>{"use strict";e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},4036:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var o="";r.supports&&(o+="@supports (".concat(r.supports,") {")),r.media&&(o+="@media ".concat(r.media," {"));var n=void 0!==r.layer;n&&(o+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),o+=r.css,n&&(o+="}"),r.media&&(o+="}"),r.supports&&(o+="}");var i=r.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},2464:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},9671:e=>{function t(e){return Promise.resolve().then((()=>{var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}))}t.keys=()=>[],t.resolve=t,t.id=9671,e.exports=t},9793:(e,t,r)=>{"use strict";r.d(t,{ec:()=>c,i1:()=>d,iv:()=>l});const o=window,n=o.ShadowRoot&&(void 0===o.ShadyCSS||o.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,i=Symbol(),a=new WeakMap;class s{constructor(e,t,r){if(this._$cssResult$=!0,r!==i)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=e,this.t=t}get styleSheet(){let e=this.o;const t=this.t;if(n&&void 0===e){const r=void 0!==t&&1===t.length;r&&(e=a.get(t)),void 0===e&&((this.o=e=new CSSStyleSheet).replaceSync(this.cssText),r&&a.set(t,e))}return e}toString(){return this.cssText}}const l=(e,...t)=>{const r=1===e.length?e[0]:t.reduce(((t,r,o)=>t+(e=>{if(!0===e._$cssResult$)return e.cssText;if("number"==typeof e)return e;throw Error("Value passed to 'css' function must be a 'css' function result: "+e+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(r)+e[o+1]),e[0]);return new s(r,e,i)},c=(e,t)=>{n?e.adoptedStyleSheets=t.map((e=>e instanceof CSSStyleSheet?e:e.styleSheet)):t.forEach((t=>{const r=document.createElement("style"),n=o.litNonce;void 0!==n&&r.setAttribute("nonce",n),r.textContent=t.cssText,e.appendChild(r)}))},d=n?e=>e:e=>e instanceof CSSStyleSheet?(e=>{let t="";for(const r of e.cssRules)t+=r.cssText;return(e=>new s("string"==typeof e?e:e+"",void 0,i))(t)})(e):e},3311:(e,t,r)=>{"use strict";var o;r.d(t,{Jb:()=>$,Ld:()=>S,_$LH:()=>V,dy:()=>_,sY:()=>U});const n=window,i=n.trustedTypes,a=i?i.createPolicy("lit-html",{createHTML:e=>e}):void 0,s="$lit$",l=`lit$${(Math.random()+"").slice(9)}$`,c="?"+l,d=`<${c}>`,u=document,h=()=>u.createComment(""),p=e=>null===e||"object"!=typeof e&&"function"!=typeof e,f=Array.isArray,g=e=>f(e)||"function"==typeof(null==e?void 0:e[Symbol.iterator]),v="[ \t\n\f\r]",b=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,m=/-->/g,y=/>/g,A=RegExp(`>|${v}(?:([^\\s"'>=/]+)(${v}*=${v}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),w=/'/g,x=/"/g,k=/^(?:script|style|textarea|title)$/i,C=e=>(t,...r)=>({_$litType$:e,strings:t,values:r}),_=C(1),$=(C(2),Symbol.for("lit-noChange")),S=Symbol.for("lit-nothing"),z=new WeakMap,E=u.createTreeWalker(u,129,null,!1);function L(e,t){if(!Array.isArray(e)||!e.hasOwnProperty("raw"))throw Error("invalid template strings array");return void 0!==a?a.createHTML(t):t}const T=(e,t)=>{const r=e.length-1,o=[];let n,i=2===t?"<svg>":"",a=b;for(let t=0;t<r;t++){const r=e[t];let c,u,h=-1,p=0;for(;p<r.length&&(a.lastIndex=p,u=a.exec(r),null!==u);)p=a.lastIndex,a===b?"!--"===u[1]?a=m:void 0!==u[1]?a=y:void 0!==u[2]?(k.test(u[2])&&(n=RegExp("</"+u[2],"g")),a=A):void 0!==u[3]&&(a=A):a===A?">"===u[0]?(a=null!=n?n:b,h=-1):void 0===u[1]?h=-2:(h=a.lastIndex-u[2].length,c=u[1],a=void 0===u[3]?A:'"'===u[3]?x:w):a===x||a===w?a=A:a===m||a===y?a=b:(a=A,n=void 0);const f=a===A&&e[t+1].startsWith("/>")?" ":"";i+=a===b?r+d:h>=0?(o.push(c),r.slice(0,h)+s+r.slice(h)+l+f):r+l+(-2===h?(o.push(void 0),t):f)}return[L(e,i+(e[r]||"<?>")+(2===t?"</svg>":"")),o]};class P{constructor({strings:e,_$litType$:t},r){let o;this.parts=[];let n=0,a=0;const d=e.length-1,u=this.parts,[p,f]=T(e,t);if(this.el=P.createElement(p,r),E.currentNode=this.el.content,2===t){const e=this.el.content,t=e.firstChild;t.remove(),e.append(...t.childNodes)}for(;null!==(o=E.nextNode())&&u.length<d;){if(1===o.nodeType){if(o.hasAttributes()){const e=[];for(const t of o.getAttributeNames())if(t.endsWith(s)||t.startsWith(l)){const r=f[a++];if(e.push(t),void 0!==r){const e=o.getAttribute(r.toLowerCase()+s).split(l),t=/([.?@])?(.*)/.exec(r);u.push({type:1,index:n,name:t[2],strings:e,ctor:"."===t[1]?B:"?"===t[1]?R:"@"===t[1]?I:N})}else u.push({type:6,index:n})}for(const t of e)o.removeAttribute(t)}if(k.test(o.tagName)){const e=o.textContent.split(l),t=e.length-1;if(t>0){o.textContent=i?i.emptyScript:"";for(let r=0;r<t;r++)o.append(e[r],h()),E.nextNode(),u.push({type:2,index:++n});o.append(e[t],h())}}}else if(8===o.nodeType)if(o.data===c)u.push({type:2,index:n});else{let e=-1;for(;-1!==(e=o.data.indexOf(l,e+1));)u.push({type:7,index:n}),e+=l.length-1}n++}}static createElement(e,t){const r=u.createElement("template");return r.innerHTML=e,r}}function D(e,t,r=e,o){var n,i,a,s;if(t===$)return t;let l=void 0!==o?null===(n=r._$Co)||void 0===n?void 0:n[o]:r._$Cl;const c=p(t)?void 0:t._$litDirective$;return(null==l?void 0:l.constructor)!==c&&(null===(i=null==l?void 0:l._$AO)||void 0===i||i.call(l,!1),void 0===c?l=void 0:(l=new c(e),l._$AT(e,r,o)),void 0!==o?(null!==(a=(s=r)._$Co)&&void 0!==a?a:s._$Co=[])[o]=l:r._$Cl=l),void 0!==l&&(t=D(e,l._$AS(e,t.values),l,o)),t}class F{constructor(e,t){this._$AV=[],this._$AN=void 0,this._$AD=e,this._$AM=t}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(e){var t;const{el:{content:r},parts:o}=this._$AD,n=(null!==(t=null==e?void 0:e.creationScope)&&void 0!==t?t:u).importNode(r,!0);E.currentNode=n;let i=E.nextNode(),a=0,s=0,l=o[0];for(;void 0!==l;){if(a===l.index){let t;2===l.type?t=new O(i,i.nextSibling,this,e):1===l.type?t=new l.ctor(i,l.name,l.strings,this,e):6===l.type&&(t=new j(i,this,e)),this._$AV.push(t),l=o[++s]}a!==(null==l?void 0:l.index)&&(i=E.nextNode(),a++)}return E.currentNode=u,n}v(e){let t=0;for(const r of this._$AV)void 0!==r&&(void 0!==r.strings?(r._$AI(e,r,t),t+=r.strings.length-2):r._$AI(e[t])),t++}}class O{constructor(e,t,r,o){var n;this.type=2,this._$AH=S,this._$AN=void 0,this._$AA=e,this._$AB=t,this._$AM=r,this.options=o,this._$Cp=null===(n=null==o?void 0:o.isConnected)||void 0===n||n}get _$AU(){var e,t;return null!==(t=null===(e=this._$AM)||void 0===e?void 0:e._$AU)&&void 0!==t?t:this._$Cp}get parentNode(){let e=this._$AA.parentNode;const t=this._$AM;return void 0!==t&&11===(null==e?void 0:e.nodeType)&&(e=t.parentNode),e}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(e,t=this){e=D(this,e,t),p(e)?e===S||null==e||""===e?(this._$AH!==S&&this._$AR(),this._$AH=S):e!==this._$AH&&e!==$&&this._(e):void 0!==e._$litType$?this.g(e):void 0!==e.nodeType?this.$(e):g(e)?this.T(e):this._(e)}k(e){return this._$AA.parentNode.insertBefore(e,this._$AB)}$(e){this._$AH!==e&&(this._$AR(),this._$AH=this.k(e))}_(e){this._$AH!==S&&p(this._$AH)?this._$AA.nextSibling.data=e:this.$(u.createTextNode(e)),this._$AH=e}g(e){var t;const{values:r,_$litType$:o}=e,n="number"==typeof o?this._$AC(e):(void 0===o.el&&(o.el=P.createElement(L(o.h,o.h[0]),this.options)),o);if((null===(t=this._$AH)||void 0===t?void 0:t._$AD)===n)this._$AH.v(r);else{const e=new F(n,this),t=e.u(this.options);e.v(r),this.$(t),this._$AH=e}}_$AC(e){let t=z.get(e.strings);return void 0===t&&z.set(e.strings,t=new P(e)),t}T(e){f(this._$AH)||(this._$AH=[],this._$AR());const t=this._$AH;let r,o=0;for(const n of e)o===t.length?t.push(r=new O(this.k(h()),this.k(h()),this,this.options)):r=t[o],r._$AI(n),o++;o<t.length&&(this._$AR(r&&r._$AB.nextSibling,o),t.length=o)}_$AR(e=this._$AA.nextSibling,t){var r;for(null===(r=this._$AP)||void 0===r||r.call(this,!1,!0,t);e&&e!==this._$AB;){const t=e.nextSibling;e.remove(),e=t}}setConnected(e){var t;void 0===this._$AM&&(this._$Cp=e,null===(t=this._$AP)||void 0===t||t.call(this,e))}}class N{constructor(e,t,r,o,n){this.type=1,this._$AH=S,this._$AN=void 0,this.element=e,this.name=t,this._$AM=o,this.options=n,r.length>2||""!==r[0]||""!==r[1]?(this._$AH=Array(r.length-1).fill(new String),this.strings=r):this._$AH=S}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(e,t=this,r,o){const n=this.strings;let i=!1;if(void 0===n)e=D(this,e,t,0),i=!p(e)||e!==this._$AH&&e!==$,i&&(this._$AH=e);else{const o=e;let a,s;for(e=n[0],a=0;a<n.length-1;a++)s=D(this,o[r+a],t,a),s===$&&(s=this._$AH[a]),i||(i=!p(s)||s!==this._$AH[a]),s===S?e=S:e!==S&&(e+=(null!=s?s:"")+n[a+1]),this._$AH[a]=s}i&&!o&&this.j(e)}j(e){e===S?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=e?e:"")}}class B extends N{constructor(){super(...arguments),this.type=3}j(e){this.element[this.name]=e===S?void 0:e}}const M=i?i.emptyScript:"";class R extends N{constructor(){super(...arguments),this.type=4}j(e){e&&e!==S?this.element.setAttribute(this.name,M):this.element.removeAttribute(this.name)}}class I extends N{constructor(e,t,r,o,n){super(e,t,r,o,n),this.type=5}_$AI(e,t=this){var r;if((e=null!==(r=D(this,e,t,0))&&void 0!==r?r:S)===$)return;const o=this._$AH,n=e===S&&o!==S||e.capture!==o.capture||e.once!==o.once||e.passive!==o.passive,i=e!==S&&(o===S||n);n&&this.element.removeEventListener(this.name,this,o),i&&this.element.addEventListener(this.name,this,e),this._$AH=e}handleEvent(e){var t,r;"function"==typeof this._$AH?this._$AH.call(null!==(r=null===(t=this.options)||void 0===t?void 0:t.host)&&void 0!==r?r:this.element,e):this._$AH.handleEvent(e)}}class j{constructor(e,t,r){this.element=e,this.type=6,this._$AN=void 0,this._$AM=t,this.options=r}get _$AU(){return this._$AM._$AU}_$AI(e){D(this,e)}}const V={O:s,P:l,A:c,C:1,M:T,L:F,D:g,R:D,I:O,V:N,H:R,N:I,U:B,F:j},H=n.litHtmlPolyfillSupport;null==H||H(P,O),(null!==(o=n.litHtmlVersions)&&void 0!==o?o:n.litHtmlVersions=[]).push("2.7.5");const U=(e,t,r)=>{var o,n;const i=null!==(o=null==r?void 0:r.renderBefore)&&void 0!==o?o:t;let a=i._$litPart$;if(void 0===a){const e=null!==(n=null==r?void 0:r.renderBefore)&&void 0!==n?n:null;i._$litPart$=a=new O(t.insertBefore(h(),e),e,void 0,null!=r?r:{})}return a._$AI(e),a}},3192:(e,t,r)=>{"use strict";r.d(t,{oi:()=>b,iv:()=>n.iv,dy:()=>v.dy,Ld:()=>v.Ld});var o,n=r(9793);const i=window,a=i.trustedTypes,s=a?a.emptyScript:"",l=i.reactiveElementPolyfillSupport,c={toAttribute(e,t){switch(t){case Boolean:e=e?s:null;break;case Object:case Array:e=null==e?e:JSON.stringify(e)}return e},fromAttribute(e,t){let r=e;switch(t){case Boolean:r=null!==e;break;case Number:r=null===e?null:Number(e);break;case Object:case Array:try{r=JSON.parse(e)}catch(e){r=null}}return r}},d=(e,t)=>t!==e&&(t==t||e==e),u={attribute:!0,type:String,converter:c,reflect:!1,hasChanged:d},h="finalized";class p extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(e){var t;this.finalize(),(null!==(t=this.h)&&void 0!==t?t:this.h=[]).push(e)}static get observedAttributes(){this.finalize();const e=[];return this.elementProperties.forEach(((t,r)=>{const o=this._$Ep(r,t);void 0!==o&&(this._$Ev.set(o,r),e.push(o))})),e}static createProperty(e,t=u){if(t.state&&(t.attribute=!1),this.finalize(),this.elementProperties.set(e,t),!t.noAccessor&&!this.prototype.hasOwnProperty(e)){const r="symbol"==typeof e?Symbol():"__"+e,o=this.getPropertyDescriptor(e,r,t);void 0!==o&&Object.defineProperty(this.prototype,e,o)}}static getPropertyDescriptor(e,t,r){return{get(){return this[t]},set(o){const n=this[e];this[t]=o,this.requestUpdate(e,n,r)},configurable:!0,enumerable:!0}}static getPropertyOptions(e){return this.elementProperties.get(e)||u}static finalize(){if(this.hasOwnProperty(h))return!1;this[h]=!0;const e=Object.getPrototypeOf(this);if(e.finalize(),void 0!==e.h&&(this.h=[...e.h]),this.elementProperties=new Map(e.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const e=this.properties,t=[...Object.getOwnPropertyNames(e),...Object.getOwnPropertySymbols(e)];for(const r of t)this.createProperty(r,e[r])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(e){const t=[];if(Array.isArray(e)){const r=new Set(e.flat(1/0).reverse());for(const e of r)t.unshift((0,n.i1)(e))}else void 0!==e&&t.push((0,n.i1)(e));return t}static _$Ep(e,t){const r=t.attribute;return!1===r?void 0:"string"==typeof r?r:"string"==typeof e?e.toLowerCase():void 0}u(){var e;this._$E_=new Promise((e=>this.enableUpdating=e)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(e=this.constructor.h)||void 0===e||e.forEach((e=>e(this)))}addController(e){var t,r;(null!==(t=this._$ES)&&void 0!==t?t:this._$ES=[]).push(e),void 0!==this.renderRoot&&this.isConnected&&(null===(r=e.hostConnected)||void 0===r||r.call(e))}removeController(e){var t;null===(t=this._$ES)||void 0===t||t.splice(this._$ES.indexOf(e)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((e,t)=>{this.hasOwnProperty(t)&&(this._$Ei.set(t,this[t]),delete this[t])}))}createRenderRoot(){var e;const t=null!==(e=this.shadowRoot)&&void 0!==e?e:this.attachShadow(this.constructor.shadowRootOptions);return(0,n.ec)(t,this.constructor.elementStyles),t}connectedCallback(){var e;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostConnected)||void 0===t?void 0:t.call(e)}))}enableUpdating(e){}disconnectedCallback(){var e;null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostDisconnected)||void 0===t?void 0:t.call(e)}))}attributeChangedCallback(e,t,r){this._$AK(e,r)}_$EO(e,t,r=u){var o;const n=this.constructor._$Ep(e,r);if(void 0!==n&&!0===r.reflect){const i=(void 0!==(null===(o=r.converter)||void 0===o?void 0:o.toAttribute)?r.converter:c).toAttribute(t,r.type);this._$El=e,null==i?this.removeAttribute(n):this.setAttribute(n,i),this._$El=null}}_$AK(e,t){var r;const o=this.constructor,n=o._$Ev.get(e);if(void 0!==n&&this._$El!==n){const e=o.getPropertyOptions(n),i="function"==typeof e.converter?{fromAttribute:e.converter}:void 0!==(null===(r=e.converter)||void 0===r?void 0:r.fromAttribute)?e.converter:c;this._$El=n,this[n]=i.fromAttribute(t,e.type),this._$El=null}}requestUpdate(e,t,r){let o=!0;void 0!==e&&(((r=r||this.constructor.getPropertyOptions(e)).hasChanged||d)(this[e],t)?(this._$AL.has(e)||this._$AL.set(e,t),!0===r.reflect&&this._$El!==e&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(e,r))):o=!1),!this.isUpdatePending&&o&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(e){Promise.reject(e)}const e=this.scheduleUpdate();return null!=e&&await e,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var e;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((e,t)=>this[t]=e)),this._$Ei=void 0);let t=!1;const r=this._$AL;try{t=this.shouldUpdate(r),t?(this.willUpdate(r),null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostUpdate)||void 0===t?void 0:t.call(e)})),this.update(r)):this._$Ek()}catch(e){throw t=!1,this._$Ek(),e}t&&this._$AE(r)}willUpdate(e){}_$AE(e){var t;null===(t=this._$ES)||void 0===t||t.forEach((e=>{var t;return null===(t=e.hostUpdated)||void 0===t?void 0:t.call(e)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(e)),this.updated(e)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(e){return!0}update(e){void 0!==this._$EC&&(this._$EC.forEach(((e,t)=>this._$EO(t,this[t],e))),this._$EC=void 0),this._$Ek()}updated(e){}firstUpdated(e){}}p[h]=!0,p.elementProperties=new Map,p.elementStyles=[],p.shadowRootOptions={mode:"open"},null==l||l({ReactiveElement:p}),(null!==(o=i.reactiveElementVersions)&&void 0!==o?o:i.reactiveElementVersions=[]).push("1.6.2");var f,g,v=r(3311);class b extends p{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var e,t;const r=super.createRenderRoot();return null!==(e=(t=this.renderOptions).renderBefore)&&void 0!==e||(t.renderBefore=r.firstChild),r}update(e){const t=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(e),this._$Do=(0,v.sY)(t,this.renderRoot,this.renderOptions)}connectedCallback(){var e;super.connectedCallback(),null===(e=this._$Do)||void 0===e||e.setConnected(!0)}disconnectedCallback(){var e;super.disconnectedCallback(),null===(e=this._$Do)||void 0===e||e.setConnected(!1)}render(){return v.Jb}}b.finalized=!0,b._$litElement$=!0,null===(f=globalThis.litElementHydrateSupport)||void 0===f||f.call(globalThis,{LitElement:b});const m=globalThis.litElementPolyfillSupport;null==m||m({LitElement:b});(null!==(g=globalThis.litElementVersions)&&void 0!==g?g:globalThis.litElementVersions=[]).push("3.3.2")}},t={};function r(o){var n=t[o];if(void 0!==n)return n.exports;var i=t[o]={id:o,exports:{}};return e[o](i,i.exports,r),i.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.nc=void 0,(()=>{"use strict";r(2443);class e{constructor(){this.settled=!1,this.promise=new Promise(((e,t)=>{this._resolve=e,this._reject=t}))}resolve(e){this.settled=!0,this._resolve(e)}reject(e){this.settled=!0,this._reject(e)}}const t=(e,t,r)=>{let o=e[0];for(let n=1;n<e.length;n++)o+=t[r?r[n-1]:n-1],o+=e[n];return o},o=[];for(let e=0;e<256;e++)o[e]=(e>>4&15).toString(16)+(15&e).toString(16);const n="",i="h",a="s";function s(e,t){return(t?i:a)+function(e){let t=0,r=8997,n=0,i=33826,a=0,s=40164,l=0,c=52210;for(let o=0;o<e.length;o++)r^=e.charCodeAt(o),t=435*r,n=435*i,a=435*s,l=435*c,a+=r<<8,l+=i<<8,n+=t>>>16,r=65535&t,a+=n>>>16,i=65535&n,c=l+(a>>>16)&65535,s=65535&a;return o[c>>8]+o[255&c]+o[s>>8]+o[255&s]+o[i>>8]+o[255&i]+o[r>>8]+o[255&r]}("string"==typeof e?e:e.join(n))}const l=new WeakMap,c=new Map;function d(e,r,o){var n;if(e){const i=null!==(n=null==o?void 0:o.id)&&void 0!==n?n:function(e){const t="string"==typeof e?e:e.strings;let r=c.get(t);void 0===r&&(r=s(t,"string"!=typeof e&&!("strTag"in e)),c.set(t,r));return r}(r),a=e[i];if(a){if("string"==typeof a)return a;if("strTag"in a)return t(a.strings,r.values,a.values);{let e=l.get(a);return void 0===e&&(e=a.values,l.set(a,e)),{...a,values:e.map((e=>r.values[e]))}}}}return(e=>{return"string"!=typeof(r=e)&&"strTag"in r?t(e.strings,e.values):e;var r})(r)}function u(e){window.dispatchEvent(new CustomEvent("lit-localize-status",{detail:e}))}let h,p,f,g,v,b="",m=new e;m.resolve();let y=0;const A=()=>b,w=t=>{if(t===(null!=h?h:b))return m.promise;if(!f||!g)throw new Error("Internal error");if(!f.has(t))throw new Error("Invalid locale code");y++;const r=y;h=t,m.settled&&(m=new e),u({status:"loading",loadingLocale:t});return(t===p?Promise.resolve({templates:void 0}):g(t)).then((e=>{y===r&&(b=t,h=void 0,v=e.templates,u({status:"ready",readyLocale:t}),m.resolve())}),(e=>{y===r&&(u({status:"error",errorLocale:t,errorMessage:e.toString()}),m.reject(e))})),m.promise};let x=null,k=!1;const{getLocale:C,setLocale:_}=(e=>(function(e){if(k)throw new Error("lit-localize can only be configured once");x=e,k=!0}(((e,t)=>d(v,e,t))),b=p=e.sourceLocale,f=new Set(e.targetLocales),f.add(e.sourceLocale),g=e.loadLocale,{getLocale:A,setLocale:w}))({sourceLocale:"en",targetLocales:[],loadLocale:e=>r(9671)(`./${e}.js`)}),$=new WeakMap;function S(e){return t=>{if(function(e,t){let r=t;for(;r;){if($.get(r)===e)return!0;r=Object.getPrototypeOf(r)}return!1}(e,t))return t;const r=e(t);return $.set(r,e),r}}var z=r(9793);const E=!!ShadowRoot.prototype.createElement,L=S((e=>class extends e{static get scopedElements(){return{}}static get shadowRootOptions(){return this.__shadowRootOptions}static set shadowRootOptions(e){this.__shadowRootOptions=e}static get elementStyles(){return this.__elementStyles}static set elementStyles(e){this.__elementStyles=e}constructor(...e){super(),this.renderOptions=this.renderOptions||void 0}get registry(){return this.constructor.__registry}set registry(e){this.constructor.__registry=e}createRenderRoot(){const{scopedElements:e,shadowRootOptions:t,elementStyles:r}=this.constructor;if(!this.registry||this.registry===this.constructor.__registry&&!Object.prototype.hasOwnProperty.call(this.constructor,"__registry")){this.registry=E?new CustomElementRegistry:customElements;for(const[t,r]of Object.entries(e))this.defineScopedElement(t,r)}const o={mode:"open",...t,customElements:this.registry},n=this.attachShadow(o);return E&&(this.renderOptions.creationScope=n),n instanceof ShadowRoot&&((0,z.ec)(n,r),this.renderOptions.renderBefore=this.renderOptions.renderBefore||n.firstChild),n}createScopedElement(e){return(E?this.shadowRoot:document).createElement(e)}defineScopedElement(e,t){const r=this.registry.get(e);return r&&!1===E&&r!==t&&console.error([`You are trying to re-register the "${e}" custom element with a different class via ScopedElementsMixin.`,"This is only possible with a CustomElementRegistry.","Your browser does not support this feature so you will need to load a polyfill for it.",'Load "@webcomponents/scoped-custom-element-registry" before you register ANY web component to the global customElements registry.','e.g. add "<script src="/node_modules/@webcomponents/scoped-custom-element-registry/scoped-custom-element-registry.min.js"><\/script>" as your first script tag.',"For more details you can visit https://open-wc.org/docs/development/scoped-elements/"].join("\n")),r?this.registry.get(e):this.registry.define(e,t)}getScopedTagName(e){return this.constructor.getScopedTagName(e)}static getScopedTagName(e){return this.__registry.get(e)?e:void 0}}));var T=r(3192);const P=e=>t=>"function"==typeof t?((e,t)=>(customElements.define(e,t),t))(e,t):((e,t)=>{const{kind:r,elements:o}=t;return{kind:r,elements:o,finisher(t){customElements.define(e,t)}}})(e,t),D=(e,t)=>"method"===t.kind&&t.descriptor&&!("value"in t.descriptor)?{...t,finisher(r){r.createProperty(t.key,e)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:t.key,initializer(){"function"==typeof t.initializer&&(this[t.key]=t.initializer.call(this))},finisher(r){r.createProperty(t.key,e)}},F=(e,t,r)=>{t.constructor.createProperty(r,e)};function O(e){return(t,r)=>void 0!==r?F(e,t,r):D(e,t)}function N(e){return O({...e,state:!0})}const B=({finisher:e,descriptor:t})=>(r,o)=>{var n;if(void 0===o){const o=null!==(n=r.originalKey)&&void 0!==n?n:r.key,i=null!=t?{kind:"method",placement:"prototype",key:o,descriptor:t(r.key)}:{...r,key:o};return null!=e&&(i.finisher=function(t){e(t,o)}),i}{const n=r.constructor;void 0!==t&&Object.defineProperty(r,o,t(o)),null==e||e(n,o)}};var M;const R=null!=(null===(M=window.HTMLSlotElement)||void 0===M?void 0:M.prototype.assignedElements)?(e,t)=>e.assignedElements(t):(e,t)=>e.assignedNodes(t).filter((e=>e.nodeType===Node.ELEMENT_NODE));function I(e,t,r){let o,n=e;return"object"==typeof e?(n=e.slot,o=e):o={flatten:t},r?function(e){const{slot:t,selector:r}=null!=e?e:{};return B({descriptor:o=>({get(){var o;const n="slot"+(t?`[name=${t}]`:":not([name])"),i=null===(o=this.renderRoot)||void 0===o?void 0:o.querySelector(n),a=null!=i?R(i,e):[];return r?a.filter((e=>e.matches(r))):a},enumerable:!0,configurable:!0})})}({slot:n,flatten:t,selector:r}):B({descriptor:e=>({get(){var e,t;const r="slot"+(n?`[name=${n}]`:":not([name])"),i=null===(e=this.renderRoot)||void 0===e?void 0:e.querySelector(r);return null!==(t=null==i?void 0:i.assignedNodes(o))&&void 0!==t?t:[]},enumerable:!0,configurable:!0})})}var j=function(e,t){return j=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},j(e,t)};function V(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}j(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}Object.create;function H(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],o=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&o>=e.length&&(e=void 0),{value:e&&e[o++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function U(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var o,n,i=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(o=i.next()).done;)a.push(o.value)}catch(e){n={error:e}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}return a}function q(e,t,r){if(r||2===arguments.length)for(var o,n=0,i=t.length;n<i;n++)!o&&n in t||(o||(o=Array.prototype.slice.call(t,0,n)),o[n]=t[n]);return e.concat(o||Array.prototype.slice.call(t))}Object.create;"function"==typeof SuppressedError&&SuppressedError;function Z(e){return"function"==typeof e}function K(e){var t=e((function(e){Error.call(e),e.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}var W=K((function(e){return function(t){e(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}));function J(e,t){if(e){var r=e.indexOf(t);0<=r&&e.splice(r,1)}}var G=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}var t;return e.prototype.unsubscribe=function(){var e,t,r,o,n;if(!this.closed){this.closed=!0;var i=this._parentage;if(i)if(this._parentage=null,Array.isArray(i))try{for(var a=H(i),s=a.next();!s.done;s=a.next()){s.value.remove(this)}}catch(t){e={error:t}}finally{try{s&&!s.done&&(t=a.return)&&t.call(a)}finally{if(e)throw e.error}}else i.remove(this);var l=this.initialTeardown;if(Z(l))try{l()}catch(e){n=e instanceof W?e.errors:[e]}var c=this._finalizers;if(c){this._finalizers=null;try{for(var d=H(c),u=d.next();!u.done;u=d.next()){var h=u.value;try{Q(h)}catch(e){n=null!=n?n:[],e instanceof W?n=q(q([],U(n)),U(e.errors)):n.push(e)}}}catch(e){r={error:e}}finally{try{u&&!u.done&&(o=d.return)&&o.call(d)}finally{if(r)throw r.error}}}if(n)throw new W(n)}},e.prototype.add=function(t){var r;if(t&&t!==this)if(this.closed)Q(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(r=this._finalizers)&&void 0!==r?r:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&J(t,e)},e.prototype.remove=function(t){var r=this._finalizers;r&&J(r,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e}(),Y=G.EMPTY;function X(e){return e instanceof G||e&&"closed"in e&&Z(e.remove)&&Z(e.add)&&Z(e.unsubscribe)}function Q(e){Z(e)?e():e.unsubscribe()}var ee={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},te={setTimeout:function(e,t){for(var r=[],o=2;o<arguments.length;o++)r[o-2]=arguments[o];var n=te.delegate;return(null==n?void 0:n.setTimeout)?n.setTimeout.apply(n,q([e,t],U(r))):setTimeout.apply(void 0,q([e,t],U(r)))},clearTimeout:function(e){var t=te.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function re(){}var oe=ne("C",void 0,void 0);function ne(e,t,r){return{kind:e,value:t,error:r}}var ie=null;function ae(e){if(ee.useDeprecatedSynchronousErrorHandling){var t=!ie;if(t&&(ie={errorThrown:!1,error:null}),e(),t){var r=ie,o=r.errorThrown,n=r.error;if(ie=null,o)throw n}}else e()}var se=function(e){function t(t){var r=e.call(this)||this;return r.isStopped=!1,t?(r.destination=t,X(t)&&t.add(r)):r.destination=fe,r}return V(t,e),t.create=function(e,t,r){return new ue(e,t,r)},t.prototype.next=function(e){this.isStopped?pe(function(e){return ne("N",e,void 0)}(e),this):this._next(e)},t.prototype.error=function(e){this.isStopped?pe(ne("E",void 0,e),this):(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped?pe(oe,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(G),le=Function.prototype.bind;function ce(e,t){return le.call(e,t)}var de=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){he(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){he(e)}else he(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){he(e)}},e}(),ue=function(e){function t(t,r,o){var n,i,a=e.call(this)||this;Z(t)||!t?n={next:null!=t?t:void 0,error:null!=r?r:void 0,complete:null!=o?o:void 0}:a&&ee.useDeprecatedNextContext?((i=Object.create(t)).unsubscribe=function(){return a.unsubscribe()},n={next:t.next&&ce(t.next,i),error:t.error&&ce(t.error,i),complete:t.complete&&ce(t.complete,i)}):n=t;return a.destination=new de(n),a}return V(t,e),t}(se);function he(e){var t;ee.useDeprecatedSynchronousErrorHandling?(t=e,ee.useDeprecatedSynchronousErrorHandling&&ie&&(ie.errorThrown=!0,ie.error=t)):function(e){te.setTimeout((function(){var t=ee.onUnhandledError;if(!t)throw e;t(e)}))}(e)}function pe(e,t){var r=ee.onStoppedNotification;r&&te.setTimeout((function(){return r(e,t)}))}var fe={closed:!0,next:re,error:function(e){throw e},complete:re},ge="function"==typeof Symbol&&Symbol.observable||"@@observable";function ve(e){return e}function be(e){return 0===e.length?ve:1===e.length?e[0]:function(t){return e.reduce((function(e,t){return t(e)}),t)}}var me=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var r=new e;return r.source=this,r.operator=t,r},e.prototype.subscribe=function(e,t,r){var o,n=this,i=(o=e)&&o instanceof se||function(e){return e&&Z(e.next)&&Z(e.error)&&Z(e.complete)}(o)&&X(o)?e:new ue(e,t,r);return ae((function(){var e=n,t=e.operator,r=e.source;i.add(t?t.call(i,r):r?n._subscribe(i):n._trySubscribe(i))})),i},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var r=this;return new(t=ye(t))((function(t,o){var n=new ue({next:function(t){try{e(t)}catch(e){o(e),n.unsubscribe()}},error:o,complete:t});r.subscribe(n)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[ge]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return be(e)(this)},e.prototype.toPromise=function(e){var t=this;return new(e=ye(e))((function(e,r){var o;t.subscribe((function(e){return o=e}),(function(e){return r(e)}),(function(){return e(o)}))}))},e.create=function(t){return new e(t)},e}();function ye(e){var t;return null!==(t=null!=e?e:ee.Promise)&&void 0!==t?t:Promise}var Ae,we=K((function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),xe=function(e){function t(){var t=e.call(this)||this;return t.closed=!1,t.currentObservers=null,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return V(t,e),t.prototype.lift=function(e){var t=new ke(this,this);return t.operator=e,t},t.prototype._throwIfClosed=function(){if(this.closed)throw new we},t.prototype.next=function(e){var t=this;ae((function(){var r,o;if(t._throwIfClosed(),!t.isStopped){t.currentObservers||(t.currentObservers=Array.from(t.observers));try{for(var n=H(t.currentObservers),i=n.next();!i.done;i=n.next()){i.value.next(e)}}catch(e){r={error:e}}finally{try{i&&!i.done&&(o=n.return)&&o.call(n)}finally{if(r)throw r.error}}}}))},t.prototype.error=function(e){var t=this;ae((function(){if(t._throwIfClosed(),!t.isStopped){t.hasError=t.isStopped=!0,t.thrownError=e;for(var r=t.observers;r.length;)r.shift().error(e)}}))},t.prototype.complete=function(){var e=this;ae((function(){if(e._throwIfClosed(),!e.isStopped){e.isStopped=!0;for(var t=e.observers;t.length;)t.shift().complete()}}))},t.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(t.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),t.prototype._trySubscribe=function(t){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},t.prototype._innerSubscribe=function(e){var t=this,r=this,o=r.hasError,n=r.isStopped,i=r.observers;return o||n?Y:(this.currentObservers=null,i.push(e),new G((function(){t.currentObservers=null,J(i,e)})))},t.prototype._checkFinalizedStatuses=function(e){var t=this,r=t.hasError,o=t.thrownError,n=t.isStopped;r?e.error(o):n&&e.complete()},t.prototype.asObservable=function(){var e=new me;return e.source=this,e},t.create=function(e,t){return new ke(e,t)},t}(me),ke=function(e){function t(t,r){var o=e.call(this)||this;return o.destination=t,o.source=r,o}return V(t,e),t.prototype.next=function(e){var t,r;null===(r=null===(t=this.destination)||void 0===t?void 0:t.next)||void 0===r||r.call(t,e)},t.prototype.error=function(e){var t,r;null===(r=null===(t=this.destination)||void 0===t?void 0:t.error)||void 0===r||r.call(t,e)},t.prototype.complete=function(){var e,t;null===(t=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===t||t.call(e)},t.prototype._subscribe=function(e){var t,r;return null!==(r=null===(t=this.source)||void 0===t?void 0:t.subscribe(e))&&void 0!==r?r:Y},t}(xe);class Ce{constructor(){this.propertyChangeSubject=new xe}static getInstance(){return this._contextService||(this._contextService=new Ce),this._contextService}static resetInstance(){return this._contextService=new Ce,this._contextService}}!function(e){e.get="GET"}(Ae||(Ae={}));class _e{constructor(){this.httpGet=async e=>{try{const t=await fetch(`${this.baseUrl}${e.startsWith("/")?e:`/${e}`}`,{method:Ae.get});if(!t.ok)throw new Error(t.status.toString());return t}catch(e){throw console.error("HTTP GET error: ",e),e}}}get baseUrl(){const{protocol:e,host:t,pathname:r}=window.location;let o="/";const n=r.match(/^\/[^\/]+\//);return n&&n.length>0&&(o=n.at(0)),`${e}//${t}${o}modeler/api`}static{this.getInstance=()=>(this._dataService||(this._dataService=new _e),this._dataService)}static{this.resetInstance=()=>(this._dataService=new _e,this._dataService)}}class $e{constructor(){this.triggerInitialized=()=>{this.initializedSubject.next()},this.triggerOpenProcess=e=>{const t={data:e.detail.item.record};this.openProcessSubscription.next(t)},this.triggerCompleted=()=>{this.completedSubject.next()},this.initializedSubject=new xe,this.completedSubject=new xe,this.openProcessSubscription=new xe}static getInstance(){return this._eventService||(this._eventService=new $e),this._eventService}static resetInstance(){return this._eventService=new $e,this._eventService}static{this.fireExternal=(e,t,r)=>{const o={bubbles:!0,cancelable:!1,composed:!0,...r},n=new CustomEvent(t,o);return e.dispatchEvent(n),n}}}class Se{constructor(){this._baseUrl="/v1/processes",this.getProcessList=async e=>{const t=new URLSearchParams(e).toString();try{const e=await this._dataService.httpGet(`${this._baseUrl}${""===t?"":`?${t}`}`);return await e.json()}catch(e){throw console.error("Get Process list error: ",e),e}},this._dataService=_e.getInstance()}static{this.getInstance=()=>(this._processesApiService||(this._processesApiService=new Se),this._processesApiService)}static{this.resetInstance=()=>(this._processesApiService=new Se,this._processesApiService)}}var ze=r(6062),Ee=r.n(ze),Le=r(4036),Te=r.n(Le),Pe=r(6793),De=r.n(Pe),Fe=r(7892),Oe=r.n(Fe),Ne=r(1173),Be=r.n(Ne),Me=r(2464),Re=r.n(Me),Ie=r(9526),je={};je.styleTagTransform=Re(),je.setAttributes=Oe(),je.insert=De().bind(null,"head"),je.domAPI=Te(),je.insertStyleElement=Be();Ee()(Ie.Z,je);Ie.Z&&Ie.Z.locals&&Ie.Z.locals;const Ve=T.iv`
  :host {
    all: initial;
  }
`,He=(T.iv`0.1875em`,T.iv`0.5em`),Ue=(T.iv`0.625em`,T.iv`0.6875em`,T.iv`0.75em`),qe=T.iv`0.9375em`,Ze=T.iv`1.5em`,Ke=T.iv`1.625em`,We=(T.iv`1.8125em`,T.iv`3.75em`,T.iv`25.625em`,T.iv`30em`,[Ve,T.iv`
  :host {
    display: grid;
    grid-template-rows: min-content auto;

    min-height: 100%;
  }
`]),Je=[Ve,T.iv`
  :host {
    display: grid;

    background-color: var(--nx-grey-5);
  }

  header {
    display: grid;
    grid-template-columns: ${Ze} min-content auto;
    grid-template-rows: ${Ue} ${Ke} ${Ke};
  }

  h1 {
    grid-column: 2;
    grid-row: 2;

    margin: 0;

    white-space: nowrap;

    color: var(--ne-alias-color-text-default);
    font-family: var(--nx-font-family-heading);
    font-size: var(--ne-ref-font-size-07);
  }
`],Ge={type:"logger",log(e){this.output("log",e)},warn(e){this.output("warn",e)},error(e){this.output("error",e)},output(e,t){console&&console[e]&&console[e].apply(console,t)}};class Ye{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.init(e,t)}init(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.prefix=t.prefix||"i18next:",this.logger=e||Ge,this.options=t,this.debug=t.debug}log(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return this.forward(t,"log","",!0)}warn(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return this.forward(t,"warn","",!0)}error(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return this.forward(t,"error","")}deprecate(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return this.forward(t,"warn","WARNING DEPRECATED: ",!0)}forward(e,t,r,o){return o&&!this.debug?null:("string"==typeof e[0]&&(e[0]=`${r}${this.prefix} ${e[0]}`),this.logger[t](e))}create(e){return new Ye(this.logger,{prefix:`${this.prefix}:${e}:`,...this.options})}clone(e){return(e=e||this.options).prefix=e.prefix||this.prefix,new Ye(this.logger,e)}}var Xe=new Ye;class Qe{constructor(){this.observers={}}on(e,t){return e.split(" ").forEach((e=>{this.observers[e]=this.observers[e]||[],this.observers[e].push(t)})),this}off(e,t){this.observers[e]&&(t?this.observers[e]=this.observers[e].filter((e=>e!==t)):delete this.observers[e])}emit(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),o=1;o<t;o++)r[o-1]=arguments[o];if(this.observers[e]){[].concat(this.observers[e]).forEach((e=>{e(...r)}))}if(this.observers["*"]){[].concat(this.observers["*"]).forEach((t=>{t.apply(t,[e,...r])}))}}}function et(){let e,t;const r=new Promise(((r,o)=>{e=r,t=o}));return r.resolve=e,r.reject=t,r}function tt(e){return null==e?"":""+e}function rt(e,t,r){function o(e){return e&&e.indexOf("###")>-1?e.replace(/###/g,"."):e}function n(){return!e||"string"==typeof e}const i="string"!=typeof t?[].concat(t):t.split(".");for(;i.length>1;){if(n())return{};const t=o(i.shift());!e[t]&&r&&(e[t]=new r),e=Object.prototype.hasOwnProperty.call(e,t)?e[t]:{}}return n()?{}:{obj:e,k:o(i.shift())}}function ot(e,t,r){const{obj:o,k:n}=rt(e,t,Object);o[n]=r}function nt(e,t){const{obj:r,k:o}=rt(e,t);if(r)return r[o]}function it(e,t,r){for(const o in t)"__proto__"!==o&&"constructor"!==o&&(o in e?"string"==typeof e[o]||e[o]instanceof String||"string"==typeof t[o]||t[o]instanceof String?r&&(e[o]=t[o]):it(e[o],t[o],r):e[o]=t[o]);return e}function at(e){return e.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")}var st={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;"};function lt(e){return"string"==typeof e?e.replace(/[&<>"'\/]/g,(e=>st[e])):e}const ct=[" ",",","?","!",";"];function dt(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:".";if(!e)return;if(e[t])return e[t];const o=t.split(r);let n=e;for(let e=0;e<o.length;++e){if(!n)return;if("string"==typeof n[o[e]]&&e+1<o.length)return;if(void 0===n[o[e]]){let i=2,a=o.slice(e,e+i).join(r),s=n[a];for(;void 0===s&&o.length>e+i;)i++,a=o.slice(e,e+i).join(r),s=n[a];if(void 0===s)return;if(null===s)return null;if(t.endsWith(a)){if("string"==typeof s)return s;if(a&&"string"==typeof s[a])return s[a]}const l=o.slice(e+i).join(r);return l?dt(s,l,r):void 0}n=n[o[e]]}return n}function ut(e){return e&&e.indexOf("_")>0?e.replace("_","-"):e}class ht extends Qe{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{ns:["translation"],defaultNS:"translation"};super(),this.data=e||{},this.options=t,void 0===this.options.keySeparator&&(this.options.keySeparator="."),void 0===this.options.ignoreJSONStructure&&(this.options.ignoreJSONStructure=!0)}addNamespaces(e){this.options.ns.indexOf(e)<0&&this.options.ns.push(e)}removeNamespaces(e){const t=this.options.ns.indexOf(e);t>-1&&this.options.ns.splice(t,1)}getResource(e,t,r){let o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};const n=void 0!==o.keySeparator?o.keySeparator:this.options.keySeparator,i=void 0!==o.ignoreJSONStructure?o.ignoreJSONStructure:this.options.ignoreJSONStructure;let a=[e,t];r&&"string"!=typeof r&&(a=a.concat(r)),r&&"string"==typeof r&&(a=a.concat(n?r.split(n):r)),e.indexOf(".")>-1&&(a=e.split("."));const s=nt(this.data,a);return s||!i||"string"!=typeof r?s:dt(this.data&&this.data[e]&&this.data[e][t],r,n)}addResource(e,t,r,o){let n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{silent:!1};const i=void 0!==n.keySeparator?n.keySeparator:this.options.keySeparator;let a=[e,t];r&&(a=a.concat(i?r.split(i):r)),e.indexOf(".")>-1&&(a=e.split("."),o=t,t=a[1]),this.addNamespaces(t),ot(this.data,a,o),n.silent||this.emit("added",e,t,r,o)}addResources(e,t,r){let o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{silent:!1};for(const o in r)"string"!=typeof r[o]&&"[object Array]"!==Object.prototype.toString.apply(r[o])||this.addResource(e,t,o,r[o],{silent:!0});o.silent||this.emit("added",e,t,r)}addResourceBundle(e,t,r,o,n){let i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{silent:!1},a=[e,t];e.indexOf(".")>-1&&(a=e.split("."),o=r,r=t,t=a[1]),this.addNamespaces(t);let s=nt(this.data,a)||{};o?it(s,r,n):s={...s,...r},ot(this.data,a,s),i.silent||this.emit("added",e,t,r)}removeResourceBundle(e,t){this.hasResourceBundle(e,t)&&delete this.data[e][t],this.removeNamespaces(t),this.emit("removed",e,t)}hasResourceBundle(e,t){return void 0!==this.getResource(e,t)}getResourceBundle(e,t){return t||(t=this.options.defaultNS),"v1"===this.options.compatibilityAPI?{...this.getResource(e,t)}:this.getResource(e,t)}getDataByLanguage(e){return this.data[e]}hasLanguageSomeTranslations(e){const t=this.getDataByLanguage(e);return!!(t&&Object.keys(t)||[]).find((e=>t[e]&&Object.keys(t[e]).length>0))}toJSON(){return this.data}}var pt={processors:{},addPostProcessor(e){this.processors[e.name]=e},handle(e,t,r,o,n){return e.forEach((e=>{this.processors[e]&&(t=this.processors[e].process(t,r,o,n))})),t}};const ft={};class gt extends Qe{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};super(),function(e,t,r){e.forEach((e=>{t[e]&&(r[e]=t[e])}))}(["resourceStore","languageUtils","pluralResolver","interpolator","backendConnector","i18nFormat","utils"],e,this),this.options=t,void 0===this.options.keySeparator&&(this.options.keySeparator="."),this.logger=Xe.create("translator")}changeLanguage(e){e&&(this.language=e)}exists(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}};if(null==e)return!1;const r=this.resolve(e,t);return r&&void 0!==r.res}extractFromKey(e,t){let r=void 0!==t.nsSeparator?t.nsSeparator:this.options.nsSeparator;void 0===r&&(r=":");const o=void 0!==t.keySeparator?t.keySeparator:this.options.keySeparator;let n=t.ns||this.options.defaultNS||[];const i=r&&e.indexOf(r)>-1,a=!(this.options.userDefinedKeySeparator||t.keySeparator||this.options.userDefinedNsSeparator||t.nsSeparator||function(e,t,r){t=t||"",r=r||"";const o=ct.filter((e=>t.indexOf(e)<0&&r.indexOf(e)<0));if(0===o.length)return!0;const n=new RegExp(`(${o.map((e=>"?"===e?"\\?":e)).join("|")})`);let i=!n.test(e);if(!i){const t=e.indexOf(r);t>0&&!n.test(e.substring(0,t))&&(i=!0)}return i}(e,r,o));if(i&&!a){const t=e.match(this.interpolator.nestingRegexp);if(t&&t.length>0)return{key:e,namespaces:n};const i=e.split(r);(r!==o||r===o&&this.options.ns.indexOf(i[0])>-1)&&(n=i.shift()),e=i.join(o)}return"string"==typeof n&&(n=[n]),{key:e,namespaces:n}}translate(e,t,r){if("object"!=typeof t&&this.options.overloadTranslationOptionHandler&&(t=this.options.overloadTranslationOptionHandler(arguments)),"object"==typeof t&&(t={...t}),t||(t={}),null==e)return"";Array.isArray(e)||(e=[String(e)]);const o=void 0!==t.returnDetails?t.returnDetails:this.options.returnDetails,n=void 0!==t.keySeparator?t.keySeparator:this.options.keySeparator,{key:i,namespaces:a}=this.extractFromKey(e[e.length-1],t),s=a[a.length-1],l=t.lng||this.language,c=t.appendNamespaceToCIMode||this.options.appendNamespaceToCIMode;if(l&&"cimode"===l.toLowerCase()){if(c){const e=t.nsSeparator||this.options.nsSeparator;return o?{res:`${s}${e}${i}`,usedKey:i,exactUsedKey:i,usedLng:l,usedNS:s}:`${s}${e}${i}`}return o?{res:i,usedKey:i,exactUsedKey:i,usedLng:l,usedNS:s}:i}const d=this.resolve(e,t);let u=d&&d.res;const h=d&&d.usedKey||i,p=d&&d.exactUsedKey||i,f=Object.prototype.toString.apply(u),g=void 0!==t.joinArrays?t.joinArrays:this.options.joinArrays,v=!this.i18nFormat||this.i18nFormat.handleAsObject;if(v&&u&&("string"!=typeof u&&"boolean"!=typeof u&&"number"!=typeof u)&&["[object Number]","[object Function]","[object RegExp]"].indexOf(f)<0&&("string"!=typeof g||"[object Array]"!==f)){if(!t.returnObjects&&!this.options.returnObjects){this.options.returnedObjectHandler||this.logger.warn("accessing an object - but returnObjects options is not enabled!");const e=this.options.returnedObjectHandler?this.options.returnedObjectHandler(h,u,{...t,ns:a}):`key '${i} (${this.language})' returned an object instead of string.`;return o?(d.res=e,d):e}if(n){const e="[object Array]"===f,r=e?[]:{},o=e?p:h;for(const e in u)if(Object.prototype.hasOwnProperty.call(u,e)){const i=`${o}${n}${e}`;r[e]=this.translate(i,{...t,joinArrays:!1,ns:a}),r[e]===i&&(r[e]=u[e])}u=r}}else if(v&&"string"==typeof g&&"[object Array]"===f)u=u.join(g),u&&(u=this.extendTranslation(u,e,t,r));else{let o=!1,a=!1;const c=void 0!==t.count&&"string"!=typeof t.count,h=gt.hasDefaultValue(t),p=c?this.pluralResolver.getSuffix(l,t.count,t):"",f=t.ordinal&&c?this.pluralResolver.getSuffix(l,t.count,{ordinal:!1}):"",g=t[`defaultValue${p}`]||t[`defaultValue${f}`]||t.defaultValue;!this.isValidLookup(u)&&h&&(o=!0,u=g),this.isValidLookup(u)||(a=!0,u=i);const v=(t.missingKeyNoValueFallbackToKey||this.options.missingKeyNoValueFallbackToKey)&&a?void 0:u,b=h&&g!==u&&this.options.updateMissing;if(a||o||b){if(this.logger.log(b?"updateKey":"missingKey",l,s,i,b?g:u),n){const e=this.resolve(i,{...t,keySeparator:!1});e&&e.res&&this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.")}let e=[];const r=this.languageUtils.getFallbackCodes(this.options.fallbackLng,t.lng||this.language);if("fallback"===this.options.saveMissingTo&&r&&r[0])for(let t=0;t<r.length;t++)e.push(r[t]);else"all"===this.options.saveMissingTo?e=this.languageUtils.toResolveHierarchy(t.lng||this.language):e.push(t.lng||this.language);const o=(e,r,o)=>{const n=h&&o!==u?o:v;this.options.missingKeyHandler?this.options.missingKeyHandler(e,s,r,n,b,t):this.backendConnector&&this.backendConnector.saveMissing&&this.backendConnector.saveMissing(e,s,r,n,b,t),this.emit("missingKey",e,s,r,u)};this.options.saveMissing&&(this.options.saveMissingPlurals&&c?e.forEach((e=>{this.pluralResolver.getSuffixes(e,t).forEach((r=>{o([e],i+r,t[`defaultValue${r}`]||g)}))})):o(e,i,g))}u=this.extendTranslation(u,e,t,d,r),a&&u===i&&this.options.appendNamespaceToMissingKey&&(u=`${s}:${i}`),(a||o)&&this.options.parseMissingKeyHandler&&(u="v1"!==this.options.compatibilityAPI?this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey?`${s}:${i}`:i,o?u:void 0):this.options.parseMissingKeyHandler(u))}return o?(d.res=u,d):u}extendTranslation(e,t,r,o,n){var i=this;if(this.i18nFormat&&this.i18nFormat.parse)e=this.i18nFormat.parse(e,{...this.options.interpolation.defaultVariables,...r},o.usedLng,o.usedNS,o.usedKey,{resolved:o});else if(!r.skipInterpolation){r.interpolation&&this.interpolator.init({...r,interpolation:{...this.options.interpolation,...r.interpolation}});const a="string"==typeof e&&(r&&r.interpolation&&void 0!==r.interpolation.skipOnVariables?r.interpolation.skipOnVariables:this.options.interpolation.skipOnVariables);let s;if(a){const t=e.match(this.interpolator.nestingRegexp);s=t&&t.length}let l=r.replace&&"string"!=typeof r.replace?r.replace:r;if(this.options.interpolation.defaultVariables&&(l={...this.options.interpolation.defaultVariables,...l}),e=this.interpolator.interpolate(e,l,r.lng||this.language,r),a){const t=e.match(this.interpolator.nestingRegexp);s<(t&&t.length)&&(r.nest=!1)}!r.lng&&"v1"!==this.options.compatibilityAPI&&o&&o.res&&(r.lng=o.usedLng),!1!==r.nest&&(e=this.interpolator.nest(e,(function(){for(var e=arguments.length,o=new Array(e),a=0;a<e;a++)o[a]=arguments[a];return n&&n[0]===o[0]&&!r.context?(i.logger.warn(`It seems you are nesting recursively key: ${o[0]} in key: ${t[0]}`),null):i.translate(...o,t)}),r)),r.interpolation&&this.interpolator.reset()}const a=r.postProcess||this.options.postProcess,s="string"==typeof a?[a]:a;return null!=e&&s&&s.length&&!1!==r.applyPostProcessor&&(e=pt.handle(s,e,t,this.options&&this.options.postProcessPassResolved?{i18nResolved:o,...r}:r,this)),e}resolve(e){let t,r,o,n,i,a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"string"==typeof e&&(e=[e]),e.forEach((e=>{if(this.isValidLookup(t))return;const s=this.extractFromKey(e,a),l=s.key;r=l;let c=s.namespaces;this.options.fallbackNS&&(c=c.concat(this.options.fallbackNS));const d=void 0!==a.count&&"string"!=typeof a.count,u=d&&!a.ordinal&&0===a.count&&this.pluralResolver.shouldUseIntlApi(),h=void 0!==a.context&&("string"==typeof a.context||"number"==typeof a.context)&&""!==a.context,p=a.lngs?a.lngs:this.languageUtils.toResolveHierarchy(a.lng||this.language,a.fallbackLng);c.forEach((e=>{this.isValidLookup(t)||(i=e,!ft[`${p[0]}-${e}`]&&this.utils&&this.utils.hasLoadedNamespace&&!this.utils.hasLoadedNamespace(i)&&(ft[`${p[0]}-${e}`]=!0,this.logger.warn(`key "${r}" for languages "${p.join(", ")}" won't get resolved as namespace "${i}" was not yet loaded`,"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!")),p.forEach((r=>{if(this.isValidLookup(t))return;n=r;const i=[l];if(this.i18nFormat&&this.i18nFormat.addLookupKeys)this.i18nFormat.addLookupKeys(i,l,r,e,a);else{let e;d&&(e=this.pluralResolver.getSuffix(r,a.count,a));const t=`${this.options.pluralSeparator}zero`,o=`${this.options.pluralSeparator}ordinal${this.options.pluralSeparator}`;if(d&&(i.push(l+e),a.ordinal&&0===e.indexOf(o)&&i.push(l+e.replace(o,this.options.pluralSeparator)),u&&i.push(l+t)),h){const r=`${l}${this.options.contextSeparator}${a.context}`;i.push(r),d&&(i.push(r+e),a.ordinal&&0===e.indexOf(o)&&i.push(r+e.replace(o,this.options.pluralSeparator)),u&&i.push(r+t))}}let s;for(;s=i.pop();)this.isValidLookup(t)||(o=s,t=this.getResource(r,e,s,a))})))}))})),{res:t,usedKey:r,exactUsedKey:o,usedLng:n,usedNS:i}}isValidLookup(e){return!(void 0===e||!this.options.returnNull&&null===e||!this.options.returnEmptyString&&""===e)}getResource(e,t,r){let o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return this.i18nFormat&&this.i18nFormat.getResource?this.i18nFormat.getResource(e,t,r,o):this.resourceStore.getResource(e,t,r,o)}static hasDefaultValue(e){const t="defaultValue";for(const r in e)if(Object.prototype.hasOwnProperty.call(e,r)&&t===r.substring(0,12)&&void 0!==e[r])return!0;return!1}}function vt(e){return e.charAt(0).toUpperCase()+e.slice(1)}class bt{constructor(e){this.options=e,this.supportedLngs=this.options.supportedLngs||!1,this.logger=Xe.create("languageUtils")}getScriptPartFromCode(e){if(!(e=ut(e))||e.indexOf("-")<0)return null;const t=e.split("-");return 2===t.length?null:(t.pop(),"x"===t[t.length-1].toLowerCase()?null:this.formatLanguageCode(t.join("-")))}getLanguagePartFromCode(e){if(!(e=ut(e))||e.indexOf("-")<0)return e;const t=e.split("-");return this.formatLanguageCode(t[0])}formatLanguageCode(e){if("string"==typeof e&&e.indexOf("-")>-1){const t=["hans","hant","latn","cyrl","cans","mong","arab"];let r=e.split("-");return this.options.lowerCaseLng?r=r.map((e=>e.toLowerCase())):2===r.length?(r[0]=r[0].toLowerCase(),r[1]=r[1].toUpperCase(),t.indexOf(r[1].toLowerCase())>-1&&(r[1]=vt(r[1].toLowerCase()))):3===r.length&&(r[0]=r[0].toLowerCase(),2===r[1].length&&(r[1]=r[1].toUpperCase()),"sgn"!==r[0]&&2===r[2].length&&(r[2]=r[2].toUpperCase()),t.indexOf(r[1].toLowerCase())>-1&&(r[1]=vt(r[1].toLowerCase())),t.indexOf(r[2].toLowerCase())>-1&&(r[2]=vt(r[2].toLowerCase()))),r.join("-")}return this.options.cleanCode||this.options.lowerCaseLng?e.toLowerCase():e}isSupportedCode(e){return("languageOnly"===this.options.load||this.options.nonExplicitSupportedLngs)&&(e=this.getLanguagePartFromCode(e)),!this.supportedLngs||!this.supportedLngs.length||this.supportedLngs.indexOf(e)>-1}getBestMatchFromCodes(e){if(!e)return null;let t;return e.forEach((e=>{if(t)return;const r=this.formatLanguageCode(e);this.options.supportedLngs&&!this.isSupportedCode(r)||(t=r)})),!t&&this.options.supportedLngs&&e.forEach((e=>{if(t)return;const r=this.getLanguagePartFromCode(e);if(this.isSupportedCode(r))return t=r;t=this.options.supportedLngs.find((e=>e===r?e:e.indexOf("-")<0&&r.indexOf("-")<0?void 0:0===e.indexOf(r)?e:void 0))})),t||(t=this.getFallbackCodes(this.options.fallbackLng)[0]),t}getFallbackCodes(e,t){if(!e)return[];if("function"==typeof e&&(e=e(t)),"string"==typeof e&&(e=[e]),"[object Array]"===Object.prototype.toString.apply(e))return e;if(!t)return e.default||[];let r=e[t];return r||(r=e[this.getScriptPartFromCode(t)]),r||(r=e[this.formatLanguageCode(t)]),r||(r=e[this.getLanguagePartFromCode(t)]),r||(r=e.default),r||[]}toResolveHierarchy(e,t){const r=this.getFallbackCodes(t||this.options.fallbackLng||[],e),o=[],n=e=>{e&&(this.isSupportedCode(e)?o.push(e):this.logger.warn(`rejecting language code not found in supportedLngs: ${e}`))};return"string"==typeof e&&(e.indexOf("-")>-1||e.indexOf("_")>-1)?("languageOnly"!==this.options.load&&n(this.formatLanguageCode(e)),"languageOnly"!==this.options.load&&"currentOnly"!==this.options.load&&n(this.getScriptPartFromCode(e)),"currentOnly"!==this.options.load&&n(this.getLanguagePartFromCode(e))):"string"==typeof e&&n(this.formatLanguageCode(e)),r.forEach((e=>{o.indexOf(e)<0&&n(this.formatLanguageCode(e))})),o}}let mt=[{lngs:["ach","ak","am","arn","br","fil","gun","ln","mfe","mg","mi","oc","pt","pt-BR","tg","tl","ti","tr","uz","wa"],nr:[1,2],fc:1},{lngs:["af","an","ast","az","bg","bn","ca","da","de","dev","el","en","eo","es","et","eu","fi","fo","fur","fy","gl","gu","ha","hi","hu","hy","ia","it","kk","kn","ku","lb","mai","ml","mn","mr","nah","nap","nb","ne","nl","nn","no","nso","pa","pap","pms","ps","pt-PT","rm","sco","se","si","so","son","sq","sv","sw","ta","te","tk","ur","yo"],nr:[1,2],fc:2},{lngs:["ay","bo","cgg","fa","ht","id","ja","jbo","ka","km","ko","ky","lo","ms","sah","su","th","tt","ug","vi","wo","zh"],nr:[1],fc:3},{lngs:["be","bs","cnr","dz","hr","ru","sr","uk"],nr:[1,2,5],fc:4},{lngs:["ar"],nr:[0,1,2,3,11,100],fc:5},{lngs:["cs","sk"],nr:[1,2,5],fc:6},{lngs:["csb","pl"],nr:[1,2,5],fc:7},{lngs:["cy"],nr:[1,2,3,8],fc:8},{lngs:["fr"],nr:[1,2],fc:9},{lngs:["ga"],nr:[1,2,3,7,11],fc:10},{lngs:["gd"],nr:[1,2,3,20],fc:11},{lngs:["is"],nr:[1,2],fc:12},{lngs:["jv"],nr:[0,1],fc:13},{lngs:["kw"],nr:[1,2,3,4],fc:14},{lngs:["lt"],nr:[1,2,10],fc:15},{lngs:["lv"],nr:[1,2,0],fc:16},{lngs:["mk"],nr:[1,2],fc:17},{lngs:["mnk"],nr:[0,1,2],fc:18},{lngs:["mt"],nr:[1,2,11,20],fc:19},{lngs:["or"],nr:[2,1],fc:2},{lngs:["ro"],nr:[1,2,20],fc:20},{lngs:["sl"],nr:[5,1,2,3],fc:21},{lngs:["he","iw"],nr:[1,2,20,21],fc:22}],yt={1:function(e){return Number(e>1)},2:function(e){return Number(1!=e)},3:function(e){return 0},4:function(e){return Number(e%10==1&&e%100!=11?0:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?1:2)},5:function(e){return Number(0==e?0:1==e?1:2==e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5)},6:function(e){return Number(1==e?0:e>=2&&e<=4?1:2)},7:function(e){return Number(1==e?0:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?1:2)},8:function(e){return Number(1==e?0:2==e?1:8!=e&&11!=e?2:3)},9:function(e){return Number(e>=2)},10:function(e){return Number(1==e?0:2==e?1:e<7?2:e<11?3:4)},11:function(e){return Number(1==e||11==e?0:2==e||12==e?1:e>2&&e<20?2:3)},12:function(e){return Number(e%10!=1||e%100==11)},13:function(e){return Number(0!==e)},14:function(e){return Number(1==e?0:2==e?1:3==e?2:3)},15:function(e){return Number(e%10==1&&e%100!=11?0:e%10>=2&&(e%100<10||e%100>=20)?1:2)},16:function(e){return Number(e%10==1&&e%100!=11?0:0!==e?1:2)},17:function(e){return Number(1==e||e%10==1&&e%100!=11?0:1)},18:function(e){return Number(0==e?0:1==e?1:2)},19:function(e){return Number(1==e?0:0==e||e%100>1&&e%100<11?1:e%100>10&&e%100<20?2:3)},20:function(e){return Number(1==e?0:0==e||e%100>0&&e%100<20?1:2)},21:function(e){return Number(e%100==1?1:e%100==2?2:e%100==3||e%100==4?3:0)},22:function(e){return Number(1==e?0:2==e?1:(e<0||e>10)&&e%10==0?2:3)}};const At=["v1","v2","v3"],wt=["v4"],xt={zero:0,one:1,two:2,few:3,many:4,other:5};class kt{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.languageUtils=e,this.options=t,this.logger=Xe.create("pluralResolver"),this.options.compatibilityJSON&&!wt.includes(this.options.compatibilityJSON)||"undefined"!=typeof Intl&&Intl.PluralRules||(this.options.compatibilityJSON="v3",this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.")),this.rules=function(){const e={};return mt.forEach((t=>{t.lngs.forEach((r=>{e[r]={numbers:t.nr,plurals:yt[t.fc]}}))})),e}()}addRule(e,t){this.rules[e]=t}getRule(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(this.shouldUseIntlApi())try{return new Intl.PluralRules(ut(e),{type:t.ordinal?"ordinal":"cardinal"})}catch{return}return this.rules[e]||this.rules[this.languageUtils.getLanguagePartFromCode(e)]}needsPlural(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const r=this.getRule(e,t);return this.shouldUseIntlApi()?r&&r.resolvedOptions().pluralCategories.length>1:r&&r.numbers.length>1}getPluralFormsOfKey(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.getSuffixes(e,r).map((e=>`${t}${e}`))}getSuffixes(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const r=this.getRule(e,t);return r?this.shouldUseIntlApi()?r.resolvedOptions().pluralCategories.sort(((e,t)=>xt[e]-xt[t])).map((e=>`${this.options.prepend}${t.ordinal?`ordinal${this.options.prepend}`:""}${e}`)):r.numbers.map((r=>this.getSuffix(e,r,t))):[]}getSuffix(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const o=this.getRule(e,r);return o?this.shouldUseIntlApi()?`${this.options.prepend}${r.ordinal?`ordinal${this.options.prepend}`:""}${o.select(t)}`:this.getSuffixRetroCompatible(o,t):(this.logger.warn(`no plural rule found for: ${e}`),"")}getSuffixRetroCompatible(e,t){const r=e.noAbs?e.plurals(t):e.plurals(Math.abs(t));let o=e.numbers[r];this.options.simplifyPluralSuffix&&2===e.numbers.length&&1===e.numbers[0]&&(2===o?o="plural":1===o&&(o=""));const n=()=>this.options.prepend&&o.toString()?this.options.prepend+o.toString():o.toString();return"v1"===this.options.compatibilityJSON?1===o?"":"number"==typeof o?`_plural_${o.toString()}`:n():"v2"===this.options.compatibilityJSON||this.options.simplifyPluralSuffix&&2===e.numbers.length&&1===e.numbers[0]?n():this.options.prepend&&r.toString()?this.options.prepend+r.toString():r.toString()}shouldUseIntlApi(){return!At.includes(this.options.compatibilityJSON)}}function Ct(e,t,r){let o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:".",n=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],i=function(e,t,r){const o=nt(e,r);return void 0!==o?o:nt(t,r)}(e,t,r);return!i&&n&&"string"==typeof r&&(i=dt(e,r,o),void 0===i&&(i=dt(t,r,o))),i}class _t{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.logger=Xe.create("interpolator"),this.options=e,this.format=e.interpolation&&e.interpolation.format||(e=>e),this.init(e)}init(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};e.interpolation||(e.interpolation={escapeValue:!0});const t=e.interpolation;this.escape=void 0!==t.escape?t.escape:lt,this.escapeValue=void 0===t.escapeValue||t.escapeValue,this.useRawValueToEscape=void 0!==t.useRawValueToEscape&&t.useRawValueToEscape,this.prefix=t.prefix?at(t.prefix):t.prefixEscaped||"{{",this.suffix=t.suffix?at(t.suffix):t.suffixEscaped||"}}",this.formatSeparator=t.formatSeparator?t.formatSeparator:t.formatSeparator||",",this.unescapePrefix=t.unescapeSuffix?"":t.unescapePrefix||"-",this.unescapeSuffix=this.unescapePrefix?"":t.unescapeSuffix||"",this.nestingPrefix=t.nestingPrefix?at(t.nestingPrefix):t.nestingPrefixEscaped||at("$t("),this.nestingSuffix=t.nestingSuffix?at(t.nestingSuffix):t.nestingSuffixEscaped||at(")"),this.nestingOptionsSeparator=t.nestingOptionsSeparator?t.nestingOptionsSeparator:t.nestingOptionsSeparator||",",this.maxReplaces=t.maxReplaces?t.maxReplaces:1e3,this.alwaysFormat=void 0!==t.alwaysFormat&&t.alwaysFormat,this.resetRegExp()}reset(){this.options&&this.init(this.options)}resetRegExp(){const e=`${this.prefix}(.+?)${this.suffix}`;this.regexp=new RegExp(e,"g");const t=`${this.prefix}${this.unescapePrefix}(.+?)${this.unescapeSuffix}${this.suffix}`;this.regexpUnescape=new RegExp(t,"g");const r=`${this.nestingPrefix}(.+?)${this.nestingSuffix}`;this.nestingRegexp=new RegExp(r,"g")}interpolate(e,t,r,o){let n,i,a;const s=this.options&&this.options.interpolation&&this.options.interpolation.defaultVariables||{};function l(e){return e.replace(/\$/g,"$$$$")}const c=e=>{if(e.indexOf(this.formatSeparator)<0){const n=Ct(t,s,e,this.options.keySeparator,this.options.ignoreJSONStructure);return this.alwaysFormat?this.format(n,void 0,r,{...o,...t,interpolationkey:e}):n}const n=e.split(this.formatSeparator),i=n.shift().trim(),a=n.join(this.formatSeparator).trim();return this.format(Ct(t,s,i,this.options.keySeparator,this.options.ignoreJSONStructure),a,r,{...o,...t,interpolationkey:i})};this.resetRegExp();const d=o&&o.missingInterpolationHandler||this.options.missingInterpolationHandler,u=o&&o.interpolation&&void 0!==o.interpolation.skipOnVariables?o.interpolation.skipOnVariables:this.options.interpolation.skipOnVariables;return[{regex:this.regexpUnescape,safeValue:e=>l(e)},{regex:this.regexp,safeValue:e=>this.escapeValue?l(this.escape(e)):l(e)}].forEach((t=>{for(a=0;n=t.regex.exec(e);){const r=n[1].trim();if(i=c(r),void 0===i)if("function"==typeof d){const t=d(e,n,o);i="string"==typeof t?t:""}else if(o&&Object.prototype.hasOwnProperty.call(o,r))i="";else{if(u){i=n[0];continue}this.logger.warn(`missed to pass in variable ${r} for interpolating ${e}`),i=""}else"string"==typeof i||this.useRawValueToEscape||(i=tt(i));const s=t.safeValue(i);if(e=e.replace(n[0],s),u?(t.regex.lastIndex+=i.length,t.regex.lastIndex-=n[0].length):t.regex.lastIndex=0,a++,a>=this.maxReplaces)break}})),e}nest(e,t){let r,o,n,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};function a(e,t){const r=this.nestingOptionsSeparator;if(e.indexOf(r)<0)return e;const o=e.split(new RegExp(`${r}[ ]*{`));let i=`{${o[1]}`;e=o[0],i=this.interpolate(i,n);const a=i.match(/'/g),s=i.match(/"/g);(a&&a.length%2==0&&!s||s.length%2!=0)&&(i=i.replace(/'/g,'"'));try{n=JSON.parse(i),t&&(n={...t,...n})}catch(t){return this.logger.warn(`failed parsing options string in nesting for key ${e}`,t),`${e}${r}${i}`}return delete n.defaultValue,e}for(;r=this.nestingRegexp.exec(e);){let s=[];n={...i},n=n.replace&&"string"!=typeof n.replace?n.replace:n,n.applyPostProcessor=!1,delete n.defaultValue;let l=!1;if(-1!==r[0].indexOf(this.formatSeparator)&&!/{.*}/.test(r[1])){const e=r[1].split(this.formatSeparator).map((e=>e.trim()));r[1]=e.shift(),s=e,l=!0}if(o=t(a.call(this,r[1].trim(),n),n),o&&r[0]===e&&"string"!=typeof o)return o;"string"!=typeof o&&(o=tt(o)),o||(this.logger.warn(`missed to resolve ${r[1]} for nesting ${e}`),o=""),l&&(o=s.reduce(((e,t)=>this.format(e,t,i.lng,{...i,interpolationkey:r[1].trim()})),o.trim())),e=e.replace(r[0],o),this.regexp.lastIndex=0}return e}}function $t(e){const t={};return function(r,o,n){const i=o+JSON.stringify(n);let a=t[i];return a||(a=e(ut(o),n),t[i]=a),a(r)}}class St{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.logger=Xe.create("formatter"),this.options=e,this.formats={number:$t(((e,t)=>{const r=new Intl.NumberFormat(e,{...t});return e=>r.format(e)})),currency:$t(((e,t)=>{const r=new Intl.NumberFormat(e,{...t,style:"currency"});return e=>r.format(e)})),datetime:$t(((e,t)=>{const r=new Intl.DateTimeFormat(e,{...t});return e=>r.format(e)})),relativetime:$t(((e,t)=>{const r=new Intl.RelativeTimeFormat(e,{...t});return e=>r.format(e,t.range||"day")})),list:$t(((e,t)=>{const r=new Intl.ListFormat(e,{...t});return e=>r.format(e)}))},this.init(e)}init(e){const t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}}).interpolation;this.formatSeparator=t.formatSeparator?t.formatSeparator:t.formatSeparator||","}add(e,t){this.formats[e.toLowerCase().trim()]=t}addCached(e,t){this.formats[e.toLowerCase().trim()]=$t(t)}format(e,t,r){let o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};const n=t.split(this.formatSeparator).reduce(((e,t)=>{const{formatName:n,formatOptions:i}=function(e){let t=e.toLowerCase().trim();const r={};if(e.indexOf("(")>-1){const o=e.split("(");t=o[0].toLowerCase().trim();const n=o[1].substring(0,o[1].length-1);"currency"===t&&n.indexOf(":")<0?r.currency||(r.currency=n.trim()):"relativetime"===t&&n.indexOf(":")<0?r.range||(r.range=n.trim()):n.split(";").forEach((e=>{if(!e)return;const[t,...o]=e.split(":"),n=o.join(":").trim().replace(/^'+|'+$/g,"");r[t.trim()]||(r[t.trim()]=n),"false"===n&&(r[t.trim()]=!1),"true"===n&&(r[t.trim()]=!0),isNaN(n)||(r[t.trim()]=parseInt(n,10))}))}return{formatName:t,formatOptions:r}}(t);if(this.formats[n]){let t=e;try{const a=o&&o.formatParams&&o.formatParams[o.interpolationkey]||{},s=a.locale||a.lng||o.locale||o.lng||r;t=this.formats[n](e,s,{...i,...o,...a})}catch(e){this.logger.warn(e)}return t}return this.logger.warn(`there was no format function for ${n}`),e}),e);return n}}class zt extends Qe{constructor(e,t,r){let o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};super(),this.backend=e,this.store=t,this.services=r,this.languageUtils=r.languageUtils,this.options=o,this.logger=Xe.create("backendConnector"),this.waitingReads=[],this.maxParallelReads=o.maxParallelReads||10,this.readingCalls=0,this.maxRetries=o.maxRetries>=0?o.maxRetries:5,this.retryTimeout=o.retryTimeout>=1?o.retryTimeout:350,this.state={},this.queue=[],this.backend&&this.backend.init&&this.backend.init(r,o.backend,o)}queueLoad(e,t,r,o){const n={},i={},a={},s={};return e.forEach((e=>{let o=!0;t.forEach((t=>{const a=`${e}|${t}`;!r.reload&&this.store.hasResourceBundle(e,t)?this.state[a]=2:this.state[a]<0||(1===this.state[a]?void 0===i[a]&&(i[a]=!0):(this.state[a]=1,o=!1,void 0===i[a]&&(i[a]=!0),void 0===n[a]&&(n[a]=!0),void 0===s[t]&&(s[t]=!0)))})),o||(a[e]=!0)})),(Object.keys(n).length||Object.keys(i).length)&&this.queue.push({pending:i,pendingCount:Object.keys(i).length,loaded:{},errors:[],callback:o}),{toLoad:Object.keys(n),pending:Object.keys(i),toLoadLanguages:Object.keys(a),toLoadNamespaces:Object.keys(s)}}loaded(e,t,r){const o=e.split("|"),n=o[0],i=o[1];t&&this.emit("failedLoading",n,i,t),r&&this.store.addResourceBundle(n,i,r),this.state[e]=t?-1:2;const a={};this.queue.forEach((r=>{!function(e,t,r,o){const{obj:n,k:i}=rt(e,t,Object);n[i]=n[i]||[],o&&(n[i]=n[i].concat(r)),o||n[i].push(r)}(r.loaded,[n],i),function(e,t){void 0!==e.pending[t]&&(delete e.pending[t],e.pendingCount--)}(r,e),t&&r.errors.push(t),0!==r.pendingCount||r.done||(Object.keys(r.loaded).forEach((e=>{a[e]||(a[e]={});const t=r.loaded[e];t.length&&t.forEach((t=>{void 0===a[e][t]&&(a[e][t]=!0)}))})),r.done=!0,r.errors.length?r.callback(r.errors):r.callback())})),this.emit("loaded",a),this.queue=this.queue.filter((e=>!e.done))}read(e,t,r){let o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:this.retryTimeout,i=arguments.length>5?arguments[5]:void 0;if(!e.length)return i(null,{});if(this.readingCalls>=this.maxParallelReads)return void this.waitingReads.push({lng:e,ns:t,fcName:r,tried:o,wait:n,callback:i});this.readingCalls++;const a=(a,s)=>{if(this.readingCalls--,this.waitingReads.length>0){const e=this.waitingReads.shift();this.read(e.lng,e.ns,e.fcName,e.tried,e.wait,e.callback)}a&&s&&o<this.maxRetries?setTimeout((()=>{this.read.call(this,e,t,r,o+1,2*n,i)}),n):i(a,s)},s=this.backend[r].bind(this.backend);if(2!==s.length)return s(e,t,a);try{const r=s(e,t);r&&"function"==typeof r.then?r.then((e=>a(null,e))).catch(a):a(null,r)}catch(e){a(e)}}prepareLoading(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=arguments.length>3?arguments[3]:void 0;if(!this.backend)return this.logger.warn("No backend was added via i18next.use. Will not load resources."),o&&o();"string"==typeof e&&(e=this.languageUtils.toResolveHierarchy(e)),"string"==typeof t&&(t=[t]);const n=this.queueLoad(e,t,r,o);if(!n.toLoad.length)return n.pending.length||o(),null;n.toLoad.forEach((e=>{this.loadOne(e)}))}load(e,t,r){this.prepareLoading(e,t,{},r)}reload(e,t,r){this.prepareLoading(e,t,{reload:!0},r)}loadOne(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";const r=e.split("|"),o=r[0],n=r[1];this.read(o,n,"read",void 0,void 0,((r,i)=>{r&&this.logger.warn(`${t}loading namespace ${n} for language ${o} failed`,r),!r&&i&&this.logger.log(`${t}loaded namespace ${n} for language ${o}`,i),this.loaded(e,r,i)}))}saveMissing(e,t,r,o,n){let i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{},a=arguments.length>6&&void 0!==arguments[6]?arguments[6]:()=>{};if(this.services.utils&&this.services.utils.hasLoadedNamespace&&!this.services.utils.hasLoadedNamespace(t))this.logger.warn(`did not save key "${r}" as the namespace "${t}" was not yet loaded`,"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");else if(null!=r&&""!==r){if(this.backend&&this.backend.create){const s={...i,isUpdate:n},l=this.backend.create.bind(this.backend);if(l.length<6)try{let n;n=5===l.length?l(e,t,r,o,s):l(e,t,r,o),n&&"function"==typeof n.then?n.then((e=>a(null,e))).catch(a):a(null,n)}catch(e){a(e)}else l(e,t,r,o,a,s)}e&&e[0]&&this.store.addResource(e[0],t,r,o)}}}function Et(){return{debug:!1,initImmediate:!0,ns:["translation"],defaultNS:["translation"],fallbackLng:["dev"],fallbackNS:!1,supportedLngs:!1,nonExplicitSupportedLngs:!1,load:"all",preload:!1,simplifyPluralSuffix:!0,keySeparator:".",nsSeparator:":",pluralSeparator:"_",contextSeparator:"_",partialBundledLanguages:!1,saveMissing:!1,updateMissing:!1,saveMissingTo:"fallback",saveMissingPlurals:!0,missingKeyHandler:!1,missingInterpolationHandler:!1,postProcess:!1,postProcessPassResolved:!1,returnNull:!1,returnEmptyString:!0,returnObjects:!1,joinArrays:!1,returnedObjectHandler:!1,parseMissingKeyHandler:!1,appendNamespaceToMissingKey:!1,appendNamespaceToCIMode:!1,overloadTranslationOptionHandler:function(e){let t={};if("object"==typeof e[1]&&(t=e[1]),"string"==typeof e[1]&&(t.defaultValue=e[1]),"string"==typeof e[2]&&(t.tDescription=e[2]),"object"==typeof e[2]||"object"==typeof e[3]){const r=e[3]||e[2];Object.keys(r).forEach((e=>{t[e]=r[e]}))}return t},interpolation:{escapeValue:!0,format:(e,t,r,o)=>e,prefix:"{{",suffix:"}}",formatSeparator:",",unescapePrefix:"-",nestingPrefix:"$t(",nestingSuffix:")",nestingOptionsSeparator:",",maxReplaces:1e3,skipOnVariables:!0}}}function Lt(e){return"string"==typeof e.ns&&(e.ns=[e.ns]),"string"==typeof e.fallbackLng&&(e.fallbackLng=[e.fallbackLng]),"string"==typeof e.fallbackNS&&(e.fallbackNS=[e.fallbackNS]),e.supportedLngs&&e.supportedLngs.indexOf("cimode")<0&&(e.supportedLngs=e.supportedLngs.concat(["cimode"])),e}function Tt(){}class Pt extends Qe{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0;var r;if(super(),this.options=Lt(e),this.services={},this.logger=Xe,this.modules={external:[]},r=this,Object.getOwnPropertyNames(Object.getPrototypeOf(r)).forEach((e=>{"function"==typeof r[e]&&(r[e]=r[e].bind(r))})),t&&!this.isInitialized&&!e.isClone){if(!this.options.initImmediate)return this.init(e,t),this;setTimeout((()=>{this.init(e,t)}),0)}}init(){var e=this;let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1?arguments[1]:void 0;"function"==typeof t&&(r=t,t={}),!t.defaultNS&&!1!==t.defaultNS&&t.ns&&("string"==typeof t.ns?t.defaultNS=t.ns:t.ns.indexOf("translation")<0&&(t.defaultNS=t.ns[0]));const o=Et();function n(e){return e?"function"==typeof e?new e:e:null}if(this.options={...o,...this.options,...Lt(t)},"v1"!==this.options.compatibilityAPI&&(this.options.interpolation={...o.interpolation,...this.options.interpolation}),void 0!==t.keySeparator&&(this.options.userDefinedKeySeparator=t.keySeparator),void 0!==t.nsSeparator&&(this.options.userDefinedNsSeparator=t.nsSeparator),!this.options.isClone){let t;this.modules.logger?Xe.init(n(this.modules.logger),this.options):Xe.init(null,this.options),this.modules.formatter?t=this.modules.formatter:"undefined"!=typeof Intl&&(t=St);const r=new bt(this.options);this.store=new ht(this.options.resources,this.options);const i=this.services;i.logger=Xe,i.resourceStore=this.store,i.languageUtils=r,i.pluralResolver=new kt(r,{prepend:this.options.pluralSeparator,compatibilityJSON:this.options.compatibilityJSON,simplifyPluralSuffix:this.options.simplifyPluralSuffix}),!t||this.options.interpolation.format&&this.options.interpolation.format!==o.interpolation.format||(i.formatter=n(t),i.formatter.init(i,this.options),this.options.interpolation.format=i.formatter.format.bind(i.formatter)),i.interpolator=new _t(this.options),i.utils={hasLoadedNamespace:this.hasLoadedNamespace.bind(this)},i.backendConnector=new zt(n(this.modules.backend),i.resourceStore,i,this.options),i.backendConnector.on("*",(function(t){for(var r=arguments.length,o=new Array(r>1?r-1:0),n=1;n<r;n++)o[n-1]=arguments[n];e.emit(t,...o)})),this.modules.languageDetector&&(i.languageDetector=n(this.modules.languageDetector),i.languageDetector.init&&i.languageDetector.init(i,this.options.detection,this.options)),this.modules.i18nFormat&&(i.i18nFormat=n(this.modules.i18nFormat),i.i18nFormat.init&&i.i18nFormat.init(this)),this.translator=new gt(this.services,this.options),this.translator.on("*",(function(t){for(var r=arguments.length,o=new Array(r>1?r-1:0),n=1;n<r;n++)o[n-1]=arguments[n];e.emit(t,...o)})),this.modules.external.forEach((e=>{e.init&&e.init(this)}))}if(this.format=this.options.interpolation.format,r||(r=Tt),this.options.fallbackLng&&!this.services.languageDetector&&!this.options.lng){const e=this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);e.length>0&&"dev"!==e[0]&&(this.options.lng=e[0])}this.services.languageDetector||this.options.lng||this.logger.warn("init: no languageDetector is used and no lng is defined");["getResource","hasResourceBundle","getResourceBundle","getDataByLanguage"].forEach((t=>{this[t]=function(){return e.store[t](...arguments)}}));["addResource","addResources","addResourceBundle","removeResourceBundle"].forEach((t=>{this[t]=function(){return e.store[t](...arguments),e}}));const i=et(),a=()=>{const e=(e,t)=>{this.isInitialized&&!this.initializedStoreOnce&&this.logger.warn("init: i18next is already initialized. You should call init just once!"),this.isInitialized=!0,this.options.isClone||this.logger.log("initialized",this.options),this.emit("initialized",this.options),i.resolve(t),r(e,t)};if(this.languages&&"v1"!==this.options.compatibilityAPI&&!this.isInitialized)return e(null,this.t.bind(this));this.changeLanguage(this.options.lng,e)};return this.options.resources||!this.options.initImmediate?a():setTimeout(a,0),i}loadResources(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Tt;const r="string"==typeof e?e:this.language;if("function"==typeof e&&(t=e),!this.options.resources||this.options.partialBundledLanguages){if(r&&"cimode"===r.toLowerCase())return t();const e=[],o=t=>{if(!t)return;this.services.languageUtils.toResolveHierarchy(t).forEach((t=>{e.indexOf(t)<0&&e.push(t)}))};if(r)o(r);else{this.services.languageUtils.getFallbackCodes(this.options.fallbackLng).forEach((e=>o(e)))}this.options.preload&&this.options.preload.forEach((e=>o(e))),this.services.backendConnector.load(e,this.options.ns,(e=>{e||this.resolvedLanguage||!this.language||this.setResolvedLanguage(this.language),t(e)}))}else t(null)}reloadResources(e,t,r){const o=et();return e||(e=this.languages),t||(t=this.options.ns),r||(r=Tt),this.services.backendConnector.reload(e,t,(e=>{o.resolve(),r(e)})),o}use(e){if(!e)throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");if(!e.type)throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");return"backend"===e.type&&(this.modules.backend=e),("logger"===e.type||e.log&&e.warn&&e.error)&&(this.modules.logger=e),"languageDetector"===e.type&&(this.modules.languageDetector=e),"i18nFormat"===e.type&&(this.modules.i18nFormat=e),"postProcessor"===e.type&&pt.addPostProcessor(e),"formatter"===e.type&&(this.modules.formatter=e),"3rdParty"===e.type&&this.modules.external.push(e),this}setResolvedLanguage(e){if(e&&this.languages&&!(["cimode","dev"].indexOf(e)>-1))for(let e=0;e<this.languages.length;e++){const t=this.languages[e];if(!(["cimode","dev"].indexOf(t)>-1)&&this.store.hasLanguageSomeTranslations(t)){this.resolvedLanguage=t;break}}}changeLanguage(e,t){var r=this;this.isLanguageChangingTo=e;const o=et();this.emit("languageChanging",e);const n=e=>{this.language=e,this.languages=this.services.languageUtils.toResolveHierarchy(e),this.resolvedLanguage=void 0,this.setResolvedLanguage(e)},i=(e,i)=>{i?(n(i),this.translator.changeLanguage(i),this.isLanguageChangingTo=void 0,this.emit("languageChanged",i),this.logger.log("languageChanged",i)):this.isLanguageChangingTo=void 0,o.resolve((function(){return r.t(...arguments)})),t&&t(e,(function(){return r.t(...arguments)}))},a=t=>{e||t||!this.services.languageDetector||(t=[]);const r="string"==typeof t?t:this.services.languageUtils.getBestMatchFromCodes(t);r&&(this.language||n(r),this.translator.language||this.translator.changeLanguage(r),this.services.languageDetector&&this.services.languageDetector.cacheUserLanguage&&this.services.languageDetector.cacheUserLanguage(r)),this.loadResources(r,(e=>{i(e,r)}))};return e||!this.services.languageDetector||this.services.languageDetector.async?!e&&this.services.languageDetector&&this.services.languageDetector.async?0===this.services.languageDetector.detect.length?this.services.languageDetector.detect().then(a):this.services.languageDetector.detect(a):a(e):a(this.services.languageDetector.detect()),o}getFixedT(e,t,r){var o=this;const n=function(e,t){let i;if("object"!=typeof t){for(var a=arguments.length,s=new Array(a>2?a-2:0),l=2;l<a;l++)s[l-2]=arguments[l];i=o.options.overloadTranslationOptionHandler([e,t].concat(s))}else i={...t};i.lng=i.lng||n.lng,i.lngs=i.lngs||n.lngs,i.ns=i.ns||n.ns,i.keyPrefix=i.keyPrefix||r||n.keyPrefix;const c=o.options.keySeparator||".";let d;return d=i.keyPrefix&&Array.isArray(e)?e.map((e=>`${i.keyPrefix}${c}${e}`)):i.keyPrefix?`${i.keyPrefix}${c}${e}`:e,o.t(d,i)};return"string"==typeof e?n.lng=e:n.lngs=e,n.ns=t,n.keyPrefix=r,n}t(){return this.translator&&this.translator.translate(...arguments)}exists(){return this.translator&&this.translator.exists(...arguments)}setDefaultNamespace(e){this.options.defaultNS=e}hasLoadedNamespace(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!this.isInitialized)return this.logger.warn("hasLoadedNamespace: i18next was not initialized",this.languages),!1;if(!this.languages||!this.languages.length)return this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty",this.languages),!1;const r=t.lng||this.resolvedLanguage||this.languages[0],o=!!this.options&&this.options.fallbackLng,n=this.languages[this.languages.length-1];if("cimode"===r.toLowerCase())return!0;const i=(e,t)=>{const r=this.services.backendConnector.state[`${e}|${t}`];return-1===r||2===r};if(t.precheck){const e=t.precheck(this,i);if(void 0!==e)return e}return!!this.hasResourceBundle(r,e)||(!(this.services.backendConnector.backend&&(!this.options.resources||this.options.partialBundledLanguages))||!(!i(r,e)||o&&!i(n,e)))}loadNamespaces(e,t){const r=et();return this.options.ns?("string"==typeof e&&(e=[e]),e.forEach((e=>{this.options.ns.indexOf(e)<0&&this.options.ns.push(e)})),this.loadResources((e=>{r.resolve(),t&&t(e)})),r):(t&&t(),Promise.resolve())}loadLanguages(e,t){const r=et();"string"==typeof e&&(e=[e]);const o=this.options.preload||[],n=e.filter((e=>o.indexOf(e)<0));return n.length?(this.options.preload=o.concat(n),this.loadResources((e=>{r.resolve(),t&&t(e)})),r):(t&&t(),Promise.resolve())}dir(e){if(e||(e=this.resolvedLanguage||(this.languages&&this.languages.length>0?this.languages[0]:this.language)),!e)return"rtl";const t=this.services&&this.services.languageUtils||new bt(Et());return["ar","shu","sqr","ssh","xaa","yhd","yud","aao","abh","abv","acm","acq","acw","acx","acy","adf","ads","aeb","aec","afb","ajp","apc","apd","arb","arq","ars","ary","arz","auz","avl","ayh","ayl","ayn","ayp","bbz","pga","he","iw","ps","pbt","pbu","pst","prp","prd","ug","ur","ydd","yds","yih","ji","yi","hbo","men","xmn","fa","jpr","peo","pes","prs","dv","sam","ckb"].indexOf(t.getLanguagePartFromCode(e))>-1||e.toLowerCase().indexOf("-arab")>1?"rtl":"ltr"}static createInstance(){return new Pt(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},arguments.length>1?arguments[1]:void 0)}cloneInstance(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Tt;const r=e.forkResourceStore;r&&delete e.forkResourceStore;const o={...this.options,...e,isClone:!0},n=new Pt(o);void 0===e.debug&&void 0===e.prefix||(n.logger=n.logger.clone(e));return["store","services","language"].forEach((e=>{n[e]=this[e]})),n.services={...this.services},n.services.utils={hasLoadedNamespace:n.hasLoadedNamespace.bind(n)},r&&(n.store=new ht(this.store.data,o),n.services.resourceStore=n.store),n.translator=new gt(n.services,o),n.translator.on("*",(function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),o=1;o<t;o++)r[o-1]=arguments[o];n.emit(e,...r)})),n.init(o,t),n.translator.options=o,n.translator.backendConnector.services.utils={hasLoadedNamespace:n.hasLoadedNamespace.bind(n)},n}toJSON(){return{options:this.options,store:this.store,language:this.language,languages:this.languages,resolvedLanguage:this.resolvedLanguage}}}const Dt=Pt.createInstance();Dt.createInstance=Pt.createInstance;const Ft=Dt.createInstance,Ot=(Dt.dir,Dt.init,Dt.loadResources,Dt.reloadResources,Dt.use,Dt.changeLanguage,Dt.getFixedT,Dt.t,Dt.exists,Dt.setDefaultNamespace,Dt.hasLoadedNamespace,Dt.loadNamespaces,Dt.loadLanguages,JSON.parse('{"list-process-models":"FR-Process models","error-title":"FR-Error","error-retry":"FR-An error has occurred. Process model cannot be created at this time.","error-400":"FR-An error has occurred. Page not available.","error-401":"FR-<span class=\\"bolded\\">Unauthorized</span><br />You are not authorized to perform the requested action.If you think you should have access please contact your <a href=\\"mailto:promapp-noreply@nintex.com\\">Promaster</a> or internal support team to request appropriate permissions to be enabled.","error-403":"FR-<span class=\\"bolded\\">Unauthorized</span><br />You are not authorized to perform the requested action. If you think you should have access please contact your <a href=\\"mailto:promapp-noreply@nintex.com\\">Promaster</a> or internal support team to request appropriate permissions to be enabled.","error-404":"FR-We are unable to find the page you requested.<br /><br />It has probably:<br />- Moved to another location<br />- No longer exists.<br /><br />If you feel something is missing that should be here please contact Process Manager Support.","error-500":"FR-An error has occurred. Page not available. Please contact your Promaster or internal support team to request appropriate permissions to be enabled.","error-502":"FR-An error has occurred. Page not available. Please contact your Promaster or internal support team to request appropriate permissions to be enabled.","error-503":"FR-An error has occurred. Page not available. Please contact your Promaster or internal support team to request appropriate permissions to be enabled.","error-504":"FR-An error has occurred. Page not available. Please contact your Promaster or internal support team to request appropriate permissions to be enabled.","error-default":"FR-An error has occurred. Page not available. Please contact your Promaster or internal support team to request appropriate permissions to be enabled.","retry-text":"FR-Retry","close-text":"FR-close"}')),Nt=Ft({fallbackLng:"en",debug:!0,cleanCode:!0,resources:{en:{bpmnList:JSON.parse('{"list-process-models":"Process models","error-title":"Error","error-retry":"An error has occurred. Process model cannot be created at this time.","error-400":"An error has occurred. Page not available.","error-401":"<span class=\\"bolded\\">Unauthorized</span><br />You are not authorized to perform the requested action.If you think you should have access please contact your <a href=\\"mailto:promapp-noreply@nintex.com\\">Promaster</a> or internal support team to request appropriate permissions to be enabled.","error-403":"<span class=\\"bolded\\">Unauthorized</span><br />You are not authorized to perform the requested action. If you think you should have access please contact your <a href=\\"mailto:promapp-noreply@nintex.com\\">Promaster</a> or internal support team to request appropriate permissions to be enabled.","error-404":"We are unable to find the page you requested.<br /><br />It has probably:<br />- Moved to another location<br />- No longer exists.<br /><br />If you feel something is missing that should be here please contact Process Manager Support.","error-500":"An error has occurred. Page not available. Please contact your Promaster or internal support team to request appropriate permissions to be enabled.","error-502":"An error has occurred. Page not available. Please contact your Promaster or internal support team to request appropriate permissions to be enabled.","error-503":"An error has occurred. Page not available. Please contact your Promaster or internal support team to request appropriate permissions to be enabled.","error-504":"An error has occurred. Page not available. Please contact your Promaster or internal support team to request appropriate permissions to be enabled.","error-default":"An error has occurred. Page not available. Please contact your Promaster or internal support team to request appropriate permissions to be enabled.","retry-text":"Retry","close-text":"close"}')},fr:{bpmnList:{}},na:{bpmnList:Ot}},defaultNS:"bpmnList"});Nt.init();const Bt=Nt;class Mt{static async setLanguage(e){await Bt.changeLanguage(e)}static getInstance(){return this._translationService||(this._translationService=new Mt,Bt.changeLanguage(navigator.language)),this._translationService}static resetInstance(){return this._translationService=null,this.getInstance()}getTranslation(e){return`${Bt.t(e)}`}getTranslationAndReplace(e,t){let r=`${Bt.t(e)}`;return t.forEach(((e,t)=>{r=r.replace(`{${t}}`,e)})),r}}class Rt extends(L(T.oi)){static get scopedElements(){return{}}static get styles(){return Je}constructor(){super(),this._translationService=Mt.getInstance()}render(){return T.dy`<header>
      <h1>${this._translationService.getTranslation("list-process-models")}</h1>
    </header>`}}var It=r(3311);const{I:jt}=It._$LH,Vt=e=>void 0===e.strings,Ht={},Ut=1,qt=2,Zt=3,Kt=4,Wt=e=>(...t)=>({_$litDirective$:e,values:t});class Jt{constructor(e){}get _$AU(){return this._$AM._$AU}_$AT(e,t,r){this._$Ct=e,this._$AM=t,this._$Ci=r}_$AS(e,t){return this.update(e,t)}update(e,t){return this.render(...t)}}const Gt=(e,t)=>{var r,o;const n=e._$AN;if(void 0===n)return!1;for(const e of n)null===(o=(r=e)._$AO)||void 0===o||o.call(r,t,!1),Gt(e,t);return!0},Yt=e=>{let t,r;do{if(void 0===(t=e._$AM))break;r=t._$AN,r.delete(e),e=t}while(0===(null==r?void 0:r.size))},Xt=e=>{for(let t;t=e._$AM;e=t){let r=t._$AN;if(void 0===r)t._$AN=r=new Set;else if(r.has(e))break;r.add(e),tr(t)}};function Qt(e){void 0!==this._$AN?(Yt(this),this._$AM=e,Xt(this)):this._$AM=e}function er(e,t=!1,r=0){const o=this._$AH,n=this._$AN;if(void 0!==n&&0!==n.size)if(t)if(Array.isArray(o))for(let e=r;e<o.length;e++)Gt(o[e],!1),Yt(o[e]);else null!=o&&(Gt(o,!1),Yt(o));else Gt(this,e)}const tr=e=>{var t,r,o,n;e.type==qt&&(null!==(t=(o=e)._$AP)&&void 0!==t||(o._$AP=er),null!==(r=(n=e)._$AQ)&&void 0!==r||(n._$AQ=Qt))};class rr extends Jt{constructor(){super(...arguments),this._$AN=void 0}_$AT(e,t,r){super._$AT(e,t,r),Xt(this),this.isConnected=e._$AU}_$AO(e,t=!0){var r,o;e!==this.isConnected&&(this.isConnected=e,e?null===(r=this.reconnected)||void 0===r||r.call(this):null===(o=this.disconnected)||void 0===o||o.call(this)),t&&(Gt(this,e),Yt(this))}setValue(e){if(Vt(this._$Ct))this._$Ct._$AI(e,this);else{const t=[...this._$Ct._$AH];t[this._$Ci]=e,this._$Ct._$AI(t,this,0)}}disconnected(){}reconnected(){}}class or{constructor(e){this.G=e}disconnect(){this.G=void 0}reconnect(e){this.G=e}deref(){return this.G}}class nr{constructor(){this.Y=void 0,this.Z=void 0}get(){return this.Y}pause(){var e;null!==(e=this.Y)&&void 0!==e||(this.Y=new Promise((e=>this.Z=e)))}resume(){var e;null===(e=this.Z)||void 0===e||e.call(this),this.Y=this.Z=void 0}}const ir=e=>!(e=>null===e||"object"!=typeof e&&"function"!=typeof e)(e)&&"function"==typeof e.then,ar=1073741823;const sr=Wt(class extends rr{constructor(){super(...arguments),this._$C_t=ar,this._$Cwt=[],this._$Cq=new or(this),this._$CK=new nr}render(...e){var t;return null!==(t=e.find((e=>!ir(e))))&&void 0!==t?t:It.Jb}update(e,t){const r=this._$Cwt;let o=r.length;this._$Cwt=t;const n=this._$Cq,i=this._$CK;this.isConnected||this.disconnected();for(let e=0;e<t.length&&!(e>this._$C_t);e++){const a=t[e];if(!ir(a))return this._$C_t=e,a;e<o&&a===r[e]||(this._$C_t=ar,o=0,Promise.resolve(a).then((async e=>{for(;i.get();)await i.get();const t=n.deref();if(void 0!==t){const r=t._$Cwt.indexOf(a);r>-1&&r<t._$C_t&&(t._$C_t=r,t.setValue(e))}})))}return It.Jb}disconnected(){this._$Cq.disconnect(),this._$CK.pause()}reconnected(){this._$Cq.reconnect(this),this._$CK.resume()}}),lr=[Ve,T.iv`
  :host {
    display: grid;
  }
`];class cr extends Jt{constructor(e){if(super(e),this.et=It.Ld,e.type!==qt)throw Error(this.constructor.directiveName+"() can only be used in child bindings")}render(e){if(e===It.Ld||null==e)return this.ft=void 0,this.et=e;if(e===It.Jb)return e;if("string"!=typeof e)throw Error(this.constructor.directiveName+"() called with a non-string value");if(e===this.et)return this.ft;this.et=e;const t=[e];return t.raw=t,this.ft={_$litType$:this.constructor.resultType,strings:t,values:[]}}}cr.directiveName="unsafeHTML",cr.resultType=1;const dr=Wt(cr);var ur=function(e){function t(t){var r=e.call(this)||this;return r._value=t,r}return V(t,e),Object.defineProperty(t.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),t.prototype._subscribe=function(t){var r=e.prototype._subscribe.call(this,t);return!r.closed&&t.next(this._value),r},t.prototype.getValue=function(){var e=this,t=e.hasError,r=e.thrownError,o=e._value;if(t)throw r;return this._throwIfClosed(),o},t.prototype.next=function(t){e.prototype.next.call(this,this._value=t)},t}(xe);const hr=[Ve,T.iv`
  .modal-content {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    gap: ${qe};
  }

  .bolded {
    font-weight: var(--ne-ref-font-weight-bold);
  }

  .message-label {
    flex-grow: 1;
    font-family: var(--ne-ref-font-family-open-sans);
    font-weight: var(--ne-ref-font-weight-regular);
    font-size: var(--ne-ref-font-size-04);
    line-height: var(--ne-ref-line-height-smal);
    color: var(--primary-text-color);
    padding-top: ${He};
  }

  .icon {
    flex-shrink: 0;
    display: block;
    justify-content: center;
    align-items: center;
    align-content: center;
    box-sizing: border-box;
    width: 50px;
    height: 50px;
    color: var(--nx-red-60);
  }
  .modal-footer {
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    justify-content: flex-end;
    align-items: center;
    align-content: center;
  }

  .modal-footer .button {
    margin-left: ${Ue};
  }
`];var pr=function(e,t,r,o){var n,i=arguments.length,a=i<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,o);else for(var s=e.length-1;s>=0;s--)(n=e[s])&&(a=(i<3?n(a):i>3?n(t,r,a):n(t,r))||a);return i>3&&a&&Object.defineProperty(t,r,a),a};class fr extends(L(T.oi)){static get scopedElements(){return{"ne-button-set":customElements.get("ne-button-set"),"ne-modal":customElements.get("ne-modal"),"ne-button":customElements.get("ne-button"),"ne-icon":customElements.get("ne-icon")}}static get styles(){return hr}constructor(){super(),this.closeEvent=new ur(null),this.retryLimit=3,this.retryCount=0,this.canRetry=!1,this._onClose=()=>{this.closeEvent.next("close")},this._onRetryClick=()=>{this.closeEvent.next("retry")},this._translationService=Mt.getInstance()}getErrorMessage(){if(this.errorMessage)return T.dy`<p>${this.errorMessage}</p>`;switch(this.errorCode){case"400":return T.dy`${dr(this._translationService.getTranslation("error-400"))}`;case"401":return T.dy`${dr(this._translationService.getTranslation("error-401"))}`;case"403":return T.dy`${dr(this._translationService.getTranslation("error-403"))}`;case"404":return T.dy`${dr(this._translationService.getTranslation("error-404"))}`;case"500":return T.dy`${dr(this._translationService.getTranslation("error-500"))}`;case"502":return T.dy`${dr(this._translationService.getTranslation("error-502"))}`;case"503":return T.dy`${dr(this._translationService.getTranslation("error-503"))}`;case"504":return T.dy`${dr(this._translationService.getTranslation("error-504"))}`;default:return T.dy`${dr(this._translationService.getTranslation("error-default"))}`}}render(){return T.dy`<ne-modal
      ?open=${this.open}
      header=${this.header}
      @ne-close=${this._onClose}
      ><div class="modal-content">
        <span class="icon">
          <ne-icon type="dangerExclamation" class="icon-fill"></ne-icon>
        </span>
        <label class="message-label">${this.getErrorMessage()}</label>
      </div>
      <div slot="footer" class="modal-footer right-start">
        <ne-button
          class="button close"
          variant=${this.retryCount<this.retryLimit&&this.canRetry?"secondary":"primary"}
          @click=${this._onClose}
          >${this._translationService.getTranslation("close-text")}</ne-button
        >
        ${this.retryCount<this.retryLimit&&this.canRetry?T.dy`<ne-button
              class="button retry"
              variant="primary"
              @click=${this._onRetryClick}
              >${this._translationService.getTranslation("retry-text")}</ne-button
            >`:null}
      </div></ne-modal
    >`}}pr([O({type:Boolean,reflect:!0})],fr.prototype,"open",void 0),pr([O({type:String,reflect:!0})],fr.prototype,"header",void 0),pr([O({type:String,reflect:!0})],fr.prototype,"errorMessage",void 0),pr([O({type:Number,reflect:!0})],fr.prototype,"retryLimit",void 0),pr([O({type:Number,reflect:!0})],fr.prototype,"retryCount",void 0),pr([O({type:String,reflect:!0})],fr.prototype,"errorCode",void 0),pr([O({type:Boolean,reflect:!0})],fr.prototype,"canRetry",void 0);var gr=function(e,t,r,o){var n,i=arguments.length,a=i<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,o);else for(var s=e.length-1;s>=0;s--)(n=e[s])&&(a=(i<3?n(a):i>3?n(t,r,a):n(t,r))||a);return i>3&&a&&Object.defineProperty(t,r,a),a};class vr extends(L(T.oi)){static get scopedElements(){return{"pi-retry-error-modal":fr,"ne-data-table":customElements.get("ne-data-table"),"ne-button":customElements.get("ne-button"),"ne-label":customElements.get("ne-label"),"ne-status-overlay":customElements.get("ne-status-overlay")}}static get styles(){return lr}constructor(){super(),this._showStatusOverlay=!1,this._showErrorRetry=!1,this._canRetry=!1,this._retryCount=0,this._onCellClicked=e=>{e.detail&&0===e.detail.column&&this._eventService.triggerOpenProcess(e)},this._openProcess=e=>{$e.fireExternal(this,"pi-open-process",{detail:e})},this._onInitialized=()=>{$e.fireExternal(this,"pi-initialized",{})},this._onErrorRetryModalClose=e=>{if(e)switch(this._showErrorRetry=!1,e){case"close":$e.fireExternal(this,"pi-completed",{});break;case"retry":this._processListResult=this.fetchData()}},this._processApiService=Se.getInstance(),this._eventService=$e.getInstance(),this._translationService=Mt.getInstance(),this._headers=[{property:"title",type:"hyperlink",title:"Model name",sortable:!1},{property:"version",title:"Version",sortable:!1},{property:"processGroupName",title:"Process group",sortable:!1,sortDirection:"desc"},{property:"ownerName",title:"Model owner",sortable:!1,sortDirection:"desc"},{property:"expertName",title:"Model expert",sortable:!1,sortDirection:"desc"},{property:"lastModified",type:"datetime_rtf",title:"Modified date",sortable:!1}]}_sortProcesses(e){e.value.sort(((e,t)=>new Date(t.lastModified).getTime()-new Date(e.lastModified).getTime()))}_tableTemplate(e){const t=e.value.map((e=>({record:e})));return T.dy`<ne-data-table
    .options="${{variant:"default",showHeaders:!0}}"
    .headers="${this._headers}"
    .rows="${t}"
    @ne-click=${e=>{this._eventService.triggerOpenProcess(e)}}
  >
  </ne-data-table>`}async fetchData(){try{this._showStatusOverlay=!0;const e=await this._processApiService.getProcessList();return this._sortProcesses(e),this._showStatusOverlay=!1,this._tableTemplate(e)}catch(e){return e instanceof Error?(this._errorMessage=e.message,"400"===this._errorMessage&&(this._canRetry=!0),this._showStatusOverlay=!1,this._showErrorRetry=!0,this._retryCount+=1,T.dy``):(this._showStatusOverlay=!1,T.dy``)}}render(){return T.dy`${sr(this._processListResult,T.dy``)}<ne-status-overlay
        ?show=${this._showStatusOverlay}
        status-delay="500"
      ></ne-status-overlay>
      <pi-retry-error-modal
        class="retry-modal"
        ?open=${this._showErrorRetry}
        header=${this._translationService.getTranslation("error-title")}
        errorCode=${this._errorMessage}
        retryCount=${this._retryCount}
        .canRetry=${this._canRetry}
      ></pi-retry-error-modal>`}connectedCallback(){super.connectedCallback&&super.connectedCallback(),this._initializedSubscription=this._eventService.initializedSubject.subscribe({next:this._onInitialized}),this._openProcessSubscription=this._eventService.openProcessSubscription.subscribe({next:this._openProcess}),this._eventService.triggerInitialized(),this._processListResult=this.fetchData()}firstUpdated(){this._errorRetryModal.closeEvent.subscribe({next:this._onErrorRetryModalClose})}disconnectedCallback(){super.disconnectedCallback&&super.disconnectedCallback(),this._initializedSubscription.unsubscribe(),this._openProcessSubscription.unsubscribe()}}function br(e,t,r,o){var n,i=arguments.length,a=i<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,o);else for(var s=e.length-1;s>=0;s--)(n=e[s])&&(a=(i<3?n(a):i>3?n(t,r,a):n(t,r))||a);return i>3&&a&&Object.defineProperty(t,r,a),a}gr([function(e,t){return B({descriptor:r=>{const o={get(){var t,r;return null!==(r=null===(t=this.renderRoot)||void 0===t?void 0:t.querySelector(e))&&void 0!==r?r:null},enumerable:!0,configurable:!0};if(t){const t="symbol"==typeof r?Symbol():"__"+r;o.get=function(){var r,o;return void 0===this[t]&&(this[t]=null!==(o=null===(r=this.renderRoot)||void 0===r?void 0:r.querySelector(e))&&void 0!==o?o:null),this[t]}}return o}})}(".retry-modal")],vr.prototype,"_errorRetryModal",void 0),gr([N()],vr.prototype,"_processListResult",void 0),gr([N()],vr.prototype,"_showStatusOverlay",void 0),gr([N()],vr.prototype,"_showErrorRetry",void 0),gr([N()],vr.prototype,"_canRetry",void 0),gr([N()],vr.prototype,"_retryCount",void 0),gr([N()],vr.prototype,"_errorMessage",void 0);const mr=T.iv`
  :host {
    all: initial;
  }

  .hidden {
    display: none;
  }
`,yr=Wt(class extends Jt{constructor(e){var t;if(super(e),e.type!==Ut||"class"!==e.name||(null===(t=e.strings)||void 0===t?void 0:t.length)>2)throw Error("`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.")}render(e){return" "+Object.keys(e).filter((t=>e[t])).join(" ")+" "}update(e,[t]){var r,o;if(void 0===this.it){this.it=new Set,void 0!==e.strings&&(this.nt=new Set(e.strings.join(" ").split(/\s/).filter((e=>""!==e))));for(const e in t)t[e]&&!(null===(r=this.nt)||void 0===r?void 0:r.has(e))&&this.it.add(e);return this.render(t)}const n=e.element.classList;this.it.forEach((e=>{e in t||(n.remove(e),this.it.delete(e))}));for(const e in t){const r=!!t[e];r===this.it.has(e)||(null===(o=this.nt)||void 0===o?void 0:o.has(e))||(r?(n.add(e),this.it.add(e)):(n.remove(e),this.it.delete(e)))}return It.Jb}}),Ar=new WeakMap,wr=e=>"function"==typeof e&&Ar.has(e),xr="undefined"!=typeof window&&null!=window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,kr={},Cr={},_r=`{{lit-${String(Math.random()).slice(2)}}}`,$r=`\x3c!--${_r}--\x3e`,Sr=new RegExp(`${_r}|${$r}`),zr="$lit$";class Er{constructor(e,t){this.parts=[],this.element=t;const r=[],o=[],n=document.createTreeWalker(t.content,133,null,!1);let i=0,a=-1,s=0;const{strings:l,values:{length:c}}=e;for(;s<c;){const e=n.nextNode();if(null!==e){if(a++,1===e.nodeType){if(e.hasAttributes()){const t=e.attributes,{length:r}=t;let o=0;for(let e=0;e<r;e++)Lr(t[e].name,zr)&&o++;for(;o-- >0;){const t=l[s],r=Dr.exec(t)[2],o=r.toLowerCase()+zr,n=e.getAttribute(o);e.removeAttribute(o);const i=n.split(Sr);this.parts.push({type:"attribute",index:a,name:r,strings:i}),s+=i.length-1}}"TEMPLATE"===e.tagName&&(o.push(e),n.currentNode=e.content)}else if(3===e.nodeType){const t=e.data;if(t.indexOf(_r)>=0){const o=e.parentNode,n=t.split(Sr),i=n.length-1;for(let t=0;t<i;t++){let r,i=n[t];if(""===i)r=Pr();else{const e=Dr.exec(i);null!==e&&Lr(e[2],zr)&&(i=i.slice(0,e.index)+e[1]+e[2].slice(0,-5)+e[3]),r=document.createTextNode(i)}o.insertBefore(r,e),this.parts.push({type:"node",index:++a})}""===n[i]?(o.insertBefore(Pr(),e),r.push(e)):e.data=n[i],s+=i}}else if(8===e.nodeType)if(e.data===_r){const t=e.parentNode;null!==e.previousSibling&&a!==i||(a++,t.insertBefore(Pr(),e)),i=a,this.parts.push({type:"node",index:a}),null===e.nextSibling?e.data="":(r.push(e),a--),s++}else{let t=-1;for(;-1!==(t=e.data.indexOf(_r,t+1));)this.parts.push({type:"node",index:-1}),s++}}else n.currentNode=o.pop()}for(const e of r)e.parentNode.removeChild(e)}}const Lr=(e,t)=>{const r=e.length-t.length;return r>=0&&e.slice(r)===t},Tr=e=>-1!==e.index,Pr=()=>document.createComment(""),Dr=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;class Fr{constructor(e,t,r){this.__parts=[],this.template=e,this.processor=t,this.options=r}update(e){let t=0;for(const r of this.__parts)void 0!==r&&r.setValue(e[t]),t++;for(const e of this.__parts)void 0!==e&&e.commit()}_clone(){const e=xr?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),t=[],r=this.template.parts,o=document.createTreeWalker(e,133,null,!1);let n,i=0,a=0,s=o.nextNode();for(;i<r.length;)if(n=r[i],Tr(n)){for(;a<n.index;)a++,"TEMPLATE"===s.nodeName&&(t.push(s),o.currentNode=s.content),null===(s=o.nextNode())&&(o.currentNode=t.pop(),s=o.nextNode());if("node"===n.type){const e=this.processor.handleTextExpression(this.options);e.insertAfterNode(s.previousSibling),this.__parts.push(e)}else this.__parts.push(...this.processor.handleAttributeExpressions(s,n.name,n.strings,this.options));i++}else this.__parts.push(void 0),i++;return xr&&(document.adoptNode(e),customElements.upgrade(e)),e}}const Or=window.trustedTypes&&trustedTypes.createPolicy("lit-html",{createHTML:e=>e}),Nr=` ${_r} `;class Br{constructor(e,t,r,o){this.strings=e,this.values=t,this.type=r,this.processor=o}getHTML(){const e=this.strings.length-1;let t="",r=!1;for(let o=0;o<e;o++){const e=this.strings[o],n=e.lastIndexOf("\x3c!--");r=(n>-1||r)&&-1===e.indexOf("--\x3e",n+1);const i=Dr.exec(e);t+=null===i?e+(r?Nr:$r):e.substr(0,i.index)+i[1]+i[2]+zr+i[3]+_r}return t+=this.strings[e],t}getTemplateElement(){const e=document.createElement("template");let t=this.getHTML();return void 0!==Or&&(t=Or.createHTML(t)),e.innerHTML=t,e}}const Mr=e=>null===e||!("object"==typeof e||"function"==typeof e),Rr=e=>Array.isArray(e)||!(!e||!e[Symbol.iterator]);class Ir{constructor(e,t,r){this.dirty=!0,this.element=e,this.name=t,this.strings=r,this.parts=[];for(let e=0;e<r.length-1;e++)this.parts[e]=this._createPart()}_createPart(){return new jr(this)}_getValue(){const e=this.strings,t=e.length-1,r=this.parts;if(1===t&&""===e[0]&&""===e[1]){const e=r[0].value;if("symbol"==typeof e)return String(e);if("string"==typeof e||!Rr(e))return e}let o="";for(let n=0;n<t;n++){o+=e[n];const t=r[n];if(void 0!==t){const e=t.value;if(Mr(e)||!Rr(e))o+="string"==typeof e?e:String(e);else for(const t of e)o+="string"==typeof t?t:String(t)}}return o+=e[t],o}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class jr{constructor(e){this.value=void 0,this.committer=e}setValue(e){e===kr||Mr(e)&&e===this.value||(this.value=e,wr(e)||(this.committer.dirty=!0))}commit(){for(;wr(this.value);){const e=this.value;this.value=kr,e(this)}this.value!==kr&&this.committer.commit()}}class Vr{constructor(e){this.value=void 0,this.__pendingValue=void 0,this.options=e}appendInto(e){this.startNode=e.appendChild(Pr()),this.endNode=e.appendChild(Pr())}insertAfterNode(e){this.startNode=e,this.endNode=e.nextSibling}appendIntoPart(e){e.__insert(this.startNode=Pr()),e.__insert(this.endNode=Pr())}insertAfterPart(e){e.__insert(this.startNode=Pr()),this.endNode=e.endNode,e.endNode=this.startNode}setValue(e){this.__pendingValue=e}commit(){if(null===this.startNode.parentNode)return;for(;wr(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=kr,e(this)}const e=this.__pendingValue;e!==kr&&(Mr(e)?e!==this.value&&this.__commitText(e):e instanceof Br?this.__commitTemplateResult(e):e instanceof Node?this.__commitNode(e):Rr(e)?this.__commitIterable(e):e===Cr?(this.value=Cr,this.clear()):this.__commitText(e))}__insert(e){this.endNode.parentNode.insertBefore(e,this.endNode)}__commitNode(e){this.value!==e&&(this.clear(),this.__insert(e),this.value=e)}__commitText(e){const t=this.startNode.nextSibling,r="string"==typeof(e=null==e?"":e)?e:String(e);t===this.endNode.previousSibling&&3===t.nodeType?t.data=r:this.__commitNode(document.createTextNode(r)),this.value=e}__commitTemplateResult(e){const t=this.options.templateFactory(e);if(this.value instanceof Fr&&this.value.template===t)this.value.update(e.values);else{const r=new Fr(t,e.processor,this.options),o=r._clone();r.update(e.values),this.__commitNode(o),this.value=r}}__commitIterable(e){Array.isArray(this.value)||(this.value=[],this.clear());const t=this.value;let r,o=0;for(const n of e)r=t[o],void 0===r&&(r=new Vr(this.options),t.push(r),0===o?r.appendIntoPart(this):r.insertAfterPart(t[o-1])),r.setValue(n),r.commit(),o++;o<t.length&&(t.length=o,this.clear(r&&r.endNode))}clear(e=this.startNode){((e,t,r=null)=>{for(;t!==r;){const r=t.nextSibling;e.removeChild(t),t=r}})(this.startNode.parentNode,e.nextSibling,this.endNode)}}class Hr{constructor(e,t,r){if(this.value=void 0,this.__pendingValue=void 0,2!==r.length||""!==r[0]||""!==r[1])throw new Error("Boolean attributes can only contain a single expression");this.element=e,this.name=t,this.strings=r}setValue(e){this.__pendingValue=e}commit(){for(;wr(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=kr,e(this)}if(this.__pendingValue===kr)return;const e=!!this.__pendingValue;this.value!==e&&(e?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name),this.value=e),this.__pendingValue=kr}}class Ur extends Ir{constructor(e,t,r){super(e,t,r),this.single=2===r.length&&""===r[0]&&""===r[1]}_createPart(){return new qr(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class qr extends jr{}let Zr=!1;(()=>{try{const e={get capture(){return Zr=!0,!1}};window.addEventListener("test",e,e),window.removeEventListener("test",e,e)}catch(e){}})();class Kr{constructor(e,t,r){this.value=void 0,this.__pendingValue=void 0,this.element=e,this.eventName=t,this.eventContext=r,this.__boundHandleEvent=e=>this.handleEvent(e)}setValue(e){this.__pendingValue=e}commit(){for(;wr(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=kr,e(this)}if(this.__pendingValue===kr)return;const e=this.__pendingValue,t=this.value,r=null==e||null!=t&&(e.capture!==t.capture||e.once!==t.once||e.passive!==t.passive),o=null!=e&&(null==t||r);r&&this.element.removeEventListener(this.eventName,this.__boundHandleEvent,this.__options),o&&(this.__options=Wr(e),this.element.addEventListener(this.eventName,this.__boundHandleEvent,this.__options)),this.value=e,this.__pendingValue=kr}handleEvent(e){"function"==typeof this.value?this.value.call(this.eventContext||this.element,e):this.value.handleEvent(e)}}const Wr=e=>e&&(Zr?{capture:e.capture,passive:e.passive,once:e.once}:e.capture);new class{handleAttributeExpressions(e,t,r,o){const n=t[0];if("."===n){return new Ur(e,t.slice(1),r).parts}if("@"===n)return[new Kr(e,t.slice(1),o.eventContext)];if("?"===n)return[new Hr(e,t.slice(1),r)];return new Ir(e,t,r).parts}handleTextExpression(e){return new Vr(e)}};const Jr=new Map;new WeakMap;"undefined"!=typeof window&&(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.4.1");class Gr{constructor(e){this._parent=e,this._cache=new Map}has(e){return!!(this._cache.has(e)||this._parent&&this._parent._cache.has(e))}set(e,t){return this._cache.set(e,t),this}get(e){return this._cache.get(e)||this._parent&&this._parent._cache.get(e)}}let Yr=Math.round(1e5*Math.random());const Xr="-|\\.|[0-9]|[a-z]",Qr=new RegExp(`[a-z](${Xr})*-(${Xr})*`),eo=(e,t)=>{const r=`${e}-${Yr+=1}`;return((e,t)=>!!t.get(e))(r,t)?eo(e,t):r};function to(e,t=customElements){if(r=e,null===Qr.exec(r))throw new Error("tagName is invalid");var r;return eo(e,t)}const ro=new WeakMap,oo=(e,t)=>ro.set(t,e),no=e=>ro.get(e);const io=(e,t,r=customElements)=>{oo(e,t),r.define(e,class extends t{})},ao=(e,t,r)=>{const o=customElements;if(!function(e){let t=e;for(;t;){if(t===window.HTMLElement||"HTMLElement"===t.name)return!0;t=Object.getPrototypeOf(t)}return!1}(t))return((e,t,r)=>{const o=to(e,t);if(!r)throw new Error("Lazy scoped elements requires the use of tags cache");return r.set(e,o),o})(e,o,r);if(t===customElements.get(e))return oo(e,t),e;const n=to(e,o);return io(n,t,o),n};function so(e,t,r=void 0){return no(t)||r&&r.get(e)||ao(e,t,r)}const lo="-|\\.|[0-9]|[a-z]",co=new RegExp(`<\\/?([a-z](${lo})*-(${lo})*)`,"g"),uo=new Gr,ho=(e,t,r,o)=>{const n=e.map((e=>{let r=e;const n=(e=>{const t=[];let r;for(;null!==(r=co.exec(e));)t.push(r);return t})(e);for(let e=n.length-1;e>=0;e-=1){const i=n[e],[a,s]=i,l=so(s,t[s],o),c=i.index+a.length-s.length,d=c+s.length,u=0===a.indexOf("</");r=r.slice(0,c)+(u?l:`${l} data-tag-name="${s}"`)+r.slice(d)}return r}));return r.set(e,n),n};let po=!0;const{ShadyCSS:fo}=window;(void 0===fo||void 0===fo.prepareTemplateDom)&&(po=!1);const go=new WeakMap,vo=new WeakMap,bo=e=>(vo.has(e)||vo.set(e,new Gr(vo.get(e.constructor))),vo.get(e)),mo=(e,t,r,o)=>e.map((e=>e instanceof Br?yo(e,t,r,o):Array.isArray(e)?mo(e,t,r,o):e)),yo=(e,t,r,o)=>new Br(function(e,t,r=uo,o){return r.get(e)||ho(e,t,r,o)}(e.strings,t,r,o),mo(e.values,t,r,o),e.type,e.processor),Ao=(e,t,r,o)=>n=>{const i=yo(n,t,r,o);return(e=>t=>{const r=((e,t)=>`${e}--${t}`)(t.type,e);let o=Jr.get(r);void 0===o&&(o={stringsArray:new WeakMap,keyString:new Map},Jr.set(r,o));let n=o.stringsArray.get(t.strings);if(void 0!==n)return n;const i=t.strings.join(_r);if(n=o.keyString.get(i),void 0===n){const r=t.getTemplateElement();po&&fo.prepareTemplateDom(r,e),n=new Er(t,r),o.keyString.set(i,n)}return o.stringsArray.set(t.strings,n),n})(e)(i)},wo=S((e=>class extends e{static get scopedElements(){return{}}static render(e,t,r){if(!r||"object"!=typeof r||!r.scopeName)throw new Error("The `scopeName` option is required.");const{scopeName:o,eventContext:n}=r,i=(a=n,go.has(a)||go.set(a,new Gr(go.get(a.constructor))),go.get(a));var a;const s=bo(n),{scopedElements:l}=this;return super.render(e,t,{...r,templateFactory:Ao(o,l,i,s)})}defineScopedElement(e,t){return function(e,t,r){const o=r.get(e);o?void 0===customElements.get(o)&&io(o,t,customElements):r.set(e,so(e,t,r))}(e,t,bo(this))}static getScopedTagName(e){const t=this.scopedElements[e];return t?so(e,t,bo(this)):bo(this).get(e)}getScopedTagName(e){const t=this.constructor.scopedElements[e];return t?so(e,t,bo(this)):bo(this).get(e)}})),xo=(e,t,r)=>{const o={bubbles:!0,cancelable:!1,composed:!0,...r},n=new CustomEvent(t,o);return e.dispatchEvent(n),n},ko=T.iv`
  * {
  --ne-button-color-background-primary-default: var(--ne-ref-color-blue-60, #006BD6);
  --ne-button-color-background-primary-hover: var(--ne-ref-color-blue-70, #0052A3);
  --ne-button-color-background-primary-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-background-secondary-default: var(--ne-ref-color-white, #ffffff);
  --ne-button-color-background-secondary-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-button-color-background-secondary-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-background-destructive-default: var(--ne-ref-color-red-60, #B80000);
  --ne-button-color-background-destructive-hover: var(--ne-ref-color-red-70, #7C0D0E);
  --ne-button-color-background-destructive-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-background-text-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-button-color-background-text-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-background-inverse-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-button-color-background-inverse-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-border-primary-default: var(--ne-ref-color-blue-70, #0052A3);
  --ne-button-color-border-secondary-default: var(--ne-ref-color-grey-10, #E2E3E4);
  --ne-button-color-border-destructive-default: var(--ne-ref-color-red-70, #7C0D0E);
  --ne-button-color-border-focus: var(--ne-ref-color-blue-20, #A3D1FF);
  --ne-button-color-border-inverse-default: var(--ne-ref-color-white, #ffffff);
  --ne-button-color-border-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-label-primary-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-button-color-label-primary-default: var(--ne-ref-color-white, #ffffff);
  --ne-button-color-label-secondary-default: var(--ne-ref-color-blue-60, #006BD6);
  --ne-button-color-label-secondary-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-button-color-label-destructive-default: var(--ne-ref-color-white, #ffffff);
  --ne-button-color-label-destructive-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-button-color-label-text-default: var(--ne-ref-color-blue-60, #006BD6);
  --ne-button-color-label-text-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-button-color-label-inverse-default: var(--ne-ref-color-white, #ffffff);
  --ne-button-color-label-inverse-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-button-border-radius: var(--ne-ref-border-radius-medium, .25em);
  --ne-button-padding-horizontal: var(--ne-ref-spacing-small, 0.75em);
  --ne-button-padding-vertical: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-button-gap: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-button-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-button-font-size: var(--ne-ref-font-size-04, 0.875em);
  --ne-button-sizing-icon: var(--ne-ref-sizing-04, 1em);
  --ne-button-border-width-default: var(--ne-ref-border-width-small, 1px);
  --ne-button-border-width-focus: var(--ne-ref-border-width-large, 4px);
}
`,Co="important",_o=" !"+Co,$o=Wt(class extends Jt{constructor(e){var t;if(super(e),e.type!==Ut||"style"!==e.name||(null===(t=e.strings)||void 0===t?void 0:t.length)>2)throw Error("The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.")}render(e){return Object.keys(e).reduce(((t,r)=>{const o=e[r];return null==o?t:t+`${r=r.includes("-")?r:r.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g,"-$&").toLowerCase()}:${o};`}),"")}update(e,[t]){const{style:r}=e.element;if(void 0===this.ut){this.ut=new Set;for(const e in t)this.ut.add(e);return this.render(t)}this.ut.forEach((e=>{null==t[e]&&(this.ut.delete(e),e.includes("-")?r.removeProperty(e):r[e]="")}));for(const e in t){const o=t[e];if(null!=o){this.ut.add(e);const t="string"==typeof o&&o.endsWith(_o);e.includes("-")||t?r.setProperty(e,t?o.slice(0,-11):o,t?Co:""):r[e]=o}}return It.Jb}}),So={_export:()=>Promise.resolve().then(r.bind(r,8388)).then((e=>e._export)),_import:()=>Promise.resolve().then(r.bind(r,9699)).then((e=>e._import)),add:()=>Promise.resolve().then(r.bind(r,7352)).then((e=>e.add)),archive:()=>Promise.resolve().then(r.bind(r,6939)).then((e=>e.archive)),arrowDown:()=>Promise.resolve().then(r.bind(r,4783)).then((e=>e.arrowDown)),arrowUp:()=>Promise.resolve().then(r.bind(r,7404)).then((e=>e.arrowUp)),caretDown:()=>Promise.resolve().then(r.bind(r,588)).then((e=>e.caretDown)),caretLeft:()=>Promise.resolve().then(r.bind(r,1746)).then((e=>e.caretLeft)),caretRight:()=>Promise.resolve().then(r.bind(r,5147)).then((e=>e.caretRight)),caretUp:()=>Promise.resolve().then(r.bind(r,5245)).then((e=>e.caretUp)),check:()=>Promise.resolve().then(r.bind(r,3441)).then((e=>e.check)),chevronDown:()=>Promise.resolve().then(r.bind(r,157)).then((e=>e.chevronDown)),chevronLeft:()=>Promise.resolve().then(r.bind(r,1316)).then((e=>e.chevronLeft)),chevronLightDown:()=>Promise.resolve().then(r.bind(r,9683)).then((e=>e.chevronLightDown)),chevronLightLeft:()=>Promise.resolve().then(r.bind(r,1788)).then((e=>e.chevronLightLeft)),chevronLightRight:()=>Promise.resolve().then(r.bind(r,7776)).then((e=>e.chevronLightRight)),chevronLightUp:()=>Promise.resolve().then(r.bind(r,5154)).then((e=>e.chevronLightUp)),chevronRight:()=>Promise.resolve().then(r.bind(r,1704)).then((e=>e.chevronRight)),chevronUp:()=>Promise.resolve().then(r.bind(r,5121)).then((e=>e.chevronUp)),closeDefault:()=>Promise.resolve().then(r.bind(r,4754)).then((e=>e.closeDefault)),dangerExclamation:()=>Promise.resolve().then(r.bind(r,969)).then((e=>e.dangerExclamation)),dropzone:()=>Promise.resolve().then(r.bind(r,6941)).then((e=>e.dropzone)),feedback:()=>Promise.resolve().then(r.bind(r,2253)).then((e=>e.feedback)),file:()=>Promise.resolve().then(r.bind(r,1601)).then((e=>e.file)),hide:()=>Promise.resolve().then(r.bind(r,8138)).then((e=>e.hide)),info:()=>Promise.resolve().then(r.bind(r,770)).then((e=>e.info)),maximise:()=>Promise.resolve().then(r.bind(r,8297)).then((e=>e.maximise)),meatballs:()=>Promise.resolve().then(r.bind(r,1307)).then((e=>e.meatballs)),minus:()=>Promise.resolve().then(r.bind(r,7272)).then((e=>e.minus)),openInNewWindow:()=>Promise.resolve().then(r.bind(r,1895)).then((e=>e.openInNewWindow)),process:()=>Promise.resolve().then(r.bind(r,4137)).then((e=>e.process)),processModel:()=>Promise.resolve().then(r.bind(r,2605)).then((e=>e.processModel)),publish:()=>Promise.resolve().then(r.bind(r,5233)).then((e=>e.publish)),refresh:()=>Promise.resolve().then(r.bind(r,1417)).then((e=>e.refresh)),save:()=>Promise.resolve().then(r.bind(r,3234)).then((e=>e.save)),schedule:()=>Promise.resolve().then(r.bind(r,7627)).then((e=>e.schedule)),search:()=>Promise.resolve().then(r.bind(r,5554)).then((e=>e.search)),show:()=>Promise.resolve().then(r.bind(r,9376)).then((e=>e.show)),success:()=>Promise.resolve().then(r.bind(r,7528)).then((e=>e.success)),summary:()=>Promise.resolve().then(r.bind(r,8318)).then((e=>e.summary)),tick:()=>Promise.resolve().then(r.bind(r,5017)).then((e=>e.tick)),trash:()=>Promise.resolve().then(r.bind(r,7798)).then((e=>e.trash)),user:()=>Promise.resolve().then(r.bind(r,8592)).then((e=>e.user)),users:()=>Promise.resolve().then(r.bind(r,8344)).then((e=>e.users)),versionHistory:()=>Promise.resolve().then(r.bind(r,6525)).then((e=>e.versionHistory)),warningExclamation:()=>Promise.resolve().then(r.bind(r,7403)).then((e=>e.warningExclamation))},zo=({type:e,typeAsHtml:t,fixedSize:r,className:o})=>{if(!e&&!t)return T.Ld;if(e&&!(e in So))return console.warn("Icon not found",e),T.Ld;const n=e?So[e]():Promise.resolve(t);return T.dy`
    <div
      aria-hidden="true"
      class=${o||"ne-icon"}
      style=${$o({height:r,width:r,display:"grid",alignItems:"center",justifyItems:"center"})}
    >
      ${sr(n,T.dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
></svg>`)}
    </div>
  `},Eo=[ko,T.iv`
  .btn {
    font-family: var(--ne-button-font-family);
    font-size: var(--ne-button-font-size);
    padding: var(--ne-button-padding-vertical)
      var(--ne-button-padding-horizontal) var(--ne-button-padding-vertical)
      var(--ne-button-padding-horizontal);
    gap: var(--ne-button-gap);
    border-radius: var(--ne-button-border-radius);
    outline: none;
    display: grid;
    grid-auto-flow: column;
  }

  .btn:focus {
    outline: 4px solid var(--ne-button-color-border-focus);
  }

  .btn-primary {
    border: 1px solid var(--ne-button-color-border-primary-default);
    color: var(--ne-button-color-label-primary-default);
    background-color: var(--ne-button-color-background-primary-default);
  }

  .btn-primary:hover {
    background-color: var(--ne-button-color-background-primary-hover);
  }

  .btn-primary:disabled {
    border: 1px solid var(--ne-button-color-border-disabled);
    color: var(--ne-button-color-label-primary-disabled);
    background-color: var(--ne-button-color-background-primary-disabled);
  }

  .btn-secondary {
    border: 1px solid var(--ne-button-color-border-secondary-default);
    color: var(--ne-button-color-label-secondary-default);
    background-color: var(--ne-button-color-background-secondary-default);
  }

  .btn-secondary:hover {
    background-color: var(--ne-button-color-background-secondary-hover);
  }

  .btn-secondary:disabled {
    border: 1px solid var(--ne-button-color-border-disabled);
    color: var(--ne-button-color-label-secondary-disabled);
    background-color: var(--ne-button-color-background-secondary-disabled);
  }

  .btn-secondary:focus {
    background-color: var(--ne-button-color-background-secondary-hover);
  }

  .btn-destructive {
    border: 1px solid var(--ne-button-color-border-destructive-default);
    color: var(--ne-button-color-label-destructive-default);
    background-color: var(--ne-button-color-background-destructive-default);
  }

  .btn-destructive:hover {
    background-color: var(--ne-button-color-background-destructive-hover);
  }

  .btn-destructive:disabled {
    border: 1px solid var(--ne-button-color-border-disabled);
    color: var(--ne-button-color-label-destructive-disabled);
    background-color: var(--ne-button-color-background-destructive-disabled);
  }

  .btn-destructive:focus {
    background-color: var(--ne-button-color-background-destructive-hover);
  }

  .btn-text {
    border: 0;
    color: var(--ne-button-color-label-text-default);
    background-color: transparent;
  }

  .btn-text:hover {
    background-color: var(--ne-button-color-background-text-hover);
  }

  .btn-text:disabled {
    border: 0;
    color: var(--ne-button-color-label-text-disabled);
    background-color: var(--ne-button-color-background-text-disabled);
  }

  .btn-text:focus {
    background-color: var(--ne-button-color-background-text-hover);
  }

  .btn-inverse {
    color: var(--ne-button-color-label-inverse-default);
    background-color: transparent;
    border: 1px solid var(--ne-button-color-border-inverse-default);
  }

  .btn-inverse:hover {
    background-color: var(--ne-button-color-background-inverse-hover);
  }

  .btn-inverse:disabled {
    border: 1px solid var(--ne-button-color-border-disabled);
    color: var(--ne-button-color-label-inverse-disabled);
    background-color: var(--ne-button-color-background-inverse-disabled);
  }

  .btn-inverse:focus {
    background-color: var(--ne-button-color-background-inverse-hover);
  }

  .icon-slot {
    min-width: 18px;
    max-width: 18px;
  }
`,mr];let Lo=class extends(wo(T.oi)){constructor(){super(...arguments),this.disabled=!1,this.ariaLabel="",this.variant="primary",this.onClick=()=>{xo(this,"ne-click",{composed:!0,bubbles:!0})}}static get styles(){return Eo}render(){return T.dy`
      <button
        id=${this.id}
        type="button"
        ?disabled=${this.disabled}
        @click="${this.onClick}"
        aria-label=${this.ariaLabel||T.Ld}
        class=${yr({btn:!0,"btn-primary":"primary"===this.variant,"btn-secondary":"secondary"===this.variant,"btn-destructive":"destructive"===this.variant,"btn-text":"text"===this.variant,"btn-inverse":"inverse"===this.variant})}
      >
        <span class=${void 0!==this.leftIconType?"icon-slot":"hidden"}>
          <slot name="left">${zo({type:this.leftIconType})}</slot>
        </span>
        <slot></slot>
        <span
          class=${void 0!==this.rightIconType?"icon-slot":"hidden"}
        >
          <slot name="right">${zo({type:this.rightIconType})}</slot>
        </span>
      </button>
    `}};br([O({type:Boolean,reflect:!0})],Lo.prototype,"disabled",void 0),br([O({attribute:"ne-aria-label",type:String,reflect:!0})],Lo.prototype,"ariaLabel",void 0),br([O({type:String,attribute:"left-icon",reflect:!0})],Lo.prototype,"leftIconType",void 0),br([O({type:String,attribute:"right-icon",reflect:!0})],Lo.prototype,"rightIconType",void 0),br([O({reflect:!0})],Lo.prototype,"variant",void 0),Lo=br([P("ne-button")],Lo);const To=T.iv`
  * {
  --ne-button-set-padding-vertical: var(--ne-ref-spacing-medium, 1em);
  --ne-button-set-gap: var(--ne-ref-spacing-medium, 1em);
  --ne-button-set-color-border: var(--ne-ref-color-grey-10, #E2E3E4);
  --ne-button-set-border-width: var(--ne-ref-border-width-small, 1px);
}
`,Po=[T.iv`
  :host {
    width: 100%;
  }

  .ne-button-set {
    display: flex;
    flex-flow: row;
    justify-content: flex-start;
    align-items: center;
    align-content: center;
    padding-top: var(--ne-button-set-padding-vertical);
    padding-bottom: var(--ne-button-set-padding-vertical);
    gap: var(--ne-button-set-gap);
    width: 100%;
  }

  .ne-button-set ::slotted(.right-start) {
    margin-left: auto;
  }

  .divider-top {
    border-top: solid;
    border-top-width: var(--ne-button-set-border-width);
    border-top-color: var(--ne-button-set-color-border);
  }

  .divider-bottom {
    border-bottom: solid;
    border-bottom-width: var(--ne-button-set-border-width);
    border-bottom-color: var(--ne-button-set-color-border);
  }
`,mr,To];let Do=class extends(wo(T.oi)){constructor(){super(...arguments),this.showTopDivider=!1,this.showBottomDivider=!1}static get styles(){return Po}render(){return T.dy`<div
      class="${yr({"ne-button-set":!0,"divider-top":this.showTopDivider,"divider-bottom":this.showBottomDivider})}"
    >
      <slot></slot>
    </div>`}};br([O({type:Boolean,reflect:!0,attribute:"show-divider-top"})],Do.prototype,"showTopDivider",void 0),br([O({type:Boolean,reflect:!0,attribute:"show-divider-bottom"})],Do.prototype,"showBottomDivider",void 0),Do=br([P("ne-button-set")],Do);const Fo=e=>null!=e?e:It.Ld,Oo=T.iv`
  * {
  --ne-label-gap: var(--ne-ref-spacing-none, 0);
  --ne-label-color-title: var(--ne-ref-color-grey-60, #575C61);
  --ne-label-color-asterisk: var(--ne-ref-color-red-60, #B80000);
  --ne-label-font-size: var(--ne-ref-font-size-04, 0.875em);
  --ne-label-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
}
`,No=[T.iv`
  * {
    color: var(--ne-label-color-title);
    font-family: var(--ne-label-font-family);
    font-size: 1em;
  }

  .outer-label {
    display: flex;
    font-size: var(--ne-label-font-size);
  }

  .required-indicator {
    margin-left: var(--ne-label-gap);
    color: var(--ne-label-color-asterisk);
  }
`,mr,Oo];let Bo=class extends T.oi{constructor(){super(...arguments),this.for="",this.required=!1}static get styles(){return No}render(){return T.dy`<label
      class="outer-label"
      id=${Fo(this.id)}
      for=${Fo(this.for)}
    >
      <slot></slot>
      ${this.required?T.dy`<span class="required-indicator">*</span>`:T.Ld}
    </label> `}};br([O({attribute:"for"})],Bo.prototype,"for",void 0),br([O({attribute:"required",type:Boolean,reflect:!0})],Bo.prototype,"required",void 0),Bo=br([P("ne-label")],Bo);class Mo extends cr{}Mo.directiveName="unsafeSVG",Mo.resultType=2;const Ro=Wt(Mo),Io=[T.iv`
  * {
  --ne-spinner-sizing-large: var(--ne-ref-sizing-12, 4em);
  --ne-spinner-sizing-medium: var(--ne-ref-sizing-11, 3em);
  --ne-spinner-sizing-small: var(--ne-ref-sizing-04, 1em);
  --ne-spinner-gap: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-spinner-color-dark-left: var(--ne-ref-color-grey-90, #161718);
  --ne-spinner-color-dark-right: var(--ne-ref-color-grey-50, #6D7379);
  --ne-spinner-color-dark-text: var(--ne-ref-color-grey-90, #161718);
  --ne-spinner-color-light-right: var(--ne-ref-color-grey-20, #C4C7CA);
  --ne-spinner-color-light-left: var(--ne-ref-color-white, #ffffff);
  --ne-spinner-color-light-text: var(--ne-ref-color-white, #ffffff);
  --ne-spinner-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-spinner-font-size-large: var(--ne-ref-font-size-06, 1.125em);
  --ne-spinner-font-size-medium: var(--ne-ref-font-size-04, 0.875em);
  --ne-spinner-font-size-small: var(--ne-ref-font-size-02, 0.75em);
}
`,T.iv`
  @keyframes middle {
    0% {
      opacity: 0;
    }

    32% {
      opacity: 0;
    }

    50% {
      opacity: 1;
    }

    100% {
      opacity: 1;
    }
  }

  @keyframes second {
    0% {
      opacity: 0;
    }

    24% {
      opacity: 0;
    }

    32% {
      opacity: 0.9;
    }

    40% {
      opacity: 0;
    }

    100% {
      opacity: 0;
    }
  }

  @keyframes third {
    0% {
      opacity: 0;
    }

    16% {
      opacity: 0;
    }

    24% {
      opacity: 0.8;
    }

    40% {
      opacity: 0;
    }

    100% {
      opacity: 0;
    }
  }

  @keyframes forth {
    0% {
      opacity: 0;
    }

    8% {
      opacity: 0.7;
    }

    24% {
      opacity: 0;
    }

    100% {
      opacity: 0;
    }
  }

  @keyframes fifth {
    0% {
      opacity: 0.6;
    }

    10% {
      opacity: 0;
    }

    100% {
      opacity: 0;
    }
  }

  .ne-spinner {
    color: var(--ne-spinner-color-dark-text);
  }

  .ne-spinner-status {
    margin: 1em;
    font-size: var(--ne-spinner-font-size-large);
    text-align: center;
    font-family: var(--ne-spinner-font-family);
  }

  .ne-spinner-container {
    width: 100%;
    position: relative;
    display: flex;
    align-items: center;
  }

  .ne-spinner-container-large {
    flex-direction: column;
  }

  .ne-spinner-container-center {
    justify-content: center;
  }

  .ne-icon {
    fill: currentcolor;
    vertical-align: top;
    pointer-events: none;
  }

  .ne-nintex-spinner .ne-icon {
    height: var(--ne-spinner-sizing-large);
    width: var(--ne-spinner-sizing-large);
  }

  .ne-nintex-spinner > div {
    display: inline-block;
  }

  .ne-nintex-spinner-middle {
    animation-name: middle;
    position: relative;
  }

  .ne-nintex-spinner-left {
    position: absolute;
  }

  .ne-nintex-spinner-trail-left,
  .ne-nintex-spinner-trail-right {
    margin: 0 -8px;
  }

  .ne-nintex-spinner-trail-left,
  .ne-nintex-spinner-left {
    color: var(--ne-spinner-color-dark-left);
  }

  .ne-nintex-spinner-trail-right,
  .ne-nintex-spinner-right {
    color: var(--ne-spinner-color-dark-right);
  }

  .ne-nintex-spinner-middle,
  .ne-nintex-spinner-second,
  .ne-nintex-spinner-third,
  .ne-nintex-spinner-forth,
  .ne-nintex-spinner-fifth {
    animation-duration: 2000ms;
    transform-origin: center;
    animation-iteration-count: infinite;
    animation-timing-function: ease-in-out;
  }

  .ne-nintex-spinner-second {
    animation-name: second;
  }

  .ne-nintex-spinner-third {
    animation-name: third;
  }

  .ne-nintex-spinner-forth {
    animation-name: forth;
  }

  .ne-nintex-spinner-fifth {
    animation-name: fifth;
  }

  .ne-nintex-spinner-small {
    padding: 0;
  }

  .ne-nintex-spinner-small .ne-icon {
    height: var(--ne-spinner-sizing-small);
    width: var(--ne-spinner-sizing-small);
  }

  .ne-nintex-spinner-small .ne-nintex-spinner-trail-left,
  .ne-nintex-spinner-small .ne-nintex-spinner-trail-right {
    margin: 0 -2px;
  }

  .ne-nintex-spinner-small .ne-spinner-status {
    font-size: var(--ne-spinner-font-size-small);
    margin: 0;
  }

  .ne-nintex-spinner-medium .ne-icon {
    height: var(--ne-spinner-sizing-medium);
    width: var(--ne-spinner-sizing-medium);
  }

  .ne-nintex-spinner-medium .ne-nintex-spinner-trail-left,
  .ne-nintex-spinner-medium .ne-nintex-spinner-trail-right {
    margin: 0 -6px;
  }

  .ne-nintex-spinner-medium .ne-spinner-status {
    font-size: var(--ne-spinner-font-size-medium);
    margin: 0.875em;
  }

  .ne-spinner-theme-light .ne-nintex-spinner-trail-left,
  .ne-spinner-theme-light .ne-nintex-spinner-trail-right {
    color: var(--ne-spinner-color-light-right);
  }

  .ne-spinner-theme-light .ne-nintex-spinner-left {
    color: var(--ne-spinner-color-light-left);
  }

  .ne-spinner-theme-light .ne-nintex-spinner-trail-right,
  .ne-spinner-theme-light .ne-nintex-spinner-right {
    color: var(--ne-spinner-color-light-right);
  }

  .ne-spinner-theme-light .ne-spinner-status {
    color: var(--ne-spinner-color-light-text);
  }

  .ne-spinner-status.visually-hidden {
    display: none;
  }
`,mr];var jo,Vo;!function(e){e.large="large",e.medium="medium",e.small="small"}(jo||(jo={})),function(e){e.light="light",e.regular="regular"}(Vo||(Vo={}));const Ho='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 34" width="1em" height="1em" class="ne-icon__logos-nintex-x-loader-left ne-icon ne-icon-inline"><path d="M24 17L7.01 34 0 26.99 9.98 17 0 7.01 7.01 0 24 17z"></path></svg>',Uo='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 34" width="1em" height="1em" class="ne-icon__logos-nintex-x-loader-right ne-icon ne-icon-inline"><path d="M14.02 16.99L24 26.98l-7.01 7L0 16.99 16.99 0 24 7.01l-9.98 9.98z"></path></svg>';let qo=class extends T.oi{constructor(){super(...arguments),this.size=jo.medium,this.theme=Vo.regular}static get styles(){return Io}render(){const e=T.dy`<div
      class=${yr({"ne-nintex-spinner ne-spinner":!0,"ne-nintex-spinner-small":this.size===jo.small,"ne-nintex-spinner-medium":this.size===jo.medium,"ne-nintex-spinner-large":this.size===jo.large,"ne-spinner-theme-light":this.theme===Vo.light,"ne-spinner-theme-regular":this.theme===Vo.regular})}
    >
      <div class="ne-nintex-spinner-trail-left ne-nintex-spinner-fifth">
        ${Ro(Ho)}
      </div>
      <div class="ne-nintex-spinner-trail-left ne-nintex-spinner-forth">
        ${Ro(Ho)}
      </div>
      <div class="ne-nintex-spinner-trail-left ne-nintex-spinner-third">
        ${Ro(Ho)}
      </div>
      <div class="ne-nintex-spinner-trail-left ne-nintex-spinner-second">
        ${Ro(Ho)}
      </div>
      <div class="ne-nintex-spinner-middle">
        ${Ro('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 34 34" width="1em" height="1em" class="ne-icon__logos-nintex-x-loader-center-left ne-icon ne-icon-inline ne-nintex-spinner-left"><path d="M24.01 17l-17 17L0 26.99 9.99 17 0 7.01 7.01 0l17 17z"></path></svg>')} ${Ro('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 34 34" width="1em" height="1em" class="ne-icon__logos-nintex-x-loader-center-right ne-icon ne-icon-inline ne-nintex-spinner-right"><path d="M24.01 17L34 26.99 26.99 34l-17-17 17-17L34 7.01 24.01 17z"></path></svg>')}
      </div>
      <div class="ne-nintex-spinner-trail-right ne-nintex-spinner-second">
        ${Ro(Uo)}
      </div>
      <div class="ne-nintex-spinner-trail-right ne-nintex-spinner-third">
        ${Ro(Uo)}
      </div>
      <div class="ne-nintex-spinner-trail-right ne-nintex-spinner-forth">
        ${Ro(Uo)}
      </div>
      <div class="ne-nintex-spinner-trail-right ne-nintex-spinner-fifth">
        ${Ro(Uo)}
      </div>
      ${this.status?T.dy` <p class="ne-spinner-status" role="status">${this.status}</p> `:T.dy`
            <p class="ne-spinner-status visually-hidden" role="status">
              ${this.defaultStatus}
            </p>
          `}
    </div>`;return this.wrapped?T.dy`<div class="ne-spinner-container ne-spinner-container-center">
      ${e}
    </div>`:T.dy`${e}`}};br([O({type:String,attribute:"default-status"})],qo.prototype,"defaultStatus",void 0),br([O({type:String,attribute:"size",reflect:!0})],qo.prototype,"size",void 0),br([O({type:String,attribute:"status",reflect:!0})],qo.prototype,"status",void 0),br([O({type:String,reflect:!0})],qo.prototype,"theme",void 0),br([O({type:Boolean,reflect:!0})],qo.prototype,"wrapped",void 0),qo=br([P("ne-spinner")],qo);const Zo=[T.iv`
  * {
  --ne-overlay-color: var(--ne-ref-color-grey-90-30, #16171830);
}
`,T.iv`
  .overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: var(--ne-overlay-color);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
  }
`,mr];let Ko=class extends(wo(T.oi)){constructor(){super(...arguments),this.show=!0}static get styles(){return Zo}render(){return this.show?T.dy`
          <div>
            <div class="overlay">
              <slot></slot>
            </div>
          </div>
        `:T.dy``}};br([O({type:Boolean,reflect:!0})],Ko.prototype,"show",void 0),Ko=br([P("ne-overlay")],Ko);const Wo=[mr];let Jo=class extends(wo(T.oi)){constructor(){super(...arguments),this.show=!0,this.delay=0,this.size=jo.medium,this.theme=Vo.regular,this._showSetTimeout=0,this._isShowOverLay=!1}static get styles(){return Wo}static get scopedElements(){return{"ne-overlay":Ko,"ne-spinner":qo}}render(){return T.dy`<ne-overlay .show=${this._isShowOverLay}>
      <ne-spinner
        .status=${this.status}
        theme=${this.theme}
        .size=${this.size}
      ></ne-spinner>
    </ne-overlay>`}updated(e){e.has("show")&&(this._showSetTimeout&&window.clearTimeout(this._showSetTimeout),this.show?this.delay>0?this._showSetTimeout=window.setTimeout((()=>{this._isShowOverLay=!0}),this.delay):this._isShowOverLay=!0:this._isShowOverLay=!1)}};br([O({type:Boolean,reflect:!0})],Jo.prototype,"show",void 0),br([O({type:Number,attribute:"status-delay"})],Jo.prototype,"delay",void 0),br([O({type:String,attribute:"size"})],Jo.prototype,"size",void 0),br([O({type:String,attribute:"status"})],Jo.prototype,"status",void 0),br([O({type:String})],Jo.prototype,"theme",void 0),br([N()],Jo.prototype,"_showSetTimeout",void 0),br([N()],Jo.prototype,"_isShowOverLay",void 0),Jo=br([P("ne-status-overlay")],Jo);const Go=[mr,T.iv`
  :host {
    display: grid;
    color: inherit;
  }
`];let Yo=class extends T.oi{constructor(){super(...arguments),this.fixedSize=""}static get styles(){return Go}render(){return zo({type:this.type,fixedSize:this.fixedSize})}};br([O({attribute:"type",reflect:!0})],Yo.prototype,"type",void 0),br([O({type:String})],Yo.prototype,"fixedSize",void 0),Yo=br([P("ne-icon")],Yo);const Xo=[ko,T.iv`
  * {
  --ne-icon-button-icon-size: var(--ne-ref-sizing-04, 1em);
  --ne-icon-button-color-icon-dark-on-light-bg-default: var(--ne-ref-color-grey-90, #161718);
  --ne-icon-button-color-icon-dark-on-light-bg-disabled: var(--ne-ref-color-grey-50, #6D7379);
  --ne-icon-button-color-icon-light-on-dark-bg-default: var(--ne-ref-color-white, #ffffff);
  --ne-icon-button-color-icon-light-on-dark-bg-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-icon-button-color-icon-light-on-dark-bg-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-icon-button-color-icon-light-on-dark-bg-focused: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-icon-button-color-background-dark-on-light-bg-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-icon-button-padding: var(--ne-ref-spacing-xx-small, 0.25em);
}
`,T.iv`
  .btn {
    display: flex;
    flex-flow: row nowrap;
    justify-content: center;
    align-items: center;
    align-content: center;
    box-sizing: border-box;
    margin: 0;
    padding: var(--ne-icon-button-padding);
    font-size: 1em;
    border: none;
    border-radius: var(--ne-button-border-radius);
    outline: none;
    background-color: transparent;
    cursor: pointer;
  }

  .btn * {
    cursor: pointer;
  }

  .btn:disabled * {
    cursor: default;
  }

  .btn-dark {
    color: var(--ne-icon-button-color-icon-dark-on-light-bg-default);
  }

  .btn-dark:hover {
    background-color: var(
      --ne-icon-button-color-background-dark-on-light-bg-hover
    );
  }

  .btn-dark:focus-visible {
    outline: var(--ne-button-border-width-focus) solid
      var(--ne-button-color-border-focus);
  }

  .btn-dark:disabled,
  .btn-dark:hover:disabled {
    color: var(--ne-icon-button-color-icon-dark-on-light-bg-disabled);
    background-color: transparent;
    cursor: default;
  }

  .btn-light {
    color: var(--ne-icon-button-color-icon-light-on-dark-bg-default);
  }

  .btn-light:hover {
    color: var(--ne-icon-button-color-icon-light-on-dark-bg-hover);
  }

  .btn-light:focus-visible {
    color: var(--ne-icon-button-color-icon-light-on-dark-bg-focused);
    outline: var(--ne-button-border-width-focus) solid
      var(--ne-button-color-border-focus);
  }

  .btn-light:disabled,
  .btn-light:hover:disabled {
    color: var(--ne-icon-button-color-icon-light-on-dark-bg-disabled);
    background-color: transparent;
    cursor: default;
  }

  .icon {
    height: var(--ne-icon-button-icon-size);
    width: var(--ne-icon-button-icon-size);
  }
`,mr];let Qo=class extends(wo(T.oi)){constructor(){super(...arguments),this.disabled=!1,this.ariaLabel="",this.variant="dark",this._onClick=()=>{xo(this,"ne-click",{composed:!0,bubbles:!0})}}static get styles(){return Xo}render(){return T.dy`<button
      id=${this.id}
      type="button"
      ?disabled=${this.disabled}
      @click="${this._onClick}"
      aria-label=${this.ariaLabel||T.Ld}
      class=${yr({btn:!0,"btn-dark":"dark"===this.variant,"btn-light":"light"===this.variant})}
    >
      <span class="icon">${zo({type:this.iconType})}</span>
    </button>`}};br([O({type:Boolean,reflect:!0})],Qo.prototype,"disabled",void 0),br([O({attribute:"ne-aria-label",type:String,reflect:!0})],Qo.prototype,"ariaLabel",void 0),br([O({type:String,attribute:"icon",reflect:!0})],Qo.prototype,"iconType",void 0),br([O({reflect:!0})],Qo.prototype,"variant",void 0),Qo=br([P("ne-icon-button")],Qo);const en="caretDown",tn="caretUp",rn="closeDefault",on="dangerExclamation",nn="info",an="success",sn="user",ln="warningExclamation",cn=[T.iv`
  * {
  --ne-modal-sizing-width-small: var(--ne-ref-sizing-18, 32em);
  --ne-modal-sizing-width-medium: var(--ne-ref-sizing-21, 56em);
  --ne-modal-sizing-width-large: var(--ne-ref-sizing-22, 64em);
  --ne-modal-sizing-height-small: var(--ne-ref-sizing-16, 16em);
  --ne-modal-sizing-height-medium: var(--ne-ref-sizing-17, 24em);
  --ne-modal-sizing-height-large: var(--ne-ref-sizing-19, 40em);
  --ne-modal-padding-horizontal: var(--ne-ref-spacing-medium, 1em);
  --ne-modal-header-font-family: var(--ne-ref-font-family-montserrat, Montserrat);
  --ne-modal-header-padding-vertical: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-modal-header-gap: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-modal-header-title: var(--ne-ref-color-nintex-orange, #F56900);
  --ne-modal-header-font-size: var(--ne-ref-font-size-08, 1.5em);
  --ne-modal-header-font-weight: var(--ne-ref-font-weight-semi-bold, SemiBold);
  --ne-modal-content-padding: var(--ne-ref-spacing-medium, 1em);
  --ne-modal-content-gap-vertical: var(--ne-ref-spacing-medium, 1em);
  --ne-modal-border-radius: var(--ne-ref-border-radius-medium, .25em);
  --ne-modal-color-border: var(--ne-ref-color-grey-10, #E2E3E4);
  --ne-modal-border-width: var(--ne-ref-border-width-small, 1px);
  --ne-modal-gap-vertical: var(--ne-ref-spacing-medium, 1em);
}
`,mr,T.iv`
  dialog {
    display: flex;
    flex-direction: column;
    padding-inline: var(--ne-modal-padding-horizontal);
    max-height: 80%;
    padding-block: 0;
    border: var(--ne-modal-border-width) solid var(--ne-modal-color-border);
    border-radius: var(--ne-modal-border-radius);
  }

  .hide {
    display: none;
  }

  .small {
    width: var(--ne-modal-sizing-width-small);
    min-height: var(--ne-modal-sizing-height-small);
  }

  .medium {
    width: var(--ne-modal-sizing-width-medium);
    min-height: var(--ne-modal-sizing-height-medium);
  }

  .large {
    width: var(--ne-modal-sizing-width-large);
    min-height: var(--ne-modal-sizing-height-large);
    height: 80%;
  }

  .heading-label {
    font-family: var(--ne-modal-header-font-family);
    font-size: var(--ne-modal-header-font-size);
    font-weight: var(--ne-modal-header-font-weight);
    color: var(--ne-modal-header-title);
    gap: var(--ne-modal-header-gap);
  }

  .content {
    display: flex;
    flex-flow: row nowrap;
    justify-content: flex-start;
    overflow-y: auto;
    flex-grow: 1;
    margin-block: var(--ne-modal-gap-vertical);
  }
`],dn="small";let un=class extends(wo(T.oi)){constructor(){super(...arguments),this.header="",this.size=dn,this.open=!0,this._handleClose=()=>{this.open=!1,xo(this,"ne-close",{composed:!0,bubbles:!0})}}static get scopedElements(){return{"ne-icon":Yo,"ne-overlay":Ko,"ne-icon-button":Qo,"ne-button-set":Do}}static get styles(){return cn}render(){return T.dy`<ne-overlay .show=${this.open}>
      <dialog
        class="${yr({dialog:!0,[this.size]:!0,hide:!0!==this.open})}"
        part="dialog"
        aria-modal="true"
        ?open=${this.open}
        @cancel=${this._handleClose}
      >
      <span>
        <ne-button-set .showBottomDivider=${!0}>
          <label class="heading-label">${this.header}</label>
          <ne-icon-button
            class="right-start"
            variant="dark"
            ne-aria-label="close-button"
            icon=${rn}
            @click=${this._handleClose}
          ></ne-icon-button>
          </ne-button-set>
      </span>
        <div class="content">
          <slot></slot>
        </div>
        <ne-button-set .showTopDivider=${!0}>
        <slot name="footer">
      </ne-button-set>
      </dialog>
    </ne-overlay>`}};function hn(e,t,r,o){var n,i=arguments.length,a=i<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,o);else for(var s=e.length-1;s>=0;s--)(n=e[s])&&(a=(i<3?n(a):i>3?n(t,r,a):n(t,r))||a);return i>3&&a&&Object.defineProperty(t,r,a),a}br([O({type:String,reflect:!0})],un.prototype,"header",void 0),br([O({attribute:"modal-size",reflect:!0})],un.prototype,"size",void 0),br([O({type:Boolean,reflect:!0})],un.prototype,"open",void 0),un=br([P("ne-modal")],un);const pn=T.iv`
  :host {
    all: initial;
  }

  .hidden {
    display: none;
  }
`,fn=new WeakMap,gn=e=>"function"==typeof e&&fn.has(e),vn="undefined"!=typeof window&&null!=window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,bn={},mn={},yn=`{{lit-${String(Math.random()).slice(2)}}}`,An=`\x3c!--${yn}--\x3e`,wn=new RegExp(`${yn}|${An}`),xn="$lit$";class kn{constructor(e,t){this.parts=[],this.element=t;const r=[],o=[],n=document.createTreeWalker(t.content,133,null,!1);let i=0,a=-1,s=0;const{strings:l,values:{length:c}}=e;for(;s<c;){const e=n.nextNode();if(null!==e){if(a++,1===e.nodeType){if(e.hasAttributes()){const t=e.attributes,{length:r}=t;let o=0;for(let e=0;e<r;e++)Cn(t[e].name,xn)&&o++;for(;o-- >0;){const t=l[s],r=Sn.exec(t)[2],o=r.toLowerCase()+xn,n=e.getAttribute(o);e.removeAttribute(o);const i=n.split(wn);this.parts.push({type:"attribute",index:a,name:r,strings:i}),s+=i.length-1}}"TEMPLATE"===e.tagName&&(o.push(e),n.currentNode=e.content)}else if(3===e.nodeType){const t=e.data;if(t.indexOf(yn)>=0){const o=e.parentNode,n=t.split(wn),i=n.length-1;for(let t=0;t<i;t++){let r,i=n[t];if(""===i)r=$n();else{const e=Sn.exec(i);null!==e&&Cn(e[2],xn)&&(i=i.slice(0,e.index)+e[1]+e[2].slice(0,-5)+e[3]),r=document.createTextNode(i)}o.insertBefore(r,e),this.parts.push({type:"node",index:++a})}""===n[i]?(o.insertBefore($n(),e),r.push(e)):e.data=n[i],s+=i}}else if(8===e.nodeType)if(e.data===yn){const t=e.parentNode;null!==e.previousSibling&&a!==i||(a++,t.insertBefore($n(),e)),i=a,this.parts.push({type:"node",index:a}),null===e.nextSibling?e.data="":(r.push(e),a--),s++}else{let t=-1;for(;-1!==(t=e.data.indexOf(yn,t+1));)this.parts.push({type:"node",index:-1}),s++}}else n.currentNode=o.pop()}for(const e of r)e.parentNode.removeChild(e)}}const Cn=(e,t)=>{const r=e.length-t.length;return r>=0&&e.slice(r)===t},_n=e=>-1!==e.index,$n=()=>document.createComment(""),Sn=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;class zn{constructor(e,t,r){this.__parts=[],this.template=e,this.processor=t,this.options=r}update(e){let t=0;for(const r of this.__parts)void 0!==r&&r.setValue(e[t]),t++;for(const e of this.__parts)void 0!==e&&e.commit()}_clone(){const e=vn?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),t=[],r=this.template.parts,o=document.createTreeWalker(e,133,null,!1);let n,i=0,a=0,s=o.nextNode();for(;i<r.length;)if(n=r[i],_n(n)){for(;a<n.index;)a++,"TEMPLATE"===s.nodeName&&(t.push(s),o.currentNode=s.content),null===(s=o.nextNode())&&(o.currentNode=t.pop(),s=o.nextNode());if("node"===n.type){const e=this.processor.handleTextExpression(this.options);e.insertAfterNode(s.previousSibling),this.__parts.push(e)}else this.__parts.push(...this.processor.handleAttributeExpressions(s,n.name,n.strings,this.options));i++}else this.__parts.push(void 0),i++;return vn&&(document.adoptNode(e),customElements.upgrade(e)),e}}const En=window.trustedTypes&&trustedTypes.createPolicy("lit-html",{createHTML:e=>e}),Ln=` ${yn} `;class Tn{constructor(e,t,r,o){this.strings=e,this.values=t,this.type=r,this.processor=o}getHTML(){const e=this.strings.length-1;let t="",r=!1;for(let o=0;o<e;o++){const e=this.strings[o],n=e.lastIndexOf("\x3c!--");r=(n>-1||r)&&-1===e.indexOf("--\x3e",n+1);const i=Sn.exec(e);t+=null===i?e+(r?Ln:An):e.substr(0,i.index)+i[1]+i[2]+xn+i[3]+yn}return t+=this.strings[e],t}getTemplateElement(){const e=document.createElement("template");let t=this.getHTML();return void 0!==En&&(t=En.createHTML(t)),e.innerHTML=t,e}}const Pn=e=>null===e||!("object"==typeof e||"function"==typeof e),Dn=e=>Array.isArray(e)||!(!e||!e[Symbol.iterator]);class Fn{constructor(e,t,r){this.dirty=!0,this.element=e,this.name=t,this.strings=r,this.parts=[];for(let e=0;e<r.length-1;e++)this.parts[e]=this._createPart()}_createPart(){return new On(this)}_getValue(){const e=this.strings,t=e.length-1,r=this.parts;if(1===t&&""===e[0]&&""===e[1]){const e=r[0].value;if("symbol"==typeof e)return String(e);if("string"==typeof e||!Dn(e))return e}let o="";for(let n=0;n<t;n++){o+=e[n];const t=r[n];if(void 0!==t){const e=t.value;if(Pn(e)||!Dn(e))o+="string"==typeof e?e:String(e);else for(const t of e)o+="string"==typeof t?t:String(t)}}return o+=e[t],o}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class On{constructor(e){this.value=void 0,this.committer=e}setValue(e){e===bn||Pn(e)&&e===this.value||(this.value=e,gn(e)||(this.committer.dirty=!0))}commit(){for(;gn(this.value);){const e=this.value;this.value=bn,e(this)}this.value!==bn&&this.committer.commit()}}class Nn{constructor(e){this.value=void 0,this.__pendingValue=void 0,this.options=e}appendInto(e){this.startNode=e.appendChild($n()),this.endNode=e.appendChild($n())}insertAfterNode(e){this.startNode=e,this.endNode=e.nextSibling}appendIntoPart(e){e.__insert(this.startNode=$n()),e.__insert(this.endNode=$n())}insertAfterPart(e){e.__insert(this.startNode=$n()),this.endNode=e.endNode,e.endNode=this.startNode}setValue(e){this.__pendingValue=e}commit(){if(null===this.startNode.parentNode)return;for(;gn(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=bn,e(this)}const e=this.__pendingValue;e!==bn&&(Pn(e)?e!==this.value&&this.__commitText(e):e instanceof Tn?this.__commitTemplateResult(e):e instanceof Node?this.__commitNode(e):Dn(e)?this.__commitIterable(e):e===mn?(this.value=mn,this.clear()):this.__commitText(e))}__insert(e){this.endNode.parentNode.insertBefore(e,this.endNode)}__commitNode(e){this.value!==e&&(this.clear(),this.__insert(e),this.value=e)}__commitText(e){const t=this.startNode.nextSibling,r="string"==typeof(e=null==e?"":e)?e:String(e);t===this.endNode.previousSibling&&3===t.nodeType?t.data=r:this.__commitNode(document.createTextNode(r)),this.value=e}__commitTemplateResult(e){const t=this.options.templateFactory(e);if(this.value instanceof zn&&this.value.template===t)this.value.update(e.values);else{const r=new zn(t,e.processor,this.options),o=r._clone();r.update(e.values),this.__commitNode(o),this.value=r}}__commitIterable(e){Array.isArray(this.value)||(this.value=[],this.clear());const t=this.value;let r,o=0;for(const n of e)r=t[o],void 0===r&&(r=new Nn(this.options),t.push(r),0===o?r.appendIntoPart(this):r.insertAfterPart(t[o-1])),r.setValue(n),r.commit(),o++;o<t.length&&(t.length=o,this.clear(r&&r.endNode))}clear(e=this.startNode){((e,t,r=null)=>{for(;t!==r;){const r=t.nextSibling;e.removeChild(t),t=r}})(this.startNode.parentNode,e.nextSibling,this.endNode)}}class Bn{constructor(e,t,r){if(this.value=void 0,this.__pendingValue=void 0,2!==r.length||""!==r[0]||""!==r[1])throw new Error("Boolean attributes can only contain a single expression");this.element=e,this.name=t,this.strings=r}setValue(e){this.__pendingValue=e}commit(){for(;gn(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=bn,e(this)}if(this.__pendingValue===bn)return;const e=!!this.__pendingValue;this.value!==e&&(e?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name),this.value=e),this.__pendingValue=bn}}class Mn extends Fn{constructor(e,t,r){super(e,t,r),this.single=2===r.length&&""===r[0]&&""===r[1]}_createPart(){return new Rn(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class Rn extends On{}let In=!1;(()=>{try{const e={get capture(){return In=!0,!1}};window.addEventListener("test",e,e),window.removeEventListener("test",e,e)}catch(e){}})();class jn{constructor(e,t,r){this.value=void 0,this.__pendingValue=void 0,this.element=e,this.eventName=t,this.eventContext=r,this.__boundHandleEvent=e=>this.handleEvent(e)}setValue(e){this.__pendingValue=e}commit(){for(;gn(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=bn,e(this)}if(this.__pendingValue===bn)return;const e=this.__pendingValue,t=this.value,r=null==e||null!=t&&(e.capture!==t.capture||e.once!==t.once||e.passive!==t.passive),o=null!=e&&(null==t||r);r&&this.element.removeEventListener(this.eventName,this.__boundHandleEvent,this.__options),o&&(this.__options=Vn(e),this.element.addEventListener(this.eventName,this.__boundHandleEvent,this.__options)),this.value=e,this.__pendingValue=bn}handleEvent(e){"function"==typeof this.value?this.value.call(this.eventContext||this.element,e):this.value.handleEvent(e)}}const Vn=e=>e&&(In?{capture:e.capture,passive:e.passive,once:e.once}:e.capture);new class{handleAttributeExpressions(e,t,r,o){const n=t[0];if("."===n){return new Mn(e,t.slice(1),r).parts}if("@"===n)return[new jn(e,t.slice(1),o.eventContext)];if("?"===n)return[new Bn(e,t.slice(1),r)];return new Fn(e,t,r).parts}handleTextExpression(e){return new Nn(e)}};const Hn=new Map;new WeakMap;"undefined"!=typeof window&&(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.4.1");class Un{constructor(e){this._parent=e,this._cache=new Map}has(e){return!!(this._cache.has(e)||this._parent&&this._parent._cache.has(e))}set(e,t){return this._cache.set(e,t),this}get(e){return this._cache.get(e)||this._parent&&this._parent._cache.get(e)}}let qn=Math.round(1e5*Math.random());const Zn="-|\\.|[0-9]|[a-z]",Kn=new RegExp(`[a-z](${Zn})*-(${Zn})*`),Wn=(e,t)=>{const r=`${e}-${qn+=1}`;return((e,t)=>!!t.get(e))(r,t)?Wn(e,t):r};function Jn(e,t=customElements){if(r=e,null===Kn.exec(r))throw new Error("tagName is invalid");var r;return Wn(e,t)}const Gn=new WeakMap,Yn=(e,t)=>Gn.set(t,e),Xn=e=>Gn.get(e);const Qn=(e,t,r=customElements)=>{Yn(e,t),r.define(e,class extends t{})},ei=(e,t,r)=>{const o=customElements;if(!function(e){let t=e;for(;t;){if(t===window.HTMLElement||"HTMLElement"===t.name)return!0;t=Object.getPrototypeOf(t)}return!1}(t))return((e,t,r)=>{const o=Jn(e,t);if(!r)throw new Error("Lazy scoped elements requires the use of tags cache");return r.set(e,o),o})(e,o,r);if(t===customElements.get(e))return Yn(e,t),e;const n=Jn(e,o);return Qn(n,t,o),n};function ti(e,t,r=void 0){return Xn(t)||r&&r.get(e)||ei(e,t,r)}const ri="-|\\.|[0-9]|[a-z]",oi=new RegExp(`<\\/?([a-z](${ri})*-(${ri})*)`,"g"),ni=new Un,ii=(e,t,r,o)=>{const n=e.map((e=>{let r=e;const n=(e=>{const t=[];let r;for(;null!==(r=oi.exec(e));)t.push(r);return t})(e);for(let e=n.length-1;e>=0;e-=1){const i=n[e],[a,s]=i,l=ti(s,t[s],o),c=i.index+a.length-s.length,d=c+s.length,u=0===a.indexOf("</");r=r.slice(0,c)+(u?l:`${l} data-tag-name="${s}"`)+r.slice(d)}return r}));return r.set(e,n),n};let ai=!0;const{ShadyCSS:si}=window;(void 0===si||void 0===si.prepareTemplateDom)&&(ai=!1);const li=new WeakMap,ci=new WeakMap,di=e=>(ci.has(e)||ci.set(e,new Un(ci.get(e.constructor))),ci.get(e)),ui=(e,t,r,o)=>e.map((e=>e instanceof Tn?hi(e,t,r,o):Array.isArray(e)?ui(e,t,r,o):e)),hi=(e,t,r,o)=>new Tn(function(e,t,r=ni,o){return r.get(e)||ii(e,t,r,o)}(e.strings,t,r,o),ui(e.values,t,r,o),e.type,e.processor),pi=(e,t,r,o)=>n=>{const i=hi(n,t,r,o);return(e=>t=>{const r=((e,t)=>`${e}--${t}`)(t.type,e);let o=Hn.get(r);void 0===o&&(o={stringsArray:new WeakMap,keyString:new Map},Hn.set(r,o));let n=o.stringsArray.get(t.strings);if(void 0!==n)return n;const i=t.strings.join(yn);if(n=o.keyString.get(i),void 0===n){const r=t.getTemplateElement();ai&&si.prepareTemplateDom(r,e),n=new kn(t,r),o.keyString.set(i,n)}return o.stringsArray.set(t.strings,n),n})(e)(i)},fi=S((e=>class extends e{static get scopedElements(){return{}}static render(e,t,r){if(!r||"object"!=typeof r||!r.scopeName)throw new Error("The `scopeName` option is required.");const{scopeName:o,eventContext:n}=r,i=(a=n,li.has(a)||li.set(a,new Un(li.get(a.constructor))),li.get(a));var a;const s=di(n),{scopedElements:l}=this;return super.render(e,t,{...r,templateFactory:pi(o,l,i,s)})}defineScopedElement(e,t){return function(e,t,r){const o=r.get(e);o?void 0===customElements.get(o)&&Qn(o,t,customElements):r.set(e,ti(e,t,r))}(e,t,di(this))}static getScopedTagName(e){const t=this.scopedElements[e];return t?ti(e,t,di(this)):di(this).get(e)}getScopedTagName(e){const t=this.constructor.scopedElements[e];return t?ti(e,t,di(this)):di(this).get(e)}})),gi="default",vi="active",bi="success",mi="error",yi="info",Ai="warning",wi="filled",xi="outline",ki=T.iv`
  * {
  --ne-badge-sizing-icon: var(--ne-ref-sizing-04, 1em);
  --ne-badge-sizing-height: var(--ne-ref-sizing-06, 1.5em);
  --ne-badge-padding-horizontal: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-badge-gap: var(--ne-ref-spacing-xx-small, 0.25em);
  --ne-badge-color-border-filled-default: var(--ne-ref-color-grey-05, #EFF0F0);
  --ne-badge-color-border-filled-active: var(--ne-ref-color-violet-20, #D9C1F1);
  --ne-badge-color-border-filled-success: var(--ne-ref-color-green-50, #008738);
  --ne-badge-color-border-filled-error: var(--ne-ref-color-red-50, #E60000);
  --ne-badge-color-border-filled-info: var(--ne-ref-color-blue-60, #006BD6);
  --ne-badge-color-border-filled-warning: var(--ne-ref-color-yellow-50, #FFCF1A);
  --ne-badge-color-border-outline-default: var(--ne-ref-color-grey-20, #C4C7CA);
  --ne-badge-color-border-outline-active: var(--ne-ref-color-violet-60, #7F30CF);
  --ne-badge-color-border-outline-success: var(--ne-ref-color-green-50, #008738);
  --ne-badge-color-border-outline-error: var(--ne-ref-color-red-50, #E60000);
  --ne-badge-color-border-outline-info: var(--ne-ref-color-blue-60, #006BD6);
  --ne-badge-color-border-outline-warning: var(--ne-ref-color-yellow-50, #FFCF1A);
  --ne-badge-color-background-filled-default: var(--ne-ref-color-grey-05, #EFF0F0);
  --ne-badge-color-background-filled-active: var(--ne-ref-color-violet-20, #D9C1F1);
  --ne-badge-color-background-filled-success: var(--ne-ref-color-green-50, #008738);
  --ne-badge-color-background-filled-error: var(--ne-ref-color-red-50, #E60000);
  --ne-badge-color-background-filled-info: var(--ne-ref-color-blue-60, #006BD6);
  --ne-badge-color-background-filled-warning: var(--ne-ref-color-yellow-50, #FFCF1A);
  --ne-badge-color-label-filled-default: var(--ne-ref-color-grey-90, #161718);
  --ne-badge-color-label-filled-active: var(--ne-ref-color-grey-90, #161718);
  --ne-badge-color-label-filled-success: var(--ne-ref-color-white, #ffffff);
  --ne-badge-color-label-filled-error: var(--ne-ref-color-white, #ffffff);
  --ne-badge-color-label-filled-info: var(--ne-ref-color-white, #ffffff);
  --ne-badge-color-label-filled-warning: var(--ne-ref-color-grey-90, #161718);
  --ne-badge-color-label-outline-default: var(--ne-ref-color-grey-90, #161718);
  --ne-badge-color-label-outline-active: var(--ne-ref-color-violet-60, #7F30CF);
  --ne-badge-color-label-outline-success: var(--ne-ref-color-green-50, #008738);
  --ne-badge-color-label-outline-error: var(--ne-ref-color-red-50, #E60000);
  --ne-badge-color-label-outline-info: var(--ne-ref-color-blue-60, #006BD6);
  --ne-badge-color-label-outline-warning: var(--ne-ref-color-grey-90, #161718);
  --ne-badge-border-radius: var(--ne-ref-border-radius-xl, 0.75em);
  --ne-badge-border-width: var(--ne-ref-border-width-small, 1px);
  --ne-badge-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-badge-font-size: var(--ne-ref-font-size-04, 0.875em);
}
`,Ci=[T.iv`
  .badge {
    height: var(--ne-badge-sizing-height);
    padding-right: var(--ne-badge-padding-horizontal);
    padding-left: var(--ne-badge-padding-horizontal);
    gap: var(--ne-badge-gap);
    border-radius: var(--ne-badge-border-radius);
    border-width: var(--ne-badge-border-width);
    font-family: var(--ne-badge-font-family);
    font-size: var(--ne-badge-font-size);
    border-style: solid;
    display: inline-flex;
    align-items: center;
  }

  .badge-left-icon {
    width: var(--ne-badge-sizing-icon);
  }

  .badge-filled-default {
    color: var(--ne-badge-color-label-filled-default);
    background-color: var(--ne-badge-color-background-filled-default);
    border-color: var(--ne-badge-color-border-filled-default);
  }

  .badge-outline-default {
    color: var(--ne-badge-color-label-outline-default);
    background-color: var(--ne-badge-color-background-outline-default);
    border-color: var(--ne-badge-color-border-outline-default);
  }

  .badge-filled-active {
    color: var(--ne-badge-color-label-filled-active);
    background-color: var(--ne-badge-color-background-filled-active);
    border-color: var(--ne-badge-color-border-filled-active);
  }

  .badge-outline-active {
    color: var(--ne-badge-color-label-outline-active);
    background-color: var(--ne-badge-color-background-outline-active);
    border-color: var(--ne-badge-color-border-outline-active);
  }

  .badge-filled-success {
    color: var(--ne-badge-color-label-filled-success);
    background-color: var(--ne-badge-color-background-filled-success);
    border-color: var(--ne-badge-color-border-filled-success);
  }

  .badge-outline-success {
    color: var(--ne-badge-color-label-outline-success);
    background-color: var(--ne-badge-color-background-outline-success);
    border-color: var(--ne-badge-color-border-outline-success);
  }

  .badge-filled-error {
    color: var(--ne-badge-color-label-filled-error);
    background-color: var(--ne-badge-color-background-filled-error);
    border-color: var(--ne-badge-color-border-filled-error);
  }

  .badge-outline-error {
    color: var(--ne-badge-color-label-outline-error);
    background-color: var(--ne-badge-color-background-outline-error);
    border-color: var(--ne-badge-color-border-outline-error);
  }

  .badge-filled-info {
    color: var(--ne-badge-color-label-filled-info);
    background-color: var(--ne-badge-color-background-filled-info);
    border-color: var(--ne-badge-color-border-filled-info);
  }

  .badge-outline-info {
    color: var(--ne-badge-color-label-outline-info);
    background-color: var(--ne-badge-color-background-outline-info);
    border-color: var(--ne-badge-color-border-outline-info);
  }

  .badge-filled-warning {
    color: var(--ne-badge-color-label-filled-warning);
    background-color: var(--ne-badge-color-background-filled-warning);
    border-color: var(--ne-badge-color-border-filled-warning);
  }

  .badge-outline-warning {
    color: var(--ne-badge-color-label-outline-warning);
    background-color: var(--ne-badge-color-background-outline-warning);
    border-color: var(--ne-badge-color-border-outline-warning);
  }
`,mr,ki];let _i=class extends T.oi{constructor(){super(...arguments),this.label="",this.showLeftIcon=!1,this.variant=gi,this.container=wi}static get styles(){return Ci}_getBadgeClasses(){const e=this.container===wi,t=this.container===xi,r=this.variant===gi,o=this.variant===vi,n=this.variant===bi,i=this.variant===mi,a=this.variant===yi,s=this.variant===Ai;return{badge:!0,"badge-filled-default":e&&r,"badge-outline-default":t&&r,"badge-filled-active":e&&o,"badge-outline-active":t&&o,"badge-filled-success":e&&n,"badge-outline-success":t&&n,"badge-filled-error":e&&i,"badge-outline-error":t&&i,"badge-filled-info":e&&a,"badge-outline-info":t&&a,"badge-filled-warning":e&&s,"badge-outline-warning":t&&s}}_getBadgeIconType(){switch(this.variant){case vi:case bi:return an;case mi:return on;case yi:return nn;case Ai:return ln;default:return sn}}_renderBadgeLeftIcon(){if(!this.showLeftIcon)return T.Ld;const e=this.leftIconOverride||this._getBadgeIconType();return zo({type:e})}render(){const e=this._getBadgeClasses();return T.dy`
      <div
        id=${this.id}
        role="alert"
        aria-label=${this.label||T.Ld}
        class=${yr(e)}
      >
        <span class=${this.showLeftIcon?"badge-left-icon":"hidden"}>
          ${this._renderBadgeLeftIcon()}
        </span>
        ${this.label}
      </div>
    `}};var $i;br([O({type:String,reflect:!0})],_i.prototype,"label",void 0),br([O({type:Boolean,reflect:!0})],_i.prototype,"showLeftIcon",void 0),br([O({type:String,reflect:!0})],_i.prototype,"leftIconOverride",void 0),br([O({type:String,reflect:!0})],_i.prototype,"variant",void 0),br([O({type:String,reflect:!0})],_i.prototype,"container",void 0),_i=br([P("ne-badge")],_i),function(e){e.default="default",e.none="none",e.warning="warning",e.error="error"}($i||($i={}));class Si extends(wo(T.oi)){constructor(){super(...arguments),this.validationMessage="",this.validationState=$i.default}get isInvalid(){switch(this.validationState){case $i.error:case $i.warning:return!0;default:return!1}}renderWithValidation(e){let t;switch(this.validationState){case $i.error:t=on;break;case $i.warning:t=ln;break;default:t=void 0}let r="";return this.validationState!==$i.default&&(r=T.dy`<div class="validation-icon">
        ${zo({type:t})}
      </div>`),T.dy`
      <div
        class=${yr({"validation-wrapper":!0,none:this.validationState===$i.none,default:this.validationState===$i.default||!this.validationState,error:this.validationState===$i.error,warning:this.validationState===$i.warning})}
      >
        ${e}
        <div
          class=${yr({"message-container":!0,none:this.validationState===$i.none,default:this.validationState===$i.default||!this.validationState,error:this.validationState===$i.error,warning:this.validationState===$i.warning})}
        >
          ${r} <label>${this.isInvalid?this.validationMessage:""}</label>
        </div>
      </div>
    `}}br([O({reflect:!0,attribute:"validation-message"})],Si.prototype,"validationMessage",void 0),br([O({reflect:!0,attribute:"validation-state"})],Si.prototype,"validationState",void 0);const zi=T.iv`
  .validation-wrapper {
    width: 100%;
    height: 100%;
  }

  .message-container {
    display: grid;
    grid-template-columns: var(--ne-icon-size-default) auto;
    grid-template-rows: auto;
    justify-items: flex-start;
    align-items: center;
  }

  .validation-icon {
    min-width: var(--ne-icon-size-default);
    padding-top: var(--ne-help-message-padding-vertical);
    height: 100%;
  }
`,Ei=T.iv`
  .message-container {
    width: 100%;
    font-size: var(--ne-help-message-font-size);
    font-family: var(--ne-help-message-font-family);
    box-sizing: border-box;
    border-radius: var(--ne-help-message-border-radius-top)
      var(--ne-help-message-border-radius-top)
      var(--ne-help-message-border-radius-bottom)
      var(--ne-help-message-border-radius-bottom);
    gap: var(--ne-help-message-gap);
    padding: var(--ne-help-message-padding-vertical)
      var(--ne-help-message-padding-horizontal);
  }

  .message-container.default,
  .message-container.none {
    display: none;
  }

  .message-container.warning {
    color: var(--ne-help-message-color-label-warning);
    background-color: var(--ne-help-message-color-background-warning);
    gap: var(--ne-help-message-padding-horizontal);
    grid-column: 1 / span 1;
    grid-row: 1 / span 1;
  }

  .message-container.error {
    gap: var(--ne-help-message-padding-horizontal);
    color: var(--ne-help-message-color-label-error);
    background-color: var(--ne-help-message-color-background-error);
    grid-column: 1 / span 1;
    grid-row: 1 / span 1;
  }
`,Li=T.iv`
  * {
  --ne-help-message-color-background-warning: var(--ne-ref-color-yellow-50, #FFCF1A);
  --ne-help-message-color-background-error: var(--ne-ref-color-red-50, #E60000);
  --ne-help-message-color-label-error: var(--ne-ref-color-white, #ffffff);
  --ne-help-message-color-label-warning: var(--ne-ref-color-grey-90, #161718);
  --ne-help-message-color-border-warning: var(--ne-ref-color-yellow-50, #FFCF1A);
  --ne-help-message-color-border-error: var(--ne-ref-color-red-50, #E60000);
  --ne-help-message-font-size: var(--ne-ref-font-size-04, 0.875em);
  --ne-help-message-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-help-message-border-radius-top: var(--ne-ref-border-radius-none, 0);
  --ne-help-message-border-radius-bottom: var(--ne-ref-border-radius-medium, .25em);
  --ne-help-message-gap: var(--ne-ref-spacing-xx-small, 0.25em);
  --ne-help-message-padding-vertical: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-help-message-padding-horizontal: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-help-message-border-width: var(--ne-ref-border-width-small, 1px);
  --ne-help-message-sizing-icon: var(--ne-ref-sizing-04, 1em);
}
`,Ti=[T.iv`
  .accordion-container {
    display: flex;
    flex-direction: column;
  }
`,mr];let Pi=class extends T.oi{static get styles(){return Ti}render(){return T.dy`<div class="accordion-container">
      <slot></slot>
    </div>`}};Pi=br([P("ne-accordion")],Pi);var Di,Fi=r(1704);!function(e){e.info="info",e.success="success",e.danger="danger",e.warning="warning"}(Di||(Di={}));const Oi=T.iv`
  * {
  --ne-banner-sizing-icon: var(--ne-ref-sizing-04, 1em);
  --ne-banner-color-background-success: var(--ne-ref-color-green-50, #008738);
  --ne-banner-color-background-info: var(--ne-ref-color-blue-60, #006BD6);
  --ne-banner-color-background-danger: var(--ne-ref-color-red-50, #E60000);
  --ne-banner-color-background-warning: var(--ne-ref-color-yellow-50, #FFCF1A);
  --ne-banner-color-label-default: var(--ne-ref-color-white, #ffffff);
  --ne-banner-color-label-warning: var(--ne-ref-color-grey-90, #161718);
  --ne-banner-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-banner-font-size: var(--ne-ref-font-size-04, 0.875em);
  --ne-banner-shadow: 0px 0px 8px var(--ne-ref-color-grey-90-20, #16171820);
  --ne-banner-gap: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-banner-padding-horizontal: var(--ne-ref-spacing-medium, 1em);
  --ne-banner-padding-vertical: var(--ne-ref-spacing-x-small, 0.5em);
}
`,Ni=[T.iv`
  :host {
    width: 100%;
  }

  .banner {
    position: relative;
    display: flex;
    flex-flow: row nowrap;
    justify-content: flex-start;
    align-items: top;
    align-content: center;
    padding: var(--ne-banner-padding-horizontal) var(--ne-banner-padding-vertical);
    box-sizing: border-box;
    box-shadow: var(--ne-banner-shadow)
    border: none;
    border-radius: var(--ne-banner-border-radius-default);
    align-items: flex-start
  }

  .info {
    background-color: var(--ne-banner-color-background-info);
    color: var(--ne-banner-color-label-default);
  }

  .success {
    background-color: var(--ne-banner-color-background-success);
    color: var(--ne-banner-color-label-default);
  }

  .danger {
    background-color: var(--ne-banner-color-background-danger);
    color: var(--ne-banner-color-label-default);
  }

  .warning {
    background-color: var(--ne-banner-color-background-warning);
    color: var(--ne-banner-color-label-warning);
  }

  .content {
    flex-grow: 1;
    word-wrap: break-word;
    font-family: var(--ne-banner-font-family);
    font-size: var(--ne-banner-font-size);
  }

  .banner.closable .content {
    padding-right: 0;
  }

  .icon {
    flex-shrink: 0;
    display: grid;
    box-sizing: border-box;
    background-color: transparent;
    padding-top: var(--ne-ref-spacing-xxx-small);

  }

  .type-icon {
    min-width: var(--ne-banner-sizing-icon);
    height: var(--ne-banner-sizing-icon);
    margin: 0 var(--ne-banner-gap);
  }

  .close-button {
    display: flex;
    flex-flow: row nowrap;
    justify-content: center;
    align-items: center;
    align-content: center;
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    border: none;
    border-radius: var(--ne-button-border-radius);
    min-width: var(--ne-banner-sizing-icon);
    outline: none;
    background-color: transparent;
    cursor: pointer;
  }
  
  .close-button * {
    cursor: pointer;
  }
`,mr,Oi];let Bi=class extends(wo(T.oi)){constructor(){super(...arguments),this.variantType=Di.info,this.closable=!1,this._onClose=()=>{xo(this,"ne-close",{})},this.getTypeIcon=()=>{let e;switch(this.variantType){case Di.info:e=nn;break;case Di.success:e=an;break;case Di.danger:e=on;break;case Di.warning:e=ln}return T.dy`<ne-icon type=${e}></ne-icon>`}}static get styles(){return Ni}static get scopedElements(){return{"ne-icon":Yo}}render(){return T.dy`<div
      role="alert"
      class="${yr({banner:!0,[this.variantType]:!0,closable:this.closable})}"
    >
      <span class="icon type-icon">${this.getTypeIcon()}</span>
      <div class="content"><slot></slot></div>
      ${this.closable?T.dy`<button
            id="close-button"
            class="close-button"
            @click="${this._onClose}"
            aria-label="close"
          >
            <span
              class="${yr({icon:!0,"type-icon":!0,[this.variantType]:!0})}"
              ><ne-icon type=${rn}></ne-icon
            ></span>
          </button>`:""}
    </div>`}};br([O({type:String,attribute:"type",reflect:!0})],Bi.prototype,"variantType",void 0),br([O({type:Boolean,reflect:!0})],Bi.prototype,"closable",void 0),Bi=br([P("ne-banner")],Bi);var Mi=r(3441);const Ri=T.iv`
  * {
  --ne-checkbox-sizing-rectangle: var(--ne-ref-sizing-04, 1em);
  --ne-checkbox-sizing-tick: var(--ne-ref-sizing-04, 1em);
  --ne-checkbox-gap: var(--ne-ref-spacing-medium, 1em);
  --ne-checkbox-padding-subtext: var(--ne-ref-spacing-x-large, 2em);
  --ne-checkbox-color-background-selected-default: var(--ne-ref-color-blue-60, #006BD6);
  --ne-checkbox-color-background-selected-disabled: var(--ne-ref-color-grey-50, #6D7379);
  --ne-checkbox-color-background-selected-hover: var(--ne-ref-color-blue-70, #0052A3);
  --ne-checkbox-color-background-selected-focus: var(--ne-ref-color-blue-70, #0052A3);
  --ne-checkbox-color-background-unselected-default: var(--ne-ref-color-white, #ffffff);
  --ne-checkbox-color-background-unselected-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-checkbox-color-background-unselected-hover: var(--ne-ref-color-white, #ffffff);
  --ne-checkbox-color-background-unselected-focus: var(--ne-ref-color-white, #ffffff);
  --ne-checkbox-color-tick: var(--ne-ref-color-white, #ffffff);
  --ne-checkbox-color-border-selected-default: var(--ne-ref-color-blue-60, #006BD6);
  --ne-checkbox-color-border-selected-disabled: var(--ne-ref-color-grey-50, #6D7379);
  --ne-checkbox-color-border-selected-hover: var(--ne-ref-color-blue-70, #0052A3);
  --ne-checkbox-color-border-selected-focus: var(--ne-ref-color-blue-20, #A3D1FF);
  --ne-checkbox-color-border-unselected-default: var(--ne-ref-color-grey40, #898F94);
  --ne-checkbox-color-border-unselected-disabled: var(--ne-ref-color-grey40, #898F94);
  --ne-checkbox-color-border-unselected-hover: var(--ne-ref-color-blue-70, #0052A3);
  --ne-checkbox-color-border-unselected-focus: var(--ne-ref-color-blue-20, #A3D1FF);
  --ne-checkbox-color-text-enabled-option: var(--ne-ref-color-grey-90, #161718);
  --ne-checkbox-color-text-enabled-subtext: var(--ne-ref-color-grey-60, #575C61);
  --ne-checkbox-color-text-disabled: var(--ne-ref-color-grey-50, #6D7379);
  --ne-checkbox-border-width: var(--ne-ref-border-width-small, 1px);
  --ne-checkbox-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-checkbox-font-size-option: var(--ne-ref-font-size-04, 0.875em);
  --ne-checkbox-font-size-subtext: var(--ne-ref-font-size-02, 0.75em);
  --ne-checkbox-border-radius: var(--ne-ref-border-radius-small, 0.125em);
  --ne-checkbox-focus: var(--ne-ref-border-width-large, 4px);
}
`,Ii=[T.iv`
  * {
    font-family: var(--ne-checkbox-font-family);
  }

  .checkbox-container {
    display: flex;
    cursor: pointer;
  }

  .checkbox-input {
    position: absolute;
    z-index: 9999;
    opacity: 0;
    cursor: pointer;
  }

  .checkbox-control {
    background-color: var(--ne-checkbox-color-background-unselected-default);
    border: var(--ne-checkbox-border-width) solid
      var(--ne-checkbox-color-border-unselected-default);
    position: relative;
    width: var(--ne-checkbox-sizing-rectangle);
    min-width: var(--ne-checkbox-sizing-rectangle);
    height: var(--ne-checkbox-sizing-rectangle);
    border-radius: var(--ne-checkbox-border-radius);
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--ne-checkbox-color-tick);
  }

  .checkbox-control svg {
    width: var(--ne-checkbox-sizing-tick);
  }

  .checkbox-text-container {
    display: flex;
    flex-direction: column;
    margin-inline-start: var(--ne-checkbox-gap);
  }

  .checkbox-text {
    font-size: var(--ne-checkbox-font-size-option);
  }

  .checkbox-subtext {
    font-size: var(--ne-checkbox-font-size-subtext);
    color: var(--ne-checkbox-color-text-enabled-subtext);
  }

  /* Checked */
  .checkbox-container.checkbox-container-checked .checkbox-control {
    border-color: var(--ne-checkbox-color-border-selected-default);
    background-color: var(--ne-checkbox-color-background-selected-default);
    margin-bottom: var(--ne-checkbox-focus);
  }

  .checkbox-container.checkbox-container-disabled .checkbox-control {
    border-color: var(--ne-checkbox-color-border-unselected-disabled);
    background-color: var(--ne-checkbox-color-background-unselected-disabled);
    cursor: not-allowed;
  }

  /* Focused - not checked */
  .checkbox-container:not(
      .checkbox-container-checked,
      .checkbox-container-disabled
    )
    .checkbox-input:focus
    ~ .checkbox-control {
    outline: solid var(--ne-checkbox-focus)
      var(--ne-checkbox-color-border-unselected-focus);
  }

  /* Focused - checked */
  .checkbox-container.checkbox-container-checked:not(
      .checkbox-container-disabled
    )
    .checkbox-input:focus
    ~ .checkbox-control {
    outline: solid var(--ne-checkbox-focus)
      var(--ne-checkbox-color-border-selected-focus);
    background-color: var(--ne-checkbox-color-background-selected-focus);
  }

  /* Disabled */
  .checkbox-container.checkbox-container-disabled {
    cursor: not-allowed;
  }

  .checkbox-container.checkbox-container-disabled .checkbox-text {
    color: var(--ne-checkbox-color-text-disabled);
  }

  .checkbox-container.checkbox-container-disabled .checkbox-subtext {
    color: var(--ne-checkbox-color-text-disabled);
  }

  .checkbox-container.checkbox-container-disabled .checkbox-input {
    cursor: not-allowed;
  }

  /* Hovered - not checked */
  .checkbox-container:not(.checkbox-container-checked).checkbox-container:not(
      .checkbox-container-disabled
    )
    .checkbox-input:hover
    ~ .checkbox-control {
    border-color: var(--ne-checkbox-color-border-unselected-hover);
    background-color: var(--ne-checkbox-color-background-unselected-hover);
  }

  /* Hovered - checked */
  .checkbox-container.checkbox-container-checked.checkbox-container:not(
      .checkbox-container-disabled
    )
    .checkbox-input:hover
    ~ .checkbox-control {
    border-color: var(--ne-checkbox-color-border-selected-hover);
    background-color: var(--ne-checkbox-color-background-selected-hover);
  }
`,mr,Ri];let ji=class extends T.oi{constructor(){super(...arguments),this.text="",this.subText="",this.checked=!1,this.disabled=!1}static get styles(){return Ii}onClick(){xo(this,"ne-click",{composed:!0,bubbles:!0}),this.checked=!this.checked}render(){return T.dy`
      <label
        class=${yr({"checkbox-container":!0,"checkbox-container-checked":this.checked,"checkbox-container-disabled":this.disabled})}
      >
        <input
          class="checkbox-input"
          type="checkbox"
          tabindex=${this.tabIndex.toString()}
          .disabled=${this.disabled}
          .checked=${this.checked}
          aria-checked=${this.checked?"true":"false"}
          @click="${this.onClick}"
        />
        <span class="checkbox-control">
          ${this.checked?zo({typeAsHtml:Mi.check}):T.Ld}
        </span>
        <div class="checkbox-text-container">
          <span class="checkbox-text">${this.text}</span>
          ${this.subText?T.dy`<span class="checkbox-subtext">${this.subText}</span>`:T.Ld}
        </div>
      </label>
    `}};br([O({type:String})],ji.prototype,"text",void 0),br([O({type:String})],ji.prototype,"subText",void 0),br([O({type:Boolean,reflect:!0})],ji.prototype,"checked",void 0),br([O({type:Boolean,reflect:!0})],ji.prototype,"disabled",void 0),ji=br([P("ne-checkbox")],ji);const Vi=T.iv`
  * {
  --ne-config-panel-sizing-header-icon-bg: var(--ne-ref-sizing-11, 3em);
  --ne-config-panel-sizing-header-icon: var(--ne-ref-sizing-08, 2em);
  --ne-config-panel-sizing-header-bar-width: var(--ne-ref-sizing-01, 0.25em);
  --ne-config-panel-sizing-width-small: var(--ne-ref-sizing-17, 24em);
  --ne-config-panel-sizing-width-large: var(--ne-ref-sizing-20, 48em);
  --ne-config-panel-color-background: var(--ne-ref-color-white, #ffffff);
  --ne-config-panel-color-header-bar: var(--ne-ref-color-nintex-orange, #F56900);
  --ne-config-panel-color-header-border: var(--ne-ref-color-grey-10, #E2E3E4);
  --ne-config-panel-color-header-title: var(--ne-ref-color-grey-90, #161718);
  --ne-config-panel-color-header-subtitle: var(--ne-ref-color-grey-60, #575C61);
  --ne-config-panel-color-header-icon: var(--ne-ref-color-white, #ffffff);
  --ne-config-panel-color-header-icon-bg: var(--ne-ref-color-blue-70, #0052A3);
  --ne-config-panel-shadow: 0px 0px 8px var(--ne-ref-color-grey-90-20, #16171820);
  --ne-config-panel-padding: var(--ne-ref-spacing-medium, 1em);
  --ne-config-panel-header-padding-horizontal: var(--ne-ref-spacing-medium, 1em);
  --ne-config-panel-header-padding-gap: var(--ne-ref-spacing-medium, 1em);
  --ne-config-panel-header-padding-vertical: var(--ne-ref-spacing-medium, 1em);
  --ne-config-panel-button-set-padding-horizontal: var(--ne-ref-spacing-medium, 1em);
  --ne-config-panel-border-width-header: var(--ne-ref-border-width-small, 1px);
  --ne-config-panel-font-family-header-title: var(--ne-ref-font-family-montserrat, Montserrat);
  --ne-config-panel-font-family-header-subtitle: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-config-panel-font-size-header-title: var(--ne-ref-font-size-06, 1.125em);
  --ne-config-panel-font-size-header-subtitle: var(--ne-ref-font-size-04, 0.875em);
  --ne-config-panel-font-weight-header-title: var(--ne-ref-font-weight-regular, Regular);
  --ne-config-panel-font-weight-header-subtitle: var(--ne-ref-font-weight-regular, Regular);
  --ne-config-panel-line-height-header-title: var(--ne-ref-line-height-08, 1.5em);
  --ne-config-panel-line-height-header-subtitle: var(--ne-ref-line-height-08, 1.5em);
  --ne-config-panel-border-radius-header-icon-bg: var(--ne-ref-border-radius-medium, .25em);
}
`,Hi=[T.iv`
  :host {
    width: 100%;
    height: 100%;
  }

  .ne-config-panel {
    position: relative;
    display: flex;
    flex-flow: column nowrap;
    justify-content: flex-start;
    align-content: center;
    height: 100%;
    box-shadow: var(--ne-config-panel-shadow);
    background: var(--ne-config-panel-color-background);
  }

  .small {
    width: var(--ne-config-panel-sizing-width-small);
  }

  .large {
    width: var(--ne-config-panel-sizing-width-large);
  }

  .content {
    height: 100%;
    padding: var(--ne-config-panel-padding);
  }

  .footer {
    padding-left: var(--ne-config-panel-button-set-padding-horizontal);
    padding-right: var(--ne-config-panel-button-set-padding-horizontal);
  }

  .hide {
    display: none;
  }
`,mr,Vi],Ui=[T.iv`
  :host {
    width: 100%;
  }

  .ne-config-panel-header {
    padding-right: var(--ne-config-panel-header-padding-horizontal);
    padding-left: var(--ne-config-panel-header-padding-horizontal);
    border-left: var(--ne-config-panel-sizing-header-bar-width) solid
      var(--ne-config-panel-color-header-bar);
    border-bottom: var(--ne-config-panel-border-width-header) solid
      var(--ne-config-panel-color-header-border);
  }

  .header-content {
    display: flex;
    flex-flow: row nowrap;
    padding-top: var(--ne-config-panel-header-padding-vertical);
    padding-bottom: var(--ne-config-panel-header-padding-vertical);
    gap: var(--ne-config-panel-header-padding-gap);
  }

  .header-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: var(--ne-config-panel-sizing-header-icon-bg);
    height: var(--ne-config-panel-sizing-header-icon-bg);
    background: var(--ne-config-panel-color-header-icon-bg);
    border-radius: var(--ne-config-panel-border-radius-header-icon-bg);
  }

  .icon {
    color: var(--ne-config-panel-color-header-icon);
    width: var(--ne-config-panel-sizing-header-icon);
    height: var(--ne-config-panel-sizing-header-icon);
  }

  .header-text {
    display: flex;
    flex-flow: column;
    word-wrap: break-word;
    flex: 1;
  }

  .title-label {
    color: var(--ne-config-panel-color-header-title);
    font-family: var(--ne-config-panel-font-family-header-title);
    font-size: var(--ne-config-panel-font-size-header-title);
    font-weight: var(--ne-config-panel-font-weight-header-title);
    line-height: var(--ne-config-panel-line-height-header-title);
  }

  .subtitle-label {
    color: var(--ne-config-panel-color-header-subtitle);
    font-family: var(--ne-config-panel-font-family-header-subtitle);
    font-size: var(--ne-config-panel-font-size-header-subtitle);
    font-weight: var(--ne-config-panel-font-weight-header-subtitle);
    line-height: var(--ne-config-panel-line-height-header-subtitle);
  }
`,mr,Vi];let qi=class extends(wo(T.oi)){constructor(){super(...arguments),this.titleText="",this.subtitleText="",this._onClose=()=>{xo(this,"ne-close",{})}}static get styles(){return Ui}static get scopedElements(){return{"ne-icon":Yo,"ne-icon-button":Qo}}render(){return T.dy`<div class="ne-config-panel-header">
      <div id="header-content" class="header-content">
        <div id="header-icon" class="header-icon">
          <ne-icon id="icon" class="icon" type="${this.icon}"></ne-icon>
        </div>
        <div id="header-text" class="header-text">
          <label id="title-label" class="title-label">
            ${this.titleText}
          </label>
          <label id="subtitle-label" class="subtitle-label">
            ${this.subtitleText}
          </label>
        </div>
        <ne-icon-button
          id="close-button"
          class="close-button"
          variant="dark"
          icon=${rn}
          @click=${this._onClose}
          ne-aria-label="close-button"
        ></ne-icon-button>
      </div>
    </div> `}};br([O({reflect:!0,attribute:"icon"})],qi.prototype,"icon",void 0),br([O({reflect:!0,attribute:"title-text"})],qi.prototype,"titleText",void 0),br([O({reflect:!0,attribute:"subtitle-text"})],qi.prototype,"subtitleText",void 0),qi=br([P("ne-config-panel-header")],qi);const Zi="small";let Ki=class extends(wo(T.oi)){constructor(){super(...arguments),this.size=Zi,this.titleText="",this.subtitleText="",this._hideFooter=!1}static get styles(){return Hi}static get scopedElements(){return{"ne-config-panel-header":qi,"ne-button-set":Do}}render(){return T.dy`<div
      class="${yr({"ne-config-panel":!0,[this.size]:!0})}"
    >
      <div id="header" class="header">
        <ne-config-panel-header
          .icon=${this.icon}
          .titleText=${this.titleText}
          .subtitleText=${this.subtitleText}
        >
        </ne-config-panel-header>
      </div>
      <div class="content">
        <slot></slot>
      </div>
      <div
        class="${yr({footer:!0,hide:this._hideFooter})}"
      >
        <ne-button-set class="button-set" show-divider-top="true">
          <slot name="footer"></slot>
        </ne-button-set>
      </div>
    </div>`}firstUpdated(){const e=this?.shadowRoot?.querySelector("slot[name=footer]");this._hideFooter=0===e?.assignedNodes().length}};br([O({attribute:"panel-size",reflect:!0})],Ki.prototype,"size",void 0),br([O({reflect:!0,attribute:"icon"})],Ki.prototype,"icon",void 0),br([O({reflect:!0,attribute:"title-text"})],Ki.prototype,"titleText",void 0),br([O({reflect:!0,attribute:"subtitle-text"})],Ki.prototype,"subtitleText",void 0),br([N()],Ki.prototype,"_hideFooter",void 0),Ki=br([P("ne-config-panel")],Ki);const Wi=[T.iv`
  * {
  --ne-dropdown-menu-color-elevated-background: var(--ne-ref-color-white, #ffffff);
  --ne-dropdown-menu-color-elevated-border: var(--ne-ref-color-grey-10, #E2E3E4);
  --ne-dropdown-menu-color-flat-background: var(--ne-ref-color-white, #ffffff);
  --ne-dropdown-menu-color-flat-border: var(--ne-ref-color-blue-60, #006BD6);
  --ne-dropdown-menu-border-radius-elevated: var(--ne-ref-border-radius-medium, .25em);
  --ne-dropdown-menu-border-radius-flat-top: var(--ne-ref-border-radius-none, 0);
  --ne-dropdown-menu-border-radius-flat-bottom: var(--ne-ref-border-radius-medium, .25em);
  --ne-dropdown-menu-padding-horizontal: var(--ne-ref-spacing-none, 0);
  --ne-dropdown-menu-padding-vertical: var(--ne-ref-spacing-xx-small, 0.25em);
  --ne-dropdown-menu-border-width: var(--ne-ref-border-width-small, 1px);
  --ne-dropdown-menu-shadow-elevated: 0px 0px 8px var(--ne-ref-color-grey-90-20, #16171820);
}
`,T.iv`
  .dropdown-menu {
    margin: 0;
    padding: var(--ne-dropdown-menu-padding-vertical)
      var(--ne-dropdown-menu-padding-horizontal);
    border-width: var(--ne-dropdown-menu-border-width);
    border-style: solid;
  }

  .dropdown-menu.elevated {
    border-color: var(--ne-dropdown-menu-color-elevated-border);
    border-radius: var(--ne-dropdown-menu-border-radius-elevated);
    background-color: var(--ne-dropdown-menu-color-elevated-background);
    box-shadow: 3px 3px 5px rgb(22 23 24 / 10%);
  }

  .dropdown-menu.flat {
    border-color: var(--ne-dropdown-menu-color-flat-border);
    border-radius: var(--ne-dropdown-menu-border-radius-flat-top)
      var(--ne-dropdown-menu-border-radius-flat-top)
      var(--ne-dropdown-menu-border-radius-flat-bottom)
      var(--ne-dropdown-menu-border-radius-flat-bottom);
    background-color: var(--ne-dropdown-menu-color-flat-background);
  }

  .dropdown-menu .fixed-height {
    /* Shows 6 rows */
    max-height: calc(10 * (1em * 1.2));
    overflow-y: auto;
  }

  .dropdown-menu-footer {
    padding: 0 14px;
  }

  .dropdown-menu ::slotted(li) {
    display: block;
  }
`,mr];let Ji=class extends T.oi{constructor(){super(...arguments),this.ariaLabel="",this.variant="elevated",this.fixedHeight=!1,this.showFooterActions=!1}static get styles(){return Wi}render(){return T.dy`<div
      class=${yr({"dropdown-menu":!0,elevated:"elevated"===this.variant,flat:"flat"===this.variant})}
      aria-label=${this.ariaLabel||T.Ld}
    >
      <div class=${yr({"fixed-height":!0===this.fixedHeight})}>
        <slot></slot>
      </div>
      ${this.showFooterActions?T.dy`<div class="dropdown-menu-footer">
            <slot name="footer-items"></slot>
          </div>`:""}
    </div>`}};br([O({attribute:"ne-aria-label",type:String,reflect:!0})],Ji.prototype,"ariaLabel",void 0),br([O({reflect:!0})],Ji.prototype,"variant",void 0),br([O({type:Boolean,reflect:!0})],Ji.prototype,"fixedHeight",void 0),br([O({type:Boolean})],Ji.prototype,"showFooterActions",void 0),Ji=br([P("ne-dropdown-menu")],Ji);const Gi=[T.iv`
  * {
  --ne-dropdown-menu-item-padding-horizontal: var(--ne-ref-spacing-medium, 1em);
  --ne-dropdown-menu-item-padding-vertical: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-dropdown-menu-item-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-dropdown-menu-item-color-background-default: var(--ne-ref-color-white, #ffffff);
  --ne-dropdown-menu-item-color-background-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-dropdown-menu-item-color-text-default: var(--ne-ref-color-grey-90, #161718);
  --ne-dropdown-menu-item-color-text-disabled: var(--ne-ref-color-grey-50, #6D7379);
  --ne-dropdown-menu-item-color-subtext-default: var(--ne-ref-color-grey-60, #575C61);
  --ne-dropdown-menu-item-color-subtext-disabled: var(--ne-ref-color-grey-50, #6D7379);
  --ne-dropdown-menu-item-color-border-focus: var(--ne-ref-color-blue-20, #A3D1FF);
  --ne-dropdown-menu-item-font-size-subtext: var(--ne-ref-font-size-02, 0.75em);
  --ne-dropdown-menu-item-font-size-option: var(--ne-ref-font-size-04, 0.875em);
  --ne-dropdown-menu-item-border-width-focus: var(--ne-ref-border-width-large, 4px);
}
`,T.iv`
  .dropdown-menu-item {
    position: relative;
    display: flex;
    flex-flow: column nowrap;
    justify-content: flex-start;
    align-items: flex-start;
    align-content: flex-start;
    width: 100%;
    box-sizing: border-box;
    padding: calc(
        var(--ne-dropdown-menu-item-padding-vertical) -
          var(--ne-dropdown-menu-item-border-width-focus)
      )
      calc(
        var(--ne-dropdown-menu-item-padding-horizontal) -
          var(--ne-dropdown-menu-item-border-width-focus)
      );
    border: var(--ne-dropdown-menu-item-border-width-focus) solid
      var(--ne-dropdown-menu-item-color-background-default);
    outline: none;
    background-color: var(--ne-dropdown-menu-item-color-background-default);
    font-family: var(--ne-dropdown-menu-item-font-family);
    font-size: var(--ne-dropdown-menu-item-font-size-option);
    color: var(--ne-dropdown-menu-item-color-text-default);
    text-align: left;
    white-space: nowrap;
  }

  .multi-select {
    display: grid;
    grid-template-columns: auto;
    grid-template-rows: auto auto;
  }

  .multi-select .checkbox {
    grid-area: 1 / 1 / 3 / 2; /* Span 2 rows starting from row 1 */
  }

  .multi-select .text-span {
    grid-area: 1 / 2 / 2 / 3; /* Span 1 row starting from column 2 */
  }

  .multi-select .subtext-span {
    grid-area: 2 / 2 / 3 / 3; /* Span 1 row starting from column 2 */
  }

  .dropdown-menu-item:hover {
    border-color: var(--ne-dropdown-menu-item-color-background-hover);
    background-color: var(--ne-dropdown-menu-item-color-background-hover);
  }

  .dropdown-menu-item:disabled {
    color: var(--ne-dropdown-menu-item-color-text-disabled);
  }

  .dropdown-menu-item:focus,
  .dropdown-menu-item:focus:hover {
    border-color: var(--ne-dropdown-menu-item-color-border-focus);
  }

  .dropdown-menu-item .subtext-span {
    font-size: var(--ne-dropdown-menu-item-font-size-subtext);
    color: var(--ne-dropdown-menu-item-color-subtext-default);
  }

  .dropdown-menu-item:disabled .subtext-span {
    color: var(--ne-dropdown-menu-item-color-subtext-disabled);
  }
`,mr];let Yi=class extends T.oi{constructor(){super(...arguments),this._hasSubTextSlot=!1,this.disabled=!1,this.ariaLabel="",this.text="",this.checked=!1,this.isMultiSelect=!1,this._onSlotChanged=()=>{this._subTextSlot&&this._subTextSlot.length>0?this._hasSubTextSlot=!0:this._hasSubTextSlot=!1},this._onClick=()=>{this.disabled||xo(this,"ne-click",{composed:!0,bubbles:!1})},this._onKeyDown=e=>{switch(e.code){case"Space":case"Enter":case"NumpadEnter":this._onClick(),e.preventDefault(),e.stopPropagation()}},this.renderMultiSelect=()=>T.dy`<div
    class="dropdown-menu-item"
    tabindex="0"
    ?disabled=${this.disabled}
    @keydown=${this._onKeyDown}
    @click=${e=>{e.stopPropagation(),e.preventDefault(),this._onClick()}}
    aria-label=${this.ariaLabel||T.Ld}
  >
    <slot name="multi-select"></slot>
  </div>`,this.renderSingleSelect=()=>{let e=!1;return this.subText&&this.subText.length>0&&(e=!0),T.dy`<button
      class="dropdown-menu-item"
      ?disabled=${this.disabled}
      @click=${e=>{e.stopPropagation(),e.preventDefault(),this._onClick()}}
      aria-label=${this.ariaLabel||T.Ld}
    >
      <span class="text-span"><slot>${this.text}</slot></span>
      <span
        class=${yr({"subtext-span":!0,hidden:!this._hasSubTextSlot&&!e})}
        ><slot name="sub-text" @slotchange=${this._onSlotChanged}
          >${this.subText}</slot
        ></span
      >
    </button>`}}static get styles(){return Gi}render(){return T.dy`${this.isMultiSelect?this.renderMultiSelect():this.renderSingleSelect()}`}};br([N()],Yi.prototype,"_hasSubTextSlot",void 0),br([I({slot:"sub-text",flatten:!0})],Yi.prototype,"_subTextSlot",void 0),br([O({type:Boolean,reflect:!0})],Yi.prototype,"disabled",void 0),br([O({attribute:"ne-aria-label",type:String,reflect:!0})],Yi.prototype,"ariaLabel",void 0),br([O({type:String,attribute:"text"})],Yi.prototype,"text",void 0),br([O({type:String,attribute:"sub-text",reflect:!0})],Yi.prototype,"subText",void 0),br([O({type:Boolean})],Yi.prototype,"checked",void 0),br([O({type:Boolean})],Yi.prototype,"isMultiSelect",void 0),Yi=br([P("ne-dropdown-menu-item")],Yi);const Xi=()=>new Qi;class Qi{}const ea=new WeakMap,ta=Wt(class extends rr{render(e){return It.Ld}update(e,[t]){var r;const o=t!==this.G;return o&&void 0!==this.G&&this.ot(void 0),(o||this.rt!==this.lt)&&(this.G=t,this.ct=null===(r=e.options)||void 0===r?void 0:r.host,this.ot(this.lt=e.element)),It.Ld}ot(e){var t;if("function"==typeof this.G){const r=null!==(t=this.ct)&&void 0!==t?t:globalThis;let o=ea.get(r);void 0===o&&(o=new WeakMap,ea.set(r,o)),void 0!==o.get(this.G)&&this.G.call(this.ct,void 0),o.set(this.G,e),void 0!==e&&this.G.call(this.ct,e)}else this.G.value=e}get rt(){var e,t,r;return"function"==typeof this.G?null===(t=ea.get(null!==(e=this.ct)&&void 0!==e?e:globalThis))||void 0===t?void 0:t.get(this.G):null===(r=this.G)||void 0===r?void 0:r.value}disconnected(){this.rt===this.lt&&this.ot(void 0)}reconnected(){this.ot(this.lt)}});function ra(e,t,r){return e?t():null==r?void 0:r()}const oa=T.iv`
  * {
    --ne-icon-size-default: 1em;
  }
`,na=[T.iv`
  * {
  --ne-pill-color-text-default: var(--ne-ref-color-grey-90, #161718);
  --ne-pill-color-text-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-pill-color-background-default: var(--ne-ref-color-white, #ffffff);
  --ne-pill-color-background-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-pill-color-background-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-pill-color-border-disabled: var(--ne-ref-color-grey-50, #6D7379);
  --ne-pill-color-border-default: var(--ne-ref-color-grey-10, #E2E3E4);
  --ne-pill-color-border-hover: var(--ne-ref-color-grey-10, #E2E3E4);
  --ne-pill-border-radius: var(--ne-ref-border-radius-medium, .25em);
  --ne-pill-border-width: var(--ne-ref-border-width-small, 1px);
  --ne-pill-sizing-height: var(--ne-ref-sizing-06, 1.5em);
  --ne-pill-padding-horizontal: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-pill-gap: var(--ne-ref-spacing-xx-small, 0.25em);
  --ne-pill-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-pill-font-size: var(--ne-ref-font-size-04, 0.875em);
  --ne-pill-line-height: var(--ne-ref-line-height-condensed, 1.25em);
  --ne-pill-font-weight: var(--ne-ref-font-weight-regular, Regular);
}
`,mr,T.iv`
  :host {
    display: flex;
    flex-flow: row nowrap;
    justify-content: flex-start;
    align-items: flex-start;
    align-content: flex-start;
  }

  .pill {
    display: flex;
    flex-flow: row nowrap;
    justify-content: flex-start;
    align-items: center;
    align-content: center;
    gap: var(--ne-pill-padding-horizontal);
    min-height: var(--ne-pill-sizing-height);
    max-width: 100%;
    padding: 0 var(--ne-pill-padding-horizontal) 0
      var(--ne-pill-padding-horizontal);
    border: var(--ne-pill-border-width) solid
      var(--ne-pill-color-border-default);
    border-radius: var(--ne-pill-border-radius);
    box-sizing: content-box;
    background-color: var(--ne-pill-color-background-default);
  }

  .pill .text {
    overflow: hidden;
    overflow-wrap: break-word;
    font-family: var(--ne-pill-font-family);
    font-size: var(--ne-pill-font-size);
    font-weight: var(--ne-pill-font-weight);
    line-height: var(--ne-pill-line-height);
    color: var(--ne-pill-color-text-default);
  }

  .pill.closable {
    padding-right: 0;
  }

  .pill.disabled,
  .pill.closable.disabled {
    padding-right: var(--ne-pill-padding-horizontal);
    border-color: var(--ne-pill-color-border-disabled);
    background-color: var(--ne-pill-color-background-disabled);
    cursor: default;
  }
`];let ia=class extends(wo(T.oi)){constructor(){super(...arguments),this.closable=!1,this.disabled=!1,this.ariaLabel="",this._onClose=()=>{xo(this,"ne-close",{composed:!0,bubbles:!0})}}static get scopedElements(){return{"ne-icon-button":Qo}}static get styles(){return na}render(){return T.dy`<div
      id=${this.id}
      role="group"
      aria-label=${this.ariaLabel||T.Ld}
      class=${yr({pill:!0,disabled:this.disabled,closable:this.closable})}
    >
      <span class="text"><slot></slot></span>${this.closable&&!this.disabled?T.dy`<ne-icon-button
            .variant="dark"
            .ariaLabel="close-button"
            ne-aria-label=${this.ariaLabel}
            .iconType=${rn}
            @ne-click="${this._onClose}"
          ></ne-icon-button>`:""}
    </div>`}};br([O({type:Boolean,reflect:!0})],ia.prototype,"closable",void 0),br([O({type:Boolean,reflect:!0})],ia.prototype,"disabled",void 0),br([O({attribute:"ne-aria-label",type:String,reflect:!0})],ia.prototype,"ariaLabel",void 0),ia=br([P("ne-pill")],ia);const aa=[T.iv`
  * {
  --ne-dropdown-field-sizing-icon: var(--ne-ref-sizing-04, 1em);
  --ne-dropdown-field-gap: var(--ne-ref-spacing-xx-small, 0.25em);
  --ne-dropdown-field-padding-horizontal: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-dropdown-field-padding-vertical: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-dropdown-field-content-gap: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-dropdown-field-color-background-default: var(--ne-ref-color-white, #ffffff);
  --ne-dropdown-field-color-background-active: var(--ne-ref-color-white, #ffffff);
  --ne-dropdown-field-color-background-focus: var(--ne-ref-color-white, #ffffff);
  --ne-dropdown-field-color-background-inactive: var(--ne-ref-color-white, #ffffff);
  --ne-dropdown-field-color-background-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-dropdown-field-color-background-warning: var(--ne-ref-color-white, #ffffff);
  --ne-dropdown-field-color-background-error: var(--ne-ref-color-white, #ffffff);
  --ne-dropdown-field-color-border-active: var(--ne-ref-color-blue-60, #006BD6);
  --ne-dropdown-field-color-border-inactive: var(--ne-ref-color-grey40, #898F94);
  --ne-dropdown-field-color-border-focus: var(--ne-ref-color-blue-20, #A3D1FF);
  --ne-dropdown-field-color-border-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-dropdown-field-color-border-warning: var(--ne-ref-color-yellow-50, #FFCF1A);
  --ne-dropdown-field-color-border-error: var(--ne-ref-color-red-50, #E60000);
  --ne-dropdown-field-color-icon-active: var(--ne-ref-color-grey-90, #161718);
  --ne-dropdown-field-color-icon-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-dropdown-field-color-text-placeholder: var(--ne-ref-color-grey-50, #6D7379);
  --ne-dropdown-field-color-text-default: var(--ne-ref-color-grey-90, #161718);
  --ne-dropdown-field-color-text-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-dropdown-field-border-radius-default: var(--ne-ref-border-radius-medium, .25em);
  --ne-dropdown-field-border-radius-with-help-message-top: var(--ne-ref-border-radius-medium, .25em);
  --ne-dropdown-field-border-radius-with-help-message-bottom: var(--ne-ref-border-radius-none, 0);
  --ne-dropdown-field-border-radius-active-top: var(--ne-ref-border-radius-medium, .25em);
  --ne-dropdown-field-border-radius-active-bottom: var(--ne-ref-border-radius-none, 0);
  --ne-dropdown-field-border-width-default: var(--ne-ref-border-width-small, 1px);
  --ne-dropdown-field-border-width-focus: var(--ne-ref-border-width-large, 4px);
  --ne-dropdown-field-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-dropdown-field-font-size: var(--ne-ref-font-size-04, 0.875em);
}
`,mr,T.iv`
  .container {
    align-items: center;
    position: relative;
    padding: 0;
    width: 100%;
  }

  .wrapper {
    width: 100%;
  }

  .multi-select-button,
  input {
    display: flex;
    width: 100%;
    padding: var(--ne-dropdown-field-padding-vertical)
      var(--ne-dropdown-field-padding-horizontal)
      var(--ne-dropdown-field-padding-vertical)
      var(--ne-dropdown-field-padding-horizontal);
    gap: var(--ne-dropdown-field-content-gap);
    border: var(--ne-dropdown-field-border-width-default) solid
      var(--ne-dropdown-field-color-border-inactive);
    border-radius: var(--ne-dropdown-field-border-radius-default);
    background-color: var(--ne-dropdown-field-color-background-default);
    box-sizing: border-box;
    outline: none;
    flex-grow: 1;
    font-family: var(--ne-dropdown-field-font-family);
    font-size: var(--ne-dropdown-field-font-size);
    color: var(--ne-dropdown-field-color-text-default);
    text-align: left;
  }

  .placeholder {
    color: var(--ne-dropdown-field-color-text-placeholder);
  }

  .multi-select-button {
    height: 35px;
    padding: 0.25em;
    align-items: center;
  }

  input.has-icon {
    padding-right: 2em;
  }

  .multi-select-button.warning,
  input.warning {
    border: var(--ne-dropdown-field-border-width-default) solid
      var(--ne-dropdown-field-color-border-warning);
    border-radius: var(--ne-dropdown-field-border-radius-with-help-message-top)
      var(--ne-dropdown-field-border-radius-with-help-message-top)
      var(--ne-dropdown-field-border-radius-with-help-message-bottom)
      var(--ne-dropdown-field-border-radius-with-help-message-bottom);
  }

  .multi-select-button.error,
  input.error {
    border: var(--ne-dropdown-field-border-width-default) solid
      var(--ne-dropdown-field-color-border-error);
    border-radius: var(--ne-dropdown-field-border-radius-with-help-message-top)
      var(--ne-dropdown-field-border-radius-with-help-message-top)
      var(--ne-dropdown-field-border-radius-with-help-message-bottom)
      var(--ne-dropdown-field-border-radius-with-help-message-bottom);
  }

  .state-indicator.disabled {
    background-color: var(--ne-dropdown-field-color-background-disabled);
  }

  .multi-select-button:focus,
  input:focus {
    outline: var(--ne-dropdown-field-border-width-focus) solid
      var(--ne-dropdown-field-color-border-focus);
    border: 1px solid transparent;
  }

  input.active,
  input.active:focus {
    outline: none;
    border: var(--ne-dropdown-field-border-width-default) solid
      var(--ne-dropdown-field-color-border-active);
    border-radius: var(--ne-dropdown-field-border-radius-active-top)
      var(--ne-dropdown-field-border-radius-active-top)
      var(--ne-dropdown-field-border-radius-active-bottom)
      var(--ne-dropdown-field-border-radius-active-bottom);
  }

  .multi-select-button.disabled,
  input.disabled {
    background-color: var(--ne-dropdown-field-color-background-disabled);
    border-color: var(--ne-dropdown-field-color-border-disabled);
    color: var(--ne-dropdown-field-color-text-disabled);
  }

  .icon {
    color: var(--ne-dropdown-field-color-icon);
    width: var(--ne-dropdown-field-sizing-icon);
    position: absolute;
    top: 0;
    right: 0;
    background-color: transparent;
    border: none;
    outline: none;
    padding: 0 var(--ne-dropdown-field-padding-horizontal);
    cursor: unset;
    flex-shrink: 0;
    display: grid;
    height: 100%;
  }

  .emphasis {
    font-weight: var(--ne-dropdown-field-font-weight-highlight);
  }

  .empty-list,
  .datalist {
    position: absolute;
    width: 100%;
    z-index: 1;
  }
`,Li,oa,zi,Ei];var sa,la;let ca=(sa=class extends Si{static get scopedElements(){return{"ne-dropdown-menu-item":Yi,"ne-dropdown-menu":Ji,"ne-icon":Yo,"ne-pill":ia}}static get styles(){return aa}set dataList(e){const t=this._dataList;this._dataList=e,this.requestUpdate("dataList",t)}get dataList(){return this._dataList}constructor(){super(),this._multiSelect=!1,this.value="",this.displayValue="",this.disabled=!1,this.fixedHeight=!1,this.showFooterActions=!1,this.ariaLabel="",this.ariaLabelledby="",this._expanded=!1,this._dataList=[],this._input=Xi(),this._previousValue="",this.updated=()=>{this._multiSelect||this._updateDisplayText()},this._updateDisplayText=()=>{this.value&&""!==this.value&&!this._multiSelect?this._dataList&&this._dataList.length>0&&(this.displayValue=this.dataList.find((e=>e.value===this.value))?.text):this.displayValue="",this._input.value&&this.displayValue&&(this._input.value.value=this.displayValue)},this._onDocumentClick=()=>{this._expanded&&(this._orderItems(),this._expanded=!1,this._input.value?.value&&this._previousValue?this._input.value.value=this._previousValue:xo(this,"ne-change",{composed:!0,bubbles:!0,detail:{value:this.value}}))},this._onKeyDown=e=>{switch(e.code){case"Space":case"Enter":case"NumpadEnter":case"Escape":this._expanded=!this._expanded}this.requestUpdate()},this._onMouseDown=e=>{this.disabled||(this._expanded=!this._expanded,this._orderItems(),e.stopPropagation(),this.requestUpdate())},this._onMultiSelectListItemClicked=(e,t)=>{if(Array.isArray(this.value)||(this.value=[]),e.checked=!e.checked,!1===e.checked){const e=this.value.findIndex((e=>e===t));this.value.splice(e,1)}else this.value.push(t);this.requestUpdate()},this._onToggleAllClicked=(e,t)=>{t?this.value=this._dataList.map((e=>e.value)):this._clearSelection(),this._expanded=!1},this._onListItemClicked=(e,t)=>{this.value=t,this._previousValue=this.displayValue,xo(this,"ne-change",{composed:!0,bubbles:!0,detail:{value:this.value}}),this._expanded=!1,this.requestUpdate()},this._renderInput=()=>this._multiSelect?T.dy`<div
        tabindex="0"
        class=${yr({"multi-select-button":!0,"has-icon":!0,active:this._expanded,disabled:this.disabled,error:this.validationState===$i.error,warning:this.validationState===$i.warning})}
        @mousedown=${this._onMouseDown}
        @keydown=${this._onKeyDown}
        @click=${la._onClick}
      >
        ${ra(this.value.length<1,this._renderPlaceholder)}
        ${ra(this.value.length>0,this._renderPill)}
      </div>`:T.dy` <input
      class=${yr({"has-icon":!0,active:this._expanded,disabled:this.disabled})}
      type="text"
      ${ta(this._input)}
      readonly="true"
      aria-label=${this.ariaLabel||T.Ld}
      aria-labelledby=${this.ariaLabelledby||T.Ld}
      placeholder=${Fo(this.placeholder)}
      @mousedown=${this._onMouseDown}
      @click=${la._onClick}
    />`,this._renderPlaceholder=()=>T.dy`<span class="placeholder">${this.placeholder}</span>`,this._renderPill=()=>T.dy`<span
      ><ne-pill
        ne-aria-label="close"
        closable=""
        ?disabled=${this.disabled}
        @mousedown=${e=>{e.stopPropagation()}}
        @ne-click=${e=>{e.stopPropagation(),e.preventDefault(),this._clearSelection()}}
      >
        ${this.value.length} selected
      </ne-pill>
    </span>`,this._clearSelection=()=>{this.value=[],this.dataList=this.dataList.map((e=>(e.checked=!1,e))),this._orderItems(),xo(this,"ne-change",{composed:!0,bubbles:!0,detail:{value:this.value}})},this._orderItems=()=>{const e=this.dataList.filter((e=>!0===e.checked?e:null));this.value=e.map((e=>e.value));const t=this.dataList.filter((e=>e.checked?null:e));this.dataList=[...e,...t]},this._renderListItems=()=>T.dy`<div class="datalist">
    <ne-dropdown-menu
      variant="flat"
      ?fixedHeight=${this.fixedHeight}
      ?showFooterActions=${this.showFooterActions}
    >
      ${this.dataList.map((e=>this._multiSelect?T.dy`<ne-dropdown-menu-item
            ne-aria-label=${Fo(e.ariaLabel)}
            isMultiSelect
            @ne-click=${()=>{this._onMultiSelectListItemClicked(e,e.value)}}
          >
            <span slot="multi-select">
              <ne-checkbox
                @ne-click=${e=>{e.stopPropagation()}}
                tabIndex=${-1}
                text=${e.text}
                subText=${e.subText}
                checked=${e.checked?"true":T.Ld}
              >
              </ne-checkbox>
            </span>
          </ne-dropdown-menu-item>`:T.dy`<ne-dropdown-menu-item
          ne-aria-label=${Fo(e.ariaLabel)}
          @ne-click=${t=>{this._onListItemClicked(t,e.value)}}
          ><span>${e.text}</span>
          <span slot="sub-text">${e.subText}</span>
        </ne-dropdown-menu-item>`))}
      <span slot="footer-items">
        <ne-button-set>
          <ne-button
            variant="secondary"
            @click=${e=>{e.stopPropagation()}}
            @ne-click=${e=>{this._onToggleAllClicked(e,!0)}}
            >Select All
          </ne-button>
          <ne-button
            variant="text"
            @click=${e=>{e.stopPropagation()}}
            @ne-click=${e=>{this._onToggleAllClicked(e,!1)}}
            >Clear All
          </ne-button>
        </ne-button-set>
      </span>
    </ne-dropdown-menu>
  </div>`,this.render=()=>this.renderWithValidation(T.dy`<div class="container">
        <div class="state-indicator">
          ${this._renderInput()}
          <div class="icon" @mousedown=${this._onMouseDown}>
            ${this._expanded?T.dy`<ne-icon .type=${tn}></ne-icon>`:T.dy`<ne-icon .type=${en}></ne-icon>`}
          </div>
        </div>
        ${ra(this._expanded,this._renderListItems)}
      </div>`),document.addEventListener("click",this._onDocumentClick)}connectedCallback(){super.connectedCallback?.();const e=this.dataList[0];this.dataList&&e.checked&&(this._multiSelect=!0,this._orderItems())}disconnectedCallback(){super.disconnectedCallback?.(),document.removeEventListener("click",this._onDocumentClick)}},sa._onClick=e=>{e.stopPropagation()},la=sa);br([N()],ca.prototype,"_multiSelect",void 0),br([O({type:String})],ca.prototype,"placeholder",void 0),br([O({attribute:"value"})],ca.prototype,"value",void 0),br([O({type:String,attribute:"display-value"})],ca.prototype,"displayValue",void 0),br([O({type:Boolean,reflect:!0})],ca.prototype,"disabled",void 0),br([O({type:Boolean})],ca.prototype,"fixedHeight",void 0),br([O({type:Boolean})],ca.prototype,"showFooterActions",void 0),br([O({type:String,attribute:"ne-aria-label",reflect:!0})],ca.prototype,"ariaLabel",void 0),br([O({type:String,attribute:"ne-aria-labelledby",reflect:!0})],ca.prototype,"ariaLabelledby",void 0),br([O({type:Array,reflect:!0})],ca.prototype,"dataList",null),br([N()],ca.prototype,"_expanded",void 0),ca=la=br([P("ne-dropdown-field")],ca);var da=r(7798),ua=r(1601);const ha=T.iv`
  * {
  --ne-file-picker-card-padding-horizontal: var(--ne-ref-spacing-medium, 1em);
  --ne-file-picker-card-padding-vertical: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-file-picker-card-gap: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-file-picker-card-sizing-icon: var(--ne-ref-sizing-06, 1.5em);
  --ne-file-picker-card-color-background: var(--ne-ref-color-white, #ffffff);
  --ne-file-picker-card-color-border: var(--ne-ref-color-grey-10, #E2E3E4);
  --ne-file-picker-card-color-text-file-name: var(--ne-ref-color-grey-90, #161718);
  --ne-file-picker-card-color-text-subtext: var(--ne-ref-color-grey-60, #575C61);
  --ne-file-picker-card-border-width: var(--ne-ref-border-width-small, 1px);
  --ne-file-picker-card-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-file-picker-card-font-size-file-name: var(--ne-ref-font-size-04, 0.875em);
  --ne-file-picker-card-font-size-subtext: var(--ne-ref-font-size-02, 0.75em);
  --ne-file-picker-card-border-radius: var(--ne-ref-border-radius-medium, .25em);
  --ne-file-picker-card-line-height: var(--ne-ref-line-height-condensed, 1.25em);
}
`,pa=[T.iv`
  .file-card-area {
    position: relative;
    box-sizing: border-box;
    display: grid;
    border: var(--ne-file-picker-card-border-width) solid
      var(--ne-file-picker-card-color-border);
    border-radius: var(--ne-file-picker-card-border-radius);
    padding: var(--ne-file-picker-card-padding-vertical)
      var(--ne-file-picker-card-padding-horizontal);
    background-color: var(--ne-file-picker-card-color-background);
  }

  .content {
    align-self: stretch;
    display: flex;
    gap: var(--ne-file-picker-card-gap);
    align-items: start;
    justify-content: center;
    font-family: var(--ne-file-picker-card-font-family);
    font-size: var(--ne-file-picker-card-font-size-file-name);
    color: var(--ne-file-picker-color-label);
  }

  .text-content {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    line-height: var(--ne-file-picker-card-line-height);
  }

  .file-icon {
    width: var(--ne-file-picker-card-sizing-icon);
    height: var(--ne-file-picker-card-sizing-icon);
    padding: 1px calc(var(--ne-file-picker-card-gap) / 2);
  }

  .delete-button {
    display: flex;
    height: fit-content;
    width: fit-content;
    align-items: center;
    justify-content: center;
    margin: 0 auto;
    cursor: pointer;
  }

  .btn {
    background-color: inherit;
    border: none;
    font-size: var(--ne-file-picker-card-sizing-icon);
    cursor: inherit;
  }

  ne-icon {
    display: inline-block;
    color: var(--ne-file-picker-card-color-text-file-name);
  }

  .delete-icon {
    cursor: pointer;
    width: 12px;
    height: 16px;
  }

  .sub-text {
    display: inline-flex;
    font-size: var(--ne-file-picker-card-font-size-subtext);
    color: var(--ne-file-picker-card-color-text-subtext);
    gap: calc(var(--ne-file-picker-card-gap) * 2);
  }
`,mr,ha],fa=" file",ga=["B","KB","MB","GB","TB"];let va=class extends T.oi{constructor(){super(...arguments),this.fileName="",this.fileSize=0,this.handleClick=e=>{if(xo(this,"ne-click",{composed:!0,bubbles:!0}),this.onDelete)this.onDelete(e,this.id);else{const e=document.querySelector("ne-file-card");e?.style?.setProperty("display","none")}}}static get styles(){return pa}_handleClick(e){this.handleClick(e)}render(){let e=`${this.fileName.slice(this.fileName.lastIndexOf(".")+1,this.fileName.length)}`;const t=e.length+5>10?this.fileName:this.fileName.split(`.${e}`)[0];e=e.length+5>10?"Document":e.toUpperCase()+fa;const r=(e=>{const t=0===e?0:Math.floor(Math.log(e)/Math.log(1024));return`${(e/1024**t).toFixed(2)} ${ga[t]}`})(this.fileSize);return T.dy` <div class="file-card-area">
      <div class="content">
        <div class="file-icon">
          ${zo({typeAsHtml:ua.file})}
        </div>
        <div class="text-content">
          <label class="file-card-label">${t}</label>
          <div class="sub-text">
            <label class="file-fileFormat">${e}</label>
            <label class="file-size">${r}</label>
          </div>
        </div>
        <div class="delete-button">
          <button
            class="btn"
            @click=${this._handleClick}
            id="${this.id}-delete button"
            aria-label="delete button"
          >
            ${zo({typeAsHtml:da.trash,className:"delete-icon"})}
          </button>
        </div>
      </div>
    </div>`}};br([O({type:String,reflect:!0})],va.prototype,"fileName",void 0),br([O({type:Number,reflect:!0})],va.prototype,"fileSize",void 0),br([O()],va.prototype,"onDelete",void 0),va=br([P("ne-file-card")],va);var ba=r(6941);const ma=T.iv`
  * {
  --ne-file-picker-sizing-icon: var(--ne-ref-sizing-08, 2em);
  --ne-file-picker-sizing-height: var(--ne-ref-sizing-14, 6em);
  --ne-file-picker-message-padding: var(--ne-ref-spacing-medium, 1em);
  --ne-file-picker-message-gap: var(--ne-ref-spacing-medium, 1em);
  --ne-file-picker-padding: var(--ne-ref-spacing-medium, 1em);
  --ne-file-picker-color-background-default: var(--ne-ref-color-white, #ffffff);
  --ne-file-picker-color-background-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-file-picker-color-label: var(--ne-ref-color-grey-60, #575C61);
  --ne-file-picker-color-border-default: var(--ne-ref-color-grey40, #898F94);
  --ne-file-picker-color-border-warning: var(--ne-ref-color-yellow-50, #FFCF1A);
  --ne-file-picker-color-border-error: var(--ne-ref-color-red-50, #E60000);
  --ne-file-picker-border-width: var(--ne-ref-border-width-small, 1px);
  --ne-file-picker-border-radius: var(--ne-ref-border-radius-medium, .25em);
  --ne-file-picker-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-file-picker-font-size: var(--ne-ref-font-size-04, 0.875em);
  --ne-file-picker-gap: var(--ne-ref-spacing-medium, 1em);
}
`,ya=[T.iv`
  .drag-file-area {
    position: relative;
    box-sizing: border-box;
    border: var(--ne-file-picker-border-width) dashed
      var(--ne-file-picker-color-border-default);
    overflow: hidden;
    border-radius: var(--ne-file-picker-border-radius);
    padding: calc(var(--ne-file-picker-padding) / 2);
    min-height: 96px;
  }

  .drag-file-area.dragging-over-area {
    background-color: var(--ne-file-picker-color-background-hover);
    height: 96px;
    display: grid;
    padding: 0 calc(var(--ne-file-picker-padding) / 2);
  }

  .form-container {
    position: relative;
    box-sizing: border-box;
    display: grid;
    width: 100%;
    height: 100%;
  }

  .file-picker-container {
    align-self: stretch;
    display: flex;
    text-align: center;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    margin: calc(var(--ne-file-picker-padding) / 2);
  }

  .upload-files-container {
    position: relative;
    display: grid;
    width: 100%;
    flex-direction: column;
    gap: var(--ne-file-picker-padding);
  }

  .file-picker-container .upload-files-container ne-file-card:last-child {
    margin-bottom: var(--ne-file-picker-padding);
  }

  .file-picker-message {
    width: fit-content;
    height: fit-content;
    padding: var(--ne-file-picker-message-padding);
    display: inline-flex;
    gap: var(--ne-file-picker-message-gap);
    align-items: center;
    justify-content: center;
    font-family: var(--ne-file-picker-font-family);
    font-size: var(--ne-file-picker-font-size);
    color: var(--ne-file-picker-color-label);
  }

  #default-file-input {
    opacity: 0;
    display: none;
    position: absolute;
    z-index: -1;
    left: 0;
    top: 0;
    width: 0;
    height: 0;
    visibility: hidden;
  }
`,mr,ma],Aa=[T.iv`
  .file-picker-container {
    position: inherit;
    align-self: stretch;
    display: flex;
    text-align: center;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    margin: calc(var(--ne-file-picker-padding) / 2);
  }

  .file-picker-message {
    width: fit-content;
    height: fit-content;
    padding: var(--ne-file-picker-message-padding);
    display: inline-flex;
    gap: var(--ne-file-picker-message-gap);
    align-items: center;
    justify-content: center;
    font-family: var(--ne-file-picker-font-family);
    font-size: var(--ne-file-picker-font-size);
    color: var(--ne-file-picker-color-label);
  }

  #default-file-input {
    opacity: 0;
    position: absolute;
    z-index: -1;
    left: 0;
    top: 0;
    width: 0;
    height: 0;
  }

  .dropzone-icon-container {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: var(--ne-file-picker-sizing-icon);
    height: var(--ne-file-picker-sizing-icon);
  }

  .dropzone-icon-container svg {
    width: 100%;
    height: var(--ne-file-picker-sizing-icon);
  }
`,mr,ma];let wa=class extends T.oi{static get styles(){return Aa}static get properties(){return{singleFile:{type:Boolean}}}constructor(){super(),this.singleFile=!1,this.singleFile=!1}render(){const e=this.singleFile?"file":"files";return T.dy` <div class="file-picker-container">
      <div class="file-picker-message">
        <div class="dropzone-icon-container dropzone-icon">
          ${zo({typeAsHtml:ba.dropzone})}
        </div>
        <label
          draggable="true"
          id="${this.id}-dropzone-label"
          for="default-file-input"
          aria-label="Drag ${e} here"
        >
          Drag ${e} here...
        </label>
        <slot>
          <input
            tabindex="-1"
            @input="${this.handleChange}"
            type="file"
            id="default-file-input"
            ?multiple="${!this.singleFile}"
          />
        </slot>
      </div>
    </div>`}};br([O()],wa.prototype,"handleChange",void 0),br([O({type:Boolean})],wa.prototype,"singleFile",void 0),wa=br([P("ne-file-dropzone")],wa);let xa=class extends(wo(T.oi)){static get scopedElements(){return{"ne-file-dropzone":wa,"ne-button":Lo,"ne-file-card":va}}get filePickerCards(){return this._filePickerCards}set filePickerCards(e){const t=this._filePickerCards;this._filePickerCards=e,this.requestUpdate("filePickerCards",t)}get dragover(){return this._dragover}set dragover(e){const t=this._dragover;this._dragover=e,this.requestUpdate("dragover",t)}static get styles(){return ya}static get properties(){return{filePickerCards:{type:Array},singleFile:{type:Boolean},dragover:{type:Boolean},accepts:{type:String}}}constructor(){super(),this.singleFile=!1,this._filePickerCards=[],this._dragover=!1,this._inputRef=Xi(),this.preventDefaults=e=>{xo(this,"ne-change",{composed:!0,bubbles:!0}),e.preventDefault(),e.stopPropagation()},this.handleClick=()=>{xo(this,"ne-click",{composed:!0,bubbles:!0})},this._handleChange=async e=>{const t=e?.target?.files;await this.getFiles(t)},this.onDrop=async e=>{if(e&&"drop"===e.type&&e.dataTransfer){const{files:t}=e.dataTransfer;await this.getFiles(t)}xo(this,"ne-drop",{composed:!0,bubbles:!0,detail:{value:e.target.value,data:e.target.files,originalEvent:e}}),e.stopImmediatePropagation(),e.preventDefault(),this.dragover=!1},this.onDragOver=()=>{this.dragover=!0},this.onDragOverEnd=()=>{this.dragover=!1},this.filePickerCards=[],this.dragover=!1}connectedCallback(){super.connectedCallback(),["dragover","dragleave","drop"].forEach((e=>{this.addEventListener(e,this.preventDefaults,!1)})),["dragenter","dragover"].forEach((e=>{this.addEventListener(e,this.onDragOver,!1)})),["dragleave","drop"].forEach((e=>{this.addEventListener(e,this.onDragOverEnd,!1)})),this.addEventListener("drop",this.onDrop,!1)}disconnectedCallback(){["dragover","dragleave","drop"].forEach((e=>{this.removeEventListener(e,this.preventDefaults,!1)})),["dragenter","dragover"].forEach((e=>{this.removeEventListener(e,this.onDragOver,!1)})),["dragleave","drop"].forEach((e=>{this.removeEventListener(e,this.onDragOverEnd,!1)})),this.removeEventListener("drop",this.onDrop,!1),super.disconnectedCallback()}_handleClick(){const e=this._inputRef.value;e?.click(),this.handleClick()}async getFiles(e){if(e){const t=this.filePickerCards;let r=0;this.filePickerCards.length>0&&(r=this.filePickerCards.length);let o=!1;Array.from(e).forEach(((n,i)=>{if(!o){const a=n;t.push({id:String(0!==r?i+r:i),fileName:a.name,fileSize:a.size}),this.singleFile&&e.length>1&&(o=!0)}})),this.filePickerCards=t,this.onChange&&this.onChange(e)}this.requestUpdate()}async onDelete(e,t,r){xo(this,"ne-click",{composed:!0,bubbles:!0}),this.filePickerCards=r.filter((e=>e.id!==t)),this.onChange&&this.onChange(this.filePickerCards),this.requestUpdate()}renderForm(e){const t=this.singleFile?"file":"files";return this.dragover?T.dy` <div class="file-picker-container">
      <ne-file-dropzone
        id="${this.id}-dropzone"
        ?singleFile="${this.singleFile}"
        .handleChange="${this._handleChange}"
      ></ne-file-dropzone>
    </div>`:T.dy` <form class="form-container" enctype="multipart/form-data">
        <div class="file-picker-container">
          ${e}
          <div class="file-picker-message">
            <input
              ${ta(this._inputRef)}
              @input="${this._handleChange}"
              type="file"
              ?multiple="${!this.singleFile}"
              tabindex="-1"
              id="default-file-input"
              name="select-file-input"
              accept="${this.accepts}"
            />
            <label
              draggable="true"
              id="Select ${t}"
              for="${this.id}-button"
              aria-label="Drag ${t} here"
            >
              Drag ${t} here or
            </label>
            <ne-button
              id="${this.id}-button"
              variant="secondary"
              @click=${this._handleClick}
              ne-aria-label="Select ${t}"
              tabindex="0"
              >Select ${t}
            </ne-button>
          </div>
        </div>
      </form>`}render(){const e=[],t=[];if(this.filePickerCards){for(const t of this.filePickerCards)e.push(T.dy` <ne-file-card
          .id=${t.id}
          .fileName=${t.fileName}
          .fileSize="${Fo(t.fileSize)}"
          .onDelete="${(e,t)=>this.onDelete(e,t,this.filePickerCards)}"
        ></ne-file-card>`);e&&t.push(T.dy` <div class="upload-files-container">${e}</div>`)}return this.singleFile&&1===e.length?T.dy`${t}`:T.dy`
          <div
            class=${yr({"drag-file-area":!0,"dragging-over-area":this.dragover})}
          >
            ${this.renderForm(t)}
          </div>
        `}};br([O()],xa.prototype,"onChange",void 0),br([O({type:Boolean})],xa.prototype,"singleFile",void 0),br([O({type:String})],xa.prototype,"accepts",void 0),br([O({type:Array,reflect:!0})],xa.prototype,"filePickerCards",null),xa=br([P("ne-file-picker")],xa);const ka=Wt(class extends Jt{constructor(e){if(super(e),e.type!==Zt&&e.type!==Ut&&e.type!==Kt)throw Error("The `live` directive is not allowed on child or event bindings");if(!Vt(e))throw Error("`live` bindings can only contain a single expression")}render(e){return e}update(e,[t]){if(t===It.Jb||t===It.Ld)return t;const r=e.element,o=e.name;if(e.type===Zt){if(t===r[o])return It.Jb}else if(e.type===Kt){if(!!t===r.hasAttribute(o))return It.Jb}else if(e.type===Ut&&r.getAttribute(o)===t+"")return It.Jb;return((e,t=Ht)=>{e._$AH=t})(e),t}});var Ca=r(4754);const _a=[T.iv`
  * {
  --ne-input-border-radius-default: var(--ne-ref-border-radius-medium, .25em);
  --ne-input-border-radius-with-help-message-top: var(--ne-ref-border-radius-medium, .25em);
  --ne-input-border-radius-with-help-message-bottom: var(--ne-ref-border-radius-none, 0);
  --ne-input-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-input-font-size: var(--ne-ref-font-size-04, 0.875em);
  --ne-input-gap: var(--ne-ref-spacing-xx-small, 0.25em);
  --ne-input-padding-horizontal: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-input-padding-vertical: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-input-color-background-active: var(--ne-ref-color-white, #ffffff);
  --ne-input-color-background-focus: var(--ne-ref-color-white, #ffffff);
  --ne-input-color-background-inactive: var(--ne-ref-color-white, #ffffff);
  --ne-input-color-background-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-input-color-background-error: var(--ne-ref-color-white, #ffffff);
  --ne-input-color-background-warning: var(--ne-ref-color-white, #ffffff);
  --ne-input-color-background-default: var(--ne-ref-color-white, #ffffff);
  --ne-input-color-border-active: var(--ne-ref-color-blue-60, #006BD6);
  --ne-input-color-border-inactive: var(--ne-ref-color-grey40, #898F94);
  --ne-input-color-border-focus: var(--ne-ref-color-blue-20, #A3D1FF);
  --ne-input-color-border-warning: var(--ne-ref-color-yellow-50, #FFCF1A);
  --ne-input-color-border-error: var(--ne-ref-color-red-50, #E60000);
  --ne-input-color-border-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-input-color-icon-active: var(--ne-ref-color-grey-90, #161718);
  --ne-input-color-icon-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-input-color-text-placeholder: var(--ne-ref-color-grey-50, #6D7379);
  --ne-input-color-text-default: var(--ne-ref-color-grey-90, #161718);
  --ne-input-color-text-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-input-border-width-default: var(--ne-ref-border-width-small, 1px);
  --ne-input-border-width-focus: var(--ne-ref-border-width-large, 4px);
  --ne-input-sizing-icon: var(--ne-ref-sizing-04, 1em);
  --ne-input-content-gap: var(--ne-ref-spacing-x-small, 0.5em);
}
`,T.iv`
  .container {
    display: flex;
    align-items: center;
    position: relative;
    padding: 0;
    width: 100%;
  }

  input {
    width: 100%;
    padding: var(--ne-input-padding-vertical) var(--ne-input-padding-horizontal)
      var(--ne-input-padding-vertical) var(--ne-input-padding-horizontal);
    gap: var(--ne-input-content-gap);
    font-family: var(--ne-input-font-family);
    font-size: var(--ne-input-font-size);
    border: var(--ne-input-border-width-default) solid
      var(--ne-input-color-border-inactive);
    border-radius: var(--ne-input-border-radius-default);
    background-color: var(--ne-input-color-background-default);
    box-sizing: border-box;
    outline: none;
    flex-grow: 1;
  }

  .show-password-container {
    margin-top: var(--ne-input-content-gap);
  }

  .has-left-icon input {
    padding-left: 25px;
    padding-right: 25px;
  }

  input::placeholder {
    color: var(--ne-input-color-text-placeholder);
  }

  input:active {
    background-color: var(--ne-input-color-background-active);
    border: var(--ne-input-border-width-default) solid
      var(--ne-input-color-border-active);
  }

  input:disabled {
    color: var(--ne-input-color-text-disabled);
    background-color: var(--ne-input-color-background-disabled);
    border: var(--ne-input-border-width-default) solid
      var(--ne-input-color-border-disabled);
  }

  input:focus {
    background-color: var(--ne-input-color-background-inactive);
    outline: var(--ne-input-border-width-focus) solid
      var(--ne-input-color-border-focus);
    border-radius: var(--ne-input-border-radius-default);
    border: var(--ne-input-border-width-default) solid
      var(--ne-input-color-background-inactive);
  }

  input.warning {
    border: var(--ne-input-border-width-default) solid
      var(--ne-input-color-border-warning);
    border-radius: var(--ne-input-border-radius-with-help-message-top)
      var(--ne-input-border-radius-with-help-message-top)
      var(--ne-input-border-radius-with-help-message-bottom)
      var(--ne-input-border-radius-with-help-message-bottom);
  }

  input.error {
    border: var(--ne-input-border-width-default) solid
      var(--ne-input-color-border-error);
    border-radius: var(--ne-input-border-radius-with-help-message-top)
      var(--ne-input-border-radius-with-help-message-top)
      var(--ne-input-border-radius-with-help-message-bottom)
      var(--ne-input-border-radius-with-help-message-bottom);
  }

  input.error:focus,
  input.warning:focus {
    border-color: transparent;
    outline: var(--ne-input-border-width-focus) solid
      var(--ne-input-color-border-focus);
    border-radius: var(--ne-input-border-radius-default);
  }

  input[readonly] {
    border: none;
    outline: none;
  }

  .message-container.warning {
    border: var(--ne-input-border-width-default) solid
      var(--ne-input-color-border-warning);
    box-sizing: border-box;
  }

  .message-container.error {
    border: var(--ne-input-border-width-default) solid
      var(--ne-input-color-border-error);
    box-sizing: border-box;
  }

  .left-icon {
    width: var(--ne-icon-size-default);
    position: absolute;
    padding-left: 5px;
    cursor: unset;
    flex-shrink: 0;
  }

  .clear-button {
    position: absolute;
    cursor: pointer;
    right: 0;
    top: 0;
    height: 25px;
    width: 25px;
    background-color: transparent;
    border: none;
    outline: none;
    margin: 4px 2px;
    transition: all 0.2s ease-in-out 0s;
  }

  .clear-button-icon {
    cursor: pointer;
  }
`,Li,oa,zi,Ei,mr];let $a=class extends Si{constructor(){super(...arguments),this.disabled=!1,this.readonly=!1,this.required=!1,this.type="text",this.ariaLabel="",this.ariaLabelledby="",this.value="",this.reset=!1,this.passwordWithVisibilityLabel="Show password",this._handleInput=e=>{const{value:t}=e.target;xo(this,"ne-input",{detail:{value:t,data:e.data}}),this.value=t},this._handleClickClear=()=>{this.value=""}}static get styles(){return _a}willUpdate(e){e.has("type")&&this._type&&(this._type=void 0)}_toggleShowPassword(e){const t=e.target.checked;xo(this,"ne-change",{composed:!0,bubbles:!0}),this._type=t?"text":"password"}_inputElement(){return T.dy`<input
      type=${"password"===this.type&&this._type?this._type:this.type}
      ?disabled=${this.disabled}
      ?readonly=${this.readonly}
      ?required=${this.required}
      placeholder=${Fo(this.placeholder)}
      aria-label=${this.ariaLabel||T.Ld}
      aria-labelledby=${this.ariaLabelledby||T.Ld}
      .value=${ka(this.value)}
      @input=${this._handleInput}
      class=${yr({error:this.validationState===$i.error,warning:this.validationState===$i.warning})}
    />`}render(){const e="password"===this.type;return T.dy` <div>
      ${this.renderWithValidation(T.dy` <div
        class=${yr({container:!0,"has-left-icon":void 0!==this.leftIconType})}
      >
        <div class=${void 0!==this.leftIconType?"left-icon":"hidden"}>
          ${zo({type:this.leftIconType})}
        </div>
        ${this._inputElement()}
        ${ra(this.reset,(()=>T.dy` <button
            id="clear-button"
            type="button"
            class=${this.value.length>0?"clear-button":"hidden"}
            @click=${this._handleClickClear}
            ?disabled=${this.disabled}
            aria-label="clear-button"
          >
            ${zo({typeAsHtml:Ca.closeDefault,className:"clear-button-icon"})}
          </button>`))}
      </div>`)}
      ${e?T.dy`<div class="show-password-container">
            <ne-checkbox
              text="${this.passwordWithVisibilityLabel}"
              @click="${e=>this._toggleShowPassword(e)}"
            >
            </ne-checkbox>
          </div>`:T.Ld}
    </div>`}};br([O({type:Boolean,reflect:!0})],$a.prototype,"disabled",void 0),br([O({type:Boolean,reflect:!0})],$a.prototype,"readonly",void 0),br([O({type:Boolean,reflect:!0})],$a.prototype,"required",void 0),br([O({type:String})],$a.prototype,"placeholder",void 0),br([O({reflect:!0,attribute:"type",type:String})],$a.prototype,"type",void 0),br([O({type:String,attribute:"ne-aria-label"})],$a.prototype,"ariaLabel",void 0),br([O({type:String,attribute:"ne-aria-labelledby"})],$a.prototype,"ariaLabelledby",void 0),br([O({type:String,reflect:!0})],$a.prototype,"value",void 0),br([O({type:String,attribute:"left-icon",reflect:!0})],$a.prototype,"leftIconType",void 0),br([O({type:Boolean,reflect:!0})],$a.prototype,"reset",void 0),br([O({type:String,reflect:!0})],$a.prototype,"passwordWithVisibilityLabel",void 0),br([N()],$a.prototype,"_type",void 0),$a=br([P("ne-input")],$a);const Sa=e=>e.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),za=[T.iv`
  * {
  --ne-lookup-field-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-lookup-field-font-size: var(--ne-ref-font-size-04, 0.875em);
  --ne-lookup-field-color-text-placeholder: var(--ne-ref-color-grey-50, #6D7379);
  --ne-lookup-field-color-text-default: var(--ne-ref-color-grey-90, #161718);
  --ne-lookup-field-color-text-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-lookup-field-color-background-default: var(--ne-ref-color-white, #ffffff);
  --ne-lookup-field-color-background-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-lookup-field-color-icon: var(--ne-ref-color-grey-90, #161718);
  --ne-lookup-field-color-border-default: var(--ne-ref-color-grey40, #898F94);
  --ne-lookup-field-color-border-active: var(--ne-ref-color-blue-60, #006BD6);
  --ne-lookup-field-color-border-focus: var(--ne-ref-color-blue-20, #A3D1FF);
  --ne-lookup-field-color-border-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-lookup-field-sizing-icon: var(--ne-ref-sizing-04, 1em);
  --ne-lookup-field-padding-vertical: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-lookup-field-padding-horizontal: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-lookup-field-content-gap: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-lookup-field-border-radius-default: var(--ne-ref-border-radius-medium, .25em);
  --ne-lookup-field-border-radius-active-top: var(--ne-ref-border-radius-medium, .25em);
  --ne-lookup-field-border-radius-active-bottom: var(--ne-ref-border-radius-none, 0);
  --ne-lookup-field-border-width-default: var(--ne-ref-border-width-small, 1px);
  --ne-lookup-field-border-width-focus: var(--ne-ref-border-width-large, 4px);
  --ne-lookup-field-gap: var(--ne-ref-spacing-xx-small, 0.25em);
  --ne-lookup-field-font-weight-highlight: var(--ne-ref-font-weight-bold, Bold);
}
`,mr,T.iv`
  .container {
    align-items: center;
    position: relative;
    padding: 0;
    width: 100%;
  }

  .wrapper {
    width: 100%;
  }

  input {
    width: 100%;
    padding: var(--ne-lookup-field-padding-vertical)
      var(--ne-lookup-field-padding-horizontal)
      var(--ne-lookup-field-padding-vertical)
      var(--ne-lookup-field-padding-horizontal);
    gap: var(--ne-lookup-field-content-gap);
    border: var(--ne-lookup-field-border-width-default) solid
      var(--ne-lookup-field-color-border-default);
    border-radius: var(--ne-lookup-field-border-radius-default);
    background-color: var(--ne-lookup-field-color-background-default);
    box-sizing: border-box;
    outline: none;
    flex-grow: 1;
    font-family: var(--ne-lookup-field-font-family);
    font-size: var(--ne-lookup-field-font-size);
    color: var(--ne-lookup-field-color-text-default);
  }

  input.has-icon {
    padding-right: 2em;
  }

  .state-indicator.disabled {
    background-color: var(--ne-lookup-field-color-background-disabled);
  }

  input:focus {
    outline: var(--ne-lookup-field-border-width-focus) solid
      var(--ne-lookup-field-color-border-focus);
    border: 1px solid transparent;
  }

  input.active,
  input.active:focus {
    outline: none;
    border: var(--ne-lookup-field-border-width-default) solid
      var(--ne-lookup-field-color-border-active);
    border-radius: var(--ne-lookup-field-border-radius-active-top)
      var(--ne-lookup-field-border-radius-active-top)
      var(--ne-lookup-field-border-radius-active-bottom)
      var(--ne-lookup-field-border-radius-active-bottom);
  }

  input.disabled {
    background-color: var(--ne-lookup-field-color-background-disabled);
    border-color: var(--ne-lookup-field-color-border-disabled);
    color: var(--ne-lookup-field-color-text-disabled);
  }

  .icon {
    color: var(--ne-lookup-field-color-icon);
    width: var(--ne-lookup-field-sizing-icon);
    position: absolute;
    top: 0;
    right: 0;
    background-color: transparent;
    border: none;
    outline: none;
    padding: var(--ne-lookup-field-padding-vertical)
      var(--ne-lookup-field-padding-horizontal)
      var(--ne-lookup-field-padding-vertical)
      var(--ne-lookup-field-padding-horizontal);
    cursor: unset;
    flex-shrink: 0;
  }

  .emphasis {
    font-weight: var(--ne-lookup-field-font-weight-highlight);
  }

  .empty-list,
  .datalist,
  .loading {
    position: absolute;
    width: 100%;
    z-index: 1;
  }
`];var Ea,La;let Ta=(Ea=class extends(wo(T.oi)){static get scopedElements(){return{"ne-dropdown-menu-item":Yi,"ne-dropdown-menu":Ji,"ne-icon":Yo}}static get styles(){return za}set dataList(e){const t=this._dataList;this._isLoading=!1,this._dataList=e,this.externalListFilter&&(this._filteredList=e),this.requestUpdate("dataList",t)}get dataList(){return this._dataList}constructor(){super(),this.value="",this.displayValue="",this.disabled=!1,this.readonly=!1,this.externalListFilter=!1,this.ariaLabel="",this.ariaLabelledby="",this.noResultsText="No matches found",this.typeToSearchText="Type to search",this.searchLoadingText="Loading...",this.dropdownVariant="flat",this._expanded=!1,this._isLoading=!1,this._ignoreFocusOut=!1,this._dataList=[],this._filteredList=[],this._input=Xi(),this._searchValue="",this._previousValue="",this.updated=()=>{this._updateDisplayText()},this._updateDisplayText=()=>{this.value&&""!==this.value?this.dataList&&this.dataList.length>0&&(this.displayValue=this.dataList.find((e=>e.value===this.value))?.text):this.displayValue="",this._input.value&&this.displayValue&&(this._input.value.value=this.displayValue)},this._filterList=()=>{if(!this._searchValue)return void(this._filteredList=[]);const e=Sa(this._searchValue),t=new RegExp(e,"gi");this._filteredList=this.dataList.filter((e=>!!e.text.match(t)))},this._onDocumentClick=()=>{this._expanded&&(this._expanded=!1,this._input.value?.value&&this._previousValue?this._input.value.value=this._previousValue:xo(this,"ne-change",{composed:!0,bubbles:!0,detail:{value:this.value}}))},this._onDropDownMouseDown=()=>{this._ignoreFocusOut=!0},this._onMouseDown=e=>{this.disabled||this.readonly||(this._expanded=!0,e.stopPropagation())},this._onInput=e=>{this.disabled||this.readonly||(this.value="",this._searchValue=this._input.value?.value,this.displayValue=this._searchValue,this._expanded=!0,this._isLoading=!0,this.externalListFilter||this._filterList(),xo(this,"ne-input",{detail:{data:e.data,value:this._input.value?.value}}))},this._onFocusOut=()=>{this._ignoreFocusOut||this._onDocumentClick(),this._ignoreFocusOut=!1},this._onListItemClicked=(e,t)=>{this.value=t,this._updateDisplayText(),this._searchValue=this.displayValue,this._previousValue=this.displayValue,xo(this,"ne-change",{composed:!0,bubbles:!0,detail:{value:this.value}}),this._expanded=!1},this._renderInput=()=>T.dy` <input
    class=${yr({"has-icon":void 0!==this.icon,active:this._expanded,disabled:this.disabled})}
    type="text"
    ${ta(this._input)}
    ?readonly=${this.readonly||this.disabled}
    aria-label=${this.ariaLabel||T.Ld}
    aria-labelledby=${this.ariaLabelledby||T.Ld}
    placeholder=${Fo(this.placeholder)}
    @keydown=${La._onKeyDown}
    @input=${this._onInput}
    @mousedown=${this._onMouseDown}
    @click=${La._onClick}
    @focusout=${this._onFocusOut}
  />`,this._renderListItems=()=>T.dy`<div class="datalist">
    <ne-dropdown-menu variant=${this.dropdownVariant}>
      ${this._filteredList.map((e=>T.dy`<ne-dropdown-menu-item
          ne-aria-label=${Fo(e.ariaLabel)}
          @ne-click=${t=>this._onListItemClicked(t,e.value)}
          @mousedown=${this._onDropDownMouseDown}
          ><span>${this._renderWithHighlight(e.text)}</span>
          <span slot="sub-text">${e.subText}</span></ne-dropdown-menu-item
        >`))}
    </ne-dropdown-menu>
  </div>`,this._renderEmptyList=()=>T.dy`<div class="empty-list">
    <ne-dropdown-menu variant=${this.dropdownVariant}>
      <ne-dropdown-menu-item disabled=""
        >${ra(this._searchValue,(()=>this.noResultsText),(()=>this.typeToSearchText))}</ne-dropdown-menu-item
      >
    </ne-dropdown-menu>
  </div>`,this._renderLoadingIndicator=()=>T.dy`<div class="loading">
    <ne-dropdown-menu variant=${this.dropdownVariant}>
      <ne-dropdown-menu-item disabled=""
        >${this.searchLoadingText}</ne-dropdown-menu-item
      >
    </ne-dropdown-menu>
  </div>`,this._renderWithHighlight=e=>{if(!this._searchValue||!e)return e;const t=Sa(this._searchValue),r=new RegExp(t,"gi"),o=e.match(r),n=e.split(r);if(!o||!n)return e;let i="";for(let e=0;e<n.length-1;e++)i+=`${n[e]}<span class="emphasis">${o[e]}</span>`;return i+=`${n[n.length-1]}`,T.dy`${dr(i)}`},this.render=()=>T.dy`<div class="container">
    <div class="state-indicator">
      ${this._renderInput()}
      <div class=${void 0!==this.icon?"icon":"hidden"}>
        <ne-icon .type=${this.icon}></ne-icon>
      </div>
    </div>
    ${ra(this._expanded&&this._filteredList.length>0,this._renderListItems)}
    ${ra(this._expanded&&0===this._filteredList.length&&!this._isLoading,this._renderEmptyList)}
    ${ra(this._expanded&&0===this._filteredList.length&&this._searchValue&&this._isLoading,this._renderLoadingIndicator)}
  </div>`,document.addEventListener("click",this._onDocumentClick)}disconnectedCallback(){super.disconnectedCallback?.(),document.removeEventListener("click",this._onDocumentClick)}},Ea._onClick=e=>{e.stopPropagation()},Ea._onKeyDown=e=>{e.stopPropagation()},La=Ea);br([O({type:String})],Ta.prototype,"placeholder",void 0),br([O({type:String,attribute:"value"})],Ta.prototype,"value",void 0),br([O({type:String,attribute:"display-value"})],Ta.prototype,"displayValue",void 0),br([O({type:Boolean,reflect:!0})],Ta.prototype,"disabled",void 0),br([O({type:Boolean,reflect:!0})],Ta.prototype,"readonly",void 0),br([O({type:Boolean,attribute:"external-list-filter",reflect:!0})],Ta.prototype,"externalListFilter",void 0),br([O({type:String,attribute:"ne-aria-label",reflect:!0})],Ta.prototype,"ariaLabel",void 0),br([O({type:String,attribute:"ne-aria-labelledby",reflect:!0})],Ta.prototype,"ariaLabelledby",void 0),br([O({type:String,attribute:"icon",reflect:!0})],Ta.prototype,"icon",void 0),br([O({type:Array,reflect:!0})],Ta.prototype,"dataList",null),br([O({type:String,attribute:"no-results-text",reflect:!0})],Ta.prototype,"noResultsText",void 0),br([O({type:String,attribute:"type-to-search-text",reflect:!0})],Ta.prototype,"typeToSearchText",void 0),br([O({type:String,attribute:"search-loading-text",reflect:!0})],Ta.prototype,"searchLoadingText",void 0),br([O({type:String,attribute:"dropdown-variant"})],Ta.prototype,"dropdownVariant",void 0),br([N()],Ta.prototype,"_expanded",void 0),Ta=La=br([P("ne-lookup-field")],Ta);const Pa=T.iv`
  * {
  --ne-panel-header-font-family: var(--ne-ref-font-family-montserrat, Montserrat);
  --ne-panel-header-font-weight: var(--ne-ref-font-weight-semi-bold, SemiBold);
  --ne-panel-header-font-size: var(--ne-ref-font-size-08, 1.5em);
  --ne-panel-header-title: var(--ne-ref-color-nintex-orange, #F56900);
  --ne-panel-color-border: var(--ne-ref-color-grey-10, #E2E3E4);
  --ne-panel-border-radius: var(--ne-ref-border-radius-medium, .25em);
  --ne-panel-border-width: var(--ne-ref-border-width-small, 1px);
  --ne-panel-padding-horizontal: var(--ne-ref-spacing-medium, 1em);
  --ne-panel-padding-vertical: var(--ne-ref-spacing-medium, 1em);
  --ne-panel-gap-vertical: var(--ne-ref-spacing-medium, 1em);
}
`,Da=[T.iv`
  .panel-container {
    position: relative;
    box-sizing: border-box;
    display: grid;
    border-radius: var(--ne-panel-border-radius);
    border: var(--ne-panel-border-width) solid var(--ne-panel-color-border);
    padding: 0 var(--ne-panel-padding-horizontal)
      var(--ne-panel-padding-vertical) var(--ne-panel-padding-horizontal);
    margin: 0;
    background-color: var(--ne-panel-color-background);
  }

  .panel-header {
    border-bottom: 1px solid var(--ne-panel-color-border);
  }

  .header-label {
    font-family: var(--ne-panel-header-font-family);
    font-weight: var(--ne-panel-header-font-weight);
    font-size: var(--ne-panel-header-font-size);
    color: var(--ne-panel-header-title);
  }

  .panel-content {
    font-size: var(--ne-panel-font-size);
    font-family: var(--ne-panel-font-family);
    padding: var(--ne-panel-padding-vertical) var(--ne-panel-padding-horizontal);
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }
`,mr,Pa];let Fa=class extends(wo(T.oi)){constructor(){super(...arguments),this.heading=""}static get scopedElements(){return{"ne-button-set":Do}}static get styles(){return Da}render(){return T.dy` <div class="panel-container">
      <span class="panel-header">
        <ne-button-set>
          <label class="header-label">${this.heading}</label>
        </ne-button-set>
      </span>
      <p class="panel-content">
        <slot></slot>
      </p>
    </div>`}};br([O({type:String})],Fa.prototype,"heading",void 0),Fa=br([P("ne-panel")],Fa);const Oa=T.iv`
  * {
  --ne-progress-bar-sizing-height: var(--ne-ref-sizing-03, 0.75em);
  --ne-progress-bar-spacing-gap: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-progress-bar-color-label: var(--ne-ref-color-grey-60, #575C61);
  --ne-progress-bar-color-optional-text: var(--ne-ref-color-grey-60, #575C61);
  --ne-progress-bar-color-indicator: var(--ne-ref-color-blue-60, #006BD6);
  --ne-progress-bar-color-track: var(--ne-ref-color-grey-20, #C4C7CA);
  --ne-progress-bar-border-width: var(--ne-ref-border-width-small, 1px);
  --ne-progress-bar-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-progress-bar-font-size: var(--ne-ref-font-size-04, 0.875em);
  --ne-progress-bar-border-radius: var(--ne-ref-border-radius-large, 0.5em);
}
`,Na=[T.iv`
  :host {
    contain: content;
    width: 100%;
  }

  .progress-bar-wrapper {
    width: 100%;
    height: var(--ne-progress-bar-sizing-height);
    border-radius: var(--ne-progress-bar-border-radius);
    background-color: var(--ne-progress-bar-color-track);
  }

  .progress,
  .progress-bar-wrapper {
    display: flex;
    overflow: hidden;
  }

  .progress-bar {
    height: var(--ne-progress-bar-sizing-height);
    transition: width 0.6s ease;
    background-color: var(--ne-progress-bar-color-indicator);
    white-space: nowrap;
  }

  .label-top {
    font-size: var(--ne-progress-bar-font-size);
    font-family: var(--ne-progress-bar-font-family);
    color: var(--ne-progress-bar-color-label);
    gap: var(--ne-progress-bar-spacing-gap);
    margin-bottom: 5px;
  }

  .label-bottom {
    font-size: var(--ne-progress-bar-font-size);
    font-family: var(--ne-progress-bar-font-family);
    color: var(--ne-progress-bar-color-optional-text);
    gap: var(--ne-progress-bar-spacing-gap);
    margin-top: 5px;
  }
`,mr,Oa];let Ba=class extends T.oi{constructor(){super(...arguments),this.topLabel="",this.bottomLabel="",this.progress=0}static get styles(){return Na}render(){return T.dy`
      <div id="title" class="label-top">${this.topLabel}</div>
      <div
        role="progressbar"
        aria-valuemin="0"
        aria-valuemax="100"
        aria-valuenow=${this.progress}
        aria-labelledby="title"
        class="progress-bar-wrapper"
      >
        <div
          class="progress-bar"
          style=${$o({width:`${this.progress}%`})}
        ></div>
      </div>
      <div class="label-bottom">${this.bottomLabel}</div>
    `}};br([O({type:String,reflect:!0})],Ba.prototype,"topLabel",void 0),br([O({type:String,reflect:!0})],Ba.prototype,"bottomLabel",void 0),br([O({type:Number,reflect:!0})],Ba.prototype,"progress",void 0),Ba=br([P("ne-progress-bar")],Ba);const Ma=T.iv`
  * {
  --ne-radio-button-gap: var(--ne-ref-spacing-medium, 1em);
  --ne-radio-button-padding-subtext: var(--ne-ref-spacing-x-large, 2em);
  --ne-radio-button-color-background-selected-default: var(--ne-ref-color-blue-60, #006BD6);
  --ne-radio-button-color-background-selected-disabled: var(--ne-ref-color-grey-50, #6D7379);
  --ne-radio-button-color-background-selected-hover: var(--ne-ref-color-blue-70, #0052A3);
  --ne-radio-button-color-background-selected-focus: var(--ne-ref-color-blue-70, #0052A3);
  --ne-radio-button-color-background-unselected-default: var(--ne-ref-color-white, #ffffff);
  --ne-radio-button-color-background-unselected-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-radio-button-color-background-unselected-hover: var(--ne-ref-color-white, #ffffff);
  --ne-radio-button-color-background-unselected-focus: var(--ne-ref-color-white, #ffffff);
  --ne-radio-button-color-mark: var(--ne-ref-color-white, #ffffff);
  --ne-radio-button-color-border-selected-default: var(--ne-ref-color-blue-60, #006BD6);
  --ne-radio-button-color-border-selected-disabled: var(--ne-ref-color-grey-50, #6D7379);
  --ne-radio-button-color-border-selected-hover: var(--ne-ref-color-blue-70, #0052A3);
  --ne-radio-button-color-border-selected-focus: var(--ne-ref-color-blue-20, #A3D1FF);
  --ne-radio-button-color-border-unselected-default: var(--ne-ref-color-grey40, #898F94);
  --ne-radio-button-color-border-unselected-disabled: var(--ne-ref-color-grey-50, #6D7379);
  --ne-radio-button-color-border-unselected-hover: var(--ne-ref-color-blue-70, #0052A3);
  --ne-radio-button-color-border-unselected-focus: var(--ne-ref-color-blue-20, #A3D1FF);
  --ne-radio-button-color-text-enabled-option: var(--ne-ref-color-grey-90, #161718);
  --ne-radio-button-color-text-enabled-subtext: var(--ne-ref-color-grey-60, #575C61);
  --ne-radio-button-color-text-disabled: var(--ne-ref-color-grey-50, #6D7379);
  --ne-radio-button-border-width: var(--ne-ref-border-width-small, 1px);
  --ne-radio-button-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-radio-button-font-size-option: var(--ne-ref-font-size-04, 0.875em);
  --ne-radio-button-font-size-subtext: var(--ne-ref-font-size-02, 0.75em);
  --ne-radio-button-sizing-mark: var(--ne-ref-sizing-02, 0.5em);
  --ne-radio-button-sizing-radio: var(--ne-ref-sizing-04, 1em);
  --ne-radio-button-focus: var(--ne-ref-border-width-large, 4px);
  --ne-radio-button-line-height: var(--ne-ref-line-height-condensed, 1.25em);
}
`,Ra=[T.iv`
  .container {
    position: relative;
    display: flex;
    gap: var(--ne-radio-button-gap);
    min-height: var(--ne-radio-button-line-height);
    font-family: var(--ne-radio-button-font-family);
    line-height: var(--ne-radio-button-line-height);
    align-items: center;
  }

  .content {
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
  }

  .radio-label {
    height: var(--ne-radio-button-line-height);
    position: relative;
    flex-direction: row;
    display: flex;
    align-items: center;
    color: var(--ne-radio-button-color-text-enabled-option);
    font-size: var(--ne-radio-button-font-size-option);
  }

  .sub-text {
    font-size: var(--ne-radio-button-font-size-subtext);
    color: var(--ne-radio-button-color-text-enabled-subtext);
  }

  .radio-content {
    display: grid;
    align-self: baseline;
    align-content: center;
    height: var(--ne-radio-button-line-height);
    width: calc(var(--ne-radio-button-sizing-radio) + 1px);
  }

  .radio-container {
    display: flex;
    vertical-align: middle;
  }

  .container input {
    position: absolute;
    opacity: 0;
    appearance: none;
    left: var(--ne-radio-button-border-width);
    top: calc(
      var(--ne-radio-button-line-height) - var(--ne-radio-button-sizing-radio)
    );
    height: 1px;
  }

  .checkmark {
    position: relative;
    left: 0;
    height: calc(
      var(--ne-radio-button-sizing-radio) -
        calc(2 * var(--ne-radio-button-border-width))
    );
    width: calc(
      var(--ne-radio-button-sizing-radio) -
        calc(2 * var(--ne-radio-button-border-width))
    );
    border-radius: 50%;
    border: var(--ne-radio-button-border-width) solid
      var(--ne-radio-button-color-border-unselected-default);
    background-color: var(
      --ne-radio-button-color-background-unselected-default
    );
  }

  .container input[disabled] ~ .checkmark {
    background-color: var(
      --ne-radio-button-color-background-unselected-disabled
    );
    border: var(--ne-radio-button-border-width) solid
      var(--ne-radio-button-color-border-unselected-disabled);
  }

  .checkmark::after {
    content: '';
    position: absolute;
    display: none;
  }

  .container .checkmark::after {
    top: calc(var(--ne-radio-button-sizing-mark) / 2);
    left: calc(var(--ne-radio-button-sizing-mark) / 2);
    width: var(--ne-radio-button-sizing-mark);
    height: var(--ne-radio-button-sizing-mark);
    border-radius: 50%;
    background-color: var(--ne-radio-button-color-mark);
  }

  .container input[checked] ~ .checkmark::after {
    display: block;
  }

  .container input:focus ~ .checkmark {
    border: var(--ne-radio-button-border-width) solid
      var(--ne-radio-button-color-border-selected-hover);
    outline: 4px solid var(--ne-radio-button-color-border-selected-focus);
  }

  .container input[checked] ~ .checkmark {
    height: var(--ne-radio-button-sizing-radio);
    width: var(--ne-radio-button-sizing-radio);
    background-color: var(--ne-radio-button-color-background-selected-default);
    border: none;
  }

  .container input:not([disabled]):hover ~ .checkmark {
    cursor: pointer;
    border: var(--ne-radio-button-border-width) solid
      var(--ne-radio-button-color-border-selected-hover);
  }

  .container input[checked]:hover ~ .checkmark {
    border: none;
    background-color: var(--ne-radio-button-color-background-selected-hover);
  }

  .container input[disabled]:checked ~ .checkmark {
    background-color: var(--ne-radio-button-color-background-selected-disabled);
    border: none;
    height: var(--ne-radio-button-sizing-radio);
    width: var(--ne-radio-button-sizing-radio);
  }

  .container input[disabled] ~ .content label {
    color: var(--ne-radio-button-color-text-disabled);
  }
`,mr,Ma];let Ia=class extends T.oi{constructor(){super(...arguments),this.disabled=!1,this.checked=!1,this.name="",this.value="",this.subtext="",this.groupName="",this.handleClick=()=>{this.onClick?(xo(this,"ne-click",{composed:!0,bubbles:!0}),this.onClick(this.name)):(xo(this,"ne-click",{composed:!0,bubbles:!0}),this.checked=!this.checked)}}static get styles(){return Ra}_keydownHandler(e){this.keydownHandler?this.keydownHandler(e):"Space"===e.code&&this.handleClick()}render(){const e=this.groupName?`${this.groupName}-${this.id}`:T.Ld;return T.dy`
      <label class="container">
        <div class="radio-content">
          <div class="radio-container">
            <input
                class="input-radio"
                type="radio"
                id="${e||this.id}"
                ?disabled=${this.disabled}
                ?checked="${this.checked}"
                @click="${this.handleClick}"
                name=${this.name}
                @keydown="${this._keydownHandler}"
            >
              <span class="checkmark"
              ></span>
            </input>
          </div>
        </div>
        <div class="content">
          <label class="radio-label" for="input-radio">${this.value}</label>
          ${this.subtext.length>0?T.dy`<label class="sub-text">${this.subtext}</label>`:T.Ld}
        </div>
      </label>`}};br([O({attribute:"disabled",type:Boolean})],Ia.prototype,"disabled",void 0),br([O({attribute:"checked",type:Boolean})],Ia.prototype,"checked",void 0),br([O({type:String,reflect:!0})],Ia.prototype,"name",void 0),br([O({type:String,reflect:!0})],Ia.prototype,"value",void 0),br([O({type:String})],Ia.prototype,"subtext",void 0),br([O({type:String})],Ia.prototype,"groupName",void 0),br([O()],Ia.prototype,"onClick",void 0),br([O()],Ia.prototype,"keydownHandler",void 0),Ia=br([P("ne-radio-button")],Ia);const ja=T.iv`
  * {
  --ne-radio-button-group-gap: var(--ne-ref-spacing-x-small, 0.5em);
}
`,Va=[T.iv`
  .radio-button-group-container {
    height: fit-content;
    width: fit-content;
    margin: var(--ne-radio-button-group-gap) 0;
    display: grid;
    grid-row-gap: var(--ne-radio-button-group-gap);
    font-family: var(--ne-ref-font-family-open-sans, Open Sans);
    color: var(--ne-ref-color-grey-60, #575c61);
    font-size: var(--ne-ref-font-size-04, 0.875em);
    line-height: var(--ne-ref-line-height-small, 1.1875em);
  }

  .radio-button-group {
    display: grid;
    gap: var(--ne-radio-button-group-gap);
  }
`,mr,ja];let Ha=class extends T.oi{constructor(){super(...arguments),this.groupName="",this.label="",this.items=[]}static get styles(){return Va}onClick(e,t){return this.items=t.map((t=>{const r=t;return r.checked=r.name===e,r})),this.handleClick&&this.handleClick(e),e}keydownHandler(e,t,r){let o=t;if("Space"===e.code&&this.onClick(r[o].name,r),"ArrowDown"===e.code){o=t+1,void 0===r[o]&&(o=0);const e=document.querySelector("ne-radio-button-group")?.shadowRoot?.getElementById(r[o].id)?.shadowRoot?.querySelector("input");e?.focus(),this.onClick(r[o].name,r)}if("ArrowUp"===e.code){o=t-1,o<0&&(o=r.length-1);const e=document.querySelector("ne-radio-button-group")?.shadowRoot?.getElementById(r[o].id)?.shadowRoot?.querySelector("input");e?.focus(),this.onClick(r[o].name,r)}}render(){const e=this.items.map(((e,t)=>T.dy` <ne-radio-button
        .keydownHandler="${e=>this.keydownHandler(e,t,this.items)}"
        ?disabled=${e?.disabled}
        ?checked="${e.checked?.valueOf()}"
        id=${e.id}
        groupName=${this.groupName}
        name="${e.name}"
        .onClick="${e=>this.onClick(e,this.items)}"
        value="${e.value}"
        subtext="${Fo(e.subtext)}"
      >
      </ne-radio-button>`));return T.dy` <div
      class="radio-button-group-container"
      title="radio group ${this.label??this.groupName}"
    >
      <label id="${this.id}-label" for=${this.groupName}>
        ${this.label??T.Ld}
      </label>
      <div class="radio-button-group" id=${this.id}>${e}</div>
    </div>`}};br([O({type:String})],Ha.prototype,"groupName",void 0),br([O({type:String})],Ha.prototype,"label",void 0),br([O()],Ha.prototype,"handleClick",void 0),br([N()],Ha.prototype,"items",void 0),Ha=br([P("ne-radio-button-group")],Ha);const Ua=T.iv`
  * {
  --ne-stepper-sizing-circle: var(--ne-ref-sizing-08, 2em);
  --ne-stepper-sizing-icon: var(--ne-ref-sizing-04, 1em);
  --ne-stepper-padding-element: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-stepper-gap: var(--ne-ref-spacing-xx-small, 0.25em);
  --ne-stepper-color-background-default: var(--ne-ref-color-blue-60, #006BD6);
  --ne-stepper-color-background-disabled: var(--ne-ref-color-grey-50, #6D7379);
  --ne-stepper-color-background-hover: var(--ne-ref-color-blue-70, #0052A3);
  --ne-stepper-color-border-default: var(--ne-ref-color-blue-60, #006BD6);
  --ne-stepper-color-border-disabled: var(--ne-ref-color-grey-50, #6D7379);
  --ne-stepper-color-label: var(--ne-ref-color-white, #ffffff);
  --ne-stepper-color-step-text-default: var(--ne-ref-color-grey-90, #161718);
  --ne-stepper-color-step-text-disabled: var(--ne-ref-color-grey-50, #6D7379);
  --ne-stepper-border-width: var(--ne-ref-border-width-medium, 2px);
  --ne-stepper-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-stepper-font-size: var(--ne-ref-font-size-04, 0.875em);
  --ne-stepper-font-weight-step-text-default: var(--ne-ref-font-weight-regular, Regular);
  --ne-stepper-font-weight-step-text-active: var(--ne-ref-font-weight-bold, Bold);
}
`,qa=[Ua,T.iv`
  .step-container {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
  }

  .step-circle-container {
    position: relative;
    width: 100%;
    height: auto;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .stepper-title {
    margin-top: var(--ne-stepper-padding-element);
    font-family: var(--ne-stepper-font-family);
    font-size: var(--ne-stepper-font-size);
    font-weight: var(--ne-stepper-font-weight-step-text-default);
  }

  .stepper-title.disabled {
    color: var(--ne-stepper-color-step-text-disabled);
  }

  .stepper-title.active {
    font-weight: var(--ne-stepper-font-weight-step-text-active);
  }

  .stepper-step {
    background: var(--ne-stepper-color-border-default);
    width: var(--ne-stepper-sizing-circle);
    height: var(--ne-stepper-sizing-circle);
    border-radius: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    color: var(--ne-stepper-color-label);
    font-size: var(--ne-stepper-font-size);
  }

  .stepper-step .ne-icon {
    color: var(--ne-stepper-color-label);
    height: var(--ne-stepper-sizing-icon);
    width: var(--ne-stepper-sizing-icon);
  }

  .stepper-step.disabled {
    background: var(--ne-stepper-color-step-text-disabled);
    pointer-events: none;
  }

  .left-line {
    position: absolute;
    left: 0;
    background: var(--ne-stepper-color-border-default);
    height: var(--ne-stepper-border-width);
    width: 50%;
    z-index: -1;
  }

  .right-line {
    position: absolute;
    right: 0;
    background: var(--ne-stepper-color-border-default);
    height: var(--ne-stepper-border-width);
    width: 50%;
    z-index: -1;
  }

  .stepper-step:focus {
    background: var(--ne-stepper-color-background-hover);
    box-shadow: #a3d1ff 0 0 0 calc(var(--ne-stepper-border-width) * 2);
    outline: none;
  }

  .stepper-step:hover,
  .stepper-step:hover > .left-line,
  .stepper-step:hover > .right-line,
  .stepper-step:focus .left-line,
  .stepper-step:focus .right-line {
    background: var(--ne-stepper-color-background-hover);
  }

  .stepper-step.disabled .left-line,
  .stepper-step.disabled .right-line {
    background: var(--ne-stepper-color-step-text-disabled);
  }
`,mr];let Za=class extends T.oi{constructor(){super(...arguments),this.completed=!1,this.active=!1,this.disabled=!1}static get styles(){return qa}render(){let e=T.Ld,t=T.Ld;return"start"!==this.progressLineType&&"center"!==this.progressLineType||(e=T.dy`<span class="left-line"></span>`),"end"!==this.progressLineType&&"center"!==this.progressLineType||(t=T.dy`<span class="right-line"></span>`),T.dy` <div class="step-container">
      <div class="step-circle-container">
        <div
          tabindex="${this.disabled?"-1":"0"}"
          class=${yr({"stepper-step":!0,disabled:this.disabled})}
        >
          ${e}
          <div>
            ${this.completed?zo({typeAsHtml:Mi.check}):this.index}
          </div>
          ${t}
        </div>
      </div>
      <div
        class=${yr({"stepper-title":!0,disabled:this.disabled,active:this.active})}
      >
        ${this.name}
      </div>
    </div>`}};br([O({attribute:"index",type:String,reflect:!0})],Za.prototype,"index",void 0),br([O({attribute:"name",type:String,reflect:!0})],Za.prototype,"name",void 0),br([O({type:String,attribute:"location",reflect:!0})],Za.prototype,"progressLineType",void 0),br([O({attribute:"completed",type:Boolean,reflect:!0})],Za.prototype,"completed",void 0),br([O({attribute:"active",type:Boolean,reflect:!0})],Za.prototype,"active",void 0),br([O({attribute:"disabled",type:Boolean,reflect:!0})],Za.prototype,"disabled",void 0),Za=br([P("ne-step")],Za);const Ka=[Ua,T.iv`
  ::slotted(*) {
    width: 100%;
  }

  .stepper-container {
    font-family: var(--ne-stepper-font-family);
    position: relative;
    width: 100%;
    height: auto;
    display: flex;
    justify-content: center;
    align-items: center;
  }
`,mr];var Wa;let Ja=((Wa=class extends T.oi{render(){return T.dy` <div class="stepper-container">
      <slot></slot>
    </div>`}}).styles=[Ka,T.iv`
      :host {
        width: 100%;
      }
    `],Wa);Ja=br([P("ne-stepper")],Ja);const Ga=[T.iv`
  * {
  --ne-switch-border-radius: var(--ne-ref-border-radius-xl, 0.75em);
  --ne-switch-color-background-on: var(--ne-ref-color-blue-60, #006BD6);
  --ne-switch-color-background-off: var(--ne-ref-color-grey-60, #575C61);
  --ne-switch-color-background-disabled: var(--ne-ref-color-grey-50, #6D7379);
  --ne-switch-color-handle: var(--ne-ref-color-white, #ffffff);
  --ne-switch-color-icon: var(--ne-ref-color-white, #ffffff);
  --ne-switch-color-border-focus: var(--ne-ref-color-blue-20, #A3D1FF);
  --ne-switch-gap: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-switch-sizing-icon: var(--ne-ref-sizing-04, 1em);
  --ne-switch-sizing-track-height: var(--ne-ref-sizing-06, 1.5em);
  --ne-switch-sizing-track-width: var(--ne-ref-sizing-11, 3em);
  --ne-switch-sizing-handle: var(--ne-ref-sizing-05, 1.25em);
  --ne-switch-border-width-focus: var(--ne-ref-border-width-large, 4px);
}
`,Oo,mr,T.iv`
  .container {
    display: flex;
    align-items: center;
  }

  .switch {
    position: relative;
    display: inline-block;
    width: var(--ne-switch-sizing-track-width);
    height: var(--ne-switch-sizing-track-height);
  }

  .switch:focus-within {
    outline: var(--ne-switch-border-width-focus) solid
      var(--ne-switch-color-border-focus);
    border-radius: var(--ne-switch-border-radius);
  }

  .slider {
    display: flex;
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: var(--ne-switch-color-background-off);
    transition: 0.4s;
    border-radius: var(--ne-switch-border-radius);
  }

  input {
    opacity: 0;
    width: 0;
    height: 0;
  }

  input:focus + .slider {
    box-shadow: 0 0 1px var(--ne-switch-color-background-on);
  }

  input:checked + .slider {
    background-color: var(--ne-switch-color-background-on);
  }

  .slider::before {
    position: absolute;
    content: '';
    height: var(--ne-switch-sizing-handle);
    width: var(--ne-switch-sizing-handle);
    left: 2px;
    bottom: 2px;
    background-color: var(--ne-switch-color-handle);
    transition: 0.4s;
    border-radius: var(--ne-switch-border-radius);
  }

  .slider.checked::before {
    left: 0;
  }

  input:checked + .slider::before {
    transform: translateX(26px);
  }

  .slider.disabled {
    background-color: var(--ne-switch-color-background-disabled);
  }

  input:checked + .slider.disabled {
    background-color: var(--ne-switch-color-background-disabled);
  }

  .icon {
    color: var(--ne-switch-color-icon);
    align-self: center;
    width: var(--ne-switch-sizing-icon);
    margin: var(--ne-switch-gap);
  }

  .state-label {
    font-family: var(--ne-label-font-family);
    color: var(--ne-label-color-title);
    font-size: var(--ne-label-font-size);
    margin-left: var(--ne-label-gap);
  }

  .state-label.left {
    padding-inline-end: var(--ne-switch-gap);
  }

  .state-label.right {
    padding-inline-start: var(--ne-switch-gap);
  }
`];let Ya=class extends T.oi{constructor(){super(...arguments),this._checkboxNode=Xi(),this.checked=!1,this.disabled=!1,this.invertStateLabelPlacement=!1,this.stateLabelVisible=!0,this._onChange=()=>{const{checked:e}=this._checkboxNode.value;this.checked=e,this.disabled||xo(this,"ne-change",{detail:{checked:e,description:this._statusLabelDescription()}})}}static get styles(){return Ga}_statusLabelDescription(){return this.checked?"On":"Off"}render(){const e=this.stateLabelVisible&&this.invertStateLabelPlacement?T.dy`<div class="state-label left">
            ${this._statusLabelDescription()}
          </div>`:null,t=this.stateLabelVisible&&!this.invertStateLabelPlacement?T.dy`<div class="state-label right">
            ${this._statusLabelDescription()}
          </div>`:null;return T.dy`
      <div class="container">
        ${e}
        <label class="switch">
          <input
            id="checkbox"
            type="checkbox"
            aria-label=${this._statusLabelDescription()}
            ${ta(this._checkboxNode)}
            .checked=${this.checked}
            ?disabled=${this.disabled}
            @change=${this._onChange}
          />
          <span
            class=${yr({slider:!0,disabled:this.disabled,checked:this.checked})}
          >
            <div class=${this.checked?"icon":"hidden"}>
              ${zo({type:"check"})}
            </div>
          </span>
        </label>
        ${t}
      </div>
    `}};br([O({type:Boolean,reflect:!0})],Ya.prototype,"checked",void 0),br([O({type:Boolean,reflect:!0})],Ya.prototype,"disabled",void 0),br([O({type:Boolean,reflect:!0})],Ya.prototype,"invertStateLabelPlacement",void 0),br([O({type:Boolean,reflect:!0})],Ya.prototype,"stateLabelVisible",void 0),Ya=br([P("ne-switch")],Ya);const Xa=[T.iv`
  * {
  --ne-textarea-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-textarea-font-size: var(--ne-ref-font-size-04, 0.875em);
  --ne-textarea-padding-horizontal: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-textarea-padding-vertical: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-textarea-color-background-active: var(--ne-ref-color-white, #ffffff);
  --ne-textarea-color-background-focus: var(--ne-ref-color-white, #ffffff);
  --ne-textarea-color-background-inactive: var(--ne-ref-color-white, #ffffff);
  --ne-textarea-color-background-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-textarea-color-background-error: var(--ne-ref-color-white, #ffffff);
  --ne-textarea-color-background-warning: var(--ne-ref-color-white, #ffffff);
  --ne-textarea-color-background-default: var(--ne-ref-color-white, #ffffff);
  --ne-textarea-color-border-active: var(--ne-ref-color-blue-60, #006BD6);
  --ne-textarea-color-border-inactive: var(--ne-ref-color-grey40, #898F94);
  --ne-textarea-color-border-focus: var(--ne-ref-color-blue-20, #A3D1FF);
  --ne-textarea-color-border-warning: var(--ne-ref-color-yellow-50, #FFCF1A);
  --ne-textarea-color-border-error: var(--ne-ref-color-red-50, #E60000);
  --ne-textarea-color-border-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-textarea-color-text-placeholder: var(--ne-ref-color-grey-50, #6D7379);
  --ne-textarea-color-text-default: var(--ne-ref-color-grey-90, #161718);
  --ne-textarea-color-text-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-textarea-border-radius-default: var(--ne-ref-border-radius-medium, .25em);
  --ne-textarea-border-radius-help-message-top: var(--ne-ref-border-radius-medium, .25em);
  --ne-textarea-border-radius-help-message-bottom: var(--ne-ref-border-radius-none, 0);
  --ne-textarea-border-width-default: var(--ne-ref-border-width-small, 1px);
  --ne-textarea-border-width-focus: var(--ne-ref-border-width-large, 4px);
  --ne-textarea-gap: var(--ne-ref-spacing-xx-small, 0.25em);
}
`,T.iv`
  textarea {
    display: flex;
    width: 100%;
    box-sizing: border-box;
    resize: none;
    font-family: var(--ne-textarea-font-family);
    font-size: var(--ne-textarea-font-size);
    color: var(--ne-textarea-color-text-default);
    gap: var(--ne-textarea-gap);
    padding: var(--ne-textarea-padding-vertical)
      var(--ne-textarea-padding-horizontal);
    border-width: 0;
    border-radius: var(--ne-textarea-border-radius-default);
    border: var(--ne-textarea-border-width-default) solid
      var(--ne-textarea-color-border-inactive);
    outline: none;
    background-color: var(--ne-textarea-color-background-default);
  }

  textarea::placeholder {
    color: var(--ne-textarea-color-text-placeholder);
  }

  textarea:active {
    background-color: var(--ne-textarea-color-background-active);
    border: var(--ne-textarea-border-width-default) solid
      var(--ne-textarea-color-border-active);
  }

  textarea:focus {
    background-color: var(--ne-textarea-color-background-focus);
    border: var(--ne-textarea-border-width-default) solid
      var(--ne-textarea-color-background-focus);
    outline: var(--ne-textarea-border-width-focus) solid
      var(--ne-textarea-color-border-focus);
  }

  textarea:disabled {
    color: var(--ne-textarea-color-text-disabled);
    background-color: var(--ne-textarea-color-background-disabled);
  }

  textarea.warning {
    border-radius: var(--ne-textarea-border-radius-help-message-top)
      var(--ne-textarea-border-radius-help-message-top)
      var(--ne-textarea-border-radius-help-message-bottom)
      var(--ne-textarea-border-radius-help-message-bottom);
    border: var(--ne-textarea-border-width-default) solid
      var(--ne-textarea-color-border-warning);
    background-color: var(--ne-textarea-color-background-warning);
  }

  textarea.error {
    border-radius: var(--ne-textarea-border-radius-help-message-top)
      var(--ne-textarea-border-radius-help-message-top)
      var(--ne-textarea-border-radius-help-message-bottom)
      var(--ne-textarea-border-radius-help-message-bottom);
    border: var(--ne-textarea-border-width-default) solid
      var(--ne-textarea-color-border-error);
    background-color: var(--ne-textarea-color-background-error);
  }

  textarea.error:focus,
  textarea.warning:focus {
    border-color: var(--ne-textarea-color-border-active);
    outline: none;
  }

  textarea[readonly] {
    border: none;
    outline: none;
  }

  .message-container.warning {
    border: var(--ne-textarea-border-width-default) solid
      var(--ne-textarea-color-border-warning);
  }

  .message-container.error {
    border: var(--ne-textarea-border-width-default) solid
      var(--ne-textarea-color-border-error);
  }
`,zi,Ei,Li,mr];let Qa=class extends Si{constructor(){super(...arguments),this.disabled=!1,this.readonly=!1,this.required=!1,this.value="",this.ariaLabel="",this.ariaLabelledby="",this.rows=2,this._handleInput=e=>{xo(this,"ne-input",{detail:{value:e.target.value}})}}static get styles(){return Xa}render(){const e=T.dy`
      <textarea
        ?disabled=${this.disabled}
        ?readonly=${this.readonly}
        ?required=${this.required}
        aria-label=${this.ariaLabel||T.Ld}
        aria-labelledby=${this.ariaLabelledby||T.Ld}
        placeholder=${Fo(this.placeholder)}
        rows=${this.rows}
        @input=${this._handleInput}
        .value=${ka(this.value)}
        class=${yr({error:this.validationState===$i.error,warning:this.validationState===$i.warning})}
      ></textarea>
    `;return this.renderWithValidation(e)}};br([O({type:Boolean,reflect:!0})],Qa.prototype,"disabled",void 0),br([O({type:Boolean,reflect:!0})],Qa.prototype,"readonly",void 0),br([O({type:Boolean,reflect:!0})],Qa.prototype,"required",void 0),br([O({type:String})],Qa.prototype,"placeholder",void 0),br([O({type:String})],Qa.prototype,"value",void 0),br([O({type:String,attribute:"ne-aria-label"})],Qa.prototype,"ariaLabel",void 0),br([O({type:String,attribute:"ne-aria-labelledby"})],Qa.prototype,"ariaLabelledby",void 0),br([O({type:Number})],Qa.prototype,"rows",void 0),Qa=br([P("ne-textarea")],Qa);const es=T.iv`
  * {
  --ne-toast-sizing-icon: var(--ne-ref-sizing-04, 1em);
  --ne-toast-sizing-timer-bar-height: var(--ne-ref-sizing-01, 0.25em);
  --ne-toast-padding-horizontal: var(--ne-ref-spacing-medium, 1em);
  --ne-toast-padding-vertical: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-toast-gap: var(--ne-ref-spacing-medium, 1em);
  --ne-toast-color-background-danger: var(--ne-ref-color-red-50, #E60000);
  --ne-toast-color-background-success: var(--ne-ref-color-green-50, #008738);
  --ne-toast-color-background-info: var(--ne-ref-color-blue-60, #006BD6);
  --ne-toast-color-background-warning: var(--ne-ref-color-yellow-50, #FFCF1A);
  --ne-toast-color-label-default: var(--ne-ref-color-white, #ffffff);
  --ne-toast-color-label-warning: var(--ne-ref-color-grey-90, #161718);
  --ne-toast-color-timer-default: var(--ne-ref-color-white, #ffffff);
  --ne-toast-color-timer-warning: var(--ne-ref-color-grey-90, #161718);
  --ne-toast-border-radius-default: var(--ne-ref-border-radius-medium, .25em);
  --ne-toast-border-radius-timer-top: var(--ne-ref-border-radius-none, 0);
  --ne-toast-border-radius-timer-bottom-left: var(--ne-ref-border-radius-medium, .25em);
  --ne-toast-border-radius-timer-bottom-right: var(--ne-ref-border-radius-none, 0);
  --ne-toast-shadow: 0px 0px 8px var(--ne-ref-color-grey-90-20, #16171820);
  --ne-toast-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-toast-font-size: var(--ne-ref-font-size-04, 0.875em);
}
`,ts=[T.iv`
  :host {
    width: 100%;
    box-shadow: var(--ne-ref-shadow-level1);
  }

  .toast-item {
    position: relative;
    display: flex;
    flex-flow: row nowrap;
    justify-content: flex-start;
    align-items: center;
    align-content: center;
    padding: var(--ne-toast-padding-horizontal) var(--ne-toast-padding-vertical);
    box-sizing: border-box;
    border: none;
    border-radius: var(--ne-toast-border-radius-default);
    font-family: var(--ne-toast-font-family);
    font-size: var(--ne-toast-font-size);
    color: var(--ne-toast-color-label-default);
  }

  .timer-bar {
    position: absolute;
    bottom: 0;
    left: 0;
    height: 0.25em;
    border-radius: var(--ne-toast-border-radius-timer-top)
      var(--ne-toast-border-radius-timer-top)
      var(--ne-toast-border-radius-timer-bottom-left)
      var(--ne-toast-border-radius-timer-bottom-right);
    background-color: var(--ne-toast-color-timer-default);
    transition: width 50ms linear;
  }

  .info {
    background-color: var(--ne-toast-color-background-info);
  }

  .success {
    background-color: var(--ne-toast-color-background-success);
  }

  .danger {
    background-color: var(--ne-toast-color-background-danger);
  }

  .warning {
    background-color: var(--ne-toast-color-background-warning);
    color: var(--ne-toast-color-label-warning);
  }

  .warning .timer-bar {
    background-color: var(--ne-toast-color-timer-warning);
  }

  .content {
    flex-grow: 1;
    word-wrap: break-word;
  }

  .banner-alert.closable .content {
    padding-right: 0;
  }

  .icon {
    flex-shrink: 0;
    display: block;
    justify-content: center;
    align-items: center;
    align-content: center;
    box-sizing: border-box;
    background-color: transparent;
  }

  .warning .icon {
    color: var(--ne-ref-color-grey-90);
  }

  .type-icon {
    min-width: var(--ne-toast-sizing-icon);
    max-width: var(--ne-toast-sizing-icon);
    margin: 0 6px;
  }
`,es];let rs=class extends(wo(T.oi)){constructor(){super(...arguments),this.defaultDuration=6e3,this._progressTimer=null,this._progress=100,this.alertType=Di.info,this.duration=this.defaultDuration,this.closable=!1,this.autoClose=!0,this._handleMouseOver=()=>{this._progressTimer&&window.clearTimeout(this._progressTimer),this._progressTimer=null},this._handleMouseOut=()=>{this.autoClose&&this._progress>0&&this._updateProgress()},this._handleBannerAlertNeClose=e=>{e.preventDefault(),e.stopPropagation(),this._close()},this._close=()=>{this._progressTimer&&(window.clearTimeout(this._progressTimer),this._progressTimer=null),this.messageId&&xo(this,"ne-close",{detail:this.messageId})},this._updateProgress=()=>{this._progress-=1,this._progress>0?this._progressTimer=window.setTimeout((()=>this._updateProgress()),this.duration>0?this.duration/100:this.defaultDuration/100):this._close()},this.getTypeIcon=()=>{let e;switch(this.alertType){case Di.info:e=nn;break;case Di.success:e=an;break;case Di.danger:e=on;break;case Di.warning:e=ln}return e}}static get styles(){return ts}static get scopedElements(){return{"ne-icon":Yo}}render(){return T.dy`<div
      role="alert"
      class="${yr({"toast-item":!0,[this.alertType]:!0,closable:this.closable})}"
      @mouseover="${this._handleMouseOver}"
      @mouseout="${this._handleMouseOut}"
      @focus="${this._handleMouseOver}"
      @blur="${this._handleMouseOut}"
    >
      <span class="icon type-icon">${zo({type:this.getTypeIcon()})}</ne-icon></span>
      <div class="content"><slot></slot></div>
      ${this.closable?T.dy`<ne-icon-button
              variant=${this.alertType===Di.warning?"dark":"light"}
              ne-aria-label="close-button"
              icon=${rn}
              @click=${this._handleBannerAlertNeClose}
            ></ne-icon-button>`:""}
      ${this.autoClose?T.dy`<div
              class="timer-bar"
              style=${$o({width:`${this._progress}%`})}
            ></div>`:""}
    </div>`}firstUpdated(){this.autoClose&&this._updateProgress()}};br([N()],rs.prototype,"_progress",void 0),br([O({type:String,reflect:!0})],rs.prototype,"alertType",void 0),br([O({type:String,reflect:!0})],rs.prototype,"messageId",void 0),br([O({type:Number,reflect:!0})],rs.prototype,"duration",void 0),br([O({type:Boolean})],rs.prototype,"closable",void 0),br([O({type:Boolean})],rs.prototype,"autoClose",void 0),rs=br([P("ne-toast-item")],rs);const os=[T.iv`
  .toast-notification {
    position: fixed;
    left: 50%;
    display: flex;
    flex-wrap: nowrap;
    justify-content: flex-start;
    align-items: center;
    align-content: center;
    width: 50vw;
    padding: 3px 4px 4px;
    box-sizing: border-box;
    transform: translateX(-50%);
    z-index: 9999;
  }

  .toast-notification.top-center {
    top: 0;
    flex-direction: column;
  }

  .toast-notification.bottom-center {
    bottom: 0;
    flex-direction: column-reverse;
  }

  .toast-item.hidden {
    display: none;
  }
`];let ns=class extends T.oi{constructor(){super(...arguments),this._toastItems=[],this.position="top-center",this._handleToastItemNeClose=e=>{const t=this._toastItems.findIndex((t=>t.messageId===e.detail));if(t>-1){const e=this._toastItems.slice();e[t].hidden=!0;const r=!e.some((e=>!0!==e.hidden));this._toastItems=r?[]:e}},this.showToast=e=>{const t={...e};t.messageId||(t.messageId=Math.random().toString(36).substring(2,9)),this._toastItems=[...this._toastItems,t]}}static get styles(){return os}render(){return T.dy`<div class="toast-notification ${this.position}">
      ${this._toastItems.map((e=>T.dy`<ne-toast-item
            class="toast-item ${e.hidden?"hidden":""}"
            .alertType=${e["alert-type"]}
            .messageId=${e.messageId}
            .duration=${e.duration}
            .closable=${!0===e.closable}
            .autoClose=${!1!==e.autoClose}
            @ne-close=${this._handleToastItemNeClose}
            >${e.content}</ne-toast-item
          >`))}
    </div>`}};br([N()],ns.prototype,"_toastItems",void 0),br([O({reflect:!0})],ns.prototype,"position",void 0),ns=br([P("ne-toast-notification")],ns);const is=T.iv`
  * {
  --ne-toolbar-font-size: var(--ne-ref-font-size-04, 0.875em);
  --ne-toolbar-padding-horizontal: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-toolbar-padding-vertical: var(--ne-ref-spacing-none, 0);
  --ne-toolbar-gap: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-toolbar-background: var(--ne-ref-color-white, #ffffff);
  --ne-toolbar-shadow: 0px 0px 8px var(--ne-ref-color-grey-90-20, #16171820);
}
`,as=[is,T.iv`
  .toolbar {
    position: relative;
    display: flex;
    flex-flow: row nowrap;
    justify-content: flex-start;
    align-items: center;
    align-content: center;
    gap: var(--ne-toolbar-gap);
    box-sizing: border-box;
    margin: 0;
    padding: var(--ne-toolbar-padding-vertical)
      var(--ne-toolbar-padding-horizontal);
    background-color: var(--ne-toolbar-background);
    box-shadow: 3px 3px 5px rgb(196 199 202 / 50%);
  }

  .toolbar ::slotted(li) {
    display: block;
  }

  .toolbar ::slotted(.right-start) {
    margin-left: auto;
  }
`,mr];let ss=class extends T.oi{constructor(){super(...arguments),this.ariaLabel=""}static get styles(){return as}render(){return T.dy`<div class="toolbar" aria-label=${this.ariaLabel||T.Ld}>
      <slot></slot>
    </div>`}};br([O({attribute:"ne-aria-label",type:String,reflect:!0})],ss.prototype,"ariaLabel",void 0),ss=br([P("ne-toolbar")],ss);const ls=[T.iv`
  * {
  --ne-toolbar-button-padding-horizontal: var(--ne-ref-spacing-medium, 1em);
  --ne-toolbar-button-padding-vertical: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-toolbar-button-gap: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-toolbar-button-color-background-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-toolbar-button-color-border-focus: var(--ne-ref-color-blue-20, #A3D1FF);
  --ne-toolbar-button-color-label-default: var(--ne-ref-color-grey-90, #161718);
  --ne-toolbar-button-color-label-disabled: var(--ne-ref-color-grey-50, #6D7379);
  --ne-toolbar-button-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-toolbar-button-sizing-icon: var(--ne-ref-sizing-04, 1em);
}
`,T.iv`
  .outer-container {
    position: relative;
    width: 100%;
    box-sizing: border-box;
  }

  .toolbar-button {
    position: relative;
    display: flex;
    flex-flow: row nowrap;
    justify-content: flex-start;
    align-items: center;
    align-content: center;
    gap: var(--ne-toolbar-button-gap);
    width: 100%;
    box-sizing: border-box;
    margin: 0;
    padding: calc(var(--ne-toolbar-button-padding-vertical) - 4px)
      calc(var(--ne-toolbar-button-padding-horizontal) - 4px);
    border: 4px solid transparent;
    outline: none;
    background-color: transparent;
    font-family: var(--ne-toolbar-button-font-family);
    font-size: var(--ne-toolbar-font-size);
    color: var(--ne-toolbar-button-color-label-default);
  }

  .toolbar-button:focus {
    border-color: var(--ne-toolbar-button-color-border-focus);
  }

  .toolbar-button:hover,
  .toolbar-button.dropdown-menu-shown {
    background-color: var(--ne-toolbar-button-color-background-hover);
  }

  .toolbar-button:disabled {
    color: var(--ne-toolbar-button-color-label-disabled);
  }

  .dropdown-menu-container {
    position: absolute;
    left: -4px;
    right: initial;
    display: none;
    margin-top: 4px;
    z-index: 1;
  }

  .toolbar-button.dropdown-menu-shown + .dropdown-menu-container {
    display: block;
  }

  .dropdown-menu-container.right-aligned {
    left: initial;
    right: -4px;
  }

  .dropdown-menu-container ::slotted(ul) {
    margin: 0;
    padding: 0;
  }

  .icon {
    height: var(--ne-toolbar-button-sizing-icon);
    width: var(--ne-toolbar-button-sizing-icon);
  }

  .icon.fixed-size {
    align-items: center;
    justify-items: center;
  }
`,is,mr];let cs=class extends(wo(T.oi)){static get scopedElements(){return{"ne-icon":Yo}}static get styles(){return ls}constructor(){super(),this.showDropdownMenu=!1,this.hasDropdownMenu=!1,this.buttonClicked=!1,this.disabled=!1,this.leftIconSize="",this.rightIconSize="",this.ariaLabel="",this._dropdownMenuContainerElemRef=Xi(),this._onClick=()=>{this.buttonClicked=!0,this.disabled||(this.hasDropdownMenu&&(this.showDropdownMenu=!this.showDropdownMenu),xo(this,"ne-click",{composed:!0,bubbles:!1}))},this._onDocumentClick=()=>{this.buttonClicked||(this.showDropdownMenu=!1),this.buttonClicked=!1},this._onDropdownMenuElemChange=()=>{this.hasDropdownMenu=this._slottedDropdownMenuElems.length>0},document.addEventListener("click",this._onDocumentClick)}render(){return T.dy`<div class="outer-container">
      <button
        class=${yr({"toolbar-button":!0,"dropdown-menu-shown":this.showDropdownMenu&&this.hasDropdownMenu})}
        ?disabled=${this.disabled}
        @click=${this._onClick}
        aria-expanded=${Fo(this.hasDropdownMenu?this.showDropdownMenu:void 0)}
        aria-label=${this.ariaLabel||T.Ld}
      >
        ${void 0!==this.leftIconType?T.dy`<ne-icon
              class=${yr({icon:!0,"fixed-size":this.leftIconSize&&""!==this.leftIconSize})}
              type="${this.leftIconType}"
              .fixedSize=${this.leftIconSize}
            ></ne-icon>`:""}
        <span class="button-text"><slot></slot></span>
        ${void 0!==this.rightIconType?T.dy`<ne-icon
              class=${yr({icon:!0,right:!0,"fixed-size":this.rightIconSize&&""!==this.rightIconSize})}
              type="${this.rightIconType}"
              .fixedSize=${this.rightIconSize}
            ></ne-icon>`:""}
      </button>
      <div
        class="dropdown-menu-container"
        ${ta(this._dropdownMenuContainerElemRef)}
      >
        <slot
          name="dropdown-menu"
          @slotchange=${this._onDropdownMenuElemChange}
        ></slot>
      </div>
    </div>`}updated(e){if(e.has("showDropdownMenu")&&this.hasDropdownMenu&&this._dropdownMenuContainerElemRef.value)if(this.showDropdownMenu){this._dropdownMenuContainerElemRef.value.getBoundingClientRect().right>(window.innerWidth||document.documentElement.clientWidth)?this._dropdownMenuContainerElemRef.value.classList.add("right-aligned"):this._dropdownMenuContainerElemRef.value.classList.remove("right-aligned")}else this._dropdownMenuContainerElemRef.value.classList.remove("right-aligned")}disconnectedCallback(){super.disconnectedCallback?.(),document.removeEventListener("click",this._onDocumentClick)}};br([I({slot:"dropdown-menu",flatten:!0})],cs.prototype,"_slottedDropdownMenuElems",void 0),br([N()],cs.prototype,"showDropdownMenu",void 0),br([N()],cs.prototype,"hasDropdownMenu",void 0),br([N()],cs.prototype,"buttonClicked",void 0),br([O({type:Boolean,reflect:!0})],cs.prototype,"disabled",void 0),br([O({type:String,attribute:"left-icon",reflect:!0})],cs.prototype,"leftIconType",void 0),br([O({type:String,attribute:"left-icon-size",reflect:!0})],cs.prototype,"leftIconSize",void 0),br([O({type:String,attribute:"right-icon",reflect:!0})],cs.prototype,"rightIconType",void 0),br([O({type:String,attribute:"right-icon-size",reflect:!0})],cs.prototype,"rightIconSize",void 0),br([O({attribute:"ne-aria-label",type:String,reflect:!0})],cs.prototype,"ariaLabel",void 0),cs=br([P("ne-toolbar-button")],cs);const ds=[T.iv`
  * {
  --ne-tooltip-sizing-width: var(--ne-ref-sizing-16, 16em);
  --ne-tooltip-padding: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-tooltip-color-background: var(--ne-ref-color-white, #ffffff);
  --ne-tooltip-color-text: var(--ne-ref-color-grey-90, #161718);
  --ne-tooltip-color-icon-error: var(--ne-ref-color-red-50, #E60000);
  --ne-tooltip-color-border-error: var(--ne-ref-color-red-50, #E60000);
  --ne-tooltip-color-border-warning: var(--ne-ref-color-yellow-50, #FFCF1A);
  --ne-tooltip-color-border-success: var(--ne-ref-color-green-50, #008738);
  --ne-tooltip-color-border-info: var(--ne-ref-color-blue-60, #006BD6);
  --ne-tooltip-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-tooltip-font-size: var(--ne-ref-font-size-04, 0.875em);
  --ne-tooltip-shadow: 0px 0px 8px var(--ne-ref-color-grey-90-20, #16171820);
  --ne-tooltip-border-radius-default: var(--ne-ref-border-radius-medium, .25em);
  --ne-tooltip-border-width-bar: var(--ne-ref-border-width-large, 4px);
  --ne-tooltip-icon-padding: var(--ne-ref-spacing-x-small, 0.5em);
}
`,T.iv`
  .tooltip {
    position: relative;
  }

  .tooltip-content {
    position: absolute;
    display: none;
    cursor: pointer;
    z-index: 2;
    background-color: var(--ne-tooltip-color-background);
    color: var(--ne-tooltip-color-text);
    padding: var(--ne-tooltip-sizing-padding);
    border-radius: var(--ne-tooltip-border-radius-default);
    box-shadow: var(--ne-tooltip-shadow);
    font-size: var(--ne-tooltip-font-size);
    font-family: var(--ne-tooltip-font-family);
    width: var(--ne-tooltip-sizing-width);
  }

  .show {
    display: inline-block;
  }

  .danger {
    border-left: var(--ne-tooltip-border-width-bar) solid
      var(--ne-tooltip-color-border-error);
  }

  .info {
    border-left: var(--ne-tooltip-border-width-bar) solid
      var(--ne-tooltip-color-border-info);
  }

  .warning {
    border-left: var(--ne-tooltip-border-width-bar) solid
      var(--ne-tooltip-color-border-warning);
  }

  .success {
    border-left: var(--ne-tooltip-border-width-bar) solid
      var(--ne-tooltip-color-border-success);
  }

  .default {
    border-left: var(--ne-tooltip-border-width-bar) solid
      var(--ne-tooltip-color-background);
  }

  /* Placement styles */
  .top {
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    margin-bottom: 4px;
  }

  .bottom {
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    margin-top: 4px;
  }

  .left {
    right: 100%;
    top: 50%;
    transform: translateY(-50%);
    margin-right: 4px;
  }

  .right {
    top: 50%;
    left: 100%;
    transform: translateY(-50%);
    margin-left: 4px;
  }
`,mr];var us;!function(e){e.default="default",e.info="info",e.success="success",e.danger="danger",e.warning="warning"}(us||(us={}));const hs="top";let ps=class extends T.oi{constructor(){super(...arguments),this.variant=us.default,this.placement=hs,this.content="",this._showToolTip=!1}static get styles(){return ds}hideTooltip(){this._showToolTip=!1}showTooltip(){this._showToolTip=!0}render(){return T.dy`<div class="tooltip">
      <slot
        @mouseover="${this.showTooltip}"
        @mouseout="${this.hideTooltip}"
        @focus="${this.showTooltip}"
        @blur="${this.hideTooltip}"
      ></slot>
      <div
        class="${yr({"tooltip-content":!0,show:this._showToolTip,[this.placement]:!0,[this.variant]:!0})}"
      >
        ${this.content}
      </div>
    </div>`}};br([O({type:String,attribute:"type",reflect:!0})],ps.prototype,"variant",void 0),br([O({type:String,reflect:!0})],ps.prototype,"placement",void 0),br([O({type:String,reflect:!0})],ps.prototype,"content",void 0),br([N()],ps.prototype,"_showToolTip",void 0),ps=br([P("ne-tooltip")],ps);const fs=[T.iv`
  * {
  --ne-accordion-sizing-icon: var(--ne-ref-sizing-04, 1em);
  --ne-accordion-padding-header: var(--ne-ref-spacing-medium, 1em);
  --ne-accordion-padding-body: var(--ne-ref-spacing-medium, 1em);
  --ne-accordion-gap: var(--ne-ref-spacing-medium, 1em);
  --ne-accordion-color-background: var(--ne-ref-color-white, #ffffff);
  --ne-accordion-color-header-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-accordion-color-header-default: var(--ne-ref-color-white, #ffffff);
  --ne-accordion-color-title: var(--ne-ref-color-grey-90, #161718);
  --ne-accordion-color-asterisk: var(--ne-ref-color-red-60, #B80000);
  --ne-accordion-color-border: var(--ne-ref-color-grey-10, #E2E3E4);
  --ne-accordion-color-icon: var(--ne-ref-color-grey-90, #161718);
  --ne-accordion-border-width: var(--ne-ref-border-width-small, 1px);
  --ne-accordion-font-family-title: var(--ne-ref-font-family-montserrat, Montserrat);
  --ne-accordion-font-size-title: var(--ne-ref-font-size-06, 1.125em);
  --ne-accordion-content-gap-vertical: var(--ne-ref-spacing-medium, 1em);
}
`,T.iv`
  .accordion-item-container {
    border-bottom: var(--ne-accordion-border-width) solid
      var(--ne-accordion-color-border);
  }

  .accordion-title-container {
    border: none;
    width: 100%;
    font-family: var(--ne-accordion-font-family-title);
    display: flex;
    justify-content: flex-start;
    align-items: center;
    background: var(--ne-accordion-color-header-default);
    padding: var(--ne-accordion-padding-header);
    font-size: var(--ne-accordion-font-size-title);
    color: var(--ne-accordion-color-title);
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .accordion-title-container:hover,
  .accordion-title-container:focus {
    outline: none;
    background: var(--ne-accordion-color-header-hover);
  }

  .accordion-chevron {
    display: flex;
    justify-content: center;
    align-items: center;
    height: var(--ne-accordion-sizing-icon);
    width: var(--ne-accordion-sizing-icon);
    margin-right: var(--ne-accordion-gap);
    transition: all 0.3s ease;
  }

  .accordion-chevron .ne-icon {
    color: var(--ne-accordion-color-icon);
    height: 10px;
    width: 10px;
  }

  .accordion-title-container.open .accordion-chevron {
    transform: rotateZ(90deg);
  }

  .accordion-content-container {
    display: none;
    padding: var(--ne-accordion-padding-body);
    background: var(--ne-accordion-color-background);
  }

  .accordion-content-container.open {
    display: block;
  }
`,mr];let gs=class extends T.oi{constructor(){super(...arguments),this.accordionTitle="",this.open=!1,this.onClick=()=>{xo(this,"ne-click",{composed:!0,bubbles:!0}),this.open=!this.open}}static get styles(){return fs}render(){return T.dy` <div class="accordion-item-container">
      <button
        id="accordionId"
        type="button"
        aria-expanded="${this.open}"
        aria-controls="sect"
        class="${yr({"accordion-title-container":!0,open:this.open})}"
        @click="${this.onClick}"
      >
        <div class="accordion-chevron">
          ${zo({typeAsHtml:Fi.chevronRight})}
        </div>
        <div>${this.accordionTitle}</div>
      </button>
      <div
        id="sect"
        role="region"
        aria-labelledby="accordionId"
        class="${yr({"accordion-content-container":!0,open:this.open})}"
      >
        <slot></slot>
      </div>
    </div>`}};br([O({attribute:"accordion-title",type:String,reflect:!0})],gs.prototype,"accordionTitle",void 0),br([O({attribute:"open",type:Boolean,reflect:!0})],gs.prototype,"open",void 0),gs=br([P("ne-accordion-item")],gs);const vs=(e,t,r)=>{const o={bubbles:!0,cancelable:!1,composed:!0,...r},n=new CustomEvent(t,o);return e.dispatchEvent(n),n},bs=T.iv`
  * {
  --ne-link-gap: var(--ne-ref-spacing-xx-small, 0.25em);
  --ne-link-color-default: var(--ne-ref-color-blue-60, #006BD6);
  --ne-link-color-hover: var(--ne-ref-color-blue-70, #0052A3);
  --ne-link-color-focus: var(--ne-ref-color-blue-70, #0052A3);
  --ne-link-color-disabled: var(--ne-ref-color-grey-50, #6D7379);
  --ne-link-color-border-focus: var(--ne-ref-color-blue-20, #A3D1FF);
  --ne-link-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-link-font-size: var(--ne-ref-font-size-04, 0.875em);
  --ne-link-text-decroration-default: var(--ne-ref-text-decoration-none, none);
  --ne-link-text-decroration-hover: var(--ne-ref-text-decoration-underline, underline);
  --ne-link-text-decroration-focus: var(--ne-ref-text-decoration-underline, underline);
  --ne-link-sizing-icon: var(--ne-ref-sizing-04, 1em);
}
`,ms=[pn,T.iv`
  :host {
    display: inline-grid;
    vertical-align: text-bottom;
  }

  a {
    color: var(--ne-link-color-default);
    font-family: var(--ne-link-font-family);
    text-decoration: var(--ne-link-text-decroration-default);
    outline: none;
    margin: 0;
    padding: 0;
    display: grid;
    grid-template-columns: min-content min-content min-content;
    align-items: center;
    white-space: nowrap;
  }

  a:hover {
    text-decoration: var(--ne-link-text-decroration-hover);
    color: var(--ne-link-color-hover);
  }

  a:focus-visible {
    box-sizing: border-box;
    text-decoration: var(--ne-link-text-decroration-focus);
    outline: 4px solid var(--ne-link-color-border-focus);
    color: var(--ne-link-color-focus);
  }

  a.disabled {
    cursor: default;
    text-decoration: var(--ne-link-text-decroration-default);
    color: var(--ne-link-color-disabled);
  }

  .icon-slot {
    min-width: var(--ne-link-sizing-icon);
    max-width: var(--ne-link-sizing-icon);
    display: grid;
  }

  .icon-slot-right {
    margin-left: var(--ne-link-gap);
  }

  .icon-slot-left {
    margin-right: var(--ne-link-gap);
  }

  span.default {
    /* This sets sizing for all em sizing on current element so be careful */
    font-size: var(--ne-link-font-size);
  }
`,bs];var ys;!function(e){e.self="_self",e.blank="_blank",e.parent="_parent",e.top="_top"}(ys||(ys={}));const As="javascript.void(0);",ws=ys.self;let xs=class extends(fi(T.oi)){constructor(){super(...arguments),this.label="",this.href=As,this.target=ws,this.onClick=e=>{this.href!==As&&!0!==this.disabled?.valueOf()||(e.preventDefault(),e.stopPropagation()),!0!==Fo(this.disabled).valueOf()&&vs(this,"ne-click",{composed:!0,bubbles:!0})}}static get scopedElements(){return{"ne-icon":Yo}}static get styles(){return ms}render(){const e=this.leftIconType?.valueOf()?T.dy`<ne-icon id="leftIcon" type=${this.leftIconType}></ne-icon>`:"",t=this.rightIconType?.valueOf()?T.dy`<ne-icon id="rightIcon" type=${this.rightIconType}></ne-icon>`:"";return T.dy`<a
      @click="${this.onClick}"
      href="${Fo(this.disabled)&&!0===this.disabled?.valueOf()?As:this.href}"
      target="${this.target}"
      class="${Fo(this.disabled)&&!0===this.disabled?.valueOf()?"disabled":""} ${Fo(this.leftIconType)}"
    >
      <span
        class=${Fo(this.leftIconType)&&void 0!==this.leftIconType?"icon-slot  icon-slot-left":"hidden"}
      >
        ${e}
      </span>
      <slot><span class="default">${this.label}</span></slot>
      <span
        class=${void 0!==this.rightIconType?"icon-slot icon-slot-right":"hidden"}
      >
        ${t}
      </span>
    </a>`}};hn([O({attribute:"label"})],xs.prototype,"label",void 0),hn([O({attribute:"left-icon-type",type:String})],xs.prototype,"leftIconType",void 0),hn([O({attribute:"right-icon-type",type:String})],xs.prototype,"rightIconType",void 0),hn([O({attribute:"href",type:String})],xs.prototype,"href",void 0),hn([O({attribute:"target",type:String})],xs.prototype,"target",void 0),hn([O({attribute:"disabled",type:Boolean})],xs.prototype,"disabled",void 0),xs=hn([P("ne-link")],xs);const ks=T.iv`
  * {
    --ne-data-table-padding-vertical: var(--ne-ref-spacing-small, 0.75em);
    --ne-data-table-padding-horizontal: var(--ne-ref-spacing-small, 0.75em);
    --ne-data-table-color-border: var(--ne-ref-color-grey-10, #e2e3e4);
    --ne-data-table-color-column-header-background-focus: var(--ne-ref-color-blue-05,#f0f7ff);
    --ne-data-table-color-column-header-background-hover: var(--ne-ref-color-blue-05,#f0f7ff);
    --ne-data-table-color-column-header-text: var(--ne-ref-color-grey-60,#575c61);
    --ne-data-table-color-column-header-icon-sorted-default: var(--ne-ref-color-grey-90,#161718);
    --ne-data-table-color-column-header-icon-sorted-hover: var(--ne-ref-color-blue-60,#006bd6);
    --ne-data-table-color-column-header-icon-sorted-focus: var(--ne-ref-color-blue-60,#006bd6);
    --ne-data-table-color-column-header-border-focus: var(--ne-ref-color-blue-20,#a3d1ff);
    --ne-data-table-column-header-icon: var(--ne-ref-sizing-04, 1em);
    --ne-data-table-column-header-gap: var(--ne-ref-spacing-xx-small, 0.25em);
    --ne-data-table-font-family-column-header: var(--ne-ref-font-family-open-sans,'Open Sans');
    --ne-data-table-font-weight-column-header: var(--ne-ref-font-weight-bold,Bold);
    --ne-data-table-font-size-column-header: var(--ne-ref-font-size-04,0.875em);
    --ne-data-table-border-width-column-header-default: var(--ne-ref-border-width-small,1px);
    --ne-data-table-border-width-column-header-focus: var(--ne-ref-border-width-large,4px);
  }
`,Cs=[pn,T.iv`
  :host {
    display: block;
    position: relative;
  }

  * {
    font-family: var(--ne-data-table-font-family-column-header);
    font-weight: inherit;
  }

  table {
    width: 100%;
    border-collapse: collapse;
  }

  thead {
    color: var(--ne-data-table-color-column-header-text);
    font-family: var(--ne-data-table-font-family-column-header);
    font-weight: var(--ne-data-table-font-weight-column-header);
  }

  th,
  td {
    vertical-align: top;
    box-sizing: border-box;
    font-size: var(--ne-data-table-font-size-column-header);
    padding: var(--ne-data-table-padding-vertical)
      var(--ne-data-table-padding-vertical);
  }

  thead,
  tbody {
    text-align: left;
  }

  td {
    border-bottom: var(--ne-data-table-border-width-column-header-default) solid
      var(--ne-data-table-color-border);
  }

  tbody td {
    border-bottom: var(--ne-data-table-border-width-column-header-default) solid
      var(--ne-data-table-color-border);
  }

  tbody tr:first-child td {
    border-top: var(--ne-data-table-border-width-column-header-default) solid
      var(--ne-data-table-color-border);
  }

  tbody tr:last-child td {
    border-bottom: none;
  }

  tbody tr:hover,
  th.sortable:hover {
    background: var(--ne-data-table-color-column-header-background-hover);
  }

  th.sortable:has(:focus) {
    background: var(--ne-data-table-color-column-header-background-focus);

    /* The left border does not show with this and will be attended in one of the other GitHubIsssue items. */

    /* border: var(--ne-data-table-border-width-column-header-focus) solid
      var(--ne-data-table-color-column-header-border-focus); */
  }

  th.sortable button {
    font-size: 1em;
    background: transparent;
    border: none;
    outline: none;
    color: inherit;
    align-items: center;
    display: flex;
    text-align: left;
    padding: 0;
  }

  th.sortable label {
    display: flex;
    align-items: center;
  }

  .icon {
    width: var(--ne-data-table-column-header-icon);
    min-width: var(--ne-data-table-column-header-icon);
    outline: none;
    display: block;
    color: transparent;
    padding-left: var(--ne-ref-spacing-xx-small, 0.25em);
  }

  a .icon {
    padding: var(--ne-ref-spacing-xx-small, 0.25em)
      var(--ne-ref-spacing-xx-small, 0.25em) 0;
    display: block;
    color: unset;
    width: var(--ne-data-table-column-header-icon);
    height: var(--ne-data-table-column-header-icon);
  }

  .icon.avatar {
    display: block;
    color: unset;
    width: calc(2 * var(--ne-data-table-column-header-icon));
    height: calc(2 * var(--ne-data-table-column-header-icon));
  }

  .sort-direction-asc {
    transform: rotate(180deg);
  }

  th.sortable:hover .icon,
  th.sortable:has(:focus) .icon {
    color: var(--ne-data-table-color-column-header-icon-sorted-hover);
  }

  .icon.sorted {
    display: block;
    color: var(--ne-data-table-color-column-header-icon-sorted-default);
  }

  a {
    color: var(--ne-ref-color-blue-60, #006bd6);
    font-family: var(--ne-ref-font-family-open-sans, Open Sans);
    text-decoration: var(--ne-ref-text-decoration-none, none);
    outline: none;
    margin: 0;
    padding: 0;
    display: grid;
    grid-template-columns: min-content min-content min-content;
    align-items: center;
    white-space: nowrap;
  }

  a:hover {
    text-decoration: var(--ne-ref-text-decoration-underline, underline);
    color: var(--ne-ref-color-blue-70, #0052a3);
  }

  a:focus-visible {
    box-sizing: border-box;
    text-decoration: var(--ne-ref-text-decoration-underline, underline);
    outline: 4px solid var(--ne-ref-color-blue-20, #a3d1ff);
    color: var(--ne-ref-color-blue-70, #0052a3);
  }
`,ks],_s=navigator.language,$s=(Ss=_s,(e,t)=>e?new Intl.DateTimeFormat(Ss,{dateStyle:t}).format(e):"");var Ss;class zs{renderCellIcon(e,t){return T.dy`<div class=${yr({icon:!0,avatar:e})}>
      <ne-icon type=${t}></ne-icon>
    </div>`}renderDateTime(e,t="custom",r){if(r||"custom"===t){let t=r;return r||(t=new Intl.DateTimeFormat("en-US",{dateStyle:"medium",timeStyle:"short"})),T.dy`<ne-label>${t?.format(new Date(e))}</ne-label>`}return T.dy`<ne-label
      >${$s(new Date(e),t)}</ne-label
    >`}renderFriendlyDate(e,t){const r=+new Date-+new Date(e);return T.dy`<ne-label
      >${((e,t,r)=>{const o=new Intl.RelativeTimeFormat([],{style:r,numeric:"auto"});if(e<6e4)return"Just now";if(e<36e5){const t=0-Math.floor(e/6e4);return o.format(t,"minute")}if(e<864e5){const t=0-Math.floor(e/36e5);return o.format(t,"hour")}const n=new Date;n.setHours(0,0,0,0);let i=n.getTime()-t.getTime();if(i<864e5*n.getDay()){const e=0-Math.ceil(i/864e5);return o.format(e,"day")}if(n.setTime(n.getTime()-864e5*(n.getDay()-1)),i=n.getTime()-t.getTime(),i<=24192e5){const e=0-Math.ceil(i/6048e5);return o.format(e,"week")}const a=new Date;return 12===a.getMonth()?a.setMonth(1,1):(a.setFullYear(a.getFullYear()-1),a.setMonth(a.getMonth()+1,1)),t>=a?t.toLocaleString([],{month:"long"}):t.toLocaleString([],{year:"numeric"})})(r,new Date(e),t)}</ne-label
    >`}renderCheckbox(e,t){return T.dy`<ne-checkbox
      @ne-click=${e}
      .checked=${t??!1}
    ></ne-checkbox>`}renderRadio(e,t){return T.dy`<ne-radio-button
      @ne-click=${t}
      name="selected"
      .checked=${e??!1}
    >
    </ne-radio-button>`}renderHyperlink(e,t,r,o,n){return T.dy`<ne-link
      label=${e}
      target=${Fo(o)}
      href=${Fo(t)}
      left-icon-type=${Fo(r)}
      @ne-click=${e=>{n?.(e)}}
    ></ne-link>`}}let Es=class extends(fi(T.oi)){static get scopedElements(){return{"ne-icon":Yo,"ne-link":xs,"ne-label":Bo,"ne-checkbox":ji}}static get styles(){return Cs}get headers(){return this._tableHeaders}set headers(e){this._tableHeaders=e}constructor(){super(),this.options={variant:"default",showHeaders:!0},this.rows=[],this._tableHeaders=[],this.allSelected=!1,this._tableControls=new zs}renderHeaderRow(){return T.dy`<tr>
      ${this.renderHeaders()}
    </tr>`}renderHeaders(){const e=[];switch(this.options.variant){case"multiSelect":const t={type:"checkbox",property:void 0,title:"Select All",checked:this.allSelected};e.push(T.dy`<th scope="col">${this.renderHeaderCell(t)}</th>`);break;case"singleSelect":const r={type:"string",property:void 0,title:"",checked:!1};e.push(T.dy`<th scope="col">${this.renderHeaderCell(r)}</th>`)}return this.headers.forEach(((t,r)=>{e.push(T.dy`<th
        scope="col"
        key=${r}
        class=${yr({sortable:!0===t.sortable})}
      >
        ${this.renderHeaderContent(t)}
      </th>`)})),e}renderHeaderContent(e){return T.dy`${this.renderHeaderCell(e)} `}renderHeaderCell(e){switch(e.type){case"checkbox":const t=t=>{t.preventDefault(),t.stopPropagation(),this.allSelected=!this.allSelected,this.rows.map((e=>(e.checked=this.allSelected,!0))),this.fireSelect(t,e)};return this._tableControls.renderCheckbox(t,this.allSelected);case"radioButton":return this._tableControls.renderRadio(!1,(e=>{console.log(e)}));default:return T.dy`${this.renderSort(e)}`}}renderTableRows(){return this.rows?.length?this.rows.map((e=>T.dy`<tr>
          ${this.renderRowColumn(e)}
        </tr>`)):[]}renderRowColumn(e){const t=[];switch(this.options.variant){case"multiSelect":t.push(T.dy`<td>
            ${this.renderCellContent({type:"checkbox",property:void 0},e)}
          </td>`);break;case"singleSelect":t.push(T.dy`<td>
            ${this.renderCellContent({type:"radioButton",property:void 0},e)}
          </td>`)}return this.headers.forEach((r=>{r.property||t.push(T.dy`<td></td>`),t.push(T.dy`<td>${this.renderCellContent(r,e)}</td>`)})),t}renderCellContent(e,t){let r,o;switch(e.property&&(o=e.property,r=t.record[o]),e.type){case"icon":return this._tableControls.renderCellIcon(!0,r);case"datetime":return this._tableControls.renderDateTime(r,e.dateStyle,e.dateFormat);case"datetime_rtf":return this._tableControls.renderFriendlyDate(r,e.timeStyle);case"hyperlink":const n=e.urlProperty;let i;n&&(i=t.record[n]);const a=e.iconProperty;let s;a&&(s=t.record[a]);const l=e=>{e.stopPropagation(),e.preventDefault();const r={property:o,item:t};this.fireClick(r)};return this._tableControls.renderHyperlink(r,i,s,e.target,l);case"checkbox":const c=e=>{e.stopPropagation(),e.preventDefault(),this.fireSelect(e,t),t.checked=!t.checked,this.allSelected=this.rows.map((e=>!0===e.checked)).filter((e=>!0===e)).length===this.rows.length,this.requestUpdate()};return this._tableControls.renderCheckbox(c,!!this.allSelected||t.checked);case"radioButton":const d=e=>{e.stopPropagation(),e.preventDefault(),this.fireSelect(e,t),this.requestUpdate(),this.allSelected=!1,this.selectedRecord=t.record};return this._tableControls.renderRadio(t.record===this.selectedRecord,d);default:return T.dy`<ne-label>${r}</ne-label>`}}renderSort(e){return!e.sortable&&e.title?T.dy`<ne-label>${e.title}</ne-label>`:e.sortable?"asc"===e.sortDirection?T.dy`<button
            type="button"
            @click=${t=>this.fireSort(t,e)}
          >
            <ne-label>${e.title}</ne-label>
            <div
              class=${yr({icon:!0,sorted:!0===e.sorted})}
            >
              <ne-icon .type=${"arrowUp"}></ne-icon>
            </div>
          </button>`:T.dy`<button
            type="button"
            @click=${t=>this.fireSort(t,e)}
          >
            <ne-label>${e.title}</ne-label>
            <div
              class=${yr({icon:!0,sorted:!0===e.sorted})}
            >
              <ne-icon .type=${"arrowDown"}></ne-icon>
            </div>
          </button>`:T.dy``}fireSelect(e,t){const r={newValue:!e.target?.checked,property:"checked",item:t};vs(this,"ne-change",{composed:!0,bubbles:!0,detail:r})}fireSort(e,t){const r={property:t?.property,newSortDirection:"desc"===t?.sortDirection?"asc":"desc",columnHeader:t};vs(this,"ne-sort",{composed:!0,bubbles:!0,detail:r}),this._tableHeaders.forEach(((e,o)=>{const n=this._tableHeaders[o];e!==t&&e.sortable?(n.sortDirection=void 0,n.sorted=void 0):(n.sorted=!0,n.sortDirection=r.newSortDirection)})),this.requestUpdate()}fireClick(e){vs(this,"ne-click",{composed:!0,bubbles:!0,detail:e})}render(){return T.dy`
      <table>
        <thead>
          ${!0===this.options.showHeaders?this.renderHeaderRow():""}
        </thead>
        <tbody>
          ${this.renderTableRows()}
        </tbody>
      </table>
    `}};hn([O({type:Object})],Es.prototype,"options",void 0),hn([O({type:Array})],Es.prototype,"headers",null),hn([O({type:Array})],Es.prototype,"rows",void 0),hn([N()],Es.prototype,"allSelected",void 0),hn([N()],Es.prototype,"selectedRecord",void 0),Es=hn([P("ne-data-table")],Es);var Ls=function(e,t,r,o){var n,i=arguments.length,a=i<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,o);else for(var s=e.length-1;s>=0;s--)(n=e[s])&&(a=(i<3?n(a):i>3?n(t,r,a):n(t,r))||a);return i>3&&a&&Object.defineProperty(t,r,a),a};let Ts=class extends(L(T.oi)){static get scopedElements(){return{"pi-list-component":vr,"pi-header":Rt}}static get styles(){return We}constructor(){super(),_e.resetInstance(),Se.resetInstance(),Ce.resetInstance(),$e.resetInstance()}render(){return T.dy` <pi-header></pi-header>
      <pi-list-component></pi-list-component>`}};Ts=Ls([P("pi-bpmn-list")],Ts)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RixHQUFJLENBQUMsRUFBRyxFQUFHLEVBQUcsR0FDZEYsR0FBSSxHQUNILENBQ0QvRSxLQUFNLENBQUMsTUFDUGlGLEdBQUksQ0FBQyxFQUFHLEdBQ1JGLEdBQUksR0FDSCxDQUNEL0UsS0FBTSxDQUFDLE1BQ1BpRixHQUFJLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUNqQkYsR0FBSSxJQUNILENBQ0QvRSxLQUFNLENBQUMsTUFDUGlGLEdBQUksQ0FBQyxFQUFHLEVBQUcsRUFBRyxJQUNkRixHQUFJLElBQ0gsQ0FDRC9FLEtBQU0sQ0FBQyxNQUNQaUYsR0FBSSxDQUFDLEVBQUcsR0FDUkYsR0FBSSxJQUNILENBQ0QvRSxLQUFNLENBQUMsTUFDUGlGLEdBQUksQ0FBQyxFQUFHLEdBQ1JGLEdBQUksSUFDSCxDQUNEL0UsS0FBTSxDQUFDLE1BQ1BpRixHQUFJLENBQUMsRUFBRyxFQUFHLEVBQUcsR0FDZEYsR0FBSSxJQUNILENBQ0QvRSxLQUFNLENBQUMsTUFDUGlGLEdBQUksQ0FBQyxFQUFHLEVBQUcsSUFDWEYsR0FBSSxJQUNILENBQ0QvRSxLQUFNLENBQUMsTUFDUGlGLEdBQUksQ0FBQyxFQUFHLEVBQUcsR0FDWEYsR0FBSSxJQUNILENBQ0QvRSxLQUFNLENBQUMsTUFDUGlGLEdBQUksQ0FBQyxFQUFHLEdBQ1JGLEdBQUksSUFDSCxDQUNEL0UsS0FBTSxDQUFDLE9BQ1BpRixHQUFJLENBQUMsRUFBRyxFQUFHLEdBQ1hGLEdBQUksSUFDSCxDQUNEL0UsS0FBTSxDQUFDLE1BQ1BpRixHQUFJLENBQUMsRUFBRyxFQUFHLEdBQUksSUFDZkYsR0FBSSxJQUNILENBQ0QvRSxLQUFNLENBQUMsTUFDUGlGLEdBQUksQ0FBQyxFQUFHLEdBQ1JGLEdBQUksR0FDSCxDQUNEL0UsS0FBTSxDQUFDLE1BQ1BpRixHQUFJLENBQUMsRUFBRyxFQUFHLElBQ1hGLEdBQUksSUFDSCxDQUNEL0UsS0FBTSxDQUFDLE1BQ1BpRixHQUFJLENBQUMsRUFBRyxFQUFHLEVBQUcsR0FDZEYsR0FBSSxJQUNILENBQ0QvRSxLQUFN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cEJwQixHQUFlb0IsZ0JBQ2ZDLEdBQWFELGVBQ2YsQ0FFQWpSLFNBQ0UsT0FBTyxJQUFJOzhDQUViLEdBekJXODBDLEdBQVksSUFEeEIsRUFBYyxpQkFDRkEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2Rpc3QvZXNtL19leHBvcnQtZGUyNWU4OTUuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS9faW1wb3J0LTgwNjQzOThkLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vYWRkLWVjZDA5ZDFhLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vYXJjaGl2ZS1kMmM1YWQ0Zi5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2Rpc3QvZXNtL2Fycm93RG93bi01NTVhMjhlMS5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2Rpc3QvZXNtL2Fycm93VXAtOWI1NjI5ZDYuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS9jYXJldERvd24tN2Y3Mjg2YzguanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS9jYXJldExlZnQtMzA4MDM4ZTUuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS9jYXJldFJpZ2h0LTE0MTAzNjhmLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vY2FyZXRVcC02NGQxOTExOS5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2Rpc3QvZXNtL2NoZWNrLTEzMmM5ODk0LmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vY2hldnJvbkRvd24tZWI0N2IyMWYuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS9jaGV2cm9uTGVmdC1mMDEzOTg4My5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2Rpc3QvZXNtL2NoZXZyb25MaWdodERvd24tMWRjZDE2ZmYuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS9jaGV2cm9uTGlnaHRMZWZ0LTIxM2M0YzA5LmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vY2hldnJvbkxpZ2h0UmlnaHQtNTg5ZGE1YjcuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS9jaGV2cm9uTGlnaHRVcC1hZTg0ZTI3OC5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2Rpc3QvZXNtL2NoZXZyb25SaWdodC1iZmNiY2QwZi5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2Rpc3QvZXNtL2NoZXZyb25VcC0zMjJhMGViYS5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2Rpc3QvZXNtL2Nsb3NlRGVmYXVsdC1lNmRhM2FkOC5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2Rpc3QvZXNtL2RhbmdlckV4Y2xhbWF0aW9uLTAzMDVlY2UyLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vZHJvcHpvbmUtNzAxNjZhNzkuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS9mZWVkYmFjay1lOGVjYjc2NC5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2Rpc3QvZXNtL2ZpbGUtNGFiMDI3MDUuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS9oaWRlLWQ2ZmE2MmQxLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vaW5mby0yOWVlYTBjZC5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2Rpc3QvZXNtL21heGltaXNlLTViZjUwYjAwLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vbWVhdGJhbGxzLWMzODhkNzZhLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vbWludXMtMDE4NzI5YzQuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS9vcGVuSW5OZXdXaW5kb3ctZTEyZGU2NDUuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS9wcm9jZXNzLWNlZjE0MDg2LmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vcHJvY2Vzc01vZGVsLTIxYmU3OTZlLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vcHVibGlzaC00ZGE5OTliZS5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2Rpc3QvZXNtL3JlZnJlc2gtNzFkNmNjOGQuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS9zYXZlLTAxYzFiMDIyLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vc2NoZWR1bGUtN2VhZWJiZmQuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS9zZWFyY2gtYjFiMDYyZGEuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS9zaG93LWNlYjNiYmEzLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vc3VjY2Vzcy03ZmI5ZjMzNi5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2Rpc3QvZXNtL3N1bW1hcnktZGE3YWRkYWEuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS90aWNrLTI4Y2Y3MjdkLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vdHJhc2gtNTZhMTNjYzYuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS91c2VyLTZmY2U1M2FmLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vdXNlcnMtOTljMWMzNDguanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS92ZXJzaW9uSGlzdG9yeS1iYWVjNWFkOC5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2Rpc3QvZXNtL3dhcm5pbmdFeGNsYW1hdGlvbi00YTY5NGU3ZS5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9zY29wZWQtY3VzdG9tLWVsZW1lbnQtcmVnaXN0cnkvc2NvcGVkLWN1c3RvbS1lbGVtZW50LXJlZ2lzdHJ5Lm1pbi5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1zdHlsZXMvZGlzdC9lYXJ0aGxpbmctYmFzZS5taW4uY3NzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uL3NvdXJjZS9nZW5lcmF0ZWQvIGxhenkgXlxcLlxcLy4qXFwuanMkIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2Nzcy10YWcuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGl0LWh0bWwuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L3JlYWN0aXZlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvbGl0LWVsZW1lbnQvbGl0LWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL0BwaS9icG1uLWxpc3Qvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3Qvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL0BwaS9icG1uLWxpc3Qvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BsaXQvbG9jYWxpemUvaW50ZXJuYWwvZGVmZXJyZWQuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQGxpdC9sb2NhbGl6ZS9pbnRlcm5hbC9sb2NhbGUtc3RhdHVzLWV2ZW50LmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BsaXQvbG9jYWxpemUvaW50ZXJuYWwvc3RyLXRhZy5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbGl0L2xvY2FsaXplL2ludGVybmFsL2ZudjFhNjQuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQGxpdC9sb2NhbGl6ZS9pbnRlcm5hbC9pZC1nZW5lcmF0aW9uLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BsaXQvbG9jYWxpemUvaW50ZXJuYWwvcnVudGltZS1tc2cuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQGxpdC9sb2NhbGl6ZS9pbnRlcm5hbC9kZWZhdWx0LW1zZy5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbGl0L2xvY2FsaXplL2luaXQvcnVudGltZS5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbGl0L2xvY2FsaXplL2xpdC1sb2NhbGl6ZS5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4vc291cmNlL2dlbmVyYXRlZC9sb2NhbGUtY29kZXMudHMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uL3NvdXJjZS9jb21tb24uY29uZmlndXJlLnRzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BvcGVuLXdjL2RlZHVwZS1taXhpbi9zcmMvZGVkdXBlTWl4aW4uanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG9wZW4td2Mvc2NvcGVkLWVsZW1lbnRzL3NyYy9TY29wZWRFbGVtZW50c01peGluLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BsaXQvcmVhY3RpdmUtZWxlbWVudC9kZWNvcmF0b3JzL2N1c3RvbS1lbGVtZW50LmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BsaXQvcmVhY3RpdmUtZWxlbWVudC9kZWNvcmF0b3JzL3Byb3BlcnR5LmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BsaXQvcmVhY3RpdmUtZWxlbWVudC9kZWNvcmF0b3JzL3N0YXRlLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BsaXQvcmVhY3RpdmUtZWxlbWVudC9kZWNvcmF0b3JzL2Jhc2UuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvcXVlcnktYXNzaWduZWQtZWxlbWVudHMuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvcXVlcnktYXNzaWduZWQtbm9kZXMuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2Lm1qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9jcmVhdGVFcnJvckNsYXNzLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvci5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2FyclJlbW92ZS5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9TdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvY29uZmlnLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci90aW1lb3V0UHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9ub29wLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL05vdGlmaWNhdGlvbkZhY3Rvcmllcy5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2Vycm9yQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9TdWJzY3JpYmVyLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvcmVwb3J0VW5oYW5kbGVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc3ltYm9sL29ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL3BpcGUuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL09iamVjdFVuc3Vic2NyaWJlZEVycm9yLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi9zb3VyY2Uvc2VydmljZXMvZGF0YS5zZXJ2aWNlLnRzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL1N1YmplY3QuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uL3NvdXJjZS9zZXJ2aWNlcy9jb250ZXh0LnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uL3NvdXJjZS9zZXJ2aWNlcy9ldmVudC5zZXJ2aWNlLnRzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi9zb3VyY2Uvc2VydmljZXMvcHJvY2Vzc2VzLWFwaS5zZXJ2aWNlLnRzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLXN0eWxlcy9kaXN0L2VhcnRobGluZy1iYXNlLm1pbi5jc3M/MDI4MSIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4vc291cmNlL2NvbW1vbi5zdHlsZXMudHMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uL3NvdXJjZS93ZWItY29tcG9uZW50cy9hcHAuc3R5bGVzLnRzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi9zb3VyY2Uvd2ViLWNvbXBvbmVudHMvcGktaGVhZGVyL3BpLWhlYWRlci5zdHlsZXMudHMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvaTE4bmV4dC9kaXN0L2VzbS9pMThuZXh0LmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi9zb3VyY2UvaTE4bmV4dC9sb2NhbGl6YXRpb24uY29uZmlndXJlLnRzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi9zb3VyY2Uvc2VydmljZXMvdHJhbnNsYXRpb24uc2VydmljZS50cyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4vc291cmNlL3dlYi1jb21wb25lbnRzL3BpLWhlYWRlci9waS1oZWFkZXIudHMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvZGlyZWN0aXZlLWhlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvZGlyZWN0aXZlLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2FzeW5jLWRpcmVjdGl2ZS5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9kaXJlY3RpdmVzL3ByaXZhdGUtYXN5bmMtaGVscGVycy5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9kaXJlY3RpdmVzL3VudGlsLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi9zb3VyY2Uvd2ViLWNvbXBvbmVudHMvcGktbGlzdC1jb21wb25lbnQvcGktbGlzdC1jb21wb25lbnQuc3R5bGVzLnRzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2RpcmVjdGl2ZXMvdW5zYWZlLWh0bWwuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvQmVoYXZpb3JTdWJqZWN0LmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi9zb3VyY2Uvd2ViLWNvbXBvbmVudHMvcGktcmV0cnktZXJyb3ItbW9kYWwvcGktcmV0cnktZXJyb3ItbW9kYWwuc3R5bGVzLnRzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi9zb3VyY2Uvd2ViLWNvbXBvbmVudHMvcGktcmV0cnktZXJyb3ItbW9kYWwvcGktcmV0cnktZXJyb3ItbW9kYWwudHMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uL3NvdXJjZS93ZWItY29tcG9uZW50cy9waS1saXN0LWNvbXBvbmVudC9waS1saXN0LWNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2Rpc3QvZXNtL2Jhc2Uuc3R5bGVzLTExZDM5MTgxLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BsaXQvcmVhY3RpdmUtZWxlbWVudC9kZWNvcmF0b3JzL3F1ZXJ5LmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2RpcmVjdGl2ZXMvY2xhc3MtbWFwLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvbm9kZV9tb2R1bGVzL2xpdC1odG1sL2xpYi9kaXJlY3RpdmUuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGliL2RvbS5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saWIvcGFydC5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saWIvdGVtcGxhdGUuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGliL3RlbXBsYXRlLWluc3RhbmNlLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvbm9kZV9tb2R1bGVzL2xpdC1odG1sL2xpYi90ZW1wbGF0ZS1yZXN1bHQuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGliL3BhcnRzLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvbm9kZV9tb2R1bGVzL2xpdC1odG1sL2xpYi9kZWZhdWx0LXRlbXBsYXRlLXByb2Nlc3Nvci5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saWIvdGVtcGxhdGUtZmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saWIvcmVuZGVyLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvbm9kZV9tb2R1bGVzL2xpdC1odG1sL2xpdC1odG1sLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvbm9kZV9tb2R1bGVzL0BvcGVuLXdjL3Njb3BlZC1lbGVtZW50cy9zcmMvQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9ub2RlX21vZHVsZXMvQG9wZW4td2Mvc2NvcGVkLWVsZW1lbnRzL3NyYy9jcmVhdGVVbmlxdWVUYWcuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9ub2RlX21vZHVsZXMvQG9wZW4td2Mvc2NvcGVkLWVsZW1lbnRzL3NyYy9nbG9iYWxUYWdzQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9ub2RlX21vZHVsZXMvQG9wZW4td2Mvc2NvcGVkLWVsZW1lbnRzL3NyYy9yZWdpc3RlckVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9ub2RlX21vZHVsZXMvQG9wZW4td2Mvc2NvcGVkLWVsZW1lbnRzL3NyYy90cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9ub2RlX21vZHVsZXMvQG9wZW4td2Mvc2NvcGVkLWVsZW1lbnRzL3NyYy9zaGFkeVRlbXBsYXRlRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL25vZGVfbW9kdWxlcy9Ab3Blbi13Yy9zY29wZWQtZWxlbWVudHMvc3JjL1Njb3BlZEVsZW1lbnRzTWl4aW4uanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS9ldmVudHMtMTE3M2Y1NjIuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS9idXR0b24udG9rZW5zLWU3OWM4YmJmLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2RpcmVjdGl2ZXMvc3R5bGUtbWFwLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vaWNvbi5iYXNlLTdhOTE5ZGIyLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vYnV0dG9uLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vYnV0dG9uLXNldC5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9kaXJlY3RpdmVzL2lmLWRlZmluZWQuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS9sYWJlbC50b2tlbnMtM2RmNzAyMDAuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS9sYWJlbC5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9kaXJlY3RpdmVzL3Vuc2FmZS1zdmcuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS9zcGlubmVyLWFhNmM1OWM5LmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vb3ZlcmxheS5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2Rpc3QvZXNtL3N0YXR1cy1vdmVybGF5LmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vaWNvbi5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2Rpc3QvZXNtL2ljb24tYnV0dG9uLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vaWNvblR5cGUtODMyNmVkZGIuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS9tb2RhbC5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzLWFscGhhL2Rpc3QvZXNtL2Jhc2Uuc3R5bGVzLTExZDM5MTgxLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMtYWxwaGEvbm9kZV9tb2R1bGVzL2xpdC1odG1sL2xpYi9kaXJlY3RpdmUuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy1hbHBoYS9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGliL2RvbS5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzLWFscGhhL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saWIvcGFydC5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzLWFscGhhL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saWIvdGVtcGxhdGUuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy1hbHBoYS9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGliL3RlbXBsYXRlLWluc3RhbmNlLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMtYWxwaGEvbm9kZV9tb2R1bGVzL2xpdC1odG1sL2xpYi90ZW1wbGF0ZS1yZXN1bHQuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy1hbHBoYS9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGliL3BhcnRzLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMtYWxwaGEvbm9kZV9tb2R1bGVzL2xpdC1odG1sL2xpYi9kZWZhdWx0LXRlbXBsYXRlLXByb2Nlc3Nvci5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzLWFscGhhL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saWIvdGVtcGxhdGUtZmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzLWFscGhhL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saWIvcmVuZGVyLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMtYWxwaGEvbm9kZV9tb2R1bGVzL2xpdC1odG1sL2xpdC1odG1sLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMtYWxwaGEvbm9kZV9tb2R1bGVzL0BvcGVuLXdjL3Njb3BlZC1lbGVtZW50cy9zcmMvQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy1hbHBoYS9ub2RlX21vZHVsZXMvQG9wZW4td2Mvc2NvcGVkLWVsZW1lbnRzL3NyYy9jcmVhdGVVbmlxdWVUYWcuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy1hbHBoYS9ub2RlX21vZHVsZXMvQG9wZW4td2Mvc2NvcGVkLWVsZW1lbnRzL3NyYy9nbG9iYWxUYWdzQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy1hbHBoYS9ub2RlX21vZHVsZXMvQG9wZW4td2Mvc2NvcGVkLWVsZW1lbnRzL3NyYy9yZWdpc3RlckVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy1hbHBoYS9ub2RlX21vZHVsZXMvQG9wZW4td2Mvc2NvcGVkLWVsZW1lbnRzL3NyYy90cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy1hbHBoYS9ub2RlX21vZHVsZXMvQG9wZW4td2Mvc2NvcGVkLWVsZW1lbnRzL3NyYy9zaGFkeVRlbXBsYXRlRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzLWFscGhhL25vZGVfbW9kdWxlcy9Ab3Blbi13Yy9zY29wZWQtZWxlbWVudHMvc3JjL1Njb3BlZEVsZW1lbnRzTWl4aW4uanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS9iYWRnZS1hZjExZmIyNi5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2Rpc3QvZXNtL3ZhbGlkYXRpb24udG9rZW5zLWRiODZlY2E5LmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vYWNjb3JkaW9uLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vYWxlcnRUeXBlLWJkZGFkYjRkLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vYmFubmVyLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vY2hlY2tib3guanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS9jb25maWctcGFuZWwtODc2NjQxODYuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS9kcm9wZG93bi1tZW51LmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vZHJvcGRvd24tbWVudS1pdGVtLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2RpcmVjdGl2ZXMvcmVmLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2RpcmVjdGl2ZXMvd2hlbi5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2Rpc3QvZXNtL2ljb24udG9rZW5zLWU0YWZmYzQ5LmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vcGlsbC5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2Rpc3QvZXNtL2Ryb3Bkb3duLWZpZWxkLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vZmlsZS1jYXJkLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vZmlsZS1waWNrZXItZDBlMDI4MDcuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvZGlyZWN0aXZlcy9saXZlLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vaW5wdXQuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS9sb29rdXAtZmllbGQuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS9wYW5lbC5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2Rpc3QvZXNtL3Byb2dyZXNzLWJhci5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2Rpc3QvZXNtL3JhZGlvLWJ1dHRvbi1ncm91cC01YTMxMDZkMi5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2Rpc3QvZXNtL3N0ZXBwZXItYzkyOGIwZGUuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS9zd2l0Y2guanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uLi8uLi9ub2RlX21vZHVsZXMvQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9kaXN0L2VzbS90ZXh0YXJlYS5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2Rpc3QvZXNtL3RvYXN0LW5vdGlmaWNhdGlvbi0wZGRlNmZmZi5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2Rpc3QvZXNtL3Rvb2xiYXIudG9rZW5zLTUwN2Y1ODhmLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vdG9vbGJhci5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2Rpc3QvZXNtL3Rvb2xiYXItYnV0dG9uLmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMvZGlzdC9lc20vdG9vbHRpcC5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovL0BwaS9icG1uLWxpc3QvLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMtYWxwaGEvZGlzdC9lc20vbGluay1hYzA2NWQyOC5qcyIsIndlYnBhY2s6Ly9AcGkvYnBtbi1saXN0Ly4uLy4uL25vZGVfbW9kdWxlcy9AbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzLWFscGhhL2Rpc3QvZXNtL2RhdGEtdGFibGUuanMiLCJ3ZWJwYWNrOi8vQHBpL2JwbW4tbGlzdC8uL3NvdXJjZS93ZWItY29tcG9uZW50cy9hcHAuY29tcG9uZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGh0bWwgfSBmcm9tICdsaXQnO1xuXG5jb25zdCBfZXhwb3J0ID0gaHRtbGA8c3ZnXG4gIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICB2aWV3Qm94PVwiMCAwIDE2IDE2XCJcbj5cbiAgPHBhdGhcbiAgICBmaWxsPVwiY3VycmVudENvbG9yXCJcbiAgICBkPVwiTTkuODI0IDMuNTE0YS40OC40OCAwIDAgMS0uMTEtLjUwNy40NDQuNDQ0IDAgMCAxIC40MTctLjI5bDMuMjAyLS4wNS0uMDUgMy4yMDRhLjQ0OS40NDkgMCAwIDEtLjQ1Ny40NDYuNDkxLjQ5MSAwIDAgMS0uMzQ0LS4xNDQuNDU0LjQ1NCAwIDAgMS0uMTMzLS4zNDNsLjA0My0xLjQ5Ny00Ljc3OSA0Ljc4MmEuNDEzLjQxMyAwIDAgMS0uMjk2LjExNi41NjYuNTY2IDAgMCAxLS4zODktLjE2Mi40OTQuNDk0IDAgMCAxLS4wNC0uNjhsNC43NzgtNC43ODEtMS40OTYuMDQzYS40OC40OCAwIDAgMS0uMzQ2LS4xMzdabTIuMjg1IDMuNTk3Yy4wNzQuMjkuMTEzLjU5LjExOC44ODlBNC4yMjggNC4yMjggMCAxIDEgOCAzLjc3M2MuMy4wMDIuNTk3LjAzNi44ODkuMTAzdi0xLjEyQTUuMDU1IDUuMDU1IDAgMCAwIDggMi42NjYgNS4zMzMgNS4zMzMgMCAxIDAgMTMuMzMzIDhhNS4wNTIgNS4wNTIgMCAwIDAtLjA4OS0uODg5SDEyLjExWlwiXG4gIC8+XG48L3N2Zz5gO1xuXG5leHBvcnQgeyBfZXhwb3J0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fZXhwb3J0LWRlMjVlODk1LmpzLm1hcFxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdCc7XG5cbmNvbnN0IF9pbXBvcnQgPSBodG1sYDxzdmdcbiAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gIHZpZXdCb3g9XCIwIDAgMTYgMTZcIlxuPlxuICA8cGF0aFxuICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgIGQ9XCJNMy4xMiAzLjg3QS40My40MyAwIDAgMSAzIDMuNTY3YS41ODQuNTg0IDAgMCAxIC4xNjctLjQwMi41MDkuNTA5IDAgMCAxIC43MDItLjA0MUw4Ljc5OCA4LjA1bC0uMDQzLTEuNTQ0YS40OS40OSAwIDAgMSAuODI5LS4zNjIuNDU4LjQ1OCAwIDAgMSAuMTMzLjMyMmwuMDUzIDMuMy0zLjMwNi0uMDUzYS40NjQuNDY0IDAgMCAxLS40Ni0uNDcxLjUxOC41MTggMCAwIDEgLjE0OC0uMzU1LjQ3Ny40NzcgMCAwIDEgLjM1NS0uMTM3bDEuNTQzLjA0NS00LjkzLTQuOTI0Wk04LjUgM2E1LjQzNSA1LjQzNSAwIDAgMC0yLjIuNDc0bC44ODcuODg3YTQuMjcyIDQuMjcyIDAgMCAxIDEuMzEzLS4yMkE0LjM2IDQuMzYgMCAxIDEgNC4xNDEgOC41YTQuMzE1IDQuMzE1IDAgMCAxIC40Ny0xLjk0NmwtLjgzNi0uODM3YTUuNDQgNS40NCAwIDAgMCAuMTUyIDUuODM5QTUuNSA1LjUgMCAxIDAgOC41IDNaXCJcbiAgLz5cbjwvc3ZnPmA7XG5cbmV4cG9ydCB7IF9pbXBvcnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV9pbXBvcnQtODA2NDM5OGQuanMubWFwXG4iLCJpbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0JztcblxuY29uc3QgYWRkID0gaHRtbGA8c3ZnXG4gIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICB2aWV3Qm94PVwiMCAwIDE2IDE2XCJcbj5cbiAgPHBhdGhcbiAgICBmaWxsPVwiY3VycmVudENvbG9yXCJcbiAgICBkPVwiTTEwLjY5IDIuMzg4YTYuMjIyIDYuMjIyIDAgMSAwIDIuOTE3IDguMzAyIDYuMTkzIDYuMTkzIDAgMCAwLTIuOTE2LTguMzAyWm0uODQ3IDYuNUg4Ljg4OXYyLjY2OGEuODg5Ljg4OSAwIDAgMS0xLjc3OCAwVjguODg5SDQuNDYzYS44ODkuODg5IDAgMSAxIDAtMS43NzhoMi42NDhWNC40NjNhLjg4OS44ODkgMCAxIDEgMS43NzggMHYyLjY0OGgyLjY0OGEuODg5Ljg4OSAwIDAgMSAwIDEuNzc4WlwiXG4gIC8+XG48L3N2Zz5gO1xuXG5leHBvcnQgeyBhZGQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZC1lY2QwOWQxYS5qcy5tYXBcbiIsImltcG9ydCB7IGh0bWwgfSBmcm9tICdsaXQnO1xuXG5jb25zdCBhcmNoaXZlID0gaHRtbGA8c3ZnXG4gIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICB2aWV3Qm94PVwiMCAwIDE2IDE2XCJcbj5cbiAgPHBhdGhcbiAgICBmaWxsPVwiY3VycmVudENvbG9yXCJcbiAgICBkPVwiTTEyLjg4OSAzLjU1NkgzLjExQS40NDQuNDQ0IDAgMCAwIDIuNjY3IDR2MS43NzhhLjQ0NC40NDQgMCAwIDAgLjQ0NC40NDRoLjQ0NVYxMmEuNDQ1LjQ0NSAwIDAgMCAuNDQ0LjQ0NGg4YS40NDUuNDQ1IDAgMCAwIC40NDQtLjQ0NFY2LjIxN2guNDQ1YS40NDUuNDQ1IDAgMCAwIC40NDQtLjQ0NVYzLjk5NWEuNDQ0LjQ0NCAwIDAgMC0uNDQ0LS40NFptLTEuMzMzIDcuNzhhLjIyMi4yMjIgMCAwIDEtLjIyMy4yMjFINC42NjdhLjIyMi4yMjIgMCAwIDEtLjIyMy0uMjIyVjYuMjE3aDcuMTEydjUuMTE4Wm0uNjY2LTYuODkyYS4yMjIuMjIyIDAgMCAxIC4yMjIuMjIzdi40NDRhLjIyMi4yMjIgMCAwIDEtLjIyMi4yMjJIMy43NzhhLjIyMi4yMjIgMCAwIDEtLjIyMi0uMjIydi0uNDQ0YS4yMjIuMjIyIDAgMCAxIC4yMjItLjIyM2g4LjQ0NFpNNS4zMzMgNy41NTZhLjQ0NC40NDQgMCAwIDEgLjQ0NS0uNDQ1aDQuNDQ0YS40NDUuNDQ1IDAgMCAxIDAgLjg4OUg1Ljc3OGEuNDQ0LjQ0NCAwIDAgMS0uNDQ1LS40NDRaXCJcbiAgLz5cbjwvc3ZnPmA7XG5cbmV4cG9ydCB7IGFyY2hpdmUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFyY2hpdmUtZDJjNWFkNGYuanMubWFwXG4iLCJpbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0JztcblxuY29uc3QgYXJyb3dEb3duID0gaHRtbGA8c3ZnXG4gIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICB2aWV3Qm94PVwiMCAwIDE2IDE2XCJcbj5cbiAgPHBhdGhcbiAgICBmaWxsPVwiY3VycmVudENvbG9yXCJcbiAgICBkPVwiTTEyLjQ0NCA5Ljc0YS43Ny43NyAwIDAgMS0uMjUuNTY2bC00LjE3NSAzLjkxNi00LjIxNS0zLjg5NWEuNzkzLjc5MyAwIDAgMS0uMjQ4LS41NzIuODA3LjgwNyAwIDAgMSAuMjY2LS41NzljLjE4Mi0uMTYuNDE2LS4yNDkuNjU4LS4yNWEuODU3Ljg1NyAwIDAgMSAuNjI4LjI2N2wxLjk1IDEuOTM4aC4wNTNWMy41NTZhLjg4OS44ODkgMCAxIDEgMS43NzggMHY3LjU2OGguMDU5bDEuOTU1LTEuOTE1YS45NS45NSAwIDAgMSAuNjQtLjI4MS45MTIuOTEyIDAgMCAxIC42MDYuMjA0Ljc5OS43OTkgMCAwIDEgLjI5NS42MDhaXCJcbiAgLz5cbjwvc3ZnPmA7XG5cbmV4cG9ydCB7IGFycm93RG93biB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJyb3dEb3duLTU1NWEyOGUxLmpzLm1hcFxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdCc7XG5cbmNvbnN0IGFycm93VXAgPSBodG1sYDxzdmdcbiAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gIHZpZXdCb3g9XCIwIDAgMTYgMTZcIlxuPlxuICA8cGF0aFxuICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgIGQ9XCJNMy41NTYgNy4xNWEuNzczLjc3MyAwIDAgMSAuMjUtLjU2N2w0LjE3NS0zLjkxNiA0LjIxNSAzLjg5NWEuNzkzLjc5MyAwIDAgMSAuMjQ4LjU3Mi44MDUuODA1IDAgMCAxLS4yNjYuNTc5Yy0uMTgyLjE2LS40MTYuMjQ5LS42NTguMjVhLjg1Ni44NTYgMCAwIDEtLjYyOC0uMjY3bC0xLjk1LTEuOTM4SDguODl2Ny41NzVhLjg4OS44ODkgMCAxIDEtMS43NzggMFY1Ljc2NWgtLjA1OUw1LjA5NyA3LjY4YS45NS45NSAwIDAgMS0uNjQuMjguOTEyLjkxMiAwIDAgMS0uNjA2LS4yMDQuOC44IDAgMCAxLS4yOTUtLjYwN1pcIlxuICAvPlxuPC9zdmc+YDtcblxuZXhwb3J0IHsgYXJyb3dVcCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJyb3dVcC05YjU2MjlkNi5qcy5tYXBcbiIsImltcG9ydCB7IGh0bWwgfSBmcm9tICdsaXQnO1xuXG5jb25zdCBjYXJldERvd24gPSBodG1sYDxzdmdcbiAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gIHZpZXdCb3g9XCIwIDAgMTYgMTZcIlxuPlxuICA8cGF0aFxuICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgIGQ9XCJNOC40NSAxMC41NTVhLjU1My41NTMgMCAwIDEtLjY2OSAwTDUuOTk2IDguNjEyIDQuNTg0IDcuMTE4YS41NDQuNTQ0IDAgMCAxIC4yOTMtLjg5Nmg2LjU0OGEuNTQ0LjU0NCAwIDAgMSAuMjk2Ljg5NkwxMC4zMSA4LjYxMmwtMS44NiAxLjk0M1pcIlxuICAvPlxuPC9zdmc+YDtcblxuZXhwb3J0IHsgY2FyZXREb3duIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYXJldERvd24tN2Y3Mjg2YzguanMubWFwXG4iLCJpbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0JztcblxuY29uc3QgY2FyZXRMZWZ0ID0gaHRtbGA8c3ZnXG4gIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICB2aWV3Qm94PVwiMCAwIDE2IDE2XCJcbj5cbiAgPHBhdGhcbiAgICBmaWxsPVwiY3VycmVudENvbG9yXCJcbiAgICBkPVwiTTYuMDQzIDguNDVhLjU1My41NTMgMCAwIDEgMC0uNjY5bDEuOTQyLTEuNzg1IDEuNDk0LTEuNDEyYS41NDQuNTQ0IDAgMCAxIC44OTYuMjkzdjYuNTQ4YS41NDQuNTQ0IDAgMCAxLS44OTYuMjk2TDcuOTg1IDEwLjMxIDYuMDQzIDguNDVaXCJcbiAgLz5cbjwvc3ZnPmA7XG5cbmV4cG9ydCB7IGNhcmV0TGVmdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FyZXRMZWZ0LTMwODAzOGU1LmpzLm1hcFxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdCc7XG5cbmNvbnN0IGNhcmV0UmlnaHQgPSBodG1sYDxzdmdcbiAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gIHZpZXdCb3g9XCIwIDAgMTYgMTZcIlxuPlxuICA8cGF0aFxuICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgIGQ9XCJNMTAuMjYyIDcuODU0YS41NTMuNTUzIDAgMCAxIDAgLjY3TDguMzIgMTAuMzA5IDYuODI2IDExLjcyYS41NDQuNTQ0IDAgMCAxLS44OTYtLjI5M1Y0Ljg4YS41NDQuNTQ0IDAgMCAxIC44OTYtLjI5N0w4LjMyIDUuOTk2bDEuOTQyIDEuODU4WlwiXG4gIC8+XG48L3N2Zz5gO1xuXG5leHBvcnQgeyBjYXJldFJpZ2h0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYXJldFJpZ2h0LTE0MTAzNjhmLmpzLm1hcFxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdCc7XG5cbmNvbnN0IGNhcmV0VXAgPSBodG1sYDxzdmdcbiAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gIHZpZXdCb3g9XCIwIDAgMTYgMTZcIlxuPlxuICA8cGF0aFxuICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgIGQ9XCJNNy44NTQgNi4zMzVhLjU1My41NTMgMCAwIDEgLjY3IDBsMS43ODUgMS45NDIgMS40MTIgMS40OTRhLjU0NS41NDUgMCAwIDEtLjI5My44OTZINC44OGEuNTQ0LjU0NCAwIDAgMS0uMjk3LS44OTZsMS40MTMtMS40OTQgMS44NTgtMS45NDJaXCJcbiAgLz5cbjwvc3ZnPmA7XG5cbmV4cG9ydCB7IGNhcmV0VXAgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhcmV0VXAtNjRkMTkxMTkuanMubWFwXG4iLCJpbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0JztcblxuY29uc3QgY2hlY2sgPSBodG1sYDxzdmdcbiAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gIHZpZXdCb3g9XCIwIDAgMTEgOFwiXG4+XG4gIDxwYXRoXG4gICAgZmlsbD1cImN1cnJlbnRDb2xvclwiXG4gICAgZD1cIk05Ljc3OSAxLjk5NyA1LjA0NSA3LjI5YS44NjcuODY3IDAgMCAxLTEuMjQ5IDBMLjgxNCA0LjMwMmEuOTI5LjkyOSAwIDAgMSAwLTEuMjg2Ljg2Ni44NjYgMCAwIDEgMS4yNSAwTDQuNDIxIDUuMzYgOC41MjguNzFhLjg2OC44NjggMCAwIDEgMS4yNSAwIC45MzIuOTMyIDAgMCAxIDAgMS4yODdaXCJcbiAgLz5cbjwvc3ZnPmA7XG5cbmV4cG9ydCB7IGNoZWNrIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGVjay0xMzJjOTg5NC5qcy5tYXBcbiIsImltcG9ydCB7IGh0bWwgfSBmcm9tICdsaXQnO1xuXG5jb25zdCBjaGV2cm9uRG93biA9IGh0bWxgPHN2Z1xuICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgdmlld0JveD1cIjAgMCAxNiAxNlwiXG4+XG4gIDxwYXRoXG4gICAgZmlsbD1cImN1cnJlbnRDb2xvclwiXG4gICAgZD1cIk0zLjkyIDQuNDQ0YTEuMjUgMS4yNSAwIDAgMSAxLjAwNy41MDlMOCA5LjEwM2wzLjA3My00LjE1YTEuMjU2IDEuMjU2IDAgMSAxIDIuMDEyIDEuNTAybC00LjA3OCA1LjUxMWExLjI5NiAxLjI5NiAwIDAgMS0yLjAxMiAwbC00LjA4LTUuNTFhMS4yNjIgMS4yNjIgMCAwIDEgLjI1Ny0xLjc2M2MuMjE2LS4xNjEuNDc4LS4yNDkuNzQ4LS4yNDlaXCJcbiAgLz5cbjwvc3ZnPmA7XG5cbmV4cG9ydCB7IGNoZXZyb25Eb3duIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGV2cm9uRG93bi1lYjQ3YjIxZi5qcy5tYXBcbiIsImltcG9ydCB7IGh0bWwgfSBmcm9tICdsaXQnO1xuXG5jb25zdCBjaGV2cm9uTGVmdCA9IGh0bWxgPHN2Z1xuICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgdmlld0JveD1cIjAgMCAxNiAxNlwiXG4+XG4gIDxwYXRoXG4gICAgZmlsbD1cImN1cnJlbnRDb2xvclwiXG4gICAgZD1cIk0xMiA0LjM0NWExLjI1IDEuMjUgMCAwIDEtLjUwOCAxLjAwN2wtNC4xNSAzLjA3MyA0LjE1IDMuMDczYTEuMjU1IDEuMjU1IDAgMSAxLTEuNTAzIDIuMDEyTDQuNDggOS40MzJhMS4yOTYgMS4yOTYgMCAwIDEgMC0yLjAxMmw1LjUxLTQuMDhhMS4yNjIgMS4yNjIgMCAwIDEgMS43NjIuMjU3Yy4xNjIuMjE2LjI1LjQ3OC4yNS43NDhaXCJcbiAgLz5cbjwvc3ZnPmA7XG5cbmV4cG9ydCB7IGNoZXZyb25MZWZ0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGV2cm9uTGVmdC1mMDEzOTg4My5qcy5tYXBcbiIsImltcG9ydCB7IGh0bWwgfSBmcm9tICdsaXQnO1xuXG5jb25zdCBjaGV2cm9uTGlnaHREb3duID0gaHRtbGA8c3ZnXG4gIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICB2aWV3Qm94PVwiMCAwIDE2IDE2XCJcbj5cbiAgPHBhdGhcbiAgICBmaWxsPVwiY3VycmVudENvbG9yXCJcbiAgICBkPVwiTTggMTAuNjY3YS41MS41MSAwIDAgMS0uMzQzLS4xM0wyLjgwOSA2LjA5MmEuNDIuNDIgMCAwIDEgMC0uNjI5LjUxNi41MTYgMCAwIDEgLjY4NSAwTDggOS41OTNsNC41MDYtNC4xM2EuNTE2LjUxNiAwIDAgMSAuNjg1IDAgLjQxOS40MTkgMCAwIDEgMCAuNjNsLTQuODQ4IDQuNDQ0YS41MS41MSAwIDAgMS0uMzQzLjEzWlwiXG4gIC8+XG48L3N2Zz5gO1xuXG5leHBvcnQgeyBjaGV2cm9uTGlnaHREb3duIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGV2cm9uTGlnaHREb3duLTFkY2QxNmZmLmpzLm1hcFxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdCc7XG5cbmNvbnN0IGNoZXZyb25MaWdodExlZnQgPSBodG1sYDxzdmdcbiAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gIHZpZXdCb3g9XCIwIDAgMTYgMTZcIlxuPlxuICA8cGF0aFxuICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgIGQ9XCJNNS4zMzMgOGEuNTEuNTEgMCAwIDEgLjEzLS4zNDNsNC40NDQtNC44NDhhLjQyLjQyIDAgMCAxIC42MyAwIC41MTcuNTE3IDAgMCAxIDAgLjY4NUw2LjQwNyA4bDQuMTMgNC41MDZhLjUxNi41MTYgMCAwIDEgMCAuNjg1LjQyLjQyIDAgMCAxLS42MyAwTDUuNDYzIDguMzQzQS41MS41MSAwIDAgMSA1LjMzMyA4WlwiXG4gIC8+XG48L3N2Zz5gO1xuXG5leHBvcnQgeyBjaGV2cm9uTGlnaHRMZWZ0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGV2cm9uTGlnaHRMZWZ0LTIxM2M0YzA5LmpzLm1hcFxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdCc7XG5cbmNvbnN0IGNoZXZyb25MaWdodFJpZ2h0ID0gaHRtbGA8c3ZnXG4gIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICB2aWV3Qm94PVwiMCAwIDE2IDE2XCJcbj5cbiAgPHBhdGhcbiAgICBmaWxsPVwiY3VycmVudENvbG9yXCJcbiAgICBkPVwiTTEwLjY2NyA4YS41MS41MSAwIDAgMS0uMTMuMzQzbC00LjQ0NCA0Ljg0OGEuNDIuNDIgMCAwIDEtLjYzIDAgLjUxNy41MTcgMCAwIDEgMC0uNjg1TDkuNTkzIDhsLTQuMTMtNC41MDZhLjUxNi41MTYgMCAwIDEgMC0uNjg1LjQyLjQyIDAgMCAxIC42MyAwbDQuNDQ0IDQuODQ4YS41MS41MSAwIDAgMSAuMTMuMzQzWlwiXG4gIC8+XG48L3N2Zz5gO1xuXG5leHBvcnQgeyBjaGV2cm9uTGlnaHRSaWdodCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hldnJvbkxpZ2h0UmlnaHQtNTg5ZGE1YjcuanMubWFwXG4iLCJpbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0JztcblxuY29uc3QgY2hldnJvbkxpZ2h0VXAgPSBodG1sYDxzdmdcbiAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gIHZpZXdCb3g9XCIwIDAgMTYgMTZcIlxuPlxuICA8cGF0aFxuICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgIGQ9XCJNOCA1LjMzM2EuNTEuNTEgMCAwIDEgLjM0My4xM2w0Ljg0OCA0LjQ0NGEuNDIuNDIgMCAwIDEgMCAuNjMuNTE3LjUxNyAwIDAgMS0uNjg1IDBMOCA2LjQwNmwtNC41MDYgNC4xM2EuNTE2LjUxNiAwIDAgMS0uNjg1IDAgLjQyLjQyIDAgMCAxIDAtLjYyOWw0Ljg0OC00LjQ0NEEuNTEuNTEgMCAwIDEgOCA1LjMzM1pcIlxuICAvPlxuPC9zdmc+YDtcblxuZXhwb3J0IHsgY2hldnJvbkxpZ2h0VXAgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoZXZyb25MaWdodFVwLWFlODRlMjc4LmpzLm1hcFxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdCc7XG5cbmNvbnN0IGNoZXZyb25SaWdodCA9IGh0bWxgPHN2Z1xuICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgdmlld0JveD1cIjAgMCAxNiAxNlwiXG4+XG4gIDxwYXRoXG4gICAgZmlsbD1cImN1cnJlbnRDb2xvclwiXG4gICAgZD1cIk00LjAyIDEyLjUyNWExLjI1MSAxLjI1MSAwIDAgMSAuNTA4LTEuMDA4bDQuMTUtMy4wNzItNC4xNS0zLjA3M0ExLjI1NiAxLjI1NiAwIDEgMSA2LjAzIDMuMzU5bDUuNTExIDQuMDc4YTEuMjk2IDEuMjk2IDAgMCAxIDAgMi4wMTNsLTUuNTEgNC4wOGExLjI2MiAxLjI2MiAwIDAgMS0xLjc2My0uMjU4IDEuMjQ0IDEuMjQ0IDAgMCAxLS4yNDktLjc0N1pcIlxuICAvPlxuPC9zdmc+YDtcblxuZXhwb3J0IHsgY2hldnJvblJpZ2h0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGV2cm9uUmlnaHQtYmZjYmNkMGYuanMubWFwXG4iLCJpbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0JztcblxuY29uc3QgY2hldnJvblVwID0gaHRtbGA8c3ZnXG4gIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICB2aWV3Qm94PVwiMCAwIDE2IDE2XCJcbj5cbiAgPHBhdGhcbiAgICBmaWxsPVwiY3VycmVudENvbG9yXCJcbiAgICBkPVwiTTEyLjEgMTIuNDI1YTEuMjUxIDEuMjUxIDAgMCAxLTEuMDA4LS41MDhMOC4wMiA3Ljc2N2wtMy4wNzMgNC4xNWExLjI1NyAxLjI1NyAwIDEgMS0yLjAxMy0xLjUwMmw0LjA3OC01LjUxMmExLjI5NiAxLjI5NiAwIDAgMSAyLjAxMyAwbDQuMDggNS41MTJhMS4yNjIgMS4yNjIgMCAwIDEtLjI1OCAxLjc2MSAxLjI0NSAxLjI0NSAwIDAgMS0uNzQ3LjI1WlwiXG4gIC8+XG48L3N2Zz5gO1xuXG5leHBvcnQgeyBjaGV2cm9uVXAgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoZXZyb25VcC0zMjJhMGViYS5qcy5tYXBcbiIsImltcG9ydCB7IGh0bWwgfSBmcm9tICdsaXQnO1xuXG5jb25zdCBjbG9zZURlZmF1bHQgPSBodG1sYDxzdmdcbiAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gIHZpZXdCb3g9XCIwIDAgMTYgMTZcIlxuPlxuICA8cGF0aFxuICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgIGQ9XCJNMTMuMDI4IDIuOTcyYS44ODkuODg5IDAgMCAxIDAgMS4yNTZMOS4yNTcgOGwzLjc3MSAzLjc3MmEuODg4Ljg4OCAwIDAgMS0xLjI1NiAxLjI1Nkw4IDkuMjU3bC0zLjc3MiAzLjc3MWEuODg4Ljg4OCAwIDAgMS0xLjI1Ni0xLjI1Nkw2Ljc0MyA4IDIuOTcyIDQuMjI4YS44ODkuODg5IDAgMCAxIDEuMjU2LTEuMjU2TDggNi43NDNsMy43NzItMy43NzFhLjg4OS44ODkgMCAwIDEgMS4yNTYgMFpcIlxuICAvPlxuPC9zdmc+YDtcblxuZXhwb3J0IHsgY2xvc2VEZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbG9zZURlZmF1bHQtZTZkYTNhZDguanMubWFwXG4iLCJpbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0JztcblxuY29uc3QgZGFuZ2VyRXhjbGFtYXRpb24gPSBodG1sYDxzdmdcbiAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gIHZpZXdCb3g9XCIwIDAgMTggMThcIlxuPlxuICA8cGF0aFxuICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgIGQ9XCJNOSAxNmE2Ljk1NyA2Ljk1NyAwIDAgMCA3LTcgNi45NTYgNi45NTYgMCAwIDAtNy03IDYuOTU3IDYuOTU3IDAgMCAwLTcgNyA2Ljk1NyA2Ljk1NyAwIDAgMCA3IDdaTTggNS4xYTEgMSAwIDAgMSAyIDB2My42YzAgLjYtLjQgMS4zLTEgMS4zcy0xLS43LTEtMS4zVjUuMVpNOSAxMWExLjUgMS41IDAgMSAxIDAgMyAxLjUgMS41IDAgMCAxIDAtM1pcIlxuICAvPlxuPC9zdmc+YDtcblxuZXhwb3J0IHsgZGFuZ2VyRXhjbGFtYXRpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhbmdlckV4Y2xhbWF0aW9uLTAzMDVlY2UyLmpzLm1hcFxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdCc7XG5cbmNvbnN0IGRyb3B6b25lID0gaHRtbGA8c3ZnXG4gIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICB2aWV3Qm94PVwiMCAwIDE2IDE2XCJcbj5cbiAgPHBhdGhcbiAgICBmaWxsPVwiY3VycmVudENvbG9yXCJcbiAgICBkPVwiTTggNC40NDRhLjQ0NS40NDUgMCAwIDEgLjQ0NC40MDFWOC4yMWwuODktLjg3MWEuNDMyLjQzMiAwIDAgMSAuNTc3IDBjLjA4LjA2Ny4xMy4xNjMuMTQyLjI2NmEuNTE0LjUxNCAwIDAgMS0uMTA2LjI5Nkw4IDkuNzc4IDYuMDU5IDcuODQ0YS4zNzguMzc4IDAgMCAxLS4xMDMtLjI5Ny40MzUuNDM1IDAgMCAxIC43Mi0uMjY3bC44ODguODcyVjQuODQ1YS40NDQuNDQ0IDAgMCAxIC40NDEtLjRIOFpcIlxuICAvPlxuICA8cGF0aFxuICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgIGQ9XCJNMTMuNzc4IDEyLjQ0NEgyLjIyMmEuNDQ0LjQ0NCAwIDAgMS0uNDIzLS41OGwxLjE1Ni0zLjU1NkEuNDQ0LjQ0NCAwIDAgMSAzLjM3OCA4SDUuMTFhLjQ0NC40NDQgMCAwIDEgMCAuODg5SDMuNzAzbC0uODcgMi42NjdoMTAuMzMzbC0uODctMi42NjdIMTAuODlhLjQ0NS40NDUgMCAwIDEgMC0uODg5aDEuNzMzYS40NDQuNDQ0IDAgMCAxIC40MjMuMzA3bDEuMTU2IDMuNTU1YS40NDUuNDQ1IDAgMCAxLS40MjMuNTgyWlwiXG4gIC8+XG48L3N2Zz5gO1xuXG5leHBvcnQgeyBkcm9wem9uZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZHJvcHpvbmUtNzAxNjZhNzkuanMubWFwXG4iLCJpbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0JztcblxuY29uc3QgZmVlZGJhY2sgPSBodG1sYDxzdmdcbiAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gIHZpZXdCb3g9XCIwIDAgMTYgMTZcIlxuPlxuICA8cGF0aFxuICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgIGQ9XCJNMTIuNDQ0IDMuNTU2SDMuNTU2YS44ODkuODg5IDAgMCAwLS44OS44ODh2NS4zMzRhLjg4OS44ODkgMCAwIDAgLjg5Ljg4OWguODg4djEuNzc3bDEuNzc4LTEuNzc3aDYuMjIyYS44ODkuODg5IDAgMCAwIC44OS0uODlWNC40NDVhLjg4OS44ODkgMCAwIDAtLjg5LS44ODhabS0xLjI3OCA1LjVINC44MzRhLjM5LjM5IDAgMCAxIDAtLjc3OWg2LjMzMmEuMzkuMzkgMCAxIDEgMCAuNzc5Wm0wLTEuNTU2SDQuODM0YS4zOS4zOSAwIDAgMSAwLS43NzhoNi4zMzJhLjM5LjM5IDAgMSAxIDAgLjc3OFptMC0xLjU1NUg0LjgzNGEuMzkuMzkgMCAwIDEgMC0uNzc5aDYuMzMyYS4zOS4zOSAwIDEgMSAwIC43NzlaXCJcbiAgLz5cbjwvc3ZnPmA7XG5cbmV4cG9ydCB7IGZlZWRiYWNrIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mZWVkYmFjay1lOGVjYjc2NC5qcy5tYXBcbiIsImltcG9ydCB7IGh0bWwgfSBmcm9tICdsaXQnO1xuXG5jb25zdCBmaWxlID0gaHRtbGA8c3ZnXG4gIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICB2aWV3Qm94PVwiMCAwIDE3IDIwXCJcbj5cbiAgPHBhdGhcbiAgICBmaWxsPVwiY3VycmVudENvbG9yXCJcbiAgICBkPVwiTTExLjE2Ny42NjdIMS43NTZBMS4yNiAxLjI2IDAgMCAwIC41IDEuOTIzdjE3LjZhMS4xMzcgMS4xMzcgMCAwIDAgMS4xMzcgMS4xMzdoMTMuNzI2YTEuMTM3IDEuMTM3IDAgMCAwIDEuMTM3LTEuMTNWNkwxMS4xNjcuNjY3Wm0wIDUuMzMzVjJsNCA0aC00WlwiXG4gIC8+XG48L3N2Zz5gO1xuXG5leHBvcnQgeyBmaWxlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWxlLTRhYjAyNzA1LmpzLm1hcFxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdCc7XG5cbmNvbnN0IGhpZGUgPSBodG1sYDxzdmdcbiAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gIHZpZXdCb3g9XCIwIDAgMTYgMTZcIlxuPlxuICA8cGF0aFxuICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgIGQ9XCJtMTQuMSA3Ljg5NS4wMDgtLjAxNGMuMDI0LS4wNDkuMDQ0LS4wODkuMDYtLjEyNWwuMDEyLS4wMjcuMDQyLS4wOThBNi42MjMgNi42MjMgMCAwIDAgOC4wMTYgMy42NmE2Ljc2OCA2Ljc2OCAwIDAgMC0yLjAwNy4yOGwtLjc3My0xLjI3Mi0uNjYyLjQxMy42ODIgMS4xMjRBNi44NDQgNi44NDQgMCAwIDAgMS43NzggNy42M2E2LjY1NCA2LjY1NCAwIDAgMCA2LjIyOCAzLjkyNWMuNTQuMDAyIDEuMDgtLjA1NCAxLjYwOC0uMTY4bDEuMTgyIDEuOTQ1LjY2My0uNDEyLTEuMDY3LTEuNzU2YTYuNjQyIDYuNjQyIDAgMCAwIDMuNzA4LTMuMjdaTTcuMzc4IDYuMTkxYy4xOTUtLjEwMi40MS0uMTU4LjYzLS4xNjNBMS41NDggMS41NDggMCAwIDEgOS41MiA3LjYwNmExLjU3NCAxLjU3NCAwIDAgMS0uNTYgMS4yTDcuMzc5IDYuMTkxWm0uNjMgNC4xYTUuNDIyIDUuNDIyIDAgMCAxLTQuODMxLTIuNjU5IDUuNTI5IDUuNTI5IDAgMCAxIDIuNzQ3LTIuMzNsLjg1MSAxLjRhMS41OTMgMS41OTMgMCAwIDAtLjI4LjkwNCAxLjU0NyAxLjU0NyAwIDAgMCAxLjUxIDEuNTc3Yy4wODUtLjAwMy4xNy0uMDE0LjI1Mi0uMDMzbC42NSAxLjA2N2MtLjI5OC4wNDYtLjYuMDctLjkuMDc0aC4wMDJaXCJcbiAgLz5cbjwvc3ZnPmA7XG5cbmV4cG9ydCB7IGhpZGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhpZGUtZDZmYTYyZDEuanMubWFwXG4iLCJpbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0JztcblxuY29uc3QgaW5mbyA9IGh0bWxgPHN2Z1xuICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgdmlld0JveD1cIjAgMCAxNiAxNlwiXG4+XG4gIDxwYXRoXG4gICAgZmlsbD1cImN1cnJlbnRDb2xvclwiXG4gICAgZD1cIk04IDEuNzc4YTYuMjIyIDYuMjIyIDAgMSAwIDAgMTIuNDQ0QTYuMjIyIDYuMjIyIDAgMCAwIDggMS43NzhabS44ODkgOS43MTNhLjg4OS44ODkgMCAxIDEtMS43NzggMHYtMy4yM2MwLS41MjguMzYtMS4xNS44ODktMS4xNXMuODg5LjYyMi44ODkgMS4xNTZ2My4yMjVabS0uODk2LTUuMzc4YTEuMjI3IDEuMjI3IDAgMSAxIDAtMi40NTMgMS4yMjcgMS4yMjcgMCAwIDEgMCAyLjQ1M1pcIlxuICAvPlxuPC9zdmc+YDtcblxuZXhwb3J0IHsgaW5mbyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5mby0yOWVlYTBjZC5qcy5tYXBcbiIsImltcG9ydCB7IGh0bWwgfSBmcm9tICdsaXQnO1xuXG5jb25zdCBtYXhpbWlzZSA9IGh0bWxgPHN2Z1xuICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgdmlld0JveD1cIjAgMCAxNiAxNlwiXG4+XG4gIDxyZWN0XG4gICAgd2lkdGg9XCIxMVwiXG4gICAgaGVpZ2h0PVwiMTFcIlxuICAgIHg9XCIyLjVcIlxuICAgIHk9XCIyLjVcIlxuICAgIGZpbGw9XCJ0cmFuc3BhcmVudFwiXG4gICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCJcbiAgICByeD1cIjIuNVwiXG4gIC8+XG48L3N2Zz5gO1xuXG5leHBvcnQgeyBtYXhpbWlzZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWF4aW1pc2UtNWJmNTBiMDAuanMubWFwXG4iLCJpbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0JztcblxuY29uc3QgbWVhdGJhbGxzID0gaHRtbGA8c3ZnXG4gIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICB2aWV3Qm94PVwiMCAwIDE2IDE2XCJcbj5cbiAgPGcgY2xpcC1wYXRoPVwidXJsKCNhKVwiPlxuICAgIDxwYXRoXG4gICAgICBmaWxsPVwiY3VycmVudENvbG9yXCJcbiAgICAgIGQ9XCJNNCA4YTIgMiAwIDEgMS00IDAgMiAyIDAgMCAxIDQgMFptNC0yYTIgMiAwIDEgMCAwIDQgMiAyIDAgMCAwIDAtNFptNiAwYTIgMiAwIDEgMCAwIDQgMiAyIDAgMCAwIDAtNFpcIlxuICAgIC8+XG4gIDwvZz5cbiAgPGRlZnM+XG4gICAgPGNsaXBQYXRoIGlkPVwiYVwiPjxwYXRoIGZpbGw9XCIjZmZmXCIgZD1cIk0wIDBoMTZ2MTZIMHpcIiAvPjwvY2xpcFBhdGg+XG4gIDwvZGVmcz5cbjwvc3ZnPmA7XG5cbmV4cG9ydCB7IG1lYXRiYWxscyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVhdGJhbGxzLWMzODhkNzZhLmpzLm1hcFxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdCc7XG5cbmNvbnN0IG1pbnVzID0gaHRtbGA8c3ZnXG4gIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICB2aWV3Qm94PVwiMCAwIDE2IDE2XCJcbj5cbiAgPHBhdGhcbiAgICBmaWxsPVwiY3VycmVudENvbG9yXCJcbiAgICBkPVwiTTMuNTU2IDhhLjg4OS44ODkgMCAwIDEgLjg4OC0uODg5aDcuMTEyYS44ODkuODg5IDAgMCAxIDAgMS43NzhINC40NDRBLjg4OS44ODkgMCAwIDEgMy41NTYgOFpcIlxuICAvPlxuPC9zdmc+YDtcblxuZXhwb3J0IHsgbWludXMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1pbnVzLTAxODcyOWM0LmpzLm1hcFxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdCc7XG5cbmNvbnN0IG9wZW5Jbk5ld1dpbmRvdyA9IGh0bWxgPHN2Z1xuICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgdmlld0JveD1cIjAgMCAxNiAxNlwiXG4+XG4gIDxwYXRoXG4gICAgZmlsbD1cImN1cnJlbnRDb2xvclwiXG4gICAgZD1cIk0xMi40NDQgNi45NjJ2Ni4zNzFhLjg4OS44ODkgMCAwIDEtLjg4OC44OWgtOC44OWEuODg5Ljg4OSAwIDAgMS0uODg4LS44OXYtOC44N2EuOTExLjkxMSAwIDAgMSAuOTEtLjkwN2g2LjQ4Yy4wMi4wMjkuMDI4LjA2NC4wNS4wOTNsLS43OTYuNzk1SDIuNjY3djguODloOC44ODlWNy44NWwuODg4LS44ODhaTTEwLjA5IDEuNzc4YS41NzkuNTc5IDAgMCAwIDAgMS4xNTVoMi4xNkw2LjEyNSA5LjA1OGEuNTc4LjU3OCAwIDAgMCAuODE3LjgxOGw2LjEyNS02LjEyNXYyLjE2YS41NzguNTc4IDAgMSAwIDEuMTU1IDBWMS43NzhIMTAuMDlaXCJcbiAgLz5cbjwvc3ZnPmA7XG5cbmV4cG9ydCB7IG9wZW5Jbk5ld1dpbmRvdyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3BlbkluTmV3V2luZG93LWUxMmRlNjQ1LmpzLm1hcFxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdCc7XG5cbmNvbnN0IHByb2Nlc3MgPSBodG1sYDxzdmdcbiAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gIHZpZXdCb3g9XCIwIDAgMTYgMTZcIlxuPlxuICA8cGF0aFxuICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgIGQ9XCJtMTMuMjMgNy4yLTIuNjUyLTIuNjUyYS4zNTYuMzU2IDAgMCAwLS4yNTUtLjEwNEg0YS40NDQuNDQ0IDAgMCAwLS40NDQuNDQ1djYuMjE0YS40NDUuNDQ1IDAgMCAwIC40NDQuNDQ1aDIuNTY4di4wMDhjLjAyOCAwIC4wNTgtLjAwOC4wODktLjAwOGgzLjIzYy4wMjcgMCAuMDU2LjAwNi4wODguMDA4di0uMDA4aDIuOTE0YS40NDUuNDQ1IDAgMCAwIC40NDQtLjQ0NVY3LjQ0NWEuMzU1LjM1NSAwIDAgMC0uMTA0LS4yNDVabS0yLjU2My0uMDg5VjUuMzMzbDEuNzc3IDEuNzc4aC0xLjc3N1pcIlxuICAvPlxuPC9zdmc+YDtcblxuZXhwb3J0IHsgcHJvY2VzcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvY2Vzcy1jZWYxNDA4Ni5qcy5tYXBcbiIsImltcG9ydCB7IGh0bWwgfSBmcm9tICdsaXQnO1xuXG5jb25zdCBwcm9jZXNzTW9kZWwgPSBodG1sYDxzdmdcbiAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gIHZpZXdCb3g9XCIwIDAgMTYgMTZcIlxuPlxuICA8cGF0aFxuICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgIGQ9XCJNMTQuNTMxIDYuNTYyaC0xLjQwNlY0LjIxOGEuNDY5LjQ2OSAwIDAgMC0uNDY5LS40NjlINi43MzJMMy45ODMgMSAxIDMuOTgzbDIuNzQ5IDIuNzV2NC41MTdIMi4zNDNhLjQ2OS40NjkgMCAwIDAtLjQ3LjQ2OXYyLjgxMmMwIC4yNTkuMjEuNDY5LjQ3LjQ2OUg3LjAzYy4yNTggMCAuNDY4LS4yMS40NjgtLjQ2OXYtMS40MDZoNS4xNTdjLjI1OSAwIC40NjktLjIxLjQ2OS0uNDY5di0yLjM0NGgxLjQwNmMuMjU5IDAgLjQ2OS0uMjEuNDY5LS40NjlWNy4wMzFhLjQ2OS40NjkgMCAwIDAtLjQ2OS0uNDdaTTIuMzI2IDMuOTgzbDEuNjU3LTEuNjU3IDEuNjU4IDEuNjU3LTEuNjU4IDEuNjU4LTEuNjU3LTEuNjU4Wm00LjIzNiAxMC4wOGgtMy43NXYtMS44NzZoMy43NXYxLjg3NVptNS42MjUtMS44NzZINy41di0uNDY4YS40NjkuNDY5IDAgMCAwLS40NjgtLjQ3SDQuNjg3VjYuMjY1bDEuNTc3LTEuNTc3aDUuOTIzdjEuODc1SDkuODQzYS40NjkuNDY5IDAgMCAwLS40NjkuNDY5djIuODEyYzAgLjI2LjIxLjQ3LjQ3LjQ3aDIuMzQzdjEuODc0Wm0xLjg3NS0yLjgxM2gtMy43NVY3LjVoMy43NXYxLjg3NVpcIlxuICAvPlxuPC9zdmc+YDtcblxuZXhwb3J0IHsgcHJvY2Vzc01vZGVsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9jZXNzTW9kZWwtMjFiZTc5NmUuanMubWFwXG4iLCJpbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0JztcblxuY29uc3QgcHVibGlzaCA9IGh0bWxgPHN2Z1xuICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgdmlld0JveD1cIjAgMCAxNiAxNlwiXG4+XG4gIDxwYXRoXG4gICAgZmlsbD1cImN1cnJlbnRDb2xvclwiXG4gICAgZD1cIk0xNC4xNjQgNy4xNmMtLjAyMy0uMTc5LS4wNjUtLjM1Mi0uMTA0LS41MjctLjAyLS4wOTUtLjAzOC0uMTkyLS4wNjQtLjI4NWE2LjQ4NiA2LjQ4NiAwIDAgMC0uMTk5LS41OTZsLS4wNjEtLjE1M2E2LjA5NCA2LjA5NCAwIDAgMC0xLjMxOC0yQTYuMjMgNi4yMyAwIDEgMCA4LjAxIDE0LjIyMWMuNDgtLjAwMS45NTctLjA2MSAxLjQyMi0uMTc4LjAxMiAwIC4wMjQtLjAwOC4wMzYtLjAxMWE2LjM1MSA2LjM1MSAwIDAgMCAxLjI0NC0uNDY1Yy4wMzktLjAxOS4wNzktLjAzMy4xMTctLjA1M2wtLjAwMy0uMDA0YTYuMjA5IDYuMjA5IDAgMCAwIDIuNzA2LTIuNzAzYy4wMjMtLjA0NS4wMzctLjA5NC4wNTktLjE0LjExNy0uMjQuMjItLjQ4Ni4zMDYtLjczOC4wMi0uMDYuMDMtLjEyMi4wNDgtLjE4Mi4wNzktLjI1Mi4xNC0uNTA4LjE4Ni0uNzY4LjA1NC0uMzIzLjA4Mi0uNjUuMDg1LS45NzdWOGE2LjIzOCA2LjIzOCAwIDAgMC0uMDUzLS44NFptLTMuNTA2LjQwOWEuNjMzLjYzMyAwIDAgMS0uNDE4LjE1MS43MzIuNzMyIDAgMCAxLS40ODQtLjE3OEw4LjU0IDYuMzM4djUuMDEyYS41ODQuNTg0IDAgMCAxLS42MTYuNTQyLjU3LjU3IDAgMCAxLS42MDMtLjU0MlY2LjMzNUw2LjE3NiA3LjU0YS41OTkuNTk5IDAgMCAxLS40MjguMTc3LjYwNy42MDcgMCAwIDEtLjU0OS0uMzM2LjUyNi41MjYgMCAwIDEgLjExMy0uNmwyLjY5LTIuNjY3IDIuNjg5IDIuNjcyYS41MjcuNTI3IDAgMCAxIC4xNi4zNzcuNTQ0LjU0NCAwIDAgMS0uMTkzLjQwNlpcIlxuICAvPlxuPC9zdmc+YDtcblxuZXhwb3J0IHsgcHVibGlzaCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHVibGlzaC00ZGE5OTliZS5qcy5tYXBcbiIsImltcG9ydCB7IGh0bWwgfSBmcm9tICdsaXQnO1xuXG5jb25zdCByZWZyZXNoID0gaHRtbGA8c3ZnXG4gIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICB2aWV3Qm94PVwiMCAwIDE2IDE2XCJcbj5cbiAgPHBhdGhcbiAgICBmaWxsPVwiY3VycmVudENvbG9yXCJcbiAgICBkPVwibTEzLjMxMyA2Ljg0Ni0uNjk0LjA0N2EuMzc2LjM3NiAwIDAgMS0uMzkxLS4zMDggMy45NyAzLjk3IDAgMCAwLTEuMDUyLTEuOTc5IDQuMTA2IDQuMTA2IDAgMCAwLTQuMjE3LS45NzMgMy44MjkgMy44MjkgMCAwIDAtMi4zMyAyLjEzMmwuMDA2LjAxIDEuNTU1LjE0NmEuMTU4LjE1OCAwIDAgMSAuMDY4LjI5M2wtMy4yMDQgMS45M2EuMTcuMTcgMCAwIDEtLjE0OS0uMDA3Yy0uMDItLjAwOC0uMDI3LS4wMy0uMDQyLS4wNDUtLjAxNi0uMDE1LS4wNC0uMDI4LS4wNDgtLjA1MyAwIDAtLjAwNyAwLS4wMDgtLjAwOWwtLjgwNi0zLjQ1OGEuMTYuMTYgMCAwIDEgLjI2OC0uMTM1bDEuMDA5Ljg0OGEzLjM2IDMuMzYgMCAwIDEgLjM1Ny0uNzNsLjAwNS4wMDZhNS4xMzQgNS4xMzQgMCAwIDEgMi43ODItMi4yNDcgNS41NzkgNS41NzkgMCAwIDEgNS44NyAxLjQwMSA1LjM3NyA1LjM3NyAwIDAgMSAxLjM1OCAyLjcxLjM2OS4zNjkgMCAwIDEtLjMzNy40MlpNMi44MjEgMTAuMTQ5YTUuMzc4IDUuMzc4IDAgMCAwIDEuMzg5IDIuNjk0IDUuNTggNS41OCAwIDAgMCA1Ljg4NSAxLjMzMSA1LjEzNCA1LjEzNCAwIDAgMCAyLjc1Ni0yLjI3OGwuMDA1LjAwNmMuMTQ3LS4yMy4yNjUtLjQ3Ny4zNTItLjczNWwxLjAyMi44MzdhLjE1OS4xNTkgMCAwIDAgLjI2OC0uMTM5bC0uODQ2LTMuNDQ1LS4wMDgtLjAxYy0uMDA4LS4wMjQtLjAzMi0uMDM0LS4wNS0uMDUyLS4wMTYtLjAxOC0uMDIzLS4wMzctLjA0MS0uMDQ1YS4xNzkuMTc5IDAgMCAwLS4xNS0uMDA1bC0zLjE4IDEuOTY0YS4xNTguMTU4IDAgMCAwIC4wNy4yOTJsMS41NTcuMTI4LjAwNi4wMWEzLjgyMyAzLjgyMyAwIDAgMS0yLjMwNCAyLjE1OCA0LjEwNiA0LjEwNiAwIDAgMS00LjIyOC0uOTIzIDMuOTY2IDMuOTY2IDAgMCAxLTEuMDctMS45NjQuMzc3LjM3NyAwIDAgMC0uMzk2LS4zMDZsLS42OTQuMDU3YS4zNjYuMzY2IDAgMCAwLS4zNDMuNDI1WlwiXG4gIC8+XG48L3N2Zz5gO1xuXG5leHBvcnQgeyByZWZyZXNoIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWZyZXNoLTcxZDZjYzhkLmpzLm1hcFxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdCc7XG5cbmNvbnN0IHNhdmUgPSBodG1sYDxzdmdcbiAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gIHZpZXdCb3g9XCIwIDAgMTYgMTZcIlxuPlxuICA8cGF0aFxuICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgIGQ9XCJNOS43NzggNS4zMzNIOFYzLjU1NmgxLjc3OHYxLjc3N1pNMTIuOCAyLjY2N2gtMi4xMzN2Mi42NjZjMCAuMjk1LS4yNTguNjY5LS41NTQuNjY5SDUuOTE2YS43MTEuNzExIDAgMCAxLS41ODMtLjY2OVYyLjY2N0gzLjJhLjUzMy41MzMgMCAwIDAtLjUzMy41MzN2OS42YS41MzQuNTM0IDAgMCAwIC41MzMuNTM4aDkuNmEuNTM1LjUzNSAwIDAgMCAuNTMzLS41MzhWMy4yYS41MzkuNTM5IDAgMCAwLS41MzMtLjUzM1pcIlxuICAvPlxuPC9zdmc+YDtcblxuZXhwb3J0IHsgc2F2ZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2F2ZS0wMWMxYjAyMi5qcy5tYXBcbiIsImltcG9ydCB7IGh0bWwgfSBmcm9tICdsaXQnO1xuXG5jb25zdCBzY2hlZHVsZSA9IGh0bWxgPHN2Z1xuICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgdmlld0JveD1cIjAgMCAxNiAxNlwiXG4+XG4gIDxwYXRoXG4gICAgZmlsbD1cImN1cnJlbnRDb2xvclwiXG4gICAgZD1cIk04LjI1IDJhNi4yNSA2LjI1IDAgMSAwIDYuMjUgNi4yNUE2LjI1OCA2LjI1OCAwIDAgMCA4LjI1IDJabTAgMTEuMjY3YTUuMDE3IDUuMDE3IDAgMSAxIDUuMDE3LTUuMDE3IDUuMDIzIDUuMDIzIDAgMCAxLTUuMDE3IDUuMDE3Wm0yLjA0NS00LjIySDcuNDU0VjUuNzY0YzAtLjM1LS4xNDQtLjYzNS0uNDk0LS42MzVzLS40OTYuMjg1LS40OTYuNjM1djQuMjdoMy44M2MuMzUgMCAuNjM1LS4xNDMuNjM1LS40OTQgMC0uMzUtLjI4NC0uNDk1LS42MzQtLjQ5NVpcIlxuICAvPlxuPC9zdmc+YDtcblxuZXhwb3J0IHsgc2NoZWR1bGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlLTdlYWViYmZkLmpzLm1hcFxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdCc7XG5cbmNvbnN0IHNlYXJjaCA9IGh0bWxgPHN2Z1xuICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgdmlld0JveD1cIjAgMCAxNiAxNlwiXG4+XG4gIDxwYXRoXG4gICAgZmlsbD1cImN1cnJlbnRDb2xvclwiXG4gICAgZD1cIm0xMy4xMDggMTIuMDE3LTIuNTkzLTIuNTk1YTQuMzIgNC4zMiAwIDEgMC0xLjA5MyAxLjA5M2wyLjU5MyAyLjU5M2EuNzczLjc3MyAwIDAgMCAxLjMzMy0uNTQxLjc3My43NzMgMCAwIDAtLjI0Mi0uNTVoLjAwMlpNNi45NzQgOS45MTRhMi45NCAyLjk0IDAgMSAxLS4wMDItNS44OCAyLjk0IDIuOTQgMCAwIDEgLjAwMiA1Ljg4WlwiXG4gIC8+XG48L3N2Zz5gO1xuXG5leHBvcnQgeyBzZWFyY2ggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlYXJjaC1iMWIwNjJkYS5qcy5tYXBcbiIsImltcG9ydCB7IGh0bWwgfSBmcm9tICdsaXQnO1xuXG5jb25zdCBzaG93ID0gaHRtbGA8c3ZnXG4gIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICB2aWV3Qm94PVwiMCAwIDE2IDE2XCJcbj5cbiAgPHBhdGhcbiAgICBmaWxsPVwiY3VycmVudENvbG9yXCJcbiAgICBkPVwiTTguMDE2IDMuNTU2QTYuNzM2IDYuNzM2IDAgMCAwIDEuNzc4IDcuNThhNi42NjcgNi42NjcgMCAwIDAgNi4yMjggMy45NzUgNi42NCA2LjY0IDAgMCAwIDYuMjE2LTMuOTc1IDYuNjY3IDYuNjY3IDAgMCAwLTYuMjA2LTQuMDI1Wm0tLjAxIDYuNzJhNS40MSA1LjQxIDAgMCAxLTQuODMyLTIuNjk1IDUuNDUgNS40NSAwIDAgMSA0Ljg0Mi0yLjc0NiA1LjM4NCA1LjM4NCAwIDAgMSA0LjgxMyAyLjc0MyA1LjM4NyA1LjM4NyAwIDAgMS00LjgyMyAyLjY5OVptMS4zMjctMi43MmExLjMzMyAxLjMzMyAwIDEgMS0yLjY2NiAwIDEuMzMzIDEuMzMzIDAgMCAxIDIuNjY2IDBaXCJcbiAgLz5cbjwvc3ZnPmA7XG5cbmV4cG9ydCB7IHNob3cgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNob3ctY2ViM2JiYTMuanMubWFwXG4iLCJpbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0JztcblxuY29uc3Qgc3VjY2VzcyA9IGh0bWxgPHN2Z1xuICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgdmlld0JveD1cIjAgMCAxNiAxNlwiXG4+XG4gIDxwYXRoXG4gICAgZmlsbD1cImN1cnJlbnRDb2xvclwiXG4gICAgZD1cIk04IDEuNzcyYTYuMjIyIDYuMjIyIDAgMSAwIDYuMjIyIDYuMjIyQTYuMjMgNi4yMyAwIDAgMCA4IDEuNzcyWm0zLjM2MiA0LjcyNi0zLjU1IDMuOTdhLjY1MS42NTEgMCAwIDEtLjkzNyAwTDQuNjM4IDguMjI2YS42OTYuNjk2IDAgMCAxIDAtLjk2NS42NS42NSAwIDAgMSAuOTM4IDBMNy4zNDQgOS4wMmwzLjA4LTMuNDg4YS42NTIuNjUyIDAgMCAxIC45MzggMCAuNjk4LjY5OCAwIDAgMSAwIC45NjZaXCJcbiAgLz5cbjwvc3ZnPmA7XG5cbmV4cG9ydCB7IHN1Y2Nlc3MgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1Y2Nlc3MtN2ZiOWYzMzYuanMubWFwXG4iLCJpbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0JztcblxuY29uc3Qgc3VtbWFyeSA9IGh0bWxgPHN2Z1xuICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgdmlld0JveD1cIjAgMCAxNiAxNlwiXG4+XG4gIDxwYXRoXG4gICAgZmlsbD1cImN1cnJlbnRDb2xvclwiXG4gICAgZD1cIk00IDNoOC44ODlINFptMS43NzggMi42NjdoNy4xMXYuODg5aC03LjExdi0uODlaTTQgNS42NjdoLjg4OXYuODg5SDR2LS44OVptMS43NzggMS43NzdoNS4zMzN2Ljg5SDUuNzc4di0uODlaTTQgNy40NDRoLjg5OXYuODlINHYtLjg5Wm0wIDEuNzc4aC44OTl2Ljg5SDR2LS44OVpNNCAxMWguODk5di44ODlINFYxMVptMC04aDguODg5djEuNzc4SDRWM1ptMS43NzggNy4xMTFoNy4xMXYtLjg4OWgtNy4xMXYuODlabTAgMS43NzhIMTJWMTFINS43Nzh2Ljg4OVpNNCAxMi43NzhoLjg5OXYuODg5SDR2LS44OVptMS43NzguODg5aDQuNDQ0di0uODlINS43Nzh2Ljg5WlwiXG4gIC8+XG48L3N2Zz5gO1xuXG5leHBvcnQgeyBzdW1tYXJ5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdW1tYXJ5LWRhN2FkZGFhLmpzLm1hcFxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdCc7XG5cbmNvbnN0IHRpY2sgPSBodG1sYDxzdmdcbiAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gIHZpZXdCb3g9XCIwIDAgMTYgMTZcIlxuPlxuICA8cGF0aFxuICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgIGQ9XCJNMTIuNzc5IDUuOTk3IDguMDQ1IDExLjI5YS44NjUuODY1IDAgMCAxLTEuMjQ5IDBMMy44MTQgOC4zMDJhLjkyOS45MjkgMCAwIDEgMC0xLjI4Ni44NjYuODY2IDAgMCAxIDEuMjUgMEw3LjQyMSA5LjM2bDQuMTA3LTQuNjQ5YS44NjguODY4IDAgMCAxIDEuMjUgMCAuOTMyLjkzMiAwIDAgMSAwIDEuMjg3WlwiXG4gIC8+XG48L3N2Zz5gO1xuXG5leHBvcnQgeyB0aWNrIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aWNrLTI4Y2Y3MjdkLmpzLm1hcFxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdCc7XG5cbmNvbnN0IHRyYXNoID0gaHRtbGA8c3ZnXG4gIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICB2aWV3Qm94PVwiMCAwIDE2IDE2XCJcbj5cbiAgPHBhdGhcbiAgICBmaWxsPVwiY3VycmVudENvbG9yXCJcbiAgICBkPVwiTTEyLjQ0NCA1Ljc2OWExLjc4NSAxLjc4NSAwIDAgMC0uMDg4LS40MzZoLTguNzNhMS41NzEgMS41NzEgMCAwIDAtLjA2OC40MzZ2Ny44NjJhMS43MTIgMS43MTIgMCAwIDAgMS41MiAxLjQ4aDUuODlhMS42NjQgMS42NjQgMCAwIDAgMS40NzYtMS40OFY1Ljc3Wm0tNi4yMjIgNy41NjRoLS44ODlWNy4xMTFjMC0uODgzLjg5LS44ODMuODkgMHY2LjIyMlptNC40NDUgMGgtLjg5VjcuMTExYzAtLjg4My44OS0uODgzLjg5IDB2Ni4yMjJabTIuMDUtMTAuNjY2aC0yLjA1VjEuNDgyYS41OTMuNTkzIDAgMCAwLS41OTMtLjU5M0g1LjkxNmEuNTg1LjU4NSAwIDAgMC0uNTgzLjU5M3YxLjE4NUgzLjI2YS41OTIuNTkyIDAgMCAwLS41OTMuNTkzdi42MjlhLjU5My41OTMgMCAwIDAgLjU5My41OTNoOS40NjJhLjU5My41OTMgMCAwIDAgLjU5My0uNTkzbC4wMTgtLjYzYS42MDguNjA4IDAgMCAwLS42MTEtLjU5MmgtLjAwNVptLTIuOTQgMEg2LjIyM3YtLjg5aDMuNTU2di44OVpcIlxuICAvPlxuPC9zdmc+YDtcblxuZXhwb3J0IHsgdHJhc2ggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYXNoLTU2YTEzY2M2LmpzLm1hcFxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdCc7XG5cbmNvbnN0IHVzZXIgPSBodG1sYDxzdmdcbiAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gIHZpZXdCb3g9XCIwIDAgMTYgMTZcIlxuPlxuICA8cGF0aFxuICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgIGQ9XCJNMTEuMDA0IDE0LjIyMkg1LjAxYy0zLjk5NiAwLTEuODIzLTMuNzQ1LTEuMTIxLTQuNTYyYTEuNzggMS43OCAwIDAgMSAuMTY3LS4xNzggMS44ODUgMS44ODUgMCAwIDEgMi4xNTgtLjQxNyA0LjYyMiA0LjYyMiAwIDAgMCAzLjY4NC4wNjYgMS45MTYgMS45MTYgMCAwIDEgMi4yMS41MTRjLjcwMy44IDIuODc2IDQuNTYxLTEuMTA0IDQuNTc3Wk04IDhhMi42NjcgMi42NjcgMCAxIDAgMC01LjMzM0EyLjY2NyAyLjY2NyAwIDAgMCA4IDhaXCJcbiAgLz5cbjwvc3ZnPmA7XG5cbmV4cG9ydCB7IHVzZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZXItNmZjZTUzYWYuanMubWFwXG4iLCJpbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0JztcblxuY29uc3QgdXNlcnMgPSBodG1sYDxzdmdcbiAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gIHZpZXdCb3g9XCIwIDAgMTYgMTZcIlxuPlxuICA8cGF0aFxuICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgIGQ9XCJNNy43ODggNy40NzRhMi4zMDEgMi4zMDEgMCAwIDEtLjE4My0yLjk4NiAyLjQ0MiAyLjQ0MiAwIDAgMSAzLjg1NS0uMDUgMi4yOTUgMi4yOTUgMCAwIDEtLjE4NCAzLjA3NGwtLjAyNC4wMjVhMi40MzIgMi40MzIgMCAwIDEtMy40NTItLjA1bC0uMDEyLS4wMTNabTUuMzQzIDIuMjA4LS4wMS0uMDFhMS44NiAxLjg2IDAgMCAwLTEuOTc3LS40MTUgNC41OSA0LjU5IDAgMCAxLTMuMjk1LS4wNTMgMS44NDQgMS44NDQgMCAwIDAtMS45MjkuMzM2Yy0uMDUuMDQ2LS4xLjA5My0uMTQ3LjE0Mi0uNjIyLjY0LTIuNTY5IDMuNjUxIDEgMy42NTFoNS4zNThjMy41NjkgMCAxLjYyNS0zLjAxMSAxLTMuNjUxWm0tNy45NTctLjY0YTMuNDEgMy40MSAwIDAgMSAuMTgzLS4xNzggMi42MzEgMi42MzEgMCAwIDEgMS45ODItLjY3NiA0Ljc0NyA0Ljc0NyAwIDAgMS0uMTQ0LS4xMzUgMy4xMzQgMy4xMzQgMCAwIDEtLjcwMi0xLjEyNiAzLjM5MSAzLjM5MSAwIDAgMS0yLjM3LS4wNiAxLjM2MyAxLjM2MyAwIDAgMC0xLjQyMy4yNSAyLjAxIDIuMDEgMCAwIDAtLjEwOC4xMDRjLS40NjIuNDczLTEuODk5IDIuODMuNzM5IDIuODNoMS4xNDFjLjIwNi0uMzU1LjQ0LS42OTIuNzAyLTEuMDFaTTQuMDgzIDUuNmExLjc5NiAxLjc5NiAwIDAgMCAyLjIxNi4yOSAzLjE1MiAzLjE1MiAwIDAgMSAuNjMtMS45NjJjLjAzNS0uMDQ1LjA3NS0uMDg5LjExMi0uMTNhMS42ODkgMS42ODkgMCAwIDAtLjI1My0uNDUxIDEuODAzIDEuODAzIDAgMCAwLTIuODQ1LjAzNyAxLjcgMS43IDAgMCAwIC4xMzQgMi4yMDdsLjAwNi4wMDlaXCJcbiAgLz5cbjwvc3ZnPmA7XG5cbmV4cG9ydCB7IHVzZXJzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2Vycy05OWMxYzM0OC5qcy5tYXBcbiIsImltcG9ydCB7IGh0bWwgfSBmcm9tICdsaXQnO1xuXG5jb25zdCB2ZXJzaW9uSGlzdG9yeSA9IGh0bWxgPHN2Z1xuICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgdmlld0JveD1cIjAgMCAxNiAxNlwiXG4+XG4gIDxwYXRoXG4gICAgZmlsbD1cImN1cnJlbnRDb2xvclwiXG4gICAgZD1cIk0xMy43NzggOC40NzVhNS43NzggNS43NzggMCAxIDEtNi41OS01LjY4NFYxLjg0YS4wNjEuMDYxIDAgMCAxIC4xLS4wNDhsLjk5Ljc3MyAxLjAzLjhhLjA2MS4wNjEgMCAwIDEgMCAuMDk2bC0xLjAzLjgtLjk5Ljc3NGEuMDYxLjA2MSAwIDAgMS0uMS0uMDQ4VjMuOTUzYTQuNjEgNC42MSAwIDEgMCA1LjA5MyAyLjc5NUw4LjMzMyA5LjUyYS41OC41OCAwIDAgMS0uNjk2LS4wMjJMNS4xMzUgNy40ODVhLjU3Mi41NzIgMCAwIDEgLjMtMS4wMi41OC41OCAwIDAgMSAuNDI0LjEyM2wyLjE2MiAxLjc0IDQuMTM0LTIuOTAyLjAyMy0uMDE1YS41OC41OCAwIDAgMSAuODQ4LjI0Yy40OS44Ni43NSAxLjgzMy43NTIgMi44MjRaXCJcbiAgLz5cbjwvc3ZnPmA7XG5cbmV4cG9ydCB7IHZlcnNpb25IaXN0b3J5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uSGlzdG9yeS1iYWVjNWFkOC5qcy5tYXBcbiIsImltcG9ydCB7IGh0bWwgfSBmcm9tICdsaXQnO1xuXG5jb25zdCB3YXJuaW5nRXhjbGFtYXRpb24gPSBodG1sYDxzdmdcbiAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gIHZpZXdCb3g9XCIwIDAgMTYgMTZcIlxuPlxuICA8cGF0aFxuICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgIGQ9XCJtMTQuODg1IDEyLjYyNS02LjA0NC0xMS4yQTEuMDM3IDEuMDM3IDAgMCAwIDcuNTA3Ljk4Yy0uMTg5LjEtLjM0NC4yNTUtLjQ0NC40NDVsLTYuMDQ0IDExLjJhMS4wOSAxLjA5IDAgMCAwIC4zNTUgMS40MjJjLjE3OC4wODkuMjY3LjE3OC40NDUuMTc4aDEyLjI2NmExLjA2NyAxLjA2NyAwIDAgMCAuOTc4LTEuMDY3IDEuMjYzIDEuMjYzIDAgMCAwLS4xNzgtLjUzM1ptLTcuODIyLTguMDlhLjg4OS44ODkgMCAxIDEgMS43NzggMHYzLjJjMCAuNTM0LS4zNTYgMS4xNTYtLjg5IDEuMTU2LS41MzIgMC0uODg4LS42MjItLjg4OC0xLjE1NXYtMy4yWm0uODg5IDcuOTEyYTEuMzMzIDEuMzMzIDAgMSAxIDEuMzMzLTEuMzM0IDEuMzY3IDEuMzY3IDAgMCAxLTEuMzMzIDEuMzM0WlwiXG4gIC8+XG48L3N2Zz5gO1xuXG5leHBvcnQgeyB3YXJuaW5nRXhjbGFtYXRpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdhcm5pbmdFeGNsYW1hdGlvbi00YTY5NGU3ZS5qcy5tYXBcbiIsIihmdW5jdGlvbigpe1xuLypcblxuIENvcHlyaWdodCAoYykgMjAyMCBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuJ3VzZSBzdHJpY3QnO2Z1bmN0aW9uIGgoYil7dmFyIGM9MDtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gYzxiLmxlbmd0aD97ZG9uZTohMSx2YWx1ZTpiW2MrK119Ontkb25lOiEwfX19ZnVuY3Rpb24gayhiKXt2YXIgYz1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3ImJmJbU3ltYm9sLml0ZXJhdG9yXTtyZXR1cm4gYz9jLmNhbGwoYik6e25leHQ6aChiKX19ZnVuY3Rpb24gbShiKXtpZighKGIgaW5zdGFuY2VvZiBBcnJheSkpe2I9ayhiKTtmb3IodmFyIGMsYT1bXTshKGM9Yi5uZXh0KCkpLmRvbmU7KWEucHVzaChjLnZhbHVlKTtiPWF9cmV0dXJuIGJ9dmFyIG49XCJmdW5jdGlvblwiPT10eXBlb2YgT2JqZWN0LmNyZWF0ZT9PYmplY3QuY3JlYXRlOmZ1bmN0aW9uKGIpe2Z1bmN0aW9uIGMoKXt9Yy5wcm90b3R5cGU9YjtyZXR1cm4gbmV3IGN9O1xuZnVuY3Rpb24gcChiKXtiPVtcIm9iamVjdFwiPT10eXBlb2YgZ2xvYmFsVGhpcyYmZ2xvYmFsVGhpcyxiLFwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3cmJndpbmRvdyxcIm9iamVjdFwiPT10eXBlb2Ygc2VsZiYmc2VsZixcIm9iamVjdFwiPT10eXBlb2YgZ2xvYmFsJiZnbG9iYWxdO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGg7KytjKXt2YXIgYT1iW2NdO2lmKGEmJmEuTWF0aD09TWF0aClyZXR1cm4gYX10aHJvdyBFcnJvcihcIkNhbm5vdCBmaW5kIGdsb2JhbCBvYmplY3RcIik7fVxudmFyIHE9cCh0aGlzKSxyPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYigpe2Z1bmN0aW9uIGEoKXt9bmV3IGE7UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxmdW5jdGlvbigpe30pO3JldHVybiBuZXcgYSBpbnN0YW5jZW9mIGF9aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFJlZmxlY3QmJlJlZmxlY3QuY29uc3RydWN0KXtpZihiKCkpcmV0dXJuIFJlZmxlY3QuY29uc3RydWN0O3ZhciBjPVJlZmxlY3QuY29uc3RydWN0O3JldHVybiBmdW5jdGlvbihhLGQsZSl7YT1jKGEsZCk7ZSYmUmVmbGVjdC5zZXRQcm90b3R5cGVPZihhLGUucHJvdG90eXBlKTtyZXR1cm4gYX19cmV0dXJuIGZ1bmN0aW9uKGEsZCxlKXt2b2lkIDA9PT1lJiYoZT1hKTtlPW4oZS5wcm90b3R5cGV8fE9iamVjdC5wcm90b3R5cGUpO3JldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChhLGUsZCl8fGV9fSgpLHQ7XG5pZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBPYmplY3Quc2V0UHJvdG90eXBlT2YpdD1PYmplY3Quc2V0UHJvdG90eXBlT2Y7ZWxzZXt2YXIgdTthOnt2YXIgdj17YTohMH0sdz17fTt0cnl7dy5fX3Byb3RvX189djt1PXcuYTticmVhayBhfWNhdGNoKGIpe311PSExfXQ9dT9mdW5jdGlvbihiLGMpe2IuX19wcm90b19fPWM7aWYoYi5fX3Byb3RvX18hPT1jKXRocm93IG5ldyBUeXBlRXJyb3IoYitcIiBpcyBub3QgZXh0ZW5zaWJsZVwiKTtyZXR1cm4gYn06bnVsbH12YXIgeD10O1xuaWYoIVNoYWRvd1Jvb3QucHJvdG90eXBlLmNyZWF0ZUVsZW1lbnQpe3ZhciB5PXdpbmRvdy5IVE1MRWxlbWVudCxBPXdpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUsQj13aW5kb3cuY3VzdG9tRWxlbWVudHMuZ2V0LEM9d2luZG93LmN1c3RvbUVsZW1lbnRzLEQ9bmV3IFdlYWtNYXAsRT1uZXcgV2Vha01hcCxGPW5ldyBXZWFrTWFwLEc9bmV3IFdlYWtNYXA7d2luZG93LkN1c3RvbUVsZW1lbnRSZWdpc3RyeT1mdW5jdGlvbigpe3RoaXMubD1uZXcgTWFwO3RoaXMubz1uZXcgTWFwO3RoaXMuaT1uZXcgTWFwO3RoaXMuaD1uZXcgTWFwfTt3aW5kb3cuQ3VzdG9tRWxlbWVudFJlZ2lzdHJ5LnByb3RvdHlwZS5kZWZpbmU9ZnVuY3Rpb24oYixjKXtiPWIudG9Mb3dlckNhc2UoKTtpZih2b2lkIDAhPT10aGlzLmooYikpdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcIkZhaWxlZCB0byBleGVjdXRlICdkZWZpbmUnIG9uICdDdXN0b21FbGVtZW50UmVnaXN0cnknOiB0aGUgbmFtZSBcXFwiXCIrYisnXCIgaGFzIGFscmVhZHkgYmVlbiB1c2VkIHdpdGggdGhpcyByZWdpc3RyeScpO1xuaWYodm9pZCAwIT09dGhpcy5vLmdldChjKSl0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKFwiRmFpbGVkIHRvIGV4ZWN1dGUgJ2RlZmluZScgb24gJ0N1c3RvbUVsZW1lbnRSZWdpc3RyeSc6IHRoaXMgY29uc3RydWN0b3IgaGFzIGFscmVhZHkgYmVlbiB1c2VkIHdpdGggdGhpcyByZWdpc3RyeVwiKTt2YXIgYT1jLnByb3RvdHlwZS5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2ssZD1uZXcgU2V0KGMub2JzZXJ2ZWRBdHRyaWJ1dGVzfHxbXSk7SChjLGQsYSk7YT17ZzpjLGNvbm5lY3RlZENhbGxiYWNrOmMucHJvdG90eXBlLmNvbm5lY3RlZENhbGxiYWNrLGRpc2Nvbm5lY3RlZENhbGxiYWNrOmMucHJvdG90eXBlLmRpc2Nvbm5lY3RlZENhbGxiYWNrLGFkb3B0ZWRDYWxsYmFjazpjLnByb3RvdHlwZS5hZG9wdGVkQ2FsbGJhY2ssYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrOmEsZm9ybUFzc29jaWF0ZWQ6Yy5mb3JtQXNzb2NpYXRlZCxmb3JtQXNzb2NpYXRlZENhbGxiYWNrOmMucHJvdG90eXBlLmZvcm1Bc3NvY2lhdGVkQ2FsbGJhY2ssXG5mb3JtRGlzYWJsZWRDYWxsYmFjazpjLnByb3RvdHlwZS5mb3JtRGlzYWJsZWRDYWxsYmFjayxmb3JtUmVzZXRDYWxsYmFjazpjLnByb3RvdHlwZS5mb3JtUmVzZXRDYWxsYmFjayxmb3JtU3RhdGVSZXN0b3JlQ2FsbGJhY2s6Yy5wcm90b3R5cGUuZm9ybVN0YXRlUmVzdG9yZUNhbGxiYWNrLG9ic2VydmVkQXR0cmlidXRlczpkfTt0aGlzLmwuc2V0KGIsYSk7dGhpcy5vLnNldChjLGEpO2Q9Qi5jYWxsKEMsYik7ZHx8KGQ9SShiKSxBLmNhbGwoQyxiLGQpKTt0aGlzPT09d2luZG93LmN1c3RvbUVsZW1lbnRzJiYoRi5zZXQoYyxhKSxhLnM9ZCk7aWYoZD10aGlzLmguZ2V0KGIpKXt0aGlzLmguZGVsZXRlKGIpO2Q9ayhkKTtmb3IodmFyIGU9ZC5uZXh0KCk7IWUuZG9uZTtlPWQubmV4dCgpKWU9ZS52YWx1ZSxFLmRlbGV0ZShlKSxKKGUsYSwhMCl9YT10aGlzLmkuZ2V0KGIpO3ZvaWQgMCE9PWEmJihhLnJlc29sdmUoYyksdGhpcy5pLmRlbGV0ZShiKSk7cmV0dXJuIGN9O3dpbmRvdy5DdXN0b21FbGVtZW50UmVnaXN0cnkucHJvdG90eXBlLnVwZ3JhZGU9XG5mdW5jdGlvbigpe0sucHVzaCh0aGlzKTtDLnVwZ3JhZGUuYXBwbHkoQyxhcmd1bWVudHMpO0sucG9wKCl9O3dpbmRvdy5DdXN0b21FbGVtZW50UmVnaXN0cnkucHJvdG90eXBlLmdldD1mdW5jdGlvbihiKXt2YXIgYztyZXR1cm4gbnVsbD09KGM9dGhpcy5sLmdldChiKSk/dm9pZCAwOmMuZ307d2luZG93LkN1c3RvbUVsZW1lbnRSZWdpc3RyeS5wcm90b3R5cGUuaj1mdW5jdGlvbihiKXtyZXR1cm4gdGhpcy5sLmdldChiKX07d2luZG93LkN1c3RvbUVsZW1lbnRSZWdpc3RyeS5wcm90b3R5cGUud2hlbkRlZmluZWQ9ZnVuY3Rpb24oYil7dmFyIGM9dGhpcy5qKGIpO2lmKHZvaWQgMCE9PWMpcmV0dXJuIFByb21pc2UucmVzb2x2ZShjLmcpO3ZhciBhPXRoaXMuaS5nZXQoYik7dm9pZCAwPT09YSYmKGE9e30sYS5wcm9taXNlPW5ldyBQcm9taXNlKGZ1bmN0aW9uKGQpe3JldHVybiBhLnJlc29sdmU9ZH0pLHRoaXMuaS5zZXQoYixhKSk7cmV0dXJuIGEucHJvbWlzZX07d2luZG93LkN1c3RvbUVsZW1lbnRSZWdpc3RyeS5wcm90b3R5cGUubT1cbmZ1bmN0aW9uKGIsYyxhKXt2YXIgZD10aGlzLmguZ2V0KGMpO2R8fHRoaXMuaC5zZXQoYyxkPW5ldyBTZXQpO2E/ZC5hZGQoYik6ZC5kZWxldGUoYil9O3ZhciBMO3dpbmRvdy5IVE1MRWxlbWVudD1mdW5jdGlvbigpe3ZhciBiPUw7aWYoYilyZXR1cm4gTD12b2lkIDAsYjt2YXIgYz1GLmdldCh0aGlzLmNvbnN0cnVjdG9yKTtpZighYyl0aHJvdyBuZXcgVHlwZUVycm9yKFwiSWxsZWdhbCBjb25zdHJ1Y3RvciAoY3VzdG9tIGVsZW1lbnQgY2xhc3MgbXVzdCBiZSByZWdpc3RlcmVkIHdpdGggZ2xvYmFsIGN1c3RvbUVsZW1lbnRzIHJlZ2lzdHJ5IHRvIGJlIG5ld2FibGUpXCIpO2I9UmVmbGVjdC5jb25zdHJ1Y3QoeSxbXSxjLnMpO09iamVjdC5zZXRQcm90b3R5cGVPZihiLHRoaXMuY29uc3RydWN0b3IucHJvdG90eXBlKTtELnNldChiLGMpO3JldHVybiBifTt3aW5kb3cuSFRNTEVsZW1lbnQucHJvdG90eXBlPXkucHJvdG90eXBlO3ZhciBJPWZ1bmN0aW9uKGIpe2Z1bmN0aW9uIGMoKXt2YXIgYT1cblJlZmxlY3QuY29uc3RydWN0KHksW10sdGhpcy5jb25zdHJ1Y3Rvcik7T2JqZWN0LnNldFByb3RvdHlwZU9mKGEsSFRNTEVsZW1lbnQucHJvdG90eXBlKTthOnt2YXIgZD1hLmdldFJvb3ROb2RlKCk7aWYoIShkPT09ZG9jdW1lbnR8fGQgaW5zdGFuY2VvZiBTaGFkb3dSb290KSl7ZD1LW0subGVuZ3RoLTFdO2lmKGQgaW5zdGFuY2VvZiBDdXN0b21FbGVtZW50UmVnaXN0cnkpe3ZhciBlPWQ7YnJlYWsgYX1kPWQuZ2V0Um9vdE5vZGUoKTtkPT09ZG9jdW1lbnR8fGQgaW5zdGFuY2VvZiBTaGFkb3dSb290fHwoZD0obnVsbD09KGU9Ry5nZXQoZCkpP3ZvaWQgMDplLmdldFJvb3ROb2RlKCkpfHxkb2N1bWVudCl9ZT1kLmN1c3RvbUVsZW1lbnRzfWU9ZXx8d2luZG93LmN1c3RvbUVsZW1lbnRzOyhkPWUuaihiKSk/SihhLGQpOkUuc2V0KGEsZSk7cmV0dXJuIGF9cS5PYmplY3QuZGVmaW5lUHJvcGVydHkoYyxcImZvcm1Bc3NvY2lhdGVkXCIse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLFxuZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuITB9fSk7Yy5wcm90b3R5cGUuY29ubmVjdGVkQ2FsbGJhY2s9ZnVuY3Rpb24oKXt2YXIgYT1ELmdldCh0aGlzKTthP2EuY29ubmVjdGVkQ2FsbGJhY2smJmEuY29ubmVjdGVkQ2FsbGJhY2suYXBwbHkodGhpcyxhcmd1bWVudHMpOkUuZ2V0KHRoaXMpLm0odGhpcyxiLCEwKX07Yy5wcm90b3R5cGUuZGlzY29ubmVjdGVkQ2FsbGJhY2s9ZnVuY3Rpb24oKXt2YXIgYT1ELmdldCh0aGlzKTthP2EuZGlzY29ubmVjdGVkQ2FsbGJhY2smJmEuZGlzY29ubmVjdGVkQ2FsbGJhY2suYXBwbHkodGhpcyxhcmd1bWVudHMpOkUuZ2V0KHRoaXMpLm0odGhpcyxiLCExKX07Yy5wcm90b3R5cGUuYWRvcHRlZENhbGxiYWNrPWZ1bmN0aW9uKCl7dmFyIGEsZDtudWxsPT0oYT1ELmdldCh0aGlzKSl8fG51bGw9PShkPWEuYWRvcHRlZENhbGxiYWNrKXx8ZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9O2MucHJvdG90eXBlLmZvcm1Bc3NvY2lhdGVkQ2FsbGJhY2s9ZnVuY3Rpb24oKXt2YXIgYT1cbkQuZ2V0KHRoaXMpO2lmKGEmJmEuZm9ybUFzc29jaWF0ZWQpe3ZhciBkO251bGw9PWF8fG51bGw9PShkPWEuZm9ybUFzc29jaWF0ZWRDYWxsYmFjayl8fGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfX07Yy5wcm90b3R5cGUuZm9ybURpc2FibGVkQ2FsbGJhY2s9ZnVuY3Rpb24oKXt2YXIgYT1ELmdldCh0aGlzKTtpZihudWxsPT1hPzA6YS5mb3JtQXNzb2NpYXRlZCl7dmFyIGQ7bnVsbD09YXx8bnVsbD09KGQ9YS5mb3JtRGlzYWJsZWRDYWxsYmFjayl8fGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfX07Yy5wcm90b3R5cGUuZm9ybVJlc2V0Q2FsbGJhY2s9ZnVuY3Rpb24oKXt2YXIgYT1ELmdldCh0aGlzKTtpZihudWxsPT1hPzA6YS5mb3JtQXNzb2NpYXRlZCl7dmFyIGQ7bnVsbD09YXx8bnVsbD09KGQ9YS5mb3JtUmVzZXRDYWxsYmFjayl8fGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfX07Yy5wcm90b3R5cGUuZm9ybVN0YXRlUmVzdG9yZUNhbGxiYWNrPWZ1bmN0aW9uKCl7dmFyIGE9RC5nZXQodGhpcyk7XG5pZihudWxsPT1hPzA6YS5mb3JtQXNzb2NpYXRlZCl7dmFyIGQ7bnVsbD09YXx8bnVsbD09KGQ9YS5mb3JtU3RhdGVSZXN0b3JlQ2FsbGJhY2spfHxkLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19O3JldHVybiBjfSxIPWZ1bmN0aW9uKGIsYyxhKXtpZigwIT09Yy5zaXplJiZ2b2lkIDAhPT1hKXt2YXIgZD1iLnByb3RvdHlwZS5zZXRBdHRyaWJ1dGU7ZCYmKGIucHJvdG90eXBlLnNldEF0dHJpYnV0ZT1mdW5jdGlvbihmLGwpe2Y9Zi50b0xvd2VyQ2FzZSgpO2lmKGMuaGFzKGYpKXt2YXIgej10aGlzLmdldEF0dHJpYnV0ZShmKTtkLmNhbGwodGhpcyxmLGwpO2EuY2FsbCh0aGlzLGYseixsKX1lbHNlIGQuY2FsbCh0aGlzLGYsbCl9KTt2YXIgZT1iLnByb3RvdHlwZS5yZW1vdmVBdHRyaWJ1dGU7ZSYmKGIucHJvdG90eXBlLnJlbW92ZUF0dHJpYnV0ZT1mdW5jdGlvbihmKXtmPWYudG9Mb3dlckNhc2UoKTtpZihjLmhhcyhmKSl7dmFyIGw9dGhpcy5nZXRBdHRyaWJ1dGUoZik7ZS5jYWxsKHRoaXMsXG5mKTthLmNhbGwodGhpcyxmLGwsbnVsbCl9ZWxzZSBlLmNhbGwodGhpcyxmKX0pO3ZhciBnPWIucHJvdG90eXBlLnRvZ2dsZUF0dHJpYnV0ZTtnJiYoYi5wcm90b3R5cGUudG9nZ2xlQXR0cmlidXRlPWZ1bmN0aW9uKGYpe2Y9Zi50b0xvd2VyQ2FzZSgpO2lmKGMuaGFzKGYpKXt2YXIgbD10aGlzLmdldEF0dHJpYnV0ZShmKTtnLmNhbGwodGhpcyxmKTt2YXIgej10aGlzLmdldEF0dHJpYnV0ZShmKTthLmNhbGwodGhpcyxmLGwseil9ZWxzZSBnLmNhbGwodGhpcyxmKX0pfX0sTT1mdW5jdGlvbihiKXt2YXIgYz1PYmplY3QuZ2V0UHJvdG90eXBlT2YoYik7aWYoYyE9PXdpbmRvdy5IVE1MRWxlbWVudClyZXR1cm4gYz09PXk/T2JqZWN0LnNldFByb3RvdHlwZU9mKGIsd2luZG93LkhUTUxFbGVtZW50KTpNKGMpfSxKPWZ1bmN0aW9uKGIsYyxhKXthPXZvaWQgMD09PWE/ITE6YTtPYmplY3Quc2V0UHJvdG90eXBlT2YoYixjLmcucHJvdG90eXBlKTtELnNldChiLGMpO0w9Yjt0cnl7bmV3IGMuZ31jYXRjaChkKXtNKGMuZyksXG5uZXcgYy5nfWMub2JzZXJ2ZWRBdHRyaWJ1dGVzLmZvckVhY2goZnVuY3Rpb24oZCl7Yi5oYXNBdHRyaWJ1dGUoZCkmJmMuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrLmNhbGwoYixkLG51bGwsYi5nZXRBdHRyaWJ1dGUoZCkpfSk7YSYmYy5jb25uZWN0ZWRDYWxsYmFjayYmYi5pc0Nvbm5lY3RlZCYmYy5jb25uZWN0ZWRDYWxsYmFjay5jYWxsKGIpfSxOPUVsZW1lbnQucHJvdG90eXBlLmF0dGFjaFNoYWRvdztFbGVtZW50LnByb3RvdHlwZS5hdHRhY2hTaGFkb3c9ZnVuY3Rpb24oYil7dmFyIGM9Ti5hcHBseSh0aGlzLGFyZ3VtZW50cyk7Yi5jdXN0b21FbGVtZW50cyYmKGMuY3VzdG9tRWxlbWVudHM9Yi5jdXN0b21FbGVtZW50cyk7cmV0dXJuIGN9O3ZhciBLPVtkb2N1bWVudF0sTz1mdW5jdGlvbihiLGMsYSl7dmFyIGQ9KGE/T2JqZWN0LmdldFByb3RvdHlwZU9mKGEpOmIucHJvdG90eXBlKVtjXTtiLnByb3RvdHlwZVtjXT1mdW5jdGlvbigpe0sucHVzaCh0aGlzKTt2YXIgZT1kLmFwcGx5KGF8fFxudGhpcyxhcmd1bWVudHMpO3ZvaWQgMCE9PWUmJkcuc2V0KGUsdGhpcyk7Sy5wb3AoKTtyZXR1cm4gZX19O08oU2hhZG93Um9vdCxcImNyZWF0ZUVsZW1lbnRcIixkb2N1bWVudCk7TyhTaGFkb3dSb290LFwiaW1wb3J0Tm9kZVwiLGRvY3VtZW50KTtPKEVsZW1lbnQsXCJpbnNlcnRBZGphY2VudEhUTUxcIik7dmFyIFA9ZnVuY3Rpb24oYil7dmFyIGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiLnByb3RvdHlwZSxcImlubmVySFRNTFwiKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJpbm5lckhUTUxcIixPYmplY3QuYXNzaWduKHt9LGMse3NldDpmdW5jdGlvbihhKXtLLnB1c2godGhpcyk7Yy5zZXQuY2FsbCh0aGlzLGEpO0sucG9wKCl9fSkpfTtQKEVsZW1lbnQpO1AoU2hhZG93Um9vdCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdyxcImN1c3RvbUVsZW1lbnRzXCIse3ZhbHVlOm5ldyBDdXN0b21FbGVtZW50UmVnaXN0cnksY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk7XG5pZih3aW5kb3cuRWxlbWVudEludGVybmFscyYmd2luZG93LkVsZW1lbnRJbnRlcm5hbHMucHJvdG90eXBlLnNldEZvcm1WYWx1ZSl7dmFyIFE9bmV3IFdlYWtNYXAsUj1IVE1MRWxlbWVudC5wcm90b3R5cGUuYXR0YWNoSW50ZXJuYWxzLG1ldGhvZHM9W1wic2V0Rm9ybVZhbHVlXCIsXCJzZXRWYWxpZGl0eVwiLFwiY2hlY2tWYWxpZGl0eVwiLFwicmVwb3J0VmFsaWRpdHlcIl07SFRNTEVsZW1lbnQucHJvdG90eXBlLmF0dGFjaEludGVybmFscz1mdW5jdGlvbihiKXtmb3IodmFyIGM9W10sYT0wO2E8YXJndW1lbnRzLmxlbmd0aDsrK2EpY1thXT1hcmd1bWVudHNbYV07Yz1SLmNhbGwuYXBwbHkoUixbdGhpc10uY29uY2F0KG0oYykpKTtRLnNldChjLHRoaXMpO3JldHVybiBjfTttZXRob2RzLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGM9d2luZG93LkVsZW1lbnRJbnRlcm5hbHMucHJvdG90eXBlLGE9Y1tiXTtjW2JdPWZ1bmN0aW9uKGQpe2Zvcih2YXIgZT1bXSxnPTA7Zzxhcmd1bWVudHMubGVuZ3RoOysrZyllW2ddPVxuYXJndW1lbnRzW2ddO2c9US5nZXQodGhpcyk7aWYoITA9PT1ELmdldChnKS5mb3JtQXNzb2NpYXRlZCludWxsPT1hfHxhLmNhbGwuYXBwbHkoYSxbdGhpc10uY29uY2F0KG0oZSkpKTtlbHNlIHRocm93IG5ldyBET01FeGNlcHRpb24oXCJGYWlsZWQgdG8gZXhlY3V0ZSBcIithK1wiIG9uICdFbGVtZW50SW50ZXJuYWxzJzogVGhlIHRhcmdldCBlbGVtZW50IGlzIG5vdCBhIGZvcm0tYXNzb2NpYXRlZCBjdXN0b20gZWxlbWVudC5cIik7fX0pO3ZhciBSYWRpb05vZGVMaXN0PWZ1bmN0aW9uKGIpe3ZhciBjPXIoQXJyYXksW10uY29uY2F0KG0oYikpLHRoaXMuY29uc3RydWN0b3IpO2MuaD1iO3JldHVybiBjfSxTPVJhZGlvTm9kZUxpc3QsVD1BcnJheTtTLnByb3RvdHlwZT1uKFQucHJvdG90eXBlKTtTLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1TO2lmKHgpeChTLFQpO2Vsc2UgZm9yKHZhciBVIGluIFQpaWYoXCJwcm90b3R5cGVcIiE9VSlpZihPYmplY3QuZGVmaW5lUHJvcGVydGllcyl7dmFyIFY9XG5PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFQsVSk7ViYmT2JqZWN0LmRlZmluZVByb3BlcnR5KFMsVSxWKX1lbHNlIFNbVV09VFtVXTtTLnU9VC5wcm90b3R5cGU7cS5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmFkaW9Ob2RlTGlzdC5wcm90b3R5cGUsXCJ2YWx1ZVwiLHtjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXt2YXIgYjtyZXR1cm4obnVsbD09KGI9dGhpcy5oLmZpbmQoZnVuY3Rpb24oYyl7cmV0dXJuITA9PT1jLmNoZWNrZWR9KSk/dm9pZCAwOmIudmFsdWUpfHxcIlwifX0pO3ZhciBIVE1MRm9ybUNvbnRyb2xzQ29sbGVjdGlvbj1mdW5jdGlvbihiKXt2YXIgYz10aGlzLGE9bmV3IE1hcDtiLmZvckVhY2goZnVuY3Rpb24oZCxlKXt2YXIgZz1kLmdldEF0dHJpYnV0ZShcIm5hbWVcIiksZj1hLmdldChnKXx8W107Y1srZV09ZDtmLnB1c2goZCk7YS5zZXQoZyxmKX0pO3RoaXMubGVuZ3RoPWIubGVuZ3RoO2EuZm9yRWFjaChmdW5jdGlvbihkLGUpe2QmJlxuKGNbZV09MT09PWQubGVuZ3RoP2RbMF06bmV3IFJhZGlvTm9kZUxpc3QoZCkpfSl9O0hUTUxGb3JtQ29udHJvbHNDb2xsZWN0aW9uLnByb3RvdHlwZS5uYW1lZEl0ZW09ZnVuY3Rpb24oYil7cmV0dXJuIHRoaXNbYl19O3ZhciBXPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoSFRNTEZvcm1FbGVtZW50LnByb3RvdHlwZSxcImVsZW1lbnRzXCIpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShIVE1MRm9ybUVsZW1lbnQucHJvdG90eXBlLFwiZWxlbWVudHNcIix7Z2V0OmZ1bmN0aW9uKCl7dmFyIGI9Vy5nZXQuY2FsbCh0aGlzLFtdKSxjPVtdO2I9ayhiKTtmb3IodmFyIGE9Yi5uZXh0KCk7IWEuZG9uZTthPWIubmV4dCgpKXthPWEudmFsdWU7dmFyIGQ9RC5nZXQoYSk7ZCYmITAhPT1kLmZvcm1Bc3NvY2lhdGVkfHxjLnB1c2goYSl9cmV0dXJuIG5ldyBIVE1MRm9ybUNvbnRyb2xzQ29sbGVjdGlvbihjKX19KX19O1xufSkuY2FsbCh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcgPyBnbG9iYWxUaGlzIDogd2luZG93KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NvcGVkLWN1c3RvbS1lbGVtZW50LXJlZ2lzdHJ5Lm1pbi5qcy5tYXBcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PU1vbnRzZXJyYXQ6d2dodEAzMDA7NDAwOzUwMDs2MDAmZmFtaWx5PU9wZW4rU2FuczppdGFsLHdnaHRAMCwzMDA7MCw0MDA7MCw2MDA7MCw3MDA7MCw4MDA7MSw0MDAmZGlzcGxheT1zd2FwKTtcIl0pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGA6cm9vdHstLW54LXNhbmQtMTA6ICNmN2YxZGQ7LS1ueC13aGl0ZTogI2ZmZjstLW54LXllbGxvdy02MDogI2UxYjIwMDstLW54LXllbGxvdy01MDogI2ZmY2YxYTstLW54LXllbGxvdy00MDogI2ZmZDk0ODstLW54LXJlZC02MDogI2I4MDAwMDstLW54LXJlZC01MDogI2U2MDAwMDstLW54LXJlZC00MDogI2ZmMWYxZjstLW54LXJlZC0xMDogI2ZmYzdjNzstLW54LWdyZWVuLTYwOiAjMDA2YzJkOy0tbngtZ3JlZW4tNTA6ICMwMDg3Mzg7LS1ueC1ncmVlbi00MDogIzAwZDI1NzstLW54LWdyZWVuLTEwOiAjYjZmZmQ0Oy0tbngtb3JhbmdlLTYwOiAjZjU2OTAwOy0tbngtYmx1ZS05MDogIzAwMWYzZDstLW54LWJsdWUtODA6ICMwMDM4NzA7LS1ueC1ibHVlLTcwOiAjMDA1MmEzOy0tbngtYmx1ZS02MDogIzAwNmJkNjstLW54LWJsdWUtNTA6ICMwYTg1ZmY7LS1ueC1ibHVlLTQwOiAjM2Q5ZWZmOy0tbngtYmx1ZS0zMDogIzcwYjhmZjstLW54LWJsdWUtMjA6ICNhM2QxZmY7LS1ueC1ibHVlLTEwOiAjZDZlYmZmOy0tbngtYmx1ZS01OiAjZjBmN2ZmOy0tbngtdmlvbGV0LTkwOiAjMjAwYzM0Oy0tbngtdmlvbGV0LTgwOiAjM2YxODY4Oy0tbngtdmlvbGV0LTcwOiAjNWYyNDliOy0tbngtdmlvbGV0LTYwOiAjN2YzMGNmOy0tbngtdmlvbGV0LTUwOiAjOWY2NGRiOy0tbngtdmlvbGV0LTQwOiAjYjI4M2UyOy0tbngtdmlvbGV0LTMwOiAjYzVhMmU5Oy0tbngtdmlvbGV0LTIwOiAjZDljMWYxOy0tbngtdmlvbGV0LTEwOiAjZWNlMGY4Oy0tbngtZ3JleS05MDogIzE2MTcxODstLW54LWdyZXktODA6ICMyYzJlMzA7LS1ueC1ncmV5LTcwOiAjNDE0NTQ4Oy0tbngtZ3JleS02MDogIzU3NWM2MTstLW54LWdyZXktNTA6ICM2ZDczNzk7LS1ueC1ncmV5LTQwOiAjODk4Zjk0Oy0tbngtZ3JleS0zMDogI2E3YWJhZjstLW54LWdyZXktMjA6ICNjNGM3Y2E7LS1ueC1ncmV5LTEwOiAjZTJlM2U0Oy0tbngtZ3JleS01OiAjZWZmMGYwOy0tbngtZ3JleS0yOiAjZmFmYWZhOy0tb3ZlcmxheTogcmdiYSgxMDkgMTE1IDEyMSA2MCUpOy0tb3ZlcmxheS1sb2FkaW5nOiByZ2JhKDI1MCAyNTAgMjUwIDgwJSk7LS1vbmxpZ2h0LWhvdmVyLWJhY2tncm91bmQtY29sb3I6ICNmNGY5ZmY7LS1vbmxpZ2h0LXNlbGVjdGVkLWJhY2tncm91bmQtY29sb3I6ICNlOGYzZmY7LS1nbG9iYWxuYXYtYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbngtYmx1ZS04MCk7LS1nbG9iYWxuYXYtdGV4dC1jb2xvcjogdmFyKC0tbngtd2hpdGUpOy0tc2lkZW5hdi1iYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ueC1ncmV5LTUpOy0tYm9keS1wcmltYXJ5LWJhY2tncm91bmQtY29sb3I6IHZhcigtLW54LWdyZXktMik7LS1ib2R5LXNlY29uZGFyeS1iYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ueC1ncmV5LTUpOy0tY29udGVudC1iYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ueC13aGl0ZSk7LS1jb250ZW50LWV4dGVuc2lvbi1iYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ueC1ncmV5LTEwKTstLXRvb2xiYXItYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbngtd2hpdGUpOy0tdG9vbGJhci10ZXh0LWNvbG9yOiB2YXIoLS1ueC1ncmV5LTkwKTstLXByaW1hcnktdGV4dC1jb2xvcjogdmFyKC0tbngtZ3JleS05MCk7LS1kaXNhYmxlZC10ZXh0LWNvbG9yOiB2YXIoLS1ueC1ncmV5LTcwKTstLWVycm9yLXRleHQtY29sb3I6IHZhcigtLW54LXJlZC01MCk7LS1kZXN0cnVjdGl2ZS10ZXh0LWNvbG9yOiB2YXIoLS1ueC1yZWQtNjApOy0tc3VjY2Vzcy10ZXh0LWNvbG9yOiB2YXIoLS1ueC1ncmVlbi01MCk7LS1oZWFkZXItdGV4dC1jb2xvcjogdmFyKC0tbngtb3JhbmdlLTYwKTstLXN1YmhlYWRlci10ZXh0LWNvbG9yOiB2YXIoLS1ueC1ncmV5LTYwKTstLXBsYWNlaG9sZGVyLXRleHQtY29sb3I6IHZhcigtLW54LWdyZXktNTApOy0taHlwZXJsaW5rLXRleHQtY29sb3I6IHZhcigtLW54LWJsdWUtNjApOy0taHlwZXJsaW5rLWRpc2FibGVkLXRleHQtY29sb3I6IHZhcigtLW54LWdyZXktNzApOy0tYmxvY2stcHJpbWFyeS1iYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ueC1ibHVlLTYwKTstLWJsb2NrLXByaW1hcnktYm9yZGVyLWNvbG9yOiB2YXIoLS1ueC1ibHVlLTcwKTstLWJsb2NrLXByaW1hcnktdGV4dC1jb2xvcjogdmFyKC0tbngtd2hpdGUpOy0tYmxvY2stc2Vjb25kYXJ5LWJhY2tncm91bmQtY29sb3I6IGhzbGEoMGRlZyAwJSAwJSAwJSk7LS1ibG9jay1zZWNvbmRhcnktYm9yZGVyLWNvbG9yOiBoc2xhKDBkZWcgMCUgMCUgMCUpOy0tYmxvY2stc2Vjb25kYXJ5LXRleHQtY29sb3I6IHZhcigtLW54LWdyZXktOTApOy0tYmxvY2stc3VjY2Vzcy1iYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ueC1ncmVlbi01MCk7LS1ibG9jay1zdWNjZXNzLWJvcmRlci1jb2xvcjogdmFyKC0tbngtZ3JlZW4tNjApOy0tYmxvY2stc3VjY2Vzcy10ZXh0LWNvbG9yOiB2YXIoLS1ueC13aGl0ZSk7LS1ibG9jay1lcnJvci1iYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ueC1yZWQtNTApOy0tYmxvY2stZXJyb3ItYm9yZGVyLWNvbG9yOiB2YXIoLS1ueC1yZWQtNjApOy0tYmxvY2stZXJyb3ItdGV4dC1jb2xvcjogdmFyKC0tbngtd2hpdGUpOy0tYmxvY2std2FybmluZy1iYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ueC15ZWxsb3ctNTApOy0tYmxvY2std2FybmluZy1ib3JkZXItY29sb3I6IHZhcigtLW54LXllbGxvdy02MCk7LS1ibG9jay13YXJuaW5nLXRleHQtY29sb3I6IHZhcigtLW54LWdyZXktOTApOy0tYnV0dG9uLXByaW1hcnktaG92ZXItYmFja2dyb3VuZC1jb2xvcjogIzE0NzdkYjstLWJ1dHRvbi1wcmltYXJ5LWhvdmVyLXRleHQtY29sb3I6ICNlMmVlZmE7LS1idXR0b24tc2Vjb25kYXJ5LWJhY2tncm91bmQtY29sb3I6IHZhcigtLW54LXdoaXRlKTstLWJ1dHRvbi1zZWNvbmRhcnktYm9yZGVyLWNvbG9yOiB2YXIoLS1ueC1ncmV5LTEwKTstLWJ1dHRvbi1zZWNvbmRhcnktdGV4dC1jb2xvcjogdmFyKC0tbngtYmx1ZS02MCk7LS1idXR0b24tc2Vjb25kYXJ5LWhvdmVyLWJhY2tncm91bmQtY29sb3I6IHZhcigtLW9ubGlnaHQtaG92ZXItYmFja2dyb3VuZC1jb2xvcik7LS1idXR0b24tc2Vjb25kYXJ5LXNlbGVjdGVkLWJhY2tncm91bmQtY29sb3I6IHZhcigtLW9ubGlnaHQtc2VsZWN0ZWQtYmFja2dyb3VuZC1jb2xvcik7LS1idXR0b24tc2Vjb25kYXJ5LWhvdmVyLXRleHQtY29sb3I6ICMyZjg3ZGY7LS1idXR0b24tdGV4dC1iYWNrZ3JvdW5kLWNvbG9yOiBoc2xhKDBkZWcgMCUgMCUgMCUpOy0tYnV0dG9uLXRleHQtYm9yZGVyLWNvbG9yOiBoc2xhKDBkZWcgMCUgMCUgMCUpOy0tYnV0dG9uLXRleHQtdGV4dC1jb2xvcjogdmFyKC0tbngtYmx1ZS02MCk7LS1idXR0b24tdGV4dC1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1vbmxpZ2h0LWhvdmVyLWJhY2tncm91bmQtY29sb3IpOy0tYnV0dG9uLXRleHQtaG92ZXItdGV4dC1jb2xvcjogdmFyKC0tc2Vjb25kYXJ5LWJ1dHRvbi1ob3Zlci10ZXh0LWNvbG9yKTstLWJ1dHRvbi1kZXN0cnVjdGl2ZS1iYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ueC13aGl0ZSk7LS1idXR0b24tZGVzdHJ1Y3RpdmUtYm9yZGVyLWNvbG9yOiB2YXIoLS1ueC1ncmV5LTEwKTstLWJ1dHRvbi1kZXN0cnVjdGl2ZS10ZXh0LWNvbG9yOiB2YXIoLS1ueC1yZWQtNTApOy0tYnV0dG9uLWRlc3RydWN0aXZlLWhvdmVyLWJhY2tncm91bmQtY29sb3I6IHZhcigtLW9ubGlnaHQtaG92ZXItYmFja2dyb3VuZC1jb2xvcik7LS1idXR0b24tZGVzdHJ1Y3RpdmUtaG92ZXItdGV4dC1jb2xvcjogdmFyKC0tbngtcmVkLTYwKTstLWJ1dHRvbi1kaXNhYmxlZC1iYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ueC1ncmV5LTIwKTstLWJ1dHRvbi1kaXNhYmxlZC1ib3JkZXItY29sb3I6IGhzbGEoMGRlZyAwJSAwJSAwJSk7LS1idXR0b24tZGlzYWJsZWQtdGV4dC1jb2xvcjogdmFyKC0tbngtZ3JleS03MCk7LS1kaXZpZGVyLWxpbmUtY29sb3I6IHZhcigtLW54LWdyZXktMTApOy0taW5wdXQtYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbngtd2hpdGUpOy0taW5wdXQtYm9yZGVyLWNvbG9yOiB2YXIoLS1ueC1ncmV5LTQwKTstLWlucHV0LXRleHQtY29sb3I6IHZhcigtLXByaW1hcnktdGV4dC1jb2xvcik7LS1pbnB1dC1wbGFjZWhvbGRlci10ZXh0LWNvbG9yOiB2YXIoLS1wbGFjZWhvbGRlci10ZXh0LWNvbG9yKTstLWlucHV0LWZvY3VzLWJvcmRlci1jb2xvcjogdmFyKC0tbngtYmx1ZS02MCk7LS1pbnB1dC1lcnJvci1jb2xvcjogdmFyKC0tbngtcmVkLTUwKTstLWlucHV0LWVycm9yLXRleHQtY29sb3I6IHZhcigtLW54LXdoaXRlKTstLWlucHV0LXdhcm5pbmctY29sb3I6IHZhcigtLW54LXllbGxvdy01MCk7LS1pbnB1dC13YXJuaW5nLXRleHQtY29sb3I6IHZhcigtLXByaW1hcnktdGV4dC1jb2xvcik7LS1pbnB1dC1pbmZvcm1hdGlvbi1jb2xvcjogdmFyKC0tbngtYmx1ZS02MCk7LS1pbnB1dC1pbmZvcm1hdGlvbi10ZXh0LWNvbG9yOiB2YXIoLS1ueC13aGl0ZSk7LS1pbnB1dC1kaXNhYmxlZC1iYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ueC1ncmV5LTIwKTstLWlucHV0LWRpc2FibGVkLWJvcmRlci1jb2xvcjogaHNsYSgwZGVnIDAlIDAlIDAlKTstLWlucHV0LWRpc2FibGVkLXRleHQtY29sb3I6IHZhcigtLWRpc2FibGVkLXRleHQtY29sb3IpOy0taW5wdXQteGZpeC1iYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ueC1ncmV5LTIwKTstLWlucHV0LXhmaXgtYm9yZGVyLWNvbG9yOiB2YXIoLS1ueC1ncmV5LTQwKTstLWlucHV0LXhmaXgtdGV4dC1jb2xvcjogdmFyKC0tbngtZ3JleS03MCk7LS1pbnB1dC1waWxscy1iYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ueC13aGl0ZSk7LS1pbnB1dC1waWxscy1ib3JkZXItY29sb3I6IHZhcigtLW54LWdyZXktOTApOy0taW5wdXQtcGlsbHMtdGV4dC1jb2xvcjogdmFyKC0tbngtZ3JleS05MCk7LS1pbnB1dC1ibG9jay11bnNlbGVjdGVkLWJhY2tncm91bmQtY29sb3I6IHZhcigtLW54LXdoaXRlKTstLWlucHV0LWJsb2NrLXVuc2VsZWN0ZWQtYm9yZGVyLWNvbG9yOiB2YXIoLS1ueC1ncmV5LTYwKTstLWlucHV0LWJsb2NrLXVuc2VsZWN0ZWQtZGlzYWJsZWQtYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbngtd2hpdGUpOy0taW5wdXQtYmxvY2stdW5zZWxlY3RlZC1kaXNhYmxlZC1ib3JkZXItY29sb3I6IHZhcigtLW54LWdyZXktNDApOy0taW5wdXQtYmxvY2stc2VsZWN0ZWQtYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbngtYmx1ZS02MCk7LS1pbnB1dC1ibG9jay1zZWxlY3RlZC1ib3JkZXItY29sb3I6IGhzbGEoMGRlZyAwJSAwJSAwJSk7LS1pbnB1dC1ibG9jay1zZWxlY3RlZC1kaXNhYmxlZC1iYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ueC1ncmV5LTQwKTstLWlucHV0LWJsb2NrLXNlbGVjdGVkLWRpc2FibGVkLWJvcmRlci1jb2xvcjogaHNsYSgwZGVnIDAlIDAlIDAlKTstLWlucHV0LWJsb2NrLWhvdmVyLWJhY2tncm91bmQtY29sb3I6IHZhcigtLW9ubGlnaHQtaG92ZXItYmFja2dyb3VuZC1jb2xvcik7LS1saXN0LWdyb3VwLXRleHQtY29sb3I6IHZhcigtLW54LWdyZXktNjApOy0tbGlzdC1pdGVtLWhvdmVyLWJhY2tncm91bmQtY29sb3I6IHZhcigtLW9ubGlnaHQtaG92ZXItYmFja2dyb3VuZC1jb2xvcik7LS1saXN0LWl0ZW0tc2VsZWN0ZWQtYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tb25saWdodC1zZWxlY3RlZC1iYWNrZ3JvdW5kLWNvbG9yKTstLWxpc3QtaXRlbS1zdWJ0ZXh0LWNvbG9yOiB2YXIoLS1ueC1ncmV5LTUwKTstLWxpc3QtYWN0aW9uLWJhY2tncm91bmQtY29sb3I6IHZhcigtLW9ubGlnaHQtaG92ZXItYmFja2dyb3VuZC1jb2xvcik7LS1saXN0LWFjdGlvbi1ib3JkZXItY29sb3I6IHZhcigtLW54LWdyZXktNSk7LS1saXN0LWFjdGlvbi10ZXh0LWNvbG9yOiB2YXIoLS1oeXBlcmxpbmstdGV4dC1jb2xvcik7LS1nbG9iYWwtaGVhZGVyLWJhY2tncm91bmQtY29sb3I6IHZhcigtLW54LWJsdWUtODApfTpyb290ey0tbngtZm9udC1mYW1pbHktYm9keTogT3BlbiBTYW5zLCBoZWx2ZXRpY2EsIGFyaWFsLCBzYW5zLXNlcmlmOy0tbngtZm9udC1mYW1pbHktaGVhZGluZzogTW9udHNlcnJhdCwgaGVsdmV0aWNhLCBhcmlhbCwgc2Fucy1zZXJpZn06cm9vdHstLW5lLXJlZi1jb2xvci12aW9sZXQtMjA6ICNEOUMxRjE7LS1uZS1yZWYtY29sb3ItdmlvbGV0LTYwOiAjN0YzMENGOy0tbmUtcmVmLWNvbG9yLWdyZXktOTAtMjA6ICMxNjE3MTgyMDstLW5lLXJlZi1jb2xvci1ncmVlbi00MDogIzAwRDI1NzstLW5lLXJlZi1jb2xvci1ncmVlbi01MDogIzAwODczODstLW5lLXJlZi1jb2xvci1ncmVlbi02MDogIzAwNmMyZDstLW5lLXJlZi1jb2xvci15ZWxsb3ctNjA6ICNFMUIyMDA7LS1uZS1yZWYtY29sb3IteWVsbG93LTUwOiAjRkZDRjFBOy0tbmUtcmVmLWNvbG9yLXllbGxvdy00MDogI0ZGRDk0ODstLW5lLXJlZi1jb2xvci15ZWxsb3ctMTA6ICNGRkY1RDE7LS1uZS1yZWYtY29sb3ItZ3JleS0wMjogI0ZBRkFGQTstLW5lLXJlZi1jb2xvci1ncmV5LTA1OiAjRUZGMEYwOy0tbmUtcmVmLWNvbG9yLWdyZXktMTA6ICNFMkUzRTQ7LS1uZS1yZWYtY29sb3ItZ3JleS0yMDogI0M0QzdDQTstLW5lLXJlZi1jb2xvci1ncmV5LTMwOiAjQTdBQkFGOy0tbmUtcmVmLWNvbG9yLWdyZXk0MDogIzg5OEY5NDstLW5lLXJlZi1jb2xvci1ncmV5LTUwOiAjNkQ3Mzc5Oy0tbmUtcmVmLWNvbG9yLWdyZXktNjA6ICM1NzVDNjE7LS1uZS1yZWYtY29sb3ItZ3JleS03MDogIzQxNDU0ODstLW5lLXJlZi1jb2xvci1ncmV5LTgwOiAjMkMyRTMwOy0tbmUtcmVmLWNvbG9yLWdyZXktOTA6ICMxNjE3MTg7LS1uZS1yZWYtY29sb3ItcmVkLTEwOiAjRkZDN0M3Oy0tbmUtcmVmLWNvbG9yLXJlZC0yMDogI0ZGOEY4RjstLW5lLXJlZi1jb2xvci1yZWQtMzA6ICNGRjU3NTc7LS1uZS1yZWYtY29sb3ItcmVkLTQwOiAjRkYxRjFGOy0tbmUtcmVmLWNvbG9yLXJlZC01MDogI0U2MDAwMDstLW5lLXJlZi1jb2xvci1yZWQtNjA6ICNCODAwMDA7LS1uZS1yZWYtY29sb3ItcmVkLTcwOiAjN0MwRDBFOy0tbmUtcmVmLWNvbG9yLXJlZC04MDogIzUzMDkwOTstLW5lLXJlZi1jb2xvci1yZWQtOTA6ICMyOTA0MDU7LS1uZS1yZWYtY29sb3ItYmx1ZS0wNTogI0YwRjdGRjstLW5lLXJlZi1jb2xvci1ibHVlLTEwOiAjRDZFQkZGOy0tbmUtcmVmLWNvbG9yLWJsdWUtMjA6ICNBM0QxRkY7LS1uZS1yZWYtY29sb3ItYmx1ZS0zMDogIzcwQjhGRjstLW5lLXJlZi1jb2xvci1ibHVlLTQwOiAjM0Q5RUZGOy0tbmUtcmVmLWNvbG9yLWJsdWUtNTA6ICMwQTg1RkY7LS1uZS1yZWYtY29sb3ItYmx1ZS02MDogIzAwNkJENjstLW5lLXJlZi1jb2xvci1ibHVlLTcwOiAjMDA1MkEzOy0tbmUtcmVmLWNvbG9yLWJsdWUtODA6ICMwMDM4NzA7LS1uZS1yZWYtY29sb3ItYmx1ZS05MDogIzAwMUYzRDstLW5lLXJlZi1jb2xvci1uaW50ZXgtb3JhbmdlOiAjRjU2OTAwOy0tbmUtcmVmLWNvbG9yLXdoaXRlOiAjZmZmZmZmfTpyb290ey0tbmUtcmVmLWJvcmRlci1yYWRpdXMtY2lyY2xlOiA1MCU7LS1uZS1yZWYtYm9yZGVyLXJhZGl1cy1sYXJnZTogMC41ZW07LS1uZS1yZWYtYm9yZGVyLXJhZGl1cy1tZWRpdW06IC4yNWVtOy0tbmUtcmVmLWJvcmRlci1yYWRpdXMtc21hbGw6IDAuMTI1ZW07LS1uZS1yZWYtYm9yZGVyLXJhZGl1cy1ub25lOiAwfTpyb290ey0tbmUtcmVmLXNwYWNpbmcteHh4LWxhcmdlOiAzZW07LS1uZS1yZWYtc3BhY2luZy14eC1sYXJnZTogMi41ZW07LS1uZS1yZWYtc3BhY2luZy14LWxhcmdlOiAyZW07LS1uZS1yZWYtc3BhY2luZy1sYXJnZTogMS41ZW07LS1uZS1yZWYtc3BhY2luZy1tZWRpdW06IDFlbTstLW5lLXJlZi1zcGFjaW5nLXNtYWxsOiAwLjc1ZW07LS1uZS1yZWYtc3BhY2luZy14LXNtYWxsOiAwLjVlbTstLW5lLXJlZi1zcGFjaW5nLXh4LXNtYWxsOiAwLjI1ZW07LS1uZS1yZWYtc3BhY2luZy14eHgtc21hbGw6IDAuMTI1ZW07LS1uZS1yZWYtc3BhY2luZy1ub25lOiAwfTpyb290ey0tbmUtcmVmLWZvbnQtc2l6ZS0wOTogMS43NWVtOy0tbmUtcmVmLWZvbnQtc2l6ZS0wODogMS41ZW07LS1uZS1yZWYtZm9udC1zaXplLTA3OiAxLjI1ZW07LS1uZS1yZWYtZm9udC1zaXplLTA2OiAxLjEyNWVtOy0tbmUtcmVmLWZvbnQtc2l6ZS0wNTogMWVtOy0tbmUtcmVmLWZvbnQtc2l6ZS0wNDogMC44NzVlbTstLW5lLXJlZi1mb250LXNpemUtMDM6IDAuODEyNWVtOy0tbmUtcmVmLWZvbnQtc2l6ZS0wMjogMC43NWVtOy0tbmUtcmVmLWZvbnQtc2l6ZS0wMTogMC42MjVlbTstLW5lLXJlZi1mb250LXNpemUtMTE6IDIuNjI1ZW07LS1uZS1yZWYtZm9udC1zaXplLTEwOiAyZW19OnJvb3R7LS1uZS1yZWYtYm9yZGVyLXdpZHRoLWxhcmdlOiA0cHg7LS1uZS1yZWYtYm9yZGVyLXdpZHRoLW1lZGl1bTogMnB4Oy0tbmUtcmVmLWJvcmRlci13aWR0aC1zbWFsbDogMXB4fTpyb290ey0tbmUtcmVmLXNpemluZy0wOTogMi4yNWVtOy0tbmUtcmVmLXNpemluZy0wODogMmVtOy0tbmUtcmVmLXNpemluZy0wNzogMS43NWVtOy0tbmUtcmVmLXNpemluZy0wNjogMS41ZW07LS1uZS1yZWYtc2l6aW5nLTA1OiAxLjI1ZW07LS1uZS1yZWYtc2l6aW5nLTA0OiAxZW07LS1uZS1yZWYtc2l6aW5nLTAzOiAwLjc1ZW07LS1uZS1yZWYtc2l6aW5nLTAyOiAwLjVlbTstLW5lLXJlZi1zaXppbmctMDE6IDAuMjVlbTstLW5lLXJlZi1zaXppbmctMTQ6IDZlbTstLW5lLXJlZi1zaXppbmctMTM6IDVlbTstLW5lLXJlZi1zaXppbmctMTI6IDRlbTstLW5lLXJlZi1zaXppbmctMTE6IDNlbTstLW5lLXJlZi1zaXppbmctMTA6IDIuNWVtfTpyb290ey0tbmUtcmVmLWZvbnQtd2VpZ2h0LWJvbGQ6IEJvbGQ7LS1uZS1yZWYtZm9udC13ZWlnaHQtc2VtaS1ib2xkOiBTZW1pQm9sZDstLW5lLXJlZi1mb250LXdlaWdodC1yZWd1bGFyOiBSZWd1bGFyfTpyb290ey0tbmUtcmVmLWZvbnQtZmFtaWx5LW1vbnRzZXJyYXQ6IE1vbnRzZXJyYXQ7LS1uZS1yZWYtZm9udC1mYW1pbHktb3Blbi1zYW5zOiBPcGVuIFNhbnN9OnJvb3R7LS1uZS1yZWYtbGluZS1oZWlnaHQtZXhwYW5kZWQ6IDJlbTstLW5lLXJlZi1saW5lLWhlaWdodC1yZWd1bGFyOiAxLjVlbTstLW5lLXJlZi1saW5lLWhlaWdodC1jb25kZW5zZWQ6IDEuMmVtfTpyb290ey0tbmUtcmVmLXBhcmFncmFwaC1zcGFjaW5nLTA3OiAyLjVlbTstLW5lLXJlZi1wYXJhZ3JhcGgtc3BhY2luZy0wNjogMi4yNWVtOy0tbmUtcmVmLXBhcmFncmFwaC1zcGFjaW5nLTA1OiAyZW07LS1uZS1yZWYtcGFyYWdyYXBoLXNwYWNpbmctMDQ6IDEuNzVlbTstLW5lLXJlZi1wYXJhZ3JhcGgtc3BhY2luZy0wMzogMS42MjVlbTstLW5lLXJlZi1wYXJhZ3JhcGgtc3BhY2luZy0wMjogMS41ZW07LS1uZS1yZWYtcGFyYWdyYXBoLXNwYWNpbmctMDE6IDEuMjVlbX06cm9vdHstLW5lLXJlZi1sZXR0ZXItc3BhY2luZy0wOTogMC4yMWVtOy0tbmUtcmVmLWxldHRlci1zcGFjaW5nLTA4OiAwLjE4ZW07LS1uZS1yZWYtbGV0dGVyLXNwYWNpbmctMDc6IDAuMTVlbTstLW5lLXJlZi1sZXR0ZXItc3BhY2luZy0wNjogMC4xMzVlbTstLW5lLXJlZi1sZXR0ZXItc3BhY2luZy0wNTogMC4xMmVtOy0tbmUtcmVmLWxldHRlci1zcGFjaW5nLTA0OiAwLjEwNWVtOy0tbmUtcmVmLWxldHRlci1zcGFjaW5nLTAzOiAwLjA5NzVlbTstLW5lLXJlZi1sZXR0ZXItc3BhY2luZy0wMjogMC4wOWVtOy0tbmUtcmVmLWxldHRlci1zcGFjaW5nLTAxOiAwLjA3NWVtOy0tbmUtcmVmLWxldHRlci1zcGFjaW5nLTExOiAwLjMxNWVtOy0tbmUtcmVmLWxldHRlci1zcGFjaW5nLTEwOiAwLjI0ZW19OnJvb3R7LS1uZS1yZWYtdGV4dC1kZWNvcmF0aW9uLXVuZGVybGluZTogdW5kZXJsaW5lOy0tbmUtcmVmLXRleHQtZGVjb3JhdGlvbi1ub25lOiBub25lfTpyb290ey0tbmUtcmVmLXNoYWRvdy1sZXZlbDI6IDBweCAwcHggOHB4IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTkwLTIwKTstLW5lLXJlZi1zaGFkb3ctbGV2ZWwxOiAwcHggMHB4IDhweCB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS05MC0yMCl9OnJvb3R7LS1uZS1hbGlhcy1jb2xvci1oaWdobGlnaHQ6IHZhcigtLW5lLXJlZi1jb2xvci1uaW50ZXgtb3JhbmdlKTstLW5lLWFsaWFzLWNvbG9yLWljb24td2hpdGU6IHZhcigtLW5lLXJlZi1jb2xvci13aGl0ZSk7LS1uZS1hbGlhcy1jb2xvci1pY29uLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTkwKTstLW5lLWFsaWFzLWNvbG9yLXN0YXR1cy1zdWNjZXNzLWxpZ2h0OiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JlZW4tNDApOy0tbmUtYWxpYXMtY29sb3Itc3RhdHVzLXN1Y2Nlc3MtZGVmYXVsdDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZWVuLTUwKTstLW5lLWFsaWFzLWNvbG9yLXN0YXR1cy1zdWNjZXNzLWRhcms6IHZhcigtLW5lLXJlZi1jb2xvci1ncmVlbi02MCk7LS1uZS1hbGlhcy1jb2xvci1zdGF0dXMtaW5mby1saWdodDogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtNTApOy0tbmUtYWxpYXMtY29sb3Itc3RhdHVzLWluZm8tZGVmYXVsdDogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtNjApOy0tbmUtYWxpYXMtY29sb3Itc3RhdHVzLWluZm8tZGFyazogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtNzApOy0tbmUtYWxpYXMtY29sb3Itc3RhdHVzLWFjdGl2ZS1saWdodGVyOiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS00MCk7LS1uZS1hbGlhcy1jb2xvci1zdGF0dXMtYWN0aXZlLWxpZ2h0OiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS01MCk7LS1uZS1hbGlhcy1jb2xvci1zdGF0dXMtYWN0aXZlLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTYwKTstLW5lLWFsaWFzLWNvbG9yLXN0YXR1cy13YXJuaW5nLWxpZ2h0OiB2YXIoLS1uZS1yZWYtY29sb3IteWVsbG93LTQwKTstLW5lLWFsaWFzLWNvbG9yLXN0YXR1cy13YXJuaW5nLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci15ZWxsb3ctNTApOy0tbmUtYWxpYXMtY29sb3Itc3RhdHVzLXdhcm5pbmctZGFyazogdmFyKC0tbmUtcmVmLWNvbG9yLXllbGxvdy02MCk7LS1uZS1hbGlhcy1jb2xvci1zdGF0dXMtZXJyb3ItbGlnaHQ6IHZhcigtLW5lLXJlZi1jb2xvci1yZWQtNDApOy0tbmUtYWxpYXMtY29sb3Itc3RhdHVzLWVycm9yLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci1yZWQtNTApOy0tbmUtYWxpYXMtY29sb3Itc3RhdHVzLWVycm9yLWRhcms6IHZhcigtLW5lLXJlZi1jb2xvci1yZWQtNjApOy0tbmUtYWxpYXMtY29sb3ItZGVzdHJ1Y3RpdmUtbGlnaHQ6IHZhcigtLW5lLXJlZi1jb2xvci1yZWQtNDApOy0tbmUtYWxpYXMtY29sb3ItZGVzdHJ1Y3RpdmUtZGVmYXVsdDogdmFyKC0tbmUtcmVmLWNvbG9yLXJlZC02MCk7LS1uZS1hbGlhcy1jb2xvci1kZXN0cnVjdGl2ZS1kYXJrOiB2YXIoLS1uZS1yZWYtY29sb3ItcmVkLTcwKTstLW5lLWFsaWFzLWNvbG9yLXN0YXRlLWZvY3VzLW9uLXJlZDogdmFyKC0tbmUtcmVmLWNvbG9yLXJlZC03MCk7LS1uZS1hbGlhcy1jb2xvci1zdGF0ZS1mb2N1cy1vbi13aGl0ZTogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtMDUpOy0tbmUtYWxpYXMtY29sb3Itc3RhdGUtaG92ZXItb24tcmVkOiB2YXIoLS1uZS1yZWYtY29sb3ItcmVkLTcwKTstLW5lLWFsaWFzLWNvbG9yLXN0YXRlLWhvdmVyLW9uLXdoaXRlOiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS0wNSk7LS1uZS1hbGlhcy1jb2xvci1zdGF0ZS1kaXNhYmxlZC1kYXJrOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS05MCk7LS1uZS1hbGlhcy1jb2xvci1zdGF0ZS1kaXNhYmxlZC1kZWZhdWx0OiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS01MCk7LS1uZS1hbGlhcy1jb2xvci1zdGF0ZS1kaXNhYmxlZC1saWdodDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktMzApOy0tbmUtYWxpYXMtY29sb3ItYWNjZW50LWxpZ2h0OiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS01MCk7LS1uZS1hbGlhcy1jb2xvci1hY2NlbnQtZGVmYXVsdDogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtNjApOy0tbmUtYWxpYXMtY29sb3ItYWNjZW50LWRhcms6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTcwKTstLW5lLWFsaWFzLWNvbG9yLXRleHQtbGlnaHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTYwKTstLW5lLWFsaWFzLWNvbG9yLXRleHQtZGVmYXVsdDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktOTApOy0tbmUtYWxpYXMtY29sb3ItdGV4dC1saWdodC10ZXh0LW9uLWRhcmstYmc6IHZhcigtLW5lLXJlZi1jb2xvci13aGl0ZSk7LS1uZS1hbGlhcy1jb2xvci1zdGF0ZS1mb2N1cy1vbi1ibHVlOiB2YXIoLS1uZS1hbGlhcy1jb2xvci1hY2NlbnQtZGFyayk7LS1uZS1hbGlhcy1jb2xvci1zdGF0ZS1ob3Zlci1vbi1ibHVlOiB2YXIoLS1uZS1hbGlhcy1jb2xvci1hY2NlbnQtZGFyayl9OnJvb3R7LS1uZS1hbGlhcy1mb250LWZhbWlseS10aXRsZTogdmFyKC0tbmUtcmVmLWZvbnQtZmFtaWx5LW1vbnRzZXJyYXQpOy0tbmUtYWxpYXMtZm9udC1mYW1pbHktYm9keTogdmFyKC0tbmUtcmVmLWZvbnQtZmFtaWx5LW9wZW4tc2Fucyl9OnJvb3R7LS1uZS1hbGlhcy1mb250LXNpemUtdGl0bGU6IHZhcigtLW5lLXJlZi1mb250LXNpemUtMDYpOy0tbmUtYWxpYXMtZm9udC1zaXplLXN1YnRleHQ6IHZhcigtLW5lLXJlZi1mb250LXNpemUtMDIpOy0tbmUtYWxpYXMtZm9udC1zaXplLWJvZHk6IHZhcigtLW5lLXJlZi1mb250LXNpemUtMDQpfTpyb290ey0tbmUtYWxpYXMtYm9yZGVyLXdpZHRoLWZvY3VzOiB2YXIoLS1uZS1yZWYtYm9yZGVyLXdpZHRoLWxhcmdlKTstLW5lLWFsaWFzLWJvcmRlci13aWR0aC1kZWZhdWx0OiB2YXIoLS1uZS1yZWYtYm9yZGVyLXdpZHRoLXNtYWxsKX06cm9vdHstLW5lLWFsaWFzLXNpemluZy1pY29uLXh4LWxhcmdlOiB2YXIoLS1uZS1yZWYtc2l6aW5nLTExKTstLW5lLWFsaWFzLXNpemluZy1pY29uLXgtbGFyZ2U6IHZhcigtLW5lLXJlZi1zaXppbmctMDgpOy0tbmUtYWxpYXMtc2l6aW5nLWljb24tbGFyZ2U6IHZhcigtLW5lLXJlZi1zaXppbmctMDYpOy0tbmUtYWxpYXMtc2l6aW5nLWljb24tZGVmYXVsdDogdmFyKC0tbmUtcmVmLXNpemluZy0wNCk7LS1uZS1hbGlhcy1zaXppbmctaWNvbi1zbWFsbDogdmFyKC0tbmUtcmVmLXNpemluZy0wMil9OnJvb3R7LS1uZS1hbGlhcy1ib3JkZXItZm9jdXM6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTIwKTstLW5lLWFsaWFzLWJvcmRlci1kYXJrLWdyZXk6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5NDApOy0tbmUtYWxpYXMtYm9yZGVyLWdyZXk6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTEwKX1cblxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZWFydGhsaW5nLWJhc2UubWluLmNzcy5tYXAgKi9gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcImZpbGU6Ly8vaG9tZS9ydW5uZXIvd29yay9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9wYWNrYWdlcy9zdHlsZXMvc3JjL3Njc3MvdHlwb2dyYXBoeS5zY3NzXCIsXCJmaWxlOi8vL2hvbWUvcnVubmVyL3dvcmsvZWFydGhsaW5nLWRlc2lnbi1zeXN0ZW0vZWFydGhsaW5nLWRlc2lnbi1zeXN0ZW0vcGFja2FnZXMvc3R5bGVzL3NyYy9zY3NzL2NvbG9yLnNjc3NcIixcImZpbGU6Ly8vaG9tZS9ydW5uZXIvd29yay9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9wYWNrYWdlcy9zdHlsZXMvc3JjL3Njc3MvdG9rZW5zL3JlZi1jb2xvci5zY3NzXCIsXCJmaWxlOi8vL2hvbWUvcnVubmVyL3dvcmsvZWFydGhsaW5nLWRlc2lnbi1zeXN0ZW0vZWFydGhsaW5nLWRlc2lnbi1zeXN0ZW0vcGFja2FnZXMvc3R5bGVzL3NyYy9zY3NzL3Rva2Vucy9yZWYtYm9yZGVyLXJhZGl1cy5zY3NzXCIsXCJmaWxlOi8vL2hvbWUvcnVubmVyL3dvcmsvZWFydGhsaW5nLWRlc2lnbi1zeXN0ZW0vZWFydGhsaW5nLWRlc2lnbi1zeXN0ZW0vcGFja2FnZXMvc3R5bGVzL3NyYy9zY3NzL3Rva2Vucy9yZWYtc3BhY2luZy5zY3NzXCIsXCJmaWxlOi8vL2hvbWUvcnVubmVyL3dvcmsvZWFydGhsaW5nLWRlc2lnbi1zeXN0ZW0vZWFydGhsaW5nLWRlc2lnbi1zeXN0ZW0vcGFja2FnZXMvc3R5bGVzL3NyYy9zY3NzL3Rva2Vucy9yZWYtZm9udC1zaXplLnNjc3NcIixcImZpbGU6Ly8vaG9tZS9ydW5uZXIvd29yay9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9wYWNrYWdlcy9zdHlsZXMvc3JjL3Njc3MvdG9rZW5zL3JlZi1ib3JkZXItd2lkdGguc2Nzc1wiLFwiZmlsZTovLy9ob21lL3J1bm5lci93b3JrL2VhcnRobGluZy1kZXNpZ24tc3lzdGVtL2VhcnRobGluZy1kZXNpZ24tc3lzdGVtL3BhY2thZ2VzL3N0eWxlcy9zcmMvc2Nzcy90b2tlbnMvcmVmLXNpemluZy5zY3NzXCIsXCJmaWxlOi8vL2hvbWUvcnVubmVyL3dvcmsvZWFydGhsaW5nLWRlc2lnbi1zeXN0ZW0vZWFydGhsaW5nLWRlc2lnbi1zeXN0ZW0vcGFja2FnZXMvc3R5bGVzL3NyYy9zY3NzL3Rva2Vucy9yZWYtZm9udC13ZWlnaHQuc2Nzc1wiLFwiZmlsZTovLy9ob21lL3J1bm5lci93b3JrL2VhcnRobGluZy1kZXNpZ24tc3lzdGVtL2VhcnRobGluZy1kZXNpZ24tc3lzdGVtL3BhY2thZ2VzL3N0eWxlcy9zcmMvc2Nzcy90b2tlbnMvcmVmLWZvbnQtZmFtaWx5LnNjc3NcIixcImZpbGU6Ly8vaG9tZS9ydW5uZXIvd29yay9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9wYWNrYWdlcy9zdHlsZXMvc3JjL3Njc3MvdG9rZW5zL3JlZi1saW5lLWhlaWdodC5zY3NzXCIsXCJmaWxlOi8vL2hvbWUvcnVubmVyL3dvcmsvZWFydGhsaW5nLWRlc2lnbi1zeXN0ZW0vZWFydGhsaW5nLWRlc2lnbi1zeXN0ZW0vcGFja2FnZXMvc3R5bGVzL3NyYy9zY3NzL3Rva2Vucy9yZWYtcGFyYWdyYXBoLXNwYWNpbmcuc2Nzc1wiLFwiZmlsZTovLy9ob21lL3J1bm5lci93b3JrL2VhcnRobGluZy1kZXNpZ24tc3lzdGVtL2VhcnRobGluZy1kZXNpZ24tc3lzdGVtL3BhY2thZ2VzL3N0eWxlcy9zcmMvc2Nzcy90b2tlbnMvcmVmLWxldHRlci1zcGFjaW5nLnNjc3NcIixcImZpbGU6Ly8vaG9tZS9ydW5uZXIvd29yay9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9wYWNrYWdlcy9zdHlsZXMvc3JjL3Njc3MvdG9rZW5zL3JlZi10ZXh0LWRlY29yYXRpb24uc2Nzc1wiLFwiZmlsZTovLy9ob21lL3J1bm5lci93b3JrL2VhcnRobGluZy1kZXNpZ24tc3lzdGVtL2VhcnRobGluZy1kZXNpZ24tc3lzdGVtL3BhY2thZ2VzL3N0eWxlcy9zcmMvc2Nzcy90b2tlbnMvcmVmLXNoYWRvdy5zY3NzXCIsXCJmaWxlOi8vL2hvbWUvcnVubmVyL3dvcmsvZWFydGhsaW5nLWRlc2lnbi1zeXN0ZW0vZWFydGhsaW5nLWRlc2lnbi1zeXN0ZW0vcGFja2FnZXMvc3R5bGVzL3NyYy9zY3NzL3Rva2Vucy9hbGlhcy1jb2xvci5zY3NzXCIsXCJmaWxlOi8vL2hvbWUvcnVubmVyL3dvcmsvZWFydGhsaW5nLWRlc2lnbi1zeXN0ZW0vZWFydGhsaW5nLWRlc2lnbi1zeXN0ZW0vcGFja2FnZXMvc3R5bGVzL3NyYy9zY3NzL3Rva2Vucy9hbGlhcy1mb250LWZhbWlseS5zY3NzXCIsXCJmaWxlOi8vL2hvbWUvcnVubmVyL3dvcmsvZWFydGhsaW5nLWRlc2lnbi1zeXN0ZW0vZWFydGhsaW5nLWRlc2lnbi1zeXN0ZW0vcGFja2FnZXMvc3R5bGVzL3NyYy9zY3NzL3Rva2Vucy9hbGlhcy1mb250LXNpemUuc2Nzc1wiLFwiZmlsZTovLy9ob21lL3J1bm5lci93b3JrL2VhcnRobGluZy1kZXNpZ24tc3lzdGVtL2VhcnRobGluZy1kZXNpZ24tc3lzdGVtL3BhY2thZ2VzL3N0eWxlcy9zcmMvc2Nzcy90b2tlbnMvYWxpYXMtYm9yZGVyLXdpZHRoLnNjc3NcIixcImZpbGU6Ly8vaG9tZS9ydW5uZXIvd29yay9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9lYXJ0aGxpbmctZGVzaWduLXN5c3RlbS9wYWNrYWdlcy9zdHlsZXMvc3JjL3Njc3MvdG9rZW5zL2FsaWFzLXNpemluZy5zY3NzXCIsXCJmaWxlOi8vL2hvbWUvcnVubmVyL3dvcmsvZWFydGhsaW5nLWRlc2lnbi1zeXN0ZW0vZWFydGhsaW5nLWRlc2lnbi1zeXN0ZW0vcGFja2FnZXMvc3R5bGVzL3NyYy9zY3NzL3Rva2Vucy9hbGlhcy1ib3JkZXIuc2Nzc1wiLFwid2VicGFjazovLy4vLi4vLi4vbm9kZV9tb2R1bGVzL0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLXN0eWxlcy9kaXN0L2VhcnRobGluZy1iYXNlLm1pbi5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQVEsTUNFTixxQkFBQSxDQUNBLGdCQUFBLENBQ0EsdUJB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Q0NQRixNQUNFLGtDQUFBLENBQ0Esa0NBQUEsQ0FDQSxrQ0FBQSxDQUNBLG1DQUFBLENBQ0Esa0NBQUEsQ0FDQSxtQ0FBQSxDQUNBLG9DQUFBLENBQ0Esa0NBQUEsQ0FDQSxtQ0FBQSxDQUNBLG1DQUFBLENBQ0Esa0NBQUEsQ0NYRixNQUNFLDZDQUFBLENBQ0EsbUNBQUEsQ0NGRixNQUNFLGtFQUFBLENBQ0Esa0VBQUEsQ0NGRixNQUNFLDZEQUFBLENBQ0Esc0RBQUEsQ0FDQSwwREFBQSxDQUNBLG1FQUFBLENBQ0EscUVBQUEsQ0FDQSxrRUFBQSxDQUNBLCtEQUFBLENBQ0EsaUVBQUEsQ0FDQSw4REFBQSxDQUNBLG1FQUFBLENBQ0EsaUVBQUEsQ0FDQSxtRUFBQSxDQUNBLG9FQUFBLENBQ0Esc0VBQUEsQ0FDQSxtRUFBQSxDQUNBLCtEQUFBLENBQ0EsaUVBQUEsQ0FDQSw4REFBQSxDQUNBLDhEQUFBLENBQ0EsZ0VBQUEsQ0FDQSw2REFBQSxDQUNBLCtEQUFBLENBQ0Esa0VBQUEsQ0FDQSwrREFBQSxDQUNBLGtFQUFBLENBQ0EsaUVBQUEsQ0FDQSxvRUFBQSxDQUNBLGtFQUFBLENBQ0EsMERBQUEsQ0FDQSw0REFBQSxDQUNBLHlEQUFBLENBQ0Esd0RBQUEsQ0FDQSwwREFBQSxDQUNBLHNFQUFBLENBQ0EsdUVBQUEsQ0FDQSx1RUFBQSxDQ3BDRixNQUNFLGtFQUFBLENBQ0EsZ0VBQUEsQ0NGRixNQUNFLHNEQUFBLENBQ0Esd0RBQUEsQ0FDQSxxREFBQSxDQ0hGLE1BQ0UsK0RBQUEsQ0FDQSxpRUFBQSxDQ0ZGLE1BQ0Usd0RBQUEsQ0FDQSx1REFBQSxDQUNBLHFEQUFBLENBQ0EsdURBQUEsQ0FDQSxxREFBQSxDQ0xGLE1BQ0Usb0RBQUEsQ0FDQSx1REFBQSxDQUNBLG1EQUFBOztBQ05GLGlEQUFpRFwiLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsImZ1bmN0aW9uIHdlYnBhY2tFbXB0eUFzeW5jQ29udGV4dChyZXEpIHtcblx0Ly8gSGVyZSBQcm9taXNlLnJlc29sdmUoKS50aGVuKCkgaXMgdXNlZCBpbnN0ZWFkIG9mIG5ldyBQcm9taXNlKCkgdG8gcHJldmVudFxuXHQvLyB1bmNhdWdodCBleGNlcHRpb24gcG9wcGluZyB1cCBpbiBkZXZ0b29sc1xuXHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9KTtcbn1cbndlYnBhY2tFbXB0eUFzeW5jQ29udGV4dC5rZXlzID0gKCkgPT4gKFtdKTtcbndlYnBhY2tFbXB0eUFzeW5jQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0VtcHR5QXN5bmNDb250ZXh0O1xud2VicGFja0VtcHR5QXN5bmNDb250ZXh0LmlkID0gOTY3MTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0VtcHR5QXN5bmNDb250ZXh0OyIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuY29uc3QgdD13aW5kb3csZT10LlNoYWRvd1Jvb3QmJih2b2lkIDA9PT10LlNoYWR5Q1NTfHx0LlNoYWR5Q1NTLm5hdGl2ZVNoYWRvdykmJlwiYWRvcHRlZFN0eWxlU2hlZXRzXCJpbiBEb2N1bWVudC5wcm90b3R5cGUmJlwicmVwbGFjZVwiaW4gQ1NTU3R5bGVTaGVldC5wcm90b3R5cGUscz1TeW1ib2woKSxuPW5ldyBXZWFrTWFwO2NsYXNzIG97Y29uc3RydWN0b3IodCxlLG4pe2lmKHRoaXMuXyRjc3NSZXN1bHQkPSEwLG4hPT1zKXRocm93IEVycm9yKFwiQ1NTUmVzdWx0IGlzIG5vdCBjb25zdHJ1Y3RhYmxlLiBVc2UgYHVuc2FmZUNTU2Agb3IgYGNzc2AgaW5zdGVhZC5cIik7dGhpcy5jc3NUZXh0PXQsdGhpcy50PWV9Z2V0IHN0eWxlU2hlZXQoKXtsZXQgdD10aGlzLm87Y29uc3Qgcz10aGlzLnQ7aWYoZSYmdm9pZCAwPT09dCl7Y29uc3QgZT12b2lkIDAhPT1zJiYxPT09cy5sZW5ndGg7ZSYmKHQ9bi5nZXQocykpLHZvaWQgMD09PXQmJigodGhpcy5vPXQ9bmV3IENTU1N0eWxlU2hlZXQpLnJlcGxhY2VTeW5jKHRoaXMuY3NzVGV4dCksZSYmbi5zZXQocyx0KSl9cmV0dXJuIHR9dG9TdHJpbmcoKXtyZXR1cm4gdGhpcy5jc3NUZXh0fX1jb25zdCByPXQ9Pm5ldyBvKFwic3RyaW5nXCI9PXR5cGVvZiB0P3Q6dCtcIlwiLHZvaWQgMCxzKSxpPSh0LC4uLmUpPT57Y29uc3Qgbj0xPT09dC5sZW5ndGg/dFswXTplLnJlZHVjZSgoKGUscyxuKT0+ZSsodD0+e2lmKCEwPT09dC5fJGNzc1Jlc3VsdCQpcmV0dXJuIHQuY3NzVGV4dDtpZihcIm51bWJlclwiPT10eXBlb2YgdClyZXR1cm4gdDt0aHJvdyBFcnJvcihcIlZhbHVlIHBhc3NlZCB0byAnY3NzJyBmdW5jdGlvbiBtdXN0IGJlIGEgJ2NzcycgZnVuY3Rpb24gcmVzdWx0OiBcIit0K1wiLiBVc2UgJ3Vuc2FmZUNTUycgdG8gcGFzcyBub24tbGl0ZXJhbCB2YWx1ZXMsIGJ1dCB0YWtlIGNhcmUgdG8gZW5zdXJlIHBhZ2Ugc2VjdXJpdHkuXCIpfSkocykrdFtuKzFdKSx0WzBdKTtyZXR1cm4gbmV3IG8obix0LHMpfSxTPShzLG4pPT57ZT9zLmFkb3B0ZWRTdHlsZVNoZWV0cz1uLm1hcCgodD0+dCBpbnN0YW5jZW9mIENTU1N0eWxlU2hlZXQ/dDp0LnN0eWxlU2hlZXQpKTpuLmZvckVhY2goKGU9Pntjb25zdCBuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKSxvPXQubGl0Tm9uY2U7dm9pZCAwIT09byYmbi5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLG8pLG4udGV4dENvbnRlbnQ9ZS5jc3NUZXh0LHMuYXBwZW5kQ2hpbGQobil9KSl9LGM9ZT90PT50OnQ9PnQgaW5zdGFuY2VvZiBDU1NTdHlsZVNoZWV0Pyh0PT57bGV0IGU9XCJcIjtmb3IoY29uc3QgcyBvZiB0LmNzc1J1bGVzKWUrPXMuY3NzVGV4dDtyZXR1cm4gcihlKX0pKHQpOnQ7ZXhwb3J0e28gYXMgQ1NTUmVzdWx0LFMgYXMgYWRvcHRTdHlsZXMsaSBhcyBjc3MsYyBhcyBnZXRDb21wYXRpYmxlU3R5bGUsZSBhcyBzdXBwb3J0c0Fkb3B0aW5nU3R5bGVTaGVldHMsciBhcyB1bnNhZmVDU1N9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3NzLXRhZy5qcy5tYXBcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xudmFyIHQ7Y29uc3QgaT13aW5kb3cscz1pLnRydXN0ZWRUeXBlcyxlPXM/cy5jcmVhdGVQb2xpY3koXCJsaXQtaHRtbFwiLHtjcmVhdGVIVE1MOnQ9PnR9KTp2b2lkIDAsbz1cIiRsaXQkXCIsbj1gbGl0JCR7KE1hdGgucmFuZG9tKCkrXCJcIikuc2xpY2UoOSl9JGAsbD1cIj9cIituLGg9YDwke2x9PmAscj1kb2N1bWVudCx1PSgpPT5yLmNyZWF0ZUNvbW1lbnQoXCJcIiksZD10PT5udWxsPT09dHx8XCJvYmplY3RcIiE9dHlwZW9mIHQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQsYz1BcnJheS5pc0FycmF5LHY9dD0+Yyh0KXx8XCJmdW5jdGlvblwiPT10eXBlb2YobnVsbD09dD92b2lkIDA6dFtTeW1ib2wuaXRlcmF0b3JdKSxhPVwiWyBcXHRcXG5cXGZcXHJdXCIsZj0vPCg/OighLS18XFwvW15hLXpBLVpdKXwoXFwvP1thLXpBLVpdW14+XFxzXSopfChcXC8/JCkpL2csXz0vLS0+L2csbT0vPi9nLHA9UmVnRXhwKGA+fCR7YX0oPzooW15cXFxcc1wiJz49L10rKSgke2F9Kj0ke2F9Kig/OlteIFxcdFxcblxcZlxcclwiJ1xcYDw+PV18KFwifCcpfCkpfCQpYCxcImdcIiksZz0vJy9nLCQ9L1wiL2cseT0vXig/OnNjcmlwdHxzdHlsZXx0ZXh0YXJlYXx0aXRsZSkkL2ksdz10PT4oaSwuLi5zKT0+KHtfJGxpdFR5cGUkOnQsc3RyaW5nczppLHZhbHVlczpzfSkseD13KDEpLGI9dygyKSxUPVN5bWJvbC5mb3IoXCJsaXQtbm9DaGFuZ2VcIiksQT1TeW1ib2wuZm9yKFwibGl0LW5vdGhpbmdcIiksRT1uZXcgV2Vha01hcCxDPXIuY3JlYXRlVHJlZVdhbGtlcihyLDEyOSxudWxsLCExKTtmdW5jdGlvbiBQKHQsaSl7aWYoIUFycmF5LmlzQXJyYXkodCl8fCF0Lmhhc093blByb3BlcnR5KFwicmF3XCIpKXRocm93IEVycm9yKFwiaW52YWxpZCB0ZW1wbGF0ZSBzdHJpbmdzIGFycmF5XCIpO3JldHVybiB2b2lkIDAhPT1lP2UuY3JlYXRlSFRNTChpKTppfWNvbnN0IFY9KHQsaSk9Pntjb25zdCBzPXQubGVuZ3RoLTEsZT1bXTtsZXQgbCxyPTI9PT1pP1wiPHN2Zz5cIjpcIlwiLHU9Zjtmb3IobGV0IGk9MDtpPHM7aSsrKXtjb25zdCBzPXRbaV07bGV0IGQsYyx2PS0xLGE9MDtmb3IoO2E8cy5sZW5ndGgmJih1Lmxhc3RJbmRleD1hLGM9dS5leGVjKHMpLG51bGwhPT1jKTspYT11Lmxhc3RJbmRleCx1PT09Zj9cIiEtLVwiPT09Y1sxXT91PV86dm9pZCAwIT09Y1sxXT91PW06dm9pZCAwIT09Y1syXT8oeS50ZXN0KGNbMl0pJiYobD1SZWdFeHAoXCI8L1wiK2NbMl0sXCJnXCIpKSx1PXApOnZvaWQgMCE9PWNbM10mJih1PXApOnU9PT1wP1wiPlwiPT09Y1swXT8odT1udWxsIT1sP2w6Zix2PS0xKTp2b2lkIDA9PT1jWzFdP3Y9LTI6KHY9dS5sYXN0SW5kZXgtY1syXS5sZW5ndGgsZD1jWzFdLHU9dm9pZCAwPT09Y1szXT9wOidcIic9PT1jWzNdPyQ6Zyk6dT09PSR8fHU9PT1nP3U9cDp1PT09X3x8dT09PW0/dT1mOih1PXAsbD12b2lkIDApO2NvbnN0IHc9dT09PXAmJnRbaSsxXS5zdGFydHNXaXRoKFwiLz5cIik/XCIgXCI6XCJcIjtyKz11PT09Zj9zK2g6dj49MD8oZS5wdXNoKGQpLHMuc2xpY2UoMCx2KStvK3Muc2xpY2Uodikrbit3KTpzK24rKC0yPT09dj8oZS5wdXNoKHZvaWQgMCksaSk6dyl9cmV0dXJuW1AodCxyKyh0W3NdfHxcIjw/PlwiKSsoMj09PWk/XCI8L3N2Zz5cIjpcIlwiKSksZV19O2NsYXNzIE57Y29uc3RydWN0b3Ioe3N0cmluZ3M6dCxfJGxpdFR5cGUkOml9LGUpe2xldCBoO3RoaXMucGFydHM9W107bGV0IHI9MCxkPTA7Y29uc3QgYz10Lmxlbmd0aC0xLHY9dGhpcy5wYXJ0cyxbYSxmXT1WKHQsaSk7aWYodGhpcy5lbD1OLmNyZWF0ZUVsZW1lbnQoYSxlKSxDLmN1cnJlbnROb2RlPXRoaXMuZWwuY29udGVudCwyPT09aSl7Y29uc3QgdD10aGlzLmVsLmNvbnRlbnQsaT10LmZpcnN0Q2hpbGQ7aS5yZW1vdmUoKSx0LmFwcGVuZCguLi5pLmNoaWxkTm9kZXMpfWZvcig7bnVsbCE9PShoPUMubmV4dE5vZGUoKSkmJnYubGVuZ3RoPGM7KXtpZigxPT09aC5ub2RlVHlwZSl7aWYoaC5oYXNBdHRyaWJ1dGVzKCkpe2NvbnN0IHQ9W107Zm9yKGNvbnN0IGkgb2YgaC5nZXRBdHRyaWJ1dGVOYW1lcygpKWlmKGkuZW5kc1dpdGgobyl8fGkuc3RhcnRzV2l0aChuKSl7Y29uc3Qgcz1mW2QrK107aWYodC5wdXNoKGkpLHZvaWQgMCE9PXMpe2NvbnN0IHQ9aC5nZXRBdHRyaWJ1dGUocy50b0xvd2VyQ2FzZSgpK28pLnNwbGl0KG4pLGk9LyhbLj9AXSk/KC4qKS8uZXhlYyhzKTt2LnB1c2goe3R5cGU6MSxpbmRleDpyLG5hbWU6aVsyXSxzdHJpbmdzOnQsY3RvcjpcIi5cIj09PWlbMV0/SDpcIj9cIj09PWlbMV0/TDpcIkBcIj09PWlbMV0/ejprfSl9ZWxzZSB2LnB1c2goe3R5cGU6NixpbmRleDpyfSl9Zm9yKGNvbnN0IGkgb2YgdCloLnJlbW92ZUF0dHJpYnV0ZShpKX1pZih5LnRlc3QoaC50YWdOYW1lKSl7Y29uc3QgdD1oLnRleHRDb250ZW50LnNwbGl0KG4pLGk9dC5sZW5ndGgtMTtpZihpPjApe2gudGV4dENvbnRlbnQ9cz9zLmVtcHR5U2NyaXB0OlwiXCI7Zm9yKGxldCBzPTA7czxpO3MrKyloLmFwcGVuZCh0W3NdLHUoKSksQy5uZXh0Tm9kZSgpLHYucHVzaCh7dHlwZToyLGluZGV4Oisrcn0pO2guYXBwZW5kKHRbaV0sdSgpKX19fWVsc2UgaWYoOD09PWgubm9kZVR5cGUpaWYoaC5kYXRhPT09bCl2LnB1c2goe3R5cGU6MixpbmRleDpyfSk7ZWxzZXtsZXQgdD0tMTtmb3IoOy0xIT09KHQ9aC5kYXRhLmluZGV4T2Yobix0KzEpKTspdi5wdXNoKHt0eXBlOjcsaW5kZXg6cn0pLHQrPW4ubGVuZ3RoLTF9cisrfX1zdGF0aWMgY3JlYXRlRWxlbWVudCh0LGkpe2NvbnN0IHM9ci5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIik7cmV0dXJuIHMuaW5uZXJIVE1MPXQsc319ZnVuY3Rpb24gUyh0LGkscz10LGUpe3ZhciBvLG4sbCxoO2lmKGk9PT1UKXJldHVybiBpO2xldCByPXZvaWQgMCE9PWU/bnVsbD09PShvPXMuXyRDbyl8fHZvaWQgMD09PW8/dm9pZCAwOm9bZV06cy5fJENsO2NvbnN0IHU9ZChpKT92b2lkIDA6aS5fJGxpdERpcmVjdGl2ZSQ7cmV0dXJuKG51bGw9PXI/dm9pZCAwOnIuY29uc3RydWN0b3IpIT09dSYmKG51bGw9PT0obj1udWxsPT1yP3ZvaWQgMDpyLl8kQU8pfHx2b2lkIDA9PT1ufHxuLmNhbGwociwhMSksdm9pZCAwPT09dT9yPXZvaWQgMDoocj1uZXcgdSh0KSxyLl8kQVQodCxzLGUpKSx2b2lkIDAhPT1lPyhudWxsIT09KGw9KGg9cykuXyRDbykmJnZvaWQgMCE9PWw/bDpoLl8kQ289W10pW2VdPXI6cy5fJENsPXIpLHZvaWQgMCE9PXImJihpPVModCxyLl8kQVModCxpLnZhbHVlcykscixlKSksaX1jbGFzcyBNe2NvbnN0cnVjdG9yKHQsaSl7dGhpcy5fJEFWPVtdLHRoaXMuXyRBTj12b2lkIDAsdGhpcy5fJEFEPXQsdGhpcy5fJEFNPWl9Z2V0IHBhcmVudE5vZGUoKXtyZXR1cm4gdGhpcy5fJEFNLnBhcmVudE5vZGV9Z2V0IF8kQVUoKXtyZXR1cm4gdGhpcy5fJEFNLl8kQVV9dSh0KXt2YXIgaTtjb25zdHtlbDp7Y29udGVudDpzfSxwYXJ0czplfT10aGlzLl8kQUQsbz0obnVsbCE9PShpPW51bGw9PXQ/dm9pZCAwOnQuY3JlYXRpb25TY29wZSkmJnZvaWQgMCE9PWk/aTpyKS5pbXBvcnROb2RlKHMsITApO0MuY3VycmVudE5vZGU9bztsZXQgbj1DLm5leHROb2RlKCksbD0wLGg9MCx1PWVbMF07Zm9yKDt2b2lkIDAhPT11Oyl7aWYobD09PXUuaW5kZXgpe2xldCBpOzI9PT11LnR5cGU/aT1uZXcgUihuLG4ubmV4dFNpYmxpbmcsdGhpcyx0KToxPT09dS50eXBlP2k9bmV3IHUuY3RvcihuLHUubmFtZSx1LnN0cmluZ3MsdGhpcyx0KTo2PT09dS50eXBlJiYoaT1uZXcgWihuLHRoaXMsdCkpLHRoaXMuXyRBVi5wdXNoKGkpLHU9ZVsrK2hdfWwhPT0obnVsbD09dT92b2lkIDA6dS5pbmRleCkmJihuPUMubmV4dE5vZGUoKSxsKyspfXJldHVybiBDLmN1cnJlbnROb2RlPXIsb312KHQpe2xldCBpPTA7Zm9yKGNvbnN0IHMgb2YgdGhpcy5fJEFWKXZvaWQgMCE9PXMmJih2b2lkIDAhPT1zLnN0cmluZ3M/KHMuXyRBSSh0LHMsaSksaSs9cy5zdHJpbmdzLmxlbmd0aC0yKTpzLl8kQUkodFtpXSkpLGkrK319Y2xhc3MgUntjb25zdHJ1Y3Rvcih0LGkscyxlKXt2YXIgbzt0aGlzLnR5cGU9Mix0aGlzLl8kQUg9QSx0aGlzLl8kQU49dm9pZCAwLHRoaXMuXyRBQT10LHRoaXMuXyRBQj1pLHRoaXMuXyRBTT1zLHRoaXMub3B0aW9ucz1lLHRoaXMuXyRDcD1udWxsPT09KG89bnVsbD09ZT92b2lkIDA6ZS5pc0Nvbm5lY3RlZCl8fHZvaWQgMD09PW98fG99Z2V0IF8kQVUoKXt2YXIgdCxpO3JldHVybiBudWxsIT09KGk9bnVsbD09PSh0PXRoaXMuXyRBTSl8fHZvaWQgMD09PXQ/dm9pZCAwOnQuXyRBVSkmJnZvaWQgMCE9PWk/aTp0aGlzLl8kQ3B9Z2V0IHBhcmVudE5vZGUoKXtsZXQgdD10aGlzLl8kQUEucGFyZW50Tm9kZTtjb25zdCBpPXRoaXMuXyRBTTtyZXR1cm4gdm9pZCAwIT09aSYmMTE9PT0obnVsbD09dD92b2lkIDA6dC5ub2RlVHlwZSkmJih0PWkucGFyZW50Tm9kZSksdH1nZXQgc3RhcnROb2RlKCl7cmV0dXJuIHRoaXMuXyRBQX1nZXQgZW5kTm9kZSgpe3JldHVybiB0aGlzLl8kQUJ9XyRBSSh0LGk9dGhpcyl7dD1TKHRoaXMsdCxpKSxkKHQpP3Q9PT1BfHxudWxsPT10fHxcIlwiPT09dD8odGhpcy5fJEFIIT09QSYmdGhpcy5fJEFSKCksdGhpcy5fJEFIPUEpOnQhPT10aGlzLl8kQUgmJnQhPT1UJiZ0aGlzLl8odCk6dm9pZCAwIT09dC5fJGxpdFR5cGUkP3RoaXMuZyh0KTp2b2lkIDAhPT10Lm5vZGVUeXBlP3RoaXMuJCh0KTp2KHQpP3RoaXMuVCh0KTp0aGlzLl8odCl9ayh0KXtyZXR1cm4gdGhpcy5fJEFBLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHQsdGhpcy5fJEFCKX0kKHQpe3RoaXMuXyRBSCE9PXQmJih0aGlzLl8kQVIoKSx0aGlzLl8kQUg9dGhpcy5rKHQpKX1fKHQpe3RoaXMuXyRBSCE9PUEmJmQodGhpcy5fJEFIKT90aGlzLl8kQUEubmV4dFNpYmxpbmcuZGF0YT10OnRoaXMuJChyLmNyZWF0ZVRleHROb2RlKHQpKSx0aGlzLl8kQUg9dH1nKHQpe3ZhciBpO2NvbnN0e3ZhbHVlczpzLF8kbGl0VHlwZSQ6ZX09dCxvPVwibnVtYmVyXCI9PXR5cGVvZiBlP3RoaXMuXyRBQyh0KToodm9pZCAwPT09ZS5lbCYmKGUuZWw9Ti5jcmVhdGVFbGVtZW50KFAoZS5oLGUuaFswXSksdGhpcy5vcHRpb25zKSksZSk7aWYoKG51bGw9PT0oaT10aGlzLl8kQUgpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLl8kQUQpPT09byl0aGlzLl8kQUgudihzKTtlbHNle2NvbnN0IHQ9bmV3IE0obyx0aGlzKSxpPXQudSh0aGlzLm9wdGlvbnMpO3QudihzKSx0aGlzLiQoaSksdGhpcy5fJEFIPXR9fV8kQUModCl7bGV0IGk9RS5nZXQodC5zdHJpbmdzKTtyZXR1cm4gdm9pZCAwPT09aSYmRS5zZXQodC5zdHJpbmdzLGk9bmV3IE4odCkpLGl9VCh0KXtjKHRoaXMuXyRBSCl8fCh0aGlzLl8kQUg9W10sdGhpcy5fJEFSKCkpO2NvbnN0IGk9dGhpcy5fJEFIO2xldCBzLGU9MDtmb3IoY29uc3QgbyBvZiB0KWU9PT1pLmxlbmd0aD9pLnB1c2gocz1uZXcgUih0aGlzLmsodSgpKSx0aGlzLmsodSgpKSx0aGlzLHRoaXMub3B0aW9ucykpOnM9aVtlXSxzLl8kQUkobyksZSsrO2U8aS5sZW5ndGgmJih0aGlzLl8kQVIocyYmcy5fJEFCLm5leHRTaWJsaW5nLGUpLGkubGVuZ3RoPWUpfV8kQVIodD10aGlzLl8kQUEubmV4dFNpYmxpbmcsaSl7dmFyIHM7Zm9yKG51bGw9PT0ocz10aGlzLl8kQVApfHx2b2lkIDA9PT1zfHxzLmNhbGwodGhpcywhMSwhMCxpKTt0JiZ0IT09dGhpcy5fJEFCOyl7Y29uc3QgaT10Lm5leHRTaWJsaW5nO3QucmVtb3ZlKCksdD1pfX1zZXRDb25uZWN0ZWQodCl7dmFyIGk7dm9pZCAwPT09dGhpcy5fJEFNJiYodGhpcy5fJENwPXQsbnVsbD09PShpPXRoaXMuXyRBUCl8fHZvaWQgMD09PWl8fGkuY2FsbCh0aGlzLHQpKX19Y2xhc3Mga3tjb25zdHJ1Y3Rvcih0LGkscyxlLG8pe3RoaXMudHlwZT0xLHRoaXMuXyRBSD1BLHRoaXMuXyRBTj12b2lkIDAsdGhpcy5lbGVtZW50PXQsdGhpcy5uYW1lPWksdGhpcy5fJEFNPWUsdGhpcy5vcHRpb25zPW8scy5sZW5ndGg+Mnx8XCJcIiE9PXNbMF18fFwiXCIhPT1zWzFdPyh0aGlzLl8kQUg9QXJyYXkocy5sZW5ndGgtMSkuZmlsbChuZXcgU3RyaW5nKSx0aGlzLnN0cmluZ3M9cyk6dGhpcy5fJEFIPUF9Z2V0IHRhZ05hbWUoKXtyZXR1cm4gdGhpcy5lbGVtZW50LnRhZ05hbWV9Z2V0IF8kQVUoKXtyZXR1cm4gdGhpcy5fJEFNLl8kQVV9XyRBSSh0LGk9dGhpcyxzLGUpe2NvbnN0IG89dGhpcy5zdHJpbmdzO2xldCBuPSExO2lmKHZvaWQgMD09PW8pdD1TKHRoaXMsdCxpLDApLG49IWQodCl8fHQhPT10aGlzLl8kQUgmJnQhPT1ULG4mJih0aGlzLl8kQUg9dCk7ZWxzZXtjb25zdCBlPXQ7bGV0IGwsaDtmb3IodD1vWzBdLGw9MDtsPG8ubGVuZ3RoLTE7bCsrKWg9Uyh0aGlzLGVbcytsXSxpLGwpLGg9PT1UJiYoaD10aGlzLl8kQUhbbF0pLG58fChuPSFkKGgpfHxoIT09dGhpcy5fJEFIW2xdKSxoPT09QT90PUE6dCE9PUEmJih0Kz0obnVsbCE9aD9oOlwiXCIpK29bbCsxXSksdGhpcy5fJEFIW2xdPWh9biYmIWUmJnRoaXMuaih0KX1qKHQpe3Q9PT1BP3RoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUodGhpcy5uYW1lKTp0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKHRoaXMubmFtZSxudWxsIT10P3Q6XCJcIil9fWNsYXNzIEggZXh0ZW5kcyBre2NvbnN0cnVjdG9yKCl7c3VwZXIoLi4uYXJndW1lbnRzKSx0aGlzLnR5cGU9M31qKHQpe3RoaXMuZWxlbWVudFt0aGlzLm5hbWVdPXQ9PT1BP3ZvaWQgMDp0fX1jb25zdCBJPXM/cy5lbXB0eVNjcmlwdDpcIlwiO2NsYXNzIEwgZXh0ZW5kcyBre2NvbnN0cnVjdG9yKCl7c3VwZXIoLi4uYXJndW1lbnRzKSx0aGlzLnR5cGU9NH1qKHQpe3QmJnQhPT1BP3RoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUodGhpcy5uYW1lLEkpOnRoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUodGhpcy5uYW1lKX19Y2xhc3MgeiBleHRlbmRzIGt7Y29uc3RydWN0b3IodCxpLHMsZSxvKXtzdXBlcih0LGkscyxlLG8pLHRoaXMudHlwZT01fV8kQUkodCxpPXRoaXMpe3ZhciBzO2lmKCh0PW51bGwhPT0ocz1TKHRoaXMsdCxpLDApKSYmdm9pZCAwIT09cz9zOkEpPT09VClyZXR1cm47Y29uc3QgZT10aGlzLl8kQUgsbz10PT09QSYmZSE9PUF8fHQuY2FwdHVyZSE9PWUuY2FwdHVyZXx8dC5vbmNlIT09ZS5vbmNlfHx0LnBhc3NpdmUhPT1lLnBhc3NpdmUsbj10IT09QSYmKGU9PT1BfHxvKTtvJiZ0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLm5hbWUsdGhpcyxlKSxuJiZ0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLm5hbWUsdGhpcyx0KSx0aGlzLl8kQUg9dH1oYW5kbGVFdmVudCh0KXt2YXIgaSxzO1wiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuXyRBSD90aGlzLl8kQUguY2FsbChudWxsIT09KHM9bnVsbD09PShpPXRoaXMub3B0aW9ucyl8fHZvaWQgMD09PWk/dm9pZCAwOmkuaG9zdCkmJnZvaWQgMCE9PXM/czp0aGlzLmVsZW1lbnQsdCk6dGhpcy5fJEFILmhhbmRsZUV2ZW50KHQpfX1jbGFzcyBae2NvbnN0cnVjdG9yKHQsaSxzKXt0aGlzLmVsZW1lbnQ9dCx0aGlzLnR5cGU9Nix0aGlzLl8kQU49dm9pZCAwLHRoaXMuXyRBTT1pLHRoaXMub3B0aW9ucz1zfWdldCBfJEFVKCl7cmV0dXJuIHRoaXMuXyRBTS5fJEFVfV8kQUkodCl7Uyh0aGlzLHQpfX1jb25zdCBqPXtPOm8sUDpuLEE6bCxDOjEsTTpWLEw6TSxEOnYsUjpTLEk6UixWOmssSDpMLE46eixVOkgsRjpafSxCPWkubGl0SHRtbFBvbHlmaWxsU3VwcG9ydDtudWxsPT1CfHxCKE4sUiksKG51bGwhPT0odD1pLmxpdEh0bWxWZXJzaW9ucykmJnZvaWQgMCE9PXQ/dDppLmxpdEh0bWxWZXJzaW9ucz1bXSkucHVzaChcIjIuNy41XCIpO2NvbnN0IEQ9KHQsaSxzKT0+e3ZhciBlLG87Y29uc3Qgbj1udWxsIT09KGU9bnVsbD09cz92b2lkIDA6cy5yZW5kZXJCZWZvcmUpJiZ2b2lkIDAhPT1lP2U6aTtsZXQgbD1uLl8kbGl0UGFydCQ7aWYodm9pZCAwPT09bCl7Y29uc3QgdD1udWxsIT09KG89bnVsbD09cz92b2lkIDA6cy5yZW5kZXJCZWZvcmUpJiZ2b2lkIDAhPT1vP286bnVsbDtuLl8kbGl0UGFydCQ9bD1uZXcgUihpLmluc2VydEJlZm9yZSh1KCksdCksdCx2b2lkIDAsbnVsbCE9cz9zOnt9KX1yZXR1cm4gbC5fJEFJKHQpLGx9O2V4cG9ydHtqIGFzIF8kTEgseCBhcyBodG1sLFQgYXMgbm9DaGFuZ2UsQSBhcyBub3RoaW5nLEQgYXMgcmVuZGVyLGIgYXMgc3ZnfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpdC1odG1sLmpzLm1hcFxuIiwiaW1wb3J0e2dldENvbXBhdGlibGVTdHlsZSBhcyB0LGFkb3B0U3R5bGVzIGFzIGl9ZnJvbVwiLi9jc3MtdGFnLmpzXCI7ZXhwb3J0e0NTU1Jlc3VsdCxhZG9wdFN0eWxlcyxjc3MsZ2V0Q29tcGF0aWJsZVN0eWxlLHN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cyx1bnNhZmVDU1N9ZnJvbVwiLi9jc3MtdGFnLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi92YXIgcztjb25zdCBlPXdpbmRvdyxyPWUudHJ1c3RlZFR5cGVzLGg9cj9yLmVtcHR5U2NyaXB0OlwiXCIsbz1lLnJlYWN0aXZlRWxlbWVudFBvbHlmaWxsU3VwcG9ydCxuPXt0b0F0dHJpYnV0ZSh0LGkpe3N3aXRjaChpKXtjYXNlIEJvb2xlYW46dD10P2g6bnVsbDticmVhaztjYXNlIE9iamVjdDpjYXNlIEFycmF5OnQ9bnVsbD09dD90OkpTT04uc3RyaW5naWZ5KHQpfXJldHVybiB0fSxmcm9tQXR0cmlidXRlKHQsaSl7bGV0IHM9dDtzd2l0Y2goaSl7Y2FzZSBCb29sZWFuOnM9bnVsbCE9PXQ7YnJlYWs7Y2FzZSBOdW1iZXI6cz1udWxsPT09dD9udWxsOk51bWJlcih0KTticmVhaztjYXNlIE9iamVjdDpjYXNlIEFycmF5OnRyeXtzPUpTT04ucGFyc2UodCl9Y2F0Y2godCl7cz1udWxsfX1yZXR1cm4gc319LGE9KHQsaSk9PmkhPT10JiYoaT09aXx8dD09dCksbD17YXR0cmlidXRlOiEwLHR5cGU6U3RyaW5nLGNvbnZlcnRlcjpuLHJlZmxlY3Q6ITEsaGFzQ2hhbmdlZDphfSxkPVwiZmluYWxpemVkXCI7Y2xhc3MgdSBleHRlbmRzIEhUTUxFbGVtZW50e2NvbnN0cnVjdG9yKCl7c3VwZXIoKSx0aGlzLl8kRWk9bmV3IE1hcCx0aGlzLmlzVXBkYXRlUGVuZGluZz0hMSx0aGlzLmhhc1VwZGF0ZWQ9ITEsdGhpcy5fJEVsPW51bGwsdGhpcy51KCl9c3RhdGljIGFkZEluaXRpYWxpemVyKHQpe3ZhciBpO3RoaXMuZmluYWxpemUoKSwobnVsbCE9PShpPXRoaXMuaCkmJnZvaWQgMCE9PWk/aTp0aGlzLmg9W10pLnB1c2godCl9c3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKXt0aGlzLmZpbmFsaXplKCk7Y29uc3QgdD1bXTtyZXR1cm4gdGhpcy5lbGVtZW50UHJvcGVydGllcy5mb3JFYWNoKCgoaSxzKT0+e2NvbnN0IGU9dGhpcy5fJEVwKHMsaSk7dm9pZCAwIT09ZSYmKHRoaXMuXyRFdi5zZXQoZSxzKSx0LnB1c2goZSkpfSkpLHR9c3RhdGljIGNyZWF0ZVByb3BlcnR5KHQsaT1sKXtpZihpLnN0YXRlJiYoaS5hdHRyaWJ1dGU9ITEpLHRoaXMuZmluYWxpemUoKSx0aGlzLmVsZW1lbnRQcm9wZXJ0aWVzLnNldCh0LGkpLCFpLm5vQWNjZXNzb3ImJiF0aGlzLnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSh0KSl7Y29uc3Qgcz1cInN5bWJvbFwiPT10eXBlb2YgdD9TeW1ib2woKTpcIl9fXCIrdCxlPXRoaXMuZ2V0UHJvcGVydHlEZXNjcmlwdG9yKHQscyxpKTt2b2lkIDAhPT1lJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5wcm90b3R5cGUsdCxlKX19c3RhdGljIGdldFByb3BlcnR5RGVzY3JpcHRvcih0LGkscyl7cmV0dXJue2dldCgpe3JldHVybiB0aGlzW2ldfSxzZXQoZSl7Y29uc3Qgcj10aGlzW3RdO3RoaXNbaV09ZSx0aGlzLnJlcXVlc3RVcGRhdGUodCxyLHMpfSxjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMH19c3RhdGljIGdldFByb3BlcnR5T3B0aW9ucyh0KXtyZXR1cm4gdGhpcy5lbGVtZW50UHJvcGVydGllcy5nZXQodCl8fGx9c3RhdGljIGZpbmFsaXplKCl7aWYodGhpcy5oYXNPd25Qcm9wZXJ0eShkKSlyZXR1cm4hMTt0aGlzW2RdPSEwO2NvbnN0IHQ9T2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpO2lmKHQuZmluYWxpemUoKSx2b2lkIDAhPT10LmgmJih0aGlzLmg9Wy4uLnQuaF0pLHRoaXMuZWxlbWVudFByb3BlcnRpZXM9bmV3IE1hcCh0LmVsZW1lbnRQcm9wZXJ0aWVzKSx0aGlzLl8kRXY9bmV3IE1hcCx0aGlzLmhhc093blByb3BlcnR5KFwicHJvcGVydGllc1wiKSl7Y29uc3QgdD10aGlzLnByb3BlcnRpZXMsaT1bLi4uT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModCksLi4uT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0KV07Zm9yKGNvbnN0IHMgb2YgaSl0aGlzLmNyZWF0ZVByb3BlcnR5KHMsdFtzXSl9cmV0dXJuIHRoaXMuZWxlbWVudFN0eWxlcz10aGlzLmZpbmFsaXplU3R5bGVzKHRoaXMuc3R5bGVzKSwhMH1zdGF0aWMgZmluYWxpemVTdHlsZXMoaSl7Y29uc3Qgcz1bXTtpZihBcnJheS5pc0FycmF5KGkpKXtjb25zdCBlPW5ldyBTZXQoaS5mbGF0KDEvMCkucmV2ZXJzZSgpKTtmb3IoY29uc3QgaSBvZiBlKXMudW5zaGlmdCh0KGkpKX1lbHNlIHZvaWQgMCE9PWkmJnMucHVzaCh0KGkpKTtyZXR1cm4gc31zdGF0aWMgXyRFcCh0LGkpe2NvbnN0IHM9aS5hdHRyaWJ1dGU7cmV0dXJuITE9PT1zP3ZvaWQgMDpcInN0cmluZ1wiPT10eXBlb2Ygcz9zOlwic3RyaW5nXCI9PXR5cGVvZiB0P3QudG9Mb3dlckNhc2UoKTp2b2lkIDB9dSgpe3ZhciB0O3RoaXMuXyRFXz1uZXcgUHJvbWlzZSgodD0+dGhpcy5lbmFibGVVcGRhdGluZz10KSksdGhpcy5fJEFMPW5ldyBNYXAsdGhpcy5fJEVnKCksdGhpcy5yZXF1ZXN0VXBkYXRlKCksbnVsbD09PSh0PXRoaXMuY29uc3RydWN0b3IuaCl8fHZvaWQgMD09PXR8fHQuZm9yRWFjaCgodD0+dCh0aGlzKSkpfWFkZENvbnRyb2xsZXIodCl7dmFyIGksczsobnVsbCE9PShpPXRoaXMuXyRFUykmJnZvaWQgMCE9PWk/aTp0aGlzLl8kRVM9W10pLnB1c2godCksdm9pZCAwIT09dGhpcy5yZW5kZXJSb290JiZ0aGlzLmlzQ29ubmVjdGVkJiYobnVsbD09PShzPXQuaG9zdENvbm5lY3RlZCl8fHZvaWQgMD09PXN8fHMuY2FsbCh0KSl9cmVtb3ZlQ29udHJvbGxlcih0KXt2YXIgaTtudWxsPT09KGk9dGhpcy5fJEVTKXx8dm9pZCAwPT09aXx8aS5zcGxpY2UodGhpcy5fJEVTLmluZGV4T2YodCk+Pj4wLDEpfV8kRWcoKXt0aGlzLmNvbnN0cnVjdG9yLmVsZW1lbnRQcm9wZXJ0aWVzLmZvckVhY2goKCh0LGkpPT57dGhpcy5oYXNPd25Qcm9wZXJ0eShpKSYmKHRoaXMuXyRFaS5zZXQoaSx0aGlzW2ldKSxkZWxldGUgdGhpc1tpXSl9KSl9Y3JlYXRlUmVuZGVyUm9vdCgpe3ZhciB0O2NvbnN0IHM9bnVsbCE9PSh0PXRoaXMuc2hhZG93Um9vdCkmJnZvaWQgMCE9PXQ/dDp0aGlzLmF0dGFjaFNoYWRvdyh0aGlzLmNvbnN0cnVjdG9yLnNoYWRvd1Jvb3RPcHRpb25zKTtyZXR1cm4gaShzLHRoaXMuY29uc3RydWN0b3IuZWxlbWVudFN0eWxlcyksc31jb25uZWN0ZWRDYWxsYmFjaygpe3ZhciB0O3ZvaWQgMD09PXRoaXMucmVuZGVyUm9vdCYmKHRoaXMucmVuZGVyUm9vdD10aGlzLmNyZWF0ZVJlbmRlclJvb3QoKSksdGhpcy5lbmFibGVVcGRhdGluZyghMCksbnVsbD09PSh0PXRoaXMuXyRFUyl8fHZvaWQgMD09PXR8fHQuZm9yRWFjaCgodD0+e3ZhciBpO3JldHVybiBudWxsPT09KGk9dC5ob3N0Q29ubmVjdGVkKXx8dm9pZCAwPT09aT92b2lkIDA6aS5jYWxsKHQpfSkpfWVuYWJsZVVwZGF0aW5nKHQpe31kaXNjb25uZWN0ZWRDYWxsYmFjaygpe3ZhciB0O251bGw9PT0odD10aGlzLl8kRVMpfHx2b2lkIDA9PT10fHx0LmZvckVhY2goKHQ9Pnt2YXIgaTtyZXR1cm4gbnVsbD09PShpPXQuaG9zdERpc2Nvbm5lY3RlZCl8fHZvaWQgMD09PWk/dm9pZCAwOmkuY2FsbCh0KX0pKX1hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sodCxpLHMpe3RoaXMuXyRBSyh0LHMpfV8kRU8odCxpLHM9bCl7dmFyIGU7Y29uc3Qgcj10aGlzLmNvbnN0cnVjdG9yLl8kRXAodCxzKTtpZih2b2lkIDAhPT1yJiYhMD09PXMucmVmbGVjdCl7Y29uc3QgaD0odm9pZCAwIT09KG51bGw9PT0oZT1zLmNvbnZlcnRlcil8fHZvaWQgMD09PWU/dm9pZCAwOmUudG9BdHRyaWJ1dGUpP3MuY29udmVydGVyOm4pLnRvQXR0cmlidXRlKGkscy50eXBlKTt0aGlzLl8kRWw9dCxudWxsPT1oP3RoaXMucmVtb3ZlQXR0cmlidXRlKHIpOnRoaXMuc2V0QXR0cmlidXRlKHIsaCksdGhpcy5fJEVsPW51bGx9fV8kQUsodCxpKXt2YXIgcztjb25zdCBlPXRoaXMuY29uc3RydWN0b3Iscj1lLl8kRXYuZ2V0KHQpO2lmKHZvaWQgMCE9PXImJnRoaXMuXyRFbCE9PXIpe2NvbnN0IHQ9ZS5nZXRQcm9wZXJ0eU9wdGlvbnMociksaD1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0LmNvbnZlcnRlcj97ZnJvbUF0dHJpYnV0ZTp0LmNvbnZlcnRlcn06dm9pZCAwIT09KG51bGw9PT0ocz10LmNvbnZlcnRlcil8fHZvaWQgMD09PXM/dm9pZCAwOnMuZnJvbUF0dHJpYnV0ZSk/dC5jb252ZXJ0ZXI6bjt0aGlzLl8kRWw9cix0aGlzW3JdPWguZnJvbUF0dHJpYnV0ZShpLHQudHlwZSksdGhpcy5fJEVsPW51bGx9fXJlcXVlc3RVcGRhdGUodCxpLHMpe2xldCBlPSEwO3ZvaWQgMCE9PXQmJigoKHM9c3x8dGhpcy5jb25zdHJ1Y3Rvci5nZXRQcm9wZXJ0eU9wdGlvbnModCkpLmhhc0NoYW5nZWR8fGEpKHRoaXNbdF0saSk/KHRoaXMuXyRBTC5oYXModCl8fHRoaXMuXyRBTC5zZXQodCxpKSwhMD09PXMucmVmbGVjdCYmdGhpcy5fJEVsIT09dCYmKHZvaWQgMD09PXRoaXMuXyRFQyYmKHRoaXMuXyRFQz1uZXcgTWFwKSx0aGlzLl8kRUMuc2V0KHQscykpKTplPSExKSwhdGhpcy5pc1VwZGF0ZVBlbmRpbmcmJmUmJih0aGlzLl8kRV89dGhpcy5fJEVqKCkpfWFzeW5jIF8kRWooKXt0aGlzLmlzVXBkYXRlUGVuZGluZz0hMDt0cnl7YXdhaXQgdGhpcy5fJEVffWNhdGNoKHQpe1Byb21pc2UucmVqZWN0KHQpfWNvbnN0IHQ9dGhpcy5zY2hlZHVsZVVwZGF0ZSgpO3JldHVybiBudWxsIT10JiZhd2FpdCB0LCF0aGlzLmlzVXBkYXRlUGVuZGluZ31zY2hlZHVsZVVwZGF0ZSgpe3JldHVybiB0aGlzLnBlcmZvcm1VcGRhdGUoKX1wZXJmb3JtVXBkYXRlKCl7dmFyIHQ7aWYoIXRoaXMuaXNVcGRhdGVQZW5kaW5nKXJldHVybjt0aGlzLmhhc1VwZGF0ZWQsdGhpcy5fJEVpJiYodGhpcy5fJEVpLmZvckVhY2goKCh0LGkpPT50aGlzW2ldPXQpKSx0aGlzLl8kRWk9dm9pZCAwKTtsZXQgaT0hMTtjb25zdCBzPXRoaXMuXyRBTDt0cnl7aT10aGlzLnNob3VsZFVwZGF0ZShzKSxpPyh0aGlzLndpbGxVcGRhdGUocyksbnVsbD09PSh0PXRoaXMuXyRFUyl8fHZvaWQgMD09PXR8fHQuZm9yRWFjaCgodD0+e3ZhciBpO3JldHVybiBudWxsPT09KGk9dC5ob3N0VXBkYXRlKXx8dm9pZCAwPT09aT92b2lkIDA6aS5jYWxsKHQpfSkpLHRoaXMudXBkYXRlKHMpKTp0aGlzLl8kRWsoKX1jYXRjaCh0KXt0aHJvdyBpPSExLHRoaXMuXyRFaygpLHR9aSYmdGhpcy5fJEFFKHMpfXdpbGxVcGRhdGUodCl7fV8kQUUodCl7dmFyIGk7bnVsbD09PShpPXRoaXMuXyRFUyl8fHZvaWQgMD09PWl8fGkuZm9yRWFjaCgodD0+e3ZhciBpO3JldHVybiBudWxsPT09KGk9dC5ob3N0VXBkYXRlZCl8fHZvaWQgMD09PWk/dm9pZCAwOmkuY2FsbCh0KX0pKSx0aGlzLmhhc1VwZGF0ZWR8fCh0aGlzLmhhc1VwZGF0ZWQ9ITAsdGhpcy5maXJzdFVwZGF0ZWQodCkpLHRoaXMudXBkYXRlZCh0KX1fJEVrKCl7dGhpcy5fJEFMPW5ldyBNYXAsdGhpcy5pc1VwZGF0ZVBlbmRpbmc9ITF9Z2V0IHVwZGF0ZUNvbXBsZXRlKCl7cmV0dXJuIHRoaXMuZ2V0VXBkYXRlQ29tcGxldGUoKX1nZXRVcGRhdGVDb21wbGV0ZSgpe3JldHVybiB0aGlzLl8kRV99c2hvdWxkVXBkYXRlKHQpe3JldHVybiEwfXVwZGF0ZSh0KXt2b2lkIDAhPT10aGlzLl8kRUMmJih0aGlzLl8kRUMuZm9yRWFjaCgoKHQsaSk9PnRoaXMuXyRFTyhpLHRoaXNbaV0sdCkpKSx0aGlzLl8kRUM9dm9pZCAwKSx0aGlzLl8kRWsoKX11cGRhdGVkKHQpe31maXJzdFVwZGF0ZWQodCl7fX11W2RdPSEwLHUuZWxlbWVudFByb3BlcnRpZXM9bmV3IE1hcCx1LmVsZW1lbnRTdHlsZXM9W10sdS5zaGFkb3dSb290T3B0aW9ucz17bW9kZTpcIm9wZW5cIn0sbnVsbD09b3x8byh7UmVhY3RpdmVFbGVtZW50OnV9KSwobnVsbCE9PShzPWUucmVhY3RpdmVFbGVtZW50VmVyc2lvbnMpJiZ2b2lkIDAhPT1zP3M6ZS5yZWFjdGl2ZUVsZW1lbnRWZXJzaW9ucz1bXSkucHVzaChcIjEuNi4yXCIpO2V4cG9ydHt1IGFzIFJlYWN0aXZlRWxlbWVudCxuIGFzIGRlZmF1bHRDb252ZXJ0ZXIsYSBhcyBub3RFcXVhbH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdGl2ZS1lbGVtZW50LmpzLm1hcFxuIiwiaW1wb3J0e1JlYWN0aXZlRWxlbWVudCBhcyB0fWZyb21cIkBsaXQvcmVhY3RpdmUtZWxlbWVudFwiO2V4cG9ydCpmcm9tXCJAbGl0L3JlYWN0aXZlLWVsZW1lbnRcIjtpbXBvcnR7cmVuZGVyIGFzIGUsbm9DaGFuZ2UgYXMgaX1mcm9tXCJsaXQtaHRtbFwiO2V4cG9ydCpmcm9tXCJsaXQtaHRtbFwiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovdmFyIGwsbztjb25zdCByPXQ7Y2xhc3MgcyBleHRlbmRzIHR7Y29uc3RydWN0b3IoKXtzdXBlciguLi5hcmd1bWVudHMpLHRoaXMucmVuZGVyT3B0aW9ucz17aG9zdDp0aGlzfSx0aGlzLl8kRG89dm9pZCAwfWNyZWF0ZVJlbmRlclJvb3QoKXt2YXIgdCxlO2NvbnN0IGk9c3VwZXIuY3JlYXRlUmVuZGVyUm9vdCgpO3JldHVybiBudWxsIT09KHQ9KGU9dGhpcy5yZW5kZXJPcHRpb25zKS5yZW5kZXJCZWZvcmUpJiZ2b2lkIDAhPT10fHwoZS5yZW5kZXJCZWZvcmU9aS5maXJzdENoaWxkKSxpfXVwZGF0ZSh0KXtjb25zdCBpPXRoaXMucmVuZGVyKCk7dGhpcy5oYXNVcGRhdGVkfHwodGhpcy5yZW5kZXJPcHRpb25zLmlzQ29ubmVjdGVkPXRoaXMuaXNDb25uZWN0ZWQpLHN1cGVyLnVwZGF0ZSh0KSx0aGlzLl8kRG89ZShpLHRoaXMucmVuZGVyUm9vdCx0aGlzLnJlbmRlck9wdGlvbnMpfWNvbm5lY3RlZENhbGxiYWNrKCl7dmFyIHQ7c3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKSxudWxsPT09KHQ9dGhpcy5fJERvKXx8dm9pZCAwPT09dHx8dC5zZXRDb25uZWN0ZWQoITApfWRpc2Nvbm5lY3RlZENhbGxiYWNrKCl7dmFyIHQ7c3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKSxudWxsPT09KHQ9dGhpcy5fJERvKXx8dm9pZCAwPT09dHx8dC5zZXRDb25uZWN0ZWQoITEpfXJlbmRlcigpe3JldHVybiBpfX1zLmZpbmFsaXplZD0hMCxzLl8kbGl0RWxlbWVudCQ9ITAsbnVsbD09PShsPWdsb2JhbFRoaXMubGl0RWxlbWVudEh5ZHJhdGVTdXBwb3J0KXx8dm9pZCAwPT09bHx8bC5jYWxsKGdsb2JhbFRoaXMse0xpdEVsZW1lbnQ6c30pO2NvbnN0IG49Z2xvYmFsVGhpcy5saXRFbGVtZW50UG9seWZpbGxTdXBwb3J0O251bGw9PW58fG4oe0xpdEVsZW1lbnQ6c30pO2NvbnN0IGg9e18kQUs6KHQsZSxpKT0+e3QuXyRBSyhlLGkpfSxfJEFMOnQ9PnQuXyRBTH07KG51bGwhPT0obz1nbG9iYWxUaGlzLmxpdEVsZW1lbnRWZXJzaW9ucykmJnZvaWQgMCE9PW8/bzpnbG9iYWxUaGlzLmxpdEVsZW1lbnRWZXJzaW9ucz1bXSkucHVzaChcIjMuMy4yXCIpO2V4cG9ydHtzIGFzIExpdEVsZW1lbnQsciBhcyBVcGRhdGluZ0VsZW1lbnQsaCBhcyBfJExFfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpdC1lbGVtZW50LmpzLm1hcFxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmV4cG9ydCBjbGFzcyBEZWZlcnJlZCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc2V0dGxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgICAgIHRoaXMuX3JlamVjdCA9IHJlamVjdDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlc29sdmUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5zZXR0bGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZSh2YWx1ZSk7XG4gICAgfVxuICAgIHJlamVjdChlcnJvcikge1xuICAgICAgICB0aGlzLnNldHRsZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9yZWplY3QoZXJyb3IpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmVycmVkLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuLyoqXG4gKiBOYW1lIG9mIHRoZSBldmVudCBkaXNwYXRjaGVkIHRvIGB3aW5kb3dgIHdoZW5ldmVyIGEgbG9jYWxlIGNoYW5nZSBzdGFydHMsXG4gKiBmaW5pc2hlcyBzdWNjZXNzZnVsbHksIG9yIGZhaWxzLiBPbmx5IHJlbGV2YW50IHRvIHJ1bnRpbWUgbW9kZS5cbiAqXG4gKiBUaGUgYGRldGFpbGAgb2YgdGhpcyBldmVudCBpcyBhbiBvYmplY3Qgd2l0aCBhIGBzdGF0dXNgIHN0cmluZyB0aGF0IGNhbiBiZTpcbiAqIFwibG9hZGluZ1wiLCBcInJlYWR5XCIsIG9yIFwiZXJyb3JcIiwgYWxvbmcgd2l0aCB0aGUgcmVsZXZhbnQgbG9jYWxlIGNvZGUsIGFuZFxuICogZXJyb3IgbWVzc2FnZSBpZiBhcHBsaWNhYmxlLlxuICpcbiAqIFlvdSBjYW4gbGlzdGVuIGZvciB0aGlzIGV2ZW50IHRvIGtub3cgd2hlbiB5b3VyIGFwcGxpY2F0aW9uIHNob3VsZCBiZVxuICogcmUtcmVuZGVyZWQgZm9sbG93aW5nIGEgbG9jYWxlIGNoYW5nZS4gU2VlIGFsc28gdGhlIExvY2FsaXplZCBtaXhpbiwgd2hpY2hcbiAqIGF1dG9tYXRpY2FsbHkgcmUtcmVuZGVycyBMaXRFbGVtZW50IGNsYXNzZXMgdXNpbmcgdGhpcyBldmVudC5cbiAqL1xuZXhwb3J0IGNvbnN0IExPQ0FMRV9TVEFUVVNfRVZFTlQgPSAnbGl0LWxvY2FsaXplLXN0YXR1cyc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2NhbGUtc3RhdHVzLWV2ZW50LmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuLyoqXG4gKiBUYWcgdGhhdCBhbGxvd3MgZXhwcmVzc2lvbnMgdG8gYmUgdXNlZCBpbiBsb2NhbGl6ZWQgbm9uLUhUTUwgdGVtcGxhdGVcbiAqIHN0cmluZ3MuXG4gKlxuICogRXhhbXBsZTogbXNnKHN0cmBIZWxsbyAke3RoaXMudXNlcn0hYCk7XG4gKlxuICogVGhlIExpdCBodG1sIHRhZyBjYW4gYWxzbyBiZSB1c2VkIGZvciB0aGlzIHB1cnBvc2UsIGJ1dCBIVE1MIHdpbGwgbmVlZCB0byBiZVxuICogZXNjYXBlZCwgYW5kIHRoZXJlIGlzIGEgc21hbGwgb3ZlcmhlYWQgZm9yIEhUTUwgcGFyc2luZy5cbiAqXG4gKiBVbnRhZ2dlZCB0ZW1wbGF0ZSBzdHJpbmdzIHdpdGggZXhwcmVzc2lvbnMgYXJlbid0IHN1cHBvcnRlZCBieSBsaXQtbG9jYWxpemVcbiAqIGJlY2F1c2UgdGhleSBkb24ndCBhbGxvdyBmb3IgdmFsdWVzIHRvIGJlIGNhcHR1cmVkIGF0IHJ1bnRpbWUuXG4gKi9cbmNvbnN0IF9zdHIgPSAoc3RyaW5ncywgLi4udmFsdWVzKSA9PiAoe1xuICAgIHN0clRhZzogdHJ1ZSxcbiAgICBzdHJpbmdzLFxuICAgIHZhbHVlcyxcbn0pO1xuZXhwb3J0IGNvbnN0IHN0ciA9IF9zdHI7XG5leHBvcnQgY29uc3QgaXNTdHJUYWdnZWQgPSAodmFsKSA9PiB0eXBlb2YgdmFsICE9PSAnc3RyaW5nJyAmJiAnc3RyVGFnJyBpbiB2YWw7XG4vKipcbiAqIFJlbmRlciB0aGUgcmVzdWx0IG9mIGEgYHN0cmAgdGFnZ2VkIHRlbXBsYXRlIHRvIGEgc3RyaW5nLiBOb3RlIHdlIGRvbid0IG5lZWRcbiAqIHRvIGRvIHRoaXMgZm9yIExpdCB0ZW1wbGF0ZXMsIHNpbmNlIExpdCBpdHNlbGYgaGFuZGxlcyByZW5kZXJpbmcuXG4gKi9cbmV4cG9ydCBjb25zdCBqb2luU3RyaW5nc0FuZFZhbHVlcyA9IChzdHJpbmdzLCB2YWx1ZXMsIHZhbHVlT3JkZXIpID0+IHtcbiAgICBsZXQgY29uY2F0ID0gc3RyaW5nc1swXTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHN0cmluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uY2F0ICs9IHZhbHVlc1t2YWx1ZU9yZGVyID8gdmFsdWVPcmRlcltpIC0gMV0gOiBpIC0gMV07XG4gICAgICAgIGNvbmNhdCArPSBzdHJpbmdzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gY29uY2F0O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0ci10YWcuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTQgVHJhdmlzIFdlYmJcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbiAqL1xuLy8gVGhpcyBtb2R1bGUgaXMgZGVyaXZlZCBmcm9tIHRoZSBmaWxlOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3Rqd2ViYi9mbnYtcGx1cy9ibG9iLzFlMmNlNjhhMDdjYjdkZDRjM2M4NTM2NGYzZDhkOTZjOTU5MTk0NzQvaW5kZXguanMjTDMwOVxuLy9cbi8vIENoYW5nZXM6XG4vLyAtIE9ubHkgdGhlIF9oYXNoNjRfMWFfZmFzdCBmdW5jdGlvbiBpcyBpbmNsdWRlZC5cbi8vIC0gUmVtb3ZlZCBsb29wIHVucm9sbGluZy5cbi8vIC0gQ29udmVydGVkIHRvIFR5cGVTY3JpcHQgRVMgbW9kdWxlLlxuLy8gLSB2YXIgLT4gbGV0L2NvbnN0XG4vL1xuLy8gVE9ETyhhb21hcmtzKSBVcHN0cmVhbSBpbXByb3ZlbWVudHMgdG8gaHR0cHM6Ly9naXRodWIuY29tL3Rqd2ViYi9mbnYtcGx1cy8uXG5jb25zdCBobCA9IFtdO1xuZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuICAgIGhsW2ldID0gKChpID4+IDQpICYgMTUpLnRvU3RyaW5nKDE2KSArIChpICYgMTUpLnRvU3RyaW5nKDE2KTtcbn1cbi8qKlxuICogUGVyZm9ybSBhIEZOVi0xQSA2NC1iaXQgaGFzaCBvZiB0aGUgZ2l2ZW4gc3RyaW5nIChhcyBVVEYtMTYgY29kZSB1bml0cyksIGFuZFxuICogcmV0dXJuIGEgaGV4YWRlY2ltYWwgZGlnZXN0IChsZWZ0IHplcm8gcGFkZGVkIHRvIDE2IGNoYXJhY3RlcnMpLlxuICpcbiAqIEBzZWUge0BsaW5rIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL2RyYWZ0LWVhc3RsYWtlLWZudi0wNn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZudjFhNjQoc3RyKSB7XG4gICAgbGV0IHQwID0gMCwgdjAgPSAweDIzMjUsIHQxID0gMCwgdjEgPSAweDg0MjIsIHQyID0gMCwgdjIgPSAweDljZTQsIHQzID0gMCwgdjMgPSAweGNiZjI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdjAgXj0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIHQwID0gdjAgKiA0MzU7XG4gICAgICAgIHQxID0gdjEgKiA0MzU7XG4gICAgICAgIHQyID0gdjIgKiA0MzU7XG4gICAgICAgIHQzID0gdjMgKiA0MzU7XG4gICAgICAgIHQyICs9IHYwIDw8IDg7XG4gICAgICAgIHQzICs9IHYxIDw8IDg7XG4gICAgICAgIHQxICs9IHQwID4+PiAxNjtcbiAgICAgICAgdjAgPSB0MCAmIDY1NTM1O1xuICAgICAgICB0MiArPSB0MSA+Pj4gMTY7XG4gICAgICAgIHYxID0gdDEgJiA2NTUzNTtcbiAgICAgICAgdjMgPSAodDMgKyAodDIgPj4+IDE2KSkgJiA2NTUzNTtcbiAgICAgICAgdjIgPSB0MiAmIDY1NTM1O1xuICAgIH1cbiAgICByZXR1cm4gKGhsW3YzID4+IDhdICtcbiAgICAgICAgaGxbdjMgJiAyNTVdICtcbiAgICAgICAgaGxbdjIgPj4gOF0gK1xuICAgICAgICBobFt2MiAmIDI1NV0gK1xuICAgICAgICBobFt2MSA+PiA4XSArXG4gICAgICAgIGhsW3YxICYgMjU1XSArXG4gICAgICAgIGhsW3YwID4+IDhdICtcbiAgICAgICAgaGxbdjAgJiAyNTVdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZudjFhNjQuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5pbXBvcnQgeyBmbnYxYTY0IH0gZnJvbSAnLi9mbnYxYTY0LmpzJztcbi8qKlxuICogRGVsaW1pdGVyIHVzZWQgYmV0d2VlbiBlYWNoIHRlbXBsYXRlIHN0cmluZyBjb21wb25lbnQgYmVmb3JlIGhhc2hpbmcuIFVzZWQgdG9cbiAqIHByZXZlbnQgZS5nLiBcImZvb2JhclwiIGFuZCBcImZvbyR7YmF6fWJhclwiIGZyb20gc2hhcmluZyBhIGhhc2guXG4gKlxuICogVGhpcyBpcyB0aGUgXCJyZWNvcmQgc2VwYXJhdG9yXCIgQVNDSUkgY2hhcmFjdGVyLlxuICovXG5leHBvcnQgY29uc3QgSEFTSF9ERUxJTUlURVIgPSAnXFx4MWUnO1xuLyoqXG4gKiBJZCBwcmVmaXggb24gaHRtbC10YWdnZWQgdGVtcGxhdGVzIHRvIGRpc3Rpbmd1aXNoIGUuZy4gYDxiPng8L2I+YCBmcm9tXG4gKiBodG1sYDxiPng8L2I+YC5cbiAqL1xuY29uc3QgSFRNTF9QUkVGSVggPSAnaCc7XG4vKipcbiAqIElkIHByZWZpeCBvbiBwbGFpbiBzdHJpbmcgdGVtcGxhdGVzIHRvIGRpc3Rpbmd1aXNoIGUuZy4gYDxiPng8L2I+YCBmcm9tXG4gKiBodG1sYDxiPng8L2I+YC5cbiAqL1xuY29uc3QgU1RSSU5HX1BSRUZJWCA9ICdzJztcbi8qKlxuICogR2VuZXJhdGUgYSB1bmlxdWUgSUQgZm9yIGEgbGl0LWxvY2FsaXplIG1lc3NhZ2UuXG4gKlxuICogRXhhbXBsZTpcbiAqICAgVGVtcGxhdGU6IGh0bWxgSGVsbG8gPGI+JHt3aG99PC9iPiFgXG4gKiAgICAgUGFyYW1zOiBbXCJIZWxsbyA8Yj5cIiwgXCI8L2I+IVwiXSwgdHJ1ZVxuICogICAgIE91dHB1dDogaDgyY2NjMzhkNGQ0NmVhYTlcbiAqXG4gKiBUaGUgSUQgaXMgY29uc3RydWN0ZWQgYXM6XG4gKlxuICogICBbMF0gICAgS2luZCBvZiB0ZW1wbGF0ZTogW2hddG1sIG9yIFtzXXRyaW5nLlxuICogICBbMSwxNl0gNjQtYml0IEZOVi0xYSBoYXNoIGhleCBkaWdlc3Qgb2YgdGhlIHRlbXBsYXRlIHN0cmluZ3MsIGFzIFVURi0xNlxuICogICAgICAgICAgY29kZSBwb2ludHMsIGRlbGluZWF0ZWQgYnkgYW4gQVNDSUkgXCJyZWNvcmQgc2VwYXJhdG9yXCIgY2hhcmFjdGVyLlxuICpcbiAqIFdlIGNob29zZSBGTlYtMWEgYmVjYXVzZTpcbiAqXG4gKiAgIDEuIEl0J3MgcHJldHR5IGZhc3QgKGUuZy4gbXVjaCBmYXN0ZXIgdGhhbiBTSEEtMSkuXG4gKiAgIDIuIEl0J3MgcHJldHR5IHNtYWxsICgwLjI1IEtpQiBtaW5pZmllZCArIGJyb3RsaSkuXG4gKiAgIDMuIFdlIGRvbid0IHJlcXVpcmUgY3J5cHRvZ3JhcGhpYyBzZWN1cml0eSwgYW5kIDY0IGJpdHMgc2hvdWxkIGdpdmVcbiAqICAgICAgc3VmZmljaWVudCBjb2xsaXNpb24gcmVzaXN0YW5jZSBmb3IgYW55IG9uZSBhcHBsaWNhdGlvbi4gV29yc3RcbiAqICAgICAgY2FzZSwgd2Ugd2lsbCBhbHdheXMgZGV0ZWN0IGNvbGxpc2lvbnMgZHVyaW5nIGFuYWx5c2lzLlxuICogICA0LiBXZSBjYW4ndCB1c2UgV2ViIENyeXB0byBBUEkgKGUuZy4gU0hBLTEpLCBiZWNhdXNlIGl0J3MgYXN5bmNocm9ub3VzLlxuICogICA1LiBJdCdzIGEgd2VsbCBrbm93biBub24tY3J5cHRvZ3JhcGhpYyBoYXNoIHdpdGggaW1wbGVtZW50YXRpb25zIGluIG1hbnlcbiAqICAgICAgbGFuZ3VhZ2VzLlxuICogICA2LiBUaGVyZSB3YXMgYW4gZXhpc3RpbmcgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiB0aGF0IGRvZXNuJ3QgcmVxdWlyZVxuICogICAgICBCaWdJbnQsIGZvciBJRTExIGNvbXBhdGliaWxpdHkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZU1zZ0lkKHN0cmluZ3MsIGlzSHRtbFRhZ2dlZCkge1xuICAgIHJldHVybiAoKGlzSHRtbFRhZ2dlZCA/IEhUTUxfUFJFRklYIDogU1RSSU5HX1BSRUZJWCkgK1xuICAgICAgICBmbnYxYTY0KHR5cGVvZiBzdHJpbmdzID09PSAnc3RyaW5nJyA/IHN0cmluZ3MgOiBzdHJpbmdzLmpvaW4oSEFTSF9ERUxJTUlURVIpKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZC1nZW5lcmF0aW9uLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuaW1wb3J0IHsgZGVmYXVsdE1zZyB9IGZyb20gJy4vZGVmYXVsdC1tc2cuanMnO1xuaW1wb3J0IHsgam9pblN0cmluZ3NBbmRWYWx1ZXMgfSBmcm9tICcuL3N0ci10YWcuanMnO1xuaW1wb3J0IHsgZ2VuZXJhdGVNc2dJZCB9IGZyb20gJy4vaWQtZ2VuZXJhdGlvbi5qcyc7XG5jb25zdCBleHByZXNzaW9uT3JkZXJzID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IGhhc2hDYWNoZSA9IG5ldyBNYXAoKTtcbmV4cG9ydCBmdW5jdGlvbiBydW50aW1lTXNnKHRlbXBsYXRlcywgdGVtcGxhdGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKHRlbXBsYXRlcykge1xuICAgICAgICBjb25zdCBpZCA9IChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5pZCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZ2VuZXJhdGVJZCh0ZW1wbGF0ZSk7XG4gICAgICAgIGNvbnN0IGxvY2FsaXplZCA9IHRlbXBsYXRlc1tpZF07XG4gICAgICAgIGlmIChsb2NhbGl6ZWQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbG9jYWxpemVkID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIC8vIEUuZy4gXCJIZWxsbyBXb3JsZCFcIlxuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGl6ZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgnc3RyVGFnJyBpbiBsb2NhbGl6ZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBFLmcuIHN0cmBIZWxsbyAke25hbWV9IWBcbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vIExvY2FsaXplZCB0ZW1wbGF0ZXMgaGF2ZSAke251bWJlcn0gaW4gcGxhY2Ugb2YgcmVhbCB0ZW1wbGF0ZVxuICAgICAgICAgICAgICAgIC8vIGV4cHJlc3Npb25zLiBUaGV5IGNhbid0IGhhdmUgcmVhbCB0ZW1wbGF0ZSB2YWx1ZXMsIGJlY2F1c2UgdGhlXG4gICAgICAgICAgICAgICAgLy8gdmFyaWFibGUgc2NvcGUgd291bGQgYmUgd3JvbmcuIFRoZSBudW1iZXIgdGVsbHMgdXMgdGhlIGluZGV4IG9mIHRoZVxuICAgICAgICAgICAgICAgIC8vIHNvdXJjZSB2YWx1ZSB0byBzdWJzdGl0dXRlIGluIGl0cyBwbGFjZSwgYmVjYXVzZSBleHByZXNzaW9ucyBjYW4gYmVcbiAgICAgICAgICAgICAgICAvLyBtb3ZlZCB0byBhIGRpZmZlcmVudCBwb3NpdGlvbiBkdXJpbmcgdHJhbnNsYXRpb24uXG4gICAgICAgICAgICAgICAgcmV0dXJuIGpvaW5TdHJpbmdzQW5kVmFsdWVzKGxvY2FsaXplZC5zdHJpbmdzLCBcbiAgICAgICAgICAgICAgICAvLyBDYXN0IGB0ZW1wbGF0ZWAgYmVjYXVzZSBpdHMgdHlwZSB3YXNuJ3QgYXV0b21hdGljYWxseSBuYXJyb3dlZCAoYnV0XG4gICAgICAgICAgICAgICAgLy8gd2Uga25vdyBpdCBtdXN0IGJlIHRoZSBzYW1lIHR5cGUgYXMgYGxvY2FsaXplZGApLlxuICAgICAgICAgICAgICAgIHRlbXBsYXRlLnZhbHVlcywgbG9jYWxpemVkLnZhbHVlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBFLmcuIGh0bWxgSGVsbG8gPGI+JHtuYW1lfTwvYj4hYFxuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSB0byBrZWVwIG91ciBvd24gbWFwcGluZyBvZiBleHByZXNzaW9uIG9yZGVyaW5nIGJlY2F1c2Ugd2UgZG9cbiAgICAgICAgICAgICAgICAvLyBhbiBpbi1wbGFjZSB1cGRhdGUgb2YgYHZhbHVlc2AsIGFuZCBvdGhlcndpc2Ugd2UnZCBsb3NlIG9yZGVyaW5nIGZvclxuICAgICAgICAgICAgICAgIC8vIHN1YnNlcXVlbnQgcmVuZGVycy5cbiAgICAgICAgICAgICAgICBsZXQgb3JkZXIgPSBleHByZXNzaW9uT3JkZXJzLmdldChsb2NhbGl6ZWQpO1xuICAgICAgICAgICAgICAgIGlmIChvcmRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG9yZGVyID0gbG9jYWxpemVkLnZhbHVlcztcbiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbk9yZGVycy5zZXQobG9jYWxpemVkLCBvcmRlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLmxvY2FsaXplZCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBvcmRlci5tYXAoKGkpID0+IHRlbXBsYXRlLnZhbHVlc1tpXSksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdE1zZyh0ZW1wbGF0ZSk7XG59XG5mdW5jdGlvbiBnZW5lcmF0ZUlkKHRlbXBsYXRlKSB7XG4gICAgY29uc3Qgc3RyaW5ncyA9IHR5cGVvZiB0ZW1wbGF0ZSA9PT0gJ3N0cmluZycgPyB0ZW1wbGF0ZSA6IHRlbXBsYXRlLnN0cmluZ3M7XG4gICAgbGV0IGlkID0gaGFzaENhY2hlLmdldChzdHJpbmdzKTtcbiAgICBpZiAoaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZCA9IGdlbmVyYXRlTXNnSWQoc3RyaW5ncywgdHlwZW9mIHRlbXBsYXRlICE9PSAnc3RyaW5nJyAmJiAhKCdzdHJUYWcnIGluIHRlbXBsYXRlKSk7XG4gICAgICAgIGhhc2hDYWNoZS5zZXQoc3RyaW5ncywgaWQpO1xuICAgIH1cbiAgICByZXR1cm4gaWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ydW50aW1lLW1zZy5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmltcG9ydCB7IGlzU3RyVGFnZ2VkLCBqb2luU3RyaW5nc0FuZFZhbHVlcyB9IGZyb20gJy4vc3RyLXRhZy5qcyc7XG4vKipcbiAqIERlZmF1bHQgaWRlbnRpdHkgbXNnIGltcGxlbWVudGF0aW9uLiBTaW1wbHkgcmV0dXJucyB0aGUgaW5wdXQgdGVtcGxhdGUgd2l0aFxuICogbm8gYXdhcmVuZXNzIG9mIHRyYW5zbGF0aW9ucy4gSWYgdGhlIHRlbXBsYXRlIGlzIHN0ci10YWdnZWQsIHJldHVybnMgaXQgaW5cbiAqIHN0cmluZyBmb3JtLlxuICovXG5leHBvcnQgY29uc3QgZGVmYXVsdE1zZyA9ICgodGVtcGxhdGUpID0+IGlzU3RyVGFnZ2VkKHRlbXBsYXRlKVxuICAgID8gam9pblN0cmluZ3NBbmRWYWx1ZXModGVtcGxhdGUuc3RyaW5ncywgdGVtcGxhdGUudmFsdWVzKVxuICAgIDogdGVtcGxhdGUpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmYXVsdC1tc2cuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5pbXBvcnQgeyBfaW5zdGFsbE1zZ0ltcGxlbWVudGF0aW9uIH0gZnJvbSAnLi4vbGl0LWxvY2FsaXplLmpzJztcbmltcG9ydCB7IERlZmVycmVkIH0gZnJvbSAnLi4vaW50ZXJuYWwvZGVmZXJyZWQuanMnO1xuaW1wb3J0IHsgTE9DQUxFX1NUQVRVU19FVkVOVCB9IGZyb20gJy4uL2ludGVybmFsL2xvY2FsZS1zdGF0dXMtZXZlbnQuanMnO1xuaW1wb3J0IHsgcnVudGltZU1zZyB9IGZyb20gJy4uL2ludGVybmFsL3J1bnRpbWUtbXNnLmpzJztcbi8qKlxuICogRGlzcGF0Y2ggYSBcImxpdC1sb2NhbGl6ZS1zdGF0dXNcIiBldmVudCB0byBgd2luZG93YCB3aXRoIHRoZSBnaXZlbiBkZXRhaWwuXG4gKi9cbmZ1bmN0aW9uIGRpc3BhdGNoU3RhdHVzRXZlbnQoZGV0YWlsKSB7XG4gICAgd2luZG93LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KExPQ0FMRV9TVEFUVVNfRVZFTlQsIHsgZGV0YWlsIH0pKTtcbn1cbmxldCBhY3RpdmVMb2NhbGUgPSAnJztcbmxldCBsb2FkaW5nTG9jYWxlO1xubGV0IHNvdXJjZUxvY2FsZTtcbmxldCB2YWxpZExvY2FsZXM7XG5sZXQgbG9hZExvY2FsZTtcbmxldCB0ZW1wbGF0ZXM7XG5sZXQgbG9hZGluZyA9IG5ldyBEZWZlcnJlZCgpO1xuLy8gVGhlIGxvYWRpbmcgcHJvbWlzZSBtdXN0IGJlIGluaXRpYWxseSByZXNvbHZlZCwgYmVjYXVzZSB0aGF0J3Mgd2hhdCB3ZSBzaG91bGRcbi8vIHJldHVybiBpZiB0aGUgdXNlciBpbW1lZGlhdGVseSBjYWxscyBzZXRMb2NhbGUoc291cmNlTG9jYWxlKS5cbmxvYWRpbmcucmVzb2x2ZSgpO1xubGV0IHJlcXVlc3RJZCA9IDA7XG4vKipcbiAqIFNldCBjb25maWd1cmF0aW9uIHBhcmFtZXRlcnMgZm9yIGxpdC1sb2NhbGl6ZSB3aGVuIGluIHJ1bnRpbWUgbW9kZS4gUmV0dXJuc1xuICogYW4gb2JqZWN0IHdpdGggZnVuY3Rpb25zOlxuICpcbiAqIC0gYGdldExvY2FsZWA6IFJldHVybiB0aGUgYWN0aXZlIGxvY2FsZSBjb2RlLlxuICogLSBgc2V0TG9jYWxlYDogU2V0IHRoZSBhY3RpdmUgbG9jYWxlIGNvZGUuXG4gKlxuICogVGhyb3dzIGlmIGNhbGxlZCBtb3JlIHRoYW4gb25jZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGNvbmZpZ3VyZUxvY2FsaXphdGlvbiA9IChjb25maWcpID0+IHtcbiAgICBfaW5zdGFsbE1zZ0ltcGxlbWVudGF0aW9uKCgodGVtcGxhdGUsIG9wdGlvbnMpID0+IHJ1bnRpbWVNc2codGVtcGxhdGVzLCB0ZW1wbGF0ZSwgb3B0aW9ucykpKTtcbiAgICBhY3RpdmVMb2NhbGUgPSBzb3VyY2VMb2NhbGUgPSBjb25maWcuc291cmNlTG9jYWxlO1xuICAgIHZhbGlkTG9jYWxlcyA9IG5ldyBTZXQoY29uZmlnLnRhcmdldExvY2FsZXMpO1xuICAgIHZhbGlkTG9jYWxlcy5hZGQoY29uZmlnLnNvdXJjZUxvY2FsZSk7XG4gICAgbG9hZExvY2FsZSA9IGNvbmZpZy5sb2FkTG9jYWxlO1xuICAgIHJldHVybiB7IGdldExvY2FsZSwgc2V0TG9jYWxlIH07XG59O1xuLyoqXG4gKiBSZXR1cm4gdGhlIGFjdGl2ZSBsb2NhbGUgY29kZS5cbiAqL1xuY29uc3QgZ2V0TG9jYWxlID0gKCkgPT4ge1xuICAgIHJldHVybiBhY3RpdmVMb2NhbGU7XG59O1xuLyoqXG4gKiBTZXQgdGhlIGFjdGl2ZSBsb2NhbGUgY29kZSwgYW5kIGJlZ2luIGxvYWRpbmcgdGVtcGxhdGVzIGZvciB0aGF0IGxvY2FsZSB1c2luZ1xuICogdGhlIGBsb2FkTG9jYWxlYCBmdW5jdGlvbiB0aGF0IHdhcyBwYXNzZWQgdG8gYGNvbmZpZ3VyZUxvY2FsaXphdGlvbmAuIFJldHVybnNcbiAqIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIG5leHQgbG9jYWxlIGlzIHJlYWR5IHRvIGJlIHJlbmRlcmVkLlxuICpcbiAqIE5vdGUgdGhhdCBpZiBhIHNlY29uZCBjYWxsIHRvIGBzZXRMb2NhbGVgIGlzIG1hZGUgd2hpbGUgdGhlIGZpcnN0IHJlcXVlc3RlZFxuICogbG9jYWxlIGlzIHN0aWxsIGxvYWRpbmcsIHRoZW4gdGhlIHNlY29uZCBjYWxsIHRha2VzIHByZWNlZGVuY2UsIGFuZCB0aGVcbiAqIHByb21pc2UgcmV0dXJuZWQgZnJvbSB0aGUgZmlyc3QgY2FsbCB3aWxsIHJlc29sdmUgd2hlbiBzZWNvbmQgbG9jYWxlIGlzXG4gKiByZWFkeS4gSWYgeW91IG5lZWQgdG8ga25vdyB3aGV0aGVyIGEgcGFydGljdWxhciBsb2NhbGUgd2FzIGxvYWRlZCwgY2hlY2tcbiAqIGBnZXRMb2NhbGVgIGFmdGVyIHRoZSBwcm9taXNlIHJlc29sdmVzLlxuICpcbiAqIFRocm93cyBpZiB0aGUgZ2l2ZW4gbG9jYWxlIGlzIG5vdCBjb250YWluZWQgYnkgdGhlIGNvbmZpZ3VyZWQgYHNvdXJjZUxvY2FsZWBcbiAqIG9yIGB0YXJnZXRMb2NhbGVzYC5cbiAqL1xuY29uc3Qgc2V0TG9jYWxlID0gKG5ld0xvY2FsZSkgPT4ge1xuICAgIGlmIChuZXdMb2NhbGUgPT09IChsb2FkaW5nTG9jYWxlICE9PSBudWxsICYmIGxvYWRpbmdMb2NhbGUgIT09IHZvaWQgMCA/IGxvYWRpbmdMb2NhbGUgOiBhY3RpdmVMb2NhbGUpKSB7XG4gICAgICAgIHJldHVybiBsb2FkaW5nLnByb21pc2U7XG4gICAgfVxuICAgIGlmICghdmFsaWRMb2NhbGVzIHx8ICFsb2FkTG9jYWxlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW50ZXJuYWwgZXJyb3InKTtcbiAgICB9XG4gICAgaWYgKCF2YWxpZExvY2FsZXMuaGFzKG5ld0xvY2FsZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGxvY2FsZSBjb2RlJyk7XG4gICAgfVxuICAgIHJlcXVlc3RJZCsrO1xuICAgIGNvbnN0IHRoaXNSZXF1ZXN0SWQgPSByZXF1ZXN0SWQ7XG4gICAgbG9hZGluZ0xvY2FsZSA9IG5ld0xvY2FsZTtcbiAgICBpZiAobG9hZGluZy5zZXR0bGVkKSB7XG4gICAgICAgIGxvYWRpbmcgPSBuZXcgRGVmZXJyZWQoKTtcbiAgICB9XG4gICAgZGlzcGF0Y2hTdGF0dXNFdmVudCh7IHN0YXR1czogJ2xvYWRpbmcnLCBsb2FkaW5nTG9jYWxlOiBuZXdMb2NhbGUgfSk7XG4gICAgY29uc3QgbG9jYWxlUHJvbWlzZSA9IG5ld0xvY2FsZSA9PT0gc291cmNlTG9jYWxlXG4gICAgICAgID8gLy8gV2UgY291bGQgc3dpdGNoIHRvIHRoZSBzb3VyY2UgbG9jYWxlIHN5bmNocm9ub3VzbHksIGJ1dCB3ZSBwcmVmZXIgdG9cbiAgICAgICAgICAgIC8vIHF1ZXVlIGl0IG9uIGEgbWljcm90YXNrIHNvIHRoYXQgc3dpdGNoaW5nIGxvY2FsZXMgaXMgY29uc2lzdGVudGx5XG4gICAgICAgICAgICAvLyBhc3luY2hyb25vdXMuXG4gICAgICAgICAgICBQcm9taXNlLnJlc29sdmUoeyB0ZW1wbGF0ZXM6IHVuZGVmaW5lZCB9KVxuICAgICAgICA6IGxvYWRMb2NhbGUobmV3TG9jYWxlKTtcbiAgICBsb2NhbGVQcm9taXNlLnRoZW4oKG1vZCkgPT4ge1xuICAgICAgICBpZiAocmVxdWVzdElkID09PSB0aGlzUmVxdWVzdElkKSB7XG4gICAgICAgICAgICBhY3RpdmVMb2NhbGUgPSBuZXdMb2NhbGU7XG4gICAgICAgICAgICBsb2FkaW5nTG9jYWxlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGVtcGxhdGVzID0gbW9kLnRlbXBsYXRlcztcbiAgICAgICAgICAgIGRpc3BhdGNoU3RhdHVzRXZlbnQoeyBzdGF0dXM6ICdyZWFkeScsIHJlYWR5TG9jYWxlOiBuZXdMb2NhbGUgfSk7XG4gICAgICAgICAgICBsb2FkaW5nLnJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBFbHNlIGFub3RoZXIgbG9jYWxlIHdhcyByZXF1ZXN0ZWQgaW4gdGhlIG1lYW50aW1lLiBEb24ndCByZXNvbHZlIG9yXG4gICAgICAgIC8vIHJlamVjdCwgYmVjYXVzZSB0aGUgbmV3ZXIgbG9hZCBjYWxsIGlzIGdvaW5nIHRvIHVzZSB0aGUgc2FtZSBwcm9taXNlLlxuICAgICAgICAvLyBOb3RlIHRoZSB1c2VyIGNhbiBjYWxsIGdldExvY2FsZSgpIGFmdGVyIHRoZSBwcm9taXNlIHJlc29sdmVzIGlmIHRoZXlcbiAgICAgICAgLy8gbmVlZCB0byBjaGVjayBpZiB0aGUgbG9jYWxlIGlzIHN0aWxsIHRoZSBvbmUgdGhleSBleHBlY3RlZCB0byBsb2FkLlxuICAgIH0sIChlcnIpID0+IHtcbiAgICAgICAgaWYgKHJlcXVlc3RJZCA9PT0gdGhpc1JlcXVlc3RJZCkge1xuICAgICAgICAgICAgZGlzcGF0Y2hTdGF0dXNFdmVudCh7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiAnZXJyb3InLFxuICAgICAgICAgICAgICAgIGVycm9yTG9jYWxlOiBuZXdMb2NhbGUsXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlcnIudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbG9hZGluZy5yZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBsb2FkaW5nLnByb21pc2U7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cnVudGltZS5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmltcG9ydCB7IGRlZmF1bHRNc2cgfSBmcm9tICcuL2ludGVybmFsL2RlZmF1bHQtbXNnLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vaW50ZXJuYWwvbG9jYWxlLXN0YXR1cy1ldmVudC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2ludGVybmFsL3N0ci10YWcuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9pbnRlcm5hbC90eXBlcy5qcyc7XG4vLyBUT0RPKGFvbWFya3MpIEluIGEgZnV0dXJlIGJyZWFraW5nIHZlcnNpb24sIHJlbW92ZSB0aGVzZSBpbXBvcnRzIHNvIHRoYXQgdGhlXG4vLyBidWxrIG9mIHRoZSBjb2RlIGlzbid0IGluY2x1ZGVkIGluIGJ1bmRsZXMgYnkgZGVmYXVsdC4gSW4gcGFydGljdWxhciBpbWFnaW5lXG4vLyB0aGUgY29tcG9uZW50IGxpYnJhcnkgdXNlLWNhc2Ugd2hlcmUgbXNnKCkgY2FsbHMgYXJlIG1hZGUsIGJ1dCB0aGVyZSBpcyBub1xuLy8gbmVlZCB0byBhY3R1YWxseSBpbml0aWFsaXplIGFueSBvZiB0aGUgbG9jYWxpemF0aW9uIHJ1bnRpbWUuXG5leHBvcnQgKiBmcm9tICcuL2ludGVybmFsL2xvY2FsaXplZC1jb250cm9sbGVyLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vaW50ZXJuYWwvbG9jYWxpemVkLWRlY29yYXRvci5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2luaXQvcnVudGltZS5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2luaXQvdHJhbnNmb3JtLmpzJztcbi8qKlxuICogTWFrZSBhIHN0cmluZyBvciBsaXQtaHRtbCB0ZW1wbGF0ZSBsb2NhbGl6YWJsZS5cbiAqXG4gKiBAcGFyYW0gdGVtcGxhdGUgQSBzdHJpbmcsIGEgbGl0LWh0bWwgdGVtcGxhdGUsIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zXG4gKiBlaXRoZXIgYSBzdHJpbmcgb3IgbGl0LWh0bWwgdGVtcGxhdGUuXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqICAgLSBpZDogT3B0aW9uYWwgcHJvamVjdC13aWRlIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGlzIHRlbXBsYXRlLiBJZlxuICogICAgIG9taXR0ZWQsIGFuIGlkIHdpbGwgYmUgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgZnJvbSB0aGUgdGVtcGxhdGUgc3RyaW5ncy5cbiAqICAgLSBkZXNjOiBPcHRpb25hbCBkZXNjcmlwdGlvblxuICovXG5leHBvcnQgbGV0IG1zZyA9IGRlZmF1bHRNc2c7XG5sZXQgaW5zdGFsbGVkID0gZmFsc2U7XG4vKipcbiAqIEludGVybmFsIG9ubHkuIERvIG5vdCB1c2UgdGhpcyBmdW5jdGlvbi5cbiAqXG4gKiBJbnN0YWxscyBhbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgbXNnIGZ1bmN0aW9uIHRvIHJlcGxhY2UgdGhlIGRlZmF1bHRcbiAqIGlkZW50aXR5IGZ1bmN0aW9uLiBUaHJvd3MgaWYgY2FsbGVkIG1vcmUgdGhhbiBvbmNlLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gX2luc3RhbGxNc2dJbXBsZW1lbnRhdGlvbihpbXBsKSB7XG4gICAgaWYgKGluc3RhbGxlZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2xpdC1sb2NhbGl6ZSBjYW4gb25seSBiZSBjb25maWd1cmVkIG9uY2UnKTtcbiAgICB9XG4gICAgbXNnID0gaW1wbDtcbiAgICBpbnN0YWxsZWQgPSB0cnVlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGl0LWxvY2FsaXplLmpzLm1hcCIsIi8vIERvIG5vdCBtb2RpZnkgdGhpcyBmaWxlIGJ5IGhhbmQhXG4vLyBSZS1nZW5lcmF0ZSB0aGlzIGZpbGUgYnkgcnVubmluZyBsaXQtbG9jYWxpemUuXG5cbi8qKlxuICogVGhlIGxvY2FsZSBjb2RlIHRoYXQgdGVtcGxhdGVzIGluIHRoaXMgc291cmNlIGNvZGUgYXJlIHdyaXR0ZW4gaW4uXG4gKi9cbmV4cG9ydCBjb25zdCBzb3VyY2VMb2NhbGUgPSBgZW5gO1xuXG4vKipcbiAqIFRoZSBvdGhlciBsb2NhbGUgY29kZXMgdGhhdCB0aGlzIGFwcGxpY2F0aW9uIGlzIGxvY2FsaXplZCBpbnRvLiBTb3J0ZWRcbiAqIGxleGljb2dyYXBoaWNhbGx5LlxuICovXG5leHBvcnQgY29uc3QgdGFyZ2V0TG9jYWxlcyA9IFtdIGFzIGNvbnN0O1xuXG4vKipcbiAqIEFsbCB2YWxpZCBwcm9qZWN0IGxvY2FsZSBjb2Rlcy4gU29ydGVkIGxleGljb2dyYXBoaWNhbGx5LlxuICovXG5leHBvcnQgY29uc3QgYWxsTG9jYWxlcyA9IFtgZW5gXSBhcyBjb25zdDtcbiIsImltcG9ydCAnQHdlYmNvbXBvbmVudHMvc2NvcGVkLWN1c3RvbS1lbGVtZW50LXJlZ2lzdHJ5JztcbmltcG9ydCB7IGNvbmZpZ3VyZUxvY2FsaXphdGlvbiB9IGZyb20gJ0BsaXQvbG9jYWxpemUnO1xuaW1wb3J0IHsgc291cmNlTG9jYWxlLCB0YXJnZXRMb2NhbGVzIH0gZnJvbSAnLi9nZW5lcmF0ZWQvbG9jYWxlLWNvZGVzJztcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCB7IGdldExvY2FsZSwgc2V0TG9jYWxlIH0gPSBjb25maWd1cmVMb2NhbGl6YXRpb24oe1xuICBzb3VyY2VMb2NhbGUsXG4gIHRhcmdldExvY2FsZXMsXG4gIGxvYWRMb2NhbGU6IChsb2NhbGU6IHN0cmluZykgPT4gaW1wb3J0KGAuL2dlbmVyYXRlZC8ke2xvY2FsZX0uanNgKSxcbn0pO1xuIiwiY29uc3QgYXBwbGllZENsYXNzTWl4aW5zID0gbmV3IFdlYWtNYXAoKTtcblxuLyoqIFZlZmlmeSBpZiB0aGUgTWl4aW4gd2FzIHByZXZpb3VzbHkgYXBwbHllZFxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG1peGluICAgICAgTWl4aW4gYmVpbmcgYXBwbHllZFxuICogQHBhcmFtIHtvYmplY3R9IHN1cGVyQ2xhc3MgICBDbGFzcyByZWNlaXZpbmcgdGhlIG5ldyBtaXhpblxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIHdhc01peGluUHJldmlvdXNseUFwcGxpZWQobWl4aW4sIHN1cGVyQ2xhc3MpIHtcbiAgbGV0IGtsYXNzID0gc3VwZXJDbGFzcztcbiAgd2hpbGUgKGtsYXNzKSB7XG4gICAgaWYgKGFwcGxpZWRDbGFzc01peGlucy5nZXQoa2xhc3MpID09PSBtaXhpbikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGtsYXNzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGtsYXNzKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKiBBcHBseSBlYWNoIG1peGluIGluIHRoZSBjaGFpbiB0byBtYWtlIHN1cmUgdGhleSBhcmUgbm90IGFwcGxpZWQgbW9yZSB0aGFuIG9uY2UgdG8gdGhlIGZpbmFsIGNsYXNzLlxuICogQGV4cG9ydFxuICogQHBhcmFtIHtmdW5jdGlvbn0gbWl4aW4gICAgICBNaXhpbiB0byBiZSBhcHBseWVkXG4gKiBAcmV0dXJucyB7b2JqZWN0fSAgICAgICAgICAgIE1peGVkIGNsYXNzIHdpdGggbWl4aW4gYXBwbGllZFxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVkdXBlTWl4aW4obWl4aW4pIHtcbiAgcmV0dXJuIHN1cGVyQ2xhc3MgPT4ge1xuICAgIGlmICh3YXNNaXhpblByZXZpb3VzbHlBcHBsaWVkKG1peGluLCBzdXBlckNsYXNzKSkge1xuICAgICAgcmV0dXJuIHN1cGVyQ2xhc3M7XG4gICAgfVxuICAgIGNvbnN0IG1peGVkQ2xhc3MgPSBtaXhpbihzdXBlckNsYXNzKTtcbiAgICBhcHBsaWVkQ2xhc3NNaXhpbnMuc2V0KG1peGVkQ2xhc3MsIG1peGluKTtcbiAgICByZXR1cm4gbWl4ZWRDbGFzcztcbiAgfTtcbn1cbiIsImltcG9ydCB7IGRlZHVwZU1peGluIH0gZnJvbSAnQG9wZW4td2MvZGVkdXBlLW1peGluJztcbmltcG9ydCB7IGFkb3B0U3R5bGVzIH0gZnJvbSAnQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2Nzcy10YWcuanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vdHlwZXMnKS5SZW5kZXJPcHRpb25zfSBSZW5kZXJPcHRpb25zXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3R5cGVzJykuU2NvcGVkRWxlbWVudHNNaXhpbn0gU2NvcGVkRWxlbWVudHNNaXhpblxuICogQHR5cGVkZWYge2ltcG9ydCgnLi90eXBlcycpLlNjb3BlZEVsZW1lbnRzSG9zdH0gU2NvcGVkRWxlbWVudHNIb3N0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3R5cGVzJykuU2NvcGVkRWxlbWVudHNNYXB9IFNjb3BlZEVsZW1lbnRzTWFwXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdAbGl0L3JlYWN0aXZlLWVsZW1lbnQnKS5DU1NSZXN1bHRPck5hdGl2ZX0gQ1NTUmVzdWx0T3JOYXRpdmVcbiAqL1xuXG4vLyBAdHMtaWdub3JlXG5jb25zdCBzdXBwb3J0c1Njb3BlZFJlZ2lzdHJ5ID0gISFTaGFkb3dSb290LnByb3RvdHlwZS5jcmVhdGVFbGVtZW50O1xuXG4vKipcbiAqIEB0ZW1wbGF0ZSB7aW1wb3J0KCcuL3R5cGVzJykuQ29uc3RydWN0b3I8SFRNTEVsZW1lbnQ+fSBUXG4gKiBAcGFyYW0ge1R9IHN1cGVyY2xhc3NcbiAqIEByZXR1cm4ge1QgJiBpbXBvcnQoJy4vdHlwZXMnKS5Db25zdHJ1Y3RvcjxTY29wZWRFbGVtZW50c0hvc3Q+fVxuICovXG5jb25zdCBTY29wZWRFbGVtZW50c01peGluSW1wbGVtZW50YXRpb24gPSBzdXBlcmNsYXNzID0+XG4gIC8qKiBAdHlwZSB7U2NvcGVkRWxlbWVudHNIb3N0fSAqL1xuICBjbGFzcyBTY29wZWRFbGVtZW50c0hvc3QgZXh0ZW5kcyBzdXBlcmNsYXNzIHtcbiAgICAvKipcbiAgICAgKiBPYnRhaW5zIHRoZSBzY29wZWQgZWxlbWVudHMgZGVmaW5pdGlvbnMgbWFwIGlmIHNwZWNpZmllZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtTY29wZWRFbGVtZW50c01hcH1cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IHNjb3BlZEVsZW1lbnRzKCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9idGFpbnMgdGhlIFNoYWRvd1Jvb3Qgb3B0aW9ucy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtTaGFkb3dSb290SW5pdH1cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IHNoYWRvd1Jvb3RPcHRpb25zKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX19zaGFkb3dSb290T3B0aW9ucztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHNoYWRvd1Jvb3Qgb3B0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U2hhZG93Um9vdEluaXR9IHZhbHVlXG4gICAgICovXG4gICAgc3RhdGljIHNldCBzaGFkb3dSb290T3B0aW9ucyh2YWx1ZSkge1xuICAgICAgdGhpcy5fX3NoYWRvd1Jvb3RPcHRpb25zID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT2J0YWlucyB0aGUgZWxlbWVudCBzdHlsZXMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Q1NTUmVzdWx0T3JOYXRpdmVbXX1cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IGVsZW1lbnRTdHlsZXMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2VsZW1lbnRTdHlsZXM7XG4gICAgfVxuXG4gICAgc3RhdGljIHNldCBlbGVtZW50U3R5bGVzKHN0eWxlcykge1xuICAgICAgdGhpcy5fX2VsZW1lbnRTdHlsZXMgPSBzdHlsZXM7XG4gICAgfVxuXG4gICAgLy8gZWl0aGVyIFRTIG9yIEVTTGludCB3aWxsIGNvbXBsYWluIGhlcmVcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBjb25zdHJ1Y3RvciguLi5fYXJncykge1xuICAgICAgc3VwZXIoKTtcbiAgICAgIC8qKiBAdHlwZSB7UmVuZGVyT3B0aW9uc30gKi9cbiAgICAgIHRoaXMucmVuZGVyT3B0aW9ucyA9IHRoaXMucmVuZGVyT3B0aW9ucyB8fCB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT2J0YWlucyB0aGUgQ3VzdG9tRWxlbWVudFJlZ2lzdHJ5IGFzc29jaWF0ZWQgdG8gdGhlIFNoYWRvd1Jvb3QuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Q3VzdG9tRWxlbWVudFJlZ2lzdHJ5fVxuICAgICAqL1xuICAgIGdldCByZWdpc3RyeSgpIHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLl9fcmVnaXN0cnk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBDdXN0b21FbGVtZW50UmVnaXN0cnkgYXNzb2NpYXRlZCB0byB0aGUgU2hhZG93Um9vdFxuICAgICAqXG4gICAgICogQHBhcmFtIHtDdXN0b21FbGVtZW50UmVnaXN0cnl9IHJlZ2lzdHJ5XG4gICAgICovXG4gICAgc2V0IHJlZ2lzdHJ5KHJlZ2lzdHJ5KSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB0aGlzLmNvbnN0cnVjdG9yLl9fcmVnaXN0cnkgPSByZWdpc3RyeTtcbiAgICB9XG5cbiAgICBjcmVhdGVSZW5kZXJSb290KCkge1xuICAgICAgY29uc3QgeyBzY29wZWRFbGVtZW50cywgc2hhZG93Um9vdE9wdGlvbnMsIGVsZW1lbnRTdHlsZXMgfSA9XG4gICAgICAgIC8qKiBAdHlwZSB7dHlwZW9mIFNjb3BlZEVsZW1lbnRzSG9zdH0gKi8gKHRoaXMuY29uc3RydWN0b3IpO1xuXG4gICAgICBjb25zdCBzaG91bGRDcmVhdGVSZWdpc3RyeSA9XG4gICAgICAgICF0aGlzLnJlZ2lzdHJ5IHx8XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgKHRoaXMucmVnaXN0cnkgPT09IHRoaXMuY29uc3RydWN0b3IuX19yZWdpc3RyeSAmJlxuICAgICAgICAgICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5jb25zdHJ1Y3RvciwgJ19fcmVnaXN0cnknKSk7XG5cbiAgICAgIC8qKlxuICAgICAgICogQ3JlYXRlIGEgbmV3IHJlZ2lzdHJ5IGlmOlxuICAgICAgICogLSB0aGUgcmVnaXN0cnkgaXMgbm90IGRlZmluZWRcbiAgICAgICAqIC0gdGhpcyBjbGFzcyBkb2Vzbid0IGhhdmUgaXRzIG93biByZWdpc3RyeSAqQU5EKiBoYXMgbm8gc2hhcmVkIHJlZ2lzdHJ5XG4gICAgICAgKi9cbiAgICAgIGlmIChzaG91bGRDcmVhdGVSZWdpc3RyeSkge1xuICAgICAgICB0aGlzLnJlZ2lzdHJ5ID0gc3VwcG9ydHNTY29wZWRSZWdpc3RyeSA/IG5ldyBDdXN0b21FbGVtZW50UmVnaXN0cnkoKSA6IGN1c3RvbUVsZW1lbnRzO1xuICAgICAgICBmb3IgKGNvbnN0IFt0YWdOYW1lLCBrbGFzc10gb2YgT2JqZWN0LmVudHJpZXMoc2NvcGVkRWxlbWVudHMpKSB7XG4gICAgICAgICAgdGhpcy5kZWZpbmVTY29wZWRFbGVtZW50KHRhZ05hbWUsIGtsYXNzKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKiogQHR5cGUge1NoYWRvd1Jvb3RJbml0fSAqL1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgbW9kZTogJ29wZW4nLFxuICAgICAgICAuLi5zaGFkb3dSb290T3B0aW9ucyxcbiAgICAgICAgY3VzdG9tRWxlbWVudHM6IHRoaXMucmVnaXN0cnksXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBjcmVhdGVkUm9vdCA9IHRoaXMuYXR0YWNoU2hhZG93KG9wdGlvbnMpO1xuICAgICAgaWYgKHN1cHBvcnRzU2NvcGVkUmVnaXN0cnkpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJPcHRpb25zLmNyZWF0aW9uU2NvcGUgPSBjcmVhdGVkUm9vdDtcbiAgICAgIH1cblxuICAgICAgaWYgKGNyZWF0ZWRSb290IGluc3RhbmNlb2YgU2hhZG93Um9vdCkge1xuICAgICAgICBhZG9wdFN0eWxlcyhjcmVhdGVkUm9vdCwgZWxlbWVudFN0eWxlcyk7XG4gICAgICAgIHRoaXMucmVuZGVyT3B0aW9ucy5yZW5kZXJCZWZvcmUgPSB0aGlzLnJlbmRlck9wdGlvbnMucmVuZGVyQmVmb3JlIHx8IGNyZWF0ZWRSb290LmZpcnN0Q2hpbGQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjcmVhdGVkUm9vdDtcbiAgICB9XG5cbiAgICBjcmVhdGVTY29wZWRFbGVtZW50KHRhZ05hbWUpIHtcbiAgICAgIGNvbnN0IHJvb3QgPSBzdXBwb3J0c1Njb3BlZFJlZ2lzdHJ5ID8gdGhpcy5zaGFkb3dSb290IDogZG9jdW1lbnQ7XG4gICAgICAvLyBAdHMtaWdub3JlIHBvbHlmaWxsIHRvIHN1cHBvcnQgY3JlYXRlRWxlbWVudCBvbiBzaGFkb3dSb290IGlzIGxvYWRlZFxuICAgICAgcmV0dXJuIHJvb3QuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIGEgc2NvcGVkIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnTmFtZVxuICAgICAqIEBwYXJhbSB7dHlwZW9mIEhUTUxFbGVtZW50fSBrbGFzc1xuICAgICAqL1xuICAgIGRlZmluZVNjb3BlZEVsZW1lbnQodGFnTmFtZSwga2xhc3MpIHtcbiAgICAgIGNvbnN0IHJlZ2lzdGVyZWRDbGFzcyA9IHRoaXMucmVnaXN0cnkuZ2V0KHRhZ05hbWUpO1xuICAgICAgaWYgKHJlZ2lzdGVyZWRDbGFzcyAmJiBzdXBwb3J0c1Njb3BlZFJlZ2lzdHJ5ID09PSBmYWxzZSAmJiByZWdpc3RlcmVkQ2xhc3MgIT09IGtsYXNzKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgW1xuICAgICAgICAgICAgYFlvdSBhcmUgdHJ5aW5nIHRvIHJlLXJlZ2lzdGVyIHRoZSBcIiR7dGFnTmFtZX1cIiBjdXN0b20gZWxlbWVudCB3aXRoIGEgZGlmZmVyZW50IGNsYXNzIHZpYSBTY29wZWRFbGVtZW50c01peGluLmAsXG4gICAgICAgICAgICAnVGhpcyBpcyBvbmx5IHBvc3NpYmxlIHdpdGggYSBDdXN0b21FbGVtZW50UmVnaXN0cnkuJyxcbiAgICAgICAgICAgICdZb3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0aGlzIGZlYXR1cmUgc28geW91IHdpbGwgbmVlZCB0byBsb2FkIGEgcG9seWZpbGwgZm9yIGl0LicsXG4gICAgICAgICAgICAnTG9hZCBcIkB3ZWJjb21wb25lbnRzL3Njb3BlZC1jdXN0b20tZWxlbWVudC1yZWdpc3RyeVwiIGJlZm9yZSB5b3UgcmVnaXN0ZXIgQU5ZIHdlYiBjb21wb25lbnQgdG8gdGhlIGdsb2JhbCBjdXN0b21FbGVtZW50cyByZWdpc3RyeS4nLFxuICAgICAgICAgICAgJ2UuZy4gYWRkIFwiPHNjcmlwdCBzcmM9XCIvbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3Njb3BlZC1jdXN0b20tZWxlbWVudC1yZWdpc3RyeS9zY29wZWQtY3VzdG9tLWVsZW1lbnQtcmVnaXN0cnkubWluLmpzXCI+PC9zY3JpcHQ+XCIgYXMgeW91ciBmaXJzdCBzY3JpcHQgdGFnLicsXG4gICAgICAgICAgICAnRm9yIG1vcmUgZGV0YWlscyB5b3UgY2FuIHZpc2l0IGh0dHBzOi8vb3Blbi13Yy5vcmcvZG9jcy9kZXZlbG9wbWVudC9zY29wZWQtZWxlbWVudHMvJyxcbiAgICAgICAgICBdLmpvaW4oJ1xcbicpLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKCFyZWdpc3RlcmVkQ2xhc3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVnaXN0cnkuZGVmaW5lKHRhZ05hbWUsIGtsYXNzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnJlZ2lzdHJ5LmdldCh0YWdOYW1lKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCB1c2UgdGhlIG5hdGl2ZSBlbC50YWdOYW1lIGluc3RlYWRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWdOYW1lXG4gICAgICogQHJldHVybnMge3N0cmluZ30gdGhlIHRhZyBuYW1lXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBnZXRTY29wZWRUYWdOYW1lKHRhZ05hbWUpIHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmdldFNjb3BlZFRhZ05hbWUodGFnTmFtZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgdXNlIHRoZSBuYXRpdmUgZWwudGFnTmFtZSBpbnN0ZWFkXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnTmFtZVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSB0YWcgbmFtZVxuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgc3RhdGljIGdldFNjb3BlZFRhZ05hbWUodGFnTmFtZSkge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgcmV0dXJuIHRoaXMuX19yZWdpc3RyeS5nZXQodGFnTmFtZSkgPyB0YWdOYW1lIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfTtcblxuZXhwb3J0IGNvbnN0IFNjb3BlZEVsZW1lbnRzTWl4aW4gPSBkZWR1cGVNaXhpbihTY29wZWRFbGVtZW50c01peGluSW1wbGVtZW50YXRpb24pO1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5jb25zdCBlPWU9Pm49PlwiZnVuY3Rpb25cIj09dHlwZW9mIG4/KChlLG4pPT4oY3VzdG9tRWxlbWVudHMuZGVmaW5lKGUsbiksbikpKGUsbik6KChlLG4pPT57Y29uc3R7a2luZDp0LGVsZW1lbnRzOnN9PW47cmV0dXJue2tpbmQ6dCxlbGVtZW50czpzLGZpbmlzaGVyKG4pe2N1c3RvbUVsZW1lbnRzLmRlZmluZShlLG4pfX19KShlLG4pO2V4cG9ydHtlIGFzIGN1c3RvbUVsZW1lbnR9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3VzdG9tLWVsZW1lbnQuanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmNvbnN0IGk9KGksZSk9PlwibWV0aG9kXCI9PT1lLmtpbmQmJmUuZGVzY3JpcHRvciYmIShcInZhbHVlXCJpbiBlLmRlc2NyaXB0b3IpP3suLi5lLGZpbmlzaGVyKG4pe24uY3JlYXRlUHJvcGVydHkoZS5rZXksaSl9fTp7a2luZDpcImZpZWxkXCIsa2V5OlN5bWJvbCgpLHBsYWNlbWVudDpcIm93blwiLGRlc2NyaXB0b3I6e30sb3JpZ2luYWxLZXk6ZS5rZXksaW5pdGlhbGl6ZXIoKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmluaXRpYWxpemVyJiYodGhpc1tlLmtleV09ZS5pbml0aWFsaXplci5jYWxsKHRoaXMpKX0sZmluaXNoZXIobil7bi5jcmVhdGVQcm9wZXJ0eShlLmtleSxpKX19LGU9KGksZSxuKT0+e2UuY29uc3RydWN0b3IuY3JlYXRlUHJvcGVydHkobixpKX07ZnVuY3Rpb24gbihuKXtyZXR1cm4odCxvKT0+dm9pZCAwIT09bz9lKG4sdCxvKTppKG4sdCl9ZXhwb3J0e24gYXMgcHJvcGVydHl9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvcGVydHkuanMubWFwXG4iLCJpbXBvcnR7cHJvcGVydHkgYXMgcn1mcm9tXCIuL3Byb3BlcnR5LmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9mdW5jdGlvbiB0KHQpe3JldHVybiByKHsuLi50LHN0YXRlOiEwfSl9ZXhwb3J0e3QgYXMgc3RhdGV9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdGUuanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmNvbnN0IGU9KGUsdCxvKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LG8sZSl9LHQ9KGUsdCk9Pih7a2luZDpcIm1ldGhvZFwiLHBsYWNlbWVudDpcInByb3RvdHlwZVwiLGtleTp0LmtleSxkZXNjcmlwdG9yOmV9KSxvPSh7ZmluaXNoZXI6ZSxkZXNjcmlwdG9yOnR9KT0+KG8sbik9Pnt2YXIgcjtpZih2b2lkIDA9PT1uKXtjb25zdCBuPW51bGwhPT0ocj1vLm9yaWdpbmFsS2V5KSYmdm9pZCAwIT09cj9yOm8ua2V5LGk9bnVsbCE9dD97a2luZDpcIm1ldGhvZFwiLHBsYWNlbWVudDpcInByb3RvdHlwZVwiLGtleTpuLGRlc2NyaXB0b3I6dChvLmtleSl9OnsuLi5vLGtleTpufTtyZXR1cm4gbnVsbCE9ZSYmKGkuZmluaXNoZXI9ZnVuY3Rpb24odCl7ZSh0LG4pfSksaX17Y29uc3Qgcj1vLmNvbnN0cnVjdG9yO3ZvaWQgMCE9PXQmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLG4sdChuKSksbnVsbD09ZXx8ZShyLG4pfX07ZXhwb3J0e28gYXMgZGVjb3JhdGVQcm9wZXJ0eSxlIGFzIGxlZ2FjeVByb3RvdHlwZU1ldGhvZCx0IGFzIHN0YW5kYXJkUHJvdG90eXBlTWV0aG9kfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2UuanMubWFwXG4iLCJpbXBvcnR7ZGVjb3JhdGVQcm9wZXJ0eSBhcyBvfWZyb21cIi4vYmFzZS5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovdmFyIG47Y29uc3QgZT1udWxsIT0obnVsbD09PShuPXdpbmRvdy5IVE1MU2xvdEVsZW1lbnQpfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLnByb3RvdHlwZS5hc3NpZ25lZEVsZW1lbnRzKT8obyxuKT0+by5hc3NpZ25lZEVsZW1lbnRzKG4pOihvLG4pPT5vLmFzc2lnbmVkTm9kZXMobikuZmlsdGVyKChvPT5vLm5vZGVUeXBlPT09Tm9kZS5FTEVNRU5UX05PREUpKTtmdW5jdGlvbiBsKG4pe2NvbnN0e3Nsb3Q6bCxzZWxlY3Rvcjp0fT1udWxsIT1uP246e307cmV0dXJuIG8oe2Rlc2NyaXB0b3I6bz0+KHtnZXQoKXt2YXIgbztjb25zdCByPVwic2xvdFwiKyhsP2BbbmFtZT0ke2x9XWA6XCI6bm90KFtuYW1lXSlcIiksaT1udWxsPT09KG89dGhpcy5yZW5kZXJSb290KXx8dm9pZCAwPT09bz92b2lkIDA6by5xdWVyeVNlbGVjdG9yKHIpLHM9bnVsbCE9aT9lKGksbik6W107cmV0dXJuIHQ/cy5maWx0ZXIoKG89Pm8ubWF0Y2hlcyh0KSkpOnN9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSl9KX1leHBvcnR7bCBhcyBxdWVyeUFzc2lnbmVkRWxlbWVudHN9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cXVlcnktYXNzaWduZWQtZWxlbWVudHMuanMubWFwXG4iLCJpbXBvcnR7ZGVjb3JhdGVQcm9wZXJ0eSBhcyBlfWZyb21cIi4vYmFzZS5qc1wiO2ltcG9ydHtxdWVyeUFzc2lnbmVkRWxlbWVudHMgYXMgdH1mcm9tXCIuL3F1ZXJ5LWFzc2lnbmVkLWVsZW1lbnRzLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9mdW5jdGlvbiBvKG8sbixyKXtsZXQgbCxzPW87cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIG8/KHM9by5zbG90LGw9byk6bD17ZmxhdHRlbjpufSxyP3Qoe3Nsb3Q6cyxmbGF0dGVuOm4sc2VsZWN0b3I6cn0pOmUoe2Rlc2NyaXB0b3I6ZT0+KHtnZXQoKXt2YXIgZSx0O2NvbnN0IG89XCJzbG90XCIrKHM/YFtuYW1lPSR7c31dYDpcIjpub3QoW25hbWVdKVwiKSxuPW51bGw9PT0oZT10aGlzLnJlbmRlclJvb3QpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLnF1ZXJ5U2VsZWN0b3Iobyk7cmV0dXJuIG51bGwhPT0odD1udWxsPT1uP3ZvaWQgMDpuLmFzc2lnbmVkTm9kZXMobCkpJiZ2b2lkIDAhPT10P3Q6W119LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSl9KX1leHBvcnR7byBhcyBxdWVyeUFzc2lnbmVkTm9kZXN9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cXVlcnktYXNzaWduZWQtbm9kZXMuanMubWFwXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cblxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSwgU3VwcHJlc3NlZEVycm9yLCBTeW1ib2wgKi9cblxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XG4gIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XG4gIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59XG5cbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcbiAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcbiAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0O1xuICB9XG4gIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcbiAgdmFyIHQgPSB7fTtcbiAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICB0W3BdID0gc1twXTtcbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICB9XG4gIHJldHVybiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2VzRGVjb3JhdGUoY3RvciwgZGVzY3JpcHRvckluLCBkZWNvcmF0b3JzLCBjb250ZXh0SW4sIGluaXRpYWxpemVycywgZXh0cmFJbml0aWFsaXplcnMpIHtcbiAgZnVuY3Rpb24gYWNjZXB0KGYpIHsgaWYgKGYgIT09IHZvaWQgMCAmJiB0eXBlb2YgZiAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRnVuY3Rpb24gZXhwZWN0ZWRcIik7IHJldHVybiBmOyB9XG4gIHZhciBraW5kID0gY29udGV4dEluLmtpbmQsIGtleSA9IGtpbmQgPT09IFwiZ2V0dGVyXCIgPyBcImdldFwiIDoga2luZCA9PT0gXCJzZXR0ZXJcIiA/IFwic2V0XCIgOiBcInZhbHVlXCI7XG4gIHZhciB0YXJnZXQgPSAhZGVzY3JpcHRvckluICYmIGN0b3IgPyBjb250ZXh0SW5bXCJzdGF0aWNcIl0gPyBjdG9yIDogY3Rvci5wcm90b3R5cGUgOiBudWxsO1xuICB2YXIgZGVzY3JpcHRvciA9IGRlc2NyaXB0b3JJbiB8fCAodGFyZ2V0ID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGNvbnRleHRJbi5uYW1lKSA6IHt9KTtcbiAgdmFyIF8sIGRvbmUgPSBmYWxzZTtcbiAgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBjb250ZXh0ID0ge307XG4gICAgICBmb3IgKHZhciBwIGluIGNvbnRleHRJbikgY29udGV4dFtwXSA9IHAgPT09IFwiYWNjZXNzXCIgPyB7fSA6IGNvbnRleHRJbltwXTtcbiAgICAgIGZvciAodmFyIHAgaW4gY29udGV4dEluLmFjY2VzcykgY29udGV4dC5hY2Nlc3NbcF0gPSBjb250ZXh0SW4uYWNjZXNzW3BdO1xuICAgICAgY29udGV4dC5hZGRJbml0aWFsaXplciA9IGZ1bmN0aW9uIChmKSB7IGlmIChkb25lKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGFkZCBpbml0aWFsaXplcnMgYWZ0ZXIgZGVjb3JhdGlvbiBoYXMgY29tcGxldGVkXCIpOyBleHRyYUluaXRpYWxpemVycy5wdXNoKGFjY2VwdChmIHx8IG51bGwpKTsgfTtcbiAgICAgIHZhciByZXN1bHQgPSAoMCwgZGVjb3JhdG9yc1tpXSkoa2luZCA9PT0gXCJhY2Nlc3NvclwiID8geyBnZXQ6IGRlc2NyaXB0b3IuZ2V0LCBzZXQ6IGRlc2NyaXB0b3Iuc2V0IH0gOiBkZXNjcmlwdG9yW2tleV0sIGNvbnRleHQpO1xuICAgICAgaWYgKGtpbmQgPT09IFwiYWNjZXNzb3JcIikge1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHZvaWQgMCkgY29udGludWU7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCB8fCB0eXBlb2YgcmVzdWx0ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IGV4cGVjdGVkXCIpO1xuICAgICAgICAgIGlmIChfID0gYWNjZXB0KHJlc3VsdC5nZXQpKSBkZXNjcmlwdG9yLmdldCA9IF87XG4gICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LnNldCkpIGRlc2NyaXB0b3Iuc2V0ID0gXztcbiAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuaW5pdCkpIGluaXRpYWxpemVycy51bnNoaWZ0KF8pO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoXyA9IGFjY2VwdChyZXN1bHQpKSB7XG4gICAgICAgICAgaWYgKGtpbmQgPT09IFwiZmllbGRcIikgaW5pdGlhbGl6ZXJzLnVuc2hpZnQoXyk7XG4gICAgICAgICAgZWxzZSBkZXNjcmlwdG9yW2tleV0gPSBfO1xuICAgICAgfVxuICB9XG4gIGlmICh0YXJnZXQpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGNvbnRleHRJbi5uYW1lLCBkZXNjcmlwdG9yKTtcbiAgZG9uZSA9IHRydWU7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19ydW5Jbml0aWFsaXplcnModGhpc0FyZywgaW5pdGlhbGl6ZXJzLCB2YWx1ZSkge1xuICB2YXIgdXNlVmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbml0aWFsaXplcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlID0gdXNlVmFsdWUgPyBpbml0aWFsaXplcnNbaV0uY2FsbCh0aGlzQXJnLCB2YWx1ZSkgOiBpbml0aWFsaXplcnNbaV0uY2FsbCh0aGlzQXJnKTtcbiAgfVxuICByZXR1cm4gdXNlVmFsdWUgPyB2YWx1ZSA6IHZvaWQgMDtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3Byb3BLZXkoeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09IFwic3ltYm9sXCIgPyB4IDogXCJcIi5jb25jYXQoeCk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19zZXRGdW5jdGlvbk5hbWUoZiwgbmFtZSwgcHJlZml4KSB7XG4gIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzeW1ib2xcIikgbmFtZSA9IG5hbWUuZGVzY3JpcHRpb24gPyBcIltcIi5jb25jYXQobmFtZS5kZXNjcmlwdGlvbiwgXCJdXCIpIDogXCJcIjtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmLCBcIm5hbWVcIiwgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiBwcmVmaXggPyBcIlwiLmNvbmNhdChwcmVmaXgsIFwiIFwiLCBuYW1lKSA6IG5hbWUgfSk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xuICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgIHdoaWxlIChnICYmIChnID0gMCwgb3BbMF0gJiYgKF8gPSAwKSksIF8pIHRyeSB7XG4gICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgfVxufVxuXG5leHBvcnQgdmFyIF9fY3JlYXRlQmluZGluZyA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgb1trMl0gPSBtW2tdO1xufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgbykge1xuICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XG4gIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XG4gIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xuICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcbiAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XG4gICAgICB9XG4gIH07XG4gIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XG4gIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgaWYgKCFtKSByZXR1cm4gbztcbiAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gIHRyeSB7XG4gICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgfVxuICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgfVxuICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gIH1cbiAgcmV0dXJuIGFyO1xufVxuXG4vKiogQGRlcHJlY2F0ZWQgKi9cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcbiAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXG4gICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XG4gIHJldHVybiBhcjtcbn1cblxuLyoqIEBkZXByZWNhdGVkICovXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XG4gIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xuICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXG4gICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcbiAgICAgICAgICByW2tdID0gYVtqXTtcbiAgcmV0dXJuIHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5KHRvLCBmcm9tLCBwYWNrKSB7XG4gIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XG4gICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcbiAgICAgICAgICBhcltpXSA9IGZyb21baV07XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcbiAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xuICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xuICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xuICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XG4gIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxuICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XG4gIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxuICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XG4gIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cbiAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XG4gIHZhciBpLCBwO1xuICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xuICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBmYWxzZSB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XG4gIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG4gIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XG4gIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcbiAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxuICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xuICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxuICByZXR1cm4gY29va2VkO1xufTtcblxudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgb1tcImRlZmF1bHRcIl0gPSB2O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcbiAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XG4gIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRJbihzdGF0ZSwgcmVjZWl2ZXIpIHtcbiAgaWYgKHJlY2VpdmVyID09PSBudWxsIHx8ICh0eXBlb2YgcmVjZWl2ZXIgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHJlY2VpdmVyICE9PSBcImZ1bmN0aW9uXCIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHVzZSAnaW4nIG9wZXJhdG9yIG9uIG5vbi1vYmplY3RcIik7XG4gIHJldHVybiB0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyID09PSBzdGF0ZSA6IHN0YXRlLmhhcyhyZWNlaXZlcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FkZERpc3Bvc2FibGVSZXNvdXJjZShlbnYsIHZhbHVlLCBhc3luYykge1xuICBpZiAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHZvaWQgMCkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3QgZXhwZWN0ZWQuXCIpO1xuICAgIHZhciBkaXNwb3NlO1xuICAgIGlmIChhc3luYykge1xuICAgICAgICBpZiAoIVN5bWJvbC5hc3luY0Rpc3Bvc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNEaXNwb3NlIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgICAgICAgZGlzcG9zZSA9IHZhbHVlW1N5bWJvbC5hc3luY0Rpc3Bvc2VdO1xuICAgIH1cbiAgICBpZiAoZGlzcG9zZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGlmICghU3ltYm9sLmRpc3Bvc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuZGlzcG9zZSBpcyBub3QgZGVmaW5lZC5cIik7XG4gICAgICAgIGRpc3Bvc2UgPSB2YWx1ZVtTeW1ib2wuZGlzcG9zZV07XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZGlzcG9zZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IG5vdCBkaXNwb3NhYmxlLlwiKTtcbiAgICBlbnYuc3RhY2sucHVzaCh7IHZhbHVlOiB2YWx1ZSwgZGlzcG9zZTogZGlzcG9zZSwgYXN5bmM6IGFzeW5jIH0pO1xuICB9XG4gIGVsc2UgaWYgKGFzeW5jKSB7XG4gICAgZW52LnN0YWNrLnB1c2goeyBhc3luYzogdHJ1ZSB9KTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbnZhciBfU3VwcHJlc3NlZEVycm9yID0gdHlwZW9mIFN1cHByZXNzZWRFcnJvciA9PT0gXCJmdW5jdGlvblwiID8gU3VwcHJlc3NlZEVycm9yIDogZnVuY3Rpb24gKGVycm9yLCBzdXBwcmVzc2VkLCBtZXNzYWdlKSB7XG4gIHZhciBlID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZS5uYW1lID0gXCJTdXBwcmVzc2VkRXJyb3JcIiwgZS5lcnJvciA9IGVycm9yLCBlLnN1cHByZXNzZWQgPSBzdXBwcmVzc2VkLCBlO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fZGlzcG9zZVJlc291cmNlcyhlbnYpIHtcbiAgZnVuY3Rpb24gZmFpbChlKSB7XG4gICAgZW52LmVycm9yID0gZW52Lmhhc0Vycm9yID8gbmV3IF9TdXBwcmVzc2VkRXJyb3IoZSwgZW52LmVycm9yLCBcIkFuIGVycm9yIHdhcyBzdXBwcmVzc2VkIGR1cmluZyBkaXNwb3NhbC5cIikgOiBlO1xuICAgIGVudi5oYXNFcnJvciA9IHRydWU7XG4gIH1cbiAgZnVuY3Rpb24gbmV4dCgpIHtcbiAgICB3aGlsZSAoZW52LnN0YWNrLmxlbmd0aCkge1xuICAgICAgdmFyIHJlYyA9IGVudi5zdGFjay5wb3AoKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWMuZGlzcG9zZSAmJiByZWMuZGlzcG9zZS5jYWxsKHJlYy52YWx1ZSk7XG4gICAgICAgIGlmIChyZWMuYXN5bmMpIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzdWx0KS50aGVuKG5leHQsIGZ1bmN0aW9uKGUpIHsgZmFpbChlKTsgcmV0dXJuIG5leHQoKTsgfSk7XG4gICAgICB9XG4gICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgIGZhaWwoZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbnYuaGFzRXJyb3IpIHRocm93IGVudi5lcnJvcjtcbiAgfVxuICByZXR1cm4gbmV4dCgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIF9fZXh0ZW5kcyxcbiAgX19hc3NpZ24sXG4gIF9fcmVzdCxcbiAgX19kZWNvcmF0ZSxcbiAgX19wYXJhbSxcbiAgX19tZXRhZGF0YSxcbiAgX19hd2FpdGVyLFxuICBfX2dlbmVyYXRvcixcbiAgX19jcmVhdGVCaW5kaW5nLFxuICBfX2V4cG9ydFN0YXIsXG4gIF9fdmFsdWVzLFxuICBfX3JlYWQsXG4gIF9fc3ByZWFkLFxuICBfX3NwcmVhZEFycmF5cyxcbiAgX19zcHJlYWRBcnJheSxcbiAgX19hd2FpdCxcbiAgX19hc3luY0dlbmVyYXRvcixcbiAgX19hc3luY0RlbGVnYXRvcixcbiAgX19hc3luY1ZhbHVlcyxcbiAgX19tYWtlVGVtcGxhdGVPYmplY3QsXG4gIF9faW1wb3J0U3RhcixcbiAgX19pbXBvcnREZWZhdWx0LFxuICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0LFxuICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0LFxuICBfX2NsYXNzUHJpdmF0ZUZpZWxkSW4sXG4gIF9fYWRkRGlzcG9zYWJsZVJlc291cmNlLFxuICBfX2Rpc3Bvc2VSZXNvdXJjZXMsXG59O1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNGdW5jdGlvbi5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gY3JlYXRlRXJyb3JDbGFzcyhjcmVhdGVJbXBsKSB7XG4gICAgdmFyIF9zdXBlciA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgICBFcnJvci5jYWxsKGluc3RhbmNlKTtcbiAgICAgICAgaW5zdGFuY2Uuc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICB9O1xuICAgIHZhciBjdG9yRnVuYyA9IGNyZWF0ZUltcGwoX3N1cGVyKTtcbiAgICBjdG9yRnVuYy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG4gICAgY3RvckZ1bmMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvckZ1bmM7XG4gICAgcmV0dXJuIGN0b3JGdW5jO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlRXJyb3JDbGFzcy5qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVFcnJvckNsYXNzIH0gZnJvbSAnLi9jcmVhdGVFcnJvckNsYXNzJztcbmV4cG9ydCB2YXIgVW5zdWJzY3JpcHRpb25FcnJvciA9IGNyZWF0ZUVycm9yQ2xhc3MoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiBVbnN1YnNjcmlwdGlvbkVycm9ySW1wbChlcnJvcnMpIHtcbiAgICAgICAgX3N1cGVyKHRoaXMpO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnJvcnNcbiAgICAgICAgICAgID8gZXJyb3JzLmxlbmd0aCArIFwiIGVycm9ycyBvY2N1cnJlZCBkdXJpbmcgdW5zdWJzY3JpcHRpb246XFxuXCIgKyBlcnJvcnMubWFwKGZ1bmN0aW9uIChlcnIsIGkpIHsgcmV0dXJuIGkgKyAxICsgXCIpIFwiICsgZXJyLnRvU3RyaW5nKCk7IH0pLmpvaW4oJ1xcbiAgJylcbiAgICAgICAgICAgIDogJyc7XG4gICAgICAgIHRoaXMubmFtZSA9ICdVbnN1YnNjcmlwdGlvbkVycm9yJztcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XG4gICAgfTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VW5zdWJzY3JpcHRpb25FcnJvci5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gYXJyUmVtb3ZlKGFyciwgaXRlbSkge1xuICAgIGlmIChhcnIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYXJyLmluZGV4T2YoaXRlbSk7XG4gICAgICAgIDAgPD0gaW5kZXggJiYgYXJyLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJyUmVtb3ZlLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWRBcnJheSwgX192YWx1ZXMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBVbnN1YnNjcmlwdGlvbkVycm9yIH0gZnJvbSAnLi91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xuaW1wb3J0IHsgYXJyUmVtb3ZlIH0gZnJvbSAnLi91dGlsL2FyclJlbW92ZSc7XG52YXIgU3Vic2NyaXB0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oaW5pdGlhbFRlYXJkb3duKSB7XG4gICAgICAgIHRoaXMuaW5pdGlhbFRlYXJkb3duID0gaW5pdGlhbFRlYXJkb3duO1xuICAgICAgICB0aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICB0aGlzLl9maW5hbGl6ZXJzID0gbnVsbDtcbiAgICB9XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVfMSwgX2EsIGVfMiwgX2I7XG4gICAgICAgIHZhciBlcnJvcnM7XG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICAgICAgaWYgKF9wYXJlbnRhZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfcGFyZW50YWdlXzEgPSBfX3ZhbHVlcyhfcGFyZW50YWdlKSwgX3BhcmVudGFnZV8xXzEgPSBfcGFyZW50YWdlXzEubmV4dCgpOyAhX3BhcmVudGFnZV8xXzEuZG9uZTsgX3BhcmVudGFnZV8xXzEgPSBfcGFyZW50YWdlXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudF8xID0gX3BhcmVudGFnZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50XzEucmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3BhcmVudGFnZV8xXzEgJiYgIV9wYXJlbnRhZ2VfMV8xLmRvbmUgJiYgKF9hID0gX3BhcmVudGFnZV8xLnJldHVybikpIF9hLmNhbGwoX3BhcmVudGFnZV8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3BhcmVudGFnZS5yZW1vdmUodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGluaXRpYWxGaW5hbGl6ZXIgPSB0aGlzLmluaXRpYWxUZWFyZG93bjtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGluaXRpYWxGaW5hbGl6ZXIpKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbEZpbmFsaXplcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvciA/IGUuZXJyb3JzIDogW2VdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBfZmluYWxpemVycyA9IHRoaXMuX2ZpbmFsaXplcnM7XG4gICAgICAgICAgICBpZiAoX2ZpbmFsaXplcnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9maW5hbGl6ZXJzID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZmluYWxpemVyc18xID0gX192YWx1ZXMoX2ZpbmFsaXplcnMpLCBfZmluYWxpemVyc18xXzEgPSBfZmluYWxpemVyc18xLm5leHQoKTsgIV9maW5hbGl6ZXJzXzFfMS5kb25lOyBfZmluYWxpemVyc18xXzEgPSBfZmluYWxpemVyc18xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbmFsaXplciA9IF9maW5hbGl6ZXJzXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhlY0ZpbmFsaXplcihmaW5hbGl6ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycyAhPT0gbnVsbCAmJiBlcnJvcnMgIT09IHZvaWQgMCA/IGVycm9ycyA6IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShbXSwgX19yZWFkKGVycm9ycykpLCBfX3JlYWQoZXJyLmVycm9ycykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVfMl8xKSB7IGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07IH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZmluYWxpemVyc18xXzEgJiYgIV9maW5hbGl6ZXJzXzFfMS5kb25lICYmIChfYiA9IF9maW5hbGl6ZXJzXzEucmV0dXJuKSkgX2IuY2FsbChfZmluYWxpemVyc18xKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVycm9ycykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbnN1YnNjcmlwdGlvbkVycm9yKGVycm9ycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHRlYXJkb3duKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHRlYXJkb3duICYmIHRlYXJkb3duICE9PSB0aGlzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBleGVjRmluYWxpemVyKHRlYXJkb3duKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0ZWFyZG93biBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGVhcmRvd24uY2xvc2VkIHx8IHRlYXJkb3duLl9oYXNQYXJlbnQodGhpcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0ZWFyZG93bi5fYWRkUGFyZW50KHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAodGhpcy5fZmluYWxpemVycyA9IChfYSA9IHRoaXMuX2ZpbmFsaXplcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFtdKS5wdXNoKHRlYXJkb3duKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5faGFzUGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgcmV0dXJuIF9wYXJlbnRhZ2UgPT09IHBhcmVudCB8fCAoQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSAmJiBfcGFyZW50YWdlLmluY2x1ZGVzKHBhcmVudCkpO1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5fYWRkUGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSA/IChfcGFyZW50YWdlLnB1c2gocGFyZW50KSwgX3BhcmVudGFnZSkgOiBfcGFyZW50YWdlID8gW19wYXJlbnRhZ2UsIHBhcmVudF0gOiBwYXJlbnQ7XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9yZW1vdmVQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICBpZiAoX3BhcmVudGFnZSA9PT0gcGFyZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkpIHtcbiAgICAgICAgICAgIGFyclJlbW92ZShfcGFyZW50YWdlLCBwYXJlbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICh0ZWFyZG93bikge1xuICAgICAgICB2YXIgX2ZpbmFsaXplcnMgPSB0aGlzLl9maW5hbGl6ZXJzO1xuICAgICAgICBfZmluYWxpemVycyAmJiBhcnJSZW1vdmUoX2ZpbmFsaXplcnMsIHRlYXJkb3duKTtcbiAgICAgICAgaWYgKHRlYXJkb3duIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0ZWFyZG93bi5fcmVtb3ZlUGFyZW50KHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24uRU1QVFkgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZW1wdHkgPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIGVtcHR5LmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBlbXB0eTtcbiAgICB9KSgpO1xuICAgIHJldHVybiBTdWJzY3JpcHRpb247XG59KCkpO1xuZXhwb3J0IHsgU3Vic2NyaXB0aW9uIH07XG5leHBvcnQgdmFyIEVNUFRZX1NVQlNDUklQVElPTiA9IFN1YnNjcmlwdGlvbi5FTVBUWTtcbmV4cG9ydCBmdW5jdGlvbiBpc1N1YnNjcmlwdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24gfHxcbiAgICAgICAgKHZhbHVlICYmICdjbG9zZWQnIGluIHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUucmVtb3ZlKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmFkZCkgJiYgaXNGdW5jdGlvbih2YWx1ZS51bnN1YnNjcmliZSkpKTtcbn1cbmZ1bmN0aW9uIGV4ZWNGaW5hbGl6ZXIoZmluYWxpemVyKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oZmluYWxpemVyKSkge1xuICAgICAgICBmaW5hbGl6ZXIoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGZpbmFsaXplci51bnN1YnNjcmliZSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmlwdGlvbi5qcy5tYXAiLCJleHBvcnQgdmFyIGNvbmZpZyA9IHtcbiAgICBvblVuaGFuZGxlZEVycm9yOiBudWxsLFxuICAgIG9uU3RvcHBlZE5vdGlmaWNhdGlvbjogbnVsbCxcbiAgICBQcm9taXNlOiB1bmRlZmluZWQsXG4gICAgdXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZzogZmFsc2UsXG4gICAgdXNlRGVwcmVjYXRlZE5leHRDb250ZXh0OiBmYWxzZSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWcuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5leHBvcnQgdmFyIHRpbWVvdXRQcm92aWRlciA9IHtcbiAgICBzZXRUaW1lb3V0OiBmdW5jdGlvbiAoaGFuZGxlciwgdGltZW91dCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsZWdhdGUgPSB0aW1lb3V0UHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuc2V0VGltZW91dCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlLnNldFRpbWVvdXQuYXBwbHkoZGVsZWdhdGUsIF9fc3ByZWFkQXJyYXkoW2hhbmRsZXIsIHRpbWVvdXRdLCBfX3JlYWQoYXJncykpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2V0VGltZW91dC5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW2hhbmRsZXIsIHRpbWVvdXRdLCBfX3JlYWQoYXJncykpKTtcbiAgICB9LFxuICAgIGNsZWFyVGltZW91dDogZnVuY3Rpb24gKGhhbmRsZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSB0aW1lb3V0UHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIHJldHVybiAoKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5jbGVhclRpbWVvdXQpIHx8IGNsZWFyVGltZW91dCkoaGFuZGxlKTtcbiAgICB9LFxuICAgIGRlbGVnYXRlOiB1bmRlZmluZWQsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZW91dFByb3ZpZGVyLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBub29wKCkgeyB9XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub29wLmpzLm1hcCIsImV4cG9ydCB2YXIgQ09NUExFVEVfTk9USUZJQ0FUSU9OID0gKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignQycsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTsgfSkoKTtcbmV4cG9ydCBmdW5jdGlvbiBlcnJvck5vdGlmaWNhdGlvbihlcnJvcikge1xuICAgIHJldHVybiBjcmVhdGVOb3RpZmljYXRpb24oJ0UnLCB1bmRlZmluZWQsIGVycm9yKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBuZXh0Tm90aWZpY2F0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignTicsIHZhbHVlLCB1bmRlZmluZWQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU5vdGlmaWNhdGlvbihraW5kLCB2YWx1ZSwgZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBraW5kOiBraW5kLFxuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Tm90aWZpY2F0aW9uRmFjdG9yaWVzLmpzLm1hcCIsImltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZyc7XG52YXIgY29udGV4dCA9IG51bGw7XG5leHBvcnQgZnVuY3Rpb24gZXJyb3JDb250ZXh0KGNiKSB7XG4gICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgIHZhciBpc1Jvb3QgPSAhY29udGV4dDtcbiAgICAgICAgaWYgKGlzUm9vdCkge1xuICAgICAgICAgICAgY29udGV4dCA9IHsgZXJyb3JUaHJvd246IGZhbHNlLCBlcnJvcjogbnVsbCB9O1xuICAgICAgICB9XG4gICAgICAgIGNiKCk7XG4gICAgICAgIGlmIChpc1Jvb3QpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IGNvbnRleHQsIGVycm9yVGhyb3duID0gX2EuZXJyb3JUaHJvd24sIGVycm9yID0gX2EuZXJyb3I7XG4gICAgICAgICAgICBjb250ZXh0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChlcnJvclRocm93bikge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjYigpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBjYXB0dXJlRXJyb3IoZXJyKSB7XG4gICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nICYmIGNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5lcnJvclRocm93biA9IHRydWU7XG4gICAgICAgIGNvbnRleHQuZXJyb3IgPSBlcnI7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JDb250ZXh0LmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IGlzU3Vic2NyaXB0aW9uLCBTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyByZXBvcnRVbmhhbmRsZWRFcnJvciB9IGZyb20gJy4vdXRpbC9yZXBvcnRVbmhhbmRsZWRFcnJvcic7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi91dGlsL25vb3AnO1xuaW1wb3J0IHsgbmV4dE5vdGlmaWNhdGlvbiwgZXJyb3JOb3RpZmljYXRpb24sIENPTVBMRVRFX05PVElGSUNBVElPTiB9IGZyb20gJy4vTm90aWZpY2F0aW9uRmFjdG9yaWVzJztcbmltcG9ydCB7IHRpbWVvdXRQcm92aWRlciB9IGZyb20gJy4vc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlcic7XG5pbXBvcnQgeyBjYXB0dXJlRXJyb3IgfSBmcm9tICcuL3V0aWwvZXJyb3JDb250ZXh0JztcbnZhciBTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICBpZiAoZGVzdGluYXRpb24pIHtcbiAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgICAgICBpZiAoaXNTdWJzY3JpcHRpb24oZGVzdGluYXRpb24pKSB7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24uYWRkKF90aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gRU1QVFlfT0JTRVJWRVI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdWJzY3JpYmVyLmNyZWF0ZSA9IGZ1bmN0aW9uIChuZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTYWZlU3Vic2NyaWJlcihuZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24obmV4dE5vdGlmaWNhdGlvbih2YWx1ZSksIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fbmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24oZXJyb3JOb3RpZmljYXRpb24oZXJyKSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKENPTVBMRVRFX05PVElGSUNBVElPTiwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFN1YnNjcmliZXI7XG59KFN1YnNjcmlwdGlvbikpO1xuZXhwb3J0IHsgU3Vic2NyaWJlciB9O1xudmFyIF9iaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQ7XG5mdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIF9iaW5kLmNhbGwoZm4sIHRoaXNBcmcpO1xufVxudmFyIENvbnN1bWVyT2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbnN1bWVyT2JzZXJ2ZXIocGFydGlhbE9ic2VydmVyKSB7XG4gICAgICAgIHRoaXMucGFydGlhbE9ic2VydmVyID0gcGFydGlhbE9ic2VydmVyO1xuICAgIH1cbiAgICBDb25zdW1lck9ic2VydmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXIgPSB0aGlzLnBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKHBhcnRpYWxPYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29uc3VtZXJPYnNlcnZlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXIgPSB0aGlzLnBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKHBhcnRpYWxPYnNlcnZlci5lcnJvcikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbnN1bWVyT2JzZXJ2ZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcGFydGlhbE9ic2VydmVyID0gdGhpcy5wYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgICAgIGlmIChwYXJ0aWFsT2JzZXJ2ZXIuY29tcGxldGUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBDb25zdW1lck9ic2VydmVyO1xufSgpKTtcbnZhciBTYWZlU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFNhZmVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNhZmVTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgdmFyIHBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ob2JzZXJ2ZXJPck5leHQpIHx8ICFvYnNlcnZlck9yTmV4dCkge1xuICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyID0ge1xuICAgICAgICAgICAgICAgIG5leHQ6IChvYnNlcnZlck9yTmV4dCAhPT0gbnVsbCAmJiBvYnNlcnZlck9yTmV4dCAhPT0gdm9pZCAwID8gb2JzZXJ2ZXJPck5leHQgOiB1bmRlZmluZWQpLFxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvciAhPT0gbnVsbCAmJiBlcnJvciAhPT0gdm9pZCAwID8gZXJyb3IgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IGNvbXBsZXRlICE9PSBudWxsICYmIGNvbXBsZXRlICE9PSB2b2lkIDAgPyBjb21wbGV0ZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgY29udGV4dF8xO1xuICAgICAgICAgICAgaWYgKF90aGlzICYmIGNvbmZpZy51c2VEZXByZWNhdGVkTmV4dENvbnRleHQpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzEgPSBPYmplY3QuY3JlYXRlKG9ic2VydmVyT3JOZXh0KTtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzEudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy51bnN1YnNjcmliZSgpOyB9O1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dDogb2JzZXJ2ZXJPck5leHQubmV4dCAmJiBiaW5kKG9ic2VydmVyT3JOZXh0Lm5leHQsIGNvbnRleHRfMSksXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBvYnNlcnZlck9yTmV4dC5lcnJvciAmJiBiaW5kKG9ic2VydmVyT3JOZXh0LmVycm9yLCBjb250ZXh0XzEpLFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogb2JzZXJ2ZXJPck5leHQuY29tcGxldGUgJiYgYmluZChvYnNlcnZlck9yTmV4dC5jb21wbGV0ZSwgY29udGV4dF8xKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyID0gb2JzZXJ2ZXJPck5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBuZXcgQ29uc3VtZXJPYnNlcnZlcihwYXJ0aWFsT2JzZXJ2ZXIpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBTYWZlU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgU2FmZVN1YnNjcmliZXIgfTtcbmZ1bmN0aW9uIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKSB7XG4gICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgIGNhcHR1cmVFcnJvcihlcnJvcik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXBvcnRVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgfVxufVxuZnVuY3Rpb24gZGVmYXVsdEVycm9ySGFuZGxlcihlcnIpIHtcbiAgICB0aHJvdyBlcnI7XG59XG5mdW5jdGlvbiBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbiwgc3Vic2NyaWJlcikge1xuICAgIHZhciBvblN0b3BwZWROb3RpZmljYXRpb24gPSBjb25maWcub25TdG9wcGVkTm90aWZpY2F0aW9uO1xuICAgIG9uU3RvcHBlZE5vdGlmaWNhdGlvbiAmJiB0aW1lb3V0UHJvdmlkZXIuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBvblN0b3BwZWROb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCBzdWJzY3JpYmVyKTsgfSk7XG59XG5leHBvcnQgdmFyIEVNUFRZX09CU0VSVkVSID0ge1xuICAgIGNsb3NlZDogdHJ1ZSxcbiAgICBuZXh0OiBub29wLFxuICAgIGVycm9yOiBkZWZhdWx0RXJyb3JIYW5kbGVyLFxuICAgIGNvbXBsZXRlOiBub29wLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmliZXIuanMubWFwIiwiaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB7IHRpbWVvdXRQcm92aWRlciB9IGZyb20gJy4uL3NjaGVkdWxlci90aW1lb3V0UHJvdmlkZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHJlcG9ydFVuaGFuZGxlZEVycm9yKGVycikge1xuICAgIHRpbWVvdXRQcm92aWRlci5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9uVW5oYW5kbGVkRXJyb3IgPSBjb25maWcub25VbmhhbmRsZWRFcnJvcjtcbiAgICAgICAgaWYgKG9uVW5oYW5kbGVkRXJyb3IpIHtcbiAgICAgICAgICAgIG9uVW5oYW5kbGVkRXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVwb3J0VW5oYW5kbGVkRXJyb3IuanMubWFwIiwiZXhwb3J0IHZhciBvYnNlcnZhYmxlID0gKGZ1bmN0aW9uICgpIHsgcmV0dXJuICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5vYnNlcnZhYmxlKSB8fCAnQEBvYnNlcnZhYmxlJzsgfSkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmFibGUuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KHgpIHtcbiAgICByZXR1cm4geDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlkZW50aXR5LmpzLm1hcCIsImltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi9pZGVudGl0eSc7XG5leHBvcnQgZnVuY3Rpb24gcGlwZSgpIHtcbiAgICB2YXIgZm5zID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgZm5zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBwaXBlRnJvbUFycmF5KGZucyk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGlwZUZyb21BcnJheShmbnMpIHtcbiAgICBpZiAoZm5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gaWRlbnRpdHk7XG4gICAgfVxuICAgIGlmIChmbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBmbnNbMF07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBwaXBlZChpbnB1dCkge1xuICAgICAgICByZXR1cm4gZm5zLnJlZHVjZShmdW5jdGlvbiAocHJldiwgZm4pIHsgcmV0dXJuIGZuKHByZXYpOyB9LCBpbnB1dCk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBpcGUuanMubWFwIiwiaW1wb3J0IHsgU2FmZVN1YnNjcmliZXIsIFN1YnNjcmliZXIgfSBmcm9tICcuL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgaXNTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBwaXBlRnJvbUFycmF5IH0gZnJvbSAnLi91dGlsL3BpcGUnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IGVycm9yQ29udGV4dCB9IGZyb20gJy4vdXRpbC9lcnJvckNvbnRleHQnO1xudmFyIE9ic2VydmFibGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9ic2VydmFibGUoc3Vic2NyaWJlKSB7XG4gICAgICAgIGlmIChzdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5saWZ0ID0gZnVuY3Rpb24gKG9wZXJhdG9yKSB7XG4gICAgICAgIHZhciBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGUoKTtcbiAgICAgICAgb2JzZXJ2YWJsZS5zb3VyY2UgPSB0aGlzO1xuICAgICAgICBvYnNlcnZhYmxlLm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHN1YnNjcmliZXIgPSBpc1N1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQpID8gb2JzZXJ2ZXJPck5leHQgOiBuZXcgU2FmZVN1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgICAgIGVycm9yQ29udGV4dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcywgb3BlcmF0b3IgPSBfYS5vcGVyYXRvciwgc291cmNlID0gX2Euc291cmNlO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQob3BlcmF0b3JcbiAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yLmNhbGwoc3Vic2NyaWJlciwgc291cmNlKVxuICAgICAgICAgICAgICAgIDogc291cmNlXG4gICAgICAgICAgICAgICAgICAgID9cbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9zdWJzY3JpYmUoc3Vic2NyaWJlcilcbiAgICAgICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3RyeVN1YnNjcmliZShzdWJzY3JpYmVyKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc3Vic2NyaWJlcjtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl90cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiAoc2luaykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N1YnNjcmliZShzaW5rKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzaW5rLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAobmV4dCwgcHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcHJvbWlzZUN0b3IgPSBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcik7XG4gICAgICAgIHJldHVybiBuZXcgcHJvbWlzZUN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHN1YnNjcmliZXIgPSBuZXcgU2FmZVN1YnNjcmliZXIoe1xuICAgICAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiByZWplY3QsXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IHJlc29sdmUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5zb3VyY2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZVtTeW1ib2xfb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9wZXJhdGlvbnMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbnNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGlwZUZyb21BcnJheShvcGVyYXRpb25zKSh0aGlzKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnRvUHJvbWlzZSA9IGZ1bmN0aW9uIChwcm9taXNlQ3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBwcm9taXNlQ3RvciA9IGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKTtcbiAgICAgICAgcmV0dXJuIG5ldyBwcm9taXNlQ3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHgpIHsgcmV0dXJuICh2YWx1ZSA9IHgpOyB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiByZWplY3QoZXJyKTsgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZSh2YWx1ZSk7IH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKHN1YnNjcmliZSkge1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoc3Vic2NyaWJlKTtcbiAgICB9O1xuICAgIHJldHVybiBPYnNlcnZhYmxlO1xufSgpKTtcbmV4cG9ydCB7IE9ic2VydmFibGUgfTtcbmZ1bmN0aW9uIGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoX2EgPSBwcm9taXNlQ3RvciAhPT0gbnVsbCAmJiBwcm9taXNlQ3RvciAhPT0gdm9pZCAwID8gcHJvbWlzZUN0b3IgOiBjb25maWcuUHJvbWlzZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogUHJvbWlzZTtcbn1cbmZ1bmN0aW9uIGlzT2JzZXJ2ZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS5uZXh0KSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmVycm9yKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmNvbXBsZXRlKTtcbn1cbmZ1bmN0aW9uIGlzU3Vic2NyaWJlcih2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgJiYgdmFsdWUgaW5zdGFuY2VvZiBTdWJzY3JpYmVyKSB8fCAoaXNPYnNlcnZlcih2YWx1ZSkgJiYgaXNTdWJzY3JpcHRpb24odmFsdWUpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9ic2VydmFibGUuanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlRXJyb3JDbGFzcyB9IGZyb20gJy4vY3JlYXRlRXJyb3JDbGFzcyc7XG5leHBvcnQgdmFyIE9iamVjdFVuc3Vic2NyaWJlZEVycm9yID0gY3JlYXRlRXJyb3JDbGFzcyhmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIE9iamVjdFVuc3Vic2NyaWJlZEVycm9ySW1wbCgpIHtcbiAgICAgICAgX3N1cGVyKHRoaXMpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3InO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnb2JqZWN0IHVuc3Vic2NyaWJlZCc7XG4gICAgfTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IuanMubWFwIiwiLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3dcbmV4cG9ydCBlbnVtIGh0dHBNZXRob2Qge1xuICBnZXQgPSAnR0VUJyxcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGF0YVNlcnZpY2Uge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgcHJpdmF0ZSBzdGF0aWMgX2RhdGFTZXJ2aWNlOiBEYXRhU2VydmljZTtcblxuICBwdWJsaWMgZ2V0IGJhc2VVcmwoKSB7XG4gICAgY29uc3QgeyBwcm90b2NvbCwgaG9zdCwgcGF0aG5hbWUgfSA9IHdpbmRvdy5sb2NhdGlvbjtcblxuICAgIGxldCB0ZW5hbnRJZCA9ICcvJztcbiAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1lc2NhcGUgKi9cbiAgICBjb25zdCBtYXRjaCA9IHBhdGhuYW1lLm1hdGNoKC9eXFwvW15cXC9dK1xcLy8pO1xuICAgIGlmIChtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAwKSB7XG4gICAgICB0ZW5hbnRJZCA9IG1hdGNoLmF0KDApO1xuICAgIH1cblxuICAgIHJldHVybiBgJHtwcm90b2NvbH0vLyR7aG9zdH0ke3RlbmFudElkfW1vZGVsZXIvYXBpYDtcbiAgfVxuXG4gIHB1YmxpYyBodHRwR2V0ID0gYXN5bmMgKHVybDogc3RyaW5nKTogUHJvbWlzZTxSZXNwb25zZT4gPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgICBgJHt0aGlzLmJhc2VVcmx9JHt1cmwuc3RhcnRzV2l0aCgnLycpID8gdXJsIDogYC8ke3VybH1gfWAsXG4gICAgICAgIHtcbiAgICAgICAgICBtZXRob2Q6IGh0dHBNZXRob2QuZ2V0LFxuICAgICAgICB9XG4gICAgICApO1xuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzLnRvU3RyaW5nKCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAvLyBUT0RPOiBBZGQgZ2VuZXJhbCBlcnJvciBoYW5kbGluZyBmb3IgR0VUIG1ldGhvZFxuICAgICAgY29uc29sZS5lcnJvcignSFRUUCBHRVQgZXJyb3I6ICcsIGV4KTtcbiAgICAgIHRocm93IGV4O1xuICAgIH1cbiAgfTtcblxuICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlID0gKCk6IERhdGFTZXJ2aWNlID0+IHtcbiAgICBpZiAoIXRoaXMuX2RhdGFTZXJ2aWNlKSB7XG4gICAgICB0aGlzLl9kYXRhU2VydmljZSA9IG5ldyBEYXRhU2VydmljZSgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9kYXRhU2VydmljZTtcbiAgfTtcblxuICBwdWJsaWMgc3RhdGljIHJlc2V0SW5zdGFuY2UgPSAoKTogRGF0YVNlcnZpY2UgPT4ge1xuICAgIHRoaXMuX2RhdGFTZXJ2aWNlID0gbmV3IERhdGFTZXJ2aWNlKCk7XG5cbiAgICByZXR1cm4gdGhpcy5fZGF0YVNlcnZpY2U7XG4gIH07XG59XG4iLCJpbXBvcnQgeyBfX2V4dGVuZHMsIF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiwgRU1QVFlfU1VCU0NSSVBUSU9OIH0gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgfSBmcm9tICcuL3V0aWwvT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3InO1xuaW1wb3J0IHsgYXJyUmVtb3ZlIH0gZnJvbSAnLi91dGlsL2FyclJlbW92ZSc7XG5pbXBvcnQgeyBlcnJvckNvbnRleHQgfSBmcm9tICcuL3V0aWwvZXJyb3JDb250ZXh0JztcbnZhciBTdWJqZWN0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3ViamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJqZWN0KCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuY3VycmVudE9ic2VydmVycyA9IG51bGw7XG4gICAgICAgIF90aGlzLm9ic2VydmVycyA9IFtdO1xuICAgICAgICBfdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaGFzRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMudGhyb3duRXJyb3IgPSBudWxsO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN1YmplY3QucHJvdG90eXBlLmxpZnQgPSBmdW5jdGlvbiAob3BlcmF0b3IpIHtcbiAgICAgICAgdmFyIHN1YmplY3QgPSBuZXcgQW5vbnltb3VzU3ViamVjdCh0aGlzLCB0aGlzKTtcbiAgICAgICAgc3ViamVjdC5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICByZXR1cm4gc3ViamVjdDtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLl90aHJvd0lmQ2xvc2VkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPYmplY3RVbnN1YnNjcmliZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGVycm9yQ29udGV4dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgICAgIF90aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuY3VycmVudE9ic2VydmVycykge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jdXJyZW50T2JzZXJ2ZXJzID0gQXJyYXkuZnJvbShfdGhpcy5vYnNlcnZlcnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKF90aGlzLmN1cnJlbnRPYnNlcnZlcnMpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBfYy52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgZXJyb3JDb250ZXh0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmhhc0Vycm9yID0gX3RoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfdGhpcy50aHJvd25FcnJvciA9IGVycjtcbiAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gX3RoaXMub2JzZXJ2ZXJzO1xuICAgICAgICAgICAgICAgIHdoaWxlIChvYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVycy5zaGlmdCgpLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBlcnJvckNvbnRleHQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgICAgIGlmICghX3RoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gX3RoaXMub2JzZXJ2ZXJzO1xuICAgICAgICAgICAgICAgIHdoaWxlIChvYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVycy5zaGlmdCgpLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSB0aGlzLmN1cnJlbnRPYnNlcnZlcnMgPSBudWxsO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN1YmplY3QucHJvdG90eXBlLCBcIm9ic2VydmVkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICByZXR1cm4gKChfYSA9IHRoaXMub2JzZXJ2ZXJzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGVuZ3RoKSA+IDA7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlLmNhbGwodGhpcywgc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICB0aGlzLl9jaGVja0ZpbmFsaXplZFN0YXR1c2VzKHN1YnNjcmliZXIpO1xuICAgICAgICByZXR1cm4gdGhpcy5faW5uZXJTdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5faW5uZXJTdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBoYXNFcnJvciA9IF9hLmhhc0Vycm9yLCBpc1N0b3BwZWQgPSBfYS5pc1N0b3BwZWQsIG9ic2VydmVycyA9IF9hLm9ic2VydmVycztcbiAgICAgICAgaWYgKGhhc0Vycm9yIHx8IGlzU3RvcHBlZCkge1xuICAgICAgICAgICAgcmV0dXJuIEVNUFRZX1NVQlNDUklQVElPTjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmN1cnJlbnRPYnNlcnZlcnMgPSBudWxsO1xuICAgICAgICBvYnNlcnZlcnMucHVzaChzdWJzY3JpYmVyKTtcbiAgICAgICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb24oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuY3VycmVudE9ic2VydmVycyA9IG51bGw7XG4gICAgICAgICAgICBhcnJSZW1vdmUob2JzZXJ2ZXJzLCBzdWJzY3JpYmVyKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fY2hlY2tGaW5hbGl6ZWRTdGF0dXNlcyA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGhhc0Vycm9yID0gX2EuaGFzRXJyb3IsIHRocm93bkVycm9yID0gX2EudGhyb3duRXJyb3IsIGlzU3RvcHBlZCA9IF9hLmlzU3RvcHBlZDtcbiAgICAgICAgaWYgKGhhc0Vycm9yKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKHRocm93bkVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuYXNPYnNlcnZhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgICAgIG9ic2VydmFibGUuc291cmNlID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XG4gICAgfTtcbiAgICBTdWJqZWN0LmNyZWF0ZSA9IGZ1bmN0aW9uIChkZXN0aW5hdGlvbiwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBuZXcgQW5vbnltb3VzU3ViamVjdChkZXN0aW5hdGlvbiwgc291cmNlKTtcbiAgICB9O1xuICAgIHJldHVybiBTdWJqZWN0O1xufShPYnNlcnZhYmxlKSk7XG5leHBvcnQgeyBTdWJqZWN0IH07XG52YXIgQW5vbnltb3VzU3ViamVjdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFub255bW91c1N1YmplY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQW5vbnltb3VzU3ViamVjdChkZXN0aW5hdGlvbiwgc291cmNlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgIF90aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuZGVzdGluYXRpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uZXh0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgdmFsdWUpO1xuICAgIH07XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuZGVzdGluYXRpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5lcnJvcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIGVycik7XG4gICAgfTtcbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy5kZXN0aW5hdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNvbXBsZXRlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSk7XG4gICAgfTtcbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgcmV0dXJuIChfYiA9IChfYSA9IHRoaXMuc291cmNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3Vic2NyaWJlKHN1YnNjcmliZXIpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBFTVBUWV9TVUJTQ1JJUFRJT047XG4gICAgfTtcbiAgICByZXR1cm4gQW5vbnltb3VzU3ViamVjdDtcbn0oU3ViamVjdCkpO1xuZXhwb3J0IHsgQW5vbnltb3VzU3ViamVjdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3ViamVjdC5qcy5tYXAiLCJpbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvcGVydHlDaGFuZ2VEYXRhIHtcbiAgcHJvcGVydHlOYW1lOiBzdHJpbmcgfCBudW1iZXI7XG4gIHByb3BlcnR5VmFsdWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29udGV4dFNlcnZpY2Uge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgcHJpdmF0ZSBzdGF0aWMgX2NvbnRleHRTZXJ2aWNlOiBDb250ZXh0U2VydmljZTtcblxuICBwdWJsaWMgcHJvcGVydHlDaGFuZ2VTdWJqZWN0OiBTdWJqZWN0PFByb3BlcnR5Q2hhbmdlRGF0YT4gPVxuICAgIG5ldyBTdWJqZWN0PFByb3BlcnR5Q2hhbmdlRGF0YT4oKTtcblxuICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCk6IENvbnRleHRTZXJ2aWNlIHtcbiAgICBpZiAoIXRoaXMuX2NvbnRleHRTZXJ2aWNlKSB7XG4gICAgICB0aGlzLl9jb250ZXh0U2VydmljZSA9IG5ldyBDb250ZXh0U2VydmljZSgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9jb250ZXh0U2VydmljZTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgcmVzZXRJbnN0YW5jZSgpOiBDb250ZXh0U2VydmljZSB7XG4gICAgdGhpcy5fY29udGV4dFNlcnZpY2UgPSBuZXcgQ29udGV4dFNlcnZpY2UoKTtcblxuICAgIHJldHVybiB0aGlzLl9jb250ZXh0U2VydmljZTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgVGFibGVSb3dFdmVudERldGFpbCB9IGZyb20gJy4uL21vZGVscy90YWJsZVJvd0V2ZW50RGV0YWlsJztcblxuZXhwb3J0IHR5cGUgQ3VzdG9tRXh0ZXJuYWxFdmVudFR5cGUgPVxuICB8ICdwaS1pbml0aWFsaXplZCdcbiAgfCAncGktb3Blbi1wcm9jZXNzJ1xuICB8ICdwaS1jb21wbGV0ZWQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFdmVudFNlcnZpY2Uge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgcHJpdmF0ZSBzdGF0aWMgX2V2ZW50U2VydmljZTogRXZlbnRTZXJ2aWNlO1xuXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5pbml0aWFsaXplZFN1YmplY3QgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuICAgIHRoaXMuY29tcGxldGVkU3ViamVjdCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG4gICAgdGhpcy5vcGVuUHJvY2Vzc1N1YnNjcmlwdGlvbiA9IG5ldyBTdWJqZWN0PFRhYmxlUm93RXZlbnREZXRhaWw+KCk7XG4gIH1cblxuICBwdWJsaWMgaW5pdGlhbGl6ZWRTdWJqZWN0OiBTdWJqZWN0PHZvaWQ+O1xuXG4gIHB1YmxpYyBjb21wbGV0ZWRTdWJqZWN0OiBTdWJqZWN0PHZvaWQ+O1xuXG4gIHB1YmxpYyBvcGVuUHJvY2Vzc1N1YnNjcmlwdGlvbjogU3ViamVjdDxUYWJsZVJvd0V2ZW50RGV0YWlsPjtcblxuICBwdWJsaWMgdHJpZ2dlckluaXRpYWxpemVkID0gKCkgPT4ge1xuICAgIHRoaXMuaW5pdGlhbGl6ZWRTdWJqZWN0Lm5leHQoKTtcbiAgfTtcblxuICBwdWJsaWMgdHJpZ2dlck9wZW5Qcm9jZXNzID0gKGRhdGE6IEN1c3RvbUV2ZW50KSA9PiB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXNzaWdubWVudCwgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgY29uc3QgdGFibGVSb3cgPSB7ZGF0YTogZGF0YS5kZXRhaWwuaXRlbS5yZWNvcmR9XG4gICAgdGhpcy5vcGVuUHJvY2Vzc1N1YnNjcmlwdGlvbi5uZXh0KHRhYmxlUm93IGFzIFRhYmxlUm93RXZlbnREZXRhaWwpO1xuICB9O1xuXG4gIHB1YmxpYyB0cmlnZ2VyQ29tcGxldGVkID0gKCkgPT4ge1xuICAgIHRoaXMuY29tcGxldGVkU3ViamVjdC5uZXh0KCk7XG4gIH07XG5cbiAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBFdmVudFNlcnZpY2Uge1xuICAgIGlmICghdGhpcy5fZXZlbnRTZXJ2aWNlKSB7XG4gICAgICB0aGlzLl9ldmVudFNlcnZpY2UgPSBuZXcgRXZlbnRTZXJ2aWNlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2V2ZW50U2VydmljZTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgcmVzZXRJbnN0YW5jZSgpOiBFdmVudFNlcnZpY2Uge1xuICAgIHRoaXMuX2V2ZW50U2VydmljZSA9IG5ldyBFdmVudFNlcnZpY2UoKTtcblxuICAgIHJldHVybiB0aGlzLl9ldmVudFNlcnZpY2U7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGZpcmVFeHRlcm5hbCA9IDxUPihcbiAgICBlbGVtZW50OiBIVE1MRWxlbWVudCxcbiAgICBldmVudFR5cGU6IEN1c3RvbUV4dGVybmFsRXZlbnRUeXBlLFxuICAgIGRhdGE6IHtcbiAgICAgIGJ1YmJsZXM/OiBib29sZWFuO1xuICAgICAgY2FuY2VsYWJsZT86IGJvb2xlYW47XG4gICAgICBjb21wb3NlZD86IGJvb2xlYW47XG4gICAgICBkZXRhaWw/OiBUO1xuICAgIH1cbiAgKTogQ3VzdG9tRXZlbnQ8VD4gPT4ge1xuICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgY2FuY2VsYWJsZTogZmFsc2UsXG4gICAgICBjb21wb3NlZDogdHJ1ZSxcbiAgICAgIC4uLmRhdGEsXG4gICAgfTtcblxuICAgIGNvbnN0IGV2ZW50OiBDdXN0b21FdmVudDxUPiA9IG5ldyBDdXN0b21FdmVudDxUPihldmVudFR5cGUsIGFyZ3MpO1xuICAgIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgcmV0dXJuIGV2ZW50O1xuICB9O1xufVxuIiwiaW1wb3J0IHsgTGlzdFByb2Nlc3NTZWFyY2hQYXJhbXMgfSBmcm9tICcuLi9tb2RlbHMvbGlzdC1wcm9jZXNzLXNlYXJjaC1wYXJhbXMnO1xuaW1wb3J0IHsgUHJvY2Vzc1Jlc3BvbnNlRHRvIH0gZnJvbSAnLi4vbW9kZWxzL3Byb2Nlc3MtcmVzcG9uc2UtZHRvJztcbmltcG9ydCBEYXRhU2VydmljZSBmcm9tICcuL2RhdGEuc2VydmljZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb2Nlc3Nlc0FwaVNlcnZpY2Uge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgcHJpdmF0ZSBzdGF0aWMgX3Byb2Nlc3Nlc0FwaVNlcnZpY2U6IFByb2Nlc3Nlc0FwaVNlcnZpY2U7XG5cbiAgcHJpdmF0ZSBfZGF0YVNlcnZpY2U6IERhdGFTZXJ2aWNlO1xuXG4gIHByaXZhdGUgX2Jhc2VVcmwgPSAnL3YxL3Byb2Nlc3Nlcyc7XG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9kYXRhU2VydmljZSA9IERhdGFTZXJ2aWNlLmdldEluc3RhbmNlKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0UHJvY2Vzc0xpc3QgPSBhc3luYyAoXG4gICAgbGlzdFByb2Nlc3NTZWFyY2hQYXJhbXM/OiBMaXN0UHJvY2Vzc1NlYXJjaFBhcmFtc1xuICApOiBQcm9taXNlPFByb2Nlc3NSZXNwb25zZUR0bz4gPT4ge1xuICAgIGNvbnN0IHVybFNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoXG4gICAgICBsaXN0UHJvY2Vzc1NlYXJjaFBhcmFtcyBhcyBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+XG4gICAgKTtcbiAgICBjb25zdCB1cmxTZWFyY2hQYXJhbXNTdHJpbmcgPSB1cmxTZWFyY2hQYXJhbXMudG9TdHJpbmcoKTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLl9kYXRhU2VydmljZS5odHRwR2V0KFxuICAgICAgICBgJHt0aGlzLl9iYXNlVXJsfSR7XG4gICAgICAgICAgdXJsU2VhcmNoUGFyYW1zU3RyaW5nID09PSAnJyA/ICcnIDogYD8ke3VybFNlYXJjaFBhcmFtc1N0cmluZ31gXG4gICAgICAgIH1gXG4gICAgICApO1xuICAgICAgY29uc3QgcmVzcG9uc2VKc29uID0gKGF3YWl0IHJlc3BvbnNlLmpzb24oKSkgYXMgUHJvY2Vzc1Jlc3BvbnNlRHRvO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgLy8gVE9ETzogQWRkIGdlbmVyYWwgZXJyb3IgaGFuZGxpbmcgZm9yIGVuZHBvaW50XG4gICAgICBjb25zb2xlLmVycm9yKCdHZXQgUHJvY2VzcyBsaXN0IGVycm9yOiAnLCBleCk7XG4gICAgICB0aHJvdyBleDtcbiAgICB9XG4gIH07XG5cbiAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSA9ICgpOiBQcm9jZXNzZXNBcGlTZXJ2aWNlID0+IHtcbiAgICBpZiAoIXRoaXMuX3Byb2Nlc3Nlc0FwaVNlcnZpY2UpIHtcbiAgICAgIHRoaXMuX3Byb2Nlc3Nlc0FwaVNlcnZpY2UgPSBuZXcgUHJvY2Vzc2VzQXBpU2VydmljZSgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9wcm9jZXNzZXNBcGlTZXJ2aWNlO1xuICB9O1xuXG4gIHB1YmxpYyBzdGF0aWMgcmVzZXRJbnN0YW5jZSA9ICgpOiBQcm9jZXNzZXNBcGlTZXJ2aWNlID0+IHtcbiAgICB0aGlzLl9wcm9jZXNzZXNBcGlTZXJ2aWNlID0gbmV3IFByb2Nlc3Nlc0FwaVNlcnZpY2UoKTtcblxuICAgIHJldHVybiB0aGlzLl9wcm9jZXNzZXNBcGlTZXJ2aWNlO1xuICB9O1xufVxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZWFydGhsaW5nLWJhc2UubWluLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9lYXJ0aGxpbmctYmFzZS5taW4uY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGl0JztcblxuLy8gQ29tbW9uIHN0eWxlcyBjYW4gYmUgYWRkZWQgaGVyZVxuZXhwb3J0IGNvbnN0IGNvbW1vblN0eWxlcyA9IGNzc2BcbiAgOmhvc3Qge1xuICAgIGFsbDogaW5pdGlhbDtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IGNvbW1vbkVtID0ge1xuICBweDM6IGNzc2AwLjE4NzVlbWAsXG4gIHB4ODogY3NzYDAuNWVtYCxcbiAgcHgxMDogY3NzYDAuNjI1ZW1gLFxuICBweDExOiBjc3NgMC42ODc1ZW1gLFxuICBweDEyOiBjc3NgMC43NWVtYCxcbiAgcHgxNTogY3NzYDAuOTM3NWVtYCxcbiAgcHgyNDogY3NzYDEuNWVtYCxcbiAgcHgyNjogY3NzYDEuNjI1ZW1gLFxuICBweDI5OiBjc3NgMS44MTI1ZW1gLFxuICBweDYwOiBjc3NgMy43NWVtYCxcbiAgcHg0MTA6IGNzc2AyNS42MjVlbWAsXG4gIHB4NDgwOiBjc3NgMzBlbWAsXG59O1xuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGl0JztcbmltcG9ydCAnQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctc3R5bGVzL2Rpc3QvZWFydGhsaW5nLWJhc2UubWluLmNzcyc7XG5pbXBvcnQgeyBjb21tb25TdHlsZXMgfSBmcm9tICcuLi9jb21tb24uc3R5bGVzJztcblxuY29uc3QgYmFzZVN0eWxlcyA9IGNzc2BcbiAgOmhvc3Qge1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBtaW4tY29udGVudCBhdXRvO1xuXG4gICAgbWluLWhlaWdodDogMTAwJTtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IHN0eWxlcyA9IFtjb21tb25TdHlsZXMsIGJhc2VTdHlsZXNdO1xuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGl0JztcbmltcG9ydCB7IGNvbW1vbkVtLCBjb21tb25TdHlsZXMgfSBmcm9tICcuLi8uLi9jb21tb24uc3R5bGVzJztcblxuY29uc3QgYmFzZSA9IGNzc2BcbiAgOmhvc3Qge1xuICAgIGRpc3BsYXk6IGdyaWQ7XG5cbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ueC1ncmV5LTUpO1xuICB9XG5cbiAgaGVhZGVyIHtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogJHtjb21tb25FbS5weDI0fSBtaW4tY29udGVudCBhdXRvO1xuICAgIGdyaWQtdGVtcGxhdGUtcm93czogJHtjb21tb25FbS5weDEyfSAke2NvbW1vbkVtLnB4MjZ9ICR7Y29tbW9uRW0ucHgyNn07XG4gIH1cblxuICBoMSB7XG4gICAgZ3JpZC1jb2x1bW46IDI7XG4gICAgZ3JpZC1yb3c6IDI7XG5cbiAgICBtYXJnaW46IDA7XG5cbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuXG4gICAgY29sb3I6IHZhcigtLW5lLWFsaWFzLWNvbG9yLXRleHQtZGVmYXVsdCk7XG4gICAgZm9udC1mYW1pbHk6IHZhcigtLW54LWZvbnQtZmFtaWx5LWhlYWRpbmcpO1xuICAgIGZvbnQtc2l6ZTogdmFyKC0tbmUtcmVmLWZvbnQtc2l6ZS0wNyk7XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBzdHlsZXMgPSBbY29tbW9uU3R5bGVzLCBiYXNlXTtcbiIsImNvbnN0IGNvbnNvbGVMb2dnZXIgPSB7XG4gIHR5cGU6ICdsb2dnZXInLFxuICBsb2coYXJncykge1xuICAgIHRoaXMub3V0cHV0KCdsb2cnLCBhcmdzKTtcbiAgfSxcbiAgd2FybihhcmdzKSB7XG4gICAgdGhpcy5vdXRwdXQoJ3dhcm4nLCBhcmdzKTtcbiAgfSxcbiAgZXJyb3IoYXJncykge1xuICAgIHRoaXMub3V0cHV0KCdlcnJvcicsIGFyZ3MpO1xuICB9LFxuICBvdXRwdXQodHlwZSwgYXJncykge1xuICAgIGlmIChjb25zb2xlICYmIGNvbnNvbGVbdHlwZV0pIGNvbnNvbGVbdHlwZV0uYXBwbHkoY29uc29sZSwgYXJncyk7XG4gIH1cbn07XG5jbGFzcyBMb2dnZXIge1xuICBjb25zdHJ1Y3Rvcihjb25jcmV0ZUxvZ2dlcikge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB0aGlzLmluaXQoY29uY3JldGVMb2dnZXIsIG9wdGlvbnMpO1xuICB9XG4gIGluaXQoY29uY3JldGVMb2dnZXIpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdGhpcy5wcmVmaXggPSBvcHRpb25zLnByZWZpeCB8fCAnaTE4bmV4dDonO1xuICAgIHRoaXMubG9nZ2VyID0gY29uY3JldGVMb2dnZXIgfHwgY29uc29sZUxvZ2dlcjtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuZGVidWcgPSBvcHRpb25zLmRlYnVnO1xuICB9XG4gIGxvZygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmZvcndhcmQoYXJncywgJ2xvZycsICcnLCB0cnVlKTtcbiAgfVxuICB3YXJuKCkge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5mb3J3YXJkKGFyZ3MsICd3YXJuJywgJycsIHRydWUpO1xuICB9XG4gIGVycm9yKCkge1xuICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgYXJnc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5mb3J3YXJkKGFyZ3MsICdlcnJvcicsICcnKTtcbiAgfVxuICBkZXByZWNhdGUoKSB7XG4gICAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW40KSwgX2tleTQgPSAwOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgICBhcmdzW19rZXk0XSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmZvcndhcmQoYXJncywgJ3dhcm4nLCAnV0FSTklORyBERVBSRUNBVEVEOiAnLCB0cnVlKTtcbiAgfVxuICBmb3J3YXJkKGFyZ3MsIGx2bCwgcHJlZml4LCBkZWJ1Z09ubHkpIHtcbiAgICBpZiAoZGVidWdPbmx5ICYmICF0aGlzLmRlYnVnKSByZXR1cm4gbnVsbDtcbiAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnKSBhcmdzWzBdID0gYCR7cHJlZml4fSR7dGhpcy5wcmVmaXh9ICR7YXJnc1swXX1gO1xuICAgIHJldHVybiB0aGlzLmxvZ2dlcltsdmxdKGFyZ3MpO1xuICB9XG4gIGNyZWF0ZShtb2R1bGVOYW1lKSB7XG4gICAgcmV0dXJuIG5ldyBMb2dnZXIodGhpcy5sb2dnZXIsIHtcbiAgICAgIC4uLntcbiAgICAgICAgcHJlZml4OiBgJHt0aGlzLnByZWZpeH06JHttb2R1bGVOYW1lfTpgXG4gICAgICB9LFxuICAgICAgLi4udGhpcy5vcHRpb25zXG4gICAgfSk7XG4gIH1cbiAgY2xvbmUob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHRoaXMub3B0aW9ucztcbiAgICBvcHRpb25zLnByZWZpeCA9IG9wdGlvbnMucHJlZml4IHx8IHRoaXMucHJlZml4O1xuICAgIHJldHVybiBuZXcgTG9nZ2VyKHRoaXMubG9nZ2VyLCBvcHRpb25zKTtcbiAgfVxufVxudmFyIGJhc2VMb2dnZXIgPSBuZXcgTG9nZ2VyKCk7XG5cbmNsYXNzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMub2JzZXJ2ZXJzID0ge307XG4gIH1cbiAgb24oZXZlbnRzLCBsaXN0ZW5lcikge1xuICAgIGV2ZW50cy5zcGxpdCgnICcpLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgdGhpcy5vYnNlcnZlcnNbZXZlbnRdID0gdGhpcy5vYnNlcnZlcnNbZXZlbnRdIHx8IFtdO1xuICAgICAgdGhpcy5vYnNlcnZlcnNbZXZlbnRdLnB1c2gobGlzdGVuZXIpO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG9mZihldmVudCwgbGlzdGVuZXIpIHtcbiAgICBpZiAoIXRoaXMub2JzZXJ2ZXJzW2V2ZW50XSkgcmV0dXJuO1xuICAgIGlmICghbGlzdGVuZXIpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLm9ic2VydmVyc1tldmVudF07XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMub2JzZXJ2ZXJzW2V2ZW50XSA9IHRoaXMub2JzZXJ2ZXJzW2V2ZW50XS5maWx0ZXIobCA9PiBsICE9PSBsaXN0ZW5lcik7XG4gIH1cbiAgZW1pdChldmVudCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cbiAgICBpZiAodGhpcy5vYnNlcnZlcnNbZXZlbnRdKSB7XG4gICAgICBjb25zdCBjbG9uZWQgPSBbXS5jb25jYXQodGhpcy5vYnNlcnZlcnNbZXZlbnRdKTtcbiAgICAgIGNsb25lZC5mb3JFYWNoKG9ic2VydmVyID0+IHtcbiAgICAgICAgb2JzZXJ2ZXIoLi4uYXJncyk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHRoaXMub2JzZXJ2ZXJzWycqJ10pIHtcbiAgICAgIGNvbnN0IGNsb25lZCA9IFtdLmNvbmNhdCh0aGlzLm9ic2VydmVyc1snKiddKTtcbiAgICAgIGNsb25lZC5mb3JFYWNoKG9ic2VydmVyID0+IHtcbiAgICAgICAgb2JzZXJ2ZXIuYXBwbHkob2JzZXJ2ZXIsIFtldmVudCwgLi4uYXJnc10pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRlZmVyKCkge1xuICBsZXQgcmVzO1xuICBsZXQgcmVqO1xuICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHJlcyA9IHJlc29sdmU7XG4gICAgcmVqID0gcmVqZWN0O1xuICB9KTtcbiAgcHJvbWlzZS5yZXNvbHZlID0gcmVzO1xuICBwcm9taXNlLnJlamVjdCA9IHJlajtcbiAgcmV0dXJuIHByb21pc2U7XG59XG5mdW5jdGlvbiBtYWtlU3RyaW5nKG9iamVjdCkge1xuICBpZiAob2JqZWN0ID09IG51bGwpIHJldHVybiAnJztcbiAgcmV0dXJuICcnICsgb2JqZWN0O1xufVxuZnVuY3Rpb24gY29weShhLCBzLCB0KSB7XG4gIGEuZm9yRWFjaChtID0+IHtcbiAgICBpZiAoc1ttXSkgdFttXSA9IHNbbV07XG4gIH0pO1xufVxuZnVuY3Rpb24gZ2V0TGFzdE9mUGF0aChvYmplY3QsIHBhdGgsIEVtcHR5KSB7XG4gIGZ1bmN0aW9uIGNsZWFuS2V5KGtleSkge1xuICAgIHJldHVybiBrZXkgJiYga2V5LmluZGV4T2YoJyMjIycpID4gLTEgPyBrZXkucmVwbGFjZSgvIyMjL2csICcuJykgOiBrZXk7XG4gIH1cbiAgZnVuY3Rpb24gY2FuTm90VHJhdmVyc2VEZWVwZXIoKSB7XG4gICAgcmV0dXJuICFvYmplY3QgfHwgdHlwZW9mIG9iamVjdCA9PT0gJ3N0cmluZyc7XG4gIH1cbiAgY29uc3Qgc3RhY2sgPSB0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycgPyBbXS5jb25jYXQocGF0aCkgOiBwYXRoLnNwbGl0KCcuJyk7XG4gIHdoaWxlIChzdGFjay5sZW5ndGggPiAxKSB7XG4gICAgaWYgKGNhbk5vdFRyYXZlcnNlRGVlcGVyKCkpIHJldHVybiB7fTtcbiAgICBjb25zdCBrZXkgPSBjbGVhbktleShzdGFjay5zaGlmdCgpKTtcbiAgICBpZiAoIW9iamVjdFtrZXldICYmIEVtcHR5KSBvYmplY3Rba2V5XSA9IG5ldyBFbXB0eSgpO1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSB7XG4gICAgICBvYmplY3QgPSBvYmplY3Rba2V5XTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqZWN0ID0ge307XG4gICAgfVxuICB9XG4gIGlmIChjYW5Ob3RUcmF2ZXJzZURlZXBlcigpKSByZXR1cm4ge307XG4gIHJldHVybiB7XG4gICAgb2JqOiBvYmplY3QsXG4gICAgazogY2xlYW5LZXkoc3RhY2suc2hpZnQoKSlcbiAgfTtcbn1cbmZ1bmN0aW9uIHNldFBhdGgob2JqZWN0LCBwYXRoLCBuZXdWYWx1ZSkge1xuICBjb25zdCB7XG4gICAgb2JqLFxuICAgIGtcbiAgfSA9IGdldExhc3RPZlBhdGgob2JqZWN0LCBwYXRoLCBPYmplY3QpO1xuICBvYmpba10gPSBuZXdWYWx1ZTtcbn1cbmZ1bmN0aW9uIHB1c2hQYXRoKG9iamVjdCwgcGF0aCwgbmV3VmFsdWUsIGNvbmNhdCkge1xuICBjb25zdCB7XG4gICAgb2JqLFxuICAgIGtcbiAgfSA9IGdldExhc3RPZlBhdGgob2JqZWN0LCBwYXRoLCBPYmplY3QpO1xuICBvYmpba10gPSBvYmpba10gfHwgW107XG4gIGlmIChjb25jYXQpIG9ialtrXSA9IG9ialtrXS5jb25jYXQobmV3VmFsdWUpO1xuICBpZiAoIWNvbmNhdCkgb2JqW2tdLnB1c2gobmV3VmFsdWUpO1xufVxuZnVuY3Rpb24gZ2V0UGF0aChvYmplY3QsIHBhdGgpIHtcbiAgY29uc3Qge1xuICAgIG9iaixcbiAgICBrXG4gIH0gPSBnZXRMYXN0T2ZQYXRoKG9iamVjdCwgcGF0aCk7XG4gIGlmICghb2JqKSByZXR1cm4gdW5kZWZpbmVkO1xuICByZXR1cm4gb2JqW2tdO1xufVxuZnVuY3Rpb24gZ2V0UGF0aFdpdGhEZWZhdWx0cyhkYXRhLCBkZWZhdWx0RGF0YSwga2V5KSB7XG4gIGNvbnN0IHZhbHVlID0gZ2V0UGF0aChkYXRhLCBrZXkpO1xuICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gZ2V0UGF0aChkZWZhdWx0RGF0YSwga2V5KTtcbn1cbmZ1bmN0aW9uIGRlZXBFeHRlbmQodGFyZ2V0LCBzb3VyY2UsIG92ZXJ3cml0ZSkge1xuICBmb3IgKGNvbnN0IHByb3AgaW4gc291cmNlKSB7XG4gICAgaWYgKHByb3AgIT09ICdfX3Byb3RvX18nICYmIHByb3AgIT09ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgIGlmIChwcm9wIGluIHRhcmdldCkge1xuICAgICAgICBpZiAodHlwZW9mIHRhcmdldFtwcm9wXSA9PT0gJ3N0cmluZycgfHwgdGFyZ2V0W3Byb3BdIGluc3RhbmNlb2YgU3RyaW5nIHx8IHR5cGVvZiBzb3VyY2VbcHJvcF0gPT09ICdzdHJpbmcnIHx8IHNvdXJjZVtwcm9wXSBpbnN0YW5jZW9mIFN0cmluZykge1xuICAgICAgICAgIGlmIChvdmVyd3JpdGUpIHRhcmdldFtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWVwRXh0ZW5kKHRhcmdldFtwcm9wXSwgc291cmNlW3Byb3BdLCBvdmVyd3JpdGUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRbcHJvcF0gPSBzb3VyY2VbcHJvcF07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiByZWdleEVzY2FwZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bXFwtXFxbXFxdXFwvXFx7XFx9XFwoXFwpXFwqXFwrXFw/XFwuXFxcXFxcXlxcJFxcfF0vZywgJ1xcXFwkJicpO1xufVxudmFyIF9lbnRpdHlNYXAgPSB7XG4gICcmJzogJyZhbXA7JyxcbiAgJzwnOiAnJmx0OycsXG4gICc+JzogJyZndDsnLFxuICAnXCInOiAnJnF1b3Q7JyxcbiAgXCInXCI6ICcmIzM5OycsXG4gICcvJzogJyYjeDJGOydcbn07XG5mdW5jdGlvbiBlc2NhcGUoZGF0YSkge1xuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGRhdGEucmVwbGFjZSgvWyY8PlwiJ1xcL10vZywgcyA9PiBfZW50aXR5TWFwW3NdKTtcbiAgfVxuICByZXR1cm4gZGF0YTtcbn1cbmNvbnN0IGNoYXJzID0gWycgJywgJywnLCAnPycsICchJywgJzsnXTtcbmZ1bmN0aW9uIGxvb2tzTGlrZU9iamVjdFBhdGgoa2V5LCBuc1NlcGFyYXRvciwga2V5U2VwYXJhdG9yKSB7XG4gIG5zU2VwYXJhdG9yID0gbnNTZXBhcmF0b3IgfHwgJyc7XG4gIGtleVNlcGFyYXRvciA9IGtleVNlcGFyYXRvciB8fCAnJztcbiAgY29uc3QgcG9zc2libGVDaGFycyA9IGNoYXJzLmZpbHRlcihjID0+IG5zU2VwYXJhdG9yLmluZGV4T2YoYykgPCAwICYmIGtleVNlcGFyYXRvci5pbmRleE9mKGMpIDwgMCk7XG4gIGlmIChwb3NzaWJsZUNoYXJzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHRydWU7XG4gIGNvbnN0IHIgPSBuZXcgUmVnRXhwKGAoJHtwb3NzaWJsZUNoYXJzLm1hcChjID0+IGMgPT09ICc/JyA/ICdcXFxcPycgOiBjKS5qb2luKCd8Jyl9KWApO1xuICBsZXQgbWF0Y2hlZCA9ICFyLnRlc3Qoa2V5KTtcbiAgaWYgKCFtYXRjaGVkKSB7XG4gICAgY29uc3Qga2kgPSBrZXkuaW5kZXhPZihrZXlTZXBhcmF0b3IpO1xuICAgIGlmIChraSA+IDAgJiYgIXIudGVzdChrZXkuc3Vic3RyaW5nKDAsIGtpKSkpIHtcbiAgICAgIG1hdGNoZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbWF0Y2hlZDtcbn1cbmZ1bmN0aW9uIGRlZXBGaW5kKG9iaiwgcGF0aCkge1xuICBsZXQga2V5U2VwYXJhdG9yID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnLic7XG4gIGlmICghb2JqKSByZXR1cm4gdW5kZWZpbmVkO1xuICBpZiAob2JqW3BhdGhdKSByZXR1cm4gb2JqW3BhdGhdO1xuICBjb25zdCBwYXRocyA9IHBhdGguc3BsaXQoa2V5U2VwYXJhdG9yKTtcbiAgbGV0IGN1cnJlbnQgPSBvYmo7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0aHMubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoIWN1cnJlbnQpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgaWYgKHR5cGVvZiBjdXJyZW50W3BhdGhzW2ldXSA9PT0gJ3N0cmluZycgJiYgaSArIDEgPCBwYXRocy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChjdXJyZW50W3BhdGhzW2ldXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBsZXQgaiA9IDI7XG4gICAgICBsZXQgcCA9IHBhdGhzLnNsaWNlKGksIGkgKyBqKS5qb2luKGtleVNlcGFyYXRvcik7XG4gICAgICBsZXQgbWl4ID0gY3VycmVudFtwXTtcbiAgICAgIHdoaWxlIChtaXggPT09IHVuZGVmaW5lZCAmJiBwYXRocy5sZW5ndGggPiBpICsgaikge1xuICAgICAgICBqKys7XG4gICAgICAgIHAgPSBwYXRocy5zbGljZShpLCBpICsgaikuam9pbihrZXlTZXBhcmF0b3IpO1xuICAgICAgICBtaXggPSBjdXJyZW50W3BdO1xuICAgICAgfVxuICAgICAgaWYgKG1peCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgaWYgKG1peCA9PT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gICAgICBpZiAocGF0aC5lbmRzV2l0aChwKSkge1xuICAgICAgICBpZiAodHlwZW9mIG1peCA9PT0gJ3N0cmluZycpIHJldHVybiBtaXg7XG4gICAgICAgIGlmIChwICYmIHR5cGVvZiBtaXhbcF0gPT09ICdzdHJpbmcnKSByZXR1cm4gbWl4W3BdO1xuICAgICAgfVxuICAgICAgY29uc3Qgam9pbmVkUGF0aCA9IHBhdGhzLnNsaWNlKGkgKyBqKS5qb2luKGtleVNlcGFyYXRvcik7XG4gICAgICBpZiAoam9pbmVkUGF0aCkgcmV0dXJuIGRlZXBGaW5kKG1peCwgam9pbmVkUGF0aCwga2V5U2VwYXJhdG9yKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGN1cnJlbnQgPSBjdXJyZW50W3BhdGhzW2ldXTtcbiAgfVxuICByZXR1cm4gY3VycmVudDtcbn1cbmZ1bmN0aW9uIGdldENsZWFuZWRDb2RlKGNvZGUpIHtcbiAgaWYgKGNvZGUgJiYgY29kZS5pbmRleE9mKCdfJykgPiAwKSByZXR1cm4gY29kZS5yZXBsYWNlKCdfJywgJy0nKTtcbiAgcmV0dXJuIGNvZGU7XG59XG5cbmNsYXNzIFJlc291cmNlU3RvcmUgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHtcbiAgICAgIG5zOiBbJ3RyYW5zbGF0aW9uJ10sXG4gICAgICBkZWZhdWx0TlM6ICd0cmFuc2xhdGlvbidcbiAgICB9O1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5kYXRhID0gZGF0YSB8fCB7fTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIGlmICh0aGlzLm9wdGlvbnMua2V5U2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5rZXlTZXBhcmF0b3IgPSAnLic7XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMuaWdub3JlSlNPTlN0cnVjdHVyZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuaWdub3JlSlNPTlN0cnVjdHVyZSA9IHRydWU7XG4gICAgfVxuICB9XG4gIGFkZE5hbWVzcGFjZXMobnMpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLm5zLmluZGV4T2YobnMpIDwgMCkge1xuICAgICAgdGhpcy5vcHRpb25zLm5zLnB1c2gobnMpO1xuICAgIH1cbiAgfVxuICByZW1vdmVOYW1lc3BhY2VzKG5zKSB7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLm9wdGlvbnMubnMuaW5kZXhPZihucyk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5ucy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfVxuICBnZXRSZXNvdXJjZShsbmcsIG5zLCBrZXkpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge307XG4gICAgY29uc3Qga2V5U2VwYXJhdG9yID0gb3B0aW9ucy5rZXlTZXBhcmF0b3IgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMua2V5U2VwYXJhdG9yIDogdGhpcy5vcHRpb25zLmtleVNlcGFyYXRvcjtcbiAgICBjb25zdCBpZ25vcmVKU09OU3RydWN0dXJlID0gb3B0aW9ucy5pZ25vcmVKU09OU3RydWN0dXJlICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmlnbm9yZUpTT05TdHJ1Y3R1cmUgOiB0aGlzLm9wdGlvbnMuaWdub3JlSlNPTlN0cnVjdHVyZTtcbiAgICBsZXQgcGF0aCA9IFtsbmcsIG5zXTtcbiAgICBpZiAoa2V5ICYmIHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnKSBwYXRoID0gcGF0aC5jb25jYXQoa2V5KTtcbiAgICBpZiAoa2V5ICYmIHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSBwYXRoID0gcGF0aC5jb25jYXQoa2V5U2VwYXJhdG9yID8ga2V5LnNwbGl0KGtleVNlcGFyYXRvcikgOiBrZXkpO1xuICAgIGlmIChsbmcuaW5kZXhPZignLicpID4gLTEpIHtcbiAgICAgIHBhdGggPSBsbmcuc3BsaXQoJy4nKTtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gZ2V0UGF0aCh0aGlzLmRhdGEsIHBhdGgpO1xuICAgIGlmIChyZXN1bHQgfHwgIWlnbm9yZUpTT05TdHJ1Y3R1cmUgfHwgdHlwZW9mIGtleSAhPT0gJ3N0cmluZycpIHJldHVybiByZXN1bHQ7XG4gICAgcmV0dXJuIGRlZXBGaW5kKHRoaXMuZGF0YSAmJiB0aGlzLmRhdGFbbG5nXSAmJiB0aGlzLmRhdGFbbG5nXVtuc10sIGtleSwga2V5U2VwYXJhdG9yKTtcbiAgfVxuICBhZGRSZXNvdXJjZShsbmcsIG5zLCBrZXksIHZhbHVlKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IHtcbiAgICAgIHNpbGVudDogZmFsc2VcbiAgICB9O1xuICAgIGNvbnN0IGtleVNlcGFyYXRvciA9IG9wdGlvbnMua2V5U2VwYXJhdG9yICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmtleVNlcGFyYXRvciA6IHRoaXMub3B0aW9ucy5rZXlTZXBhcmF0b3I7XG4gICAgbGV0IHBhdGggPSBbbG5nLCBuc107XG4gICAgaWYgKGtleSkgcGF0aCA9IHBhdGguY29uY2F0KGtleVNlcGFyYXRvciA/IGtleS5zcGxpdChrZXlTZXBhcmF0b3IpIDoga2V5KTtcbiAgICBpZiAobG5nLmluZGV4T2YoJy4nKSA+IC0xKSB7XG4gICAgICBwYXRoID0gbG5nLnNwbGl0KCcuJyk7XG4gICAgICB2YWx1ZSA9IG5zO1xuICAgICAgbnMgPSBwYXRoWzFdO1xuICAgIH1cbiAgICB0aGlzLmFkZE5hbWVzcGFjZXMobnMpO1xuICAgIHNldFBhdGgodGhpcy5kYXRhLCBwYXRoLCB2YWx1ZSk7XG4gICAgaWYgKCFvcHRpb25zLnNpbGVudCkgdGhpcy5lbWl0KCdhZGRlZCcsIGxuZywgbnMsIGtleSwgdmFsdWUpO1xuICB9XG4gIGFkZFJlc291cmNlcyhsbmcsIG5zLCByZXNvdXJjZXMpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge1xuICAgICAgc2lsZW50OiBmYWxzZVxuICAgIH07XG4gICAgZm9yIChjb25zdCBtIGluIHJlc291cmNlcykge1xuICAgICAgaWYgKHR5cGVvZiByZXNvdXJjZXNbbV0gPT09ICdzdHJpbmcnIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuYXBwbHkocmVzb3VyY2VzW21dKSA9PT0gJ1tvYmplY3QgQXJyYXldJykgdGhpcy5hZGRSZXNvdXJjZShsbmcsIG5zLCBtLCByZXNvdXJjZXNbbV0sIHtcbiAgICAgICAgc2lsZW50OiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKCFvcHRpb25zLnNpbGVudCkgdGhpcy5lbWl0KCdhZGRlZCcsIGxuZywgbnMsIHJlc291cmNlcyk7XG4gIH1cbiAgYWRkUmVzb3VyY2VCdW5kbGUobG5nLCBucywgcmVzb3VyY2VzLCBkZWVwLCBvdmVyd3JpdGUpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDoge1xuICAgICAgc2lsZW50OiBmYWxzZVxuICAgIH07XG4gICAgbGV0IHBhdGggPSBbbG5nLCBuc107XG4gICAgaWYgKGxuZy5pbmRleE9mKCcuJykgPiAtMSkge1xuICAgICAgcGF0aCA9IGxuZy5zcGxpdCgnLicpO1xuICAgICAgZGVlcCA9IHJlc291cmNlcztcbiAgICAgIHJlc291cmNlcyA9IG5zO1xuICAgICAgbnMgPSBwYXRoWzFdO1xuICAgIH1cbiAgICB0aGlzLmFkZE5hbWVzcGFjZXMobnMpO1xuICAgIGxldCBwYWNrID0gZ2V0UGF0aCh0aGlzLmRhdGEsIHBhdGgpIHx8IHt9O1xuICAgIGlmIChkZWVwKSB7XG4gICAgICBkZWVwRXh0ZW5kKHBhY2ssIHJlc291cmNlcywgb3ZlcndyaXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFjayA9IHtcbiAgICAgICAgLi4ucGFjayxcbiAgICAgICAgLi4ucmVzb3VyY2VzXG4gICAgICB9O1xuICAgIH1cbiAgICBzZXRQYXRoKHRoaXMuZGF0YSwgcGF0aCwgcGFjayk7XG4gICAgaWYgKCFvcHRpb25zLnNpbGVudCkgdGhpcy5lbWl0KCdhZGRlZCcsIGxuZywgbnMsIHJlc291cmNlcyk7XG4gIH1cbiAgcmVtb3ZlUmVzb3VyY2VCdW5kbGUobG5nLCBucykge1xuICAgIGlmICh0aGlzLmhhc1Jlc291cmNlQnVuZGxlKGxuZywgbnMpKSB7XG4gICAgICBkZWxldGUgdGhpcy5kYXRhW2xuZ11bbnNdO1xuICAgIH1cbiAgICB0aGlzLnJlbW92ZU5hbWVzcGFjZXMobnMpO1xuICAgIHRoaXMuZW1pdCgncmVtb3ZlZCcsIGxuZywgbnMpO1xuICB9XG4gIGhhc1Jlc291cmNlQnVuZGxlKGxuZywgbnMpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRSZXNvdXJjZShsbmcsIG5zKSAhPT0gdW5kZWZpbmVkO1xuICB9XG4gIGdldFJlc291cmNlQnVuZGxlKGxuZywgbnMpIHtcbiAgICBpZiAoIW5zKSBucyA9IHRoaXMub3B0aW9ucy5kZWZhdWx0TlM7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5jb21wYXRpYmlsaXR5QVBJID09PSAndjEnKSByZXR1cm4ge1xuICAgICAgLi4ue30sXG4gICAgICAuLi50aGlzLmdldFJlc291cmNlKGxuZywgbnMpXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5nZXRSZXNvdXJjZShsbmcsIG5zKTtcbiAgfVxuICBnZXREYXRhQnlMYW5ndWFnZShsbmcpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhW2xuZ107XG4gIH1cbiAgaGFzTGFuZ3VhZ2VTb21lVHJhbnNsYXRpb25zKGxuZykge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmdldERhdGFCeUxhbmd1YWdlKGxuZyk7XG4gICAgY29uc3QgbiA9IGRhdGEgJiYgT2JqZWN0LmtleXMoZGF0YSkgfHwgW107XG4gICAgcmV0dXJuICEhbi5maW5kKHYgPT4gZGF0YVt2XSAmJiBPYmplY3Qua2V5cyhkYXRhW3ZdKS5sZW5ndGggPiAwKTtcbiAgfVxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YTtcbiAgfVxufVxuXG52YXIgcG9zdFByb2Nlc3NvciA9IHtcbiAgcHJvY2Vzc29yczoge30sXG4gIGFkZFBvc3RQcm9jZXNzb3IobW9kdWxlKSB7XG4gICAgdGhpcy5wcm9jZXNzb3JzW21vZHVsZS5uYW1lXSA9IG1vZHVsZTtcbiAgfSxcbiAgaGFuZGxlKHByb2Nlc3NvcnMsIHZhbHVlLCBrZXksIG9wdGlvbnMsIHRyYW5zbGF0b3IpIHtcbiAgICBwcm9jZXNzb3JzLmZvckVhY2gocHJvY2Vzc29yID0+IHtcbiAgICAgIGlmICh0aGlzLnByb2Nlc3NvcnNbcHJvY2Vzc29yXSkgdmFsdWUgPSB0aGlzLnByb2Nlc3NvcnNbcHJvY2Vzc29yXS5wcm9jZXNzKHZhbHVlLCBrZXksIG9wdGlvbnMsIHRyYW5zbGF0b3IpO1xuICAgIH0pO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufTtcblxuY29uc3QgY2hlY2tlZExvYWRlZEZvciA9IHt9O1xuY2xhc3MgVHJhbnNsYXRvciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yKHNlcnZpY2VzKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHN1cGVyKCk7XG4gICAgY29weShbJ3Jlc291cmNlU3RvcmUnLCAnbGFuZ3VhZ2VVdGlscycsICdwbHVyYWxSZXNvbHZlcicsICdpbnRlcnBvbGF0b3InLCAnYmFja2VuZENvbm5lY3RvcicsICdpMThuRm9ybWF0JywgJ3V0aWxzJ10sIHNlcnZpY2VzLCB0aGlzKTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIGlmICh0aGlzLm9wdGlvbnMua2V5U2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5rZXlTZXBhcmF0b3IgPSAnLic7XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyID0gYmFzZUxvZ2dlci5jcmVhdGUoJ3RyYW5zbGF0b3InKTtcbiAgfVxuICBjaGFuZ2VMYW5ndWFnZShsbmcpIHtcbiAgICBpZiAobG5nKSB0aGlzLmxhbmd1YWdlID0gbG5nO1xuICB9XG4gIGV4aXN0cyhrZXkpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge1xuICAgICAgaW50ZXJwb2xhdGlvbjoge31cbiAgICB9O1xuICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCB8fCBrZXkgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgcmVzb2x2ZWQgPSB0aGlzLnJlc29sdmUoa2V5LCBvcHRpb25zKTtcbiAgICByZXR1cm4gcmVzb2x2ZWQgJiYgcmVzb2x2ZWQucmVzICE9PSB1bmRlZmluZWQ7XG4gIH1cbiAgZXh0cmFjdEZyb21LZXkoa2V5LCBvcHRpb25zKSB7XG4gICAgbGV0IG5zU2VwYXJhdG9yID0gb3B0aW9ucy5uc1NlcGFyYXRvciAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5uc1NlcGFyYXRvciA6IHRoaXMub3B0aW9ucy5uc1NlcGFyYXRvcjtcbiAgICBpZiAobnNTZXBhcmF0b3IgPT09IHVuZGVmaW5lZCkgbnNTZXBhcmF0b3IgPSAnOic7XG4gICAgY29uc3Qga2V5U2VwYXJhdG9yID0gb3B0aW9ucy5rZXlTZXBhcmF0b3IgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMua2V5U2VwYXJhdG9yIDogdGhpcy5vcHRpb25zLmtleVNlcGFyYXRvcjtcbiAgICBsZXQgbmFtZXNwYWNlcyA9IG9wdGlvbnMubnMgfHwgdGhpcy5vcHRpb25zLmRlZmF1bHROUyB8fCBbXTtcbiAgICBjb25zdCB3b3VsZENoZWNrRm9yTnNJbktleSA9IG5zU2VwYXJhdG9yICYmIGtleS5pbmRleE9mKG5zU2VwYXJhdG9yKSA+IC0xO1xuICAgIGNvbnN0IHNlZW1zTmF0dXJhbExhbmd1YWdlID0gIXRoaXMub3B0aW9ucy51c2VyRGVmaW5lZEtleVNlcGFyYXRvciAmJiAhb3B0aW9ucy5rZXlTZXBhcmF0b3IgJiYgIXRoaXMub3B0aW9ucy51c2VyRGVmaW5lZE5zU2VwYXJhdG9yICYmICFvcHRpb25zLm5zU2VwYXJhdG9yICYmICFsb29rc0xpa2VPYmplY3RQYXRoKGtleSwgbnNTZXBhcmF0b3IsIGtleVNlcGFyYXRvcik7XG4gICAgaWYgKHdvdWxkQ2hlY2tGb3JOc0luS2V5ICYmICFzZWVtc05hdHVyYWxMYW5ndWFnZSkge1xuICAgICAgY29uc3QgbSA9IGtleS5tYXRjaCh0aGlzLmludGVycG9sYXRvci5uZXN0aW5nUmVnZXhwKTtcbiAgICAgIGlmIChtICYmIG0ubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtleSxcbiAgICAgICAgICBuYW1lc3BhY2VzXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBjb25zdCBwYXJ0cyA9IGtleS5zcGxpdChuc1NlcGFyYXRvcik7XG4gICAgICBpZiAobnNTZXBhcmF0b3IgIT09IGtleVNlcGFyYXRvciB8fCBuc1NlcGFyYXRvciA9PT0ga2V5U2VwYXJhdG9yICYmIHRoaXMub3B0aW9ucy5ucy5pbmRleE9mKHBhcnRzWzBdKSA+IC0xKSBuYW1lc3BhY2VzID0gcGFydHMuc2hpZnQoKTtcbiAgICAgIGtleSA9IHBhcnRzLmpvaW4oa2V5U2VwYXJhdG9yKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJykgbmFtZXNwYWNlcyA9IFtuYW1lc3BhY2VzXTtcbiAgICByZXR1cm4ge1xuICAgICAga2V5LFxuICAgICAgbmFtZXNwYWNlc1xuICAgIH07XG4gIH1cbiAgdHJhbnNsYXRlKGtleXMsIG9wdGlvbnMsIGxhc3RLZXkpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnICYmIHRoaXMub3B0aW9ucy5vdmVybG9hZFRyYW5zbGF0aW9uT3B0aW9uSGFuZGxlcikge1xuICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucy5vdmVybG9hZFRyYW5zbGF0aW9uT3B0aW9uSGFuZGxlcihhcmd1bWVudHMpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdvYmplY3QnKSBvcHRpb25zID0ge1xuICAgICAgLi4ub3B0aW9uc1xuICAgIH07XG4gICAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge307XG4gICAgaWYgKGtleXMgPT09IHVuZGVmaW5lZCB8fCBrZXlzID09PSBudWxsKSByZXR1cm4gJyc7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGtleXMpKSBrZXlzID0gW1N0cmluZyhrZXlzKV07XG4gICAgY29uc3QgcmV0dXJuRGV0YWlscyA9IG9wdGlvbnMucmV0dXJuRGV0YWlscyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5yZXR1cm5EZXRhaWxzIDogdGhpcy5vcHRpb25zLnJldHVybkRldGFpbHM7XG4gICAgY29uc3Qga2V5U2VwYXJhdG9yID0gb3B0aW9ucy5rZXlTZXBhcmF0b3IgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMua2V5U2VwYXJhdG9yIDogdGhpcy5vcHRpb25zLmtleVNlcGFyYXRvcjtcbiAgICBjb25zdCB7XG4gICAgICBrZXksXG4gICAgICBuYW1lc3BhY2VzXG4gICAgfSA9IHRoaXMuZXh0cmFjdEZyb21LZXkoa2V5c1trZXlzLmxlbmd0aCAtIDFdLCBvcHRpb25zKTtcbiAgICBjb25zdCBuYW1lc3BhY2UgPSBuYW1lc3BhY2VzW25hbWVzcGFjZXMubGVuZ3RoIC0gMV07XG4gICAgY29uc3QgbG5nID0gb3B0aW9ucy5sbmcgfHwgdGhpcy5sYW5ndWFnZTtcbiAgICBjb25zdCBhcHBlbmROYW1lc3BhY2VUb0NJTW9kZSA9IG9wdGlvbnMuYXBwZW5kTmFtZXNwYWNlVG9DSU1vZGUgfHwgdGhpcy5vcHRpb25zLmFwcGVuZE5hbWVzcGFjZVRvQ0lNb2RlO1xuICAgIGlmIChsbmcgJiYgbG5nLnRvTG93ZXJDYXNlKCkgPT09ICdjaW1vZGUnKSB7XG4gICAgICBpZiAoYXBwZW5kTmFtZXNwYWNlVG9DSU1vZGUpIHtcbiAgICAgICAgY29uc3QgbnNTZXBhcmF0b3IgPSBvcHRpb25zLm5zU2VwYXJhdG9yIHx8IHRoaXMub3B0aW9ucy5uc1NlcGFyYXRvcjtcbiAgICAgICAgaWYgKHJldHVybkRldGFpbHMpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzOiBgJHtuYW1lc3BhY2V9JHtuc1NlcGFyYXRvcn0ke2tleX1gLFxuICAgICAgICAgICAgdXNlZEtleToga2V5LFxuICAgICAgICAgICAgZXhhY3RVc2VkS2V5OiBrZXksXG4gICAgICAgICAgICB1c2VkTG5nOiBsbmcsXG4gICAgICAgICAgICB1c2VkTlM6IG5hbWVzcGFjZVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGAke25hbWVzcGFjZX0ke25zU2VwYXJhdG9yfSR7a2V5fWA7XG4gICAgICB9XG4gICAgICBpZiAocmV0dXJuRGV0YWlscykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHJlczoga2V5LFxuICAgICAgICAgIHVzZWRLZXk6IGtleSxcbiAgICAgICAgICBleGFjdFVzZWRLZXk6IGtleSxcbiAgICAgICAgICB1c2VkTG5nOiBsbmcsXG4gICAgICAgICAgdXNlZE5TOiBuYW1lc3BhY2VcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICAgIGNvbnN0IHJlc29sdmVkID0gdGhpcy5yZXNvbHZlKGtleXMsIG9wdGlvbnMpO1xuICAgIGxldCByZXMgPSByZXNvbHZlZCAmJiByZXNvbHZlZC5yZXM7XG4gICAgY29uc3QgcmVzVXNlZEtleSA9IHJlc29sdmVkICYmIHJlc29sdmVkLnVzZWRLZXkgfHwga2V5O1xuICAgIGNvbnN0IHJlc0V4YWN0VXNlZEtleSA9IHJlc29sdmVkICYmIHJlc29sdmVkLmV4YWN0VXNlZEtleSB8fCBrZXk7XG4gICAgY29uc3QgcmVzVHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuYXBwbHkocmVzKTtcbiAgICBjb25zdCBub09iamVjdCA9IFsnW29iamVjdCBOdW1iZXJdJywgJ1tvYmplY3QgRnVuY3Rpb25dJywgJ1tvYmplY3QgUmVnRXhwXSddO1xuICAgIGNvbnN0IGpvaW5BcnJheXMgPSBvcHRpb25zLmpvaW5BcnJheXMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuam9pbkFycmF5cyA6IHRoaXMub3B0aW9ucy5qb2luQXJyYXlzO1xuICAgIGNvbnN0IGhhbmRsZUFzT2JqZWN0SW5JMThuRm9ybWF0ID0gIXRoaXMuaTE4bkZvcm1hdCB8fCB0aGlzLmkxOG5Gb3JtYXQuaGFuZGxlQXNPYmplY3Q7XG4gICAgY29uc3QgaGFuZGxlQXNPYmplY3QgPSB0eXBlb2YgcmVzICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgcmVzICE9PSAnYm9vbGVhbicgJiYgdHlwZW9mIHJlcyAhPT0gJ251bWJlcic7XG4gICAgaWYgKGhhbmRsZUFzT2JqZWN0SW5JMThuRm9ybWF0ICYmIHJlcyAmJiBoYW5kbGVBc09iamVjdCAmJiBub09iamVjdC5pbmRleE9mKHJlc1R5cGUpIDwgMCAmJiAhKHR5cGVvZiBqb2luQXJyYXlzID09PSAnc3RyaW5nJyAmJiByZXNUeXBlID09PSAnW29iamVjdCBBcnJheV0nKSkge1xuICAgICAgaWYgKCFvcHRpb25zLnJldHVybk9iamVjdHMgJiYgIXRoaXMub3B0aW9ucy5yZXR1cm5PYmplY3RzKSB7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLnJldHVybmVkT2JqZWN0SGFuZGxlcikge1xuICAgICAgICAgIHRoaXMubG9nZ2VyLndhcm4oJ2FjY2Vzc2luZyBhbiBvYmplY3QgLSBidXQgcmV0dXJuT2JqZWN0cyBvcHRpb25zIGlzIG5vdCBlbmFibGVkIScpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHIgPSB0aGlzLm9wdGlvbnMucmV0dXJuZWRPYmplY3RIYW5kbGVyID8gdGhpcy5vcHRpb25zLnJldHVybmVkT2JqZWN0SGFuZGxlcihyZXNVc2VkS2V5LCByZXMsIHtcbiAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgIG5zOiBuYW1lc3BhY2VzXG4gICAgICAgIH0pIDogYGtleSAnJHtrZXl9ICgke3RoaXMubGFuZ3VhZ2V9KScgcmV0dXJuZWQgYW4gb2JqZWN0IGluc3RlYWQgb2Ygc3RyaW5nLmA7XG4gICAgICAgIGlmIChyZXR1cm5EZXRhaWxzKSB7XG4gICAgICAgICAgcmVzb2x2ZWQucmVzID0gcjtcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHI7XG4gICAgICB9XG4gICAgICBpZiAoa2V5U2VwYXJhdG9yKSB7XG4gICAgICAgIGNvbnN0IHJlc1R5cGVJc0FycmF5ID0gcmVzVHlwZSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgICAgICAgY29uc3QgY29weSA9IHJlc1R5cGVJc0FycmF5ID8gW10gOiB7fTtcbiAgICAgICAgY29uc3QgbmV3S2V5VG9Vc2UgPSByZXNUeXBlSXNBcnJheSA/IHJlc0V4YWN0VXNlZEtleSA6IHJlc1VzZWRLZXk7XG4gICAgICAgIGZvciAoY29uc3QgbSBpbiByZXMpIHtcbiAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlcywgbSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlZXBLZXkgPSBgJHtuZXdLZXlUb1VzZX0ke2tleVNlcGFyYXRvcn0ke219YDtcbiAgICAgICAgICAgIGNvcHlbbV0gPSB0aGlzLnRyYW5zbGF0ZShkZWVwS2V5LCB7XG4gICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICAgIC4uLntcbiAgICAgICAgICAgICAgICBqb2luQXJyYXlzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBuczogbmFtZXNwYWNlc1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChjb3B5W21dID09PSBkZWVwS2V5KSBjb3B5W21dID0gcmVzW21dO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXMgPSBjb3B5O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaGFuZGxlQXNPYmplY3RJbkkxOG5Gb3JtYXQgJiYgdHlwZW9mIGpvaW5BcnJheXMgPT09ICdzdHJpbmcnICYmIHJlc1R5cGUgPT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJlcyA9IHJlcy5qb2luKGpvaW5BcnJheXMpO1xuICAgICAgaWYgKHJlcykgcmVzID0gdGhpcy5leHRlbmRUcmFuc2xhdGlvbihyZXMsIGtleXMsIG9wdGlvbnMsIGxhc3RLZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgdXNlZERlZmF1bHQgPSBmYWxzZTtcbiAgICAgIGxldCB1c2VkS2V5ID0gZmFsc2U7XG4gICAgICBjb25zdCBuZWVkc1BsdXJhbEhhbmRsaW5nID0gb3B0aW9ucy5jb3VudCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvcHRpb25zLmNvdW50ICE9PSAnc3RyaW5nJztcbiAgICAgIGNvbnN0IGhhc0RlZmF1bHRWYWx1ZSA9IFRyYW5zbGF0b3IuaGFzRGVmYXVsdFZhbHVlKG9wdGlvbnMpO1xuICAgICAgY29uc3QgZGVmYXVsdFZhbHVlU3VmZml4ID0gbmVlZHNQbHVyYWxIYW5kbGluZyA/IHRoaXMucGx1cmFsUmVzb2x2ZXIuZ2V0U3VmZml4KGxuZywgb3B0aW9ucy5jb3VudCwgb3B0aW9ucykgOiAnJztcbiAgICAgIGNvbnN0IGRlZmF1bHRWYWx1ZVN1ZmZpeE9yZGluYWxGYWxsYmFjayA9IG9wdGlvbnMub3JkaW5hbCAmJiBuZWVkc1BsdXJhbEhhbmRsaW5nID8gdGhpcy5wbHVyYWxSZXNvbHZlci5nZXRTdWZmaXgobG5nLCBvcHRpb25zLmNvdW50LCB7XG4gICAgICAgIG9yZGluYWw6IGZhbHNlXG4gICAgICB9KSA6ICcnO1xuICAgICAgY29uc3QgZGVmYXVsdFZhbHVlID0gb3B0aW9uc1tgZGVmYXVsdFZhbHVlJHtkZWZhdWx0VmFsdWVTdWZmaXh9YF0gfHwgb3B0aW9uc1tgZGVmYXVsdFZhbHVlJHtkZWZhdWx0VmFsdWVTdWZmaXhPcmRpbmFsRmFsbGJhY2t9YF0gfHwgb3B0aW9ucy5kZWZhdWx0VmFsdWU7XG4gICAgICBpZiAoIXRoaXMuaXNWYWxpZExvb2t1cChyZXMpICYmIGhhc0RlZmF1bHRWYWx1ZSkge1xuICAgICAgICB1c2VkRGVmYXVsdCA9IHRydWU7XG4gICAgICAgIHJlcyA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5pc1ZhbGlkTG9va3VwKHJlcykpIHtcbiAgICAgICAgdXNlZEtleSA9IHRydWU7XG4gICAgICAgIHJlcyA9IGtleTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG1pc3NpbmdLZXlOb1ZhbHVlRmFsbGJhY2tUb0tleSA9IG9wdGlvbnMubWlzc2luZ0tleU5vVmFsdWVGYWxsYmFja1RvS2V5IHx8IHRoaXMub3B0aW9ucy5taXNzaW5nS2V5Tm9WYWx1ZUZhbGxiYWNrVG9LZXk7XG4gICAgICBjb25zdCByZXNGb3JNaXNzaW5nID0gbWlzc2luZ0tleU5vVmFsdWVGYWxsYmFja1RvS2V5ICYmIHVzZWRLZXkgPyB1bmRlZmluZWQgOiByZXM7XG4gICAgICBjb25zdCB1cGRhdGVNaXNzaW5nID0gaGFzRGVmYXVsdFZhbHVlICYmIGRlZmF1bHRWYWx1ZSAhPT0gcmVzICYmIHRoaXMub3B0aW9ucy51cGRhdGVNaXNzaW5nO1xuICAgICAgaWYgKHVzZWRLZXkgfHwgdXNlZERlZmF1bHQgfHwgdXBkYXRlTWlzc2luZykge1xuICAgICAgICB0aGlzLmxvZ2dlci5sb2codXBkYXRlTWlzc2luZyA/ICd1cGRhdGVLZXknIDogJ21pc3NpbmdLZXknLCBsbmcsIG5hbWVzcGFjZSwga2V5LCB1cGRhdGVNaXNzaW5nID8gZGVmYXVsdFZhbHVlIDogcmVzKTtcbiAgICAgICAgaWYgKGtleVNlcGFyYXRvcikge1xuICAgICAgICAgIGNvbnN0IGZrID0gdGhpcy5yZXNvbHZlKGtleSwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGtleVNlcGFyYXRvcjogZmFsc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAoZmsgJiYgZmsucmVzKSB0aGlzLmxvZ2dlci53YXJuKCdTZWVtcyB0aGUgbG9hZGVkIHRyYW5zbGF0aW9ucyB3ZXJlIGluIGZsYXQgSlNPTiBmb3JtYXQgaW5zdGVhZCBvZiBuZXN0ZWQuIEVpdGhlciBzZXQga2V5U2VwYXJhdG9yOiBmYWxzZSBvbiBpbml0IG9yIG1ha2Ugc3VyZSB5b3VyIHRyYW5zbGF0aW9ucyBhcmUgcHVibGlzaGVkIGluIG5lc3RlZCBmb3JtYXQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGxuZ3MgPSBbXTtcbiAgICAgICAgY29uc3QgZmFsbGJhY2tMbmdzID0gdGhpcy5sYW5ndWFnZVV0aWxzLmdldEZhbGxiYWNrQ29kZXModGhpcy5vcHRpb25zLmZhbGxiYWNrTG5nLCBvcHRpb25zLmxuZyB8fCB0aGlzLmxhbmd1YWdlKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zYXZlTWlzc2luZ1RvID09PSAnZmFsbGJhY2snICYmIGZhbGxiYWNrTG5ncyAmJiBmYWxsYmFja0xuZ3NbMF0pIHtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZhbGxiYWNrTG5ncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbG5ncy5wdXNoKGZhbGxiYWNrTG5nc1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5zYXZlTWlzc2luZ1RvID09PSAnYWxsJykge1xuICAgICAgICAgIGxuZ3MgPSB0aGlzLmxhbmd1YWdlVXRpbHMudG9SZXNvbHZlSGllcmFyY2h5KG9wdGlvbnMubG5nIHx8IHRoaXMubGFuZ3VhZ2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxuZ3MucHVzaChvcHRpb25zLmxuZyB8fCB0aGlzLmxhbmd1YWdlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzZW5kID0gKGwsIGssIHNwZWNpZmljRGVmYXVsdFZhbHVlKSA9PiB7XG4gICAgICAgICAgY29uc3QgZGVmYXVsdEZvck1pc3NpbmcgPSBoYXNEZWZhdWx0VmFsdWUgJiYgc3BlY2lmaWNEZWZhdWx0VmFsdWUgIT09IHJlcyA/IHNwZWNpZmljRGVmYXVsdFZhbHVlIDogcmVzRm9yTWlzc2luZztcbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLm1pc3NpbmdLZXlIYW5kbGVyKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMubWlzc2luZ0tleUhhbmRsZXIobCwgbmFtZXNwYWNlLCBrLCBkZWZhdWx0Rm9yTWlzc2luZywgdXBkYXRlTWlzc2luZywgb3B0aW9ucyk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmJhY2tlbmRDb25uZWN0b3IgJiYgdGhpcy5iYWNrZW5kQ29ubmVjdG9yLnNhdmVNaXNzaW5nKSB7XG4gICAgICAgICAgICB0aGlzLmJhY2tlbmRDb25uZWN0b3Iuc2F2ZU1pc3NpbmcobCwgbmFtZXNwYWNlLCBrLCBkZWZhdWx0Rm9yTWlzc2luZywgdXBkYXRlTWlzc2luZywgb3B0aW9ucyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuZW1pdCgnbWlzc2luZ0tleScsIGwsIG5hbWVzcGFjZSwgaywgcmVzKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zYXZlTWlzc2luZykge1xuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2F2ZU1pc3NpbmdQbHVyYWxzICYmIG5lZWRzUGx1cmFsSGFuZGxpbmcpIHtcbiAgICAgICAgICAgIGxuZ3MuZm9yRWFjaChsYW5ndWFnZSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMucGx1cmFsUmVzb2x2ZXIuZ2V0U3VmZml4ZXMobGFuZ3VhZ2UsIG9wdGlvbnMpLmZvckVhY2goc3VmZml4ID0+IHtcbiAgICAgICAgICAgICAgICBzZW5kKFtsYW5ndWFnZV0sIGtleSArIHN1ZmZpeCwgb3B0aW9uc1tgZGVmYXVsdFZhbHVlJHtzdWZmaXh9YF0gfHwgZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VuZChsbmdzLCBrZXksIGRlZmF1bHRWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXMgPSB0aGlzLmV4dGVuZFRyYW5zbGF0aW9uKHJlcywga2V5cywgb3B0aW9ucywgcmVzb2x2ZWQsIGxhc3RLZXkpO1xuICAgICAgaWYgKHVzZWRLZXkgJiYgcmVzID09PSBrZXkgJiYgdGhpcy5vcHRpb25zLmFwcGVuZE5hbWVzcGFjZVRvTWlzc2luZ0tleSkgcmVzID0gYCR7bmFtZXNwYWNlfToke2tleX1gO1xuICAgICAgaWYgKCh1c2VkS2V5IHx8IHVzZWREZWZhdWx0KSAmJiB0aGlzLm9wdGlvbnMucGFyc2VNaXNzaW5nS2V5SGFuZGxlcikge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNvbXBhdGliaWxpdHlBUEkgIT09ICd2MScpIHtcbiAgICAgICAgICByZXMgPSB0aGlzLm9wdGlvbnMucGFyc2VNaXNzaW5nS2V5SGFuZGxlcih0aGlzLm9wdGlvbnMuYXBwZW5kTmFtZXNwYWNlVG9NaXNzaW5nS2V5ID8gYCR7bmFtZXNwYWNlfToke2tleX1gIDoga2V5LCB1c2VkRGVmYXVsdCA/IHJlcyA6IHVuZGVmaW5lZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzID0gdGhpcy5vcHRpb25zLnBhcnNlTWlzc2luZ0tleUhhbmRsZXIocmVzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAocmV0dXJuRGV0YWlscykge1xuICAgICAgcmVzb2x2ZWQucmVzID0gcmVzO1xuICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG4gIGV4dGVuZFRyYW5zbGF0aW9uKHJlcywga2V5LCBvcHRpb25zLCByZXNvbHZlZCwgbGFzdEtleSkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgaWYgKHRoaXMuaTE4bkZvcm1hdCAmJiB0aGlzLmkxOG5Gb3JtYXQucGFyc2UpIHtcbiAgICAgIHJlcyA9IHRoaXMuaTE4bkZvcm1hdC5wYXJzZShyZXMsIHtcbiAgICAgICAgLi4udGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uZGVmYXVsdFZhcmlhYmxlcyxcbiAgICAgICAgLi4ub3B0aW9uc1xuICAgICAgfSwgcmVzb2x2ZWQudXNlZExuZywgcmVzb2x2ZWQudXNlZE5TLCByZXNvbHZlZC51c2VkS2V5LCB7XG4gICAgICAgIHJlc29sdmVkXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCFvcHRpb25zLnNraXBJbnRlcnBvbGF0aW9uKSB7XG4gICAgICBpZiAob3B0aW9ucy5pbnRlcnBvbGF0aW9uKSB0aGlzLmludGVycG9sYXRvci5pbml0KHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgLi4ue1xuICAgICAgICAgIGludGVycG9sYXRpb246IHtcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uLFxuICAgICAgICAgICAgLi4ub3B0aW9ucy5pbnRlcnBvbGF0aW9uXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHNraXBPblZhcmlhYmxlcyA9IHR5cGVvZiByZXMgPT09ICdzdHJpbmcnICYmIChvcHRpb25zICYmIG9wdGlvbnMuaW50ZXJwb2xhdGlvbiAmJiBvcHRpb25zLmludGVycG9sYXRpb24uc2tpcE9uVmFyaWFibGVzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmludGVycG9sYXRpb24uc2tpcE9uVmFyaWFibGVzIDogdGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uc2tpcE9uVmFyaWFibGVzKTtcbiAgICAgIGxldCBuZXN0QmVmO1xuICAgICAgaWYgKHNraXBPblZhcmlhYmxlcykge1xuICAgICAgICBjb25zdCBuYiA9IHJlcy5tYXRjaCh0aGlzLmludGVycG9sYXRvci5uZXN0aW5nUmVnZXhwKTtcbiAgICAgICAgbmVzdEJlZiA9IG5iICYmIG5iLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGxldCBkYXRhID0gb3B0aW9ucy5yZXBsYWNlICYmIHR5cGVvZiBvcHRpb25zLnJlcGxhY2UgIT09ICdzdHJpbmcnID8gb3B0aW9ucy5yZXBsYWNlIDogb3B0aW9ucztcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuaW50ZXJwb2xhdGlvbi5kZWZhdWx0VmFyaWFibGVzKSBkYXRhID0ge1xuICAgICAgICAuLi50aGlzLm9wdGlvbnMuaW50ZXJwb2xhdGlvbi5kZWZhdWx0VmFyaWFibGVzLFxuICAgICAgICAuLi5kYXRhXG4gICAgICB9O1xuICAgICAgcmVzID0gdGhpcy5pbnRlcnBvbGF0b3IuaW50ZXJwb2xhdGUocmVzLCBkYXRhLCBvcHRpb25zLmxuZyB8fCB0aGlzLmxhbmd1YWdlLCBvcHRpb25zKTtcbiAgICAgIGlmIChza2lwT25WYXJpYWJsZXMpIHtcbiAgICAgICAgY29uc3QgbmEgPSByZXMubWF0Y2godGhpcy5pbnRlcnBvbGF0b3IubmVzdGluZ1JlZ2V4cCk7XG4gICAgICAgIGNvbnN0IG5lc3RBZnQgPSBuYSAmJiBuYS5sZW5ndGg7XG4gICAgICAgIGlmIChuZXN0QmVmIDwgbmVzdEFmdCkgb3B0aW9ucy5uZXN0ID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoIW9wdGlvbnMubG5nICYmIHRoaXMub3B0aW9ucy5jb21wYXRpYmlsaXR5QVBJICE9PSAndjEnICYmIHJlc29sdmVkICYmIHJlc29sdmVkLnJlcykgb3B0aW9ucy5sbmcgPSByZXNvbHZlZC51c2VkTG5nO1xuICAgICAgaWYgKG9wdGlvbnMubmVzdCAhPT0gZmFsc2UpIHJlcyA9IHRoaXMuaW50ZXJwb2xhdG9yLm5lc3QocmVzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxhc3RLZXkgJiYgbGFzdEtleVswXSA9PT0gYXJnc1swXSAmJiAhb3B0aW9ucy5jb250ZXh0KSB7XG4gICAgICAgICAgX3RoaXMubG9nZ2VyLndhcm4oYEl0IHNlZW1zIHlvdSBhcmUgbmVzdGluZyByZWN1cnNpdmVseSBrZXk6ICR7YXJnc1swXX0gaW4ga2V5OiAke2tleVswXX1gKTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXMudHJhbnNsYXRlKC4uLmFyZ3MsIGtleSk7XG4gICAgICB9LCBvcHRpb25zKTtcbiAgICAgIGlmIChvcHRpb25zLmludGVycG9sYXRpb24pIHRoaXMuaW50ZXJwb2xhdG9yLnJlc2V0KCk7XG4gICAgfVxuICAgIGNvbnN0IHBvc3RQcm9jZXNzID0gb3B0aW9ucy5wb3N0UHJvY2VzcyB8fCB0aGlzLm9wdGlvbnMucG9zdFByb2Nlc3M7XG4gICAgY29uc3QgcG9zdFByb2Nlc3Nvck5hbWVzID0gdHlwZW9mIHBvc3RQcm9jZXNzID09PSAnc3RyaW5nJyA/IFtwb3N0UHJvY2Vzc10gOiBwb3N0UHJvY2VzcztcbiAgICBpZiAocmVzICE9PSB1bmRlZmluZWQgJiYgcmVzICE9PSBudWxsICYmIHBvc3RQcm9jZXNzb3JOYW1lcyAmJiBwb3N0UHJvY2Vzc29yTmFtZXMubGVuZ3RoICYmIG9wdGlvbnMuYXBwbHlQb3N0UHJvY2Vzc29yICE9PSBmYWxzZSkge1xuICAgICAgcmVzID0gcG9zdFByb2Nlc3Nvci5oYW5kbGUocG9zdFByb2Nlc3Nvck5hbWVzLCByZXMsIGtleSwgdGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5wb3N0UHJvY2Vzc1Bhc3NSZXNvbHZlZCA/IHtcbiAgICAgICAgaTE4blJlc29sdmVkOiByZXNvbHZlZCxcbiAgICAgICAgLi4ub3B0aW9uc1xuICAgICAgfSA6IG9wdGlvbnMsIHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG4gIHJlc29sdmUoa2V5cykge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICBsZXQgZm91bmQ7XG4gICAgbGV0IHVzZWRLZXk7XG4gICAgbGV0IGV4YWN0VXNlZEtleTtcbiAgICBsZXQgdXNlZExuZztcbiAgICBsZXQgdXNlZE5TO1xuICAgIGlmICh0eXBlb2Yga2V5cyA9PT0gJ3N0cmluZycpIGtleXMgPSBba2V5c107XG4gICAga2V5cy5mb3JFYWNoKGsgPT4ge1xuICAgICAgaWYgKHRoaXMuaXNWYWxpZExvb2t1cChmb3VuZCkpIHJldHVybjtcbiAgICAgIGNvbnN0IGV4dHJhY3RlZCA9IHRoaXMuZXh0cmFjdEZyb21LZXkoaywgb3B0aW9ucyk7XG4gICAgICBjb25zdCBrZXkgPSBleHRyYWN0ZWQua2V5O1xuICAgICAgdXNlZEtleSA9IGtleTtcbiAgICAgIGxldCBuYW1lc3BhY2VzID0gZXh0cmFjdGVkLm5hbWVzcGFjZXM7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmZhbGxiYWNrTlMpIG5hbWVzcGFjZXMgPSBuYW1lc3BhY2VzLmNvbmNhdCh0aGlzLm9wdGlvbnMuZmFsbGJhY2tOUyk7XG4gICAgICBjb25zdCBuZWVkc1BsdXJhbEhhbmRsaW5nID0gb3B0aW9ucy5jb3VudCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvcHRpb25zLmNvdW50ICE9PSAnc3RyaW5nJztcbiAgICAgIGNvbnN0IG5lZWRzWmVyb1N1ZmZpeExvb2t1cCA9IG5lZWRzUGx1cmFsSGFuZGxpbmcgJiYgIW9wdGlvbnMub3JkaW5hbCAmJiBvcHRpb25zLmNvdW50ID09PSAwICYmIHRoaXMucGx1cmFsUmVzb2x2ZXIuc2hvdWxkVXNlSW50bEFwaSgpO1xuICAgICAgY29uc3QgbmVlZHNDb250ZXh0SGFuZGxpbmcgPSBvcHRpb25zLmNvbnRleHQgIT09IHVuZGVmaW5lZCAmJiAodHlwZW9mIG9wdGlvbnMuY29udGV4dCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG9wdGlvbnMuY29udGV4dCA9PT0gJ251bWJlcicpICYmIG9wdGlvbnMuY29udGV4dCAhPT0gJyc7XG4gICAgICBjb25zdCBjb2RlcyA9IG9wdGlvbnMubG5ncyA/IG9wdGlvbnMubG5ncyA6IHRoaXMubGFuZ3VhZ2VVdGlscy50b1Jlc29sdmVIaWVyYXJjaHkob3B0aW9ucy5sbmcgfHwgdGhpcy5sYW5ndWFnZSwgb3B0aW9ucy5mYWxsYmFja0xuZyk7XG4gICAgICBuYW1lc3BhY2VzLmZvckVhY2gobnMgPT4ge1xuICAgICAgICBpZiAodGhpcy5pc1ZhbGlkTG9va3VwKGZvdW5kKSkgcmV0dXJuO1xuICAgICAgICB1c2VkTlMgPSBucztcbiAgICAgICAgaWYgKCFjaGVja2VkTG9hZGVkRm9yW2Ake2NvZGVzWzBdfS0ke25zfWBdICYmIHRoaXMudXRpbHMgJiYgdGhpcy51dGlscy5oYXNMb2FkZWROYW1lc3BhY2UgJiYgIXRoaXMudXRpbHMuaGFzTG9hZGVkTmFtZXNwYWNlKHVzZWROUykpIHtcbiAgICAgICAgICBjaGVja2VkTG9hZGVkRm9yW2Ake2NvZGVzWzBdfS0ke25zfWBdID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKGBrZXkgXCIke3VzZWRLZXl9XCIgZm9yIGxhbmd1YWdlcyBcIiR7Y29kZXMuam9pbignLCAnKX1cIiB3b24ndCBnZXQgcmVzb2x2ZWQgYXMgbmFtZXNwYWNlIFwiJHt1c2VkTlN9XCIgd2FzIG5vdCB5ZXQgbG9hZGVkYCwgJ1RoaXMgbWVhbnMgc29tZXRoaW5nIElTIFdST05HIGluIHlvdXIgc2V0dXAuIFlvdSBhY2Nlc3MgdGhlIHQgZnVuY3Rpb24gYmVmb3JlIGkxOG5leHQuaW5pdCAvIGkxOG5leHQubG9hZE5hbWVzcGFjZSAvIGkxOG5leHQuY2hhbmdlTGFuZ3VhZ2Ugd2FzIGRvbmUuIFdhaXQgZm9yIHRoZSBjYWxsYmFjayBvciBQcm9taXNlIHRvIHJlc29sdmUgYmVmb3JlIGFjY2Vzc2luZyBpdCEhIScpO1xuICAgICAgICB9XG4gICAgICAgIGNvZGVzLmZvckVhY2goY29kZSA9PiB7XG4gICAgICAgICAgaWYgKHRoaXMuaXNWYWxpZExvb2t1cChmb3VuZCkpIHJldHVybjtcbiAgICAgICAgICB1c2VkTG5nID0gY29kZTtcbiAgICAgICAgICBjb25zdCBmaW5hbEtleXMgPSBba2V5XTtcbiAgICAgICAgICBpZiAodGhpcy5pMThuRm9ybWF0ICYmIHRoaXMuaTE4bkZvcm1hdC5hZGRMb29rdXBLZXlzKSB7XG4gICAgICAgICAgICB0aGlzLmkxOG5Gb3JtYXQuYWRkTG9va3VwS2V5cyhmaW5hbEtleXMsIGtleSwgY29kZSwgbnMsIG9wdGlvbnMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgcGx1cmFsU3VmZml4O1xuICAgICAgICAgICAgaWYgKG5lZWRzUGx1cmFsSGFuZGxpbmcpIHBsdXJhbFN1ZmZpeCA9IHRoaXMucGx1cmFsUmVzb2x2ZXIuZ2V0U3VmZml4KGNvZGUsIG9wdGlvbnMuY291bnQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgemVyb1N1ZmZpeCA9IGAke3RoaXMub3B0aW9ucy5wbHVyYWxTZXBhcmF0b3J9emVyb2A7XG4gICAgICAgICAgICBjb25zdCBvcmRpbmFsUHJlZml4ID0gYCR7dGhpcy5vcHRpb25zLnBsdXJhbFNlcGFyYXRvcn1vcmRpbmFsJHt0aGlzLm9wdGlvbnMucGx1cmFsU2VwYXJhdG9yfWA7XG4gICAgICAgICAgICBpZiAobmVlZHNQbHVyYWxIYW5kbGluZykge1xuICAgICAgICAgICAgICBmaW5hbEtleXMucHVzaChrZXkgKyBwbHVyYWxTdWZmaXgpO1xuICAgICAgICAgICAgICBpZiAob3B0aW9ucy5vcmRpbmFsICYmIHBsdXJhbFN1ZmZpeC5pbmRleE9mKG9yZGluYWxQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZmluYWxLZXlzLnB1c2goa2V5ICsgcGx1cmFsU3VmZml4LnJlcGxhY2Uob3JkaW5hbFByZWZpeCwgdGhpcy5vcHRpb25zLnBsdXJhbFNlcGFyYXRvcikpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChuZWVkc1plcm9TdWZmaXhMb29rdXApIHtcbiAgICAgICAgICAgICAgICBmaW5hbEtleXMucHVzaChrZXkgKyB6ZXJvU3VmZml4KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5lZWRzQ29udGV4dEhhbmRsaW5nKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGNvbnRleHRLZXkgPSBgJHtrZXl9JHt0aGlzLm9wdGlvbnMuY29udGV4dFNlcGFyYXRvcn0ke29wdGlvbnMuY29udGV4dH1gO1xuICAgICAgICAgICAgICBmaW5hbEtleXMucHVzaChjb250ZXh0S2V5KTtcbiAgICAgICAgICAgICAgaWYgKG5lZWRzUGx1cmFsSGFuZGxpbmcpIHtcbiAgICAgICAgICAgICAgICBmaW5hbEtleXMucHVzaChjb250ZXh0S2V5ICsgcGx1cmFsU3VmZml4KTtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5vcmRpbmFsICYmIHBsdXJhbFN1ZmZpeC5pbmRleE9mKG9yZGluYWxQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICBmaW5hbEtleXMucHVzaChjb250ZXh0S2V5ICsgcGx1cmFsU3VmZml4LnJlcGxhY2Uob3JkaW5hbFByZWZpeCwgdGhpcy5vcHRpb25zLnBsdXJhbFNlcGFyYXRvcikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobmVlZHNaZXJvU3VmZml4TG9va3VwKSB7XG4gICAgICAgICAgICAgICAgICBmaW5hbEtleXMucHVzaChjb250ZXh0S2V5ICsgemVyb1N1ZmZpeCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGxldCBwb3NzaWJsZUtleTtcbiAgICAgICAgICB3aGlsZSAocG9zc2libGVLZXkgPSBmaW5hbEtleXMucG9wKCkpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc1ZhbGlkTG9va3VwKGZvdW5kKSkge1xuICAgICAgICAgICAgICBleGFjdFVzZWRLZXkgPSBwb3NzaWJsZUtleTtcbiAgICAgICAgICAgICAgZm91bmQgPSB0aGlzLmdldFJlc291cmNlKGNvZGUsIG5zLCBwb3NzaWJsZUtleSwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICByZXM6IGZvdW5kLFxuICAgICAgdXNlZEtleSxcbiAgICAgIGV4YWN0VXNlZEtleSxcbiAgICAgIHVzZWRMbmcsXG4gICAgICB1c2VkTlNcbiAgICB9O1xuICB9XG4gIGlzVmFsaWRMb29rdXAocmVzKSB7XG4gICAgcmV0dXJuIHJlcyAhPT0gdW5kZWZpbmVkICYmICEoIXRoaXMub3B0aW9ucy5yZXR1cm5OdWxsICYmIHJlcyA9PT0gbnVsbCkgJiYgISghdGhpcy5vcHRpb25zLnJldHVybkVtcHR5U3RyaW5nICYmIHJlcyA9PT0gJycpO1xuICB9XG4gIGdldFJlc291cmNlKGNvZGUsIG5zLCBrZXkpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge307XG4gICAgaWYgKHRoaXMuaTE4bkZvcm1hdCAmJiB0aGlzLmkxOG5Gb3JtYXQuZ2V0UmVzb3VyY2UpIHJldHVybiB0aGlzLmkxOG5Gb3JtYXQuZ2V0UmVzb3VyY2UoY29kZSwgbnMsIGtleSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHRoaXMucmVzb3VyY2VTdG9yZS5nZXRSZXNvdXJjZShjb2RlLCBucywga2V5LCBvcHRpb25zKTtcbiAgfVxuICBzdGF0aWMgaGFzRGVmYXVsdFZhbHVlKG9wdGlvbnMpIHtcbiAgICBjb25zdCBwcmVmaXggPSAnZGVmYXVsdFZhbHVlJztcbiAgICBmb3IgKGNvbnN0IG9wdGlvbiBpbiBvcHRpb25zKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsIG9wdGlvbikgJiYgcHJlZml4ID09PSBvcHRpb24uc3Vic3RyaW5nKDAsIHByZWZpeC5sZW5ndGgpICYmIHVuZGVmaW5lZCAhPT0gb3B0aW9uc1tvcHRpb25dKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbn1cbmNsYXNzIExhbmd1YWdlVXRpbCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuc3VwcG9ydGVkTG5ncyA9IHRoaXMub3B0aW9ucy5zdXBwb3J0ZWRMbmdzIHx8IGZhbHNlO1xuICAgIHRoaXMubG9nZ2VyID0gYmFzZUxvZ2dlci5jcmVhdGUoJ2xhbmd1YWdlVXRpbHMnKTtcbiAgfVxuICBnZXRTY3JpcHRQYXJ0RnJvbUNvZGUoY29kZSkge1xuICAgIGNvZGUgPSBnZXRDbGVhbmVkQ29kZShjb2RlKTtcbiAgICBpZiAoIWNvZGUgfHwgY29kZS5pbmRleE9mKCctJykgPCAwKSByZXR1cm4gbnVsbDtcbiAgICBjb25zdCBwID0gY29kZS5zcGxpdCgnLScpO1xuICAgIGlmIChwLmxlbmd0aCA9PT0gMikgcmV0dXJuIG51bGw7XG4gICAgcC5wb3AoKTtcbiAgICBpZiAocFtwLmxlbmd0aCAtIDFdLnRvTG93ZXJDYXNlKCkgPT09ICd4JykgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHRoaXMuZm9ybWF0TGFuZ3VhZ2VDb2RlKHAuam9pbignLScpKTtcbiAgfVxuICBnZXRMYW5ndWFnZVBhcnRGcm9tQ29kZShjb2RlKSB7XG4gICAgY29kZSA9IGdldENsZWFuZWRDb2RlKGNvZGUpO1xuICAgIGlmICghY29kZSB8fCBjb2RlLmluZGV4T2YoJy0nKSA8IDApIHJldHVybiBjb2RlO1xuICAgIGNvbnN0IHAgPSBjb2RlLnNwbGl0KCctJyk7XG4gICAgcmV0dXJuIHRoaXMuZm9ybWF0TGFuZ3VhZ2VDb2RlKHBbMF0pO1xuICB9XG4gIGZvcm1hdExhbmd1YWdlQ29kZShjb2RlKSB7XG4gICAgaWYgKHR5cGVvZiBjb2RlID09PSAnc3RyaW5nJyAmJiBjb2RlLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgICBjb25zdCBzcGVjaWFsQ2FzZXMgPSBbJ2hhbnMnLCAnaGFudCcsICdsYXRuJywgJ2N5cmwnLCAnY2FucycsICdtb25nJywgJ2FyYWInXTtcbiAgICAgIGxldCBwID0gY29kZS5zcGxpdCgnLScpO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5sb3dlckNhc2VMbmcpIHtcbiAgICAgICAgcCA9IHAubWFwKHBhcnQgPT4gcGFydC50b0xvd2VyQ2FzZSgpKTtcbiAgICAgIH0gZWxzZSBpZiAocC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgcFswXSA9IHBbMF0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcFsxXSA9IHBbMV0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgaWYgKHNwZWNpYWxDYXNlcy5pbmRleE9mKHBbMV0udG9Mb3dlckNhc2UoKSkgPiAtMSkgcFsxXSA9IGNhcGl0YWxpemUocFsxXS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgIH0gZWxzZSBpZiAocC5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgcFswXSA9IHBbMF0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKHBbMV0ubGVuZ3RoID09PSAyKSBwWzFdID0gcFsxXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICBpZiAocFswXSAhPT0gJ3NnbicgJiYgcFsyXS5sZW5ndGggPT09IDIpIHBbMl0gPSBwWzJdLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIGlmIChzcGVjaWFsQ2FzZXMuaW5kZXhPZihwWzFdLnRvTG93ZXJDYXNlKCkpID4gLTEpIHBbMV0gPSBjYXBpdGFsaXplKHBbMV0udG9Mb3dlckNhc2UoKSk7XG4gICAgICAgIGlmIChzcGVjaWFsQ2FzZXMuaW5kZXhPZihwWzJdLnRvTG93ZXJDYXNlKCkpID4gLTEpIHBbMl0gPSBjYXBpdGFsaXplKHBbMl0udG9Mb3dlckNhc2UoKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcC5qb2luKCctJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuY2xlYW5Db2RlIHx8IHRoaXMub3B0aW9ucy5sb3dlckNhc2VMbmcgPyBjb2RlLnRvTG93ZXJDYXNlKCkgOiBjb2RlO1xuICB9XG4gIGlzU3VwcG9ydGVkQ29kZShjb2RlKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5sb2FkID09PSAnbGFuZ3VhZ2VPbmx5JyB8fCB0aGlzLm9wdGlvbnMubm9uRXhwbGljaXRTdXBwb3J0ZWRMbmdzKSB7XG4gICAgICBjb2RlID0gdGhpcy5nZXRMYW5ndWFnZVBhcnRGcm9tQ29kZShjb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuICF0aGlzLnN1cHBvcnRlZExuZ3MgfHwgIXRoaXMuc3VwcG9ydGVkTG5ncy5sZW5ndGggfHwgdGhpcy5zdXBwb3J0ZWRMbmdzLmluZGV4T2YoY29kZSkgPiAtMTtcbiAgfVxuICBnZXRCZXN0TWF0Y2hGcm9tQ29kZXMoY29kZXMpIHtcbiAgICBpZiAoIWNvZGVzKSByZXR1cm4gbnVsbDtcbiAgICBsZXQgZm91bmQ7XG4gICAgY29kZXMuZm9yRWFjaChjb2RlID0+IHtcbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuO1xuICAgICAgY29uc3QgY2xlYW5lZExuZyA9IHRoaXMuZm9ybWF0TGFuZ3VhZ2VDb2RlKGNvZGUpO1xuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuc3VwcG9ydGVkTG5ncyB8fCB0aGlzLmlzU3VwcG9ydGVkQ29kZShjbGVhbmVkTG5nKSkgZm91bmQgPSBjbGVhbmVkTG5nO1xuICAgIH0pO1xuICAgIGlmICghZm91bmQgJiYgdGhpcy5vcHRpb25zLnN1cHBvcnRlZExuZ3MpIHtcbiAgICAgIGNvZGVzLmZvckVhY2goY29kZSA9PiB7XG4gICAgICAgIGlmIChmb3VuZCkgcmV0dXJuO1xuICAgICAgICBjb25zdCBsbmdPbmx5ID0gdGhpcy5nZXRMYW5ndWFnZVBhcnRGcm9tQ29kZShjb2RlKTtcbiAgICAgICAgaWYgKHRoaXMuaXNTdXBwb3J0ZWRDb2RlKGxuZ09ubHkpKSByZXR1cm4gZm91bmQgPSBsbmdPbmx5O1xuICAgICAgICBmb3VuZCA9IHRoaXMub3B0aW9ucy5zdXBwb3J0ZWRMbmdzLmZpbmQoc3VwcG9ydGVkTG5nID0+IHtcbiAgICAgICAgICBpZiAoc3VwcG9ydGVkTG5nID09PSBsbmdPbmx5KSByZXR1cm4gc3VwcG9ydGVkTG5nO1xuICAgICAgICAgIGlmIChzdXBwb3J0ZWRMbmcuaW5kZXhPZignLScpIDwgMCAmJiBsbmdPbmx5LmluZGV4T2YoJy0nKSA8IDApIHJldHVybjtcbiAgICAgICAgICBpZiAoc3VwcG9ydGVkTG5nLmluZGV4T2YobG5nT25seSkgPT09IDApIHJldHVybiBzdXBwb3J0ZWRMbmc7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICghZm91bmQpIGZvdW5kID0gdGhpcy5nZXRGYWxsYmFja0NvZGVzKHRoaXMub3B0aW9ucy5mYWxsYmFja0xuZylbMF07XG4gICAgcmV0dXJuIGZvdW5kO1xuICB9XG4gIGdldEZhbGxiYWNrQ29kZXMoZmFsbGJhY2tzLCBjb2RlKSB7XG4gICAgaWYgKCFmYWxsYmFja3MpIHJldHVybiBbXTtcbiAgICBpZiAodHlwZW9mIGZhbGxiYWNrcyA9PT0gJ2Z1bmN0aW9uJykgZmFsbGJhY2tzID0gZmFsbGJhY2tzKGNvZGUpO1xuICAgIGlmICh0eXBlb2YgZmFsbGJhY2tzID09PSAnc3RyaW5nJykgZmFsbGJhY2tzID0gW2ZhbGxiYWNrc107XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuYXBwbHkoZmFsbGJhY2tzKSA9PT0gJ1tvYmplY3QgQXJyYXldJykgcmV0dXJuIGZhbGxiYWNrcztcbiAgICBpZiAoIWNvZGUpIHJldHVybiBmYWxsYmFja3MuZGVmYXVsdCB8fCBbXTtcbiAgICBsZXQgZm91bmQgPSBmYWxsYmFja3NbY29kZV07XG4gICAgaWYgKCFmb3VuZCkgZm91bmQgPSBmYWxsYmFja3NbdGhpcy5nZXRTY3JpcHRQYXJ0RnJvbUNvZGUoY29kZSldO1xuICAgIGlmICghZm91bmQpIGZvdW5kID0gZmFsbGJhY2tzW3RoaXMuZm9ybWF0TGFuZ3VhZ2VDb2RlKGNvZGUpXTtcbiAgICBpZiAoIWZvdW5kKSBmb3VuZCA9IGZhbGxiYWNrc1t0aGlzLmdldExhbmd1YWdlUGFydEZyb21Db2RlKGNvZGUpXTtcbiAgICBpZiAoIWZvdW5kKSBmb3VuZCA9IGZhbGxiYWNrcy5kZWZhdWx0O1xuICAgIHJldHVybiBmb3VuZCB8fCBbXTtcbiAgfVxuICB0b1Jlc29sdmVIaWVyYXJjaHkoY29kZSwgZmFsbGJhY2tDb2RlKSB7XG4gICAgY29uc3QgZmFsbGJhY2tDb2RlcyA9IHRoaXMuZ2V0RmFsbGJhY2tDb2RlcyhmYWxsYmFja0NvZGUgfHwgdGhpcy5vcHRpb25zLmZhbGxiYWNrTG5nIHx8IFtdLCBjb2RlKTtcbiAgICBjb25zdCBjb2RlcyA9IFtdO1xuICAgIGNvbnN0IGFkZENvZGUgPSBjID0+IHtcbiAgICAgIGlmICghYykgcmV0dXJuO1xuICAgICAgaWYgKHRoaXMuaXNTdXBwb3J0ZWRDb2RlKGMpKSB7XG4gICAgICAgIGNvZGVzLnB1c2goYyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmxvZ2dlci53YXJuKGByZWplY3RpbmcgbGFuZ3VhZ2UgY29kZSBub3QgZm91bmQgaW4gc3VwcG9ydGVkTG5nczogJHtjfWApO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKHR5cGVvZiBjb2RlID09PSAnc3RyaW5nJyAmJiAoY29kZS5pbmRleE9mKCctJykgPiAtMSB8fCBjb2RlLmluZGV4T2YoJ18nKSA+IC0xKSkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5sb2FkICE9PSAnbGFuZ3VhZ2VPbmx5JykgYWRkQ29kZSh0aGlzLmZvcm1hdExhbmd1YWdlQ29kZShjb2RlKSk7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmxvYWQgIT09ICdsYW5ndWFnZU9ubHknICYmIHRoaXMub3B0aW9ucy5sb2FkICE9PSAnY3VycmVudE9ubHknKSBhZGRDb2RlKHRoaXMuZ2V0U2NyaXB0UGFydEZyb21Db2RlKGNvZGUpKTtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubG9hZCAhPT0gJ2N1cnJlbnRPbmx5JykgYWRkQ29kZSh0aGlzLmdldExhbmd1YWdlUGFydEZyb21Db2RlKGNvZGUpKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb2RlID09PSAnc3RyaW5nJykge1xuICAgICAgYWRkQ29kZSh0aGlzLmZvcm1hdExhbmd1YWdlQ29kZShjb2RlKSk7XG4gICAgfVxuICAgIGZhbGxiYWNrQ29kZXMuZm9yRWFjaChmYyA9PiB7XG4gICAgICBpZiAoY29kZXMuaW5kZXhPZihmYykgPCAwKSBhZGRDb2RlKHRoaXMuZm9ybWF0TGFuZ3VhZ2VDb2RlKGZjKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvZGVzO1xuICB9XG59XG5cbmxldCBzZXRzID0gW3tcbiAgbG5nczogWydhY2gnLCAnYWsnLCAnYW0nLCAnYXJuJywgJ2JyJywgJ2ZpbCcsICdndW4nLCAnbG4nLCAnbWZlJywgJ21nJywgJ21pJywgJ29jJywgJ3B0JywgJ3B0LUJSJywgJ3RnJywgJ3RsJywgJ3RpJywgJ3RyJywgJ3V6JywgJ3dhJ10sXG4gIG5yOiBbMSwgMl0sXG4gIGZjOiAxXG59LCB7XG4gIGxuZ3M6IFsnYWYnLCAnYW4nLCAnYXN0JywgJ2F6JywgJ2JnJywgJ2JuJywgJ2NhJywgJ2RhJywgJ2RlJywgJ2RldicsICdlbCcsICdlbicsICdlbycsICdlcycsICdldCcsICdldScsICdmaScsICdmbycsICdmdXInLCAnZnknLCAnZ2wnLCAnZ3UnLCAnaGEnLCAnaGknLCAnaHUnLCAnaHknLCAnaWEnLCAnaXQnLCAna2snLCAna24nLCAna3UnLCAnbGInLCAnbWFpJywgJ21sJywgJ21uJywgJ21yJywgJ25haCcsICduYXAnLCAnbmInLCAnbmUnLCAnbmwnLCAnbm4nLCAnbm8nLCAnbnNvJywgJ3BhJywgJ3BhcCcsICdwbXMnLCAncHMnLCAncHQtUFQnLCAncm0nLCAnc2NvJywgJ3NlJywgJ3NpJywgJ3NvJywgJ3NvbicsICdzcScsICdzdicsICdzdycsICd0YScsICd0ZScsICd0aycsICd1cicsICd5byddLFxuICBucjogWzEsIDJdLFxuICBmYzogMlxufSwge1xuICBsbmdzOiBbJ2F5JywgJ2JvJywgJ2NnZycsICdmYScsICdodCcsICdpZCcsICdqYScsICdqYm8nLCAna2EnLCAna20nLCAna28nLCAna3knLCAnbG8nLCAnbXMnLCAnc2FoJywgJ3N1JywgJ3RoJywgJ3R0JywgJ3VnJywgJ3ZpJywgJ3dvJywgJ3poJ10sXG4gIG5yOiBbMV0sXG4gIGZjOiAzXG59LCB7XG4gIGxuZ3M6IFsnYmUnLCAnYnMnLCAnY25yJywgJ2R6JywgJ2hyJywgJ3J1JywgJ3NyJywgJ3VrJ10sXG4gIG5yOiBbMSwgMiwgNV0sXG4gIGZjOiA0XG59LCB7XG4gIGxuZ3M6IFsnYXInXSxcbiAgbnI6IFswLCAxLCAyLCAzLCAxMSwgMTAwXSxcbiAgZmM6IDVcbn0sIHtcbiAgbG5nczogWydjcycsICdzayddLFxuICBucjogWzEsIDIsIDVdLFxuICBmYzogNlxufSwge1xuICBsbmdzOiBbJ2NzYicsICdwbCddLFxuICBucjogWzEsIDIsIDVdLFxuICBmYzogN1xufSwge1xuICBsbmdzOiBbJ2N5J10sXG4gIG5yOiBbMSwgMiwgMywgOF0sXG4gIGZjOiA4XG59LCB7XG4gIGxuZ3M6IFsnZnInXSxcbiAgbnI6IFsxLCAyXSxcbiAgZmM6IDlcbn0sIHtcbiAgbG5nczogWydnYSddLFxuICBucjogWzEsIDIsIDMsIDcsIDExXSxcbiAgZmM6IDEwXG59LCB7XG4gIGxuZ3M6IFsnZ2QnXSxcbiAgbnI6IFsxLCAyLCAzLCAyMF0sXG4gIGZjOiAxMVxufSwge1xuICBsbmdzOiBbJ2lzJ10sXG4gIG5yOiBbMSwgMl0sXG4gIGZjOiAxMlxufSwge1xuICBsbmdzOiBbJ2p2J10sXG4gIG5yOiBbMCwgMV0sXG4gIGZjOiAxM1xufSwge1xuICBsbmdzOiBbJ2t3J10sXG4gIG5yOiBbMSwgMiwgMywgNF0sXG4gIGZjOiAxNFxufSwge1xuICBsbmdzOiBbJ2x0J10sXG4gIG5yOiBbMSwgMiwgMTBdLFxuICBmYzogMTVcbn0sIHtcbiAgbG5nczogWydsdiddLFxuICBucjogWzEsIDIsIDBdLFxuICBmYzogMTZcbn0sIHtcbiAgbG5nczogWydtayddLFxuICBucjogWzEsIDJdLFxuICBmYzogMTdcbn0sIHtcbiAgbG5nczogWydtbmsnXSxcbiAgbnI6IFswLCAxLCAyXSxcbiAgZmM6IDE4XG59LCB7XG4gIGxuZ3M6IFsnbXQnXSxcbiAgbnI6IFsxLCAyLCAxMSwgMjBdLFxuICBmYzogMTlcbn0sIHtcbiAgbG5nczogWydvciddLFxuICBucjogWzIsIDFdLFxuICBmYzogMlxufSwge1xuICBsbmdzOiBbJ3JvJ10sXG4gIG5yOiBbMSwgMiwgMjBdLFxuICBmYzogMjBcbn0sIHtcbiAgbG5nczogWydzbCddLFxuICBucjogWzUsIDEsIDIsIDNdLFxuICBmYzogMjFcbn0sIHtcbiAgbG5nczogWydoZScsICdpdyddLFxuICBucjogWzEsIDIsIDIwLCAyMV0sXG4gIGZjOiAyMlxufV07XG5sZXQgX3J1bGVzUGx1cmFsc1R5cGVzID0ge1xuICAxOiBmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBOdW1iZXIobiA+IDEpO1xuICB9LFxuICAyOiBmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBOdW1iZXIobiAhPSAxKTtcbiAgfSxcbiAgMzogZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gMDtcbiAgfSxcbiAgNDogZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gJSAxMCA9PSAxICYmIG4gJSAxMDAgIT0gMTEgPyAwIDogbiAlIDEwID49IDIgJiYgbiAlIDEwIDw9IDQgJiYgKG4gJSAxMDAgPCAxMCB8fCBuICUgMTAwID49IDIwKSA/IDEgOiAyKTtcbiAgfSxcbiAgNTogZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gPT0gMCA/IDAgOiBuID09IDEgPyAxIDogbiA9PSAyID8gMiA6IG4gJSAxMDAgPj0gMyAmJiBuICUgMTAwIDw9IDEwID8gMyA6IG4gJSAxMDAgPj0gMTEgPyA0IDogNSk7XG4gIH0sXG4gIDY6IGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuID09IDEgPyAwIDogbiA+PSAyICYmIG4gPD0gNCA/IDEgOiAyKTtcbiAgfSxcbiAgNzogZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gPT0gMSA/IDAgOiBuICUgMTAgPj0gMiAmJiBuICUgMTAgPD0gNCAmJiAobiAlIDEwMCA8IDEwIHx8IG4gJSAxMDAgPj0gMjApID8gMSA6IDIpO1xuICB9LFxuICA4OiBmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAxID8gMCA6IG4gPT0gMiA/IDEgOiBuICE9IDggJiYgbiAhPSAxMSA/IDIgOiAzKTtcbiAgfSxcbiAgOTogZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gPj0gMik7XG4gIH0sXG4gIDEwOiBmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAxID8gMCA6IG4gPT0gMiA/IDEgOiBuIDwgNyA/IDIgOiBuIDwgMTEgPyAzIDogNCk7XG4gIH0sXG4gIDExOiBmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAxIHx8IG4gPT0gMTEgPyAwIDogbiA9PSAyIHx8IG4gPT0gMTIgPyAxIDogbiA+IDIgJiYgbiA8IDIwID8gMiA6IDMpO1xuICB9LFxuICAxMjogZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gJSAxMCAhPSAxIHx8IG4gJSAxMDAgPT0gMTEpO1xuICB9LFxuICAxMzogZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gIT09IDApO1xuICB9LFxuICAxNDogZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gPT0gMSA/IDAgOiBuID09IDIgPyAxIDogbiA9PSAzID8gMiA6IDMpO1xuICB9LFxuICAxNTogZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gJSAxMCA9PSAxICYmIG4gJSAxMDAgIT0gMTEgPyAwIDogbiAlIDEwID49IDIgJiYgKG4gJSAxMDAgPCAxMCB8fCBuICUgMTAwID49IDIwKSA/IDEgOiAyKTtcbiAgfSxcbiAgMTY6IGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuICUgMTAgPT0gMSAmJiBuICUgMTAwICE9IDExID8gMCA6IG4gIT09IDAgPyAxIDogMik7XG4gIH0sXG4gIDE3OiBmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAxIHx8IG4gJSAxMCA9PSAxICYmIG4gJSAxMDAgIT0gMTEgPyAwIDogMSk7XG4gIH0sXG4gIDE4OiBmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAwID8gMCA6IG4gPT0gMSA/IDEgOiAyKTtcbiAgfSxcbiAgMTk6IGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuID09IDEgPyAwIDogbiA9PSAwIHx8IG4gJSAxMDAgPiAxICYmIG4gJSAxMDAgPCAxMSA/IDEgOiBuICUgMTAwID4gMTAgJiYgbiAlIDEwMCA8IDIwID8gMiA6IDMpO1xuICB9LFxuICAyMDogZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gPT0gMSA/IDAgOiBuID09IDAgfHwgbiAlIDEwMCA+IDAgJiYgbiAlIDEwMCA8IDIwID8gMSA6IDIpO1xuICB9LFxuICAyMTogZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gJSAxMDAgPT0gMSA/IDEgOiBuICUgMTAwID09IDIgPyAyIDogbiAlIDEwMCA9PSAzIHx8IG4gJSAxMDAgPT0gNCA/IDMgOiAwKTtcbiAgfSxcbiAgMjI6IGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuID09IDEgPyAwIDogbiA9PSAyID8gMSA6IChuIDwgMCB8fCBuID4gMTApICYmIG4gJSAxMCA9PSAwID8gMiA6IDMpO1xuICB9XG59O1xuY29uc3Qgbm9uSW50bFZlcnNpb25zID0gWyd2MScsICd2MicsICd2MyddO1xuY29uc3QgaW50bFZlcnNpb25zID0gWyd2NCddO1xuY29uc3Qgc3VmZml4ZXNPcmRlciA9IHtcbiAgemVybzogMCxcbiAgb25lOiAxLFxuICB0d286IDIsXG4gIGZldzogMyxcbiAgbWFueTogNCxcbiAgb3RoZXI6IDVcbn07XG5mdW5jdGlvbiBjcmVhdGVSdWxlcygpIHtcbiAgY29uc3QgcnVsZXMgPSB7fTtcbiAgc2V0cy5mb3JFYWNoKHNldCA9PiB7XG4gICAgc2V0LmxuZ3MuZm9yRWFjaChsID0+IHtcbiAgICAgIHJ1bGVzW2xdID0ge1xuICAgICAgICBudW1iZXJzOiBzZXQubnIsXG4gICAgICAgIHBsdXJhbHM6IF9ydWxlc1BsdXJhbHNUeXBlc1tzZXQuZmNdXG4gICAgICB9O1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIHJ1bGVzO1xufVxuY2xhc3MgUGx1cmFsUmVzb2x2ZXIge1xuICBjb25zdHJ1Y3RvcihsYW5ndWFnZVV0aWxzKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHRoaXMubGFuZ3VhZ2VVdGlscyA9IGxhbmd1YWdlVXRpbHM7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmxvZ2dlciA9IGJhc2VMb2dnZXIuY3JlYXRlKCdwbHVyYWxSZXNvbHZlcicpO1xuICAgIGlmICgoIXRoaXMub3B0aW9ucy5jb21wYXRpYmlsaXR5SlNPTiB8fCBpbnRsVmVyc2lvbnMuaW5jbHVkZXModGhpcy5vcHRpb25zLmNvbXBhdGliaWxpdHlKU09OKSkgJiYgKHR5cGVvZiBJbnRsID09PSAndW5kZWZpbmVkJyB8fCAhSW50bC5QbHVyYWxSdWxlcykpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5jb21wYXRpYmlsaXR5SlNPTiA9ICd2Myc7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcignWW91ciBlbnZpcm9ubWVudCBzZWVtcyBub3QgdG8gYmUgSW50bCBBUEkgY29tcGF0aWJsZSwgdXNlIGFuIEludGwuUGx1cmFsUnVsZXMgcG9seWZpbGwuIFdpbGwgZmFsbGJhY2sgdG8gdGhlIGNvbXBhdGliaWxpdHlKU09OIHYzIGZvcm1hdCBoYW5kbGluZy4nKTtcbiAgICB9XG4gICAgdGhpcy5ydWxlcyA9IGNyZWF0ZVJ1bGVzKCk7XG4gIH1cbiAgYWRkUnVsZShsbmcsIG9iaikge1xuICAgIHRoaXMucnVsZXNbbG5nXSA9IG9iajtcbiAgfVxuICBnZXRSdWxlKGNvZGUpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgaWYgKHRoaXMuc2hvdWxkVXNlSW50bEFwaSgpKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gbmV3IEludGwuUGx1cmFsUnVsZXMoZ2V0Q2xlYW5lZENvZGUoY29kZSksIHtcbiAgICAgICAgICB0eXBlOiBvcHRpb25zLm9yZGluYWwgPyAnb3JkaW5hbCcgOiAnY2FyZGluYWwnXG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucnVsZXNbY29kZV0gfHwgdGhpcy5ydWxlc1t0aGlzLmxhbmd1YWdlVXRpbHMuZ2V0TGFuZ3VhZ2VQYXJ0RnJvbUNvZGUoY29kZSldO1xuICB9XG4gIG5lZWRzUGx1cmFsKGNvZGUpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgY29uc3QgcnVsZSA9IHRoaXMuZ2V0UnVsZShjb2RlLCBvcHRpb25zKTtcbiAgICBpZiAodGhpcy5zaG91bGRVc2VJbnRsQXBpKCkpIHtcbiAgICAgIHJldHVybiBydWxlICYmIHJ1bGUucmVzb2x2ZWRPcHRpb25zKCkucGx1cmFsQ2F0ZWdvcmllcy5sZW5ndGggPiAxO1xuICAgIH1cbiAgICByZXR1cm4gcnVsZSAmJiBydWxlLm51bWJlcnMubGVuZ3RoID4gMTtcbiAgfVxuICBnZXRQbHVyYWxGb3Jtc09mS2V5KGNvZGUsIGtleSkge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICByZXR1cm4gdGhpcy5nZXRTdWZmaXhlcyhjb2RlLCBvcHRpb25zKS5tYXAoc3VmZml4ID0+IGAke2tleX0ke3N1ZmZpeH1gKTtcbiAgfVxuICBnZXRTdWZmaXhlcyhjb2RlKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIGNvbnN0IHJ1bGUgPSB0aGlzLmdldFJ1bGUoY29kZSwgb3B0aW9ucyk7XG4gICAgaWYgKCFydWxlKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGlmICh0aGlzLnNob3VsZFVzZUludGxBcGkoKSkge1xuICAgICAgcmV0dXJuIHJ1bGUucmVzb2x2ZWRPcHRpb25zKCkucGx1cmFsQ2F0ZWdvcmllcy5zb3J0KChwbHVyYWxDYXRlZ29yeTEsIHBsdXJhbENhdGVnb3J5MikgPT4gc3VmZml4ZXNPcmRlcltwbHVyYWxDYXRlZ29yeTFdIC0gc3VmZml4ZXNPcmRlcltwbHVyYWxDYXRlZ29yeTJdKS5tYXAocGx1cmFsQ2F0ZWdvcnkgPT4gYCR7dGhpcy5vcHRpb25zLnByZXBlbmR9JHtvcHRpb25zLm9yZGluYWwgPyBgb3JkaW5hbCR7dGhpcy5vcHRpb25zLnByZXBlbmR9YCA6ICcnfSR7cGx1cmFsQ2F0ZWdvcnl9YCk7XG4gICAgfVxuICAgIHJldHVybiBydWxlLm51bWJlcnMubWFwKG51bWJlciA9PiB0aGlzLmdldFN1ZmZpeChjb2RlLCBudW1iZXIsIG9wdGlvbnMpKTtcbiAgfVxuICBnZXRTdWZmaXgoY29kZSwgY291bnQpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgY29uc3QgcnVsZSA9IHRoaXMuZ2V0UnVsZShjb2RlLCBvcHRpb25zKTtcbiAgICBpZiAocnVsZSkge1xuICAgICAgaWYgKHRoaXMuc2hvdWxkVXNlSW50bEFwaSgpKSB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLm9wdGlvbnMucHJlcGVuZH0ke29wdGlvbnMub3JkaW5hbCA/IGBvcmRpbmFsJHt0aGlzLm9wdGlvbnMucHJlcGVuZH1gIDogJyd9JHtydWxlLnNlbGVjdChjb3VudCl9YDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmdldFN1ZmZpeFJldHJvQ29tcGF0aWJsZShydWxlLCBjb3VudCk7XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyLndhcm4oYG5vIHBsdXJhbCBydWxlIGZvdW5kIGZvcjogJHtjb2RlfWApO1xuICAgIHJldHVybiAnJztcbiAgfVxuICBnZXRTdWZmaXhSZXRyb0NvbXBhdGlibGUocnVsZSwgY291bnQpIHtcbiAgICBjb25zdCBpZHggPSBydWxlLm5vQWJzID8gcnVsZS5wbHVyYWxzKGNvdW50KSA6IHJ1bGUucGx1cmFscyhNYXRoLmFicyhjb3VudCkpO1xuICAgIGxldCBzdWZmaXggPSBydWxlLm51bWJlcnNbaWR4XTtcbiAgICBpZiAodGhpcy5vcHRpb25zLnNpbXBsaWZ5UGx1cmFsU3VmZml4ICYmIHJ1bGUubnVtYmVycy5sZW5ndGggPT09IDIgJiYgcnVsZS5udW1iZXJzWzBdID09PSAxKSB7XG4gICAgICBpZiAoc3VmZml4ID09PSAyKSB7XG4gICAgICAgIHN1ZmZpeCA9ICdwbHVyYWwnO1xuICAgICAgfSBlbHNlIGlmIChzdWZmaXggPT09IDEpIHtcbiAgICAgICAgc3VmZml4ID0gJyc7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHJldHVyblN1ZmZpeCA9ICgpID0+IHRoaXMub3B0aW9ucy5wcmVwZW5kICYmIHN1ZmZpeC50b1N0cmluZygpID8gdGhpcy5vcHRpb25zLnByZXBlbmQgKyBzdWZmaXgudG9TdHJpbmcoKSA6IHN1ZmZpeC50b1N0cmluZygpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuY29tcGF0aWJpbGl0eUpTT04gPT09ICd2MScpIHtcbiAgICAgIGlmIChzdWZmaXggPT09IDEpIHJldHVybiAnJztcbiAgICAgIGlmICh0eXBlb2Ygc3VmZml4ID09PSAnbnVtYmVyJykgcmV0dXJuIGBfcGx1cmFsXyR7c3VmZml4LnRvU3RyaW5nKCl9YDtcbiAgICAgIHJldHVybiByZXR1cm5TdWZmaXgoKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5jb21wYXRpYmlsaXR5SlNPTiA9PT0gJ3YyJykge1xuICAgICAgcmV0dXJuIHJldHVyblN1ZmZpeCgpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLnNpbXBsaWZ5UGx1cmFsU3VmZml4ICYmIHJ1bGUubnVtYmVycy5sZW5ndGggPT09IDIgJiYgcnVsZS5udW1iZXJzWzBdID09PSAxKSB7XG4gICAgICByZXR1cm4gcmV0dXJuU3VmZml4KCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLm9wdGlvbnMucHJlcGVuZCAmJiBpZHgudG9TdHJpbmcoKSA/IHRoaXMub3B0aW9ucy5wcmVwZW5kICsgaWR4LnRvU3RyaW5nKCkgOiBpZHgudG9TdHJpbmcoKTtcbiAgfVxuICBzaG91bGRVc2VJbnRsQXBpKCkge1xuICAgIHJldHVybiAhbm9uSW50bFZlcnNpb25zLmluY2x1ZGVzKHRoaXMub3B0aW9ucy5jb21wYXRpYmlsaXR5SlNPTik7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVlcEZpbmRXaXRoRGVmYXVsdHMoZGF0YSwgZGVmYXVsdERhdGEsIGtleSkge1xuICBsZXQga2V5U2VwYXJhdG9yID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiAnLic7XG4gIGxldCBpZ25vcmVKU09OU3RydWN0dXJlID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiB0cnVlO1xuICBsZXQgcGF0aCA9IGdldFBhdGhXaXRoRGVmYXVsdHMoZGF0YSwgZGVmYXVsdERhdGEsIGtleSk7XG4gIGlmICghcGF0aCAmJiBpZ25vcmVKU09OU3RydWN0dXJlICYmIHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XG4gICAgcGF0aCA9IGRlZXBGaW5kKGRhdGEsIGtleSwga2V5U2VwYXJhdG9yKTtcbiAgICBpZiAocGF0aCA9PT0gdW5kZWZpbmVkKSBwYXRoID0gZGVlcEZpbmQoZGVmYXVsdERhdGEsIGtleSwga2V5U2VwYXJhdG9yKTtcbiAgfVxuICByZXR1cm4gcGF0aDtcbn1cbmNsYXNzIEludGVycG9sYXRvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB0aGlzLmxvZ2dlciA9IGJhc2VMb2dnZXIuY3JlYXRlKCdpbnRlcnBvbGF0b3InKTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuZm9ybWF0ID0gb3B0aW9ucy5pbnRlcnBvbGF0aW9uICYmIG9wdGlvbnMuaW50ZXJwb2xhdGlvbi5mb3JtYXQgfHwgKHZhbHVlID0+IHZhbHVlKTtcbiAgICB0aGlzLmluaXQob3B0aW9ucyk7XG4gIH1cbiAgaW5pdCgpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgaWYgKCFvcHRpb25zLmludGVycG9sYXRpb24pIG9wdGlvbnMuaW50ZXJwb2xhdGlvbiA9IHtcbiAgICAgIGVzY2FwZVZhbHVlOiB0cnVlXG4gICAgfTtcbiAgICBjb25zdCBpT3B0cyA9IG9wdGlvbnMuaW50ZXJwb2xhdGlvbjtcbiAgICB0aGlzLmVzY2FwZSA9IGlPcHRzLmVzY2FwZSAhPT0gdW5kZWZpbmVkID8gaU9wdHMuZXNjYXBlIDogZXNjYXBlO1xuICAgIHRoaXMuZXNjYXBlVmFsdWUgPSBpT3B0cy5lc2NhcGVWYWx1ZSAhPT0gdW5kZWZpbmVkID8gaU9wdHMuZXNjYXBlVmFsdWUgOiB0cnVlO1xuICAgIHRoaXMudXNlUmF3VmFsdWVUb0VzY2FwZSA9IGlPcHRzLnVzZVJhd1ZhbHVlVG9Fc2NhcGUgIT09IHVuZGVmaW5lZCA/IGlPcHRzLnVzZVJhd1ZhbHVlVG9Fc2NhcGUgOiBmYWxzZTtcbiAgICB0aGlzLnByZWZpeCA9IGlPcHRzLnByZWZpeCA/IHJlZ2V4RXNjYXBlKGlPcHRzLnByZWZpeCkgOiBpT3B0cy5wcmVmaXhFc2NhcGVkIHx8ICd7eyc7XG4gICAgdGhpcy5zdWZmaXggPSBpT3B0cy5zdWZmaXggPyByZWdleEVzY2FwZShpT3B0cy5zdWZmaXgpIDogaU9wdHMuc3VmZml4RXNjYXBlZCB8fCAnfX0nO1xuICAgIHRoaXMuZm9ybWF0U2VwYXJhdG9yID0gaU9wdHMuZm9ybWF0U2VwYXJhdG9yID8gaU9wdHMuZm9ybWF0U2VwYXJhdG9yIDogaU9wdHMuZm9ybWF0U2VwYXJhdG9yIHx8ICcsJztcbiAgICB0aGlzLnVuZXNjYXBlUHJlZml4ID0gaU9wdHMudW5lc2NhcGVTdWZmaXggPyAnJyA6IGlPcHRzLnVuZXNjYXBlUHJlZml4IHx8ICctJztcbiAgICB0aGlzLnVuZXNjYXBlU3VmZml4ID0gdGhpcy51bmVzY2FwZVByZWZpeCA/ICcnIDogaU9wdHMudW5lc2NhcGVTdWZmaXggfHwgJyc7XG4gICAgdGhpcy5uZXN0aW5nUHJlZml4ID0gaU9wdHMubmVzdGluZ1ByZWZpeCA/IHJlZ2V4RXNjYXBlKGlPcHRzLm5lc3RpbmdQcmVmaXgpIDogaU9wdHMubmVzdGluZ1ByZWZpeEVzY2FwZWQgfHwgcmVnZXhFc2NhcGUoJyR0KCcpO1xuICAgIHRoaXMubmVzdGluZ1N1ZmZpeCA9IGlPcHRzLm5lc3RpbmdTdWZmaXggPyByZWdleEVzY2FwZShpT3B0cy5uZXN0aW5nU3VmZml4KSA6IGlPcHRzLm5lc3RpbmdTdWZmaXhFc2NhcGVkIHx8IHJlZ2V4RXNjYXBlKCcpJyk7XG4gICAgdGhpcy5uZXN0aW5nT3B0aW9uc1NlcGFyYXRvciA9IGlPcHRzLm5lc3RpbmdPcHRpb25zU2VwYXJhdG9yID8gaU9wdHMubmVzdGluZ09wdGlvbnNTZXBhcmF0b3IgOiBpT3B0cy5uZXN0aW5nT3B0aW9uc1NlcGFyYXRvciB8fCAnLCc7XG4gICAgdGhpcy5tYXhSZXBsYWNlcyA9IGlPcHRzLm1heFJlcGxhY2VzID8gaU9wdHMubWF4UmVwbGFjZXMgOiAxMDAwO1xuICAgIHRoaXMuYWx3YXlzRm9ybWF0ID0gaU9wdHMuYWx3YXlzRm9ybWF0ICE9PSB1bmRlZmluZWQgPyBpT3B0cy5hbHdheXNGb3JtYXQgOiBmYWxzZTtcbiAgICB0aGlzLnJlc2V0UmVnRXhwKCk7XG4gIH1cbiAgcmVzZXQoKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucykgdGhpcy5pbml0KHRoaXMub3B0aW9ucyk7XG4gIH1cbiAgcmVzZXRSZWdFeHAoKSB7XG4gICAgY29uc3QgcmVnZXhwU3RyID0gYCR7dGhpcy5wcmVmaXh9KC4rPykke3RoaXMuc3VmZml4fWA7XG4gICAgdGhpcy5yZWdleHAgPSBuZXcgUmVnRXhwKHJlZ2V4cFN0ciwgJ2cnKTtcbiAgICBjb25zdCByZWdleHBVbmVzY2FwZVN0ciA9IGAke3RoaXMucHJlZml4fSR7dGhpcy51bmVzY2FwZVByZWZpeH0oLis/KSR7dGhpcy51bmVzY2FwZVN1ZmZpeH0ke3RoaXMuc3VmZml4fWA7XG4gICAgdGhpcy5yZWdleHBVbmVzY2FwZSA9IG5ldyBSZWdFeHAocmVnZXhwVW5lc2NhcGVTdHIsICdnJyk7XG4gICAgY29uc3QgbmVzdGluZ1JlZ2V4cFN0ciA9IGAke3RoaXMubmVzdGluZ1ByZWZpeH0oLis/KSR7dGhpcy5uZXN0aW5nU3VmZml4fWA7XG4gICAgdGhpcy5uZXN0aW5nUmVnZXhwID0gbmV3IFJlZ0V4cChuZXN0aW5nUmVnZXhwU3RyLCAnZycpO1xuICB9XG4gIGludGVycG9sYXRlKHN0ciwgZGF0YSwgbG5nLCBvcHRpb25zKSB7XG4gICAgbGV0IG1hdGNoO1xuICAgIGxldCB2YWx1ZTtcbiAgICBsZXQgcmVwbGFjZXM7XG4gICAgY29uc3QgZGVmYXVsdERhdGEgPSB0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLmludGVycG9sYXRpb24gJiYgdGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uZGVmYXVsdFZhcmlhYmxlcyB8fCB7fTtcbiAgICBmdW5jdGlvbiByZWdleFNhZmUodmFsKSB7XG4gICAgICByZXR1cm4gdmFsLnJlcGxhY2UoL1xcJC9nLCAnJCQkJCcpO1xuICAgIH1cbiAgICBjb25zdCBoYW5kbGVGb3JtYXQgPSBrZXkgPT4ge1xuICAgICAgaWYgKGtleS5pbmRleE9mKHRoaXMuZm9ybWF0U2VwYXJhdG9yKSA8IDApIHtcbiAgICAgICAgY29uc3QgcGF0aCA9IGRlZXBGaW5kV2l0aERlZmF1bHRzKGRhdGEsIGRlZmF1bHREYXRhLCBrZXksIHRoaXMub3B0aW9ucy5rZXlTZXBhcmF0b3IsIHRoaXMub3B0aW9ucy5pZ25vcmVKU09OU3RydWN0dXJlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWx3YXlzRm9ybWF0ID8gdGhpcy5mb3JtYXQocGF0aCwgdW5kZWZpbmVkLCBsbmcsIHtcbiAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgIC4uLmRhdGEsXG4gICAgICAgICAgaW50ZXJwb2xhdGlvbmtleToga2V5XG4gICAgICAgIH0pIDogcGF0aDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHAgPSBrZXkuc3BsaXQodGhpcy5mb3JtYXRTZXBhcmF0b3IpO1xuICAgICAgY29uc3QgayA9IHAuc2hpZnQoKS50cmltKCk7XG4gICAgICBjb25zdCBmID0gcC5qb2luKHRoaXMuZm9ybWF0U2VwYXJhdG9yKS50cmltKCk7XG4gICAgICByZXR1cm4gdGhpcy5mb3JtYXQoZGVlcEZpbmRXaXRoRGVmYXVsdHMoZGF0YSwgZGVmYXVsdERhdGEsIGssIHRoaXMub3B0aW9ucy5rZXlTZXBhcmF0b3IsIHRoaXMub3B0aW9ucy5pZ25vcmVKU09OU3RydWN0dXJlKSwgZiwgbG5nLCB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIC4uLmRhdGEsXG4gICAgICAgIGludGVycG9sYXRpb25rZXk6IGtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgdGhpcy5yZXNldFJlZ0V4cCgpO1xuICAgIGNvbnN0IG1pc3NpbmdJbnRlcnBvbGF0aW9uSGFuZGxlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5taXNzaW5nSW50ZXJwb2xhdGlvbkhhbmRsZXIgfHwgdGhpcy5vcHRpb25zLm1pc3NpbmdJbnRlcnBvbGF0aW9uSGFuZGxlcjtcbiAgICBjb25zdCBza2lwT25WYXJpYWJsZXMgPSBvcHRpb25zICYmIG9wdGlvbnMuaW50ZXJwb2xhdGlvbiAmJiBvcHRpb25zLmludGVycG9sYXRpb24uc2tpcE9uVmFyaWFibGVzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmludGVycG9sYXRpb24uc2tpcE9uVmFyaWFibGVzIDogdGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uc2tpcE9uVmFyaWFibGVzO1xuICAgIGNvbnN0IHRvZG9zID0gW3tcbiAgICAgIHJlZ2V4OiB0aGlzLnJlZ2V4cFVuZXNjYXBlLFxuICAgICAgc2FmZVZhbHVlOiB2YWwgPT4gcmVnZXhTYWZlKHZhbClcbiAgICB9LCB7XG4gICAgICByZWdleDogdGhpcy5yZWdleHAsXG4gICAgICBzYWZlVmFsdWU6IHZhbCA9PiB0aGlzLmVzY2FwZVZhbHVlID8gcmVnZXhTYWZlKHRoaXMuZXNjYXBlKHZhbCkpIDogcmVnZXhTYWZlKHZhbClcbiAgICB9XTtcbiAgICB0b2Rvcy5mb3JFYWNoKHRvZG8gPT4ge1xuICAgICAgcmVwbGFjZXMgPSAwO1xuICAgICAgd2hpbGUgKG1hdGNoID0gdG9kby5yZWdleC5leGVjKHN0cikpIHtcbiAgICAgICAgY29uc3QgbWF0Y2hlZFZhciA9IG1hdGNoWzFdLnRyaW0oKTtcbiAgICAgICAgdmFsdWUgPSBoYW5kbGVGb3JtYXQobWF0Y2hlZFZhcik7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBtaXNzaW5nSW50ZXJwb2xhdGlvbkhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBtaXNzaW5nSW50ZXJwb2xhdGlvbkhhbmRsZXIoc3RyLCBtYXRjaCwgb3B0aW9ucyk7XG4gICAgICAgICAgICB2YWx1ZSA9IHR5cGVvZiB0ZW1wID09PSAnc3RyaW5nJyA/IHRlbXAgOiAnJztcbiAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsIG1hdGNoZWRWYXIpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9ICcnO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc2tpcE9uVmFyaWFibGVzKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IG1hdGNoWzBdO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLndhcm4oYG1pc3NlZCB0byBwYXNzIGluIHZhcmlhYmxlICR7bWF0Y2hlZFZhcn0gZm9yIGludGVycG9sYXRpbmcgJHtzdHJ9YCk7XG4gICAgICAgICAgICB2YWx1ZSA9ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnICYmICF0aGlzLnVzZVJhd1ZhbHVlVG9Fc2NhcGUpIHtcbiAgICAgICAgICB2YWx1ZSA9IG1ha2VTdHJpbmcodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNhZmVWYWx1ZSA9IHRvZG8uc2FmZVZhbHVlKHZhbHVlKTtcbiAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UobWF0Y2hbMF0sIHNhZmVWYWx1ZSk7XG4gICAgICAgIGlmIChza2lwT25WYXJpYWJsZXMpIHtcbiAgICAgICAgICB0b2RvLnJlZ2V4Lmxhc3RJbmRleCArPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgdG9kby5yZWdleC5sYXN0SW5kZXggLT0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRvZG8ucmVnZXgubGFzdEluZGV4ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXBsYWNlcysrO1xuICAgICAgICBpZiAocmVwbGFjZXMgPj0gdGhpcy5tYXhSZXBsYWNlcykge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuICBuZXN0KHN0ciwgZmMpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgbGV0IG1hdGNoO1xuICAgIGxldCB2YWx1ZTtcbiAgICBsZXQgY2xvbmVkT3B0aW9ucztcbiAgICBmdW5jdGlvbiBoYW5kbGVIYXNPcHRpb25zKGtleSwgaW5oZXJpdGVkT3B0aW9ucykge1xuICAgICAgY29uc3Qgc2VwID0gdGhpcy5uZXN0aW5nT3B0aW9uc1NlcGFyYXRvcjtcbiAgICAgIGlmIChrZXkuaW5kZXhPZihzZXApIDwgMCkgcmV0dXJuIGtleTtcbiAgICAgIGNvbnN0IGMgPSBrZXkuc3BsaXQobmV3IFJlZ0V4cChgJHtzZXB9WyBdKntgKSk7XG4gICAgICBsZXQgb3B0aW9uc1N0cmluZyA9IGB7JHtjWzFdfWA7XG4gICAgICBrZXkgPSBjWzBdO1xuICAgICAgb3B0aW9uc1N0cmluZyA9IHRoaXMuaW50ZXJwb2xhdGUob3B0aW9uc1N0cmluZywgY2xvbmVkT3B0aW9ucyk7XG4gICAgICBjb25zdCBtYXRjaGVkU2luZ2xlUXVvdGVzID0gb3B0aW9uc1N0cmluZy5tYXRjaCgvJy9nKTtcbiAgICAgIGNvbnN0IG1hdGNoZWREb3VibGVRdW90ZXMgPSBvcHRpb25zU3RyaW5nLm1hdGNoKC9cIi9nKTtcbiAgICAgIGlmIChtYXRjaGVkU2luZ2xlUXVvdGVzICYmIG1hdGNoZWRTaW5nbGVRdW90ZXMubGVuZ3RoICUgMiA9PT0gMCAmJiAhbWF0Y2hlZERvdWJsZVF1b3RlcyB8fCBtYXRjaGVkRG91YmxlUXVvdGVzLmxlbmd0aCAlIDIgIT09IDApIHtcbiAgICAgICAgb3B0aW9uc1N0cmluZyA9IG9wdGlvbnNTdHJpbmcucmVwbGFjZSgvJy9nLCAnXCInKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIGNsb25lZE9wdGlvbnMgPSBKU09OLnBhcnNlKG9wdGlvbnNTdHJpbmcpO1xuICAgICAgICBpZiAoaW5oZXJpdGVkT3B0aW9ucykgY2xvbmVkT3B0aW9ucyA9IHtcbiAgICAgICAgICAuLi5pbmhlcml0ZWRPcHRpb25zLFxuICAgICAgICAgIC4uLmNsb25lZE9wdGlvbnNcbiAgICAgICAgfTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIud2FybihgZmFpbGVkIHBhcnNpbmcgb3B0aW9ucyBzdHJpbmcgaW4gbmVzdGluZyBmb3Iga2V5ICR7a2V5fWAsIGUpO1xuICAgICAgICByZXR1cm4gYCR7a2V5fSR7c2VwfSR7b3B0aW9uc1N0cmluZ31gO1xuICAgICAgfVxuICAgICAgZGVsZXRlIGNsb25lZE9wdGlvbnMuZGVmYXVsdFZhbHVlO1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gICAgd2hpbGUgKG1hdGNoID0gdGhpcy5uZXN0aW5nUmVnZXhwLmV4ZWMoc3RyKSkge1xuICAgICAgbGV0IGZvcm1hdHRlcnMgPSBbXTtcbiAgICAgIGNsb25lZE9wdGlvbnMgPSB7XG4gICAgICAgIC4uLm9wdGlvbnNcbiAgICAgIH07XG4gICAgICBjbG9uZWRPcHRpb25zID0gY2xvbmVkT3B0aW9ucy5yZXBsYWNlICYmIHR5cGVvZiBjbG9uZWRPcHRpb25zLnJlcGxhY2UgIT09ICdzdHJpbmcnID8gY2xvbmVkT3B0aW9ucy5yZXBsYWNlIDogY2xvbmVkT3B0aW9ucztcbiAgICAgIGNsb25lZE9wdGlvbnMuYXBwbHlQb3N0UHJvY2Vzc29yID0gZmFsc2U7XG4gICAgICBkZWxldGUgY2xvbmVkT3B0aW9ucy5kZWZhdWx0VmFsdWU7XG4gICAgICBsZXQgZG9SZWR1Y2UgPSBmYWxzZTtcbiAgICAgIGlmIChtYXRjaFswXS5pbmRleE9mKHRoaXMuZm9ybWF0U2VwYXJhdG9yKSAhPT0gLTEgJiYgIS97Lip9Ly50ZXN0KG1hdGNoWzFdKSkge1xuICAgICAgICBjb25zdCByID0gbWF0Y2hbMV0uc3BsaXQodGhpcy5mb3JtYXRTZXBhcmF0b3IpLm1hcChlbGVtID0+IGVsZW0udHJpbSgpKTtcbiAgICAgICAgbWF0Y2hbMV0gPSByLnNoaWZ0KCk7XG4gICAgICAgIGZvcm1hdHRlcnMgPSByO1xuICAgICAgICBkb1JlZHVjZSA9IHRydWU7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IGZjKGhhbmRsZUhhc09wdGlvbnMuY2FsbCh0aGlzLCBtYXRjaFsxXS50cmltKCksIGNsb25lZE9wdGlvbnMpLCBjbG9uZWRPcHRpb25zKTtcbiAgICAgIGlmICh2YWx1ZSAmJiBtYXRjaFswXSA9PT0gc3RyICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHJldHVybiB2YWx1ZTtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB2YWx1ZSA9IG1ha2VTdHJpbmcodmFsdWUpO1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICB0aGlzLmxvZ2dlci53YXJuKGBtaXNzZWQgdG8gcmVzb2x2ZSAke21hdGNoWzFdfSBmb3IgbmVzdGluZyAke3N0cn1gKTtcbiAgICAgICAgdmFsdWUgPSAnJztcbiAgICAgIH1cbiAgICAgIGlmIChkb1JlZHVjZSkge1xuICAgICAgICB2YWx1ZSA9IGZvcm1hdHRlcnMucmVkdWNlKCh2LCBmKSA9PiB0aGlzLmZvcm1hdCh2LCBmLCBvcHRpb25zLmxuZywge1xuICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgaW50ZXJwb2xhdGlvbmtleTogbWF0Y2hbMV0udHJpbSgpXG4gICAgICAgIH0pLCB2YWx1ZS50cmltKCkpO1xuICAgICAgfVxuICAgICAgc3RyID0gc3RyLnJlcGxhY2UobWF0Y2hbMF0sIHZhbHVlKTtcbiAgICAgIHRoaXMucmVnZXhwLmxhc3RJbmRleCA9IDA7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFyc2VGb3JtYXRTdHIoZm9ybWF0U3RyKSB7XG4gIGxldCBmb3JtYXROYW1lID0gZm9ybWF0U3RyLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xuICBjb25zdCBmb3JtYXRPcHRpb25zID0ge307XG4gIGlmIChmb3JtYXRTdHIuaW5kZXhPZignKCcpID4gLTEpIHtcbiAgICBjb25zdCBwID0gZm9ybWF0U3RyLnNwbGl0KCcoJyk7XG4gICAgZm9ybWF0TmFtZSA9IHBbMF0udG9Mb3dlckNhc2UoKS50cmltKCk7XG4gICAgY29uc3Qgb3B0U3RyID0gcFsxXS5zdWJzdHJpbmcoMCwgcFsxXS5sZW5ndGggLSAxKTtcbiAgICBpZiAoZm9ybWF0TmFtZSA9PT0gJ2N1cnJlbmN5JyAmJiBvcHRTdHIuaW5kZXhPZignOicpIDwgMCkge1xuICAgICAgaWYgKCFmb3JtYXRPcHRpb25zLmN1cnJlbmN5KSBmb3JtYXRPcHRpb25zLmN1cnJlbmN5ID0gb3B0U3RyLnRyaW0oKTtcbiAgICB9IGVsc2UgaWYgKGZvcm1hdE5hbWUgPT09ICdyZWxhdGl2ZXRpbWUnICYmIG9wdFN0ci5pbmRleE9mKCc6JykgPCAwKSB7XG4gICAgICBpZiAoIWZvcm1hdE9wdGlvbnMucmFuZ2UpIGZvcm1hdE9wdGlvbnMucmFuZ2UgPSBvcHRTdHIudHJpbSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBvcHRzID0gb3B0U3RyLnNwbGl0KCc7Jyk7XG4gICAgICBvcHRzLmZvckVhY2gob3B0ID0+IHtcbiAgICAgICAgaWYgKCFvcHQpIHJldHVybjtcbiAgICAgICAgY29uc3QgW2tleSwgLi4ucmVzdF0gPSBvcHQuc3BsaXQoJzonKTtcbiAgICAgICAgY29uc3QgdmFsID0gcmVzdC5qb2luKCc6JykudHJpbSgpLnJlcGxhY2UoL14nK3wnKyQvZywgJycpO1xuICAgICAgICBpZiAoIWZvcm1hdE9wdGlvbnNba2V5LnRyaW0oKV0pIGZvcm1hdE9wdGlvbnNba2V5LnRyaW0oKV0gPSB2YWw7XG4gICAgICAgIGlmICh2YWwgPT09ICdmYWxzZScpIGZvcm1hdE9wdGlvbnNba2V5LnRyaW0oKV0gPSBmYWxzZTtcbiAgICAgICAgaWYgKHZhbCA9PT0gJ3RydWUnKSBmb3JtYXRPcHRpb25zW2tleS50cmltKCldID0gdHJ1ZTtcbiAgICAgICAgaWYgKCFpc05hTih2YWwpKSBmb3JtYXRPcHRpb25zW2tleS50cmltKCldID0gcGFyc2VJbnQodmFsLCAxMCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBmb3JtYXROYW1lLFxuICAgIGZvcm1hdE9wdGlvbnNcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlZEZvcm1hdHRlcihmbikge1xuICBjb25zdCBjYWNoZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gaW52b2tlRm9ybWF0dGVyKHZhbCwgbG5nLCBvcHRpb25zKSB7XG4gICAgY29uc3Qga2V5ID0gbG5nICsgSlNPTi5zdHJpbmdpZnkob3B0aW9ucyk7XG4gICAgbGV0IGZvcm1hdHRlciA9IGNhY2hlW2tleV07XG4gICAgaWYgKCFmb3JtYXR0ZXIpIHtcbiAgICAgIGZvcm1hdHRlciA9IGZuKGdldENsZWFuZWRDb2RlKGxuZyksIG9wdGlvbnMpO1xuICAgICAgY2FjaGVba2V5XSA9IGZvcm1hdHRlcjtcbiAgICB9XG4gICAgcmV0dXJuIGZvcm1hdHRlcih2YWwpO1xuICB9O1xufVxuY2xhc3MgRm9ybWF0dGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIHRoaXMubG9nZ2VyID0gYmFzZUxvZ2dlci5jcmVhdGUoJ2Zvcm1hdHRlcicpO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5mb3JtYXRzID0ge1xuICAgICAgbnVtYmVyOiBjcmVhdGVDYWNoZWRGb3JtYXR0ZXIoKGxuZywgb3B0KSA9PiB7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlciA9IG5ldyBJbnRsLk51bWJlckZvcm1hdChsbmcsIHtcbiAgICAgICAgICAuLi5vcHRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB2YWwgPT4gZm9ybWF0dGVyLmZvcm1hdCh2YWwpO1xuICAgICAgfSksXG4gICAgICBjdXJyZW5jeTogY3JlYXRlQ2FjaGVkRm9ybWF0dGVyKChsbmcsIG9wdCkgPT4ge1xuICAgICAgICBjb25zdCBmb3JtYXR0ZXIgPSBuZXcgSW50bC5OdW1iZXJGb3JtYXQobG5nLCB7XG4gICAgICAgICAgLi4ub3B0LFxuICAgICAgICAgIHN0eWxlOiAnY3VycmVuY3knXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdmFsID0+IGZvcm1hdHRlci5mb3JtYXQodmFsKTtcbiAgICAgIH0pLFxuICAgICAgZGF0ZXRpbWU6IGNyZWF0ZUNhY2hlZEZvcm1hdHRlcigobG5nLCBvcHQpID0+IHtcbiAgICAgICAgY29uc3QgZm9ybWF0dGVyID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG5nLCB7XG4gICAgICAgICAgLi4ub3B0XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdmFsID0+IGZvcm1hdHRlci5mb3JtYXQodmFsKTtcbiAgICAgIH0pLFxuICAgICAgcmVsYXRpdmV0aW1lOiBjcmVhdGVDYWNoZWRGb3JtYXR0ZXIoKGxuZywgb3B0KSA9PiB7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlciA9IG5ldyBJbnRsLlJlbGF0aXZlVGltZUZvcm1hdChsbmcsIHtcbiAgICAgICAgICAuLi5vcHRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB2YWwgPT4gZm9ybWF0dGVyLmZvcm1hdCh2YWwsIG9wdC5yYW5nZSB8fCAnZGF5Jyk7XG4gICAgICB9KSxcbiAgICAgIGxpc3Q6IGNyZWF0ZUNhY2hlZEZvcm1hdHRlcigobG5nLCBvcHQpID0+IHtcbiAgICAgICAgY29uc3QgZm9ybWF0dGVyID0gbmV3IEludGwuTGlzdEZvcm1hdChsbmcsIHtcbiAgICAgICAgICAuLi5vcHRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB2YWwgPT4gZm9ybWF0dGVyLmZvcm1hdCh2YWwpO1xuICAgICAgfSlcbiAgICB9O1xuICAgIHRoaXMuaW5pdChvcHRpb25zKTtcbiAgfVxuICBpbml0KHNlcnZpY2VzKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHtcbiAgICAgIGludGVycG9sYXRpb246IHt9XG4gICAgfTtcbiAgICBjb25zdCBpT3B0cyA9IG9wdGlvbnMuaW50ZXJwb2xhdGlvbjtcbiAgICB0aGlzLmZvcm1hdFNlcGFyYXRvciA9IGlPcHRzLmZvcm1hdFNlcGFyYXRvciA/IGlPcHRzLmZvcm1hdFNlcGFyYXRvciA6IGlPcHRzLmZvcm1hdFNlcGFyYXRvciB8fCAnLCc7XG4gIH1cbiAgYWRkKG5hbWUsIGZjKSB7XG4gICAgdGhpcy5mb3JtYXRzW25hbWUudG9Mb3dlckNhc2UoKS50cmltKCldID0gZmM7XG4gIH1cbiAgYWRkQ2FjaGVkKG5hbWUsIGZjKSB7XG4gICAgdGhpcy5mb3JtYXRzW25hbWUudG9Mb3dlckNhc2UoKS50cmltKCldID0gY3JlYXRlQ2FjaGVkRm9ybWF0dGVyKGZjKTtcbiAgfVxuICBmb3JtYXQodmFsdWUsIGZvcm1hdCwgbG5nKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHt9O1xuICAgIGNvbnN0IGZvcm1hdHMgPSBmb3JtYXQuc3BsaXQodGhpcy5mb3JtYXRTZXBhcmF0b3IpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGZvcm1hdHMucmVkdWNlKChtZW0sIGYpID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZm9ybWF0TmFtZSxcbiAgICAgICAgZm9ybWF0T3B0aW9uc1xuICAgICAgfSA9IHBhcnNlRm9ybWF0U3RyKGYpO1xuICAgICAgaWYgKHRoaXMuZm9ybWF0c1tmb3JtYXROYW1lXSkge1xuICAgICAgICBsZXQgZm9ybWF0dGVkID0gbWVtO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHZhbE9wdGlvbnMgPSBvcHRpb25zICYmIG9wdGlvbnMuZm9ybWF0UGFyYW1zICYmIG9wdGlvbnMuZm9ybWF0UGFyYW1zW29wdGlvbnMuaW50ZXJwb2xhdGlvbmtleV0gfHwge307XG4gICAgICAgICAgY29uc3QgbCA9IHZhbE9wdGlvbnMubG9jYWxlIHx8IHZhbE9wdGlvbnMubG5nIHx8IG9wdGlvbnMubG9jYWxlIHx8IG9wdGlvbnMubG5nIHx8IGxuZztcbiAgICAgICAgICBmb3JtYXR0ZWQgPSB0aGlzLmZvcm1hdHNbZm9ybWF0TmFtZV0obWVtLCBsLCB7XG4gICAgICAgICAgICAuLi5mb3JtYXRPcHRpb25zLFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIC4uLnZhbE9wdGlvbnNcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm9ybWF0dGVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5sb2dnZXIud2FybihgdGhlcmUgd2FzIG5vIGZvcm1hdCBmdW5jdGlvbiBmb3IgJHtmb3JtYXROYW1lfWApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1lbTtcbiAgICB9LCB2YWx1ZSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVQZW5kaW5nKHEsIG5hbWUpIHtcbiAgaWYgKHEucGVuZGluZ1tuYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGVsZXRlIHEucGVuZGluZ1tuYW1lXTtcbiAgICBxLnBlbmRpbmdDb3VudC0tO1xuICB9XG59XG5jbGFzcyBDb25uZWN0b3IgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvcihiYWNrZW5kLCBzdG9yZSwgc2VydmljZXMpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge307XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmJhY2tlbmQgPSBiYWNrZW5kO1xuICAgIHRoaXMuc3RvcmUgPSBzdG9yZTtcbiAgICB0aGlzLnNlcnZpY2VzID0gc2VydmljZXM7XG4gICAgdGhpcy5sYW5ndWFnZVV0aWxzID0gc2VydmljZXMubGFuZ3VhZ2VVdGlscztcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMubG9nZ2VyID0gYmFzZUxvZ2dlci5jcmVhdGUoJ2JhY2tlbmRDb25uZWN0b3InKTtcbiAgICB0aGlzLndhaXRpbmdSZWFkcyA9IFtdO1xuICAgIHRoaXMubWF4UGFyYWxsZWxSZWFkcyA9IG9wdGlvbnMubWF4UGFyYWxsZWxSZWFkcyB8fCAxMDtcbiAgICB0aGlzLnJlYWRpbmdDYWxscyA9IDA7XG4gICAgdGhpcy5tYXhSZXRyaWVzID0gb3B0aW9ucy5tYXhSZXRyaWVzID49IDAgPyBvcHRpb25zLm1heFJldHJpZXMgOiA1O1xuICAgIHRoaXMucmV0cnlUaW1lb3V0ID0gb3B0aW9ucy5yZXRyeVRpbWVvdXQgPj0gMSA/IG9wdGlvbnMucmV0cnlUaW1lb3V0IDogMzUwO1xuICAgIHRoaXMuc3RhdGUgPSB7fTtcbiAgICB0aGlzLnF1ZXVlID0gW107XG4gICAgaWYgKHRoaXMuYmFja2VuZCAmJiB0aGlzLmJhY2tlbmQuaW5pdCkge1xuICAgICAgdGhpcy5iYWNrZW5kLmluaXQoc2VydmljZXMsIG9wdGlvbnMuYmFja2VuZCwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG4gIHF1ZXVlTG9hZChsYW5ndWFnZXMsIG5hbWVzcGFjZXMsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgdG9Mb2FkID0ge307XG4gICAgY29uc3QgcGVuZGluZyA9IHt9O1xuICAgIGNvbnN0IHRvTG9hZExhbmd1YWdlcyA9IHt9O1xuICAgIGNvbnN0IHRvTG9hZE5hbWVzcGFjZXMgPSB7fTtcbiAgICBsYW5ndWFnZXMuZm9yRWFjaChsbmcgPT4ge1xuICAgICAgbGV0IGhhc0FsbE5hbWVzcGFjZXMgPSB0cnVlO1xuICAgICAgbmFtZXNwYWNlcy5mb3JFYWNoKG5zID0+IHtcbiAgICAgICAgY29uc3QgbmFtZSA9IGAke2xuZ318JHtuc31gO1xuICAgICAgICBpZiAoIW9wdGlvbnMucmVsb2FkICYmIHRoaXMuc3RvcmUuaGFzUmVzb3VyY2VCdW5kbGUobG5nLCBucykpIHtcbiAgICAgICAgICB0aGlzLnN0YXRlW25hbWVdID0gMjtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlW25hbWVdIDwgMCkgOyBlbHNlIGlmICh0aGlzLnN0YXRlW25hbWVdID09PSAxKSB7XG4gICAgICAgICAgaWYgKHBlbmRpbmdbbmFtZV0gPT09IHVuZGVmaW5lZCkgcGVuZGluZ1tuYW1lXSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zdGF0ZVtuYW1lXSA9IDE7XG4gICAgICAgICAgaGFzQWxsTmFtZXNwYWNlcyA9IGZhbHNlO1xuICAgICAgICAgIGlmIChwZW5kaW5nW25hbWVdID09PSB1bmRlZmluZWQpIHBlbmRpbmdbbmFtZV0gPSB0cnVlO1xuICAgICAgICAgIGlmICh0b0xvYWRbbmFtZV0gPT09IHVuZGVmaW5lZCkgdG9Mb2FkW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgICBpZiAodG9Mb2FkTmFtZXNwYWNlc1tuc10gPT09IHVuZGVmaW5lZCkgdG9Mb2FkTmFtZXNwYWNlc1tuc10gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICghaGFzQWxsTmFtZXNwYWNlcykgdG9Mb2FkTGFuZ3VhZ2VzW2xuZ10gPSB0cnVlO1xuICAgIH0pO1xuICAgIGlmIChPYmplY3Qua2V5cyh0b0xvYWQpLmxlbmd0aCB8fCBPYmplY3Qua2V5cyhwZW5kaW5nKS5sZW5ndGgpIHtcbiAgICAgIHRoaXMucXVldWUucHVzaCh7XG4gICAgICAgIHBlbmRpbmcsXG4gICAgICAgIHBlbmRpbmdDb3VudDogT2JqZWN0LmtleXMocGVuZGluZykubGVuZ3RoLFxuICAgICAgICBsb2FkZWQ6IHt9LFxuICAgICAgICBlcnJvcnM6IFtdLFxuICAgICAgICBjYWxsYmFja1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB0b0xvYWQ6IE9iamVjdC5rZXlzKHRvTG9hZCksXG4gICAgICBwZW5kaW5nOiBPYmplY3Qua2V5cyhwZW5kaW5nKSxcbiAgICAgIHRvTG9hZExhbmd1YWdlczogT2JqZWN0LmtleXModG9Mb2FkTGFuZ3VhZ2VzKSxcbiAgICAgIHRvTG9hZE5hbWVzcGFjZXM6IE9iamVjdC5rZXlzKHRvTG9hZE5hbWVzcGFjZXMpXG4gICAgfTtcbiAgfVxuICBsb2FkZWQobmFtZSwgZXJyLCBkYXRhKSB7XG4gICAgY29uc3QgcyA9IG5hbWUuc3BsaXQoJ3wnKTtcbiAgICBjb25zdCBsbmcgPSBzWzBdO1xuICAgIGNvbnN0IG5zID0gc1sxXTtcbiAgICBpZiAoZXJyKSB0aGlzLmVtaXQoJ2ZhaWxlZExvYWRpbmcnLCBsbmcsIG5zLCBlcnIpO1xuICAgIGlmIChkYXRhKSB7XG4gICAgICB0aGlzLnN0b3JlLmFkZFJlc291cmNlQnVuZGxlKGxuZywgbnMsIGRhdGEpO1xuICAgIH1cbiAgICB0aGlzLnN0YXRlW25hbWVdID0gZXJyID8gLTEgOiAyO1xuICAgIGNvbnN0IGxvYWRlZCA9IHt9O1xuICAgIHRoaXMucXVldWUuZm9yRWFjaChxID0+IHtcbiAgICAgIHB1c2hQYXRoKHEubG9hZGVkLCBbbG5nXSwgbnMpO1xuICAgICAgcmVtb3ZlUGVuZGluZyhxLCBuYW1lKTtcbiAgICAgIGlmIChlcnIpIHEuZXJyb3JzLnB1c2goZXJyKTtcbiAgICAgIGlmIChxLnBlbmRpbmdDb3VudCA9PT0gMCAmJiAhcS5kb25lKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHEubG9hZGVkKS5mb3JFYWNoKGwgPT4ge1xuICAgICAgICAgIGlmICghbG9hZGVkW2xdKSBsb2FkZWRbbF0gPSB7fTtcbiAgICAgICAgICBjb25zdCBsb2FkZWRLZXlzID0gcS5sb2FkZWRbbF07XG4gICAgICAgICAgaWYgKGxvYWRlZEtleXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBsb2FkZWRLZXlzLmZvckVhY2gobiA9PiB7XG4gICAgICAgICAgICAgIGlmIChsb2FkZWRbbF1bbl0gPT09IHVuZGVmaW5lZCkgbG9hZGVkW2xdW25dID0gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHEuZG9uZSA9IHRydWU7XG4gICAgICAgIGlmIChxLmVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgICBxLmNhbGxiYWNrKHEuZXJyb3JzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBxLmNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmVtaXQoJ2xvYWRlZCcsIGxvYWRlZCk7XG4gICAgdGhpcy5xdWV1ZSA9IHRoaXMucXVldWUuZmlsdGVyKHEgPT4gIXEuZG9uZSk7XG4gIH1cbiAgcmVhZChsbmcsIG5zLCBmY05hbWUpIHtcbiAgICBsZXQgdHJpZWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDA7XG4gICAgbGV0IHdhaXQgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IHRoaXMucmV0cnlUaW1lb3V0O1xuICAgIGxldCBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ID8gYXJndW1lbnRzWzVdIDogdW5kZWZpbmVkO1xuICAgIGlmICghbG5nLmxlbmd0aCkgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHt9KTtcbiAgICBpZiAodGhpcy5yZWFkaW5nQ2FsbHMgPj0gdGhpcy5tYXhQYXJhbGxlbFJlYWRzKSB7XG4gICAgICB0aGlzLndhaXRpbmdSZWFkcy5wdXNoKHtcbiAgICAgICAgbG5nLFxuICAgICAgICBucyxcbiAgICAgICAgZmNOYW1lLFxuICAgICAgICB0cmllZCxcbiAgICAgICAgd2FpdCxcbiAgICAgICAgY2FsbGJhY2tcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnJlYWRpbmdDYWxscysrO1xuICAgIGNvbnN0IHJlc29sdmVyID0gKGVyciwgZGF0YSkgPT4ge1xuICAgICAgdGhpcy5yZWFkaW5nQ2FsbHMtLTtcbiAgICAgIGlmICh0aGlzLndhaXRpbmdSZWFkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IG5leHQgPSB0aGlzLndhaXRpbmdSZWFkcy5zaGlmdCgpO1xuICAgICAgICB0aGlzLnJlYWQobmV4dC5sbmcsIG5leHQubnMsIG5leHQuZmNOYW1lLCBuZXh0LnRyaWVkLCBuZXh0LndhaXQsIG5leHQuY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgaWYgKGVyciAmJiBkYXRhICYmIHRyaWVkIDwgdGhpcy5tYXhSZXRyaWVzKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMucmVhZC5jYWxsKHRoaXMsIGxuZywgbnMsIGZjTmFtZSwgdHJpZWQgKyAxLCB3YWl0ICogMiwgY2FsbGJhY2spO1xuICAgICAgICB9LCB3YWl0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY2FsbGJhY2soZXJyLCBkYXRhKTtcbiAgICB9O1xuICAgIGNvbnN0IGZjID0gdGhpcy5iYWNrZW5kW2ZjTmFtZV0uYmluZCh0aGlzLmJhY2tlbmQpO1xuICAgIGlmIChmYy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHIgPSBmYyhsbmcsIG5zKTtcbiAgICAgICAgaWYgKHIgJiYgdHlwZW9mIHIudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHIudGhlbihkYXRhID0+IHJlc29sdmVyKG51bGwsIGRhdGEpKS5jYXRjaChyZXNvbHZlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZXIobnVsbCwgcik7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICByZXNvbHZlcihlcnIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gZmMobG5nLCBucywgcmVzb2x2ZXIpO1xuICB9XG4gIHByZXBhcmVMb2FkaW5nKGxhbmd1YWdlcywgbmFtZXNwYWNlcykge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICBsZXQgY2FsbGJhY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMyA/IGFyZ3VtZW50c1szXSA6IHVuZGVmaW5lZDtcbiAgICBpZiAoIXRoaXMuYmFja2VuZCkge1xuICAgICAgdGhpcy5sb2dnZXIud2FybignTm8gYmFja2VuZCB3YXMgYWRkZWQgdmlhIGkxOG5leHQudXNlLiBXaWxsIG5vdCBsb2FkIHJlc291cmNlcy4nKTtcbiAgICAgIHJldHVybiBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGxhbmd1YWdlcyA9PT0gJ3N0cmluZycpIGxhbmd1YWdlcyA9IHRoaXMubGFuZ3VhZ2VVdGlscy50b1Jlc29sdmVIaWVyYXJjaHkobGFuZ3VhZ2VzKTtcbiAgICBpZiAodHlwZW9mIG5hbWVzcGFjZXMgPT09ICdzdHJpbmcnKSBuYW1lc3BhY2VzID0gW25hbWVzcGFjZXNdO1xuICAgIGNvbnN0IHRvTG9hZCA9IHRoaXMucXVldWVMb2FkKGxhbmd1YWdlcywgbmFtZXNwYWNlcywgb3B0aW9ucywgY2FsbGJhY2spO1xuICAgIGlmICghdG9Mb2FkLnRvTG9hZC5sZW5ndGgpIHtcbiAgICAgIGlmICghdG9Mb2FkLnBlbmRpbmcubGVuZ3RoKSBjYWxsYmFjaygpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHRvTG9hZC50b0xvYWQuZm9yRWFjaChuYW1lID0+IHtcbiAgICAgIHRoaXMubG9hZE9uZShuYW1lKTtcbiAgICB9KTtcbiAgfVxuICBsb2FkKGxhbmd1YWdlcywgbmFtZXNwYWNlcywgY2FsbGJhY2spIHtcbiAgICB0aGlzLnByZXBhcmVMb2FkaW5nKGxhbmd1YWdlcywgbmFtZXNwYWNlcywge30sIGNhbGxiYWNrKTtcbiAgfVxuICByZWxvYWQobGFuZ3VhZ2VzLCBuYW1lc3BhY2VzLCBjYWxsYmFjaykge1xuICAgIHRoaXMucHJlcGFyZUxvYWRpbmcobGFuZ3VhZ2VzLCBuYW1lc3BhY2VzLCB7XG4gICAgICByZWxvYWQ6IHRydWVcbiAgICB9LCBjYWxsYmFjayk7XG4gIH1cbiAgbG9hZE9uZShuYW1lKSB7XG4gICAgbGV0IHByZWZpeCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJyc7XG4gICAgY29uc3QgcyA9IG5hbWUuc3BsaXQoJ3wnKTtcbiAgICBjb25zdCBsbmcgPSBzWzBdO1xuICAgIGNvbnN0IG5zID0gc1sxXTtcbiAgICB0aGlzLnJlYWQobG5nLCBucywgJ3JlYWQnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgKGVyciwgZGF0YSkgPT4ge1xuICAgICAgaWYgKGVycikgdGhpcy5sb2dnZXIud2FybihgJHtwcmVmaXh9bG9hZGluZyBuYW1lc3BhY2UgJHtuc30gZm9yIGxhbmd1YWdlICR7bG5nfSBmYWlsZWRgLCBlcnIpO1xuICAgICAgaWYgKCFlcnIgJiYgZGF0YSkgdGhpcy5sb2dnZXIubG9nKGAke3ByZWZpeH1sb2FkZWQgbmFtZXNwYWNlICR7bnN9IGZvciBsYW5ndWFnZSAke2xuZ31gLCBkYXRhKTtcbiAgICAgIHRoaXMubG9hZGVkKG5hbWUsIGVyciwgZGF0YSk7XG4gICAgfSk7XG4gIH1cbiAgc2F2ZU1pc3NpbmcobGFuZ3VhZ2VzLCBuYW1lc3BhY2UsIGtleSwgZmFsbGJhY2tWYWx1ZSwgaXNVcGRhdGUpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDoge307XG4gICAgbGV0IGNsYiA9IGFyZ3VtZW50cy5sZW5ndGggPiA2ICYmIGFyZ3VtZW50c1s2XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzZdIDogKCkgPT4ge307XG4gICAgaWYgKHRoaXMuc2VydmljZXMudXRpbHMgJiYgdGhpcy5zZXJ2aWNlcy51dGlscy5oYXNMb2FkZWROYW1lc3BhY2UgJiYgIXRoaXMuc2VydmljZXMudXRpbHMuaGFzTG9hZGVkTmFtZXNwYWNlKG5hbWVzcGFjZSkpIHtcbiAgICAgIHRoaXMubG9nZ2VyLndhcm4oYGRpZCBub3Qgc2F2ZSBrZXkgXCIke2tleX1cIiBhcyB0aGUgbmFtZXNwYWNlIFwiJHtuYW1lc3BhY2V9XCIgd2FzIG5vdCB5ZXQgbG9hZGVkYCwgJ1RoaXMgbWVhbnMgc29tZXRoaW5nIElTIFdST05HIGluIHlvdXIgc2V0dXAuIFlvdSBhY2Nlc3MgdGhlIHQgZnVuY3Rpb24gYmVmb3JlIGkxOG5leHQuaW5pdCAvIGkxOG5leHQubG9hZE5hbWVzcGFjZSAvIGkxOG5leHQuY2hhbmdlTGFuZ3VhZ2Ugd2FzIGRvbmUuIFdhaXQgZm9yIHRoZSBjYWxsYmFjayBvciBQcm9taXNlIHRvIHJlc29sdmUgYmVmb3JlIGFjY2Vzc2luZyBpdCEhIScpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQgfHwga2V5ID09PSBudWxsIHx8IGtleSA9PT0gJycpIHJldHVybjtcbiAgICBpZiAodGhpcy5iYWNrZW5kICYmIHRoaXMuYmFja2VuZC5jcmVhdGUpIHtcbiAgICAgIGNvbnN0IG9wdHMgPSB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIGlzVXBkYXRlXG4gICAgICB9O1xuICAgICAgY29uc3QgZmMgPSB0aGlzLmJhY2tlbmQuY3JlYXRlLmJpbmQodGhpcy5iYWNrZW5kKTtcbiAgICAgIGlmIChmYy5sZW5ndGggPCA2KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbGV0IHI7XG4gICAgICAgICAgaWYgKGZjLmxlbmd0aCA9PT0gNSkge1xuICAgICAgICAgICAgciA9IGZjKGxhbmd1YWdlcywgbmFtZXNwYWNlLCBrZXksIGZhbGxiYWNrVmFsdWUsIG9wdHMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByID0gZmMobGFuZ3VhZ2VzLCBuYW1lc3BhY2UsIGtleSwgZmFsbGJhY2tWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyICYmIHR5cGVvZiByLnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHIudGhlbihkYXRhID0+IGNsYihudWxsLCBkYXRhKSkuY2F0Y2goY2xiKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2xiKG51bGwsIHIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgY2xiKGVycik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZjKGxhbmd1YWdlcywgbmFtZXNwYWNlLCBrZXksIGZhbGxiYWNrVmFsdWUsIGNsYiwgb3B0cyk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghbGFuZ3VhZ2VzIHx8ICFsYW5ndWFnZXNbMF0pIHJldHVybjtcbiAgICB0aGlzLnN0b3JlLmFkZFJlc291cmNlKGxhbmd1YWdlc1swXSwgbmFtZXNwYWNlLCBrZXksIGZhbGxiYWNrVmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldCgpIHtcbiAgcmV0dXJuIHtcbiAgICBkZWJ1ZzogZmFsc2UsXG4gICAgaW5pdEltbWVkaWF0ZTogdHJ1ZSxcbiAgICBuczogWyd0cmFuc2xhdGlvbiddLFxuICAgIGRlZmF1bHROUzogWyd0cmFuc2xhdGlvbiddLFxuICAgIGZhbGxiYWNrTG5nOiBbJ2RldiddLFxuICAgIGZhbGxiYWNrTlM6IGZhbHNlLFxuICAgIHN1cHBvcnRlZExuZ3M6IGZhbHNlLFxuICAgIG5vbkV4cGxpY2l0U3VwcG9ydGVkTG5nczogZmFsc2UsXG4gICAgbG9hZDogJ2FsbCcsXG4gICAgcHJlbG9hZDogZmFsc2UsXG4gICAgc2ltcGxpZnlQbHVyYWxTdWZmaXg6IHRydWUsXG4gICAga2V5U2VwYXJhdG9yOiAnLicsXG4gICAgbnNTZXBhcmF0b3I6ICc6JyxcbiAgICBwbHVyYWxTZXBhcmF0b3I6ICdfJyxcbiAgICBjb250ZXh0U2VwYXJhdG9yOiAnXycsXG4gICAgcGFydGlhbEJ1bmRsZWRMYW5ndWFnZXM6IGZhbHNlLFxuICAgIHNhdmVNaXNzaW5nOiBmYWxzZSxcbiAgICB1cGRhdGVNaXNzaW5nOiBmYWxzZSxcbiAgICBzYXZlTWlzc2luZ1RvOiAnZmFsbGJhY2snLFxuICAgIHNhdmVNaXNzaW5nUGx1cmFsczogdHJ1ZSxcbiAgICBtaXNzaW5nS2V5SGFuZGxlcjogZmFsc2UsXG4gICAgbWlzc2luZ0ludGVycG9sYXRpb25IYW5kbGVyOiBmYWxzZSxcbiAgICBwb3N0UHJvY2VzczogZmFsc2UsXG4gICAgcG9zdFByb2Nlc3NQYXNzUmVzb2x2ZWQ6IGZhbHNlLFxuICAgIHJldHVybk51bGw6IGZhbHNlLFxuICAgIHJldHVybkVtcHR5U3RyaW5nOiB0cnVlLFxuICAgIHJldHVybk9iamVjdHM6IGZhbHNlLFxuICAgIGpvaW5BcnJheXM6IGZhbHNlLFxuICAgIHJldHVybmVkT2JqZWN0SGFuZGxlcjogZmFsc2UsXG4gICAgcGFyc2VNaXNzaW5nS2V5SGFuZGxlcjogZmFsc2UsXG4gICAgYXBwZW5kTmFtZXNwYWNlVG9NaXNzaW5nS2V5OiBmYWxzZSxcbiAgICBhcHBlbmROYW1lc3BhY2VUb0NJTW9kZTogZmFsc2UsXG4gICAgb3ZlcmxvYWRUcmFuc2xhdGlvbk9wdGlvbkhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZShhcmdzKSB7XG4gICAgICBsZXQgcmV0ID0ge307XG4gICAgICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdvYmplY3QnKSByZXQgPSBhcmdzWzFdO1xuICAgICAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnc3RyaW5nJykgcmV0LmRlZmF1bHRWYWx1ZSA9IGFyZ3NbMV07XG4gICAgICBpZiAodHlwZW9mIGFyZ3NbMl0gPT09ICdzdHJpbmcnKSByZXQudERlc2NyaXB0aW9uID0gYXJnc1syXTtcbiAgICAgIGlmICh0eXBlb2YgYXJnc1syXSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGFyZ3NbM10gPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBhcmdzWzNdIHx8IGFyZ3NbMl07XG4gICAgICAgIE9iamVjdC5rZXlzKG9wdGlvbnMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICByZXRba2V5XSA9IG9wdGlvbnNba2V5XTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH0sXG4gICAgaW50ZXJwb2xhdGlvbjoge1xuICAgICAgZXNjYXBlVmFsdWU6IHRydWUsXG4gICAgICBmb3JtYXQ6ICh2YWx1ZSwgZm9ybWF0LCBsbmcsIG9wdGlvbnMpID0+IHZhbHVlLFxuICAgICAgcHJlZml4OiAne3snLFxuICAgICAgc3VmZml4OiAnfX0nLFxuICAgICAgZm9ybWF0U2VwYXJhdG9yOiAnLCcsXG4gICAgICB1bmVzY2FwZVByZWZpeDogJy0nLFxuICAgICAgbmVzdGluZ1ByZWZpeDogJyR0KCcsXG4gICAgICBuZXN0aW5nU3VmZml4OiAnKScsXG4gICAgICBuZXN0aW5nT3B0aW9uc1NlcGFyYXRvcjogJywnLFxuICAgICAgbWF4UmVwbGFjZXM6IDEwMDAsXG4gICAgICBza2lwT25WYXJpYWJsZXM6IHRydWVcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiB0cmFuc2Zvcm1PcHRpb25zKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zLm5zID09PSAnc3RyaW5nJykgb3B0aW9ucy5ucyA9IFtvcHRpb25zLm5zXTtcbiAgaWYgKHR5cGVvZiBvcHRpb25zLmZhbGxiYWNrTG5nID09PSAnc3RyaW5nJykgb3B0aW9ucy5mYWxsYmFja0xuZyA9IFtvcHRpb25zLmZhbGxiYWNrTG5nXTtcbiAgaWYgKHR5cGVvZiBvcHRpb25zLmZhbGxiYWNrTlMgPT09ICdzdHJpbmcnKSBvcHRpb25zLmZhbGxiYWNrTlMgPSBbb3B0aW9ucy5mYWxsYmFja05TXTtcbiAgaWYgKG9wdGlvbnMuc3VwcG9ydGVkTG5ncyAmJiBvcHRpb25zLnN1cHBvcnRlZExuZ3MuaW5kZXhPZignY2ltb2RlJykgPCAwKSB7XG4gICAgb3B0aW9ucy5zdXBwb3J0ZWRMbmdzID0gb3B0aW9ucy5zdXBwb3J0ZWRMbmdzLmNvbmNhdChbJ2NpbW9kZSddKTtcbiAgfVxuICByZXR1cm4gb3B0aW9ucztcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5mdW5jdGlvbiBiaW5kTWVtYmVyRnVuY3Rpb25zKGluc3QpIHtcbiAgY29uc3QgbWVtcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE9iamVjdC5nZXRQcm90b3R5cGVPZihpbnN0KSk7XG4gIG1lbXMuZm9yRWFjaChtZW0gPT4ge1xuICAgIGlmICh0eXBlb2YgaW5zdFttZW1dID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpbnN0W21lbV0gPSBpbnN0W21lbV0uYmluZChpbnN0KTtcbiAgICB9XG4gIH0pO1xufVxuY2xhc3MgSTE4biBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICBsZXQgY2FsbGJhY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMub3B0aW9ucyA9IHRyYW5zZm9ybU9wdGlvbnMob3B0aW9ucyk7XG4gICAgdGhpcy5zZXJ2aWNlcyA9IHt9O1xuICAgIHRoaXMubG9nZ2VyID0gYmFzZUxvZ2dlcjtcbiAgICB0aGlzLm1vZHVsZXMgPSB7XG4gICAgICBleHRlcm5hbDogW11cbiAgICB9O1xuICAgIGJpbmRNZW1iZXJGdW5jdGlvbnModGhpcyk7XG4gICAgaWYgKGNhbGxiYWNrICYmICF0aGlzLmlzSW5pdGlhbGl6ZWQgJiYgIW9wdGlvbnMuaXNDbG9uZSkge1xuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuaW5pdEltbWVkaWF0ZSkge1xuICAgICAgICB0aGlzLmluaXQob3B0aW9ucywgY2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmluaXQob3B0aW9ucywgY2FsbGJhY2spO1xuICAgICAgfSwgMCk7XG4gICAgfVxuICB9XG4gIGluaXQoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgbGV0IGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIGlmICghb3B0aW9ucy5kZWZhdWx0TlMgJiYgb3B0aW9ucy5kZWZhdWx0TlMgIT09IGZhbHNlICYmIG9wdGlvbnMubnMpIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgb3B0aW9ucy5kZWZhdWx0TlMgPSBvcHRpb25zLm5zO1xuICAgICAgfSBlbHNlIGlmIChvcHRpb25zLm5zLmluZGV4T2YoJ3RyYW5zbGF0aW9uJykgPCAwKSB7XG4gICAgICAgIG9wdGlvbnMuZGVmYXVsdE5TID0gb3B0aW9ucy5uc1swXTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZGVmT3B0cyA9IGdldCgpO1xuICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgIC4uLmRlZk9wdHMsXG4gICAgICAuLi50aGlzLm9wdGlvbnMsXG4gICAgICAuLi50cmFuc2Zvcm1PcHRpb25zKG9wdGlvbnMpXG4gICAgfTtcbiAgICBpZiAodGhpcy5vcHRpb25zLmNvbXBhdGliaWxpdHlBUEkgIT09ICd2MScpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uID0ge1xuICAgICAgICAuLi5kZWZPcHRzLmludGVycG9sYXRpb24sXG4gICAgICAgIC4uLnRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5rZXlTZXBhcmF0b3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5vcHRpb25zLnVzZXJEZWZpbmVkS2V5U2VwYXJhdG9yID0gb3B0aW9ucy5rZXlTZXBhcmF0b3I7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLm5zU2VwYXJhdG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMub3B0aW9ucy51c2VyRGVmaW5lZE5zU2VwYXJhdG9yID0gb3B0aW9ucy5uc1NlcGFyYXRvcjtcbiAgICB9XG4gICAgZnVuY3Rpb24gY3JlYXRlQ2xhc3NPbkRlbWFuZChDbGFzc09yT2JqZWN0KSB7XG4gICAgICBpZiAoIUNsYXNzT3JPYmplY3QpIHJldHVybiBudWxsO1xuICAgICAgaWYgKHR5cGVvZiBDbGFzc09yT2JqZWN0ID09PSAnZnVuY3Rpb24nKSByZXR1cm4gbmV3IENsYXNzT3JPYmplY3QoKTtcbiAgICAgIHJldHVybiBDbGFzc09yT2JqZWN0O1xuICAgIH1cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5pc0Nsb25lKSB7XG4gICAgICBpZiAodGhpcy5tb2R1bGVzLmxvZ2dlcikge1xuICAgICAgICBiYXNlTG9nZ2VyLmluaXQoY3JlYXRlQ2xhc3NPbkRlbWFuZCh0aGlzLm1vZHVsZXMubG9nZ2VyKSwgdGhpcy5vcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhc2VMb2dnZXIuaW5pdChudWxsLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgbGV0IGZvcm1hdHRlcjtcbiAgICAgIGlmICh0aGlzLm1vZHVsZXMuZm9ybWF0dGVyKSB7XG4gICAgICAgIGZvcm1hdHRlciA9IHRoaXMubW9kdWxlcy5mb3JtYXR0ZXI7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBJbnRsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBmb3JtYXR0ZXIgPSBGb3JtYXR0ZXI7XG4gICAgICB9XG4gICAgICBjb25zdCBsdSA9IG5ldyBMYW5ndWFnZVV0aWwodGhpcy5vcHRpb25zKTtcbiAgICAgIHRoaXMuc3RvcmUgPSBuZXcgUmVzb3VyY2VTdG9yZSh0aGlzLm9wdGlvbnMucmVzb3VyY2VzLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgY29uc3QgcyA9IHRoaXMuc2VydmljZXM7XG4gICAgICBzLmxvZ2dlciA9IGJhc2VMb2dnZXI7XG4gICAgICBzLnJlc291cmNlU3RvcmUgPSB0aGlzLnN0b3JlO1xuICAgICAgcy5sYW5ndWFnZVV0aWxzID0gbHU7XG4gICAgICBzLnBsdXJhbFJlc29sdmVyID0gbmV3IFBsdXJhbFJlc29sdmVyKGx1LCB7XG4gICAgICAgIHByZXBlbmQ6IHRoaXMub3B0aW9ucy5wbHVyYWxTZXBhcmF0b3IsXG4gICAgICAgIGNvbXBhdGliaWxpdHlKU09OOiB0aGlzLm9wdGlvbnMuY29tcGF0aWJpbGl0eUpTT04sXG4gICAgICAgIHNpbXBsaWZ5UGx1cmFsU3VmZml4OiB0aGlzLm9wdGlvbnMuc2ltcGxpZnlQbHVyYWxTdWZmaXhcbiAgICAgIH0pO1xuICAgICAgaWYgKGZvcm1hdHRlciAmJiAoIXRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uLmZvcm1hdCB8fCB0aGlzLm9wdGlvbnMuaW50ZXJwb2xhdGlvbi5mb3JtYXQgPT09IGRlZk9wdHMuaW50ZXJwb2xhdGlvbi5mb3JtYXQpKSB7XG4gICAgICAgIHMuZm9ybWF0dGVyID0gY3JlYXRlQ2xhc3NPbkRlbWFuZChmb3JtYXR0ZXIpO1xuICAgICAgICBzLmZvcm1hdHRlci5pbml0KHMsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uLmZvcm1hdCA9IHMuZm9ybWF0dGVyLmZvcm1hdC5iaW5kKHMuZm9ybWF0dGVyKTtcbiAgICAgIH1cbiAgICAgIHMuaW50ZXJwb2xhdG9yID0gbmV3IEludGVycG9sYXRvcih0aGlzLm9wdGlvbnMpO1xuICAgICAgcy51dGlscyA9IHtcbiAgICAgICAgaGFzTG9hZGVkTmFtZXNwYWNlOiB0aGlzLmhhc0xvYWRlZE5hbWVzcGFjZS5iaW5kKHRoaXMpXG4gICAgICB9O1xuICAgICAgcy5iYWNrZW5kQ29ubmVjdG9yID0gbmV3IENvbm5lY3RvcihjcmVhdGVDbGFzc09uRGVtYW5kKHRoaXMubW9kdWxlcy5iYWNrZW5kKSwgcy5yZXNvdXJjZVN0b3JlLCBzLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgcy5iYWNrZW5kQ29ubmVjdG9yLm9uKCcqJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5lbWl0KGV2ZW50LCAuLi5hcmdzKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKHRoaXMubW9kdWxlcy5sYW5ndWFnZURldGVjdG9yKSB7XG4gICAgICAgIHMubGFuZ3VhZ2VEZXRlY3RvciA9IGNyZWF0ZUNsYXNzT25EZW1hbmQodGhpcy5tb2R1bGVzLmxhbmd1YWdlRGV0ZWN0b3IpO1xuICAgICAgICBpZiAocy5sYW5ndWFnZURldGVjdG9yLmluaXQpIHMubGFuZ3VhZ2VEZXRlY3Rvci5pbml0KHMsIHRoaXMub3B0aW9ucy5kZXRlY3Rpb24sIHRoaXMub3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5tb2R1bGVzLmkxOG5Gb3JtYXQpIHtcbiAgICAgICAgcy5pMThuRm9ybWF0ID0gY3JlYXRlQ2xhc3NPbkRlbWFuZCh0aGlzLm1vZHVsZXMuaTE4bkZvcm1hdCk7XG4gICAgICAgIGlmIChzLmkxOG5Gb3JtYXQuaW5pdCkgcy5pMThuRm9ybWF0LmluaXQodGhpcyk7XG4gICAgICB9XG4gICAgICB0aGlzLnRyYW5zbGF0b3IgPSBuZXcgVHJhbnNsYXRvcih0aGlzLnNlcnZpY2VzLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgdGhpcy50cmFuc2xhdG9yLm9uKCcqJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5lbWl0KGV2ZW50LCAuLi5hcmdzKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5tb2R1bGVzLmV4dGVybmFsLmZvckVhY2gobSA9PiB7XG4gICAgICAgIGlmIChtLmluaXQpIG0uaW5pdCh0aGlzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLmZvcm1hdCA9IHRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uLmZvcm1hdDtcbiAgICBpZiAoIWNhbGxiYWNrKSBjYWxsYmFjayA9IG5vb3A7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5mYWxsYmFja0xuZyAmJiAhdGhpcy5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yICYmICF0aGlzLm9wdGlvbnMubG5nKSB7XG4gICAgICBjb25zdCBjb2RlcyA9IHRoaXMuc2VydmljZXMubGFuZ3VhZ2VVdGlscy5nZXRGYWxsYmFja0NvZGVzKHRoaXMub3B0aW9ucy5mYWxsYmFja0xuZyk7XG4gICAgICBpZiAoY29kZXMubGVuZ3RoID4gMCAmJiBjb2Rlc1swXSAhPT0gJ2RldicpIHRoaXMub3B0aW9ucy5sbmcgPSBjb2Rlc1swXTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLnNlcnZpY2VzLmxhbmd1YWdlRGV0ZWN0b3IgJiYgIXRoaXMub3B0aW9ucy5sbmcpIHtcbiAgICAgIHRoaXMubG9nZ2VyLndhcm4oJ2luaXQ6IG5vIGxhbmd1YWdlRGV0ZWN0b3IgaXMgdXNlZCBhbmQgbm8gbG5nIGlzIGRlZmluZWQnKTtcbiAgICB9XG4gICAgY29uc3Qgc3RvcmVBcGkgPSBbJ2dldFJlc291cmNlJywgJ2hhc1Jlc291cmNlQnVuZGxlJywgJ2dldFJlc291cmNlQnVuZGxlJywgJ2dldERhdGFCeUxhbmd1YWdlJ107XG4gICAgc3RvcmVBcGkuZm9yRWFjaChmY05hbWUgPT4ge1xuICAgICAgdGhpc1tmY05hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuc3RvcmVbZmNOYW1lXSguLi5hcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICBjb25zdCBzdG9yZUFwaUNoYWluZWQgPSBbJ2FkZFJlc291cmNlJywgJ2FkZFJlc291cmNlcycsICdhZGRSZXNvdXJjZUJ1bmRsZScsICdyZW1vdmVSZXNvdXJjZUJ1bmRsZSddO1xuICAgIHN0b3JlQXBpQ2hhaW5lZC5mb3JFYWNoKGZjTmFtZSA9PiB7XG4gICAgICB0aGlzW2ZjTmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLnN0b3JlW2ZjTmFtZV0oLi4uYXJndW1lbnRzKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICBjb25zdCBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgY29uc3QgbG9hZCA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGZpbmlzaCA9IChlcnIsIHQpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuaXNJbml0aWFsaXplZCAmJiAhdGhpcy5pbml0aWFsaXplZFN0b3JlT25jZSkgdGhpcy5sb2dnZXIud2FybignaW5pdDogaTE4bmV4dCBpcyBhbHJlYWR5IGluaXRpYWxpemVkLiBZb3Ugc2hvdWxkIGNhbGwgaW5pdCBqdXN0IG9uY2UhJyk7XG4gICAgICAgIHRoaXMuaXNJbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmlzQ2xvbmUpIHRoaXMubG9nZ2VyLmxvZygnaW5pdGlhbGl6ZWQnLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICB0aGlzLmVtaXQoJ2luaXRpYWxpemVkJywgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh0KTtcbiAgICAgICAgY2FsbGJhY2soZXJyLCB0KTtcbiAgICAgIH07XG4gICAgICBpZiAodGhpcy5sYW5ndWFnZXMgJiYgdGhpcy5vcHRpb25zLmNvbXBhdGliaWxpdHlBUEkgIT09ICd2MScgJiYgIXRoaXMuaXNJbml0aWFsaXplZCkgcmV0dXJuIGZpbmlzaChudWxsLCB0aGlzLnQuYmluZCh0aGlzKSk7XG4gICAgICB0aGlzLmNoYW5nZUxhbmd1YWdlKHRoaXMub3B0aW9ucy5sbmcsIGZpbmlzaCk7XG4gICAgfTtcbiAgICBpZiAodGhpcy5vcHRpb25zLnJlc291cmNlcyB8fCAhdGhpcy5vcHRpb25zLmluaXRJbW1lZGlhdGUpIHtcbiAgICAgIGxvYWQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0VGltZW91dChsb2FkLCAwKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmVycmVkO1xuICB9XG4gIGxvYWRSZXNvdXJjZXMobGFuZ3VhZ2UpIHtcbiAgICBsZXQgY2FsbGJhY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IG5vb3A7XG4gICAgbGV0IHVzZWRDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIGNvbnN0IHVzZWRMbmcgPSB0eXBlb2YgbGFuZ3VhZ2UgPT09ICdzdHJpbmcnID8gbGFuZ3VhZ2UgOiB0aGlzLmxhbmd1YWdlO1xuICAgIGlmICh0eXBlb2YgbGFuZ3VhZ2UgPT09ICdmdW5jdGlvbicpIHVzZWRDYWxsYmFjayA9IGxhbmd1YWdlO1xuICAgIGlmICghdGhpcy5vcHRpb25zLnJlc291cmNlcyB8fCB0aGlzLm9wdGlvbnMucGFydGlhbEJ1bmRsZWRMYW5ndWFnZXMpIHtcbiAgICAgIGlmICh1c2VkTG5nICYmIHVzZWRMbmcudG9Mb3dlckNhc2UoKSA9PT0gJ2NpbW9kZScpIHJldHVybiB1c2VkQ2FsbGJhY2soKTtcbiAgICAgIGNvbnN0IHRvTG9hZCA9IFtdO1xuICAgICAgY29uc3QgYXBwZW5kID0gbG5nID0+IHtcbiAgICAgICAgaWYgKCFsbmcpIHJldHVybjtcbiAgICAgICAgY29uc3QgbG5ncyA9IHRoaXMuc2VydmljZXMubGFuZ3VhZ2VVdGlscy50b1Jlc29sdmVIaWVyYXJjaHkobG5nKTtcbiAgICAgICAgbG5ncy5mb3JFYWNoKGwgPT4ge1xuICAgICAgICAgIGlmICh0b0xvYWQuaW5kZXhPZihsKSA8IDApIHRvTG9hZC5wdXNoKGwpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgICBpZiAoIXVzZWRMbmcpIHtcbiAgICAgICAgY29uc3QgZmFsbGJhY2tzID0gdGhpcy5zZXJ2aWNlcy5sYW5ndWFnZVV0aWxzLmdldEZhbGxiYWNrQ29kZXModGhpcy5vcHRpb25zLmZhbGxiYWNrTG5nKTtcbiAgICAgICAgZmFsbGJhY2tzLmZvckVhY2gobCA9PiBhcHBlbmQobCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXBwZW5kKHVzZWRMbmcpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5wcmVsb2FkKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5wcmVsb2FkLmZvckVhY2gobCA9PiBhcHBlbmQobCkpO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXJ2aWNlcy5iYWNrZW5kQ29ubmVjdG9yLmxvYWQodG9Mb2FkLCB0aGlzLm9wdGlvbnMubnMsIGUgPT4ge1xuICAgICAgICBpZiAoIWUgJiYgIXRoaXMucmVzb2x2ZWRMYW5ndWFnZSAmJiB0aGlzLmxhbmd1YWdlKSB0aGlzLnNldFJlc29sdmVkTGFuZ3VhZ2UodGhpcy5sYW5ndWFnZSk7XG4gICAgICAgIHVzZWRDYWxsYmFjayhlKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB1c2VkQ2FsbGJhY2sobnVsbCk7XG4gICAgfVxuICB9XG4gIHJlbG9hZFJlc291cmNlcyhsbmdzLCBucywgY2FsbGJhY2spIHtcbiAgICBjb25zdCBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgaWYgKCFsbmdzKSBsbmdzID0gdGhpcy5sYW5ndWFnZXM7XG4gICAgaWYgKCFucykgbnMgPSB0aGlzLm9wdGlvbnMubnM7XG4gICAgaWYgKCFjYWxsYmFjaykgY2FsbGJhY2sgPSBub29wO1xuICAgIHRoaXMuc2VydmljZXMuYmFja2VuZENvbm5lY3Rvci5yZWxvYWQobG5ncywgbnMsIGVyciA9PiB7XG4gICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICBjYWxsYmFjayhlcnIpO1xuICAgIH0pO1xuICAgIHJldHVybiBkZWZlcnJlZDtcbiAgfVxuICB1c2UobW9kdWxlKSB7XG4gICAgaWYgKCFtb2R1bGUpIHRocm93IG5ldyBFcnJvcignWW91IGFyZSBwYXNzaW5nIGFuIHVuZGVmaW5lZCBtb2R1bGUhIFBsZWFzZSBjaGVjayB0aGUgb2JqZWN0IHlvdSBhcmUgcGFzc2luZyB0byBpMThuZXh0LnVzZSgpJyk7XG4gICAgaWYgKCFtb2R1bGUudHlwZSkgdGhyb3cgbmV3IEVycm9yKCdZb3UgYXJlIHBhc3NpbmcgYSB3cm9uZyBtb2R1bGUhIFBsZWFzZSBjaGVjayB0aGUgb2JqZWN0IHlvdSBhcmUgcGFzc2luZyB0byBpMThuZXh0LnVzZSgpJyk7XG4gICAgaWYgKG1vZHVsZS50eXBlID09PSAnYmFja2VuZCcpIHtcbiAgICAgIHRoaXMubW9kdWxlcy5iYWNrZW5kID0gbW9kdWxlO1xuICAgIH1cbiAgICBpZiAobW9kdWxlLnR5cGUgPT09ICdsb2dnZXInIHx8IG1vZHVsZS5sb2cgJiYgbW9kdWxlLndhcm4gJiYgbW9kdWxlLmVycm9yKSB7XG4gICAgICB0aGlzLm1vZHVsZXMubG9nZ2VyID0gbW9kdWxlO1xuICAgIH1cbiAgICBpZiAobW9kdWxlLnR5cGUgPT09ICdsYW5ndWFnZURldGVjdG9yJykge1xuICAgICAgdGhpcy5tb2R1bGVzLmxhbmd1YWdlRGV0ZWN0b3IgPSBtb2R1bGU7XG4gICAgfVxuICAgIGlmIChtb2R1bGUudHlwZSA9PT0gJ2kxOG5Gb3JtYXQnKSB7XG4gICAgICB0aGlzLm1vZHVsZXMuaTE4bkZvcm1hdCA9IG1vZHVsZTtcbiAgICB9XG4gICAgaWYgKG1vZHVsZS50eXBlID09PSAncG9zdFByb2Nlc3NvcicpIHtcbiAgICAgIHBvc3RQcm9jZXNzb3IuYWRkUG9zdFByb2Nlc3Nvcihtb2R1bGUpO1xuICAgIH1cbiAgICBpZiAobW9kdWxlLnR5cGUgPT09ICdmb3JtYXR0ZXInKSB7XG4gICAgICB0aGlzLm1vZHVsZXMuZm9ybWF0dGVyID0gbW9kdWxlO1xuICAgIH1cbiAgICBpZiAobW9kdWxlLnR5cGUgPT09ICczcmRQYXJ0eScpIHtcbiAgICAgIHRoaXMubW9kdWxlcy5leHRlcm5hbC5wdXNoKG1vZHVsZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHNldFJlc29sdmVkTGFuZ3VhZ2UobCkge1xuICAgIGlmICghbCB8fCAhdGhpcy5sYW5ndWFnZXMpIHJldHVybjtcbiAgICBpZiAoWydjaW1vZGUnLCAnZGV2J10uaW5kZXhPZihsKSA+IC0xKSByZXR1cm47XG4gICAgZm9yIChsZXQgbGkgPSAwOyBsaSA8IHRoaXMubGFuZ3VhZ2VzLmxlbmd0aDsgbGkrKykge1xuICAgICAgY29uc3QgbG5nSW5MbmdzID0gdGhpcy5sYW5ndWFnZXNbbGldO1xuICAgICAgaWYgKFsnY2ltb2RlJywgJ2RldiddLmluZGV4T2YobG5nSW5MbmdzKSA+IC0xKSBjb250aW51ZTtcbiAgICAgIGlmICh0aGlzLnN0b3JlLmhhc0xhbmd1YWdlU29tZVRyYW5zbGF0aW9ucyhsbmdJbkxuZ3MpKSB7XG4gICAgICAgIHRoaXMucmVzb2x2ZWRMYW5ndWFnZSA9IGxuZ0luTG5ncztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNoYW5nZUxhbmd1YWdlKGxuZywgY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcbiAgICB0aGlzLmlzTGFuZ3VhZ2VDaGFuZ2luZ1RvID0gbG5nO1xuICAgIGNvbnN0IGRlZmVycmVkID0gZGVmZXIoKTtcbiAgICB0aGlzLmVtaXQoJ2xhbmd1YWdlQ2hhbmdpbmcnLCBsbmcpO1xuICAgIGNvbnN0IHNldExuZ1Byb3BzID0gbCA9PiB7XG4gICAgICB0aGlzLmxhbmd1YWdlID0gbDtcbiAgICAgIHRoaXMubGFuZ3VhZ2VzID0gdGhpcy5zZXJ2aWNlcy5sYW5ndWFnZVV0aWxzLnRvUmVzb2x2ZUhpZXJhcmNoeShsKTtcbiAgICAgIHRoaXMucmVzb2x2ZWRMYW5ndWFnZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuc2V0UmVzb2x2ZWRMYW5ndWFnZShsKTtcbiAgICB9O1xuICAgIGNvbnN0IGRvbmUgPSAoZXJyLCBsKSA9PiB7XG4gICAgICBpZiAobCkge1xuICAgICAgICBzZXRMbmdQcm9wcyhsKTtcbiAgICAgICAgdGhpcy50cmFuc2xhdG9yLmNoYW5nZUxhbmd1YWdlKGwpO1xuICAgICAgICB0aGlzLmlzTGFuZ3VhZ2VDaGFuZ2luZ1RvID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmVtaXQoJ2xhbmd1YWdlQ2hhbmdlZCcsIGwpO1xuICAgICAgICB0aGlzLmxvZ2dlci5sb2coJ2xhbmd1YWdlQ2hhbmdlZCcsIGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pc0xhbmd1YWdlQ2hhbmdpbmdUbyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGRlZmVycmVkLnJlc29sdmUoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMyLnQoLi4uYXJndW1lbnRzKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhlcnIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi50KC4uLmFyZ3VtZW50cyk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IHNldExuZyA9IGxuZ3MgPT4ge1xuICAgICAgaWYgKCFsbmcgJiYgIWxuZ3MgJiYgdGhpcy5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yKSBsbmdzID0gW107XG4gICAgICBjb25zdCBsID0gdHlwZW9mIGxuZ3MgPT09ICdzdHJpbmcnID8gbG5ncyA6IHRoaXMuc2VydmljZXMubGFuZ3VhZ2VVdGlscy5nZXRCZXN0TWF0Y2hGcm9tQ29kZXMobG5ncyk7XG4gICAgICBpZiAobCkge1xuICAgICAgICBpZiAoIXRoaXMubGFuZ3VhZ2UpIHtcbiAgICAgICAgICBzZXRMbmdQcm9wcyhsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMudHJhbnNsYXRvci5sYW5ndWFnZSkgdGhpcy50cmFuc2xhdG9yLmNoYW5nZUxhbmd1YWdlKGwpO1xuICAgICAgICBpZiAodGhpcy5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yICYmIHRoaXMuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3Rvci5jYWNoZVVzZXJMYW5ndWFnZSkgdGhpcy5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yLmNhY2hlVXNlckxhbmd1YWdlKGwpO1xuICAgICAgfVxuICAgICAgdGhpcy5sb2FkUmVzb3VyY2VzKGwsIGVyciA9PiB7XG4gICAgICAgIGRvbmUoZXJyLCBsKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYgKCFsbmcgJiYgdGhpcy5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yICYmICF0aGlzLnNlcnZpY2VzLmxhbmd1YWdlRGV0ZWN0b3IuYXN5bmMpIHtcbiAgICAgIHNldExuZyh0aGlzLnNlcnZpY2VzLmxhbmd1YWdlRGV0ZWN0b3IuZGV0ZWN0KCkpO1xuICAgIH0gZWxzZSBpZiAoIWxuZyAmJiB0aGlzLnNlcnZpY2VzLmxhbmd1YWdlRGV0ZWN0b3IgJiYgdGhpcy5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yLmFzeW5jKSB7XG4gICAgICBpZiAodGhpcy5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yLmRldGVjdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yLmRldGVjdCgpLnRoZW4oc2V0TG5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3Rvci5kZXRlY3Qoc2V0TG5nKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2V0TG5nKGxuZyk7XG4gICAgfVxuICAgIHJldHVybiBkZWZlcnJlZDtcbiAgfVxuICBnZXRGaXhlZFQobG5nLCBucywga2V5UHJlZml4KSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG4gICAgY29uc3QgZml4ZWRUID0gZnVuY3Rpb24gKGtleSwgb3B0cykge1xuICAgICAgbGV0IG9wdGlvbnM7XG4gICAgICBpZiAodHlwZW9mIG9wdHMgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgcmVzdCA9IG5ldyBBcnJheShfbGVuMyA+IDIgPyBfbGVuMyAtIDIgOiAwKSwgX2tleTMgPSAyOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgICAgICAgcmVzdFtfa2V5MyAtIDJdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zID0gX3RoaXMzLm9wdGlvbnMub3ZlcmxvYWRUcmFuc2xhdGlvbk9wdGlvbkhhbmRsZXIoW2tleSwgb3B0c10uY29uY2F0KHJlc3QpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgLi4ub3B0c1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgb3B0aW9ucy5sbmcgPSBvcHRpb25zLmxuZyB8fCBmaXhlZFQubG5nO1xuICAgICAgb3B0aW9ucy5sbmdzID0gb3B0aW9ucy5sbmdzIHx8IGZpeGVkVC5sbmdzO1xuICAgICAgb3B0aW9ucy5ucyA9IG9wdGlvbnMubnMgfHwgZml4ZWRULm5zO1xuICAgICAgb3B0aW9ucy5rZXlQcmVmaXggPSBvcHRpb25zLmtleVByZWZpeCB8fCBrZXlQcmVmaXggfHwgZml4ZWRULmtleVByZWZpeDtcbiAgICAgIGNvbnN0IGtleVNlcGFyYXRvciA9IF90aGlzMy5vcHRpb25zLmtleVNlcGFyYXRvciB8fCAnLic7XG4gICAgICBsZXQgcmVzdWx0S2V5O1xuICAgICAgaWYgKG9wdGlvbnMua2V5UHJlZml4ICYmIEFycmF5LmlzQXJyYXkoa2V5KSkge1xuICAgICAgICByZXN1bHRLZXkgPSBrZXkubWFwKGsgPT4gYCR7b3B0aW9ucy5rZXlQcmVmaXh9JHtrZXlTZXBhcmF0b3J9JHtrfWApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0S2V5ID0gb3B0aW9ucy5rZXlQcmVmaXggPyBgJHtvcHRpb25zLmtleVByZWZpeH0ke2tleVNlcGFyYXRvcn0ke2tleX1gIDoga2V5O1xuICAgICAgfVxuICAgICAgcmV0dXJuIF90aGlzMy50KHJlc3VsdEtleSwgb3B0aW9ucyk7XG4gICAgfTtcbiAgICBpZiAodHlwZW9mIGxuZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGZpeGVkVC5sbmcgPSBsbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZpeGVkVC5sbmdzID0gbG5nO1xuICAgIH1cbiAgICBmaXhlZFQubnMgPSBucztcbiAgICBmaXhlZFQua2V5UHJlZml4ID0ga2V5UHJlZml4O1xuICAgIHJldHVybiBmaXhlZFQ7XG4gIH1cbiAgdCgpIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2xhdG9yICYmIHRoaXMudHJhbnNsYXRvci50cmFuc2xhdGUoLi4uYXJndW1lbnRzKTtcbiAgfVxuICBleGlzdHMoKSB7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNsYXRvciAmJiB0aGlzLnRyYW5zbGF0b3IuZXhpc3RzKC4uLmFyZ3VtZW50cyk7XG4gIH1cbiAgc2V0RGVmYXVsdE5hbWVzcGFjZShucykge1xuICAgIHRoaXMub3B0aW9ucy5kZWZhdWx0TlMgPSBucztcbiAgfVxuICBoYXNMb2FkZWROYW1lc3BhY2UobnMpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgaWYgKCF0aGlzLmlzSW5pdGlhbGl6ZWQpIHtcbiAgICAgIHRoaXMubG9nZ2VyLndhcm4oJ2hhc0xvYWRlZE5hbWVzcGFjZTogaTE4bmV4dCB3YXMgbm90IGluaXRpYWxpemVkJywgdGhpcy5sYW5ndWFnZXMpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIXRoaXMubGFuZ3VhZ2VzIHx8ICF0aGlzLmxhbmd1YWdlcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMubG9nZ2VyLndhcm4oJ2hhc0xvYWRlZE5hbWVzcGFjZTogaTE4bi5sYW5ndWFnZXMgd2VyZSB1bmRlZmluZWQgb3IgZW1wdHknLCB0aGlzLmxhbmd1YWdlcyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGxuZyA9IG9wdGlvbnMubG5nIHx8IHRoaXMucmVzb2x2ZWRMYW5ndWFnZSB8fCB0aGlzLmxhbmd1YWdlc1swXTtcbiAgICBjb25zdCBmYWxsYmFja0xuZyA9IHRoaXMub3B0aW9ucyA/IHRoaXMub3B0aW9ucy5mYWxsYmFja0xuZyA6IGZhbHNlO1xuICAgIGNvbnN0IGxhc3RMbmcgPSB0aGlzLmxhbmd1YWdlc1t0aGlzLmxhbmd1YWdlcy5sZW5ndGggLSAxXTtcbiAgICBpZiAobG5nLnRvTG93ZXJDYXNlKCkgPT09ICdjaW1vZGUnKSByZXR1cm4gdHJ1ZTtcbiAgICBjb25zdCBsb2FkTm90UGVuZGluZyA9IChsLCBuKSA9PiB7XG4gICAgICBjb25zdCBsb2FkU3RhdGUgPSB0aGlzLnNlcnZpY2VzLmJhY2tlbmRDb25uZWN0b3Iuc3RhdGVbYCR7bH18JHtufWBdO1xuICAgICAgcmV0dXJuIGxvYWRTdGF0ZSA9PT0gLTEgfHwgbG9hZFN0YXRlID09PSAyO1xuICAgIH07XG4gICAgaWYgKG9wdGlvbnMucHJlY2hlY2spIHtcbiAgICAgIGNvbnN0IHByZVJlc3VsdCA9IG9wdGlvbnMucHJlY2hlY2sodGhpcywgbG9hZE5vdFBlbmRpbmcpO1xuICAgICAgaWYgKHByZVJlc3VsdCAhPT0gdW5kZWZpbmVkKSByZXR1cm4gcHJlUmVzdWx0O1xuICAgIH1cbiAgICBpZiAodGhpcy5oYXNSZXNvdXJjZUJ1bmRsZShsbmcsIG5zKSkgcmV0dXJuIHRydWU7XG4gICAgaWYgKCF0aGlzLnNlcnZpY2VzLmJhY2tlbmRDb25uZWN0b3IuYmFja2VuZCB8fCB0aGlzLm9wdGlvbnMucmVzb3VyY2VzICYmICF0aGlzLm9wdGlvbnMucGFydGlhbEJ1bmRsZWRMYW5ndWFnZXMpIHJldHVybiB0cnVlO1xuICAgIGlmIChsb2FkTm90UGVuZGluZyhsbmcsIG5zKSAmJiAoIWZhbGxiYWNrTG5nIHx8IGxvYWROb3RQZW5kaW5nKGxhc3RMbmcsIG5zKSkpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBsb2FkTmFtZXNwYWNlcyhucywgY2FsbGJhY2spIHtcbiAgICBjb25zdCBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMubnMpIHtcbiAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBucyA9PT0gJ3N0cmluZycpIG5zID0gW25zXTtcbiAgICBucy5mb3JFYWNoKG4gPT4ge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5ucy5pbmRleE9mKG4pIDwgMCkgdGhpcy5vcHRpb25zLm5zLnB1c2gobik7XG4gICAgfSk7XG4gICAgdGhpcy5sb2FkUmVzb3VyY2VzKGVyciA9PiB7XG4gICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKGVycik7XG4gICAgfSk7XG4gICAgcmV0dXJuIGRlZmVycmVkO1xuICB9XG4gIGxvYWRMYW5ndWFnZXMobG5ncywgY2FsbGJhY2spIHtcbiAgICBjb25zdCBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgaWYgKHR5cGVvZiBsbmdzID09PSAnc3RyaW5nJykgbG5ncyA9IFtsbmdzXTtcbiAgICBjb25zdCBwcmVsb2FkZWQgPSB0aGlzLm9wdGlvbnMucHJlbG9hZCB8fCBbXTtcbiAgICBjb25zdCBuZXdMbmdzID0gbG5ncy5maWx0ZXIobG5nID0+IHByZWxvYWRlZC5pbmRleE9mKGxuZykgPCAwKTtcbiAgICBpZiAoIW5ld0xuZ3MubGVuZ3RoKSB7XG4gICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIHRoaXMub3B0aW9ucy5wcmVsb2FkID0gcHJlbG9hZGVkLmNvbmNhdChuZXdMbmdzKTtcbiAgICB0aGlzLmxvYWRSZXNvdXJjZXMoZXJyID0+IHtcbiAgICAgIGRlZmVycmVkLnJlc29sdmUoKTtcbiAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soZXJyKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZGVmZXJyZWQ7XG4gIH1cbiAgZGlyKGxuZykge1xuICAgIGlmICghbG5nKSBsbmcgPSB0aGlzLnJlc29sdmVkTGFuZ3VhZ2UgfHwgKHRoaXMubGFuZ3VhZ2VzICYmIHRoaXMubGFuZ3VhZ2VzLmxlbmd0aCA+IDAgPyB0aGlzLmxhbmd1YWdlc1swXSA6IHRoaXMubGFuZ3VhZ2UpO1xuICAgIGlmICghbG5nKSByZXR1cm4gJ3J0bCc7XG4gICAgY29uc3QgcnRsTG5ncyA9IFsnYXInLCAnc2h1JywgJ3NxcicsICdzc2gnLCAneGFhJywgJ3loZCcsICd5dWQnLCAnYWFvJywgJ2FiaCcsICdhYnYnLCAnYWNtJywgJ2FjcScsICdhY3cnLCAnYWN4JywgJ2FjeScsICdhZGYnLCAnYWRzJywgJ2FlYicsICdhZWMnLCAnYWZiJywgJ2FqcCcsICdhcGMnLCAnYXBkJywgJ2FyYicsICdhcnEnLCAnYXJzJywgJ2FyeScsICdhcnonLCAnYXV6JywgJ2F2bCcsICdheWgnLCAnYXlsJywgJ2F5bicsICdheXAnLCAnYmJ6JywgJ3BnYScsICdoZScsICdpdycsICdwcycsICdwYnQnLCAncGJ1JywgJ3BzdCcsICdwcnAnLCAncHJkJywgJ3VnJywgJ3VyJywgJ3lkZCcsICd5ZHMnLCAneWloJywgJ2ppJywgJ3lpJywgJ2hibycsICdtZW4nLCAneG1uJywgJ2ZhJywgJ2pwcicsICdwZW8nLCAncGVzJywgJ3BycycsICdkdicsICdzYW0nLCAnY2tiJ107XG4gICAgY29uc3QgbGFuZ3VhZ2VVdGlscyA9IHRoaXMuc2VydmljZXMgJiYgdGhpcy5zZXJ2aWNlcy5sYW5ndWFnZVV0aWxzIHx8IG5ldyBMYW5ndWFnZVV0aWwoZ2V0KCkpO1xuICAgIHJldHVybiBydGxMbmdzLmluZGV4T2YobGFuZ3VhZ2VVdGlscy5nZXRMYW5ndWFnZVBhcnRGcm9tQ29kZShsbmcpKSA+IC0xIHx8IGxuZy50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJy1hcmFiJykgPiAxID8gJ3J0bCcgOiAnbHRyJztcbiAgfVxuICBzdGF0aWMgY3JlYXRlSW5zdGFuY2UoKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIGxldCBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHJldHVybiBuZXcgSTE4bihvcHRpb25zLCBjYWxsYmFjayk7XG4gIH1cbiAgY2xvbmVJbnN0YW5jZSgpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgbGV0IGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBub29wO1xuICAgIGNvbnN0IGZvcmtSZXNvdXJjZVN0b3JlID0gb3B0aW9ucy5mb3JrUmVzb3VyY2VTdG9yZTtcbiAgICBpZiAoZm9ya1Jlc291cmNlU3RvcmUpIGRlbGV0ZSBvcHRpb25zLmZvcmtSZXNvdXJjZVN0b3JlO1xuICAgIGNvbnN0IG1lcmdlZE9wdGlvbnMgPSB7XG4gICAgICAuLi50aGlzLm9wdGlvbnMsXG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgLi4ue1xuICAgICAgICBpc0Nsb25lOiB0cnVlXG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBjbG9uZSA9IG5ldyBJMThuKG1lcmdlZE9wdGlvbnMpO1xuICAgIGlmIChvcHRpb25zLmRlYnVnICE9PSB1bmRlZmluZWQgfHwgb3B0aW9ucy5wcmVmaXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgY2xvbmUubG9nZ2VyID0gY2xvbmUubG9nZ2VyLmNsb25lKG9wdGlvbnMpO1xuICAgIH1cbiAgICBjb25zdCBtZW1iZXJzVG9Db3B5ID0gWydzdG9yZScsICdzZXJ2aWNlcycsICdsYW5ndWFnZSddO1xuICAgIG1lbWJlcnNUb0NvcHkuZm9yRWFjaChtID0+IHtcbiAgICAgIGNsb25lW21dID0gdGhpc1ttXTtcbiAgICB9KTtcbiAgICBjbG9uZS5zZXJ2aWNlcyA9IHtcbiAgICAgIC4uLnRoaXMuc2VydmljZXNcbiAgICB9O1xuICAgIGNsb25lLnNlcnZpY2VzLnV0aWxzID0ge1xuICAgICAgaGFzTG9hZGVkTmFtZXNwYWNlOiBjbG9uZS5oYXNMb2FkZWROYW1lc3BhY2UuYmluZChjbG9uZSlcbiAgICB9O1xuICAgIGlmIChmb3JrUmVzb3VyY2VTdG9yZSkge1xuICAgICAgY2xvbmUuc3RvcmUgPSBuZXcgUmVzb3VyY2VTdG9yZSh0aGlzLnN0b3JlLmRhdGEsIG1lcmdlZE9wdGlvbnMpO1xuICAgICAgY2xvbmUuc2VydmljZXMucmVzb3VyY2VTdG9yZSA9IGNsb25lLnN0b3JlO1xuICAgIH1cbiAgICBjbG9uZS50cmFuc2xhdG9yID0gbmV3IFRyYW5zbGF0b3IoY2xvbmUuc2VydmljZXMsIG1lcmdlZE9wdGlvbnMpO1xuICAgIGNsb25lLnRyYW5zbGF0b3Iub24oJyonLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNCA+IDEgPyBfbGVuNCAtIDEgOiAwKSwgX2tleTQgPSAxOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgICAgIGFyZ3NbX2tleTQgLSAxXSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gICAgICB9XG4gICAgICBjbG9uZS5lbWl0KGV2ZW50LCAuLi5hcmdzKTtcbiAgICB9KTtcbiAgICBjbG9uZS5pbml0KG1lcmdlZE9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICBjbG9uZS50cmFuc2xhdG9yLm9wdGlvbnMgPSBtZXJnZWRPcHRpb25zO1xuICAgIGNsb25lLnRyYW5zbGF0b3IuYmFja2VuZENvbm5lY3Rvci5zZXJ2aWNlcy51dGlscyA9IHtcbiAgICAgIGhhc0xvYWRlZE5hbWVzcGFjZTogY2xvbmUuaGFzTG9hZGVkTmFtZXNwYWNlLmJpbmQoY2xvbmUpXG4gICAgfTtcbiAgICByZXR1cm4gY2xvbmU7XG4gIH1cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnMsXG4gICAgICBzdG9yZTogdGhpcy5zdG9yZSxcbiAgICAgIGxhbmd1YWdlOiB0aGlzLmxhbmd1YWdlLFxuICAgICAgbGFuZ3VhZ2VzOiB0aGlzLmxhbmd1YWdlcyxcbiAgICAgIHJlc29sdmVkTGFuZ3VhZ2U6IHRoaXMucmVzb2x2ZWRMYW5ndWFnZVxuICAgIH07XG4gIH1cbn1cbmNvbnN0IGluc3RhbmNlID0gSTE4bi5jcmVhdGVJbnN0YW5jZSgpO1xuaW5zdGFuY2UuY3JlYXRlSW5zdGFuY2UgPSBJMThuLmNyZWF0ZUluc3RhbmNlO1xuXG5jb25zdCBjcmVhdGVJbnN0YW5jZSA9IGluc3RhbmNlLmNyZWF0ZUluc3RhbmNlO1xuY29uc3QgZGlyID0gaW5zdGFuY2UuZGlyO1xuY29uc3QgaW5pdCA9IGluc3RhbmNlLmluaXQ7XG5jb25zdCBsb2FkUmVzb3VyY2VzID0gaW5zdGFuY2UubG9hZFJlc291cmNlcztcbmNvbnN0IHJlbG9hZFJlc291cmNlcyA9IGluc3RhbmNlLnJlbG9hZFJlc291cmNlcztcbmNvbnN0IHVzZSA9IGluc3RhbmNlLnVzZTtcbmNvbnN0IGNoYW5nZUxhbmd1YWdlID0gaW5zdGFuY2UuY2hhbmdlTGFuZ3VhZ2U7XG5jb25zdCBnZXRGaXhlZFQgPSBpbnN0YW5jZS5nZXRGaXhlZFQ7XG5jb25zdCB0ID0gaW5zdGFuY2UudDtcbmNvbnN0IGV4aXN0cyA9IGluc3RhbmNlLmV4aXN0cztcbmNvbnN0IHNldERlZmF1bHROYW1lc3BhY2UgPSBpbnN0YW5jZS5zZXREZWZhdWx0TmFtZXNwYWNlO1xuY29uc3QgaGFzTG9hZGVkTmFtZXNwYWNlID0gaW5zdGFuY2UuaGFzTG9hZGVkTmFtZXNwYWNlO1xuY29uc3QgbG9hZE5hbWVzcGFjZXMgPSBpbnN0YW5jZS5sb2FkTmFtZXNwYWNlcztcbmNvbnN0IGxvYWRMYW5ndWFnZXMgPSBpbnN0YW5jZS5sb2FkTGFuZ3VhZ2VzO1xuXG5leHBvcnQgeyBjaGFuZ2VMYW5ndWFnZSwgY3JlYXRlSW5zdGFuY2UsIGluc3RhbmNlIGFzIGRlZmF1bHQsIGRpciwgZXhpc3RzLCBnZXRGaXhlZFQsIGhhc0xvYWRlZE5hbWVzcGFjZSwgaW5pdCwgbG9hZExhbmd1YWdlcywgbG9hZE5hbWVzcGFjZXMsIGxvYWRSZXNvdXJjZXMsIHJlbG9hZFJlc291cmNlcywgc2V0RGVmYXVsdE5hbWVzcGFjZSwgdCwgdXNlIH07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXMgKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXNzaWdubWVudCAqL1xuXG5pbXBvcnQgeyBjcmVhdGVJbnN0YW5jZSB9IGZyb20gJ2kxOG5leHQnO1xuaW1wb3J0IHRlc3RUcmFuc2xhdGlvbiBmcm9tICcuL25hLmpzb24nO1xuaW1wb3J0IGVuVHJhbnNsYXRpb24gZnJvbSAnLi9lbi5qc29uJztcbmltcG9ydCBmclRyYW5zbGF0aW9uIGZyb20gJy4vZnIuanNvbic7XG5cbmV4cG9ydCBjb25zdCByZXNvdXJjZXMgPSB7XG4gIGVuOiB7XG4gICAgYnBtbkxpc3Q6IGVuVHJhbnNsYXRpb24sXG4gIH0sXG4gIGZyOiB7XG4gICAgYnBtbkxpc3Q6IGZyVHJhbnNsYXRpb24sXG4gIH0sXG4gIG5hOiB7XG4gICAgYnBtbkxpc3Q6IHRlc3RUcmFuc2xhdGlvbixcbiAgfSxcbn07XG5cbmNvbnN0IGkxOG4gPSBjcmVhdGVJbnN0YW5jZSh7XG4gIGZhbGxiYWNrTG5nOiAnZW4nLFxuICBkZWJ1ZzogdHJ1ZSxcbiAgY2xlYW5Db2RlOiB0cnVlLFxuICByZXNvdXJjZXMsXG4gIGRlZmF1bHROUzogJ2JwbW5MaXN0Jyxcbn0pO1xuXG5pMThuLmluaXQoKTtcblxuZXhwb3J0IGRlZmF1bHQgaTE4bjtcbiIsIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlcyAqL1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L3Jlc3RyaWN0LXRlbXBsYXRlLWV4cHJlc3Npb25zICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11c2UtYmVmb3JlLWRlZmluZSAqL1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1jYWxsICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3MgKi9cbmltcG9ydCBpMThuIGZyb20gJy4uL2kxOG5leHQvbG9jYWxpemF0aW9uLmNvbmZpZ3VyZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyYW5zbGF0aW9uU2VydmljZSB7XG4gIHByaXZhdGUgc3RhdGljIF90cmFuc2xhdGlvblNlcnZpY2U6IFRyYW5zbGF0aW9uU2VydmljZTtcblxuICBwdWJsaWMgc3RhdGljIGFzeW5jIHNldExhbmd1YWdlKGxvY2FsZTogc3RyaW5nKSB7XG4gICAgYXdhaXQgaTE4bi5jaGFuZ2VMYW5ndWFnZShsb2NhbGUpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBUcmFuc2xhdGlvblNlcnZpY2Uge1xuICAgIGlmICghdGhpcy5fdHJhbnNsYXRpb25TZXJ2aWNlKSB7XG4gICAgICB0aGlzLl90cmFuc2xhdGlvblNlcnZpY2UgPSBuZXcgVHJhbnNsYXRpb25TZXJ2aWNlKCk7XG4gICAgICAvLyBNYWtlIHVzZSBvZiB0aGUgQnJvd3NlcidzIGxhbmd1YWdlIHNldHRpbmcuXG4gICAgICBpMThuLmNoYW5nZUxhbmd1YWdlKG5hdmlnYXRvci5sYW5ndWFnZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zbGF0aW9uU2VydmljZTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgcmVzZXRJbnN0YW5jZSgpOiBUcmFuc2xhdGlvblNlcnZpY2Uge1xuICAgIHRoaXMuX3RyYW5zbGF0aW9uU2VydmljZSA9IG51bGw7XG5cbiAgICByZXR1cm4gdGhpcy5nZXRJbnN0YW5jZSgpO1xuICB9XG5cbiAgcHVibGljIGdldFRyYW5zbGF0aW9uKGtleTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBkYXRhID0gYCR7aTE4bi50KGtleSl9YDtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRUcmFuc2xhdGlvbkFuZFJlcGxhY2UoXG4gICAga2V5OiBzdHJpbmcsXG4gICAgcmVwbGFjZW1lbnRWYWx1ZXM6IHN0cmluZ1tdXG4gICk6IHN0cmluZyB7XG4gICAgbGV0IHRyYW5zID0gYCR7aTE4bi50KGtleSl9YDtcbiAgICByZXBsYWNlbWVudFZhbHVlcy5mb3JFYWNoKCh2LCBpKSA9PiB7XG4gICAgICB0cmFucyA9IHRyYW5zLnJlcGxhY2UoYHske2l9fWAsIHYpO1xuICAgIH0pO1xuICAgIHJldHVybiB0cmFucztcbiAgfVxufVxuIiwiaW1wb3J0IHsgU2NvcGVkRWxlbWVudHNNaXhpbiB9IGZyb20gJ0BvcGVuLXdjL3Njb3BlZC1lbGVtZW50cyc7XG5pbXBvcnQgeyBDU1NSZXN1bHQsIExpdEVsZW1lbnQsIGh0bWwgfSBmcm9tICdsaXQnO1xuaW1wb3J0IHsgc3R5bGVzIH0gZnJvbSAnLi9waS1oZWFkZXIuc3R5bGVzJztcbmltcG9ydCBUcmFuc2xhdGlvblNlcnZpY2UgZnJvbSAnLi4vLi4vc2VydmljZXMvdHJhbnNsYXRpb24uc2VydmljZSc7XG5cbmV4cG9ydCBjbGFzcyBQaUhlYWRlciBleHRlbmRzIFNjb3BlZEVsZW1lbnRzTWl4aW4oTGl0RWxlbWVudCkge1xuICBzdGF0aWMgZ2V0IHNjb3BlZEVsZW1lbnRzKCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIHN0YXRpYyBvdmVycmlkZSBnZXQgc3R5bGVzKCk6IENTU1Jlc3VsdFtdIHtcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9XG5cbiAgcHJpdmF0ZSBfdHJhbnNsYXRpb25TZXJ2aWNlOiBUcmFuc2xhdGlvblNlcnZpY2U7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl90cmFuc2xhdGlvblNlcnZpY2UgPSBUcmFuc2xhdGlvblNlcnZpY2UuZ2V0SW5zdGFuY2UoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gaHRtbGA8aGVhZGVyPlxuICAgICAgPGgxPiR7dGhpcy5fdHJhbnNsYXRpb25TZXJ2aWNlLmdldFRyYW5zbGF0aW9uKCdsaXN0LXByb2Nlc3MtbW9kZWxzJyl9PC9oMT5cbiAgICA8L2hlYWRlcj5gO1xuICB9XG59XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgaW50ZXJmYWNlIEhUTUxFbGVtZW50VGFnTmFtZU1hcCB7XG4gICAgJ3BpLWhlYWRlcic6IFBpSGVhZGVyO1xuICB9XG59XG4iLCJpbXBvcnR7XyRMSCBhcyBvfWZyb21cIi4vbGl0LWh0bWwuanNcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL2NvbnN0e0k6bH09byx0PW89Pm51bGw9PT1vfHxcIm9iamVjdFwiIT10eXBlb2YgbyYmXCJmdW5jdGlvblwiIT10eXBlb2YgbyxpPXtIVE1MOjEsU1ZHOjJ9LG49KG8sbCk9PnZvaWQgMD09PWw/dm9pZCAwIT09KG51bGw9PW8/dm9pZCAwOm8uXyRsaXRUeXBlJCk6KG51bGw9PW8/dm9pZCAwOm8uXyRsaXRUeXBlJCk9PT1sLGQ9bz0+dm9pZCAwIT09KG51bGw9PW8/dm9pZCAwOm8uXyRsaXREaXJlY3RpdmUkKSx2PW89Pm51bGw9PW8/dm9pZCAwOm8uXyRsaXREaXJlY3RpdmUkLGU9bz0+dm9pZCAwPT09by5zdHJpbmdzLGM9KCk9PmRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJcIikscj0obyx0LGkpPT57dmFyIG47Y29uc3QgZD1vLl8kQUEucGFyZW50Tm9kZSx2PXZvaWQgMD09PXQ/by5fJEFCOnQuXyRBQTtpZih2b2lkIDA9PT1pKXtjb25zdCB0PWQuaW5zZXJ0QmVmb3JlKGMoKSx2KSxuPWQuaW5zZXJ0QmVmb3JlKGMoKSx2KTtpPW5ldyBsKHQsbixvLG8ub3B0aW9ucyl9ZWxzZXtjb25zdCBsPWkuXyRBQi5uZXh0U2libGluZyx0PWkuXyRBTSxlPXQhPT1vO2lmKGUpe2xldCBsO251bGw9PT0obj1pLl8kQVEpfHx2b2lkIDA9PT1ufHxuLmNhbGwoaSxvKSxpLl8kQU09byx2b2lkIDAhPT1pLl8kQVAmJihsPW8uXyRBVSkhPT10Ll8kQVUmJmkuXyRBUChsKX1pZihsIT09dnx8ZSl7bGV0IG89aS5fJEFBO2Zvcig7byE9PWw7KXtjb25zdCBsPW8ubmV4dFNpYmxpbmc7ZC5pbnNlcnRCZWZvcmUobyx2KSxvPWx9fX1yZXR1cm4gaX0sdT0obyxsLHQ9byk9PihvLl8kQUkobCx0KSxvKSxmPXt9LHM9KG8sbD1mKT0+by5fJEFIPWwsbT1vPT5vLl8kQUgscD1vPT57dmFyIGw7bnVsbD09PShsPW8uXyRBUCl8fHZvaWQgMD09PWx8fGwuY2FsbChvLCExLCEwKTtsZXQgdD1vLl8kQUE7Y29uc3QgaT1vLl8kQUIubmV4dFNpYmxpbmc7Zm9yKDt0IT09aTspe2NvbnN0IG89dC5uZXh0U2libGluZzt0LnJlbW92ZSgpLHQ9b319LGE9bz0+e28uXyRBUigpfTtleHBvcnR7aSBhcyBUZW1wbGF0ZVJlc3VsdFR5cGUsYSBhcyBjbGVhclBhcnQsbSBhcyBnZXRDb21taXR0ZWRWYWx1ZSx2IGFzIGdldERpcmVjdGl2ZUNsYXNzLHIgYXMgaW5zZXJ0UGFydCxkIGFzIGlzRGlyZWN0aXZlUmVzdWx0LHQgYXMgaXNQcmltaXRpdmUsZSBhcyBpc1NpbmdsZUV4cHJlc3Npb24sbiBhcyBpc1RlbXBsYXRlUmVzdWx0LHAgYXMgcmVtb3ZlUGFydCx1IGFzIHNldENoaWxkUGFydFZhbHVlLHMgYXMgc2V0Q29tbWl0dGVkVmFsdWV9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlyZWN0aXZlLWhlbHBlcnMuanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmNvbnN0IHQ9e0FUVFJJQlVURToxLENISUxEOjIsUFJPUEVSVFk6MyxCT09MRUFOX0FUVFJJQlVURTo0LEVWRU5UOjUsRUxFTUVOVDo2fSxlPXQ9PiguLi5lKT0+KHtfJGxpdERpcmVjdGl2ZSQ6dCx2YWx1ZXM6ZX0pO2NsYXNzIGl7Y29uc3RydWN0b3IodCl7fWdldCBfJEFVKCl7cmV0dXJuIHRoaXMuXyRBTS5fJEFVfV8kQVQodCxlLGkpe3RoaXMuXyRDdD10LHRoaXMuXyRBTT1lLHRoaXMuXyRDaT1pfV8kQVModCxlKXtyZXR1cm4gdGhpcy51cGRhdGUodCxlKX11cGRhdGUodCxlKXtyZXR1cm4gdGhpcy5yZW5kZXIoLi4uZSl9fWV4cG9ydHtpIGFzIERpcmVjdGl2ZSx0IGFzIFBhcnRUeXBlLGUgYXMgZGlyZWN0aXZlfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpcmVjdGl2ZS5qcy5tYXBcbiIsImltcG9ydHtpc1NpbmdsZUV4cHJlc3Npb24gYXMgaX1mcm9tXCIuL2RpcmVjdGl2ZS1oZWxwZXJzLmpzXCI7aW1wb3J0e0RpcmVjdGl2ZSBhcyB0LFBhcnRUeXBlIGFzIGV9ZnJvbVwiLi9kaXJlY3RpdmUuanNcIjtleHBvcnR7RGlyZWN0aXZlLFBhcnRUeXBlLGRpcmVjdGl2ZX1mcm9tXCIuL2RpcmVjdGl2ZS5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovY29uc3Qgcz0oaSx0KT0+e3ZhciBlLG87Y29uc3Qgcj1pLl8kQU47aWYodm9pZCAwPT09cilyZXR1cm4hMTtmb3IoY29uc3QgaSBvZiByKW51bGw9PT0obz0oZT1pKS5fJEFPKXx8dm9pZCAwPT09b3x8by5jYWxsKGUsdCwhMSkscyhpLHQpO3JldHVybiEwfSxvPWk9PntsZXQgdCxlO2Rve2lmKHZvaWQgMD09PSh0PWkuXyRBTSkpYnJlYWs7ZT10Ll8kQU4sZS5kZWxldGUoaSksaT10fXdoaWxlKDA9PT0obnVsbD09ZT92b2lkIDA6ZS5zaXplKSl9LHI9aT0+e2ZvcihsZXQgdDt0PWkuXyRBTTtpPXQpe2xldCBlPXQuXyRBTjtpZih2b2lkIDA9PT1lKXQuXyRBTj1lPW5ldyBTZXQ7ZWxzZSBpZihlLmhhcyhpKSlicmVhaztlLmFkZChpKSxsKHQpfX07ZnVuY3Rpb24gbihpKXt2b2lkIDAhPT10aGlzLl8kQU4/KG8odGhpcyksdGhpcy5fJEFNPWkscih0aGlzKSk6dGhpcy5fJEFNPWl9ZnVuY3Rpb24gaChpLHQ9ITEsZT0wKXtjb25zdCByPXRoaXMuXyRBSCxuPXRoaXMuXyRBTjtpZih2b2lkIDAhPT1uJiYwIT09bi5zaXplKWlmKHQpaWYoQXJyYXkuaXNBcnJheShyKSlmb3IobGV0IGk9ZTtpPHIubGVuZ3RoO2krKylzKHJbaV0sITEpLG8ocltpXSk7ZWxzZSBudWxsIT1yJiYocyhyLCExKSxvKHIpKTtlbHNlIHModGhpcyxpKX1jb25zdCBsPWk9Pnt2YXIgdCxzLG8scjtpLnR5cGU9PWUuQ0hJTEQmJihudWxsIT09KHQ9KG89aSkuXyRBUCkmJnZvaWQgMCE9PXR8fChvLl8kQVA9aCksbnVsbCE9PShzPShyPWkpLl8kQVEpJiZ2b2lkIDAhPT1zfHwoci5fJEFRPW4pKX07Y2xhc3MgYyBleHRlbmRzIHR7Y29uc3RydWN0b3IoKXtzdXBlciguLi5hcmd1bWVudHMpLHRoaXMuXyRBTj12b2lkIDB9XyRBVChpLHQsZSl7c3VwZXIuXyRBVChpLHQsZSkscih0aGlzKSx0aGlzLmlzQ29ubmVjdGVkPWkuXyRBVX1fJEFPKGksdD0hMCl7dmFyIGUscjtpIT09dGhpcy5pc0Nvbm5lY3RlZCYmKHRoaXMuaXNDb25uZWN0ZWQ9aSxpP251bGw9PT0oZT10aGlzLnJlY29ubmVjdGVkKXx8dm9pZCAwPT09ZXx8ZS5jYWxsKHRoaXMpOm51bGw9PT0ocj10aGlzLmRpc2Nvbm5lY3RlZCl8fHZvaWQgMD09PXJ8fHIuY2FsbCh0aGlzKSksdCYmKHModGhpcyxpKSxvKHRoaXMpKX1zZXRWYWx1ZSh0KXtpZihpKHRoaXMuXyRDdCkpdGhpcy5fJEN0Ll8kQUkodCx0aGlzKTtlbHNle2NvbnN0IGk9Wy4uLnRoaXMuXyRDdC5fJEFIXTtpW3RoaXMuXyRDaV09dCx0aGlzLl8kQ3QuXyRBSShpLHRoaXMsMCl9fWRpc2Nvbm5lY3RlZCgpe31yZWNvbm5lY3RlZCgpe319ZXhwb3J0e2MgYXMgQXN5bmNEaXJlY3RpdmV9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXN5bmMtZGlyZWN0aXZlLmpzLm1hcFxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5jb25zdCB0PWFzeW5jKHQscyk9Pntmb3IgYXdhaXQoY29uc3QgaSBvZiB0KWlmKCExPT09YXdhaXQgcyhpKSlyZXR1cm59O2NsYXNzIHN7Y29uc3RydWN0b3IodCl7dGhpcy5HPXR9ZGlzY29ubmVjdCgpe3RoaXMuRz12b2lkIDB9cmVjb25uZWN0KHQpe3RoaXMuRz10fWRlcmVmKCl7cmV0dXJuIHRoaXMuR319Y2xhc3MgaXtjb25zdHJ1Y3Rvcigpe3RoaXMuWT12b2lkIDAsdGhpcy5aPXZvaWQgMH1nZXQoKXtyZXR1cm4gdGhpcy5ZfXBhdXNlKCl7dmFyIHQ7bnVsbCE9PSh0PXRoaXMuWSkmJnZvaWQgMCE9PXR8fCh0aGlzLlk9bmV3IFByb21pc2UoKHQ9PnRoaXMuWj10KSkpfXJlc3VtZSgpe3ZhciB0O251bGw9PT0odD10aGlzLlopfHx2b2lkIDA9PT10fHx0LmNhbGwodGhpcyksdGhpcy5ZPXRoaXMuWj12b2lkIDB9fWV4cG9ydHtpIGFzIFBhdXNlcixzIGFzIFBzZXVkb1dlYWtSZWYsdCBhcyBmb3JBd2FpdE9mfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByaXZhdGUtYXN5bmMtaGVscGVycy5qcy5tYXBcbiIsImltcG9ydHtub0NoYW5nZSBhcyB0fWZyb21cIi4uL2xpdC1odG1sLmpzXCI7aW1wb3J0e2lzUHJpbWl0aXZlIGFzIHN9ZnJvbVwiLi4vZGlyZWN0aXZlLWhlbHBlcnMuanNcIjtpbXBvcnR7QXN5bmNEaXJlY3RpdmUgYXMgaX1mcm9tXCIuLi9hc3luYy1kaXJlY3RpdmUuanNcIjtpbXBvcnR7UHNldWRvV2Vha1JlZiBhcyByLFBhdXNlciBhcyBlfWZyb21cIi4vcHJpdmF0ZS1hc3luYy1oZWxwZXJzLmpzXCI7aW1wb3J0e2RpcmVjdGl2ZSBhcyBvfWZyb21cIi4uL2RpcmVjdGl2ZS5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovY29uc3Qgbj10PT4hcyh0KSYmXCJmdW5jdGlvblwiPT10eXBlb2YgdC50aGVuLGg9MTA3Mzc0MTgyMztjbGFzcyBjIGV4dGVuZHMgaXtjb25zdHJ1Y3Rvcigpe3N1cGVyKC4uLmFyZ3VtZW50cyksdGhpcy5fJENfdD1oLHRoaXMuXyRDd3Q9W10sdGhpcy5fJENxPW5ldyByKHRoaXMpLHRoaXMuXyRDSz1uZXcgZX1yZW5kZXIoLi4ucyl7dmFyIGk7cmV0dXJuIG51bGwhPT0oaT1zLmZpbmQoKHQ9PiFuKHQpKSkpJiZ2b2lkIDAhPT1pP2k6dH11cGRhdGUocyxpKXtjb25zdCByPXRoaXMuXyRDd3Q7bGV0IGU9ci5sZW5ndGg7dGhpcy5fJEN3dD1pO2NvbnN0IG89dGhpcy5fJENxLGM9dGhpcy5fJENLO3RoaXMuaXNDb25uZWN0ZWR8fHRoaXMuZGlzY29ubmVjdGVkKCk7Zm9yKGxldCB0PTA7dDxpLmxlbmd0aCYmISh0PnRoaXMuXyRDX3QpO3QrKyl7Y29uc3Qgcz1pW3RdO2lmKCFuKHMpKXJldHVybiB0aGlzLl8kQ190PXQsczt0PGUmJnM9PT1yW3RdfHwodGhpcy5fJENfdD1oLGU9MCxQcm9taXNlLnJlc29sdmUocykudGhlbigoYXN5bmMgdD0+e2Zvcig7Yy5nZXQoKTspYXdhaXQgYy5nZXQoKTtjb25zdCBpPW8uZGVyZWYoKTtpZih2b2lkIDAhPT1pKXtjb25zdCByPWkuXyRDd3QuaW5kZXhPZihzKTtyPi0xJiZyPGkuXyRDX3QmJihpLl8kQ190PXIsaS5zZXRWYWx1ZSh0KSl9fSkpKX1yZXR1cm4gdH1kaXNjb25uZWN0ZWQoKXt0aGlzLl8kQ3EuZGlzY29ubmVjdCgpLHRoaXMuXyRDSy5wYXVzZSgpfXJlY29ubmVjdGVkKCl7dGhpcy5fJENxLnJlY29ubmVjdCh0aGlzKSx0aGlzLl8kQ0sucmVzdW1lKCl9fWNvbnN0IG09byhjKTtleHBvcnR7YyBhcyBVbnRpbERpcmVjdGl2ZSxtIGFzIHVudGlsfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVudGlsLmpzLm1hcFxuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGl0JztcbmltcG9ydCB7IGNvbW1vblN0eWxlcyB9IGZyb20gJy4uLy4uL2NvbW1vbi5zdHlsZXMnO1xuXG5jb25zdCBiYXNlID0gY3NzYFxuICA6aG9zdCB7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IHN0eWxlcyA9IFtjb21tb25TdHlsZXMsIGJhc2VdO1xuIiwiaW1wb3J0e25vdGhpbmcgYXMgdCxub0NoYW5nZSBhcyBpfWZyb21cIi4uL2xpdC1odG1sLmpzXCI7aW1wb3J0e0RpcmVjdGl2ZSBhcyByLFBhcnRUeXBlIGFzIHMsZGlyZWN0aXZlIGFzIG59ZnJvbVwiLi4vZGlyZWN0aXZlLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9jbGFzcyBlIGV4dGVuZHMgcntjb25zdHJ1Y3RvcihpKXtpZihzdXBlcihpKSx0aGlzLmV0PXQsaS50eXBlIT09cy5DSElMRCl0aHJvdyBFcnJvcih0aGlzLmNvbnN0cnVjdG9yLmRpcmVjdGl2ZU5hbWUrXCIoKSBjYW4gb25seSBiZSB1c2VkIGluIGNoaWxkIGJpbmRpbmdzXCIpfXJlbmRlcihyKXtpZihyPT09dHx8bnVsbD09cilyZXR1cm4gdGhpcy5mdD12b2lkIDAsdGhpcy5ldD1yO2lmKHI9PT1pKXJldHVybiByO2lmKFwic3RyaW5nXCIhPXR5cGVvZiByKXRocm93IEVycm9yKHRoaXMuY29uc3RydWN0b3IuZGlyZWN0aXZlTmFtZStcIigpIGNhbGxlZCB3aXRoIGEgbm9uLXN0cmluZyB2YWx1ZVwiKTtpZihyPT09dGhpcy5ldClyZXR1cm4gdGhpcy5mdDt0aGlzLmV0PXI7Y29uc3Qgcz1bcl07cmV0dXJuIHMucmF3PXMsdGhpcy5mdD17XyRsaXRUeXBlJDp0aGlzLmNvbnN0cnVjdG9yLnJlc3VsdFR5cGUsc3RyaW5nczpzLHZhbHVlczpbXX19fWUuZGlyZWN0aXZlTmFtZT1cInVuc2FmZUhUTUxcIixlLnJlc3VsdFR5cGU9MTtjb25zdCBvPW4oZSk7ZXhwb3J0e2UgYXMgVW5zYWZlSFRNTERpcmVjdGl2ZSxvIGFzIHVuc2FmZUhUTUx9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dW5zYWZlLWh0bWwuanMubWFwXG4iLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuL1N1YmplY3QnO1xudmFyIEJlaGF2aW9yU3ViamVjdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEJlaGF2aW9yU3ViamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBCZWhhdmlvclN1YmplY3QoX3ZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl92YWx1ZSA9IF92YWx1ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQmVoYXZpb3JTdWJqZWN0LnByb3RvdHlwZSwgXCJ2YWx1ZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBfc3VwZXIucHJvdG90eXBlLl9zdWJzY3JpYmUuY2FsbCh0aGlzLCBzdWJzY3JpYmVyKTtcbiAgICAgICAgIXN1YnNjcmlwdGlvbi5jbG9zZWQgJiYgc3Vic2NyaWJlci5uZXh0KHRoaXMuX3ZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9O1xuICAgIEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGhhc0Vycm9yID0gX2EuaGFzRXJyb3IsIHRocm93bkVycm9yID0gX2EudGhyb3duRXJyb3IsIF92YWx1ZSA9IF9hLl92YWx1ZTtcbiAgICAgICAgaWYgKGhhc0Vycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyB0aHJvd25FcnJvcjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgIHJldHVybiBfdmFsdWU7XG4gICAgfTtcbiAgICBCZWhhdmlvclN1YmplY3QucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5uZXh0LmNhbGwodGhpcywgKHRoaXMuX3ZhbHVlID0gdmFsdWUpKTtcbiAgICB9O1xuICAgIHJldHVybiBCZWhhdmlvclN1YmplY3Q7XG59KFN1YmplY3QpKTtcbmV4cG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QmVoYXZpb3JTdWJqZWN0LmpzLm1hcCIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBjb21tb25FbSwgY29tbW9uU3R5bGVzIH0gZnJvbSAnLi4vLi4vY29tbW9uLnN0eWxlcyc7XG5cbmNvbnN0IGJhc2UgPSBjc3NgXG4gIC5tb2RhbC1jb250ZW50IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICAgIGdhcDogJHtjb21tb25FbS5weDE1fTtcbiAgfVxuXG4gIC5ib2xkZWQge1xuICAgIGZvbnQtd2VpZ2h0OiB2YXIoLS1uZS1yZWYtZm9udC13ZWlnaHQtYm9sZCk7XG4gIH1cblxuICAubWVzc2FnZS1sYWJlbCB7XG4gICAgZmxleC1ncm93OiAxO1xuICAgIGZvbnQtZmFtaWx5OiB2YXIoLS1uZS1yZWYtZm9udC1mYW1pbHktb3Blbi1zYW5zKTtcbiAgICBmb250LXdlaWdodDogdmFyKC0tbmUtcmVmLWZvbnQtd2VpZ2h0LXJlZ3VsYXIpO1xuICAgIGZvbnQtc2l6ZTogdmFyKC0tbmUtcmVmLWZvbnQtc2l6ZS0wNCk7XG4gICAgbGluZS1oZWlnaHQ6IHZhcigtLW5lLXJlZi1saW5lLWhlaWdodC1zbWFsKTtcbiAgICBjb2xvcjogdmFyKC0tcHJpbWFyeS10ZXh0LWNvbG9yKTtcbiAgICBwYWRkaW5nLXRvcDogJHtjb21tb25FbS5weDh9O1xuICB9XG5cbiAgLmljb24ge1xuICAgIGZsZXgtc2hyaW5rOiAwO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgYWxpZ24tY29udGVudDogY2VudGVyO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgd2lkdGg6IDUwcHg7XG4gICAgaGVpZ2h0OiA1MHB4O1xuICAgIGNvbG9yOiB2YXIoLS1ueC1yZWQtNjApO1xuICB9XG4gIC5tb2RhbC1mb290ZXIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgICBmbGV4LXdyYXA6IG5vd3JhcDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgYWxpZ24tY29udGVudDogY2VudGVyO1xuICB9XG5cbiAgLm1vZGFsLWZvb3RlciAuYnV0dG9uIHtcbiAgICBtYXJnaW4tbGVmdDogJHtjb21tb25FbS5weDEyfTtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IHN0eWxlcyA9IFtjb21tb25TdHlsZXMsIGJhc2VdO1xuIiwiaW1wb3J0IHsgU2NvcGVkRWxlbWVudHNNaXhpbiB9IGZyb20gJ0BvcGVuLXdjL3Njb3BlZC1lbGVtZW50cyc7XG5pbXBvcnQgeyB1bnNhZmVIVE1MIH0gZnJvbSAnbGl0L2RpcmVjdGl2ZXMvdW5zYWZlLWh0bWwuanMnO1xuaW1wb3J0IHsgQ1NTUmVzdWx0LCBodG1sLCBMaXRFbGVtZW50LCBUZW1wbGF0ZVJlc3VsdCB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBwcm9wZXJ0eSB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc3R5bGVzIH0gZnJvbSAnLi9waS1yZXRyeS1lcnJvci1tb2RhbC5zdHlsZXMnO1xuaW1wb3J0IFRyYW5zbGF0aW9uU2VydmljZSBmcm9tICcuLi8uLi9zZXJ2aWNlcy90cmFuc2xhdGlvbi5zZXJ2aWNlJztcblxuZXhwb3J0IHR5cGUgUmV0cnlQcm9jZXNzRGVjaXNpb24gPSAnY2xvc2UnIHwgJ3JldHJ5JztcblxuLyoqXG4gKiBAdGFnIHBpLXJldHJ5LWVycm9yLW1vZGFsXG4gKiBAdGFnbmFtZSBwaS1yZXRyeS1lcnJvci1tb2RhbFxuICpcbiAqL1xuZXhwb3J0IGNsYXNzIFBpUmV0cnlFcnJvck1vZGFsIGV4dGVuZHMgU2NvcGVkRWxlbWVudHNNaXhpbihMaXRFbGVtZW50KSB7XG4gIHN0YXRpYyBnZXQgc2NvcGVkRWxlbWVudHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIEV2ZW4gaWYgZWxlbWVudHMgYXJlIGdsb2JhbGx5IGRlY2xhcmVkIHdlIHN0aWxsIG5lZWQgdG8gaW5jbHVkZSB0aGVtIGhlcmUuXG4gICAgICAvLyBodHRwczovL29wZW4td2Mub3JnL2RvY3MvZGV2ZWxvcG1lbnQvc2NvcGVkLWVsZW1lbnRzL1xuICAgICAgJ25lLWJ1dHRvbi1zZXQnOiBjdXN0b21FbGVtZW50cy5nZXQoJ25lLWJ1dHRvbi1zZXQnKSxcbiAgICAgICduZS1tb2RhbCc6IGN1c3RvbUVsZW1lbnRzLmdldCgnbmUtbW9kYWwnKSxcbiAgICAgICduZS1idXR0b24nOiBjdXN0b21FbGVtZW50cy5nZXQoJ25lLWJ1dHRvbicpLFxuICAgICAgJ25lLWljb24nOiBjdXN0b21FbGVtZW50cy5nZXQoJ25lLWljb24nKSxcbiAgICB9O1xuICB9XG5cbiAgLy8gU3R5bGVzXG4gIHN0YXRpYyBvdmVycmlkZSBnZXQgc3R5bGVzKCk6IENTU1Jlc3VsdFtdIHtcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9XG5cbiAgcHJpdmF0ZSBfdHJhbnNsYXRpb25TZXJ2aWNlOiBUcmFuc2xhdGlvblNlcnZpY2U7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl90cmFuc2xhdGlvblNlcnZpY2UgPSBUcmFuc2xhdGlvblNlcnZpY2UuZ2V0SW5zdGFuY2UoKTtcbiAgfVxuXG4gIHB1YmxpYyBjbG9zZUV2ZW50ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxSZXRyeVByb2Nlc3NEZWNpc2lvbj4obnVsbCk7XG5cbiAgLy8gUHJvcGVydGllc1xuICBAcHJvcGVydHkoeyB0eXBlOiBCb29sZWFuLCByZWZsZWN0OiB0cnVlIH0pXG4gIHB1YmxpYyBvcGVuITogYm9vbGVhbjtcblxuICBAcHJvcGVydHkoeyB0eXBlOiBTdHJpbmcsIHJlZmxlY3Q6IHRydWUgfSlcbiAgcHVibGljIGhlYWRlcjogc3RyaW5nO1xuXG4gIEBwcm9wZXJ0eSh7IHR5cGU6IFN0cmluZywgcmVmbGVjdDogdHJ1ZSB9KVxuICBwdWJsaWMgZXJyb3JNZXNzYWdlOiBzdHJpbmc7XG5cbiAgQHByb3BlcnR5KHsgdHlwZTogTnVtYmVyLCByZWZsZWN0OiB0cnVlIH0pXG4gIHB1YmxpYyByZXRyeUxpbWl0ID0gMztcblxuICBAcHJvcGVydHkoeyB0eXBlOiBOdW1iZXIsIHJlZmxlY3Q6IHRydWUgfSlcbiAgcHVibGljIHJldHJ5Q291bnQgPSAwO1xuXG4gIEBwcm9wZXJ0eSh7IHR5cGU6IFN0cmluZywgcmVmbGVjdDogdHJ1ZSB9KVxuICBwdWJsaWMgZXJyb3JDb2RlOiBzdHJpbmc7XG5cbiAgQHByb3BlcnR5KHsgdHlwZTogQm9vbGVhbiwgcmVmbGVjdDogdHJ1ZSB9KVxuICBwdWJsaWMgY2FuUmV0cnkgPSBmYWxzZTtcblxuICAvLyBFdmVudHNcbiAgcHJpdmF0ZSBfb25DbG9zZSA9ICgpOiB2b2lkID0+IHtcbiAgICB0aGlzLmNsb3NlRXZlbnQubmV4dCgnY2xvc2UnKTtcbiAgfTtcblxuICBwcml2YXRlIF9vblJldHJ5Q2xpY2sgPSAoKTogdm9pZCA9PiB7XG4gICAgdGhpcy5jbG9zZUV2ZW50Lm5leHQoJ3JldHJ5Jyk7XG4gIH07XG5cbiAgLy8gTWV0aG9kc1xuICBwcml2YXRlIGdldEVycm9yTWVzc2FnZSgpOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgaWYgKHRoaXMuZXJyb3JNZXNzYWdlKSByZXR1cm4gaHRtbGA8cD4ke3RoaXMuZXJyb3JNZXNzYWdlfTwvcD5gO1xuXG4gICAgc3dpdGNoICh0aGlzLmVycm9yQ29kZSkge1xuICAgICAgY2FzZSAnNDAwJzpcbiAgICAgICAgcmV0dXJuIGh0bWxgJHt1bnNhZmVIVE1MKFxuICAgICAgICAgIHRoaXMuX3RyYW5zbGF0aW9uU2VydmljZS5nZXRUcmFuc2xhdGlvbignZXJyb3ItNDAwJylcbiAgICAgICAgKX1gO1xuICAgICAgY2FzZSAnNDAxJzpcbiAgICAgICAgcmV0dXJuIGh0bWxgJHt1bnNhZmVIVE1MKFxuICAgICAgICAgIHRoaXMuX3RyYW5zbGF0aW9uU2VydmljZS5nZXRUcmFuc2xhdGlvbignZXJyb3ItNDAxJylcbiAgICAgICAgKX1gO1xuICAgICAgY2FzZSAnNDAzJzpcbiAgICAgICAgcmV0dXJuIGh0bWxgJHt1bnNhZmVIVE1MKFxuICAgICAgICAgIHRoaXMuX3RyYW5zbGF0aW9uU2VydmljZS5nZXRUcmFuc2xhdGlvbignZXJyb3ItNDAzJylcbiAgICAgICAgKX1gO1xuICAgICAgY2FzZSAnNDA0JzpcbiAgICAgICAgcmV0dXJuIGh0bWxgJHt1bnNhZmVIVE1MKFxuICAgICAgICAgIHRoaXMuX3RyYW5zbGF0aW9uU2VydmljZS5nZXRUcmFuc2xhdGlvbignZXJyb3ItNDA0JylcbiAgICAgICAgKX1gO1xuICAgICAgY2FzZSAnNTAwJzpcbiAgICAgICAgcmV0dXJuIGh0bWxgJHt1bnNhZmVIVE1MKFxuICAgICAgICAgIHRoaXMuX3RyYW5zbGF0aW9uU2VydmljZS5nZXRUcmFuc2xhdGlvbignZXJyb3ItNTAwJylcbiAgICAgICAgKX1gO1xuICAgICAgY2FzZSAnNTAyJzpcbiAgICAgICAgcmV0dXJuIGh0bWxgJHt1bnNhZmVIVE1MKFxuICAgICAgICAgIHRoaXMuX3RyYW5zbGF0aW9uU2VydmljZS5nZXRUcmFuc2xhdGlvbignZXJyb3ItNTAyJylcbiAgICAgICAgKX1gO1xuICAgICAgY2FzZSAnNTAzJzpcbiAgICAgICAgcmV0dXJuIGh0bWxgJHt1bnNhZmVIVE1MKFxuICAgICAgICAgIHRoaXMuX3RyYW5zbGF0aW9uU2VydmljZS5nZXRUcmFuc2xhdGlvbignZXJyb3ItNTAzJylcbiAgICAgICAgKX1gO1xuICAgICAgY2FzZSAnNTA0JzpcbiAgICAgICAgcmV0dXJuIGh0bWxgJHt1bnNhZmVIVE1MKFxuICAgICAgICAgIHRoaXMuX3RyYW5zbGF0aW9uU2VydmljZS5nZXRUcmFuc2xhdGlvbignZXJyb3ItNTA0JylcbiAgICAgICAgKX1gO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGh0bWxgJHt1bnNhZmVIVE1MKFxuICAgICAgICAgIHRoaXMuX3RyYW5zbGF0aW9uU2VydmljZS5nZXRUcmFuc2xhdGlvbignZXJyb3ItZGVmYXVsdCcpXG4gICAgICAgICl9YDtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIGh0bWxgPG5lLW1vZGFsXG4gICAgICA/b3Blbj0ke3RoaXMub3Blbn1cbiAgICAgIGhlYWRlcj0ke3RoaXMuaGVhZGVyfVxuICAgICAgQG5lLWNsb3NlPSR7dGhpcy5fb25DbG9zZX1cbiAgICAgID48ZGl2IGNsYXNzPVwibW9kYWwtY29udGVudFwiPlxuICAgICAgICA8c3BhbiBjbGFzcz1cImljb25cIj5cbiAgICAgICAgICA8bmUtaWNvbiB0eXBlPVwiZGFuZ2VyRXhjbGFtYXRpb25cIiBjbGFzcz1cImljb24tZmlsbFwiPjwvbmUtaWNvbj5cbiAgICAgICAgPC9zcGFuPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJtZXNzYWdlLWxhYmVsXCI+JHt0aGlzLmdldEVycm9yTWVzc2FnZSgpfTwvbGFiZWw+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgc2xvdD1cImZvb3RlclwiIGNsYXNzPVwibW9kYWwtZm9vdGVyIHJpZ2h0LXN0YXJ0XCI+XG4gICAgICAgIDxuZS1idXR0b25cbiAgICAgICAgICBjbGFzcz1cImJ1dHRvbiBjbG9zZVwiXG4gICAgICAgICAgdmFyaWFudD0ke3RoaXMucmV0cnlDb3VudCA8IHRoaXMucmV0cnlMaW1pdCAmJiB0aGlzLmNhblJldHJ5XG4gICAgICAgICAgICA/ICdzZWNvbmRhcnknXG4gICAgICAgICAgICA6ICdwcmltYXJ5J31cbiAgICAgICAgICBAY2xpY2s9JHt0aGlzLl9vbkNsb3NlfVxuICAgICAgICAgID4ke3RoaXMuX3RyYW5zbGF0aW9uU2VydmljZS5nZXRUcmFuc2xhdGlvbignY2xvc2UtdGV4dCcpfTwvbmUtYnV0dG9uXG4gICAgICAgID5cbiAgICAgICAgJHt0aGlzLnJldHJ5Q291bnQgPCB0aGlzLnJldHJ5TGltaXQgJiYgdGhpcy5jYW5SZXRyeVxuICAgICAgICAgID8gaHRtbGA8bmUtYnV0dG9uXG4gICAgICAgICAgICAgIGNsYXNzPVwiYnV0dG9uIHJldHJ5XCJcbiAgICAgICAgICAgICAgdmFyaWFudD1cInByaW1hcnlcIlxuICAgICAgICAgICAgICBAY2xpY2s9JHt0aGlzLl9vblJldHJ5Q2xpY2t9XG4gICAgICAgICAgICAgID4ke3RoaXMuX3RyYW5zbGF0aW9uU2VydmljZS5nZXRUcmFuc2xhdGlvbihcbiAgICAgICAgICAgICAgICAncmV0cnktdGV4dCdcbiAgICAgICAgICAgICAgKX08L25lLWJ1dHRvblxuICAgICAgICAgICAgPmBcbiAgICAgICAgICA6IG51bGx9XG4gICAgICA8L2Rpdj48L25lLW1vZGFsXG4gICAgPmA7XG4gIH1cbn1cblxuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgSFRNTEVsZW1lbnRUYWdOYW1lTWFwIHtcbiAgICAncGktcmV0cnktZXJyb3ItbW9kYWwnOiBQaVJldHJ5RXJyb3JNb2RhbDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgU2NvcGVkRWxlbWVudHNNaXhpbiB9IGZyb20gJ0BvcGVuLXdjL3Njb3BlZC1lbGVtZW50cyc7XG5pbXBvcnQgeyBDU1NSZXN1bHQsIGh0bWwsIExpdEVsZW1lbnQsIFRlbXBsYXRlUmVzdWx0IH0gZnJvbSAnbGl0JztcbmltcG9ydCB7IHF1ZXJ5LCBzdGF0ZSB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IHVudGlsIH0gZnJvbSAnbGl0L2RpcmVjdGl2ZXMvdW50aWwuanMnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBQcm9jZXNzRHRvLCBQcm9jZXNzUmVzcG9uc2VEdG8gfSBmcm9tICcuLi8uLi9tb2RlbHMvcHJvY2Vzcy1yZXNwb25zZS1kdG8nO1xuaW1wb3J0IHsgVGFibGVSb3dFdmVudERldGFpbCB9IGZyb20gJy4uLy4uL21vZGVscy90YWJsZVJvd0V2ZW50RGV0YWlsJztcbmltcG9ydCBFdmVudFNlcnZpY2UgZnJvbSAnLi4vLi4vc2VydmljZXMvZXZlbnQuc2VydmljZSc7XG5pbXBvcnQgUHJvY2Vzc2VzQXBpU2VydmljZSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9wcm9jZXNzZXMtYXBpLnNlcnZpY2UnO1xuaW1wb3J0IHsgc3R5bGVzIH0gZnJvbSAnLi9waS1saXN0LWNvbXBvbmVudC5zdHlsZXMnO1xuaW1wb3J0IHtcbiAgUGlSZXRyeUVycm9yTW9kYWwsXG4gIFJldHJ5UHJvY2Vzc0RlY2lzaW9uLFxufSBmcm9tICcuLi9waS1yZXRyeS1lcnJvci1tb2RhbC9waS1yZXRyeS1lcnJvci1tb2RhbCc7XG5pbXBvcnQgVHJhbnNsYXRpb25TZXJ2aWNlIGZyb20gJy4uLy4uL3NlcnZpY2VzL3RyYW5zbGF0aW9uLnNlcnZpY2UnO1xuXG5cbmludGVyZmFjZSBDb2x1bW5IZWFkZXI8VD4ge1xuICAvLyB0aGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgaW4gdGhlIHJvd3MgdGhhdCB3aWxsIGJlIHVzZWQgYXMgZGlzcGxheSB0ZXh0XG4gIHByb3BlcnR5Pzoga2V5b2YgVDtcbiAgdGl0bGU/OiBzdHJpbmc7XG4gIHNvcnRhYmxlPzogYm9vbGVhbjtcbiAgc29ydGVkPzogYm9vbGVhbjtcbiAgc29ydERpcmVjdGlvbj86IHN0cmluZztcbn1cbi8qKlxuICogQHRhZyBwaS1saXN0LWNvbXBvbmVudFxuICogQHRhZ25hbWUgcGktbGlzdC1jb21wb25lbnRcbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBQaUxpc3RDb21wb25lbnQgZXh0ZW5kcyBTY29wZWRFbGVtZW50c01peGluKExpdEVsZW1lbnQpIHtcblxuICBzdGF0aWMgZ2V0IHNjb3BlZEVsZW1lbnRzKCkge1xuICAgIHJldHVybiB7XG4gICAgICAncGktcmV0cnktZXJyb3ItbW9kYWwnOiBQaVJldHJ5RXJyb3JNb2RhbCxcbiAgICAgICduZS1kYXRhLXRhYmxlJzogY3VzdG9tRWxlbWVudHMuZ2V0KCduZS1kYXRhLXRhYmxlJyksXG4gICAgICAnbmUtYnV0dG9uJzogY3VzdG9tRWxlbWVudHMuZ2V0KCduZS1idXR0b24nKSxcbiAgICAgICduZS1sYWJlbCc6IGN1c3RvbUVsZW1lbnRzLmdldCgnbmUtbGFiZWwnKSxcbiAgICAgICduZS1zdGF0dXMtb3ZlcmxheSc6IGN1c3RvbUVsZW1lbnRzLmdldCgnbmUtc3RhdHVzLW92ZXJsYXknKSxcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIG92ZXJyaWRlIGdldCBzdHlsZXMoKTogQ1NTUmVzdWx0W10ge1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH1cblxuICBwcml2YXRlIF9wcm9jZXNzQXBpU2VydmljZTogUHJvY2Vzc2VzQXBpU2VydmljZTtcblxuICBwcml2YXRlIF9ldmVudFNlcnZpY2U6IEV2ZW50U2VydmljZTtcblxuICBwcml2YXRlIF9pbml0aWFsaXplZFN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gIHByaXZhdGUgX29wZW5Qcm9jZXNzU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgcHJpdmF0ZSBfdHJhbnNsYXRpb25TZXJ2aWNlOiBUcmFuc2xhdGlvblNlcnZpY2U7XG5cbiAgcHJpdmF0ZSBfaGVhZGVyczogQ29sdW1uSGVhZGVyPFByb2Nlc3NEdG8+W107XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fcHJvY2Vzc0FwaVNlcnZpY2UgPSBQcm9jZXNzZXNBcGlTZXJ2aWNlLmdldEluc3RhbmNlKCk7XG4gICAgdGhpcy5fZXZlbnRTZXJ2aWNlID0gRXZlbnRTZXJ2aWNlLmdldEluc3RhbmNlKCk7XG4gICAgdGhpcy5fdHJhbnNsYXRpb25TZXJ2aWNlID0gVHJhbnNsYXRpb25TZXJ2aWNlLmdldEluc3RhbmNlKCk7XG4gICAgdGhpcy5faGVhZGVycyA9IFt7XG4gICAgICBwcm9wZXJ0eTogJ3RpdGxlJyxcbiAgICAgIHR5cGU6ICdoeXBlcmxpbmsnLFxuICAgICAgdGl0bGU6ICdNb2RlbCBuYW1lJyxcbiAgICAgIHNvcnRhYmxlOiBmYWxzZSxcbiAgICB9IGFzIENvbHVtbkhlYWRlcjxQcm9jZXNzRHRvPixcbiAgICB7XG4gICAgICBwcm9wZXJ0eTogJ3ZlcnNpb24nLFxuICAgICAgdGl0bGU6ICdWZXJzaW9uJyxcbiAgICAgIHNvcnRhYmxlOiBmYWxzZSxcbiAgICB9IGFzIENvbHVtbkhlYWRlcjxQcm9jZXNzRHRvPixcbiAgICB7XG4gICAgICBwcm9wZXJ0eTogJ3Byb2Nlc3NHcm91cE5hbWUnLFxuICAgICAgdGl0bGU6ICdQcm9jZXNzIGdyb3VwJyxcbiAgICAgIHNvcnRhYmxlOiBmYWxzZSxcbiAgICAgIHNvcnREaXJlY3Rpb246ICdkZXNjJyxcbiAgICB9IGFzIENvbHVtbkhlYWRlcjxQcm9jZXNzRHRvPixcbiAgICB7XG4gICAgICBwcm9wZXJ0eTogJ293bmVyTmFtZScsXG4gICAgICB0aXRsZTogJ01vZGVsIG93bmVyJyxcbiAgICAgIHNvcnRhYmxlOiBmYWxzZSxcbiAgICAgIHNvcnREaXJlY3Rpb246ICdkZXNjJyxcbiAgICB9IGFzIENvbHVtbkhlYWRlcjxQcm9jZXNzRHRvPixcbiAgICB7XG4gICAgICBwcm9wZXJ0eTogJ2V4cGVydE5hbWUnLFxuICAgICAgdGl0bGU6ICdNb2RlbCBleHBlcnQnLFxuICAgICAgc29ydGFibGU6IGZhbHNlLFxuICAgICAgc29ydERpcmVjdGlvbjogJ2Rlc2MnLFxuICAgIH0gYXMgQ29sdW1uSGVhZGVyPFByb2Nlc3NEdG8+LFxuICAgIHtcbiAgICAgIHByb3BlcnR5OiAnbGFzdE1vZGlmaWVkJyxcbiAgICAgIHR5cGU6J2RhdGV0aW1lX3J0ZicsXG4gICAgICB0aXRsZTogJ01vZGlmaWVkIGRhdGUnLFxuICAgICAgc29ydGFibGU6IGZhbHNlLFxuICAgIH0gYXMgQ29sdW1uSGVhZGVyPFByb2Nlc3NEdG8+LF1cbiAgfVxuXG4gIEBxdWVyeSgnLnJldHJ5LW1vZGFsJylcbiAgcHJpdmF0ZSBfZXJyb3JSZXRyeU1vZGFsOiBQaVJldHJ5RXJyb3JNb2RhbDtcblxuICBAc3RhdGUoKVxuICBwcml2YXRlIF9wcm9jZXNzTGlzdFJlc3VsdDogUHJvbWlzZTxUZW1wbGF0ZVJlc3VsdD47XG5cbiAgQHN0YXRlKClcbiAgcHJpdmF0ZSBfc2hvd1N0YXR1c092ZXJsYXkgPSBmYWxzZTtcblxuICBAc3RhdGUoKVxuICBwcml2YXRlIF9zaG93RXJyb3JSZXRyeSA9IGZhbHNlO1xuXG4gIEBzdGF0ZSgpXG4gIHByaXZhdGUgX2NhblJldHJ5ID0gZmFsc2U7XG5cbiAgQHN0YXRlKClcbiAgcHJpdmF0ZSBfcmV0cnlDb3VudCA9IDA7XG5cbiAgQHN0YXRlKClcbiAgcHJpdmF0ZSBfZXJyb3JNZXNzYWdlOiBzdHJpbmc7XG5cbiAgX29uQ2VsbENsaWNrZWQgPSAoZTogQ3VzdG9tRXZlbnQpID0+IHtcbiAgICAvLyBjaGVjayBpZiBpdCB3YXMgdGhlIGZpcnN0IGNvbHVtbiB0aGF0IHdhcyBjbGlja2VkIGJlZm9yZSB3ZSAgcmFpc2UgdGhlIGV2ZW50LlxuICAgIGlmIChlLmRldGFpbCAmJiAoZS5kZXRhaWwgYXMgVGFibGVSb3dFdmVudERldGFpbCkuY29sdW1uID09PSAwKSB7XG4gICAgICB0aGlzLl9ldmVudFNlcnZpY2UudHJpZ2dlck9wZW5Qcm9jZXNzKGUpO1xuICAgIH1cbiAgfTtcblxuICBfb3BlblByb2Nlc3MgPSAoZGF0YTogVGFibGVSb3dFdmVudERldGFpbCkgPT4ge1xuICAgIEV2ZW50U2VydmljZS5maXJlRXh0ZXJuYWwodGhpcywgJ3BpLW9wZW4tcHJvY2VzcycsIHsgZGV0YWlsOiBkYXRhIH0pO1xuICB9O1xuXG4gIHByaXZhdGUgX29uSW5pdGlhbGl6ZWQgPSAoKTogdm9pZCA9PiB7XG4gICAgRXZlbnRTZXJ2aWNlLmZpcmVFeHRlcm5hbCh0aGlzLCAncGktaW5pdGlhbGl6ZWQnLCB7fSk7XG4gIH07XG5cbiAgcHJpdmF0ZSBfb25FcnJvclJldHJ5TW9kYWxDbG9zZSA9IChkZWNpc2lvbjogUmV0cnlQcm9jZXNzRGVjaXNpb24pID0+IHtcbiAgICBpZiAoZGVjaXNpb24pIHtcbiAgICAgIHRoaXMuX3Nob3dFcnJvclJldHJ5ID0gZmFsc2U7XG4gICAgICBzd2l0Y2ggKGRlY2lzaW9uKSB7XG4gICAgICAgIGNhc2UgJ2Nsb3NlJzoge1xuICAgICAgICAgIEV2ZW50U2VydmljZS5maXJlRXh0ZXJuYWwodGhpcywgJ3BpLWNvbXBsZXRlZCcsIHt9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdyZXRyeSc6IHtcbiAgICAgICAgICB0aGlzLl9wcm9jZXNzTGlzdFJlc3VsdCA9IHRoaXMuZmV0Y2hEYXRhKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcHJpdmF0ZSBfc29ydFByb2Nlc3NlcyhkdG86IFByb2Nlc3NSZXNwb25zZUR0bykge1xuICAgIGR0by52YWx1ZS5zb3J0KFxuICAgICAgKGEsIGIpID0+XG4gICAgICAgIG5ldyBEYXRlKGIubGFzdE1vZGlmaWVkKS5nZXRUaW1lKCkgLSBuZXcgRGF0ZShhLmxhc3RNb2RpZmllZCkuZ2V0VGltZSgpXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgX3RhYmxlVGVtcGxhdGUoZHRvOiBQcm9jZXNzUmVzcG9uc2VEdG8pIHtcbiAgICBjb25zdCByb3dEYXRhID0gZHRvLnZhbHVlLm1hcCh4ID0+IHtcbiAgICAgIGNvbnN0IGMgPSB7cmVjb3JkOnh9O1xuICAgICAgcmV0dXJuIGM7XG4gICAgfSk7XG4gICBcbiAgICByZXR1cm4gaHRtbGA8bmUtZGF0YS10YWJsZVxuICAgIC5vcHRpb25zPVwiJHt7IHZhcmlhbnQ6ICdkZWZhdWx0JyxzaG93SGVhZGVyczp0cnVlIH19XCJcbiAgICAuaGVhZGVycz1cIiR7dGhpcy5faGVhZGVyc31cIlxuICAgIC5yb3dzPVwiJHtyb3dEYXRhfVwiXG4gICAgQG5lLWNsaWNrPSR7KGU6IEN1c3RvbUV2ZW50KSA9PiB7XG4gICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICB0aGlzLl9ldmVudFNlcnZpY2UudHJpZ2dlck9wZW5Qcm9jZXNzKGUpO1xuICAgICAgfX1cbiAgPlxuICA8L25lLWRhdGEtdGFibGU+YFxuICB9XG5cbiAgYXN5bmMgZmV0Y2hEYXRhKCkge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLl9zaG93U3RhdHVzT3ZlcmxheSA9IHRydWU7XG4gICAgICBjb25zdCBkdG8gPSBhd2FpdCB0aGlzLl9wcm9jZXNzQXBpU2VydmljZS5nZXRQcm9jZXNzTGlzdCgpO1xuICAgICAgdGhpcy5fc29ydFByb2Nlc3NlcyhkdG8pO1xuICAgICAgdGhpcy5fc2hvd1N0YXR1c092ZXJsYXkgPSBmYWxzZTtcbiAgICAgIHJldHVybiB0aGlzLl90YWJsZVRlbXBsYXRlKGR0byk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIHRoaXMuX2Vycm9yTWVzc2FnZSA9IGVycm9yLm1lc3NhZ2U7XG4gICAgICAgIGlmICh0aGlzLl9lcnJvck1lc3NhZ2UgPT09ICc0MDAnKSB7XG4gICAgICAgICAgdGhpcy5fY2FuUmV0cnkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Nob3dTdGF0dXNPdmVybGF5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3Nob3dFcnJvclJldHJ5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcmV0cnlDb3VudCArPSAxO1xuICAgICAgICByZXR1cm4gaHRtbGBgO1xuICAgICAgfVxuICAgICAgdGhpcy5fc2hvd1N0YXR1c092ZXJsYXkgPSBmYWxzZTtcbiAgICAgIHJldHVybiBodG1sYGA7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBodG1sYCR7dW50aWwodGhpcy5fcHJvY2Vzc0xpc3RSZXN1bHQsIGh0bWxgYCl9PG5lLXN0YXR1cy1vdmVybGF5XG4gICAgICAgID9zaG93PSR7dGhpcy5fc2hvd1N0YXR1c092ZXJsYXl9XG4gICAgICAgIHN0YXR1cy1kZWxheT1cIjUwMFwiXG4gICAgICA+PC9uZS1zdGF0dXMtb3ZlcmxheT5cbiAgICAgIDxwaS1yZXRyeS1lcnJvci1tb2RhbFxuICAgICAgICBjbGFzcz1cInJldHJ5LW1vZGFsXCJcbiAgICAgICAgP29wZW49JHt0aGlzLl9zaG93RXJyb3JSZXRyeX1cbiAgICAgICAgaGVhZGVyPSR7dGhpcy5fdHJhbnNsYXRpb25TZXJ2aWNlLmdldFRyYW5zbGF0aW9uKCdlcnJvci10aXRsZScpfVxuICAgICAgICBlcnJvckNvZGU9JHt0aGlzLl9lcnJvck1lc3NhZ2V9XG4gICAgICAgIHJldHJ5Q291bnQ9JHt0aGlzLl9yZXRyeUNvdW50fVxuICAgICAgICAuY2FuUmV0cnk9JHt0aGlzLl9jYW5SZXRyeX1cbiAgICAgID48L3BpLXJldHJ5LWVycm9yLW1vZGFsPmA7XG4gIH1cblxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBpZiAoc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2spIHtcbiAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgfVxuICAgIHRoaXMuX2luaXRpYWxpemVkU3Vic2NyaXB0aW9uID1cbiAgICAgIHRoaXMuX2V2ZW50U2VydmljZS5pbml0aWFsaXplZFN1YmplY3Quc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dDogdGhpcy5fb25Jbml0aWFsaXplZCxcbiAgICAgIH0pO1xuXG4gICAgdGhpcy5fb3BlblByb2Nlc3NTdWJzY3JpcHRpb24gPVxuICAgICAgdGhpcy5fZXZlbnRTZXJ2aWNlLm9wZW5Qcm9jZXNzU3Vic2NyaXB0aW9uLnN1YnNjcmliZSh7XG4gICAgICAgIG5leHQ6IHRoaXMuX29wZW5Qcm9jZXNzLFxuICAgICAgfSk7XG5cbiAgICB0aGlzLl9ldmVudFNlcnZpY2UudHJpZ2dlckluaXRpYWxpemVkKCk7XG4gICAgdGhpcy5fcHJvY2Vzc0xpc3RSZXN1bHQgPSB0aGlzLmZldGNoRGF0YSgpO1xuICB9XG5cbiAgZmlyc3RVcGRhdGVkKCkge1xuICAgIHRoaXMuX2Vycm9yUmV0cnlNb2RhbC5jbG9zZUV2ZW50LnN1YnNjcmliZSh7XG4gICAgICBuZXh0OiB0aGlzLl9vbkVycm9yUmV0cnlNb2RhbENsb3NlLFxuICAgIH0pO1xuICB9XG5cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgaWYgKHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKSB7XG4gICAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIH1cbiAgICB0aGlzLl9pbml0aWFsaXplZFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIHRoaXMuX29wZW5Qcm9jZXNzU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gIH1cbn1cblxuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgSFRNTEVsZW1lbnRUYWdOYW1lTWFwIHtcbiAgICAncGktbGlzdC1jb21wb25lbnQnOiBQaUxpc3RDb21wb25lbnQ7XG4gIH1cbn1cbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2xpdCc7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG5cclxuZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxuXG4vLyBDb21tb24gc3R5bGVzIGNhbiBiZSBhZGRlZCBoZXJlXG5jb25zdCBjb21tb25TdHlsZXMgPSBjc3NgXG4gIDpob3N0IHtcbiAgICBhbGw6IGluaXRpYWw7XG4gIH1cblxuICAuaGlkZGVuIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICB9XG5gO1xuXG5leHBvcnQgeyBfX2RlY29yYXRlIGFzIF8sIGNvbW1vblN0eWxlcyBhcyBjIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlLnN0eWxlcy0xMWQzOTE4MS5qcy5tYXBcbiIsImltcG9ydHtkZWNvcmF0ZVByb3BlcnR5IGFzIG99ZnJvbVwiLi9iYXNlLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9mdW5jdGlvbiBpKGksbil7cmV0dXJuIG8oe2Rlc2NyaXB0b3I6bz0+e2NvbnN0IHQ9e2dldCgpe3ZhciBvLG47cmV0dXJuIG51bGwhPT0obj1udWxsPT09KG89dGhpcy5yZW5kZXJSb290KXx8dm9pZCAwPT09bz92b2lkIDA6by5xdWVyeVNlbGVjdG9yKGkpKSYmdm9pZCAwIT09bj9uOm51bGx9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfTtpZihuKXtjb25zdCBuPVwic3ltYm9sXCI9PXR5cGVvZiBvP1N5bWJvbCgpOlwiX19cIitvO3QuZ2V0PWZ1bmN0aW9uKCl7dmFyIG8sdDtyZXR1cm4gdm9pZCAwPT09dGhpc1tuXSYmKHRoaXNbbl09bnVsbCE9PSh0PW51bGw9PT0obz10aGlzLnJlbmRlclJvb3QpfHx2b2lkIDA9PT1vP3ZvaWQgMDpvLnF1ZXJ5U2VsZWN0b3IoaSkpJiZ2b2lkIDAhPT10P3Q6bnVsbCksdGhpc1tuXX19cmV0dXJuIHR9fSl9ZXhwb3J0e2kgYXMgcXVlcnl9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cXVlcnkuanMubWFwXG4iLCJpbXBvcnR7bm9DaGFuZ2UgYXMgdH1mcm9tXCIuLi9saXQtaHRtbC5qc1wiO2ltcG9ydHtkaXJlY3RpdmUgYXMgaSxEaXJlY3RpdmUgYXMgcyxQYXJ0VHlwZSBhcyByfWZyb21cIi4uL2RpcmVjdGl2ZS5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovY29uc3Qgbz1pKGNsYXNzIGV4dGVuZHMgc3tjb25zdHJ1Y3Rvcih0KXt2YXIgaTtpZihzdXBlcih0KSx0LnR5cGUhPT1yLkFUVFJJQlVURXx8XCJjbGFzc1wiIT09dC5uYW1lfHwobnVsbD09PShpPXQuc3RyaW5ncyl8fHZvaWQgMD09PWk/dm9pZCAwOmkubGVuZ3RoKT4yKXRocm93IEVycm9yKFwiYGNsYXNzTWFwKClgIGNhbiBvbmx5IGJlIHVzZWQgaW4gdGhlIGBjbGFzc2AgYXR0cmlidXRlIGFuZCBtdXN0IGJlIHRoZSBvbmx5IHBhcnQgaW4gdGhlIGF0dHJpYnV0ZS5cIil9cmVuZGVyKHQpe3JldHVyblwiIFwiK09iamVjdC5rZXlzKHQpLmZpbHRlcigoaT0+dFtpXSkpLmpvaW4oXCIgXCIpK1wiIFwifXVwZGF0ZShpLFtzXSl7dmFyIHIsbztpZih2b2lkIDA9PT10aGlzLml0KXt0aGlzLml0PW5ldyBTZXQsdm9pZCAwIT09aS5zdHJpbmdzJiYodGhpcy5udD1uZXcgU2V0KGkuc3RyaW5ncy5qb2luKFwiIFwiKS5zcGxpdCgvXFxzLykuZmlsdGVyKCh0PT5cIlwiIT09dCkpKSk7Zm9yKGNvbnN0IHQgaW4gcylzW3RdJiYhKG51bGw9PT0ocj10aGlzLm50KXx8dm9pZCAwPT09cj92b2lkIDA6ci5oYXModCkpJiZ0aGlzLml0LmFkZCh0KTtyZXR1cm4gdGhpcy5yZW5kZXIocyl9Y29uc3QgZT1pLmVsZW1lbnQuY2xhc3NMaXN0O3RoaXMuaXQuZm9yRWFjaCgodD0+e3QgaW4gc3x8KGUucmVtb3ZlKHQpLHRoaXMuaXQuZGVsZXRlKHQpKX0pKTtmb3IoY29uc3QgdCBpbiBzKXtjb25zdCBpPSEhc1t0XTtpPT09dGhpcy5pdC5oYXModCl8fChudWxsPT09KG89dGhpcy5udCl8fHZvaWQgMD09PW8/dm9pZCAwOm8uaGFzKHQpKXx8KGk/KGUuYWRkKHQpLHRoaXMuaXQuYWRkKHQpKTooZS5yZW1vdmUodCksdGhpcy5pdC5kZWxldGUodCkpKX1yZXR1cm4gdH19KTtleHBvcnR7byBhcyBjbGFzc01hcH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGFzcy1tYXAuanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG5jb25zdCBkaXJlY3RpdmVzID0gbmV3IFdlYWtNYXAoKTtcbi8qKlxuICogQnJhbmRzIGEgZnVuY3Rpb24gYXMgYSBkaXJlY3RpdmUgZmFjdG9yeSBmdW5jdGlvbiBzbyB0aGF0IGxpdC1odG1sIHdpbGwgY2FsbFxuICogdGhlIGZ1bmN0aW9uIGR1cmluZyB0ZW1wbGF0ZSByZW5kZXJpbmcsIHJhdGhlciB0aGFuIHBhc3NpbmcgYXMgYSB2YWx1ZS5cbiAqXG4gKiBBIF9kaXJlY3RpdmVfIGlzIGEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIFBhcnQgYXMgYW4gYXJndW1lbnQuIEl0IGhhcyB0aGVcbiAqIHNpZ25hdHVyZTogYChwYXJ0OiBQYXJ0KSA9PiB2b2lkYC5cbiAqXG4gKiBBIGRpcmVjdGl2ZSBfZmFjdG9yeV8gaXMgYSBmdW5jdGlvbiB0aGF0IHRha2VzIGFyZ3VtZW50cyBmb3IgZGF0YSBhbmRcbiAqIGNvbmZpZ3VyYXRpb24gYW5kIHJldHVybnMgYSBkaXJlY3RpdmUuIFVzZXJzIG9mIGRpcmVjdGl2ZSB1c3VhbGx5IHJlZmVyIHRvXG4gKiB0aGUgZGlyZWN0aXZlIGZhY3RvcnkgYXMgdGhlIGRpcmVjdGl2ZS4gRm9yIGV4YW1wbGUsIFwiVGhlIHJlcGVhdCBkaXJlY3RpdmVcIi5cbiAqXG4gKiBVc3VhbGx5IGEgdGVtcGxhdGUgYXV0aG9yIHdpbGwgaW52b2tlIGEgZGlyZWN0aXZlIGZhY3RvcnkgaW4gdGhlaXIgdGVtcGxhdGVcbiAqIHdpdGggcmVsZXZhbnQgYXJndW1lbnRzLCB3aGljaCB3aWxsIHRoZW4gcmV0dXJuIGEgZGlyZWN0aXZlIGZ1bmN0aW9uLlxuICpcbiAqIEhlcmUncyBhbiBleGFtcGxlIG9mIHVzaW5nIHRoZSBgcmVwZWF0KClgIGRpcmVjdGl2ZSBmYWN0b3J5IHRoYXQgdGFrZXMgYW5cbiAqIGFycmF5IGFuZCBhIGZ1bmN0aW9uIHRvIHJlbmRlciBhbiBpdGVtOlxuICpcbiAqIGBgYGpzXG4gKiBodG1sYDx1bD48JHtyZXBlYXQoaXRlbXMsIChpdGVtKSA9PiBodG1sYDxsaT4ke2l0ZW19PC9saT5gKX08L3VsPmBcbiAqIGBgYFxuICpcbiAqIFdoZW4gYHJlcGVhdGAgaXMgaW52b2tlZCwgaXQgcmV0dXJucyBhIGRpcmVjdGl2ZSBmdW5jdGlvbiB0aGF0IGNsb3NlcyBvdmVyXG4gKiBgaXRlbXNgIGFuZCB0aGUgdGVtcGxhdGUgZnVuY3Rpb24uIFdoZW4gdGhlIG91dGVyIHRlbXBsYXRlIGlzIHJlbmRlcmVkLCB0aGVcbiAqIHJldHVybiBkaXJlY3RpdmUgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggdGhlIFBhcnQgZm9yIHRoZSBleHByZXNzaW9uLlxuICogYHJlcGVhdGAgdGhlbiBwZXJmb3JtcyBpdCdzIGN1c3RvbSBsb2dpYyB0byByZW5kZXIgbXVsdGlwbGUgaXRlbXMuXG4gKlxuICogQHBhcmFtIGYgVGhlIGRpcmVjdGl2ZSBmYWN0b3J5IGZ1bmN0aW9uLiBNdXN0IGJlIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFcbiAqIGZ1bmN0aW9uIG9mIHRoZSBzaWduYXR1cmUgYChwYXJ0OiBQYXJ0KSA9PiB2b2lkYC4gVGhlIHJldHVybmVkIGZ1bmN0aW9uIHdpbGxcbiAqIGJlIGNhbGxlZCB3aXRoIHRoZSBwYXJ0IG9iamVjdC5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGltcG9ydCB7ZGlyZWN0aXZlLCBodG1sfSBmcm9tICdsaXQtaHRtbCc7XG4gKlxuICogY29uc3QgaW1tdXRhYmxlID0gZGlyZWN0aXZlKCh2KSA9PiAocGFydCkgPT4ge1xuICogICBpZiAocGFydC52YWx1ZSAhPT0gdikge1xuICogICAgIHBhcnQuc2V0VmFsdWUodilcbiAqICAgfVxuICogfSk7XG4gKi9cbmV4cG9ydCBjb25zdCBkaXJlY3RpdmUgPSAoZikgPT4gKCguLi5hcmdzKSA9PiB7XG4gICAgY29uc3QgZCA9IGYoLi4uYXJncyk7XG4gICAgZGlyZWN0aXZlcy5zZXQoZCwgdHJ1ZSk7XG4gICAgcmV0dXJuIGQ7XG59KTtcbmV4cG9ydCBjb25zdCBpc0RpcmVjdGl2ZSA9IChvKSA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiBvID09PSAnZnVuY3Rpb24nICYmIGRpcmVjdGl2ZXMuaGFzKG8pO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpcmVjdGl2ZS5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG4vKipcbiAqIFRydWUgaWYgdGhlIGN1c3RvbSBlbGVtZW50cyBwb2x5ZmlsbCBpcyBpbiB1c2UuXG4gKi9cbmV4cG9ydCBjb25zdCBpc0NFUG9seWZpbGwgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHdpbmRvdy5jdXN0b21FbGVtZW50cyAhPSBudWxsICYmXG4gICAgd2luZG93LmN1c3RvbUVsZW1lbnRzLnBvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2sgIT09XG4gICAgICAgIHVuZGVmaW5lZDtcbi8qKlxuICogUmVwYXJlbnRzIG5vZGVzLCBzdGFydGluZyBmcm9tIGBzdGFydGAgKGluY2x1c2l2ZSkgdG8gYGVuZGAgKGV4Y2x1c2l2ZSksXG4gKiBpbnRvIGFub3RoZXIgY29udGFpbmVyIChjb3VsZCBiZSB0aGUgc2FtZSBjb250YWluZXIpLCBiZWZvcmUgYGJlZm9yZWAuIElmXG4gKiBgYmVmb3JlYCBpcyBudWxsLCBpdCBhcHBlbmRzIHRoZSBub2RlcyB0byB0aGUgY29udGFpbmVyLlxuICovXG5leHBvcnQgY29uc3QgcmVwYXJlbnROb2RlcyA9IChjb250YWluZXIsIHN0YXJ0LCBlbmQgPSBudWxsLCBiZWZvcmUgPSBudWxsKSA9PiB7XG4gICAgd2hpbGUgKHN0YXJ0ICE9PSBlbmQpIHtcbiAgICAgICAgY29uc3QgbiA9IHN0YXJ0Lm5leHRTaWJsaW5nO1xuICAgICAgICBjb250YWluZXIuaW5zZXJ0QmVmb3JlKHN0YXJ0LCBiZWZvcmUpO1xuICAgICAgICBzdGFydCA9IG47XG4gICAgfVxufTtcbi8qKlxuICogUmVtb3ZlcyBub2Rlcywgc3RhcnRpbmcgZnJvbSBgc3RhcnRgIChpbmNsdXNpdmUpIHRvIGBlbmRgIChleGNsdXNpdmUpLCBmcm9tXG4gKiBgY29udGFpbmVyYC5cbiAqL1xuZXhwb3J0IGNvbnN0IHJlbW92ZU5vZGVzID0gKGNvbnRhaW5lciwgc3RhcnQsIGVuZCA9IG51bGwpID0+IHtcbiAgICB3aGlsZSAoc3RhcnQgIT09IGVuZCkge1xuICAgICAgICBjb25zdCBuID0gc3RhcnQubmV4dFNpYmxpbmc7XG4gICAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChzdGFydCk7XG4gICAgICAgIHN0YXJ0ID0gbjtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZG9tLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxOCBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbi8qKlxuICogQSBzZW50aW5lbCB2YWx1ZSB0aGF0IHNpZ25hbHMgdGhhdCBhIHZhbHVlIHdhcyBoYW5kbGVkIGJ5IGEgZGlyZWN0aXZlIGFuZFxuICogc2hvdWxkIG5vdCBiZSB3cml0dGVuIHRvIHRoZSBET00uXG4gKi9cbmV4cG9ydCBjb25zdCBub0NoYW5nZSA9IHt9O1xuLyoqXG4gKiBBIHNlbnRpbmVsIHZhbHVlIHRoYXQgc2lnbmFscyBhIE5vZGVQYXJ0IHRvIGZ1bGx5IGNsZWFyIGl0cyBjb250ZW50LlxuICovXG5leHBvcnQgY29uc3Qgbm90aGluZyA9IHt9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFydC5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG4vKipcbiAqIEFuIGV4cHJlc3Npb24gbWFya2VyIHdpdGggZW1iZWRkZWQgdW5pcXVlIGtleSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aFxuICogcG9zc2libGUgdGV4dCBpbiB0ZW1wbGF0ZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBtYXJrZXIgPSBge3tsaXQtJHtTdHJpbmcoTWF0aC5yYW5kb20oKSkuc2xpY2UoMil9fX1gO1xuLyoqXG4gKiBBbiBleHByZXNzaW9uIG1hcmtlciB1c2VkIHRleHQtcG9zaXRpb25zLCBtdWx0aS1iaW5kaW5nIGF0dHJpYnV0ZXMsIGFuZFxuICogYXR0cmlidXRlcyB3aXRoIG1hcmt1cC1saWtlIHRleHQgdmFsdWVzLlxuICovXG5leHBvcnQgY29uc3Qgbm9kZU1hcmtlciA9IGA8IS0tJHttYXJrZXJ9LS0+YDtcbmV4cG9ydCBjb25zdCBtYXJrZXJSZWdleCA9IG5ldyBSZWdFeHAoYCR7bWFya2VyfXwke25vZGVNYXJrZXJ9YCk7XG4vKipcbiAqIFN1ZmZpeCBhcHBlbmRlZCB0byBhbGwgYm91bmQgYXR0cmlidXRlIG5hbWVzLlxuICovXG5leHBvcnQgY29uc3QgYm91bmRBdHRyaWJ1dGVTdWZmaXggPSAnJGxpdCQnO1xuLyoqXG4gKiBBbiB1cGRhdGFibGUgVGVtcGxhdGUgdGhhdCB0cmFja3MgdGhlIGxvY2F0aW9uIG9mIGR5bmFtaWMgcGFydHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUZW1wbGF0ZSB7XG4gICAgY29uc3RydWN0b3IocmVzdWx0LCBlbGVtZW50KSB7XG4gICAgICAgIHRoaXMucGFydHMgPSBbXTtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgY29uc3Qgbm9kZXNUb1JlbW92ZSA9IFtdO1xuICAgICAgICBjb25zdCBzdGFjayA9IFtdO1xuICAgICAgICAvLyBFZGdlIG5lZWRzIGFsbCA0IHBhcmFtZXRlcnMgcHJlc2VudDsgSUUxMSBuZWVkcyAzcmQgcGFyYW1ldGVyIHRvIGJlIG51bGxcbiAgICAgICAgY29uc3Qgd2Fsa2VyID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihlbGVtZW50LmNvbnRlbnQsIDEzMyAvKiBOb2RlRmlsdGVyLlNIT1dfe0VMRU1FTlR8Q09NTUVOVHxURVhUfSAqLywgbnVsbCwgZmFsc2UpO1xuICAgICAgICAvLyBLZWVwcyB0cmFjayBvZiB0aGUgbGFzdCBpbmRleCBhc3NvY2lhdGVkIHdpdGggYSBwYXJ0LiBXZSB0cnkgdG8gZGVsZXRlXG4gICAgICAgIC8vIHVubmVjZXNzYXJ5IG5vZGVzLCBidXQgd2UgbmV2ZXIgd2FudCB0byBhc3NvY2lhdGUgdHdvIGRpZmZlcmVudCBwYXJ0c1xuICAgICAgICAvLyB0byB0aGUgc2FtZSBpbmRleC4gVGhleSBtdXN0IGhhdmUgYSBjb25zdGFudCBub2RlIGJldHdlZW4uXG4gICAgICAgIGxldCBsYXN0UGFydEluZGV4ID0gMDtcbiAgICAgICAgbGV0IGluZGV4ID0gLTE7XG4gICAgICAgIGxldCBwYXJ0SW5kZXggPSAwO1xuICAgICAgICBjb25zdCB7IHN0cmluZ3MsIHZhbHVlczogeyBsZW5ndGggfSB9ID0gcmVzdWx0O1xuICAgICAgICB3aGlsZSAocGFydEluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gd2Fsa2VyLm5leHROb2RlKCk7XG4gICAgICAgICAgICBpZiAobm9kZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIFdlJ3ZlIGV4aGF1c3RlZCB0aGUgY29udGVudCBpbnNpZGUgYSBuZXN0ZWQgdGVtcGxhdGUgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBCZWNhdXNlIHdlIHN0aWxsIGhhdmUgcGFydHMgKHRoZSBvdXRlciBmb3ItbG9vcCksIHdlIGtub3c6XG4gICAgICAgICAgICAgICAgLy8gLSBUaGVyZSBpcyBhIHRlbXBsYXRlIGluIHRoZSBzdGFja1xuICAgICAgICAgICAgICAgIC8vIC0gVGhlIHdhbGtlciB3aWxsIGZpbmQgYSBuZXh0Tm9kZSBvdXRzaWRlIHRoZSB0ZW1wbGF0ZVxuICAgICAgICAgICAgICAgIHdhbGtlci5jdXJyZW50Tm9kZSA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAxIC8qIE5vZGUuRUxFTUVOVF9OT0RFICovKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuaGFzQXR0cmlidXRlcygpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBub2RlLmF0dHJpYnV0ZXM7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSBhdHRyaWJ1dGVzO1xuICAgICAgICAgICAgICAgICAgICAvLyBQZXJcbiAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL05hbWVkTm9kZU1hcCxcbiAgICAgICAgICAgICAgICAgICAgLy8gYXR0cmlidXRlcyBhcmUgbm90IGd1YXJhbnRlZWQgdG8gYmUgcmV0dXJuZWQgaW4gZG9jdW1lbnQgb3JkZXIuXG4gICAgICAgICAgICAgICAgICAgIC8vIEluIHBhcnRpY3VsYXIsIEVkZ2UvSUUgY2FuIHJldHVybiB0aGVtIG91dCBvZiBvcmRlciwgc28gd2UgY2Fubm90XG4gICAgICAgICAgICAgICAgICAgIC8vIGFzc3VtZSBhIGNvcnJlc3BvbmRlbmNlIGJldHdlZW4gcGFydCBpbmRleCBhbmQgYXR0cmlidXRlIGluZGV4LlxuICAgICAgICAgICAgICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW5kc1dpdGgoYXR0cmlidXRlc1tpXS5uYW1lLCBib3VuZEF0dHJpYnV0ZVN1ZmZpeCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChjb3VudC0tID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSB0ZW1wbGF0ZSBsaXRlcmFsIHNlY3Rpb24gbGVhZGluZyB1cCB0byB0aGUgZmlyc3RcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGV4cHJlc3Npb24gaW4gdGhpcyBhdHRyaWJ1dGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0cmluZ0ZvclBhcnQgPSBzdHJpbmdzW3BhcnRJbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGaW5kIHRoZSBhdHRyaWJ1dGUgbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IGxhc3RBdHRyaWJ1dGVOYW1lUmVnZXguZXhlYyhzdHJpbmdGb3JQYXJ0KVsyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpbmQgdGhlIGNvcnJlc3BvbmRpbmcgYXR0cmlidXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBbGwgYm91bmQgYXR0cmlidXRlcyBoYXZlIGhhZCBhIHN1ZmZpeCBhZGRlZCBpblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGVtcGxhdGVSZXN1bHQjZ2V0SFRNTCB0byBvcHQgb3V0IG9mIHNwZWNpYWwgYXR0cmlidXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBoYW5kbGluZy4gVG8gbG9vayB1cCB0aGUgYXR0cmlidXRlIHZhbHVlIHdlIGFsc28gbmVlZCB0byBhZGRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBzdWZmaXguXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVMb29rdXBOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpICsgYm91bmRBdHRyaWJ1dGVTdWZmaXg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVWYWx1ZSA9IG5vZGUuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZUxvb2t1cE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlTG9va3VwTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGF0aWNzID0gYXR0cmlidXRlVmFsdWUuc3BsaXQobWFya2VyUmVnZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJ0cy5wdXNoKHsgdHlwZTogJ2F0dHJpYnV0ZScsIGluZGV4LCBuYW1lLCBzdHJpbmdzOiBzdGF0aWNzIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFydEluZGV4ICs9IHN0YXRpY3MubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobm9kZS50YWdOYW1lID09PSAnVEVNUExBVEUnKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIHdhbGtlci5jdXJyZW50Tm9kZSA9IG5vZGUuY29udGVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChub2RlLm5vZGVUeXBlID09PSAzIC8qIE5vZGUuVEVYVF9OT0RFICovKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IG5vZGUuZGF0YTtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5pbmRleE9mKG1hcmtlcikgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0cmluZ3MgPSBkYXRhLnNwbGl0KG1hcmtlclJlZ2V4KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFzdEluZGV4ID0gc3RyaW5ncy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBhIG5ldyB0ZXh0IG5vZGUgZm9yIGVhY2ggbGl0ZXJhbCBzZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZXNlIG5vZGVzIGFyZSBhbHNvIHVzZWQgYXMgdGhlIG1hcmtlcnMgZm9yIG5vZGUgcGFydHNcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXN0SW5kZXg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGluc2VydDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzID0gc3RyaW5nc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydCA9IGNyZWF0ZU1hcmtlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSBsYXN0QXR0cmlidXRlTmFtZVJlZ2V4LmV4ZWMocyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoICE9PSBudWxsICYmIGVuZHNXaXRoKG1hdGNoWzJdLCBib3VuZEF0dHJpYnV0ZVN1ZmZpeCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcyA9IHMuc2xpY2UoMCwgbWF0Y2guaW5kZXgpICsgbWF0Y2hbMV0gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMl0uc2xpY2UoMCwgLWJvdW5kQXR0cmlidXRlU3VmZml4Lmxlbmd0aCkgKyBtYXRjaFszXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGluc2VydCwgbm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnRzLnB1c2goeyB0eXBlOiAnbm9kZScsIGluZGV4OiArK2luZGV4IH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gdGV4dCwgd2UgbXVzdCBpbnNlcnQgYSBjb21tZW50IHRvIG1hcmsgb3VyIHBsYWNlLlxuICAgICAgICAgICAgICAgICAgICAvLyBFbHNlLCB3ZSBjYW4gdHJ1c3QgaXQgd2lsbCBzdGljayBhcm91bmQgYWZ0ZXIgY2xvbmluZy5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0cmluZ3NbbGFzdEluZGV4XSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoY3JlYXRlTWFya2VyKCksIG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNUb1JlbW92ZS5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5kYXRhID0gc3RyaW5nc1tsYXN0SW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgYSBwYXJ0IGZvciBlYWNoIG1hdGNoIGZvdW5kXG4gICAgICAgICAgICAgICAgICAgIHBhcnRJbmRleCArPSBsYXN0SW5kZXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCAvKiBOb2RlLkNPTU1FTlRfTk9ERSAqLykge1xuICAgICAgICAgICAgICAgIGlmIChub2RlLmRhdGEgPT09IG1hcmtlcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCBhIG5ldyBtYXJrZXIgbm9kZSB0byBiZSB0aGUgc3RhcnROb2RlIG9mIHRoZSBQYXJ0IGlmIGFueSBvZlxuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgZm9sbG93aW5nIGFyZSB0cnVlOlxuICAgICAgICAgICAgICAgICAgICAvLyAgKiBXZSBkb24ndCBoYXZlIGEgcHJldmlvdXNTaWJsaW5nXG4gICAgICAgICAgICAgICAgICAgIC8vICAqIFRoZSBwcmV2aW91c1NpYmxpbmcgaXMgYWxyZWFkeSB0aGUgc3RhcnQgb2YgYSBwcmV2aW91cyBwYXJ0XG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlLnByZXZpb3VzU2libGluZyA9PT0gbnVsbCB8fCBpbmRleCA9PT0gbGFzdFBhcnRJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoY3JlYXRlTWFya2VyKCksIG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxhc3RQYXJ0SW5kZXggPSBpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJ0cy5wdXNoKHsgdHlwZTogJ25vZGUnLCBpbmRleCB9KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhIG5leHRTaWJsaW5nLCBrZWVwIHRoaXMgbm9kZSBzbyB3ZSBoYXZlIGFuIGVuZC5cbiAgICAgICAgICAgICAgICAgICAgLy8gRWxzZSwgd2UgY2FuIHJlbW92ZSBpdCB0byBzYXZlIGZ1dHVyZSBjb3N0cy5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUubmV4dFNpYmxpbmcgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuZGF0YSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNUb1JlbW92ZS5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgtLTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwYXJ0SW5kZXgrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpID0gLTE7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICgoaSA9IG5vZGUuZGF0YS5pbmRleE9mKG1hcmtlciwgaSArIDEpKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbW1lbnQgbm9kZSBoYXMgYSBiaW5kaW5nIG1hcmtlciBpbnNpZGUsIG1ha2UgYW4gaW5hY3RpdmUgcGFydFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGJpbmRpbmcgd29uJ3Qgd29yaywgYnV0IHN1YnNlcXVlbnQgYmluZGluZ3Mgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyAoanVzdGluZmFnbmFuaSk6IGNvbnNpZGVyIHdoZXRoZXIgaXQncyBldmVuIHdvcnRoIGl0IHRvXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYWtlIGJpbmRpbmdzIGluIGNvbW1lbnRzIHdvcmtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFydHMucHVzaCh7IHR5cGU6ICdub2RlJywgaW5kZXg6IC0xIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFydEluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVtb3ZlIHRleHQgYmluZGluZyBub2RlcyBhZnRlciB0aGUgd2FsayB0byBub3QgZGlzdHVyYiB0aGUgVHJlZVdhbGtlclxuICAgICAgICBmb3IgKGNvbnN0IG4gb2Ygbm9kZXNUb1JlbW92ZSkge1xuICAgICAgICAgICAgbi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG4pO1xuICAgICAgICB9XG4gICAgfVxufVxuY29uc3QgZW5kc1dpdGggPSAoc3RyLCBzdWZmaXgpID0+IHtcbiAgICBjb25zdCBpbmRleCA9IHN0ci5sZW5ndGggLSBzdWZmaXgubGVuZ3RoO1xuICAgIHJldHVybiBpbmRleCA+PSAwICYmIHN0ci5zbGljZShpbmRleCkgPT09IHN1ZmZpeDtcbn07XG5leHBvcnQgY29uc3QgaXNUZW1wbGF0ZVBhcnRBY3RpdmUgPSAocGFydCkgPT4gcGFydC5pbmRleCAhPT0gLTE7XG4vLyBBbGxvd3MgYGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJycpYCB0byBiZSByZW5hbWVkIGZvciBhXG4vLyBzbWFsbCBtYW51YWwgc2l6ZS1zYXZpbmdzLlxuZXhwb3J0IGNvbnN0IGNyZWF0ZU1hcmtlciA9ICgpID0+IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJycpO1xuLyoqXG4gKiBUaGlzIHJlZ2V4IGV4dHJhY3RzIHRoZSBhdHRyaWJ1dGUgbmFtZSBwcmVjZWRpbmcgYW4gYXR0cmlidXRlLXBvc2l0aW9uXG4gKiBleHByZXNzaW9uLiBJdCBkb2VzIHRoaXMgYnkgbWF0Y2hpbmcgdGhlIHN5bnRheCBhbGxvd2VkIGZvciBhdHRyaWJ1dGVzXG4gKiBhZ2FpbnN0IHRoZSBzdHJpbmcgbGl0ZXJhbCBkaXJlY3RseSBwcmVjZWRpbmcgdGhlIGV4cHJlc3Npb24sIGFzc3VtaW5nIHRoYXRcbiAqIHRoZSBleHByZXNzaW9uIGlzIGluIGFuIGF0dHJpYnV0ZS12YWx1ZSBwb3NpdGlvbi5cbiAqXG4gKiBTZWUgYXR0cmlidXRlcyBpbiB0aGUgSFRNTCBzcGVjOlxuICogaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L3N5bnRheC5odG1sI2VsZW1lbnRzLWF0dHJpYnV0ZXNcbiAqXG4gKiBcIiBcXHgwOVxceDBhXFx4MGNcXHgwZFwiIGFyZSBIVE1MIHNwYWNlIGNoYXJhY3RlcnM6XG4gKiBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvaW5mcmFzdHJ1Y3R1cmUuaHRtbCNzcGFjZS1jaGFyYWN0ZXJzXG4gKlxuICogXCJcXDAtXFx4MUZcXHg3Ri1cXHg5RlwiIGFyZSBVbmljb2RlIGNvbnRyb2wgY2hhcmFjdGVycywgd2hpY2ggaW5jbHVkZXMgZXZlcnlcbiAqIHNwYWNlIGNoYXJhY3RlciBleGNlcHQgXCIgXCIuXG4gKlxuICogU28gYW4gYXR0cmlidXRlIGlzOlxuICogICogVGhlIG5hbWU6IGFueSBjaGFyYWN0ZXIgZXhjZXB0IGEgY29udHJvbCBjaGFyYWN0ZXIsIHNwYWNlIGNoYXJhY3RlciwgKCcpLFxuICogICAgKFwiKSwgXCI+XCIsIFwiPVwiLCBvciBcIi9cIlxuICogICogRm9sbG93ZWQgYnkgemVybyBvciBtb3JlIHNwYWNlIGNoYXJhY3RlcnNcbiAqICAqIEZvbGxvd2VkIGJ5IFwiPVwiXG4gKiAgKiBGb2xsb3dlZCBieSB6ZXJvIG9yIG1vcmUgc3BhY2UgY2hhcmFjdGVyc1xuICogICogRm9sbG93ZWQgYnk6XG4gKiAgICAqIEFueSBjaGFyYWN0ZXIgZXhjZXB0IHNwYWNlLCAoJyksIChcIiksIFwiPFwiLCBcIj5cIiwgXCI9XCIsIChgKSwgb3JcbiAqICAgICogKFwiKSB0aGVuIGFueSBub24tKFwiKSwgb3JcbiAqICAgICogKCcpIHRoZW4gYW55IG5vbi0oJylcbiAqL1xuZXhwb3J0IGNvbnN0IGxhc3RBdHRyaWJ1dGVOYW1lUmVnZXggPSBcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4XG4vKFsgXFx4MDlcXHgwYVxceDBjXFx4MGRdKShbXlxcMC1cXHgxRlxceDdGLVxceDlGIFwiJz49L10rKShbIFxceDA5XFx4MGFcXHgwY1xceDBkXSo9WyBcXHgwOVxceDBhXFx4MGNcXHgwZF0qKD86W14gXFx4MDlcXHgwYVxceDBjXFx4MGRcIidgPD49XSp8XCJbXlwiXSp8J1teJ10qKSkkLztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRlbXBsYXRlLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbmltcG9ydCB7IGlzQ0VQb2x5ZmlsbCB9IGZyb20gJy4vZG9tLmpzJztcbmltcG9ydCB7IGlzVGVtcGxhdGVQYXJ0QWN0aXZlIH0gZnJvbSAnLi90ZW1wbGF0ZS5qcyc7XG4vKipcbiAqIEFuIGluc3RhbmNlIG9mIGEgYFRlbXBsYXRlYCB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byB0aGUgRE9NIGFuZCB1cGRhdGVkXG4gKiB3aXRoIG5ldyB2YWx1ZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUZW1wbGF0ZUluc3RhbmNlIHtcbiAgICBjb25zdHJ1Y3Rvcih0ZW1wbGF0ZSwgcHJvY2Vzc29yLCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX19wYXJ0cyA9IFtdO1xuICAgICAgICB0aGlzLnRlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgICAgIHRoaXMucHJvY2Vzc29yID0gcHJvY2Vzc29yO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICB1cGRhdGUodmFsdWVzKSB7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBwYXJ0IG9mIHRoaXMuX19wYXJ0cykge1xuICAgICAgICAgICAgaWYgKHBhcnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHBhcnQuc2V0VmFsdWUodmFsdWVzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHBhcnQgb2YgdGhpcy5fX3BhcnRzKSB7XG4gICAgICAgICAgICBpZiAocGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcGFydC5jb21taXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBfY2xvbmUoKSB7XG4gICAgICAgIC8vIFRoZXJlIGFyZSBhIG51bWJlciBvZiBzdGVwcyBpbiB0aGUgbGlmZWN5Y2xlIG9mIGEgdGVtcGxhdGUgaW5zdGFuY2Unc1xuICAgICAgICAvLyBET00gZnJhZ21lbnQ6XG4gICAgICAgIC8vICAxLiBDbG9uZSAtIGNyZWF0ZSB0aGUgaW5zdGFuY2UgZnJhZ21lbnRcbiAgICAgICAgLy8gIDIuIEFkb3B0IC0gYWRvcHQgaW50byB0aGUgbWFpbiBkb2N1bWVudFxuICAgICAgICAvLyAgMy4gUHJvY2VzcyAtIGZpbmQgcGFydCBtYXJrZXJzIGFuZCBjcmVhdGUgcGFydHNcbiAgICAgICAgLy8gIDQuIFVwZ3JhZGUgLSB1cGdyYWRlIGN1c3RvbSBlbGVtZW50c1xuICAgICAgICAvLyAgNS4gVXBkYXRlIC0gc2V0IG5vZGUsIGF0dHJpYnV0ZSwgcHJvcGVydHksIGV0Yy4sIHZhbHVlc1xuICAgICAgICAvLyAgNi4gQ29ubmVjdCAtIGNvbm5lY3QgdG8gdGhlIGRvY3VtZW50LiBPcHRpb25hbCBhbmQgb3V0c2lkZSBvZiB0aGlzXG4gICAgICAgIC8vICAgICBtZXRob2QuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFdlIGhhdmUgYSBmZXcgY29uc3RyYWludHMgb24gdGhlIG9yZGVyaW5nIG9mIHRoZXNlIHN0ZXBzOlxuICAgICAgICAvLyAgKiBXZSBuZWVkIHRvIHVwZ3JhZGUgYmVmb3JlIHVwZGF0aW5nLCBzbyB0aGF0IHByb3BlcnR5IHZhbHVlcyB3aWxsIHBhc3NcbiAgICAgICAgLy8gICAgdGhyb3VnaCBhbnkgcHJvcGVydHkgc2V0dGVycy5cbiAgICAgICAgLy8gICogV2Ugd291bGQgbGlrZSB0byBwcm9jZXNzIGJlZm9yZSB1cGdyYWRpbmcgc28gdGhhdCB3ZSdyZSBzdXJlIHRoYXQgdGhlXG4gICAgICAgIC8vICAgIGNsb25lZCBmcmFnbWVudCBpcyBpbmVydCBhbmQgbm90IGRpc3R1cmJlZCBieSBzZWxmLW1vZGlmeWluZyBET00uXG4gICAgICAgIC8vICAqIFdlIHdhbnQgY3VzdG9tIGVsZW1lbnRzIHRvIHVwZ3JhZGUgZXZlbiBpbiBkaXNjb25uZWN0ZWQgZnJhZ21lbnRzLlxuICAgICAgICAvL1xuICAgICAgICAvLyBHaXZlbiB0aGVzZSBjb25zdHJhaW50cywgd2l0aCBmdWxsIGN1c3RvbSBlbGVtZW50cyBzdXBwb3J0IHdlIHdvdWxkXG4gICAgICAgIC8vIHByZWZlciB0aGUgb3JkZXI6IENsb25lLCBQcm9jZXNzLCBBZG9wdCwgVXBncmFkZSwgVXBkYXRlLCBDb25uZWN0XG4gICAgICAgIC8vXG4gICAgICAgIC8vIEJ1dCBTYWZhcmkgZG9lcyBub3QgaW1wbGVtZW50IEN1c3RvbUVsZW1lbnRSZWdpc3RyeSN1cGdyYWRlLCBzbyB3ZVxuICAgICAgICAvLyBjYW4gbm90IGltcGxlbWVudCB0aGF0IG9yZGVyIGFuZCBzdGlsbCBoYXZlIHVwZ3JhZGUtYmVmb3JlLXVwZGF0ZSBhbmRcbiAgICAgICAgLy8gdXBncmFkZSBkaXNjb25uZWN0ZWQgZnJhZ21lbnRzLiBTbyB3ZSBpbnN0ZWFkIHNhY3JpZmljZSB0aGVcbiAgICAgICAgLy8gcHJvY2Vzcy1iZWZvcmUtdXBncmFkZSBjb25zdHJhaW50LCBzaW5jZSBpbiBDdXN0b20gRWxlbWVudHMgdjEgZWxlbWVudHNcbiAgICAgICAgLy8gbXVzdCBub3QgbW9kaWZ5IHRoZWlyIGxpZ2h0IERPTSBpbiB0aGUgY29uc3RydWN0b3IuIFdlIHN0aWxsIGhhdmUgaXNzdWVzXG4gICAgICAgIC8vIHdoZW4gY28tZXhpc3Rpbmcgd2l0aCBDRXYwIGVsZW1lbnRzIGxpa2UgUG9seW1lciAxLCBhbmQgd2l0aCBwb2x5ZmlsbHNcbiAgICAgICAgLy8gdGhhdCBkb24ndCBzdHJpY3RseSBhZGhlcmUgdG8gdGhlIG5vLW1vZGlmaWNhdGlvbiBydWxlIGJlY2F1c2Ugc2hhZG93XG4gICAgICAgIC8vIERPTSwgd2hpY2ggbWF5IGJlIGNyZWF0ZWQgaW4gdGhlIGNvbnN0cnVjdG9yLCBpcyBlbXVsYXRlZCBieSBiZWluZyBwbGFjZWRcbiAgICAgICAgLy8gaW4gdGhlIGxpZ2h0IERPTS5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gVGhlIHJlc3VsdGluZyBvcmRlciBpcyBvbiBuYXRpdmUgaXM6IENsb25lLCBBZG9wdCwgVXBncmFkZSwgUHJvY2VzcyxcbiAgICAgICAgLy8gVXBkYXRlLCBDb25uZWN0LiBkb2N1bWVudC5pbXBvcnROb2RlKCkgcGVyZm9ybXMgQ2xvbmUsIEFkb3B0LCBhbmQgVXBncmFkZVxuICAgICAgICAvLyBpbiBvbmUgc3RlcC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gVGhlIEN1c3RvbSBFbGVtZW50cyB2MSBwb2x5ZmlsbCBzdXBwb3J0cyB1cGdyYWRlKCksIHNvIHRoZSBvcmRlciB3aGVuXG4gICAgICAgIC8vIHBvbHlmaWxsZWQgaXMgdGhlIG1vcmUgaWRlYWw6IENsb25lLCBQcm9jZXNzLCBBZG9wdCwgVXBncmFkZSwgVXBkYXRlLFxuICAgICAgICAvLyBDb25uZWN0LlxuICAgICAgICBjb25zdCBmcmFnbWVudCA9IGlzQ0VQb2x5ZmlsbCA/XG4gICAgICAgICAgICB0aGlzLnRlbXBsYXRlLmVsZW1lbnQuY29udGVudC5jbG9uZU5vZGUodHJ1ZSkgOlxuICAgICAgICAgICAgZG9jdW1lbnQuaW1wb3J0Tm9kZSh0aGlzLnRlbXBsYXRlLmVsZW1lbnQuY29udGVudCwgdHJ1ZSk7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gW107XG4gICAgICAgIGNvbnN0IHBhcnRzID0gdGhpcy50ZW1wbGF0ZS5wYXJ0cztcbiAgICAgICAgLy8gRWRnZSBuZWVkcyBhbGwgNCBwYXJhbWV0ZXJzIHByZXNlbnQ7IElFMTEgbmVlZHMgM3JkIHBhcmFtZXRlciB0byBiZSBudWxsXG4gICAgICAgIGNvbnN0IHdhbGtlciA9IGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoZnJhZ21lbnQsIDEzMyAvKiBOb2RlRmlsdGVyLlNIT1dfe0VMRU1FTlR8Q09NTUVOVHxURVhUfSAqLywgbnVsbCwgZmFsc2UpO1xuICAgICAgICBsZXQgcGFydEluZGV4ID0gMDtcbiAgICAgICAgbGV0IG5vZGVJbmRleCA9IDA7XG4gICAgICAgIGxldCBwYXJ0O1xuICAgICAgICBsZXQgbm9kZSA9IHdhbGtlci5uZXh0Tm9kZSgpO1xuICAgICAgICAvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBub2RlcyBhbmQgcGFydHMgb2YgYSB0ZW1wbGF0ZVxuICAgICAgICB3aGlsZSAocGFydEluZGV4IDwgcGFydHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBwYXJ0ID0gcGFydHNbcGFydEluZGV4XTtcbiAgICAgICAgICAgIGlmICghaXNUZW1wbGF0ZVBhcnRBY3RpdmUocGFydCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9fcGFydHMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgIHBhcnRJbmRleCsrO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUHJvZ3Jlc3MgdGhlIHRyZWUgd2Fsa2VyIHVudGlsIHdlIGZpbmQgb3VyIG5leHQgcGFydCdzIG5vZGUuXG4gICAgICAgICAgICAvLyBOb3RlIHRoYXQgbXVsdGlwbGUgcGFydHMgbWF5IHNoYXJlIHRoZSBzYW1lIG5vZGUgKGF0dHJpYnV0ZSBwYXJ0c1xuICAgICAgICAgICAgLy8gb24gYSBzaW5nbGUgZWxlbWVudCksIHNvIHRoaXMgbG9vcCBtYXkgbm90IHJ1biBhdCBhbGwuXG4gICAgICAgICAgICB3aGlsZSAobm9kZUluZGV4IDwgcGFydC5pbmRleCkge1xuICAgICAgICAgICAgICAgIG5vZGVJbmRleCsrO1xuICAgICAgICAgICAgICAgIGlmIChub2RlLm5vZGVOYW1lID09PSAnVEVNUExBVEUnKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIHdhbGtlci5jdXJyZW50Tm9kZSA9IG5vZGUuY29udGVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKChub2RlID0gd2Fsa2VyLm5leHROb2RlKCkpID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlJ3ZlIGV4aGF1c3RlZCB0aGUgY29udGVudCBpbnNpZGUgYSBuZXN0ZWQgdGVtcGxhdGUgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAgICAgLy8gQmVjYXVzZSB3ZSBzdGlsbCBoYXZlIHBhcnRzICh0aGUgb3V0ZXIgZm9yLWxvb3ApLCB3ZSBrbm93OlxuICAgICAgICAgICAgICAgICAgICAvLyAtIFRoZXJlIGlzIGEgdGVtcGxhdGUgaW4gdGhlIHN0YWNrXG4gICAgICAgICAgICAgICAgICAgIC8vIC0gVGhlIHdhbGtlciB3aWxsIGZpbmQgYSBuZXh0Tm9kZSBvdXRzaWRlIHRoZSB0ZW1wbGF0ZVxuICAgICAgICAgICAgICAgICAgICB3YWxrZXIuY3VycmVudE5vZGUgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHdhbGtlci5uZXh0Tm9kZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFdlJ3ZlIGFycml2ZWQgYXQgb3VyIHBhcnQncyBub2RlLlxuICAgICAgICAgICAgaWYgKHBhcnQudHlwZSA9PT0gJ25vZGUnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFydCA9IHRoaXMucHJvY2Vzc29yLmhhbmRsZVRleHRFeHByZXNzaW9uKHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcGFydC5pbnNlcnRBZnRlck5vZGUobm9kZS5wcmV2aW91c1NpYmxpbmcpO1xuICAgICAgICAgICAgICAgIHRoaXMuX19wYXJ0cy5wdXNoKHBhcnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fX3BhcnRzLnB1c2goLi4udGhpcy5wcm9jZXNzb3IuaGFuZGxlQXR0cmlidXRlRXhwcmVzc2lvbnMobm9kZSwgcGFydC5uYW1lLCBwYXJ0LnN0cmluZ3MsIHRoaXMub3B0aW9ucykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFydEluZGV4Kys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ0VQb2x5ZmlsbCkge1xuICAgICAgICAgICAgZG9jdW1lbnQuYWRvcHROb2RlKGZyYWdtZW50KTtcbiAgICAgICAgICAgIGN1c3RvbUVsZW1lbnRzLnVwZ3JhZGUoZnJhZ21lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmcmFnbWVudDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZW1wbGF0ZS1pbnN0YW5jZS5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG4vKipcbiAqIEBtb2R1bGUgbGl0LWh0bWxcbiAqL1xuaW1wb3J0IHsgcmVwYXJlbnROb2RlcyB9IGZyb20gJy4vZG9tLmpzJztcbmltcG9ydCB7IGJvdW5kQXR0cmlidXRlU3VmZml4LCBsYXN0QXR0cmlidXRlTmFtZVJlZ2V4LCBtYXJrZXIsIG5vZGVNYXJrZXIgfSBmcm9tICcuL3RlbXBsYXRlLmpzJztcbi8qKlxuICogT3VyIFRydXN0ZWRUeXBlUG9saWN5IGZvciBIVE1MIHdoaWNoIGlzIGRlY2xhcmVkIHVzaW5nIHRoZSBodG1sIHRlbXBsYXRlXG4gKiB0YWcgZnVuY3Rpb24uXG4gKlxuICogVGhhdCBIVE1MIGlzIGEgZGV2ZWxvcGVyLWF1dGhvcmVkIGNvbnN0YW50LCBhbmQgaXMgcGFyc2VkIHdpdGggaW5uZXJIVE1MXG4gKiBiZWZvcmUgYW55IHVudHJ1c3RlZCBleHByZXNzaW9ucyBoYXZlIGJlZW4gbWl4ZWQgaW4uIFRoZXJlZm9yIGl0IGlzXG4gKiBjb25zaWRlcmVkIHNhZmUgYnkgY29uc3RydWN0aW9uLlxuICovXG5jb25zdCBwb2xpY3kgPSB3aW5kb3cudHJ1c3RlZFR5cGVzICYmXG4gICAgdHJ1c3RlZFR5cGVzLmNyZWF0ZVBvbGljeSgnbGl0LWh0bWwnLCB7IGNyZWF0ZUhUTUw6IChzKSA9PiBzIH0pO1xuY29uc3QgY29tbWVudE1hcmtlciA9IGAgJHttYXJrZXJ9IGA7XG4vKipcbiAqIFRoZSByZXR1cm4gdHlwZSBvZiBgaHRtbGAsIHdoaWNoIGhvbGRzIGEgVGVtcGxhdGUgYW5kIHRoZSB2YWx1ZXMgZnJvbVxuICogaW50ZXJwb2xhdGVkIGV4cHJlc3Npb25zLlxuICovXG5leHBvcnQgY2xhc3MgVGVtcGxhdGVSZXN1bHQge1xuICAgIGNvbnN0cnVjdG9yKHN0cmluZ3MsIHZhbHVlcywgdHlwZSwgcHJvY2Vzc29yKSB7XG4gICAgICAgIHRoaXMuc3RyaW5ncyA9IHN0cmluZ3M7XG4gICAgICAgIHRoaXMudmFsdWVzID0gdmFsdWVzO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnByb2Nlc3NvciA9IHByb2Nlc3NvcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHN0cmluZyBvZiBIVE1MIHVzZWQgdG8gY3JlYXRlIGEgYDx0ZW1wbGF0ZT5gIGVsZW1lbnQuXG4gICAgICovXG4gICAgZ2V0SFRNTCgpIHtcbiAgICAgICAgY29uc3QgbCA9IHRoaXMuc3RyaW5ncy5sZW5ndGggLSAxO1xuICAgICAgICBsZXQgaHRtbCA9ICcnO1xuICAgICAgICBsZXQgaXNDb21tZW50QmluZGluZyA9IGZhbHNlO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgcyA9IHRoaXMuc3RyaW5nc1tpXTtcbiAgICAgICAgICAgIC8vIEZvciBlYWNoIGJpbmRpbmcgd2Ugd2FudCB0byBkZXRlcm1pbmUgdGhlIGtpbmQgb2YgbWFya2VyIHRvIGluc2VydFxuICAgICAgICAgICAgLy8gaW50byB0aGUgdGVtcGxhdGUgc291cmNlIGJlZm9yZSBpdCdzIHBhcnNlZCBieSB0aGUgYnJvd3NlcidzIEhUTUxcbiAgICAgICAgICAgIC8vIHBhcnNlci4gVGhlIG1hcmtlciB0eXBlIGlzIGJhc2VkIG9uIHdoZXRoZXIgdGhlIGV4cHJlc3Npb24gaXMgaW4gYW5cbiAgICAgICAgICAgIC8vIGF0dHJpYnV0ZSwgdGV4dCwgb3IgY29tbWVudCBwb3NpdGlvbi5cbiAgICAgICAgICAgIC8vICAgKiBGb3Igbm9kZS1wb3NpdGlvbiBiaW5kaW5ncyB3ZSBpbnNlcnQgYSBjb21tZW50IHdpdGggdGhlIG1hcmtlclxuICAgICAgICAgICAgLy8gICAgIHNlbnRpbmVsIGFzIGl0cyB0ZXh0IGNvbnRlbnQsIGxpa2UgPCEtLXt7bGl0LWd1aWR9fS0tPi5cbiAgICAgICAgICAgIC8vICAgKiBGb3IgYXR0cmlidXRlIGJpbmRpbmdzIHdlIGluc2VydCBqdXN0IHRoZSBtYXJrZXIgc2VudGluZWwgZm9yIHRoZVxuICAgICAgICAgICAgLy8gICAgIGZpcnN0IGJpbmRpbmcsIHNvIHRoYXQgd2Ugc3VwcG9ydCB1bnF1b3RlZCBhdHRyaWJ1dGUgYmluZGluZ3MuXG4gICAgICAgICAgICAvLyAgICAgU3Vic2VxdWVudCBiaW5kaW5ncyBjYW4gdXNlIGEgY29tbWVudCBtYXJrZXIgYmVjYXVzZSBtdWx0aS1iaW5kaW5nXG4gICAgICAgICAgICAvLyAgICAgYXR0cmlidXRlcyBtdXN0IGJlIHF1b3RlZC5cbiAgICAgICAgICAgIC8vICAgKiBGb3IgY29tbWVudCBiaW5kaW5ncyB3ZSBpbnNlcnQganVzdCB0aGUgbWFya2VyIHNlbnRpbmVsIHNvIHdlIGRvbid0XG4gICAgICAgICAgICAvLyAgICAgY2xvc2UgdGhlIGNvbW1lbnQuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBjb2RlIHNjYW5zIHRoZSB0ZW1wbGF0ZSBzb3VyY2UsIGJ1dCBpcyAqbm90KiBhbiBIVE1MXG4gICAgICAgICAgICAvLyBwYXJzZXIuIFdlIGRvbid0IG5lZWQgdG8gdHJhY2sgdGhlIHRyZWUgc3RydWN0dXJlIG9mIHRoZSBIVE1MLCBvbmx5XG4gICAgICAgICAgICAvLyB3aGV0aGVyIGEgYmluZGluZyBpcyBpbnNpZGUgYSBjb21tZW50LCBhbmQgaWYgbm90LCBpZiBpdCBhcHBlYXJzIHRvIGJlXG4gICAgICAgICAgICAvLyB0aGUgZmlyc3QgYmluZGluZyBpbiBhbiBhdHRyaWJ1dGUuXG4gICAgICAgICAgICBjb25zdCBjb21tZW50T3BlbiA9IHMubGFzdEluZGV4T2YoJzwhLS0nKTtcbiAgICAgICAgICAgIC8vIFdlJ3JlIGluIGNvbW1lbnQgcG9zaXRpb24gaWYgd2UgaGF2ZSBhIGNvbW1lbnQgb3BlbiB3aXRoIG5vIGZvbGxvd2luZ1xuICAgICAgICAgICAgLy8gY29tbWVudCBjbG9zZS4gQmVjYXVzZSA8LS0gY2FuIGFwcGVhciBpbiBhbiBhdHRyaWJ1dGUgdmFsdWUgdGhlcmUgY2FuXG4gICAgICAgICAgICAvLyBiZSBmYWxzZSBwb3NpdGl2ZXMuXG4gICAgICAgICAgICBpc0NvbW1lbnRCaW5kaW5nID0gKGNvbW1lbnRPcGVuID4gLTEgfHwgaXNDb21tZW50QmluZGluZykgJiZcbiAgICAgICAgICAgICAgICBzLmluZGV4T2YoJy0tPicsIGNvbW1lbnRPcGVuICsgMSkgPT09IC0xO1xuICAgICAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYW4gYXR0cmlidXRlLWxpa2Ugc2VxdWVuY2UgcHJlY2VkaW5nIHRoZVxuICAgICAgICAgICAgLy8gZXhwcmVzc2lvbi4gVGhpcyBjYW4gbWF0Y2ggXCJuYW1lPXZhbHVlXCIgbGlrZSBzdHJ1Y3R1cmVzIGluIHRleHQsXG4gICAgICAgICAgICAvLyBjb21tZW50cywgYW5kIGF0dHJpYnV0ZSB2YWx1ZXMsIHNvIHRoZXJlIGNhbiBiZSBmYWxzZS1wb3NpdGl2ZXMuXG4gICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVNYXRjaCA9IGxhc3RBdHRyaWJ1dGVOYW1lUmVnZXguZXhlYyhzKTtcbiAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVNYXRjaCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIFdlJ3JlIG9ubHkgaW4gdGhpcyBicmFuY2ggaWYgd2UgZG9uJ3QgaGF2ZSBhIGF0dHJpYnV0ZS1saWtlXG4gICAgICAgICAgICAgICAgLy8gcHJlY2VkaW5nIHNlcXVlbmNlLiBGb3IgY29tbWVudHMsIHRoaXMgZ3VhcmRzIGFnYWluc3QgdW51c3VhbFxuICAgICAgICAgICAgICAgIC8vIGF0dHJpYnV0ZSB2YWx1ZXMgbGlrZSA8ZGl2IGZvbz1cIjwhLS0keydiYXInfVwiPi4gQ2FzZXMgbGlrZVxuICAgICAgICAgICAgICAgIC8vIDwhLS0gZm9vPSR7J2Jhcid9LS0+IGFyZSBoYW5kbGVkIGNvcnJlY3RseSBpbiB0aGUgYXR0cmlidXRlIGJyYW5jaFxuICAgICAgICAgICAgICAgIC8vIGJlbG93LlxuICAgICAgICAgICAgICAgIGh0bWwgKz0gcyArIChpc0NvbW1lbnRCaW5kaW5nID8gY29tbWVudE1hcmtlciA6IG5vZGVNYXJrZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gRm9yIGF0dHJpYnV0ZXMgd2UgdXNlIGp1c3QgYSBtYXJrZXIgc2VudGluZWwsIGFuZCBhbHNvIGFwcGVuZCBhXG4gICAgICAgICAgICAgICAgLy8gJGxpdCQgc3VmZml4IHRvIHRoZSBuYW1lIHRvIG9wdC1vdXQgb2YgYXR0cmlidXRlLXNwZWNpZmljIHBhcnNpbmdcbiAgICAgICAgICAgICAgICAvLyB0aGF0IElFIGFuZCBFZGdlIGRvIGZvciBzdHlsZSBhbmQgY2VydGFpbiBTVkcgYXR0cmlidXRlcy5cbiAgICAgICAgICAgICAgICBodG1sICs9IHMuc3Vic3RyKDAsIGF0dHJpYnV0ZU1hdGNoLmluZGV4KSArIGF0dHJpYnV0ZU1hdGNoWzFdICtcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlTWF0Y2hbMl0gKyBib3VuZEF0dHJpYnV0ZVN1ZmZpeCArIGF0dHJpYnV0ZU1hdGNoWzNdICtcbiAgICAgICAgICAgICAgICAgICAgbWFya2VyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGh0bWwgKz0gdGhpcy5zdHJpbmdzW2xdO1xuICAgICAgICByZXR1cm4gaHRtbDtcbiAgICB9XG4gICAgZ2V0VGVtcGxhdGVFbGVtZW50KCkge1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG4gICAgICAgIGxldCB2YWx1ZSA9IHRoaXMuZ2V0SFRNTCgpO1xuICAgICAgICBpZiAocG9saWN5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgc2VjdXJlIGJlY2F1c2UgYHRoaXMuc3RyaW5nc2AgaXMgYSBUZW1wbGF0ZVN0cmluZ3NBcnJheS5cbiAgICAgICAgICAgIC8vIFRPRE86IHZhbGlkYXRlIHRoaXMgd2hlblxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtYXJyYXktaXMtdGVtcGxhdGUtb2JqZWN0IGlzXG4gICAgICAgICAgICAvLyBpbXBsZW1lbnRlZC5cbiAgICAgICAgICAgIHZhbHVlID0gcG9saWN5LmNyZWF0ZUhUTUwodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgfVxufVxuLyoqXG4gKiBBIFRlbXBsYXRlUmVzdWx0IGZvciBTVkcgZnJhZ21lbnRzLlxuICpcbiAqIFRoaXMgY2xhc3Mgd3JhcHMgSFRNTCBpbiBhbiBgPHN2Zz5gIHRhZyBpbiBvcmRlciB0byBwYXJzZSBpdHMgY29udGVudHMgaW4gdGhlXG4gKiBTVkcgbmFtZXNwYWNlLCB0aGVuIG1vZGlmaWVzIHRoZSB0ZW1wbGF0ZSB0byByZW1vdmUgdGhlIGA8c3ZnPmAgdGFnIHNvIHRoYXRcbiAqIGNsb25lcyBvbmx5IGNvbnRhaW5lciB0aGUgb3JpZ2luYWwgZnJhZ21lbnQuXG4gKi9cbmV4cG9ydCBjbGFzcyBTVkdUZW1wbGF0ZVJlc3VsdCBleHRlbmRzIFRlbXBsYXRlUmVzdWx0IHtcbiAgICBnZXRIVE1MKCkge1xuICAgICAgICByZXR1cm4gYDxzdmc+JHtzdXBlci5nZXRIVE1MKCl9PC9zdmc+YDtcbiAgICB9XG4gICAgZ2V0VGVtcGxhdGVFbGVtZW50KCkge1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IHN1cGVyLmdldFRlbXBsYXRlRWxlbWVudCgpO1xuICAgICAgICBjb25zdCBjb250ZW50ID0gdGVtcGxhdGUuY29udGVudDtcbiAgICAgICAgY29uc3Qgc3ZnRWxlbWVudCA9IGNvbnRlbnQuZmlyc3RDaGlsZDtcbiAgICAgICAgY29udGVudC5yZW1vdmVDaGlsZChzdmdFbGVtZW50KTtcbiAgICAgICAgcmVwYXJlbnROb2Rlcyhjb250ZW50LCBzdmdFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGVtcGxhdGUtcmVzdWx0LmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbmltcG9ydCB7IGlzRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmUuanMnO1xuaW1wb3J0IHsgcmVtb3ZlTm9kZXMgfSBmcm9tICcuL2RvbS5qcyc7XG5pbXBvcnQgeyBub0NoYW5nZSwgbm90aGluZyB9IGZyb20gJy4vcGFydC5qcyc7XG5pbXBvcnQgeyBUZW1wbGF0ZUluc3RhbmNlIH0gZnJvbSAnLi90ZW1wbGF0ZS1pbnN0YW5jZS5qcyc7XG5pbXBvcnQgeyBUZW1wbGF0ZVJlc3VsdCB9IGZyb20gJy4vdGVtcGxhdGUtcmVzdWx0LmpzJztcbmltcG9ydCB7IGNyZWF0ZU1hcmtlciB9IGZyb20gJy4vdGVtcGxhdGUuanMnO1xuZXhwb3J0IGNvbnN0IGlzUHJpbWl0aXZlID0gKHZhbHVlKSA9PiB7XG4gICAgcmV0dXJuICh2YWx1ZSA9PT0gbnVsbCB8fFxuICAgICAgICAhKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSk7XG59O1xuZXhwb3J0IGNvbnN0IGlzSXRlcmFibGUgPSAodmFsdWUpID0+IHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHxcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgISEodmFsdWUgJiYgdmFsdWVbU3ltYm9sLml0ZXJhdG9yXSk7XG59O1xuLyoqXG4gKiBXcml0ZXMgYXR0cmlidXRlIHZhbHVlcyB0byB0aGUgRE9NIGZvciBhIGdyb3VwIG9mIEF0dHJpYnV0ZVBhcnRzIGJvdW5kIHRvIGFcbiAqIHNpbmdsZSBhdHRyaWJ1dGUuIFRoZSB2YWx1ZSBpcyBvbmx5IHNldCBvbmNlIGV2ZW4gaWYgdGhlcmUgYXJlIG11bHRpcGxlIHBhcnRzXG4gKiBmb3IgYW4gYXR0cmlidXRlLlxuICovXG5leHBvcnQgY2xhc3MgQXR0cmlidXRlQ29tbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBuYW1lLCBzdHJpbmdzKSB7XG4gICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnN0cmluZ3MgPSBzdHJpbmdzO1xuICAgICAgICB0aGlzLnBhcnRzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyaW5ncy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMucGFydHNbaV0gPSB0aGlzLl9jcmVhdGVQYXJ0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNpbmdsZSBwYXJ0LiBPdmVycmlkZSB0aGlzIHRvIGNyZWF0ZSBhIGRpZmZlcm50IHR5cGUgb2YgcGFydC5cbiAgICAgKi9cbiAgICBfY3JlYXRlUGFydCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBdHRyaWJ1dGVQYXJ0KHRoaXMpO1xuICAgIH1cbiAgICBfZ2V0VmFsdWUoKSB7XG4gICAgICAgIGNvbnN0IHN0cmluZ3MgPSB0aGlzLnN0cmluZ3M7XG4gICAgICAgIGNvbnN0IGwgPSBzdHJpbmdzLmxlbmd0aCAtIDE7XG4gICAgICAgIGNvbnN0IHBhcnRzID0gdGhpcy5wYXJ0cztcbiAgICAgICAgLy8gSWYgd2UncmUgYXNzaWduaW5nIGFuIGF0dHJpYnV0ZSB2aWEgc3ludGF4IGxpa2U6XG4gICAgICAgIC8vICAgIGF0dHI9XCIke2Zvb31cIiAgb3IgIGF0dHI9JHtmb299XG4gICAgICAgIC8vIGJ1dCBub3RcbiAgICAgICAgLy8gICAgYXR0cj1cIiR7Zm9vfSAke2Jhcn1cIiBvciBhdHRyPVwiJHtmb299IGJhelwiXG4gICAgICAgIC8vIHRoZW4gd2UgZG9uJ3Qgd2FudCB0byBjb2VyY2UgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBpbnRvIG9uZSBsb25nXG4gICAgICAgIC8vIHN0cmluZy4gSW5zdGVhZCB3ZSB3YW50IHRvIGp1c3QgcmV0dXJuIHRoZSB2YWx1ZSBpdHNlbGYgZGlyZWN0bHksXG4gICAgICAgIC8vIHNvIHRoYXQgc2FuaXRpemVET01WYWx1ZSBjYW4gZ2V0IHRoZSBhY3R1YWwgdmFsdWUgcmF0aGVyIHRoYW5cbiAgICAgICAgLy8gU3RyaW5nKHZhbHVlKVxuICAgICAgICAvLyBUaGUgZXhjZXB0aW9uIGlzIGlmIHYgaXMgYW4gYXJyYXksIGluIHdoaWNoIGNhc2Ugd2UgZG8gd2FudCB0byBzbWFzaFxuICAgICAgICAvLyBpdCB0b2dldGhlciBpbnRvIGEgc3RyaW5nIHdpdGhvdXQgY2FsbGluZyBTdHJpbmcoKSBvbiB0aGUgYXJyYXkuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFRoaXMgYWxzbyBhbGxvd3MgdHJ1c3RlZCB2YWx1ZXMgKHdoZW4gdXNpbmcgVHJ1c3RlZFR5cGVzKSBiZWluZ1xuICAgICAgICAvLyBhc3NpZ25lZCB0byBET00gc2lua3Mgd2l0aG91dCBiZWluZyBzdHJpbmdpZmllZCBpbiB0aGUgcHJvY2Vzcy5cbiAgICAgICAgaWYgKGwgPT09IDEgJiYgc3RyaW5nc1swXSA9PT0gJycgJiYgc3RyaW5nc1sxXSA9PT0gJycpIHtcbiAgICAgICAgICAgIGNvbnN0IHYgPSBwYXJ0c1swXS52YWx1ZTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdiA9PT0gJ3N5bWJvbCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nKHYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2ID09PSAnc3RyaW5nJyB8fCAhaXNJdGVyYWJsZSh2KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCB0ZXh0ID0gJyc7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICB0ZXh0ICs9IHN0cmluZ3NbaV07XG4gICAgICAgICAgICBjb25zdCBwYXJ0ID0gcGFydHNbaV07XG4gICAgICAgICAgICBpZiAocGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdiA9IHBhcnQudmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKGlzUHJpbWl0aXZlKHYpIHx8ICFpc0l0ZXJhYmxlKHYpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHQgKz0gdHlwZW9mIHYgPT09ICdzdHJpbmcnID8gdiA6IFN0cmluZyh2KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiB2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9IHR5cGVvZiB0ID09PSAnc3RyaW5nJyA/IHQgOiBTdHJpbmcodCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGV4dCArPSBzdHJpbmdzW2xdO1xuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG4gICAgY29tbWl0KCkge1xuICAgICAgICBpZiAodGhpcy5kaXJ0eSkge1xuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSh0aGlzLm5hbWUsIHRoaXMuX2dldFZhbHVlKCkpO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBBIFBhcnQgdGhhdCBjb250cm9scyBhbGwgb3IgcGFydCBvZiBhbiBhdHRyaWJ1dGUgdmFsdWUuXG4gKi9cbmV4cG9ydCBjbGFzcyBBdHRyaWJ1dGVQYXJ0IHtcbiAgICBjb25zdHJ1Y3Rvcihjb21taXR0ZXIpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jb21taXR0ZXIgPSBjb21taXR0ZXI7XG4gICAgfVxuICAgIHNldFZhbHVlKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbm9DaGFuZ2UgJiYgKCFpc1ByaW1pdGl2ZSh2YWx1ZSkgfHwgdmFsdWUgIT09IHRoaXMudmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAvLyBJZiB0aGUgdmFsdWUgaXMgYSBub3QgYSBkaXJlY3RpdmUsIGRpcnR5IHRoZSBjb21taXR0ZXIgc28gdGhhdCBpdCdsbFxuICAgICAgICAgICAgLy8gY2FsbCBzZXRBdHRyaWJ1dGUuIElmIHRoZSB2YWx1ZSBpcyBhIGRpcmVjdGl2ZSwgaXQnbGwgZGlydHkgdGhlXG4gICAgICAgICAgICAvLyBjb21taXR0ZXIgaWYgaXQgY2FsbHMgc2V0VmFsdWUoKS5cbiAgICAgICAgICAgIGlmICghaXNEaXJlY3RpdmUodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb21taXR0ZXIuZGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNvbW1pdCgpIHtcbiAgICAgICAgd2hpbGUgKGlzRGlyZWN0aXZlKHRoaXMudmFsdWUpKSB7XG4gICAgICAgICAgICBjb25zdCBkaXJlY3RpdmUgPSB0aGlzLnZhbHVlO1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IG5vQ2hhbmdlO1xuICAgICAgICAgICAgZGlyZWN0aXZlKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnZhbHVlID09PSBub0NoYW5nZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29tbWl0dGVyLmNvbW1pdCgpO1xuICAgIH1cbn1cbi8qKlxuICogQSBQYXJ0IHRoYXQgY29udHJvbHMgYSBsb2NhdGlvbiB3aXRoaW4gYSBOb2RlIHRyZWUuIExpa2UgYSBSYW5nZSwgTm9kZVBhcnRcbiAqIGhhcyBzdGFydCBhbmQgZW5kIGxvY2F0aW9ucyBhbmQgY2FuIHNldCBhbmQgdXBkYXRlIHRoZSBOb2RlcyBiZXR3ZWVuIHRob3NlXG4gKiBsb2NhdGlvbnMuXG4gKlxuICogTm9kZVBhcnRzIHN1cHBvcnQgc2V2ZXJhbCB2YWx1ZSB0eXBlczogcHJpbWl0aXZlcywgTm9kZXMsIFRlbXBsYXRlUmVzdWx0cyxcbiAqIGFzIHdlbGwgYXMgYXJyYXlzIGFuZCBpdGVyYWJsZXMgb2YgdGhvc2UgdHlwZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBOb2RlUGFydCB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB0aGlzLnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBcHBlbmRzIHRoaXMgcGFydCBpbnRvIGEgY29udGFpbmVyLlxuICAgICAqXG4gICAgICogVGhpcyBwYXJ0IG11c3QgYmUgZW1wdHksIGFzIGl0cyBjb250ZW50cyBhcmUgbm90IGF1dG9tYXRpY2FsbHkgbW92ZWQuXG4gICAgICovXG4gICAgYXBwZW5kSW50byhjb250YWluZXIpIHtcbiAgICAgICAgdGhpcy5zdGFydE5vZGUgPSBjb250YWluZXIuYXBwZW5kQ2hpbGQoY3JlYXRlTWFya2VyKCkpO1xuICAgICAgICB0aGlzLmVuZE5vZGUgPSBjb250YWluZXIuYXBwZW5kQ2hpbGQoY3JlYXRlTWFya2VyKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnNlcnRzIHRoaXMgcGFydCBhZnRlciB0aGUgYHJlZmAgbm9kZSAoYmV0d2VlbiBgcmVmYCBhbmQgYHJlZmAncyBuZXh0XG4gICAgICogc2libGluZykuIEJvdGggYHJlZmAgYW5kIGl0cyBuZXh0IHNpYmxpbmcgbXVzdCBiZSBzdGF0aWMsIHVuY2hhbmdpbmcgbm9kZXNcbiAgICAgKiBzdWNoIGFzIHRob3NlIHRoYXQgYXBwZWFyIGluIGEgbGl0ZXJhbCBzZWN0aW9uIG9mIGEgdGVtcGxhdGUuXG4gICAgICpcbiAgICAgKiBUaGlzIHBhcnQgbXVzdCBiZSBlbXB0eSwgYXMgaXRzIGNvbnRlbnRzIGFyZSBub3QgYXV0b21hdGljYWxseSBtb3ZlZC5cbiAgICAgKi9cbiAgICBpbnNlcnRBZnRlck5vZGUocmVmKSB7XG4gICAgICAgIHRoaXMuc3RhcnROb2RlID0gcmVmO1xuICAgICAgICB0aGlzLmVuZE5vZGUgPSByZWYubmV4dFNpYmxpbmc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGVuZHMgdGhpcyBwYXJ0IGludG8gYSBwYXJlbnQgcGFydC5cbiAgICAgKlxuICAgICAqIFRoaXMgcGFydCBtdXN0IGJlIGVtcHR5LCBhcyBpdHMgY29udGVudHMgYXJlIG5vdCBhdXRvbWF0aWNhbGx5IG1vdmVkLlxuICAgICAqL1xuICAgIGFwcGVuZEludG9QYXJ0KHBhcnQpIHtcbiAgICAgICAgcGFydC5fX2luc2VydCh0aGlzLnN0YXJ0Tm9kZSA9IGNyZWF0ZU1hcmtlcigpKTtcbiAgICAgICAgcGFydC5fX2luc2VydCh0aGlzLmVuZE5vZGUgPSBjcmVhdGVNYXJrZXIoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluc2VydHMgdGhpcyBwYXJ0IGFmdGVyIHRoZSBgcmVmYCBwYXJ0LlxuICAgICAqXG4gICAgICogVGhpcyBwYXJ0IG11c3QgYmUgZW1wdHksIGFzIGl0cyBjb250ZW50cyBhcmUgbm90IGF1dG9tYXRpY2FsbHkgbW92ZWQuXG4gICAgICovXG4gICAgaW5zZXJ0QWZ0ZXJQYXJ0KHJlZikge1xuICAgICAgICByZWYuX19pbnNlcnQodGhpcy5zdGFydE5vZGUgPSBjcmVhdGVNYXJrZXIoKSk7XG4gICAgICAgIHRoaXMuZW5kTm9kZSA9IHJlZi5lbmROb2RlO1xuICAgICAgICByZWYuZW5kTm9kZSA9IHRoaXMuc3RhcnROb2RlO1xuICAgIH1cbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGNvbW1pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhcnROb2RlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoaXNEaXJlY3RpdmUodGhpcy5fX3BlbmRpbmdWYWx1ZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGl2ZSA9IHRoaXMuX19wZW5kaW5nVmFsdWU7XG4gICAgICAgICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gbm9DaGFuZ2U7XG4gICAgICAgICAgICBkaXJlY3RpdmUodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLl9fcGVuZGluZ1ZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgPT09IG5vQ2hhbmdlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJpbWl0aXZlKHZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB0aGlzLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fX2NvbW1pdFRleHQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIHRoaXMuX19jb21taXRUZW1wbGF0ZVJlc3VsdCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBOb2RlKSB7XG4gICAgICAgICAgICB0aGlzLl9fY29tbWl0Tm9kZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNJdGVyYWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX19jb21taXRJdGVyYWJsZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUgPT09IG5vdGhpbmcpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBub3RoaW5nO1xuICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gRmFsbGJhY2ssIHdpbGwgcmVuZGVyIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb25cbiAgICAgICAgICAgIHRoaXMuX19jb21taXRUZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfX2luc2VydChub2RlKSB7XG4gICAgICAgIHRoaXMuZW5kTm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCB0aGlzLmVuZE5vZGUpO1xuICAgIH1cbiAgICBfX2NvbW1pdE5vZGUodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMudmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICB0aGlzLl9faW5zZXJ0KHZhbHVlKTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBfX2NvbW1pdFRleHQodmFsdWUpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xuICAgICAgICAvLyBJZiBgdmFsdWVgIGlzbid0IGFscmVhZHkgYSBzdHJpbmcsIHdlIGV4cGxpY2l0bHkgY29udmVydCBpdCBoZXJlIGluIGNhc2VcbiAgICAgICAgLy8gaXQgY2FuJ3QgYmUgaW1wbGljaXRseSBjb252ZXJ0ZWQgLSBpLmUuIGl0J3MgYSBzeW1ib2wuXG4gICAgICAgIGNvbnN0IHZhbHVlQXNTdHJpbmcgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gdmFsdWUgOiBTdHJpbmcodmFsdWUpO1xuICAgICAgICBpZiAobm9kZSA9PT0gdGhpcy5lbmROb2RlLnByZXZpb3VzU2libGluZyAmJlxuICAgICAgICAgICAgbm9kZS5ub2RlVHlwZSA9PT0gMyAvKiBOb2RlLlRFWFRfTk9ERSAqLykge1xuICAgICAgICAgICAgLy8gSWYgd2Ugb25seSBoYXZlIGEgc2luZ2xlIHRleHQgbm9kZSBiZXR3ZWVuIHRoZSBtYXJrZXJzLCB3ZSBjYW4ganVzdFxuICAgICAgICAgICAgLy8gc2V0IGl0cyB2YWx1ZSwgcmF0aGVyIHRoYW4gcmVwbGFjaW5nIGl0LlxuICAgICAgICAgICAgLy8gVE9ETyhqdXN0aW5mYWduYW5pKTogQ2FuIHdlIGp1c3QgY2hlY2sgaWYgdGhpcy52YWx1ZSBpcyBwcmltaXRpdmU/XG4gICAgICAgICAgICBub2RlLmRhdGEgPSB2YWx1ZUFzU3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fX2NvbW1pdE5vZGUoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodmFsdWVBc1N0cmluZykpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgX19jb21taXRUZW1wbGF0ZVJlc3VsdCh2YWx1ZSkge1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRoaXMub3B0aW9ucy50ZW1wbGF0ZUZhY3RvcnkodmFsdWUpO1xuICAgICAgICBpZiAodGhpcy52YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlSW5zdGFuY2UgJiZcbiAgICAgICAgICAgIHRoaXMudmFsdWUudGVtcGxhdGUgPT09IHRlbXBsYXRlKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlLnVwZGF0ZSh2YWx1ZS52YWx1ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHdlIHByb3BhZ2F0ZSB0aGUgdGVtcGxhdGUgcHJvY2Vzc29yIGZyb20gdGhlIFRlbXBsYXRlUmVzdWx0XG4gICAgICAgICAgICAvLyBzbyB0aGF0IHdlIHVzZSBpdHMgc3ludGF4IGV4dGVuc2lvbiwgZXRjLiBUaGUgdGVtcGxhdGUgZmFjdG9yeSBjb21lc1xuICAgICAgICAgICAgLy8gZnJvbSB0aGUgcmVuZGVyIGZ1bmN0aW9uIG9wdGlvbnMgc28gdGhhdCBpdCBjYW4gY29udHJvbCB0ZW1wbGF0ZVxuICAgICAgICAgICAgLy8gY2FjaGluZyBhbmQgcHJlcHJvY2Vzc2luZy5cbiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gbmV3IFRlbXBsYXRlSW5zdGFuY2UodGVtcGxhdGUsIHZhbHVlLnByb2Nlc3NvciwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGZyYWdtZW50ID0gaW5zdGFuY2UuX2Nsb25lKCk7XG4gICAgICAgICAgICBpbnN0YW5jZS51cGRhdGUodmFsdWUudmFsdWVzKTtcbiAgICAgICAgICAgIHRoaXMuX19jb21taXROb2RlKGZyYWdtZW50KTtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBpbnN0YW5jZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfX2NvbW1pdEl0ZXJhYmxlKHZhbHVlKSB7XG4gICAgICAgIC8vIEZvciBhbiBJdGVyYWJsZSwgd2UgY3JlYXRlIGEgbmV3IEluc3RhbmNlUGFydCBwZXIgaXRlbSwgdGhlbiBzZXQgaXRzXG4gICAgICAgIC8vIHZhbHVlIHRvIHRoZSBpdGVtLiBUaGlzIGlzIGEgbGl0dGxlIGJpdCBvZiBvdmVyaGVhZCBmb3IgZXZlcnkgaXRlbSBpblxuICAgICAgICAvLyBhbiBJdGVyYWJsZSwgYnV0IGl0IGxldHMgdXMgcmVjdXJzZSBlYXNpbHkgYW5kIGVmZmljaWVudGx5IHVwZGF0ZSBBcnJheXNcbiAgICAgICAgLy8gb2YgVGVtcGxhdGVSZXN1bHRzIHRoYXQgd2lsbCBiZSBjb21tb25seSByZXR1cm5lZCBmcm9tIGV4cHJlc3Npb25zIGxpa2U6XG4gICAgICAgIC8vIGFycmF5Lm1hcCgoaSkgPT4gaHRtbGAke2l9YCksIGJ5IHJldXNpbmcgZXhpc3RpbmcgVGVtcGxhdGVJbnN0YW5jZXMuXG4gICAgICAgIC8vIElmIF92YWx1ZSBpcyBhbiBhcnJheSwgdGhlbiB0aGUgcHJldmlvdXMgcmVuZGVyIHdhcyBvZiBhblxuICAgICAgICAvLyBpdGVyYWJsZSBhbmQgX3ZhbHVlIHdpbGwgY29udGFpbiB0aGUgTm9kZVBhcnRzIGZyb20gdGhlIHByZXZpb3VzXG4gICAgICAgIC8vIHJlbmRlci4gSWYgX3ZhbHVlIGlzIG5vdCBhbiBhcnJheSwgY2xlYXIgdGhpcyBwYXJ0IGFuZCBtYWtlIGEgbmV3XG4gICAgICAgIC8vIGFycmF5IGZvciBOb2RlUGFydHMuXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh0aGlzLnZhbHVlKSkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIC8vIExldHMgdXMga2VlcCB0cmFjayBvZiBob3cgbWFueSBpdGVtcyB3ZSBzdGFtcGVkIHNvIHdlIGNhbiBjbGVhciBsZWZ0b3ZlclxuICAgICAgICAvLyBpdGVtcyBmcm9tIGEgcHJldmlvdXMgcmVuZGVyXG4gICAgICAgIGNvbnN0IGl0ZW1QYXJ0cyA9IHRoaXMudmFsdWU7XG4gICAgICAgIGxldCBwYXJ0SW5kZXggPSAwO1xuICAgICAgICBsZXQgaXRlbVBhcnQ7XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB2YWx1ZSkge1xuICAgICAgICAgICAgLy8gVHJ5IHRvIHJldXNlIGFuIGV4aXN0aW5nIHBhcnRcbiAgICAgICAgICAgIGl0ZW1QYXJ0ID0gaXRlbVBhcnRzW3BhcnRJbmRleF07XG4gICAgICAgICAgICAvLyBJZiBubyBleGlzdGluZyBwYXJ0LCBjcmVhdGUgYSBuZXcgb25lXG4gICAgICAgICAgICBpZiAoaXRlbVBhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGl0ZW1QYXJ0ID0gbmV3IE5vZGVQYXJ0KHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgaXRlbVBhcnRzLnB1c2goaXRlbVBhcnQpO1xuICAgICAgICAgICAgICAgIGlmIChwYXJ0SW5kZXggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbVBhcnQuYXBwZW5kSW50b1BhcnQodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpdGVtUGFydC5pbnNlcnRBZnRlclBhcnQoaXRlbVBhcnRzW3BhcnRJbmRleCAtIDFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpdGVtUGFydC5zZXRWYWx1ZShpdGVtKTtcbiAgICAgICAgICAgIGl0ZW1QYXJ0LmNvbW1pdCgpO1xuICAgICAgICAgICAgcGFydEluZGV4Kys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRJbmRleCA8IGl0ZW1QYXJ0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIFRydW5jYXRlIHRoZSBwYXJ0cyBhcnJheSBzbyBfdmFsdWUgcmVmbGVjdHMgdGhlIGN1cnJlbnQgc3RhdGVcbiAgICAgICAgICAgIGl0ZW1QYXJ0cy5sZW5ndGggPSBwYXJ0SW5kZXg7XG4gICAgICAgICAgICB0aGlzLmNsZWFyKGl0ZW1QYXJ0ICYmIGl0ZW1QYXJ0LmVuZE5vZGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNsZWFyKHN0YXJ0Tm9kZSA9IHRoaXMuc3RhcnROb2RlKSB7XG4gICAgICAgIHJlbW92ZU5vZGVzKHRoaXMuc3RhcnROb2RlLnBhcmVudE5vZGUsIHN0YXJ0Tm9kZS5uZXh0U2libGluZywgdGhpcy5lbmROb2RlKTtcbiAgICB9XG59XG4vKipcbiAqIEltcGxlbWVudHMgYSBib29sZWFuIGF0dHJpYnV0ZSwgcm91Z2hseSBhcyBkZWZpbmVkIGluIHRoZSBIVE1MXG4gKiBzcGVjaWZpY2F0aW9uLlxuICpcbiAqIElmIHRoZSB2YWx1ZSBpcyB0cnV0aHksIHRoZW4gdGhlIGF0dHJpYnV0ZSBpcyBwcmVzZW50IHdpdGggYSB2YWx1ZSBvZlxuICogJycuIElmIHRoZSB2YWx1ZSBpcyBmYWxzZXksIHRoZSBhdHRyaWJ1dGUgaXMgcmVtb3ZlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIEJvb2xlYW5BdHRyaWJ1dGVQYXJ0IHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBuYW1lLCBzdHJpbmdzKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChzdHJpbmdzLmxlbmd0aCAhPT0gMiB8fCBzdHJpbmdzWzBdICE9PSAnJyB8fCBzdHJpbmdzWzFdICE9PSAnJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdCb29sZWFuIGF0dHJpYnV0ZXMgY2FuIG9ubHkgY29udGFpbiBhIHNpbmdsZSBleHByZXNzaW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5zdHJpbmdzID0gc3RyaW5ncztcbiAgICB9XG4gICAgc2V0VmFsdWUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBjb21taXQoKSB7XG4gICAgICAgIHdoaWxlIChpc0RpcmVjdGl2ZSh0aGlzLl9fcGVuZGluZ1ZhbHVlKSkge1xuICAgICAgICAgICAgY29uc3QgZGlyZWN0aXZlID0gdGhpcy5fX3BlbmRpbmdWYWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSBub0NoYW5nZTtcbiAgICAgICAgICAgIGRpcmVjdGl2ZSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fX3BlbmRpbmdWYWx1ZSA9PT0gbm9DaGFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2YWx1ZSA9ICEhdGhpcy5fX3BlbmRpbmdWYWx1ZTtcbiAgICAgICAgaWYgKHRoaXMudmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKHRoaXMubmFtZSwgJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSh0aGlzLm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSBub0NoYW5nZTtcbiAgICB9XG59XG4vKipcbiAqIFNldHMgYXR0cmlidXRlIHZhbHVlcyBmb3IgUHJvcGVydHlQYXJ0cywgc28gdGhhdCB0aGUgdmFsdWUgaXMgb25seSBzZXQgb25jZVxuICogZXZlbiBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgcGFydHMgZm9yIGEgcHJvcGVydHkuXG4gKlxuICogSWYgYW4gZXhwcmVzc2lvbiBjb250cm9scyB0aGUgd2hvbGUgcHJvcGVydHkgdmFsdWUsIHRoZW4gdGhlIHZhbHVlIGlzIHNpbXBseVxuICogYXNzaWduZWQgdG8gdGhlIHByb3BlcnR5IHVuZGVyIGNvbnRyb2wuIElmIHRoZXJlIGFyZSBzdHJpbmcgbGl0ZXJhbHMgb3JcbiAqIG11bHRpcGxlIGV4cHJlc3Npb25zLCB0aGVuIHRoZSBzdHJpbmdzIGFyZSBleHByZXNzaW9ucyBhcmUgaW50ZXJwb2xhdGVkIGludG9cbiAqIGEgc3RyaW5nIGZpcnN0LlxuICovXG5leHBvcnQgY2xhc3MgUHJvcGVydHlDb21taXR0ZXIgZXh0ZW5kcyBBdHRyaWJ1dGVDb21taXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG5hbWUsIHN0cmluZ3MpIHtcbiAgICAgICAgc3VwZXIoZWxlbWVudCwgbmFtZSwgc3RyaW5ncyk7XG4gICAgICAgIHRoaXMuc2luZ2xlID1cbiAgICAgICAgICAgIChzdHJpbmdzLmxlbmd0aCA9PT0gMiAmJiBzdHJpbmdzWzBdID09PSAnJyAmJiBzdHJpbmdzWzFdID09PSAnJyk7XG4gICAgfVxuICAgIF9jcmVhdGVQYXJ0KCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb3BlcnR5UGFydCh0aGlzKTtcbiAgICB9XG4gICAgX2dldFZhbHVlKCkge1xuICAgICAgICBpZiAodGhpcy5zaW5nbGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnRzWzBdLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5fZ2V0VmFsdWUoKTtcbiAgICB9XG4gICAgY29tbWl0KCkge1xuICAgICAgICBpZiAodGhpcy5kaXJ0eSkge1xuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudFt0aGlzLm5hbWVdID0gdGhpcy5fZ2V0VmFsdWUoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBQcm9wZXJ0eVBhcnQgZXh0ZW5kcyBBdHRyaWJ1dGVQYXJ0IHtcbn1cbi8vIERldGVjdCBldmVudCBsaXN0ZW5lciBvcHRpb25zIHN1cHBvcnQuIElmIHRoZSBgY2FwdHVyZWAgcHJvcGVydHkgaXMgcmVhZFxuLy8gZnJvbSB0aGUgb3B0aW9ucyBvYmplY3QsIHRoZW4gb3B0aW9ucyBhcmUgc3VwcG9ydGVkLiBJZiBub3QsIHRoZW4gdGhlIHRoaXJkXG4vLyBhcmd1bWVudCB0byBhZGQvcmVtb3ZlRXZlbnRMaXN0ZW5lciBpcyBpbnRlcnByZXRlZCBhcyB0aGUgYm9vbGVhbiBjYXB0dXJlXG4vLyB2YWx1ZSBzbyB3ZSBzaG91bGQgb25seSBwYXNzIHRoZSBgY2FwdHVyZWAgcHJvcGVydHkuXG5sZXQgZXZlbnRPcHRpb25zU3VwcG9ydGVkID0gZmFsc2U7XG4vLyBXcmFwIGludG8gYW4gSUlGRSBiZWNhdXNlIE1TIEVkZ2UgPD0gdjQxIGRvZXMgbm90IHN1cHBvcnQgaGF2aW5nIHRyeS9jYXRjaFxuLy8gYmxvY2tzIHJpZ2h0IGludG8gdGhlIGJvZHkgb2YgYSBtb2R1bGVcbigoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGdldCBjYXB0dXJlKCkge1xuICAgICAgICAgICAgICAgIGV2ZW50T3B0aW9uc1N1cHBvcnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIG9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndGVzdCcsIG9wdGlvbnMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBjYXRjaCAoX2UpIHtcbiAgICAgICAgLy8gZXZlbnQgb3B0aW9ucyBub3Qgc3VwcG9ydGVkXG4gICAgfVxufSkoKTtcbmV4cG9ydCBjbGFzcyBFdmVudFBhcnQge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGV2ZW50TmFtZSwgZXZlbnRDb250ZXh0KSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuZXZlbnROYW1lID0gZXZlbnROYW1lO1xuICAgICAgICB0aGlzLmV2ZW50Q29udGV4dCA9IGV2ZW50Q29udGV4dDtcbiAgICAgICAgdGhpcy5fX2JvdW5kSGFuZGxlRXZlbnQgPSAoZSkgPT4gdGhpcy5oYW5kbGVFdmVudChlKTtcbiAgICB9XG4gICAgc2V0VmFsdWUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBjb21taXQoKSB7XG4gICAgICAgIHdoaWxlIChpc0RpcmVjdGl2ZSh0aGlzLl9fcGVuZGluZ1ZhbHVlKSkge1xuICAgICAgICAgICAgY29uc3QgZGlyZWN0aXZlID0gdGhpcy5fX3BlbmRpbmdWYWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSBub0NoYW5nZTtcbiAgICAgICAgICAgIGRpcmVjdGl2ZSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fX3BlbmRpbmdWYWx1ZSA9PT0gbm9DaGFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdMaXN0ZW5lciA9IHRoaXMuX19wZW5kaW5nVmFsdWU7XG4gICAgICAgIGNvbnN0IG9sZExpc3RlbmVyID0gdGhpcy52YWx1ZTtcbiAgICAgICAgY29uc3Qgc2hvdWxkUmVtb3ZlTGlzdGVuZXIgPSBuZXdMaXN0ZW5lciA9PSBudWxsIHx8XG4gICAgICAgICAgICBvbGRMaXN0ZW5lciAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgKG5ld0xpc3RlbmVyLmNhcHR1cmUgIT09IG9sZExpc3RlbmVyLmNhcHR1cmUgfHxcbiAgICAgICAgICAgICAgICAgICAgbmV3TGlzdGVuZXIub25jZSAhPT0gb2xkTGlzdGVuZXIub25jZSB8fFxuICAgICAgICAgICAgICAgICAgICBuZXdMaXN0ZW5lci5wYXNzaXZlICE9PSBvbGRMaXN0ZW5lci5wYXNzaXZlKTtcbiAgICAgICAgY29uc3Qgc2hvdWxkQWRkTGlzdGVuZXIgPSBuZXdMaXN0ZW5lciAhPSBudWxsICYmIChvbGRMaXN0ZW5lciA9PSBudWxsIHx8IHNob3VsZFJlbW92ZUxpc3RlbmVyKTtcbiAgICAgICAgaWYgKHNob3VsZFJlbW92ZUxpc3RlbmVyKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLmV2ZW50TmFtZSwgdGhpcy5fX2JvdW5kSGFuZGxlRXZlbnQsIHRoaXMuX19vcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hvdWxkQWRkTGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX19vcHRpb25zID0gZ2V0T3B0aW9ucyhuZXdMaXN0ZW5lcik7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLmV2ZW50TmFtZSwgdGhpcy5fX2JvdW5kSGFuZGxlRXZlbnQsIHRoaXMuX19vcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbHVlID0gbmV3TGlzdGVuZXI7XG4gICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSBub0NoYW5nZTtcbiAgICB9XG4gICAgaGFuZGxlRXZlbnQoZXZlbnQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlLmNhbGwodGhpcy5ldmVudENvbnRleHQgfHwgdGhpcy5lbGVtZW50LCBldmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlLmhhbmRsZUV2ZW50KGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIFdlIGNvcHkgb3B0aW9ucyBiZWNhdXNlIG9mIHRoZSBpbmNvbnNpc3RlbnQgYmVoYXZpb3Igb2YgYnJvd3NlcnMgd2hlbiByZWFkaW5nXG4vLyB0aGUgdGhpcmQgYXJndW1lbnQgb2YgYWRkL3JlbW92ZUV2ZW50TGlzdGVuZXIuIElFMTEgZG9lc24ndCBzdXBwb3J0IG9wdGlvbnNcbi8vIGF0IGFsbC4gQ2hyb21lIDQxIG9ubHkgcmVhZHMgYGNhcHR1cmVgIGlmIHRoZSBhcmd1bWVudCBpcyBhbiBvYmplY3QuXG5jb25zdCBnZXRPcHRpb25zID0gKG8pID0+IG8gJiZcbiAgICAoZXZlbnRPcHRpb25zU3VwcG9ydGVkID9cbiAgICAgICAgeyBjYXB0dXJlOiBvLmNhcHR1cmUsIHBhc3NpdmU6IG8ucGFzc2l2ZSwgb25jZTogby5vbmNlIH0gOlxuICAgICAgICBvLmNhcHR1cmUpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFydHMuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuaW1wb3J0IHsgQXR0cmlidXRlQ29tbWl0dGVyLCBCb29sZWFuQXR0cmlidXRlUGFydCwgRXZlbnRQYXJ0LCBOb2RlUGFydCwgUHJvcGVydHlDb21taXR0ZXIgfSBmcm9tICcuL3BhcnRzLmpzJztcbi8qKlxuICogQ3JlYXRlcyBQYXJ0cyB3aGVuIGEgdGVtcGxhdGUgaXMgaW5zdGFudGlhdGVkLlxuICovXG5leHBvcnQgY2xhc3MgRGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgcGFydHMgZm9yIGFuIGF0dHJpYnV0ZS1wb3NpdGlvbiBiaW5kaW5nLCBnaXZlbiB0aGUgZXZlbnQsIGF0dHJpYnV0ZVxuICAgICAqIG5hbWUsIGFuZCBzdHJpbmcgbGl0ZXJhbHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBUaGUgZWxlbWVudCBjb250YWluaW5nIHRoZSBiaW5kaW5nXG4gICAgICogQHBhcmFtIG5hbWUgIFRoZSBhdHRyaWJ1dGUgbmFtZVxuICAgICAqIEBwYXJhbSBzdHJpbmdzIFRoZSBzdHJpbmcgbGl0ZXJhbHMuIFRoZXJlIGFyZSBhbHdheXMgYXQgbGVhc3QgdHdvIHN0cmluZ3MsXG4gICAgICogICBldmVudCBmb3IgZnVsbHktY29udHJvbGxlZCBiaW5kaW5ncyB3aXRoIGEgc2luZ2xlIGV4cHJlc3Npb24uXG4gICAgICovXG4gICAgaGFuZGxlQXR0cmlidXRlRXhwcmVzc2lvbnMoZWxlbWVudCwgbmFtZSwgc3RyaW5ncywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBwcmVmaXggPSBuYW1lWzBdO1xuICAgICAgICBpZiAocHJlZml4ID09PSAnLicpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbW1pdHRlciA9IG5ldyBQcm9wZXJ0eUNvbW1pdHRlcihlbGVtZW50LCBuYW1lLnNsaWNlKDEpLCBzdHJpbmdzKTtcbiAgICAgICAgICAgIHJldHVybiBjb21taXR0ZXIucGFydHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZWZpeCA9PT0gJ0AnKSB7XG4gICAgICAgICAgICByZXR1cm4gW25ldyBFdmVudFBhcnQoZWxlbWVudCwgbmFtZS5zbGljZSgxKSwgb3B0aW9ucy5ldmVudENvbnRleHQpXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJlZml4ID09PSAnPycpIHtcbiAgICAgICAgICAgIHJldHVybiBbbmV3IEJvb2xlYW5BdHRyaWJ1dGVQYXJ0KGVsZW1lbnQsIG5hbWUuc2xpY2UoMSksIHN0cmluZ3MpXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb21taXR0ZXIgPSBuZXcgQXR0cmlidXRlQ29tbWl0dGVyKGVsZW1lbnQsIG5hbWUsIHN0cmluZ3MpO1xuICAgICAgICByZXR1cm4gY29tbWl0dGVyLnBhcnRzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgcGFydHMgZm9yIGEgdGV4dC1wb3NpdGlvbiBiaW5kaW5nLlxuICAgICAqIEBwYXJhbSB0ZW1wbGF0ZUZhY3RvcnlcbiAgICAgKi9cbiAgICBoYW5kbGVUZXh0RXhwcmVzc2lvbihvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgTm9kZVBhcnQob3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IGRlZmF1bHRUZW1wbGF0ZVByb2Nlc3NvciA9IG5ldyBEZWZhdWx0VGVtcGxhdGVQcm9jZXNzb3IoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHQtdGVtcGxhdGUtcHJvY2Vzc29yLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbmltcG9ydCB7IG1hcmtlciwgVGVtcGxhdGUgfSBmcm9tICcuL3RlbXBsYXRlLmpzJztcbi8qKlxuICogVGhlIGRlZmF1bHQgVGVtcGxhdGVGYWN0b3J5IHdoaWNoIGNhY2hlcyBUZW1wbGF0ZXMga2V5ZWQgb25cbiAqIHJlc3VsdC50eXBlIGFuZCByZXN1bHQuc3RyaW5ncy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRlbXBsYXRlRmFjdG9yeShyZXN1bHQpIHtcbiAgICBsZXQgdGVtcGxhdGVDYWNoZSA9IHRlbXBsYXRlQ2FjaGVzLmdldChyZXN1bHQudHlwZSk7XG4gICAgaWYgKHRlbXBsYXRlQ2FjaGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0ZW1wbGF0ZUNhY2hlID0ge1xuICAgICAgICAgICAgc3RyaW5nc0FycmF5OiBuZXcgV2Vha01hcCgpLFxuICAgICAgICAgICAga2V5U3RyaW5nOiBuZXcgTWFwKClcbiAgICAgICAgfTtcbiAgICAgICAgdGVtcGxhdGVDYWNoZXMuc2V0KHJlc3VsdC50eXBlLCB0ZW1wbGF0ZUNhY2hlKTtcbiAgICB9XG4gICAgbGV0IHRlbXBsYXRlID0gdGVtcGxhdGVDYWNoZS5zdHJpbmdzQXJyYXkuZ2V0KHJlc3VsdC5zdHJpbmdzKTtcbiAgICBpZiAodGVtcGxhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgfVxuICAgIC8vIElmIHRoZSBUZW1wbGF0ZVN0cmluZ3NBcnJheSBpcyBuZXcsIGdlbmVyYXRlIGEga2V5IGZyb20gdGhlIHN0cmluZ3NcbiAgICAvLyBUaGlzIGtleSBpcyBzaGFyZWQgYmV0d2VlbiBhbGwgdGVtcGxhdGVzIHdpdGggaWRlbnRpY2FsIGNvbnRlbnRcbiAgICBjb25zdCBrZXkgPSByZXN1bHQuc3RyaW5ncy5qb2luKG1hcmtlcik7XG4gICAgLy8gQ2hlY2sgaWYgd2UgYWxyZWFkeSBoYXZlIGEgVGVtcGxhdGUgZm9yIHRoaXMga2V5XG4gICAgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhY2hlLmtleVN0cmluZy5nZXQoa2V5KTtcbiAgICBpZiAodGVtcGxhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIG5vdCBzZWVuIHRoaXMga2V5IGJlZm9yZSwgY3JlYXRlIGEgbmV3IFRlbXBsYXRlXG4gICAgICAgIHRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKHJlc3VsdCwgcmVzdWx0LmdldFRlbXBsYXRlRWxlbWVudCgpKTtcbiAgICAgICAgLy8gQ2FjaGUgdGhlIFRlbXBsYXRlIGZvciB0aGlzIGtleVxuICAgICAgICB0ZW1wbGF0ZUNhY2hlLmtleVN0cmluZy5zZXQoa2V5LCB0ZW1wbGF0ZSk7XG4gICAgfVxuICAgIC8vIENhY2hlIGFsbCBmdXR1cmUgcXVlcmllcyBmb3IgdGhpcyBUZW1wbGF0ZVN0cmluZ3NBcnJheVxuICAgIHRlbXBsYXRlQ2FjaGUuc3RyaW5nc0FycmF5LnNldChyZXN1bHQuc3RyaW5ncywgdGVtcGxhdGUpO1xuICAgIHJldHVybiB0ZW1wbGF0ZTtcbn1cbmV4cG9ydCBjb25zdCB0ZW1wbGF0ZUNhY2hlcyA9IG5ldyBNYXAoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRlbXBsYXRlLWZhY3RvcnkuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuaW1wb3J0IHsgcmVtb3ZlTm9kZXMgfSBmcm9tICcuL2RvbS5qcyc7XG5pbXBvcnQgeyBOb2RlUGFydCB9IGZyb20gJy4vcGFydHMuanMnO1xuaW1wb3J0IHsgdGVtcGxhdGVGYWN0b3J5IH0gZnJvbSAnLi90ZW1wbGF0ZS1mYWN0b3J5LmpzJztcbmV4cG9ydCBjb25zdCBwYXJ0cyA9IG5ldyBXZWFrTWFwKCk7XG4vKipcbiAqIFJlbmRlcnMgYSB0ZW1wbGF0ZSByZXN1bHQgb3Igb3RoZXIgdmFsdWUgdG8gYSBjb250YWluZXIuXG4gKlxuICogVG8gdXBkYXRlIGEgY29udGFpbmVyIHdpdGggbmV3IHZhbHVlcywgcmVldmFsdWF0ZSB0aGUgdGVtcGxhdGUgbGl0ZXJhbCBhbmRcbiAqIGNhbGwgYHJlbmRlcmAgd2l0aCB0aGUgbmV3IHJlc3VsdC5cbiAqXG4gKiBAcGFyYW0gcmVzdWx0IEFueSB2YWx1ZSByZW5kZXJhYmxlIGJ5IE5vZGVQYXJ0IC0gdHlwaWNhbGx5IGEgVGVtcGxhdGVSZXN1bHRcbiAqICAgICBjcmVhdGVkIGJ5IGV2YWx1YXRpbmcgYSB0ZW1wbGF0ZSB0YWcgbGlrZSBgaHRtbGAgb3IgYHN2Z2AuXG4gKiBAcGFyYW0gY29udGFpbmVyIEEgRE9NIHBhcmVudCB0byByZW5kZXIgdG8uIFRoZSBlbnRpcmUgY29udGVudHMgYXJlIGVpdGhlclxuICogICAgIHJlcGxhY2VkLCBvciBlZmZpY2llbnRseSB1cGRhdGVkIGlmIHRoZSBzYW1lIHJlc3VsdCB0eXBlIHdhcyBwcmV2aW91c1xuICogICAgIHJlbmRlcmVkIHRoZXJlLlxuICogQHBhcmFtIG9wdGlvbnMgUmVuZGVyT3B0aW9ucyBmb3IgdGhlIGVudGlyZSByZW5kZXIgdHJlZSByZW5kZXJlZCB0byB0aGlzXG4gKiAgICAgY29udGFpbmVyLiBSZW5kZXIgb3B0aW9ucyBtdXN0ICpub3QqIGNoYW5nZSBiZXR3ZWVuIHJlbmRlcnMgdG8gdGhlIHNhbWVcbiAqICAgICBjb250YWluZXIsIGFzIHRob3NlIGNoYW5nZXMgd2lsbCBub3QgZWZmZWN0IHByZXZpb3VzbHkgcmVuZGVyZWQgRE9NLlxuICovXG5leHBvcnQgY29uc3QgcmVuZGVyID0gKHJlc3VsdCwgY29udGFpbmVyLCBvcHRpb25zKSA9PiB7XG4gICAgbGV0IHBhcnQgPSBwYXJ0cy5nZXQoY29udGFpbmVyKTtcbiAgICBpZiAocGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlbW92ZU5vZGVzKGNvbnRhaW5lciwgY29udGFpbmVyLmZpcnN0Q2hpbGQpO1xuICAgICAgICBwYXJ0cy5zZXQoY29udGFpbmVyLCBwYXJ0ID0gbmV3IE5vZGVQYXJ0KE9iamVjdC5hc3NpZ24oeyB0ZW1wbGF0ZUZhY3RvcnkgfSwgb3B0aW9ucykpKTtcbiAgICAgICAgcGFydC5hcHBlbmRJbnRvKGNvbnRhaW5lcik7XG4gICAgfVxuICAgIHBhcnQuc2V0VmFsdWUocmVzdWx0KTtcbiAgICBwYXJ0LmNvbW1pdCgpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlbmRlci5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG4vKipcbiAqXG4gKiBNYWluIGxpdC1odG1sIG1vZHVsZS5cbiAqXG4gKiBNYWluIGV4cG9ydHM6XG4gKlxuICogLSAgW1todG1sXV1cbiAqIC0gIFtbc3ZnXV1cbiAqIC0gIFtbcmVuZGVyXV1cbiAqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqL1xuLyoqXG4gKiBEbyBub3QgcmVtb3ZlIHRoaXMgY29tbWVudDsgaXQga2VlcHMgdHlwZWRvYyBmcm9tIG1pc3BsYWNpbmcgdGhlIG1vZHVsZVxuICogZG9jcy5cbiAqL1xuaW1wb3J0IHsgZGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yIH0gZnJvbSAnLi9saWIvZGVmYXVsdC10ZW1wbGF0ZS1wcm9jZXNzb3IuanMnO1xuaW1wb3J0IHsgU1ZHVGVtcGxhdGVSZXN1bHQsIFRlbXBsYXRlUmVzdWx0IH0gZnJvbSAnLi9saWIvdGVtcGxhdGUtcmVzdWx0LmpzJztcbmV4cG9ydCB7IERlZmF1bHRUZW1wbGF0ZVByb2Nlc3NvciwgZGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yIH0gZnJvbSAnLi9saWIvZGVmYXVsdC10ZW1wbGF0ZS1wcm9jZXNzb3IuanMnO1xuZXhwb3J0IHsgZGlyZWN0aXZlLCBpc0RpcmVjdGl2ZSB9IGZyb20gJy4vbGliL2RpcmVjdGl2ZS5qcyc7XG4vLyBUT0RPKGp1c3RpbmZhZ25hbmkpOiByZW1vdmUgbGluZSB3aGVuIHdlIGdldCBOb2RlUGFydCBtb3ZpbmcgbWV0aG9kc1xuZXhwb3J0IHsgcmVtb3ZlTm9kZXMsIHJlcGFyZW50Tm9kZXMgfSBmcm9tICcuL2xpYi9kb20uanMnO1xuZXhwb3J0IHsgbm9DaGFuZ2UsIG5vdGhpbmcgfSBmcm9tICcuL2xpYi9wYXJ0LmpzJztcbmV4cG9ydCB7IEF0dHJpYnV0ZUNvbW1pdHRlciwgQXR0cmlidXRlUGFydCwgQm9vbGVhbkF0dHJpYnV0ZVBhcnQsIEV2ZW50UGFydCwgaXNJdGVyYWJsZSwgaXNQcmltaXRpdmUsIE5vZGVQYXJ0LCBQcm9wZXJ0eUNvbW1pdHRlciwgUHJvcGVydHlQYXJ0IH0gZnJvbSAnLi9saWIvcGFydHMuanMnO1xuZXhwb3J0IHsgcGFydHMsIHJlbmRlciB9IGZyb20gJy4vbGliL3JlbmRlci5qcyc7XG5leHBvcnQgeyB0ZW1wbGF0ZUNhY2hlcywgdGVtcGxhdGVGYWN0b3J5IH0gZnJvbSAnLi9saWIvdGVtcGxhdGUtZmFjdG9yeS5qcyc7XG5leHBvcnQgeyBUZW1wbGF0ZUluc3RhbmNlIH0gZnJvbSAnLi9saWIvdGVtcGxhdGUtaW5zdGFuY2UuanMnO1xuZXhwb3J0IHsgU1ZHVGVtcGxhdGVSZXN1bHQsIFRlbXBsYXRlUmVzdWx0IH0gZnJvbSAnLi9saWIvdGVtcGxhdGUtcmVzdWx0LmpzJztcbmV4cG9ydCB7IGNyZWF0ZU1hcmtlciwgaXNUZW1wbGF0ZVBhcnRBY3RpdmUsIFRlbXBsYXRlIH0gZnJvbSAnLi9saWIvdGVtcGxhdGUuanMnO1xuLy8gSU1QT1JUQU5UOiBkbyBub3QgY2hhbmdlIHRoZSBwcm9wZXJ0eSBuYW1lIG9yIHRoZSBhc3NpZ25tZW50IGV4cHJlc3Npb24uXG4vLyBUaGlzIGxpbmUgd2lsbCBiZSB1c2VkIGluIHJlZ2V4ZXMgdG8gc2VhcmNoIGZvciBsaXQtaHRtbCB1c2FnZS5cbi8vIFRPRE8oanVzdGluZmFnbmFuaSk6IGluamVjdCB2ZXJzaW9uIG51bWJlciBhdCBidWlsZCB0aW1lXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAod2luZG93WydsaXRIdG1sVmVyc2lvbnMnXSB8fCAod2luZG93WydsaXRIdG1sVmVyc2lvbnMnXSA9IFtdKSkucHVzaCgnMS40LjEnKTtcbn1cbi8qKlxuICogSW50ZXJwcmV0cyBhIHRlbXBsYXRlIGxpdGVyYWwgYXMgYW4gSFRNTCB0ZW1wbGF0ZSB0aGF0IGNhbiBlZmZpY2llbnRseVxuICogcmVuZGVyIHRvIGFuZCB1cGRhdGUgYSBjb250YWluZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBodG1sID0gKHN0cmluZ3MsIC4uLnZhbHVlcykgPT4gbmV3IFRlbXBsYXRlUmVzdWx0KHN0cmluZ3MsIHZhbHVlcywgJ2h0bWwnLCBkZWZhdWx0VGVtcGxhdGVQcm9jZXNzb3IpO1xuLyoqXG4gKiBJbnRlcnByZXRzIGEgdGVtcGxhdGUgbGl0ZXJhbCBhcyBhbiBTVkcgdGVtcGxhdGUgdGhhdCBjYW4gZWZmaWNpZW50bHlcbiAqIHJlbmRlciB0byBhbmQgdXBkYXRlIGEgY29udGFpbmVyLlxuICovXG5leHBvcnQgY29uc3Qgc3ZnID0gKHN0cmluZ3MsIC4uLnZhbHVlcykgPT4gbmV3IFNWR1RlbXBsYXRlUmVzdWx0KHN0cmluZ3MsIHZhbHVlcywgJ3N2ZycsIGRlZmF1bHRUZW1wbGF0ZVByb2Nlc3Nvcik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXQtaHRtbC5qcy5tYXAiLCIvKipcbiAqIENhY2hlIGNsYXNzIHRoYXQgYWxsb3dzIHRvIHNlYXJjaCBpbiBhIGNhY2hlIGhpZXJhcmNoeS5cbiAqIEB0ZW1wbGF0ZSBULCBRXG4gKi9cbmV4cG9ydCBjbGFzcyBDYWNoZSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgQ2FjaGUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtDYWNoZX0gW3BhcmVudF1cbiAgICovXG4gIGNvbnN0cnVjdG9yKHBhcmVudCkge1xuICAgIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgICB0aGlzLl9jYWNoZSA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgYm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgYW4gZWxlbWVudCB3aXRoIHRoZSBzcGVjaWZpZWQga2V5IGV4aXN0cyBvciBub3QuXG4gICAqXG4gICAqIEBwYXJhbSB7VH0ga2V5IC0gVGhlIGtleSBvZiB0aGUgZWxlbWVudCB0byB0ZXN0IGZvciBwcmVzZW5jZSBpbiB0aGUgQ2FjaGUgb2JqZWN0LlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaGFzKGtleSkge1xuICAgIHJldHVybiAhISh0aGlzLl9jYWNoZS5oYXMoa2V5KSB8fCAodGhpcy5fcGFyZW50ICYmIHRoaXMuX3BhcmVudC5fY2FjaGUuaGFzKGtleSkpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIG9yIHVwZGF0ZXMgYW4gZWxlbWVudCB3aXRoIGEgc3BlY2lmaWVkIGtleSBhbmQgYSB2YWx1ZSB0byBhIENhY2hlIG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtIHtUfSBrZXkgLSBUaGUga2V5IG9mIHRoZSBlbGVtZW50IHRvIGFkZCB0byB0aGUgQ2FjaGUgb2JqZWN0LlxuICAgKiBAcGFyYW0ge1F9IHZhbHVlIC0gVGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50IHRvIGFkZCB0byB0aGUgQ2FjaGUgb2JqZWN0LlxuICAgKiBAcmV0dXJuIHtDYWNoZTxULCBRPn0gdGhlIGNhY2hlIG9iamVjdFxuICAgKi9cbiAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICB0aGlzLl9jYWNoZS5zZXQoa2V5LCB2YWx1ZSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3BlY2lmaWVkIGVsZW1lbnQgZnJvbSBhIE1hcCBvYmplY3QuIElmIHRoZSB2YWx1ZSB0aGF0IGlzIGFzc29jaWF0ZWQgdG8gdGhlIHByb3ZpZGVkIGtleSBpcyBhblxuICAgKiBvYmplY3QsIHRoZW4geW91IHdpbGwgZ2V0IGEgcmVmZXJlbmNlIHRvIHRoYXQgb2JqZWN0IGFuZCBhbnkgY2hhbmdlIG1hZGUgdG8gdGhhdCBvYmplY3Qgd2lsbCBlZmZlY3RpdmVseSBtb2RpZnlcbiAgICogaXQgaW5zaWRlIHRoZSBNYXAgb2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0ge1R9IGtleSAtIFRoZSBrZXkgb2YgdGhlIGVsZW1lbnQgdG8gcmV0dXJuIGZyb20gdGhlIENhY2hlIG9iamVjdC5cbiAgICogQHJldHVybiB7UX1cbiAgICovXG4gIGdldChrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FjaGUuZ2V0KGtleSkgfHwgKHRoaXMuX3BhcmVudCAmJiB0aGlzLl9wYXJlbnQuX2NhY2hlLmdldChrZXkpKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBHbG9iYWwgY291bnRlciB0byBzY29wZSB0aGUgY3VzdG9tIGVsZW1lbnRzXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqL1xubGV0IGNvdW50ZXIgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMDAwMDApO1xuXG4vKipcbiAqIEFsbG93ZWQgdGFnIG5hbWUgY2hhcnNcbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBjaGFycyA9IGAtfFxcXFwufFswLTldfFthLXpdYDtcblxuLyoqXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gY2hlY2sgaWYgYSB2YWx1ZSBpcyBhIHZhbGlkIHRhZyBuYW1lXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xuY29uc3QgdGFnUmVnRXhwID0gbmV3IFJlZ0V4cChgW2Etel0oJHtjaGFyc30pKi0oJHtjaGFyc30pKmApO1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgdGFnIG5hbWUgaXMgdmFsaWRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgaXNWYWxpZCA9IHRhZyA9PiB0YWdSZWdFeHAuZXhlYyh0YWcpICE9PSBudWxsO1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgdGFnIGlzIGFscmVhZHkgcmVnaXN0ZXJlZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge0N1c3RvbUVsZW1lbnRSZWdpc3RyeX0gcmVnaXN0cnlcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBpc1RhZ1JlZ2lzdGVyZWQgPSAobmFtZSwgcmVnaXN0cnkpID0+ICEhcmVnaXN0cnkuZ2V0KG5hbWUpO1xuXG4vKipcbiAqIEdpdmVuIGEgdGFnIG5hbWUgc2NvcGVzIGl0IHdpdGggYSBudW1iZXIgc3VmZml4XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWVcbiAqIEBwYXJhbSB7Q3VzdG9tRWxlbWVudFJlZ2lzdHJ5fSByZWdpc3RyeVxuICogQHJldHVybnMge3N0cmluZ30gc2NvcGVkIHRhZyBuYW1lXG4gKi9cbmNvbnN0IGluY3JlbWVudFRhZ05hbWUgPSAodGFnTmFtZSwgcmVnaXN0cnkpID0+IHtcbiAgY29uc3QgbmV3VGFnTmFtZSA9IGAke3RhZ05hbWV9LSR7KGNvdW50ZXIgKz0gMSl9YDtcblxuICBpZiAoaXNUYWdSZWdpc3RlcmVkKG5ld1RhZ05hbWUsIHJlZ2lzdHJ5KSkge1xuICAgIHJldHVybiBpbmNyZW1lbnRUYWdOYW1lKHRhZ05hbWUsIHJlZ2lzdHJ5KTtcbiAgfVxuXG4gIHJldHVybiBuZXdUYWdOYW1lO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgdW5pcXVlIHNjb3BlZCB0YWcgbmFtZVxuICpcbiAqIEBleHBvcnRzXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnTmFtZSAtIHRhZyBuYW1lIHRvIHNjb3BlXG4gKiBAcGFyYW0ge0N1c3RvbUVsZW1lbnRSZWdpc3RyeX0gcmVnaXN0cnlcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHNjb3BlZCB0YWcgbmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVW5pcXVlVGFnKHRhZ05hbWUsIHJlZ2lzdHJ5ID0gY3VzdG9tRWxlbWVudHMpIHtcbiAgaWYgKCFpc1ZhbGlkKHRhZ05hbWUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd0YWdOYW1lIGlzIGludmFsaWQnKTtcbiAgfVxuXG4gIHJldHVybiBpbmNyZW1lbnRUYWdOYW1lKHRhZ05hbWUsIHJlZ2lzdHJ5KTtcbn1cbiIsIi8qKlxuICogVGhlIGdsb2JhbCBjYWNoZSBmb3IgdGFnIG5hbWVzXG4gKlxuICogQHR5cGUge1dlYWtNYXA8dHlwZW9mIEhUTUxFbGVtZW50LCBzdHJpbmc+fVxuICovXG5jb25zdCBnbG9iYWxUYWdzQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuXG4vKipcbiAqIEFkZHMgYSB0YWcgdG8gdGhlIGdsb2JhbCB0YWdzIGNhY2hlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZ1xuICogQHBhcmFtIHt0eXBlb2YgSFRNTEVsZW1lbnR9IGtsYXNzXG4gKi9cbmV4cG9ydCBjb25zdCBhZGRUb0dsb2JhbFRhZ3NDYWNoZSA9ICh0YWcsIGtsYXNzKSA9PiBnbG9iYWxUYWdzQ2FjaGUuc2V0KGtsYXNzLCB0YWcpO1xuXG4vKipcbiAqIEdldHMgYSB0YWcgZnJvbSB0aGUgZ2xvYmFsIHRhZ3MgY2FjaGVcbiAqXG4gKiBAZXhwb3J0c1xuICogQHBhcmFtIHt0eXBlb2YgSFRNTEVsZW1lbnR9IGtsYXNzXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfHN0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IGdldEZyb21HbG9iYWxUYWdzQ2FjaGUgPSBrbGFzcyA9PiBnbG9iYWxUYWdzQ2FjaGUuZ2V0KGtsYXNzKTtcbiIsImltcG9ydCB7IGNyZWF0ZVVuaXF1ZVRhZyB9IGZyb20gJy4vY3JlYXRlVW5pcXVlVGFnLmpzJztcbmltcG9ydCB7IGdldEZyb21HbG9iYWxUYWdzQ2FjaGUsIGFkZFRvR2xvYmFsVGFnc0NhY2hlIH0gZnJvbSAnLi9nbG9iYWxUYWdzQ2FjaGUuanMnO1xuXG4vKipcbiAqIENoZWNrcyBpZiBrbGFzcyBpcyBhIHN1YmNsYXNzIG9mIG5hdGl2ZSBIVE1MRWxlbWVudCBvciBwb2x5ZmlsbGVkIEhUTUxFbGVtZW50LlxuICogV2UgbWFudWFsbHkgbG9vcCBvdmVyIHRoZSBwcm90b3RwZSwgc28gd2UgY2FuIGRldGVjdCBpZiB3ZSBleHRlbmQgZnJvbSBuYXRpdmUgSFRNTEVsZW1lbnRcbiAqIG9yIHRoZSBwb2x5ZmlsbGVkIG9uZSBmcm9tIHNjb3BlZC1jdXN0b20tZWxlbWVudC1yZWdpc3RyeSAod2luZG93LkhUTUxFbGVtZW50KVxuICogQHBhcmFtIHt0eXBlb2YgSFRNTEVsZW1lbnR9IGtsYXNzIGEgY2xhc3MsIGxpa2UgTGl0RWxlbWVudFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGV4dGVuZHNIVE1MRWxlbWVudChrbGFzcykge1xuICBsZXQgY3VycmVudENsYXNzID0ga2xhc3M7XG4gIHdoaWxlIChjdXJyZW50Q2xhc3MpIHtcbiAgICAvLyBjdXJyZW50Q2xhc3MgY291bGQgZWl0aGVyIGJlOlxuICAgIC8vIDEuIHVucGF0Y2hlZCwgbmF0aXZlIEhUTUxFbGVtZW50ICh3aGVuIHBvbHlmaWxsIG5vdCBsb2FkZWQgdGhpcyBpcyBhbHdheXMgdGhlIGNhc2UpLCBvcjpcbiAgICAvLyAyLiBwYXRjaGVkIHdpbmRvdy5IVE1MRWxlbWVudCAoY2FuIGJlIHRoZSBjYXNlIHdoZW4gcG9seWZpbGwgaXMgbG9hZGVkKVxuICAgIC8vIElmIHBvbHlmaWxsIGlzIGxvYWRlZCBhbmQgY3VycmVudENsYXNzIGlzIHRoZSBuYXRpdmUgSFRNTEVsZW1lbnQsIHdlIGRvbid0IGhhdmUgYVxuICAgIC8vIHJlZmVyZW5jZSB0byBpdCAocG9seWZpbGwgY2FsbHMgaXQgTmF0aXZlSFRNTEVsZW1lbnQsIGJ1dCBkb2Vzbid0IGV4cG9zZSBpdCksXG4gICAgLy8gc28gd2UgY2hlY2sgaXRzIG5hbWUuXG4gICAgaWYgKGN1cnJlbnRDbGFzcyA9PT0gd2luZG93LkhUTUxFbGVtZW50IHx8IGN1cnJlbnRDbGFzcy5uYW1lID09PSAnSFRNTEVsZW1lbnQnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY3VycmVudENsYXNzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGN1cnJlbnRDbGFzcyk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIERlZmluZXMgYSBjdXN0b20gZWxlbWVudFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWdOYW1lXG4gKiBAcGFyYW0ge3R5cGVvZiBIVE1MRWxlbWVudH0ga2xhc3NcbiAqIEBwYXJhbSB7Q3VzdG9tRWxlbWVudFJlZ2lzdHJ5fSByZWdpc3RyeVxuICovXG5jb25zdCBkZWZpbmVFbGVtZW50ID0gKHRhZ05hbWUsIGtsYXNzLCByZWdpc3RyeSA9IGN1c3RvbUVsZW1lbnRzKSA9PiB7XG4gIGFkZFRvR2xvYmFsVGFnc0NhY2hlKHRhZ05hbWUsIGtsYXNzKTtcbiAgcmVnaXN0cnkuZGVmaW5lKHRhZ05hbWUsIGNsYXNzIGV4dGVuZHMga2xhc3Mge30pO1xufTtcblxuLyoqXG4gKiBTdG9yZXMgYSBsYXp5IGVsZW1lbnQgaW4gdGhlIGNhY2hlIHRvIGJlIHVzZWQgaW4gZnV0dXJlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWVcbiAqIEBwYXJhbSB7Q3VzdG9tRWxlbWVudFJlZ2lzdHJ5fSByZWdpc3RyeVxuICogQHBhcmFtIHtpbXBvcnQoJy4vQ2FjaGUuanMnKS5DYWNoZTxzdHJpbmcsIHN0cmluZz59IHRhZ3NDYWNoZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuY29uc3Qgc3RvcmVMYXp5RWxlbWVudEluQ2FjaGUgPSAodGFnTmFtZSwgcmVnaXN0cnksIHRhZ3NDYWNoZSkgPT4ge1xuICBjb25zdCB0YWcgPSBjcmVhdGVVbmlxdWVUYWcodGFnTmFtZSwgcmVnaXN0cnkpO1xuXG4gIGlmICghdGFnc0NhY2hlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdMYXp5IHNjb3BlZCBlbGVtZW50cyByZXF1aXJlcyB0aGUgdXNlIG9mIHRhZ3MgY2FjaGUnKTtcbiAgfVxuXG4gIHRhZ3NDYWNoZS5zZXQodGFnTmFtZSwgdGFnKTtcblxuICByZXR1cm4gdGFnO1xufTtcblxuLyoqXG4gKiBEZWZpbmUgYSBzY29wZWQgY3VzdG9tIGVsZW1lbnQgc3RvcmluZyB0aGUgc2NvcGVkIHRhZyBuYW1lIGluIHRoZSBjYWNoZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWdOYW1lXG4gKiBAcGFyYW0ge3R5cGVvZiBIVE1MRWxlbWVudH0ga2xhc3NcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL0NhY2hlLmpzJykuQ2FjaGU8c3RyaW5nLCBzdHJpbmc+fSB0YWdzQ2FjaGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmNvbnN0IGRlZmluZUVsZW1lbnRBbmRTdG9yZUluQ2FjaGUgPSAodGFnTmFtZSwga2xhc3MsIHRhZ3NDYWNoZSkgPT4ge1xuICBjb25zdCByZWdpc3RyeSA9IGN1c3RvbUVsZW1lbnRzO1xuXG4gIGlmICghZXh0ZW5kc0hUTUxFbGVtZW50KGtsYXNzKSkge1xuICAgIHJldHVybiBzdG9yZUxhenlFbGVtZW50SW5DYWNoZSh0YWdOYW1lLCByZWdpc3RyeSwgdGFnc0NhY2hlKTtcbiAgfVxuXG4gIGlmIChrbGFzcyA9PT0gY3VzdG9tRWxlbWVudHMuZ2V0KHRhZ05hbWUpKSB7XG4gICAgYWRkVG9HbG9iYWxUYWdzQ2FjaGUodGFnTmFtZSwga2xhc3MpO1xuXG4gICAgcmV0dXJuIHRhZ05hbWU7XG4gIH1cblxuICBjb25zdCB0YWcgPSBjcmVhdGVVbmlxdWVUYWcodGFnTmFtZSwgcmVnaXN0cnkpO1xuICAvLyBAdHMtaWdub3JlXG4gIC8vIHdlIGV4dGVuZCBpdCBqdXN0IGluIGNhc2UgdGhlIGNsYXNzIGhhcyBiZWVuIGRlZmluZWQgbWFudWFsbHlcbiAgZGVmaW5lRWxlbWVudCh0YWcsIGtsYXNzLCByZWdpc3RyeSk7XG5cbiAgcmV0dXJuIHRhZztcbn07XG5cbi8qKlxuICogR2V0cyBhIHNjb3BlZCB0YWcgbmFtZSBmcm9tIHRoZSBjYWNoZSBvciBnZW5lcmF0ZXMgYSBuZXcgb25lIGFuZCBkZWZpbmVzIHRoZSBlbGVtZW50IGlmIG5lZWRlZFxuICpcbiAqIEBleHBvcnRzXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnTmFtZVxuICogQHBhcmFtIHt0eXBlb2YgSFRNTEVsZW1lbnR9IGtsYXNzXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9DYWNoZS5qcycpLkNhY2hlPHN0cmluZywgc3RyaW5nPn0gdGFnc0NhY2hlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJFbGVtZW50KHRhZ05hbWUsIGtsYXNzLCB0YWdzQ2FjaGUgPSB1bmRlZmluZWQpIHtcbiAgY29uc3QgdGFnID1cbiAgICBnZXRGcm9tR2xvYmFsVGFnc0NhY2hlKGtsYXNzKSB8fFxuICAgICh0YWdzQ2FjaGUgJiYgdGFnc0NhY2hlLmdldCh0YWdOYW1lKSkgfHxcbiAgICBkZWZpbmVFbGVtZW50QW5kU3RvcmVJbkNhY2hlKHRhZ05hbWUsIGtsYXNzLCB0YWdzQ2FjaGUpO1xuXG4gIHJldHVybiB0YWc7XG59XG5cbi8qKlxuICogRGVmaW5lcyBhIGxhenkgZWxlbWVudFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWdOYW1lXG4gKiBAcGFyYW0ge3R5cGVvZiBIVE1MRWxlbWVudH0ga2xhc3NcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL0NhY2hlLmpzJykuQ2FjaGU8c3RyaW5nLCBzdHJpbmc+fSB0YWdzQ2FjaGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZVNjb3BlZEVsZW1lbnQodGFnTmFtZSwga2xhc3MsIHRhZ3NDYWNoZSkge1xuICBjb25zdCB0YWcgPSB0YWdzQ2FjaGUuZ2V0KHRhZ05hbWUpO1xuXG4gIGlmICh0YWcpIHtcbiAgICBpZiAoY3VzdG9tRWxlbWVudHMuZ2V0KHRhZykgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZGVmaW5lRWxlbWVudCh0YWcsIGtsYXNzLCBjdXN0b21FbGVtZW50cyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRhZ3NDYWNoZS5zZXQodGFnTmFtZSwgcmVnaXN0ZXJFbGVtZW50KHRhZ05hbWUsIGtsYXNzLCB0YWdzQ2FjaGUpKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgcmVnaXN0ZXJFbGVtZW50IH0gZnJvbSAnLi9yZWdpc3RlckVsZW1lbnQuanMnO1xuaW1wb3J0IHsgQ2FjaGUgfSBmcm9tICcuL0NhY2hlLmpzJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3R5cGVzJykuU2NvcGVkRWxlbWVudHNNYXB9IFNjb3BlZEVsZW1lbnRzTWFwXG4gKi9cblxuLyoqXG4gKiBBbGxvd2VkIHRhZyBuYW1lIGNoYXJzXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgY2hhcnMgPSBgLXxcXFxcLnxbMC05XXxbYS16XWA7XG5cbi8qKlxuICogUmVndWxhciBFeHByZXNzaW9uIHRvIGZpbmQgYSBjdXN0b20gZWxlbWVudCB0YWdcbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG5jb25zdCByZSA9IG5ldyBSZWdFeHAoYDxcXFxcLz8oW2Etel0oJHtjaGFyc30pKi0oJHtjaGFyc30pKilgLCAnZycpO1xuXG4vKipcbiAqIFRoZSBnbG9iYWwgY2FjaGUgb2YgcHJvY2Vzc2VkIHN0cmluZyBhcnJheXNcbiAqXG4gKiBAdHlwZSB7Q2FjaGU8VGVtcGxhdGVTdHJpbmdzQXJyYXksIFRlbXBsYXRlU3RyaW5nc0FycmF5Pn1cbiAqL1xuY29uc3QgZ2xvYmFsQ2FjaGUgPSBuZXcgQ2FjaGUoKTtcblxuLyoqXG4gKiBGaW5kIGN1c3RvbSBlbGVtZW50IHRhZ3MgaW4gdGhlIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm5zIHtSZWdFeHBFeGVjQXJyYXlbXX1cbiAqL1xuY29uc3QgbWF0Y2hBbGwgPSBzdHIgPT4ge1xuICBjb25zdCBtYXRjaGVzID0gW107XG4gIGxldCByZXN1bHQ7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25kLWFzc2lnblxuICB3aGlsZSAoKHJlc3VsdCA9IHJlLmV4ZWMoc3RyKSkgIT09IG51bGwpIHtcbiAgICBtYXRjaGVzLnB1c2gocmVzdWx0KTtcbiAgfVxuXG4gIHJldHVybiBtYXRjaGVzO1xufTtcblxuLyoqXG4gKiBUcmFuc2Zvcm1zIGEgc3RyaW5nIGFycmF5IGludG8gYW5vdGhlciBvbmUgd2l0aCByZXNvbHZlZCBzY29wZWQgZWxlbWVudHMgYW5kIGNhY2hlcyBpdCBmb3IgZnV0dXJlIHJlZmVyZW5jZXNcbiAqXG4gKiBAcGFyYW0ge1RlbXBsYXRlU3RyaW5nc0FycmF5fSBzdHJpbmdzXG4gKiBAcGFyYW0ge1Njb3BlZEVsZW1lbnRzTWFwfSBzY29wZWRFbGVtZW50c1xuICogQHBhcmFtIHtDYWNoZTxUZW1wbGF0ZVN0cmluZ3NBcnJheSwgVGVtcGxhdGVTdHJpbmdzQXJyYXk+fSB0ZW1wbGF0ZUNhY2hlXG4gKiBAcGFyYW0ge0NhY2hlPHN0cmluZywgc3RyaW5nPn0gdGFnc0NhY2hlXG4gKiBAcmV0dXJucyB7VGVtcGxhdGVTdHJpbmdzQXJyYXl9XG4gKi9cbmNvbnN0IHRyYW5zZm9ybVRlbXBsYXRlID0gKHN0cmluZ3MsIHNjb3BlZEVsZW1lbnRzLCB0ZW1wbGF0ZUNhY2hlLCB0YWdzQ2FjaGUpID0+IHtcbiAgY29uc3QgdHJhbnNmb3JtZWRTdHJpbmdzID0gc3RyaW5ncy5tYXAoc3RyID0+IHtcbiAgICBsZXQgYWNjID0gc3RyO1xuICAgIGNvbnN0IG1hdGNoZXMgPSBtYXRjaEFsbChzdHIpO1xuXG4gICAgZm9yIChsZXQgaSA9IG1hdGNoZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBtYXRjaGVzW2ldO1xuICAgICAgY29uc3QgW2Jsb2NrLCB0YWdOYW1lXSA9IGl0ZW07XG4gICAgICBjb25zdCB0YWcgPSByZWdpc3RlckVsZW1lbnQodGFnTmFtZSwgc2NvcGVkRWxlbWVudHNbdGFnTmFtZV0sIHRhZ3NDYWNoZSk7XG4gICAgICBjb25zdCBzdGFydCA9IGl0ZW0uaW5kZXggKyBibG9jay5sZW5ndGggLSB0YWdOYW1lLmxlbmd0aDtcbiAgICAgIGNvbnN0IGVuZCA9IHN0YXJ0ICsgdGFnTmFtZS5sZW5ndGg7XG4gICAgICBjb25zdCBpc0Nsb3NpbmdUYWcgPSBibG9jay5pbmRleE9mKCc8LycpID09PSAwO1xuXG4gICAgICBhY2MgPVxuICAgICAgICBhY2Muc2xpY2UoMCwgc3RhcnQpICtcbiAgICAgICAgKGlzQ2xvc2luZ1RhZyA/IHRhZyA6IGAke3RhZ30gZGF0YS10YWctbmFtZT1cIiR7dGFnTmFtZX1cImApICtcbiAgICAgICAgYWNjLnNsaWNlKGVuZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSk7XG5cbiAgLy8gQHRzLWlnbm9yZVxuICAvLyBub2luc3BlY3Rpb24gSlNDaGVja0Z1bmN0aW9uU2lnbmF0dXJlc1xuICB0ZW1wbGF0ZUNhY2hlLnNldChzdHJpbmdzLCB0cmFuc2Zvcm1lZFN0cmluZ3MpO1xuXG4gIC8vIEB0cy1pZ25vcmVcbiAgLy8gbm9pbnNwZWN0aW9uIEpTVmFsaWRhdGVUeXBlc1xuICByZXR1cm4gdHJhbnNmb3JtZWRTdHJpbmdzO1xufTtcblxuLyoqXG4gKiBPYnRhaW5zIHRoZSBjYWNoZWQgc3RyaW5ncyBhcnJheSB3aXRoIHJlc29sdmVkIHNjb3BlZCBlbGVtZW50cyBvciBjcmVhdGVzIGl0XG4gKlxuICogQGV4cG9ydHNcbiAqIEBwYXJhbSB7VGVtcGxhdGVTdHJpbmdzQXJyYXl9IHN0cmluZ3NcbiAqIEBwYXJhbSB7U2NvcGVkRWxlbWVudHNNYXB9IHNjb3BlZEVsZW1lbnRzXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9DYWNoZS5qcycpLkNhY2hlPFRlbXBsYXRlU3RyaW5nc0FycmF5LCBUZW1wbGF0ZVN0cmluZ3NBcnJheT59IHRlbXBsYXRlQ2FjaGVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL0NhY2hlLmpzJykuQ2FjaGU8c3RyaW5nLCBzdHJpbmc+fSB0YWdzQ2FjaGVcbiAqIEByZXR1cm5zIHtUZW1wbGF0ZVN0cmluZ3NBcnJheX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybShzdHJpbmdzLCBzY29wZWRFbGVtZW50cywgdGVtcGxhdGVDYWNoZSA9IGdsb2JhbENhY2hlLCB0YWdzQ2FjaGUpIHtcbiAgcmV0dXJuIChcbiAgICB0ZW1wbGF0ZUNhY2hlLmdldChzdHJpbmdzKSB8fFxuICAgIHRyYW5zZm9ybVRlbXBsYXRlKHN0cmluZ3MsIHNjb3BlZEVsZW1lbnRzLCB0ZW1wbGF0ZUNhY2hlLCB0YWdzQ2FjaGUpXG4gICk7XG59XG4iLCJpbXBvcnQgeyB0ZW1wbGF0ZUNhY2hlcyB9IGZyb20gJ2xpdC1odG1sL2xpYi90ZW1wbGF0ZS1mYWN0b3J5LmpzJztcbmltcG9ydCB7IG1hcmtlciwgVGVtcGxhdGUgfSBmcm9tICdsaXQtaHRtbC9saWIvdGVtcGxhdGUuanMnO1xuXG5jb25zdCBnZXRUZW1wbGF0ZUNhY2hlS2V5ID0gKHR5cGUsIHNjb3BlTmFtZSkgPT4gYCR7dHlwZX0tLSR7c2NvcGVOYW1lfWA7XG5cbmxldCBjb21wYXRpYmxlU2hhZHlDU1NWZXJzaW9uID0gdHJ1ZTtcblxuLy8gQHRzLWlnbm9yZVxuY29uc3QgeyBTaGFkeUNTUyB9ID0gd2luZG93O1xuXG5pZiAodHlwZW9mIFNoYWR5Q1NTID09PSAndW5kZWZpbmVkJykge1xuICBjb21wYXRpYmxlU2hhZHlDU1NWZXJzaW9uID0gZmFsc2U7XG59IGVsc2UgaWYgKHR5cGVvZiBTaGFkeUNTUy5wcmVwYXJlVGVtcGxhdGVEb20gPT09ICd1bmRlZmluZWQnKSB7XG4gIGNvbXBhdGlibGVTaGFkeUNTU1ZlcnNpb24gPSBmYWxzZTtcbn1cblxuLyoqXG4gKiBUZW1wbGF0ZSBmYWN0b3J5IHdoaWNoIHNjb3BlcyB0ZW1wbGF0ZSBET00gdXNpbmcgU2hhZHlDU1MuXG4gKiBAcGFyYW0gc2NvcGVOYW1lIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCBzaGFkeVRlbXBsYXRlRmFjdG9yeSA9IHNjb3BlTmFtZSA9PiByZXN1bHQgPT4ge1xuICBjb25zdCBjYWNoZUtleSA9IGdldFRlbXBsYXRlQ2FjaGVLZXkocmVzdWx0LnR5cGUsIHNjb3BlTmFtZSk7XG4gIGxldCB0ZW1wbGF0ZUNhY2hlID0gdGVtcGxhdGVDYWNoZXMuZ2V0KGNhY2hlS2V5KTtcbiAgaWYgKHRlbXBsYXRlQ2FjaGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHRlbXBsYXRlQ2FjaGUgPSB7XG4gICAgICBzdHJpbmdzQXJyYXk6IG5ldyBXZWFrTWFwKCksXG4gICAgICBrZXlTdHJpbmc6IG5ldyBNYXAoKSxcbiAgICB9O1xuICAgIHRlbXBsYXRlQ2FjaGVzLnNldChjYWNoZUtleSwgdGVtcGxhdGVDYWNoZSk7XG4gIH1cbiAgbGV0IHRlbXBsYXRlID0gdGVtcGxhdGVDYWNoZS5zdHJpbmdzQXJyYXkuZ2V0KHJlc3VsdC5zdHJpbmdzKTtcbiAgaWYgKHRlbXBsYXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdGVtcGxhdGU7XG4gIH1cbiAgY29uc3Qga2V5ID0gcmVzdWx0LnN0cmluZ3Muam9pbihtYXJrZXIpO1xuICB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ2FjaGUua2V5U3RyaW5nLmdldChrZXkpO1xuICBpZiAodGVtcGxhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSByZXN1bHQuZ2V0VGVtcGxhdGVFbGVtZW50KCk7XG4gICAgaWYgKGNvbXBhdGlibGVTaGFkeUNTU1ZlcnNpb24pIHtcbiAgICAgIFNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZURvbShlbGVtZW50LCBzY29wZU5hbWUpO1xuICAgIH1cbiAgICB0ZW1wbGF0ZSA9IG5ldyBUZW1wbGF0ZShyZXN1bHQsIGVsZW1lbnQpO1xuICAgIHRlbXBsYXRlQ2FjaGUua2V5U3RyaW5nLnNldChrZXksIHRlbXBsYXRlKTtcbiAgfVxuICB0ZW1wbGF0ZUNhY2hlLnN0cmluZ3NBcnJheS5zZXQocmVzdWx0LnN0cmluZ3MsIHRlbXBsYXRlKTtcbiAgcmV0dXJuIHRlbXBsYXRlO1xufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXVzZS1iZWZvcmUtZGVmaW5lICovXG5pbXBvcnQgeyBUZW1wbGF0ZVJlc3VsdCB9IGZyb20gJ2xpdC1odG1sJztcbmltcG9ydCB7IGRlZHVwZU1peGluIH0gZnJvbSAnQG9wZW4td2MvZGVkdXBlLW1peGluJztcbmltcG9ydCB7IENhY2hlIH0gZnJvbSAnLi9DYWNoZS5qcyc7XG5pbXBvcnQgeyB0cmFuc2Zvcm0gfSBmcm9tICcuL3RyYW5zZm9ybS5qcyc7XG5pbXBvcnQgeyBkZWZpbmVTY29wZWRFbGVtZW50LCByZWdpc3RlckVsZW1lbnQgfSBmcm9tICcuL3JlZ2lzdGVyRWxlbWVudC5qcyc7XG5pbXBvcnQgeyBzaGFkeVRlbXBsYXRlRmFjdG9yeSB9IGZyb20gJy4vc2hhZHlUZW1wbGF0ZUZhY3RvcnkuanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vdHlwZXMnKS5TY29wZWRFbGVtZW50c01peGlufSBTY29wZWRFbGVtZW50c01peGluXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3R5cGVzJykuU2NvcGVkRWxlbWVudHNNYXB9IFNjb3BlZEVsZW1lbnRzTWFwXG4gKiBAdHlwZWRlZiB7aW1wb3J0KFwibGl0LWVsZW1lbnRcIikuTGl0RWxlbWVudH0gTGl0RWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnbGl0LWh0bWwvbGliL3NoYWR5LXJlbmRlcicpLlNoYWR5UmVuZGVyT3B0aW9uc30gU2hhZHlSZW5kZXJPcHRpb25zXG4gKiBAdHlwZWRlZiB7ZnVuY3Rpb24oVGVtcGxhdGVSZXN1bHQsIEVsZW1lbnR8RG9jdW1lbnRGcmFnbWVudHxTaGFkb3dSb290LCBTaGFkeVJlbmRlck9wdGlvbnMpOiB2b2lkfSBSZW5kZXJGdW5jdGlvblxuICovXG5cbi8qKlxuICogVGVtcGxhdGUgY2FjaGVzXG4gKlxuICogQHR5cGUge1dlYWtNYXA8RnVuY3Rpb24sIENhY2hlPFRlbXBsYXRlU3RyaW5nc0FycmF5LCBUZW1wbGF0ZVN0cmluZ3NBcnJheT4+fVxuICovXG5jb25zdCB0ZW1wbGF0ZUNhY2hlcyA9IG5ldyBXZWFrTWFwKCk7XG5cbi8qKlxuICogUmV0cmlldmVzIG9yIGNyZWF0ZXMgYSB0ZW1wbGF0ZUNhY2hlIGZvciBhIHNwZWNpZmljIGtleVxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleVxuICogQHJldHVybnMge0NhY2hlPFRlbXBsYXRlU3RyaW5nc0FycmF5LCBUZW1wbGF0ZVN0cmluZ3NBcnJheT59XG4gKi9cbmNvbnN0IGdldFRlbXBsYXRlQ2FjaGUgPSBrZXkgPT4ge1xuICBpZiAoIXRlbXBsYXRlQ2FjaGVzLmhhcyhrZXkpKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHRlbXBsYXRlQ2FjaGVzLnNldChrZXksIG5ldyBDYWNoZSh0ZW1wbGF0ZUNhY2hlcy5nZXQoa2V5LmNvbnN0cnVjdG9yKSkpO1xuICB9XG5cbiAgcmV0dXJuIHRlbXBsYXRlQ2FjaGVzLmdldChrZXkpO1xufTtcblxuLyoqXG4gKiBUYWdzIGNhY2hlc1xuICpcbiAqIEB0eXBlIHtXZWFrTWFwPG9iamVjdCwgQ2FjaGU8c3RyaW5nLCBzdHJpbmc+Pn1cbiAqL1xuY29uc3QgdGFnc0NhY2hlcyA9IG5ldyBXZWFrTWFwKCk7XG5cbi8qKlxuICogUmV0cmlldmVzIG9yIGNyZWF0ZXMgYSB0YWdzQ2FjaGUgZm9yIGEgc3BlY2lmaWMga2V5XG4gKiBAcGFyYW0ge29iamVjdH0ga2V5XG4gKiBAcmV0dXJucyB7Q2FjaGU8c3RyaW5nLCBzdHJpbmc+fVxuICovXG5jb25zdCBnZXRUYWdzQ2FjaGUgPSBrZXkgPT4ge1xuICBpZiAoIXRhZ3NDYWNoZXMuaGFzKGtleSkpIHtcbiAgICB0YWdzQ2FjaGVzLnNldChrZXksIG5ldyBDYWNoZSh0YWdzQ2FjaGVzLmdldChrZXkuY29uc3RydWN0b3IpKSk7XG4gIH1cblxuICByZXR1cm4gdGFnc0NhY2hlcy5nZXQoa2V5KTtcbn07XG5cbi8qKlxuICogVHJhbnNmb3JtcyBhbiBhcnJheSBvZiBUZW1wbGF0ZVJlc3VsdHMgb3IgYXJyYXlzIGludG8gYW5vdGhlciBvbmUgd2l0aCByZXNvbHZlZCBzY29wZWQgZWxlbWVudHNcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5QXJyYXl9IGl0ZW1zXG4gKiBAcGFyYW0ge1Njb3BlZEVsZW1lbnRzTWFwfSBzY29wZWRFbGVtZW50c1xuICogQHBhcmFtIHtDYWNoZTxUZW1wbGF0ZVN0cmluZ3NBcnJheSwgVGVtcGxhdGVTdHJpbmdzQXJyYXk+fSB0ZW1wbGF0ZUNhY2hlXG4gKiBAcGFyYW0ge0NhY2hlPHN0cmluZywgc3RyaW5nPn0gdGFnc0NhY2hlXG4gKiBAcmV0dXJucyB7UmVhZG9ubHlBcnJheX1cbiAqL1xuY29uc3QgdHJhbnNmb3JtQXJyYXkgPSAoaXRlbXMsIHNjb3BlZEVsZW1lbnRzLCB0ZW1wbGF0ZUNhY2hlLCB0YWdzQ2FjaGUpID0+XG4gIGl0ZW1zLm1hcCh2YWx1ZSA9PiB7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVSZXN1bHQpIHtcbiAgICAgIHJldHVybiB0cmFuc2Zvcm1UZW1wbGF0ZSh2YWx1ZSwgc2NvcGVkRWxlbWVudHMsIHRlbXBsYXRlQ2FjaGUsIHRhZ3NDYWNoZSk7XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdHJhbnNmb3JtQXJyYXkodmFsdWUsIHNjb3BlZEVsZW1lbnRzLCB0ZW1wbGF0ZUNhY2hlLCB0YWdzQ2FjaGUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfSk7XG5cbi8qKlxuICogVHJhbnNmb3JtcyBhIFRlbXBsYXRlUmVzdWx0IGludG8gYW5vdGhlciBvbmUgd2l0aCByZXNvbHZlZCBzY29wZWQgZWxlbWVudHNcbiAqXG4gKiBAcGFyYW0ge1RlbXBsYXRlUmVzdWx0fSB0ZW1wbGF0ZVxuICogQHBhcmFtIHtTY29wZWRFbGVtZW50c01hcH0gc2NvcGVkRWxlbWVudHNcbiAqIEBwYXJhbSB7Q2FjaGU8VGVtcGxhdGVTdHJpbmdzQXJyYXksIFRlbXBsYXRlU3RyaW5nc0FycmF5Pn0gdGVtcGxhdGVDYWNoZVxuICogQHBhcmFtIHtDYWNoZTxzdHJpbmcsIHN0cmluZz59IHRhZ3NDYWNoZVxuICogQHJldHVybnMge1RlbXBsYXRlUmVzdWx0fVxuICovXG5jb25zdCB0cmFuc2Zvcm1UZW1wbGF0ZSA9ICh0ZW1wbGF0ZSwgc2NvcGVkRWxlbWVudHMsIHRlbXBsYXRlQ2FjaGUsIHRhZ3NDYWNoZSkgPT5cbiAgbmV3IFRlbXBsYXRlUmVzdWx0KFxuICAgIHRyYW5zZm9ybSh0ZW1wbGF0ZS5zdHJpbmdzLCBzY29wZWRFbGVtZW50cywgdGVtcGxhdGVDYWNoZSwgdGFnc0NhY2hlKSxcbiAgICB0cmFuc2Zvcm1BcnJheSh0ZW1wbGF0ZS52YWx1ZXMsIHNjb3BlZEVsZW1lbnRzLCB0ZW1wbGF0ZUNhY2hlLCB0YWdzQ2FjaGUpLFxuICAgIHRlbXBsYXRlLnR5cGUsXG4gICAgdGVtcGxhdGUucHJvY2Vzc29yLFxuICApO1xuXG4vKipcbiAqIEdldHMgYW4gaW5zdGFuY2Ugb2YgdGhlIFNjb3BlZEVsZW1lbnRzVGVtcGxhdGVGYWN0b3J5XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHNjb3BlTmFtZVxuICogQHBhcmFtIHtTY29wZWRFbGVtZW50c01hcH0gc2NvcGVkRWxlbWVudHNcbiAqIEBwYXJhbSB7Q2FjaGU8VGVtcGxhdGVTdHJpbmdzQXJyYXksIFRlbXBsYXRlU3RyaW5nc0FycmF5Pn0gdGVtcGxhdGVDYWNoZVxuICogQHBhcmFtIHtDYWNoZTxzdHJpbmcsIHN0cmluZz59IHRhZ3NDYWNoZVxuICogQHJldHVybnMge2Z1bmN0aW9uKGFueSk6IGFueX1cbiAqL1xuY29uc3Qgc2NvcGVkRWxlbWVudHNUZW1wbGF0ZUZhY3RvcnkgPSAoXG4gIHNjb3BlTmFtZSxcbiAgc2NvcGVkRWxlbWVudHMsXG4gIHRlbXBsYXRlQ2FjaGUsXG4gIHRhZ3NDYWNoZSxcbikgPT4gdGVtcGxhdGUgPT4ge1xuICBjb25zdCBuZXdUZW1wbGF0ZSA9IHRyYW5zZm9ybVRlbXBsYXRlKHRlbXBsYXRlLCBzY29wZWRFbGVtZW50cywgdGVtcGxhdGVDYWNoZSwgdGFnc0NhY2hlKTtcblxuICByZXR1cm4gc2hhZHlUZW1wbGF0ZUZhY3Rvcnkoc2NvcGVOYW1lKShuZXdUZW1wbGF0ZSk7XG59O1xuXG4vKiogQHR5cGUge1Njb3BlZEVsZW1lbnRzTWl4aW59ICovXG5jb25zdCBTY29wZWRFbGVtZW50c01peGluSW1wbGVtZW50YXRpb24gPSBzdXBlcmNsYXNzID0+XG4gIGNsYXNzIFNjb3BlZEVsZW1lbnRzSG9zdCBleHRlbmRzIHN1cGVyY2xhc3Mge1xuICAgIC8qKlxuICAgICAqIE9idGFpbnMgdGhlIHNjb3BlZCBlbGVtZW50cyBkZWZpbml0aW9ucyBtYXBcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtTY29wZWRFbGVtZW50c01hcH1cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IHNjb3BlZEVsZW1lbnRzKCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIC8qKiBAb3ZlcnJpZGUgKi9cbiAgICBzdGF0aWMgcmVuZGVyKHRlbXBsYXRlLCBjb250YWluZXIsIG9wdGlvbnMpIHtcbiAgICAgIGlmICghb3B0aW9ucyB8fCB0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcgfHwgIW9wdGlvbnMuc2NvcGVOYW1lKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGBzY29wZU5hbWVgIG9wdGlvbiBpcyByZXF1aXJlZC4nKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHsgc2NvcGVOYW1lLCBldmVudENvbnRleHQgfSA9IG9wdGlvbnM7XG5cbiAgICAgIGNvbnN0IHRlbXBsYXRlQ2FjaGUgPSBnZXRUZW1wbGF0ZUNhY2hlKGV2ZW50Q29udGV4dCk7XG4gICAgICBjb25zdCB0YWdzQ2FjaGUgPSBnZXRUYWdzQ2FjaGUoZXZlbnRDb250ZXh0KTtcbiAgICAgIGNvbnN0IHsgc2NvcGVkRWxlbWVudHMgfSA9IHRoaXM7XG5cbiAgICAgIHJldHVybiBzdXBlci5yZW5kZXIodGVtcGxhdGUsIGNvbnRhaW5lciwge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICB0ZW1wbGF0ZUZhY3Rvcnk6IHNjb3BlZEVsZW1lbnRzVGVtcGxhdGVGYWN0b3J5KFxuICAgICAgICAgIHNjb3BlTmFtZSxcbiAgICAgICAgICBzY29wZWRFbGVtZW50cyxcbiAgICAgICAgICB0ZW1wbGF0ZUNhY2hlLFxuICAgICAgICAgIHRhZ3NDYWNoZSxcbiAgICAgICAgKSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlZmluZXMgYSBzY29wZWQgZWxlbWVudFxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWVcbiAgICAgKiBAcGFyYW0ge3R5cGVvZiBIVE1MRWxlbWVudH0ga2xhc3NcbiAgICAgKi9cbiAgICBkZWZpbmVTY29wZWRFbGVtZW50KHRhZ05hbWUsIGtsYXNzKSB7XG4gICAgICByZXR1cm4gZGVmaW5lU2NvcGVkRWxlbWVudCh0YWdOYW1lLCBrbGFzcywgZ2V0VGFnc0NhY2hlKHRoaXMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgc2NvcGVkIHRhZyBuYW1lXG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZCBQbGVhc2UsIHVzZSB0aGUgaW5zdGFuY2UgbWV0aG9kIGluc3RlYWQgb2YgdGhlIHN0YXRpYyBvbmUuIFRoaXMgc3RhdGljIG1ldGhvZCBpcyBub3QgYWJsZSB0b1xuICAgICAqIG9idGFpbiB0aGUgdGFnTmFtZSBvZiBsYXp5IGRlZmluZWQgZWxlbWVudHMsIHdoaWxlIHRoZSBpbnN0YW5jZSBvbmUgaXMuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWVcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0U2NvcGVkVGFnTmFtZSh0YWdOYW1lKSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBjb25zdCBrbGFzcyA9IHRoaXMuc2NvcGVkRWxlbWVudHNbdGFnTmFtZV07XG5cbiAgICAgIHJldHVybiBrbGFzc1xuICAgICAgICA/IHJlZ2lzdGVyRWxlbWVudCh0YWdOYW1lLCBrbGFzcywgZ2V0VGFnc0NhY2hlKHRoaXMpKVxuICAgICAgICA6IGdldFRhZ3NDYWNoZSh0aGlzKS5nZXQodGFnTmFtZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHNjb3BlZCB0YWcgbmFtZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWVcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICBnZXRTY29wZWRUYWdOYW1lKHRhZ05hbWUpIHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGNvbnN0IGtsYXNzID0gdGhpcy5jb25zdHJ1Y3Rvci5zY29wZWRFbGVtZW50c1t0YWdOYW1lXTtcblxuICAgICAgcmV0dXJuIGtsYXNzXG4gICAgICAgID8gcmVnaXN0ZXJFbGVtZW50KHRhZ05hbWUsIGtsYXNzLCBnZXRUYWdzQ2FjaGUodGhpcykpXG4gICAgICAgIDogZ2V0VGFnc0NhY2hlKHRoaXMpLmdldCh0YWdOYW1lKTtcbiAgICB9XG4gIH07XG5cbmV4cG9ydCBjb25zdCBTY29wZWRFbGVtZW50c01peGluID0gZGVkdXBlTWl4aW4oU2NvcGVkRWxlbWVudHNNaXhpbkltcGxlbWVudGF0aW9uKTtcbiIsIi8qKlxuICpcbiAqIEBwYXJhbSBlbGVtZW50IFRoZSBFbGVtZW50IHRoYXQgdHJpZ2dlcnMgdGhlIGV2ZW50LCBub3JtYWxseSAndGhpcydcbiAqIEBwYXJhbSBldmVudFR5cGUgY2hvc2UgZnJvbSBDdXN0b21FdmVudFR5cGVzXG4gKiBAcGFyYW0gZGF0YSB0aGUgZGF0YSBwYXNzZWQgaW4gdGhlIGV2ZW50XG4gKiBAcmV0dXJucyBhbiBpbnN0YW5jZSBvZiB0aGUgZXZlbnQgdGhhdCB3YXMgZGlzcGF0Y2hlZFxuICovXG5jb25zdCBmaXJlID0gKGVsZW1lbnQsIGV2ZW50VHlwZSwgZGF0YSkgPT4ge1xuICBjb25zdCBhcmdzID0ge1xuICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgY2FuY2VsYWJsZTogZmFsc2UsXG4gICAgY29tcG9zZWQ6IHRydWUsXG4gICAgLi4uZGF0YVxuICB9O1xuICBjb25zdCBldmVudCA9IG5ldyBDdXN0b21FdmVudChldmVudFR5cGUsIGFyZ3MpO1xuICBlbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICByZXR1cm4gZXZlbnQ7XG59O1xuXG5leHBvcnQgeyBmaXJlIGFzIGYgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV2ZW50cy0xMTczZjU2Mi5qcy5tYXBcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2xpdCc7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5jb25zdCB0b2tlbnMgPSBjc3NgXG4gICoge1xuICAtLW5lLWJ1dHRvbi1jb2xvci1iYWNrZ3JvdW5kLXByaW1hcnktZGVmYXVsdDogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtNjAsICMwMDZCRDYpO1xuICAtLW5lLWJ1dHRvbi1jb2xvci1iYWNrZ3JvdW5kLXByaW1hcnktaG92ZXI6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTcwLCAjMDA1MkEzKTtcbiAgLS1uZS1idXR0b24tY29sb3ItYmFja2dyb3VuZC1wcmltYXJ5LWRpc2FibGVkOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS0zMCwgI0E3QUJBRik7XG4gIC0tbmUtYnV0dG9uLWNvbG9yLWJhY2tncm91bmQtc2Vjb25kYXJ5LWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci13aGl0ZSwgI2ZmZmZmZik7XG4gIC0tbmUtYnV0dG9uLWNvbG9yLWJhY2tncm91bmQtc2Vjb25kYXJ5LWhvdmVyOiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS0wNSwgI0YwRjdGRik7XG4gIC0tbmUtYnV0dG9uLWNvbG9yLWJhY2tncm91bmQtc2Vjb25kYXJ5LWRpc2FibGVkOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS0zMCwgI0E3QUJBRik7XG4gIC0tbmUtYnV0dG9uLWNvbG9yLWJhY2tncm91bmQtZGVzdHJ1Y3RpdmUtZGVmYXVsdDogdmFyKC0tbmUtcmVmLWNvbG9yLXJlZC02MCwgI0I4MDAwMCk7XG4gIC0tbmUtYnV0dG9uLWNvbG9yLWJhY2tncm91bmQtZGVzdHJ1Y3RpdmUtaG92ZXI6IHZhcigtLW5lLXJlZi1jb2xvci1yZWQtNzAsICM3QzBEMEUpO1xuICAtLW5lLWJ1dHRvbi1jb2xvci1iYWNrZ3JvdW5kLWRlc3RydWN0aXZlLWRpc2FibGVkOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS0zMCwgI0E3QUJBRik7XG4gIC0tbmUtYnV0dG9uLWNvbG9yLWJhY2tncm91bmQtdGV4dC1ob3ZlcjogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtMDUsICNGMEY3RkYpO1xuICAtLW5lLWJ1dHRvbi1jb2xvci1iYWNrZ3JvdW5kLXRleHQtZGlzYWJsZWQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTMwLCAjQTdBQkFGKTtcbiAgLS1uZS1idXR0b24tY29sb3ItYmFja2dyb3VuZC1pbnZlcnNlLWhvdmVyOiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS0wNSwgI0YwRjdGRik7XG4gIC0tbmUtYnV0dG9uLWNvbG9yLWJhY2tncm91bmQtaW52ZXJzZS1kaXNhYmxlZDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktMzAsICNBN0FCQUYpO1xuICAtLW5lLWJ1dHRvbi1jb2xvci1ib3JkZXItcHJpbWFyeS1kZWZhdWx0OiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS03MCwgIzAwNTJBMyk7XG4gIC0tbmUtYnV0dG9uLWNvbG9yLWJvcmRlci1zZWNvbmRhcnktZGVmYXVsdDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktMTAsICNFMkUzRTQpO1xuICAtLW5lLWJ1dHRvbi1jb2xvci1ib3JkZXItZGVzdHJ1Y3RpdmUtZGVmYXVsdDogdmFyKC0tbmUtcmVmLWNvbG9yLXJlZC03MCwgIzdDMEQwRSk7XG4gIC0tbmUtYnV0dG9uLWNvbG9yLWJvcmRlci1mb2N1czogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtMjAsICNBM0QxRkYpO1xuICAtLW5lLWJ1dHRvbi1jb2xvci1ib3JkZXItaW52ZXJzZS1kZWZhdWx0OiB2YXIoLS1uZS1yZWYtY29sb3Itd2hpdGUsICNmZmZmZmYpO1xuICAtLW5lLWJ1dHRvbi1jb2xvci1ib3JkZXItZGlzYWJsZWQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTMwLCAjQTdBQkFGKTtcbiAgLS1uZS1idXR0b24tY29sb3ItbGFiZWwtcHJpbWFyeS1kaXNhYmxlZDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktOTAsICMxNjE3MTgpO1xuICAtLW5lLWJ1dHRvbi1jb2xvci1sYWJlbC1wcmltYXJ5LWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci13aGl0ZSwgI2ZmZmZmZik7XG4gIC0tbmUtYnV0dG9uLWNvbG9yLWxhYmVsLXNlY29uZGFyeS1kZWZhdWx0OiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS02MCwgIzAwNkJENik7XG4gIC0tbmUtYnV0dG9uLWNvbG9yLWxhYmVsLXNlY29uZGFyeS1kaXNhYmxlZDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktOTAsICMxNjE3MTgpO1xuICAtLW5lLWJ1dHRvbi1jb2xvci1sYWJlbC1kZXN0cnVjdGl2ZS1kZWZhdWx0OiB2YXIoLS1uZS1yZWYtY29sb3Itd2hpdGUsICNmZmZmZmYpO1xuICAtLW5lLWJ1dHRvbi1jb2xvci1sYWJlbC1kZXN0cnVjdGl2ZS1kaXNhYmxlZDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktOTAsICMxNjE3MTgpO1xuICAtLW5lLWJ1dHRvbi1jb2xvci1sYWJlbC10ZXh0LWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTYwLCAjMDA2QkQ2KTtcbiAgLS1uZS1idXR0b24tY29sb3ItbGFiZWwtdGV4dC1kaXNhYmxlZDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktOTAsICMxNjE3MTgpO1xuICAtLW5lLWJ1dHRvbi1jb2xvci1sYWJlbC1pbnZlcnNlLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci13aGl0ZSwgI2ZmZmZmZik7XG4gIC0tbmUtYnV0dG9uLWNvbG9yLWxhYmVsLWludmVyc2UtZGlzYWJsZWQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTkwLCAjMTYxNzE4KTtcbiAgLS1uZS1idXR0b24tYm9yZGVyLXJhZGl1czogdmFyKC0tbmUtcmVmLWJvcmRlci1yYWRpdXMtbWVkaXVtLCAuMjVlbSk7XG4gIC0tbmUtYnV0dG9uLXBhZGRpbmctaG9yaXpvbnRhbDogdmFyKC0tbmUtcmVmLXNwYWNpbmctc21hbGwsIDAuNzVlbSk7XG4gIC0tbmUtYnV0dG9uLXBhZGRpbmctdmVydGljYWw6IHZhcigtLW5lLXJlZi1zcGFjaW5nLXgtc21hbGwsIDAuNWVtKTtcbiAgLS1uZS1idXR0b24tZ2FwOiB2YXIoLS1uZS1yZWYtc3BhY2luZy14LXNtYWxsLCAwLjVlbSk7XG4gIC0tbmUtYnV0dG9uLWZvbnQtZmFtaWx5OiB2YXIoLS1uZS1yZWYtZm9udC1mYW1pbHktb3Blbi1zYW5zLCBPcGVuIFNhbnMpO1xuICAtLW5lLWJ1dHRvbi1mb250LXNpemU6IHZhcigtLW5lLXJlZi1mb250LXNpemUtMDQsIDAuODc1ZW0pO1xuICAtLW5lLWJ1dHRvbi1zaXppbmctaWNvbjogdmFyKC0tbmUtcmVmLXNpemluZy0wNCwgMWVtKTtcbiAgLS1uZS1idXR0b24tYm9yZGVyLXdpZHRoLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1ib3JkZXItd2lkdGgtc21hbGwsIDFweCk7XG4gIC0tbmUtYnV0dG9uLWJvcmRlci13aWR0aC1mb2N1czogdmFyKC0tbmUtcmVmLWJvcmRlci13aWR0aC1sYXJnZSwgNHB4KTtcbn1cbmA7XG5cbmV4cG9ydCB7IHRva2VucyBhcyB0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idXR0b24udG9rZW5zLWU3OWM4YmJmLmpzLm1hcFxuIiwiaW1wb3J0e25vQ2hhbmdlIGFzIHR9ZnJvbVwiLi4vbGl0LWh0bWwuanNcIjtpbXBvcnR7ZGlyZWN0aXZlIGFzIGUsRGlyZWN0aXZlIGFzIHIsUGFydFR5cGUgYXMgc31mcm9tXCIuLi9kaXJlY3RpdmUuanNcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL2NvbnN0IGk9XCJpbXBvcnRhbnRcIixuPVwiICFcIitpLG89ZShjbGFzcyBleHRlbmRzIHJ7Y29uc3RydWN0b3IodCl7dmFyIGU7aWYoc3VwZXIodCksdC50eXBlIT09cy5BVFRSSUJVVEV8fFwic3R5bGVcIiE9PXQubmFtZXx8KG51bGw9PT0oZT10LnN0cmluZ3MpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLmxlbmd0aCk+Mil0aHJvdyBFcnJvcihcIlRoZSBgc3R5bGVNYXBgIGRpcmVjdGl2ZSBtdXN0IGJlIHVzZWQgaW4gdGhlIGBzdHlsZWAgYXR0cmlidXRlIGFuZCBtdXN0IGJlIHRoZSBvbmx5IHBhcnQgaW4gdGhlIGF0dHJpYnV0ZS5cIil9cmVuZGVyKHQpe3JldHVybiBPYmplY3Qua2V5cyh0KS5yZWR1Y2UoKChlLHIpPT57Y29uc3Qgcz10W3JdO3JldHVybiBudWxsPT1zP2U6ZStgJHtyPXIuaW5jbHVkZXMoXCItXCIpP3I6ci5yZXBsYWNlKC8oPzpeKHdlYmtpdHxtb3p8bXN8byl8KSg/PVtBLVpdKS9nLFwiLSQmXCIpLnRvTG93ZXJDYXNlKCl9OiR7c307YH0pLFwiXCIpfXVwZGF0ZShlLFtyXSl7Y29uc3R7c3R5bGU6c309ZS5lbGVtZW50O2lmKHZvaWQgMD09PXRoaXMudXQpe3RoaXMudXQ9bmV3IFNldDtmb3IoY29uc3QgdCBpbiByKXRoaXMudXQuYWRkKHQpO3JldHVybiB0aGlzLnJlbmRlcihyKX10aGlzLnV0LmZvckVhY2goKHQ9PntudWxsPT1yW3RdJiYodGhpcy51dC5kZWxldGUodCksdC5pbmNsdWRlcyhcIi1cIik/cy5yZW1vdmVQcm9wZXJ0eSh0KTpzW3RdPVwiXCIpfSkpO2Zvcihjb25zdCB0IGluIHIpe2NvbnN0IGU9clt0XTtpZihudWxsIT1lKXt0aGlzLnV0LmFkZCh0KTtjb25zdCByPVwic3RyaW5nXCI9PXR5cGVvZiBlJiZlLmVuZHNXaXRoKG4pO3QuaW5jbHVkZXMoXCItXCIpfHxyP3Muc2V0UHJvcGVydHkodCxyP2Uuc2xpY2UoMCwtMTEpOmUscj9pOlwiXCIpOnNbdF09ZX19cmV0dXJuIHR9fSk7ZXhwb3J0e28gYXMgc3R5bGVNYXB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3R5bGUtbWFwLmpzLm1hcFxuIiwiaW1wb3J0IHsgbm90aGluZywgaHRtbCB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBzdHlsZU1hcCB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL3N0eWxlLW1hcC5qcyc7XG5pbXBvcnQgeyB1bnRpbCB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL3VudGlsLmpzJztcblxuY29uc3QgaWNvbkxvb2t1cCA9IHtcbiAgX2V4cG9ydDogKCkgPT4gaW1wb3J0KCcuL19leHBvcnQtZGUyNWU4OTUuanMnKS50aGVuKHggPT4geC5fZXhwb3J0KSxcbiAgX2ltcG9ydDogKCkgPT4gaW1wb3J0KCcuL19pbXBvcnQtODA2NDM5OGQuanMnKS50aGVuKHggPT4geC5faW1wb3J0KSxcbiAgYWRkOiAoKSA9PiBpbXBvcnQoJy4vYWRkLWVjZDA5ZDFhLmpzJykudGhlbih4ID0+IHguYWRkKSxcbiAgYXJjaGl2ZTogKCkgPT4gaW1wb3J0KCcuL2FyY2hpdmUtZDJjNWFkNGYuanMnKS50aGVuKHggPT4geC5hcmNoaXZlKSxcbiAgYXJyb3dEb3duOiAoKSA9PiBpbXBvcnQoJy4vYXJyb3dEb3duLTU1NWEyOGUxLmpzJykudGhlbih4ID0+IHguYXJyb3dEb3duKSxcbiAgYXJyb3dVcDogKCkgPT4gaW1wb3J0KCcuL2Fycm93VXAtOWI1NjI5ZDYuanMnKS50aGVuKHggPT4geC5hcnJvd1VwKSxcbiAgY2FyZXREb3duOiAoKSA9PiBpbXBvcnQoJy4vY2FyZXREb3duLTdmNzI4NmM4LmpzJykudGhlbih4ID0+IHguY2FyZXREb3duKSxcbiAgY2FyZXRMZWZ0OiAoKSA9PiBpbXBvcnQoJy4vY2FyZXRMZWZ0LTMwODAzOGU1LmpzJykudGhlbih4ID0+IHguY2FyZXRMZWZ0KSxcbiAgY2FyZXRSaWdodDogKCkgPT4gaW1wb3J0KCcuL2NhcmV0UmlnaHQtMTQxMDM2OGYuanMnKS50aGVuKHggPT4geC5jYXJldFJpZ2h0KSxcbiAgY2FyZXRVcDogKCkgPT4gaW1wb3J0KCcuL2NhcmV0VXAtNjRkMTkxMTkuanMnKS50aGVuKHggPT4geC5jYXJldFVwKSxcbiAgY2hlY2s6ICgpID0+IGltcG9ydCgnLi9jaGVjay0xMzJjOTg5NC5qcycpLnRoZW4oeCA9PiB4LmNoZWNrKSxcbiAgY2hldnJvbkRvd246ICgpID0+IGltcG9ydCgnLi9jaGV2cm9uRG93bi1lYjQ3YjIxZi5qcycpLnRoZW4oeCA9PiB4LmNoZXZyb25Eb3duKSxcbiAgY2hldnJvbkxlZnQ6ICgpID0+IGltcG9ydCgnLi9jaGV2cm9uTGVmdC1mMDEzOTg4My5qcycpLnRoZW4oeCA9PiB4LmNoZXZyb25MZWZ0KSxcbiAgY2hldnJvbkxpZ2h0RG93bjogKCkgPT4gaW1wb3J0KCcuL2NoZXZyb25MaWdodERvd24tMWRjZDE2ZmYuanMnKS50aGVuKHggPT4geC5jaGV2cm9uTGlnaHREb3duKSxcbiAgY2hldnJvbkxpZ2h0TGVmdDogKCkgPT4gaW1wb3J0KCcuL2NoZXZyb25MaWdodExlZnQtMjEzYzRjMDkuanMnKS50aGVuKHggPT4geC5jaGV2cm9uTGlnaHRMZWZ0KSxcbiAgY2hldnJvbkxpZ2h0UmlnaHQ6ICgpID0+IGltcG9ydCgnLi9jaGV2cm9uTGlnaHRSaWdodC01ODlkYTViNy5qcycpLnRoZW4oeCA9PiB4LmNoZXZyb25MaWdodFJpZ2h0KSxcbiAgY2hldnJvbkxpZ2h0VXA6ICgpID0+IGltcG9ydCgnLi9jaGV2cm9uTGlnaHRVcC1hZTg0ZTI3OC5qcycpLnRoZW4oeCA9PiB4LmNoZXZyb25MaWdodFVwKSxcbiAgY2hldnJvblJpZ2h0OiAoKSA9PiBpbXBvcnQoJy4vY2hldnJvblJpZ2h0LWJmY2JjZDBmLmpzJykudGhlbih4ID0+IHguY2hldnJvblJpZ2h0KSxcbiAgY2hldnJvblVwOiAoKSA9PiBpbXBvcnQoJy4vY2hldnJvblVwLTMyMmEwZWJhLmpzJykudGhlbih4ID0+IHguY2hldnJvblVwKSxcbiAgY2xvc2VEZWZhdWx0OiAoKSA9PiBpbXBvcnQoJy4vY2xvc2VEZWZhdWx0LWU2ZGEzYWQ4LmpzJykudGhlbih4ID0+IHguY2xvc2VEZWZhdWx0KSxcbiAgZGFuZ2VyRXhjbGFtYXRpb246ICgpID0+IGltcG9ydCgnLi9kYW5nZXJFeGNsYW1hdGlvbi0wMzA1ZWNlMi5qcycpLnRoZW4oeCA9PiB4LmRhbmdlckV4Y2xhbWF0aW9uKSxcbiAgZHJvcHpvbmU6ICgpID0+IGltcG9ydCgnLi9kcm9wem9uZS03MDE2NmE3OS5qcycpLnRoZW4oeCA9PiB4LmRyb3B6b25lKSxcbiAgZmVlZGJhY2s6ICgpID0+IGltcG9ydCgnLi9mZWVkYmFjay1lOGVjYjc2NC5qcycpLnRoZW4oeCA9PiB4LmZlZWRiYWNrKSxcbiAgZmlsZTogKCkgPT4gaW1wb3J0KCcuL2ZpbGUtNGFiMDI3MDUuanMnKS50aGVuKHggPT4geC5maWxlKSxcbiAgaGlkZTogKCkgPT4gaW1wb3J0KCcuL2hpZGUtZDZmYTYyZDEuanMnKS50aGVuKHggPT4geC5oaWRlKSxcbiAgaW5mbzogKCkgPT4gaW1wb3J0KCcuL2luZm8tMjllZWEwY2QuanMnKS50aGVuKHggPT4geC5pbmZvKSxcbiAgbWF4aW1pc2U6ICgpID0+IGltcG9ydCgnLi9tYXhpbWlzZS01YmY1MGIwMC5qcycpLnRoZW4oeCA9PiB4Lm1heGltaXNlKSxcbiAgbWVhdGJhbGxzOiAoKSA9PiBpbXBvcnQoJy4vbWVhdGJhbGxzLWMzODhkNzZhLmpzJykudGhlbih4ID0+IHgubWVhdGJhbGxzKSxcbiAgbWludXM6ICgpID0+IGltcG9ydCgnLi9taW51cy0wMTg3MjljNC5qcycpLnRoZW4oeCA9PiB4Lm1pbnVzKSxcbiAgb3BlbkluTmV3V2luZG93OiAoKSA9PiBpbXBvcnQoJy4vb3BlbkluTmV3V2luZG93LWUxMmRlNjQ1LmpzJykudGhlbih4ID0+IHgub3BlbkluTmV3V2luZG93KSxcbiAgcHJvY2VzczogKCkgPT4gaW1wb3J0KCcuL3Byb2Nlc3MtY2VmMTQwODYuanMnKS50aGVuKHggPT4geC5wcm9jZXNzKSxcbiAgcHJvY2Vzc01vZGVsOiAoKSA9PiBpbXBvcnQoJy4vcHJvY2Vzc01vZGVsLTIxYmU3OTZlLmpzJykudGhlbih4ID0+IHgucHJvY2Vzc01vZGVsKSxcbiAgcHVibGlzaDogKCkgPT4gaW1wb3J0KCcuL3B1Ymxpc2gtNGRhOTk5YmUuanMnKS50aGVuKHggPT4geC5wdWJsaXNoKSxcbiAgcmVmcmVzaDogKCkgPT4gaW1wb3J0KCcuL3JlZnJlc2gtNzFkNmNjOGQuanMnKS50aGVuKHggPT4geC5yZWZyZXNoKSxcbiAgc2F2ZTogKCkgPT4gaW1wb3J0KCcuL3NhdmUtMDFjMWIwMjIuanMnKS50aGVuKHggPT4geC5zYXZlKSxcbiAgc2NoZWR1bGU6ICgpID0+IGltcG9ydCgnLi9zY2hlZHVsZS03ZWFlYmJmZC5qcycpLnRoZW4oeCA9PiB4LnNjaGVkdWxlKSxcbiAgc2VhcmNoOiAoKSA9PiBpbXBvcnQoJy4vc2VhcmNoLWIxYjA2MmRhLmpzJykudGhlbih4ID0+IHguc2VhcmNoKSxcbiAgc2hvdzogKCkgPT4gaW1wb3J0KCcuL3Nob3ctY2ViM2JiYTMuanMnKS50aGVuKHggPT4geC5zaG93KSxcbiAgc3VjY2VzczogKCkgPT4gaW1wb3J0KCcuL3N1Y2Nlc3MtN2ZiOWYzMzYuanMnKS50aGVuKHggPT4geC5zdWNjZXNzKSxcbiAgc3VtbWFyeTogKCkgPT4gaW1wb3J0KCcuL3N1bW1hcnktZGE3YWRkYWEuanMnKS50aGVuKHggPT4geC5zdW1tYXJ5KSxcbiAgdGljazogKCkgPT4gaW1wb3J0KCcuL3RpY2stMjhjZjcyN2QuanMnKS50aGVuKHggPT4geC50aWNrKSxcbiAgdHJhc2g6ICgpID0+IGltcG9ydCgnLi90cmFzaC01NmExM2NjNi5qcycpLnRoZW4oeCA9PiB4LnRyYXNoKSxcbiAgdXNlcjogKCkgPT4gaW1wb3J0KCcuL3VzZXItNmZjZTUzYWYuanMnKS50aGVuKHggPT4geC51c2VyKSxcbiAgdXNlcnM6ICgpID0+IGltcG9ydCgnLi91c2Vycy05OWMxYzM0OC5qcycpLnRoZW4oeCA9PiB4LnVzZXJzKSxcbiAgdmVyc2lvbkhpc3Rvcnk6ICgpID0+IGltcG9ydCgnLi92ZXJzaW9uSGlzdG9yeS1iYWVjNWFkOC5qcycpLnRoZW4oeCA9PiB4LnZlcnNpb25IaXN0b3J5KSxcbiAgd2FybmluZ0V4Y2xhbWF0aW9uOiAoKSA9PiBpbXBvcnQoJy4vd2FybmluZ0V4Y2xhbWF0aW9uLTRhNjk0ZTdlLmpzJykudGhlbih4ID0+IHgud2FybmluZ0V4Y2xhbWF0aW9uKVxufTtcblxuY29uc3QgcGxhY2VIb2xkZXJJY29uID0gKCkgPT4gaHRtbGA8c3ZnXG4gIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICB2aWV3Qm94PVwiMCAwIDE2IDE2XCJcbj48L3N2Zz5gO1xuLyoqXG4gKiBUaGUgYmFzZSBmdW5jdGlvbiBmb3IgcmVuZGVyaW5nIGFuIGljb24sIHRoaXMgY2FuIGJlIHVzZSB0byBhdmlvZCBsYXp5IGxvYWRpbmcgb2YgU1ZHIHJlc291cmNlc1xuICogQHJldHVybnMgVGhlIGh0bWwgZWxlbWVudCB3aXRoIHRoZSBTVkcgaWNvbiByZW5kZXJlZFxuICovXG5jb25zdCByZW5kZXJJY29uID0gKHtcbiAgdHlwZSxcbiAgdHlwZUFzSHRtbCxcbiAgZml4ZWRTaXplLFxuICBjbGFzc05hbWVcbn0pID0+IHtcbiAgaWYgKCF0eXBlICYmICF0eXBlQXNIdG1sKSB7XG4gICAgcmV0dXJuIG5vdGhpbmc7XG4gIH1cbiAgaWYgKHR5cGUgJiYgISh0eXBlIGluIGljb25Mb29rdXApKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLndhcm4oJ0ljb24gbm90IGZvdW5kJywgdHlwZSk7XG4gICAgcmV0dXJuIG5vdGhpbmc7XG4gIH1cbiAgY29uc3QgaWNvblByb21pc2UgPSB0eXBlID8gaWNvbkxvb2t1cFt0eXBlXSgpIDogUHJvbWlzZS5yZXNvbHZlKHR5cGVBc0h0bWwpO1xuICByZXR1cm4gaHRtbGBcbiAgICA8ZGl2XG4gICAgICBhcmlhLWhpZGRlbj1cInRydWVcIlxuICAgICAgY2xhc3M9JHtjbGFzc05hbWUgfHwgJ25lLWljb24nfVxuICAgICAgc3R5bGU9JHtzdHlsZU1hcCh7XG4gICAgaGVpZ2h0OiBmaXhlZFNpemUsXG4gICAgd2lkdGg6IGZpeGVkU2l6ZSxcbiAgICBkaXNwbGF5OiAnZ3JpZCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAganVzdGlmeUl0ZW1zOiAnY2VudGVyJ1xuICB9KX1cbiAgICA+XG4gICAgICAke3VudGlsKGljb25Qcm9taXNlLCBwbGFjZUhvbGRlckljb24oKSl9XG4gICAgPC9kaXY+XG4gIGA7XG59O1xuXG5leHBvcnQgeyByZW5kZXJJY29uIGFzIHIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWljb24uYmFzZS03YTkxOWRiMi5qcy5tYXBcbiIsImltcG9ydCB7IGMgYXMgY29tbW9uU3R5bGVzLCBfIGFzIF9fZGVjb3JhdGUgfSBmcm9tICcuL2Jhc2Uuc3R5bGVzLTExZDM5MTgxLmpzJztcbmltcG9ydCB7IGNzcywgTGl0RWxlbWVudCwgaHRtbCwgbm90aGluZyB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBwcm9wZXJ0eSwgY3VzdG9tRWxlbWVudCB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IGNsYXNzTWFwIH0gZnJvbSAnbGl0L2RpcmVjdGl2ZXMvY2xhc3MtbWFwLmpzJztcbmltcG9ydCB7IFNjb3BlZEVsZW1lbnRzTWl4aW4gfSBmcm9tICdAb3Blbi13Yy9zY29wZWQtZWxlbWVudHMnO1xuaW1wb3J0IHsgZiBhcyBmaXJlIH0gZnJvbSAnLi9ldmVudHMtMTE3M2Y1NjIuanMnO1xuaW1wb3J0IHsgdCBhcyB0b2tlbnMgfSBmcm9tICcuL2J1dHRvbi50b2tlbnMtZTc5YzhiYmYuanMnO1xuaW1wb3J0IHsgciBhcyByZW5kZXJJY29uIH0gZnJvbSAnLi9pY29uLmJhc2UtN2E5MTlkYjIuanMnO1xuaW1wb3J0ICdsaXQvZGlyZWN0aXZlcy9zdHlsZS1tYXAuanMnO1xuaW1wb3J0ICdsaXQvZGlyZWN0aXZlcy91bnRpbC5qcyc7XG5cbmNvbnN0IGJhc2VCdXR0b24gPSBjc3NgXG4gIC5idG4ge1xuICAgIGZvbnQtZmFtaWx5OiB2YXIoLS1uZS1idXR0b24tZm9udC1mYW1pbHkpO1xuICAgIGZvbnQtc2l6ZTogdmFyKC0tbmUtYnV0dG9uLWZvbnQtc2l6ZSk7XG4gICAgcGFkZGluZzogdmFyKC0tbmUtYnV0dG9uLXBhZGRpbmctdmVydGljYWwpXG4gICAgICB2YXIoLS1uZS1idXR0b24tcGFkZGluZy1ob3Jpem9udGFsKSB2YXIoLS1uZS1idXR0b24tcGFkZGluZy12ZXJ0aWNhbClcbiAgICAgIHZhcigtLW5lLWJ1dHRvbi1wYWRkaW5nLWhvcml6b250YWwpO1xuICAgIGdhcDogdmFyKC0tbmUtYnV0dG9uLWdhcCk7XG4gICAgYm9yZGVyLXJhZGl1czogdmFyKC0tbmUtYnV0dG9uLWJvcmRlci1yYWRpdXMpO1xuICAgIG91dGxpbmU6IG5vbmU7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBncmlkLWF1dG8tZmxvdzogY29sdW1uO1xuICB9XG5cbiAgLmJ0bjpmb2N1cyB7XG4gICAgb3V0bGluZTogNHB4IHNvbGlkIHZhcigtLW5lLWJ1dHRvbi1jb2xvci1ib3JkZXItZm9jdXMpO1xuICB9XG5cbiAgLmJ0bi1wcmltYXJ5IHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1uZS1idXR0b24tY29sb3ItYm9yZGVyLXByaW1hcnktZGVmYXVsdCk7XG4gICAgY29sb3I6IHZhcigtLW5lLWJ1dHRvbi1jb2xvci1sYWJlbC1wcmltYXJ5LWRlZmF1bHQpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLWJ1dHRvbi1jb2xvci1iYWNrZ3JvdW5kLXByaW1hcnktZGVmYXVsdCk7XG4gIH1cblxuICAuYnRuLXByaW1hcnk6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLWJ1dHRvbi1jb2xvci1iYWNrZ3JvdW5kLXByaW1hcnktaG92ZXIpO1xuICB9XG5cbiAgLmJ0bi1wcmltYXJ5OmRpc2FibGVkIHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1uZS1idXR0b24tY29sb3ItYm9yZGVyLWRpc2FibGVkKTtcbiAgICBjb2xvcjogdmFyKC0tbmUtYnV0dG9uLWNvbG9yLWxhYmVsLXByaW1hcnktZGlzYWJsZWQpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLWJ1dHRvbi1jb2xvci1iYWNrZ3JvdW5kLXByaW1hcnktZGlzYWJsZWQpO1xuICB9XG5cbiAgLmJ0bi1zZWNvbmRhcnkge1xuICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLW5lLWJ1dHRvbi1jb2xvci1ib3JkZXItc2Vjb25kYXJ5LWRlZmF1bHQpO1xuICAgIGNvbG9yOiB2YXIoLS1uZS1idXR0b24tY29sb3ItbGFiZWwtc2Vjb25kYXJ5LWRlZmF1bHQpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLWJ1dHRvbi1jb2xvci1iYWNrZ3JvdW5kLXNlY29uZGFyeS1kZWZhdWx0KTtcbiAgfVxuXG4gIC5idG4tc2Vjb25kYXJ5OmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1idXR0b24tY29sb3ItYmFja2dyb3VuZC1zZWNvbmRhcnktaG92ZXIpO1xuICB9XG5cbiAgLmJ0bi1zZWNvbmRhcnk6ZGlzYWJsZWQge1xuICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLW5lLWJ1dHRvbi1jb2xvci1ib3JkZXItZGlzYWJsZWQpO1xuICAgIGNvbG9yOiB2YXIoLS1uZS1idXR0b24tY29sb3ItbGFiZWwtc2Vjb25kYXJ5LWRpc2FibGVkKTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1idXR0b24tY29sb3ItYmFja2dyb3VuZC1zZWNvbmRhcnktZGlzYWJsZWQpO1xuICB9XG5cbiAgLmJ0bi1zZWNvbmRhcnk6Zm9jdXMge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLWJ1dHRvbi1jb2xvci1iYWNrZ3JvdW5kLXNlY29uZGFyeS1ob3Zlcik7XG4gIH1cblxuICAuYnRuLWRlc3RydWN0aXZlIHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1uZS1idXR0b24tY29sb3ItYm9yZGVyLWRlc3RydWN0aXZlLWRlZmF1bHQpO1xuICAgIGNvbG9yOiB2YXIoLS1uZS1idXR0b24tY29sb3ItbGFiZWwtZGVzdHJ1Y3RpdmUtZGVmYXVsdCk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmUtYnV0dG9uLWNvbG9yLWJhY2tncm91bmQtZGVzdHJ1Y3RpdmUtZGVmYXVsdCk7XG4gIH1cblxuICAuYnRuLWRlc3RydWN0aXZlOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1idXR0b24tY29sb3ItYmFja2dyb3VuZC1kZXN0cnVjdGl2ZS1ob3Zlcik7XG4gIH1cblxuICAuYnRuLWRlc3RydWN0aXZlOmRpc2FibGVkIHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1uZS1idXR0b24tY29sb3ItYm9yZGVyLWRpc2FibGVkKTtcbiAgICBjb2xvcjogdmFyKC0tbmUtYnV0dG9uLWNvbG9yLWxhYmVsLWRlc3RydWN0aXZlLWRpc2FibGVkKTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1idXR0b24tY29sb3ItYmFja2dyb3VuZC1kZXN0cnVjdGl2ZS1kaXNhYmxlZCk7XG4gIH1cblxuICAuYnRuLWRlc3RydWN0aXZlOmZvY3VzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1idXR0b24tY29sb3ItYmFja2dyb3VuZC1kZXN0cnVjdGl2ZS1ob3Zlcik7XG4gIH1cblxuICAuYnRuLXRleHQge1xuICAgIGJvcmRlcjogMDtcbiAgICBjb2xvcjogdmFyKC0tbmUtYnV0dG9uLWNvbG9yLWxhYmVsLXRleHQtZGVmYXVsdCk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIH1cblxuICAuYnRuLXRleHQ6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLWJ1dHRvbi1jb2xvci1iYWNrZ3JvdW5kLXRleHQtaG92ZXIpO1xuICB9XG5cbiAgLmJ0bi10ZXh0OmRpc2FibGVkIHtcbiAgICBib3JkZXI6IDA7XG4gICAgY29sb3I6IHZhcigtLW5lLWJ1dHRvbi1jb2xvci1sYWJlbC10ZXh0LWRpc2FibGVkKTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1idXR0b24tY29sb3ItYmFja2dyb3VuZC10ZXh0LWRpc2FibGVkKTtcbiAgfVxuXG4gIC5idG4tdGV4dDpmb2N1cyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmUtYnV0dG9uLWNvbG9yLWJhY2tncm91bmQtdGV4dC1ob3Zlcik7XG4gIH1cblxuICAuYnRuLWludmVyc2Uge1xuICAgIGNvbG9yOiB2YXIoLS1uZS1idXR0b24tY29sb3ItbGFiZWwtaW52ZXJzZS1kZWZhdWx0KTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1uZS1idXR0b24tY29sb3ItYm9yZGVyLWludmVyc2UtZGVmYXVsdCk7XG4gIH1cblxuICAuYnRuLWludmVyc2U6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLWJ1dHRvbi1jb2xvci1iYWNrZ3JvdW5kLWludmVyc2UtaG92ZXIpO1xuICB9XG5cbiAgLmJ0bi1pbnZlcnNlOmRpc2FibGVkIHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1uZS1idXR0b24tY29sb3ItYm9yZGVyLWRpc2FibGVkKTtcbiAgICBjb2xvcjogdmFyKC0tbmUtYnV0dG9uLWNvbG9yLWxhYmVsLWludmVyc2UtZGlzYWJsZWQpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLWJ1dHRvbi1jb2xvci1iYWNrZ3JvdW5kLWludmVyc2UtZGlzYWJsZWQpO1xuICB9XG5cbiAgLmJ0bi1pbnZlcnNlOmZvY3VzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1idXR0b24tY29sb3ItYmFja2dyb3VuZC1pbnZlcnNlLWhvdmVyKTtcbiAgfVxuXG4gIC5pY29uLXNsb3Qge1xuICAgIG1pbi13aWR0aDogMThweDtcbiAgICBtYXgtd2lkdGg6IDE4cHg7XG4gIH1cbmA7XG5jb25zdCBzdHlsZXMgPSBbdG9rZW5zLCBiYXNlQnV0dG9uLCBjb21tb25TdHlsZXNdO1xuXG5jb25zdCBidXR0b25WYXJpYW50c0FycmF5ID0gWydwcmltYXJ5JywgJ3NlY29uZGFyeScsICdkZXN0cnVjdGl2ZScsICd0ZXh0JywgJ2ludmVyc2UnXTtcbi8qKlxuICogQHRhZyBuZS1idXR0b25cbiAqIEB0YWduYW1lIG5lLWJ1dHRvblxuICpcbiAqIEBzbG90IGRlZmF1bHQgVGhpcyBpcyB3aGVyZSB0aGUgY29udGVudHMgb2YgdGhlIGJ1dHRvbiB3aWxsIGJlIGluc2VydGVkXG4gKlxuICogQGV2ZW50IG5lLWNsaWNrIFJhaXNlZCB3aGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZC5cbiAqL1xubGV0IE5lQnV0dG9uID0gY2xhc3MgTmVCdXR0b24gZXh0ZW5kcyBTY29wZWRFbGVtZW50c01peGluKExpdEVsZW1lbnQpIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAvKiogU3BlY2lmaWVzIHRoYXQgYSBidXR0b24gc2hvdWxkIGJlIGRpc2FibGVkICovXG4gICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIC8qKiBTcGVjaWZpZXMgdGhlIHRleHQgdGhhdCB3aWxsIGJlIHJlYWQgYnkgdGhlIHNjcmVlbiByZWFkZXIgKi9cbiAgICB0aGlzLmFyaWFMYWJlbCA9ICcnO1xuICAgIHRoaXMudmFyaWFudCA9ICdwcmltYXJ5JztcbiAgICB0aGlzLm9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgICBmaXJlKHRoaXMsICduZS1jbGljaycsIHtcbiAgICAgICAgY29tcG9zZWQ6IHRydWUsXG4gICAgICAgIGJ1YmJsZXM6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cbiAgc3RhdGljIGdldCBzdHlsZXMoKSB7XG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIGh0bWxgXG4gICAgICA8YnV0dG9uXG4gICAgICAgIGlkPSR7dGhpcy5pZH1cbiAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgID9kaXNhYmxlZD0ke3RoaXMuZGlzYWJsZWR9XG4gICAgICAgIEBjbGljaz1cIiR7dGhpcy5vbkNsaWNrfVwiXG4gICAgICAgIGFyaWEtbGFiZWw9JHt0aGlzLmFyaWFMYWJlbCB8fCBub3RoaW5nfVxuICAgICAgICBjbGFzcz0ke2NsYXNzTWFwKHtcbiAgICAgIGJ0bjogdHJ1ZSxcbiAgICAgICdidG4tcHJpbWFyeSc6IHRoaXMudmFyaWFudCA9PT0gJ3ByaW1hcnknLFxuICAgICAgJ2J0bi1zZWNvbmRhcnknOiB0aGlzLnZhcmlhbnQgPT09ICdzZWNvbmRhcnknLFxuICAgICAgJ2J0bi1kZXN0cnVjdGl2ZSc6IHRoaXMudmFyaWFudCA9PT0gJ2Rlc3RydWN0aXZlJyxcbiAgICAgICdidG4tdGV4dCc6IHRoaXMudmFyaWFudCA9PT0gJ3RleHQnLFxuICAgICAgJ2J0bi1pbnZlcnNlJzogdGhpcy52YXJpYW50ID09PSAnaW52ZXJzZSdcbiAgICB9KX1cbiAgICAgID5cbiAgICAgICAgPHNwYW4gY2xhc3M9JHt0aGlzLmxlZnRJY29uVHlwZSAhPT0gdW5kZWZpbmVkID8gJ2ljb24tc2xvdCcgOiAnaGlkZGVuJ30+XG4gICAgICAgICAgPHNsb3QgbmFtZT1cImxlZnRcIj4ke3JlbmRlckljb24oe1xuICAgICAgdHlwZTogdGhpcy5sZWZ0SWNvblR5cGVcbiAgICB9KX08L3Nsb3Q+XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPHNsb3Q+PC9zbG90PlxuICAgICAgICA8c3BhblxuICAgICAgICAgIGNsYXNzPSR7dGhpcy5yaWdodEljb25UeXBlICE9PSB1bmRlZmluZWQgPyAnaWNvbi1zbG90JyA6ICdoaWRkZW4nfVxuICAgICAgICA+XG4gICAgICAgICAgPHNsb3QgbmFtZT1cInJpZ2h0XCI+JHtyZW5kZXJJY29uKHtcbiAgICAgIHR5cGU6IHRoaXMucmlnaHRJY29uVHlwZVxuICAgIH0pfTwvc2xvdD5cbiAgICAgICAgPC9zcGFuPlxuICAgICAgPC9idXR0b24+XG4gICAgYDtcbiAgfVxufTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogQm9vbGVhbixcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZUJ1dHRvbi5wcm90b3R5cGUsIFwiZGlzYWJsZWRcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgYXR0cmlidXRlOiAnbmUtYXJpYS1sYWJlbCcsXG4gIHR5cGU6IFN0cmluZyxcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZUJ1dHRvbi5wcm90b3R5cGUsIFwiYXJpYUxhYmVsXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZyxcbiAgYXR0cmlidXRlOiAnbGVmdC1pY29uJyxcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZUJ1dHRvbi5wcm90b3R5cGUsIFwibGVmdEljb25UeXBlXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZyxcbiAgYXR0cmlidXRlOiAncmlnaHQtaWNvbicsXG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVCdXR0b24ucHJvdG90eXBlLCBcInJpZ2h0SWNvblR5cGVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZUJ1dHRvbi5wcm90b3R5cGUsIFwidmFyaWFudFwiLCB2b2lkIDApO1xuTmVCdXR0b24gPSBfX2RlY29yYXRlKFtjdXN0b21FbGVtZW50KCduZS1idXR0b24nKV0sIE5lQnV0dG9uKTtcblxuZXhwb3J0IHsgTmVCdXR0b24sIGJ1dHRvblZhcmlhbnRzQXJyYXkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1dHRvbi5qcy5tYXBcbiIsImltcG9ydCB7IGMgYXMgY29tbW9uU3R5bGVzLCBfIGFzIF9fZGVjb3JhdGUgfSBmcm9tICcuL2Jhc2Uuc3R5bGVzLTExZDM5MTgxLmpzJztcbmltcG9ydCB7IGNzcywgTGl0RWxlbWVudCwgaHRtbCB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBwcm9wZXJ0eSwgY3VzdG9tRWxlbWVudCB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IGNsYXNzTWFwIH0gZnJvbSAnbGl0L2RpcmVjdGl2ZXMvY2xhc3MtbWFwLmpzJztcbmltcG9ydCB7IFNjb3BlZEVsZW1lbnRzTWl4aW4gfSBmcm9tICdAb3Blbi13Yy9zY29wZWQtZWxlbWVudHMnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuY29uc3QgdG9rZW5zID0gY3NzYFxuICAqIHtcbiAgLS1uZS1idXR0b24tc2V0LXBhZGRpbmctdmVydGljYWw6IHZhcigtLW5lLXJlZi1zcGFjaW5nLW1lZGl1bSwgMWVtKTtcbiAgLS1uZS1idXR0b24tc2V0LWdhcDogdmFyKC0tbmUtcmVmLXNwYWNpbmctbWVkaXVtLCAxZW0pO1xuICAtLW5lLWJ1dHRvbi1zZXQtY29sb3ItYm9yZGVyOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS0xMCwgI0UyRTNFNCk7XG4gIC0tbmUtYnV0dG9uLXNldC1ib3JkZXItd2lkdGg6IHZhcigtLW5lLXJlZi1ib3JkZXItd2lkdGgtc21hbGwsIDFweCk7XG59XG5gO1xuXG5jb25zdCBiYXNlID0gY3NzYFxuICA6aG9zdCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cblxuICAubmUtYnV0dG9uLXNldCB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWZsb3c6IHJvdztcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XG4gICAgcGFkZGluZy10b3A6IHZhcigtLW5lLWJ1dHRvbi1zZXQtcGFkZGluZy12ZXJ0aWNhbCk7XG4gICAgcGFkZGluZy1ib3R0b206IHZhcigtLW5lLWJ1dHRvbi1zZXQtcGFkZGluZy12ZXJ0aWNhbCk7XG4gICAgZ2FwOiB2YXIoLS1uZS1idXR0b24tc2V0LWdhcCk7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cblxuICAubmUtYnV0dG9uLXNldCA6OnNsb3R0ZWQoLnJpZ2h0LXN0YXJ0KSB7XG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gIH1cblxuICAuZGl2aWRlci10b3Age1xuICAgIGJvcmRlci10b3A6IHNvbGlkO1xuICAgIGJvcmRlci10b3Atd2lkdGg6IHZhcigtLW5lLWJ1dHRvbi1zZXQtYm9yZGVyLXdpZHRoKTtcbiAgICBib3JkZXItdG9wLWNvbG9yOiB2YXIoLS1uZS1idXR0b24tc2V0LWNvbG9yLWJvcmRlcik7XG4gIH1cblxuICAuZGl2aWRlci1ib3R0b20ge1xuICAgIGJvcmRlci1ib3R0b206IHNvbGlkO1xuICAgIGJvcmRlci1ib3R0b20td2lkdGg6IHZhcigtLW5lLWJ1dHRvbi1zZXQtYm9yZGVyLXdpZHRoKTtcbiAgICBib3JkZXItYm90dG9tLWNvbG9yOiB2YXIoLS1uZS1idXR0b24tc2V0LWNvbG9yLWJvcmRlcik7XG4gIH1cbmA7XG5jb25zdCBzdHlsZXMgPSBbYmFzZSwgY29tbW9uU3R5bGVzLCB0b2tlbnNdO1xuXG4vKipcbiAqIEB0YWcgbmUtYnV0dG9uLXNldFxuICogQHRhZ25hbWUgbmUtYnV0dG9uLXNldFxuICpcbiAqIEBzbG90IGRlZmF1bHQgVGhpcyBpcyB3aGVyZSB0aGUgY29udGVudHMgb2YgdGhlIGJ1dHRvbiBzZXQgd2lsbCBiZSBpbnNlcnRlZFxuICovXG5sZXQgTmVCdXR0b25TZXQgPSBjbGFzcyBOZUJ1dHRvblNldCBleHRlbmRzIFNjb3BlZEVsZW1lbnRzTWl4aW4oTGl0RWxlbWVudCkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMuc2hvd1RvcERpdmlkZXIgPSBmYWxzZTtcbiAgICB0aGlzLnNob3dCb3R0b21EaXZpZGVyID0gZmFsc2U7XG4gIH1cbiAgc3RhdGljIGdldCBzdHlsZXMoKSB7XG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIGh0bWxgPGRpdlxuICAgICAgY2xhc3M9XCIke2NsYXNzTWFwKHtcbiAgICAgICduZS1idXR0b24tc2V0JzogdHJ1ZSxcbiAgICAgICdkaXZpZGVyLXRvcCc6IHRoaXMuc2hvd1RvcERpdmlkZXIsXG4gICAgICAnZGl2aWRlci1ib3R0b20nOiB0aGlzLnNob3dCb3R0b21EaXZpZGVyXG4gICAgfSl9XCJcbiAgICA+XG4gICAgICA8c2xvdD48L3Nsb3Q+XG4gICAgPC9kaXY+YDtcbiAgfVxufTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogQm9vbGVhbixcbiAgcmVmbGVjdDogdHJ1ZSxcbiAgYXR0cmlidXRlOiAnc2hvdy1kaXZpZGVyLXRvcCdcbn0pXSwgTmVCdXR0b25TZXQucHJvdG90eXBlLCBcInNob3dUb3BEaXZpZGVyXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IEJvb2xlYW4sXG4gIHJlZmxlY3Q6IHRydWUsXG4gIGF0dHJpYnV0ZTogJ3Nob3ctZGl2aWRlci1ib3R0b20nXG59KV0sIE5lQnV0dG9uU2V0LnByb3RvdHlwZSwgXCJzaG93Qm90dG9tRGl2aWRlclwiLCB2b2lkIDApO1xuTmVCdXR0b25TZXQgPSBfX2RlY29yYXRlKFtjdXN0b21FbGVtZW50KCduZS1idXR0b24tc2V0JyldLCBOZUJ1dHRvblNldCk7XG5cbmV4cG9ydCB7IE5lQnV0dG9uU2V0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idXR0b24tc2V0LmpzLm1hcFxuIiwiaW1wb3J0e25vdGhpbmcgYXMgdH1mcm9tXCIuLi9saXQtaHRtbC5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovY29uc3QgbD1sPT5udWxsIT1sP2w6dDtleHBvcnR7bCBhcyBpZkRlZmluZWR9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWYtZGVmaW5lZC5qcy5tYXBcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2xpdCc7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5jb25zdCB0b2tlbnMgPSBjc3NgXG4gICoge1xuICAtLW5lLWxhYmVsLWdhcDogdmFyKC0tbmUtcmVmLXNwYWNpbmctbm9uZSwgMCk7XG4gIC0tbmUtbGFiZWwtY29sb3ItdGl0bGU6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTYwLCAjNTc1QzYxKTtcbiAgLS1uZS1sYWJlbC1jb2xvci1hc3RlcmlzazogdmFyKC0tbmUtcmVmLWNvbG9yLXJlZC02MCwgI0I4MDAwMCk7XG4gIC0tbmUtbGFiZWwtZm9udC1zaXplOiB2YXIoLS1uZS1yZWYtZm9udC1zaXplLTA0LCAwLjg3NWVtKTtcbiAgLS1uZS1sYWJlbC1mb250LWZhbWlseTogdmFyKC0tbmUtcmVmLWZvbnQtZmFtaWx5LW9wZW4tc2FucywgT3BlbiBTYW5zKTtcbn1cbmA7XG5cbmV4cG9ydCB7IHRva2VucyBhcyB0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sYWJlbC50b2tlbnMtM2RmNzAyMDAuanMubWFwXG4iLCJpbXBvcnQgeyBjIGFzIGNvbW1vblN0eWxlcywgXyBhcyBfX2RlY29yYXRlIH0gZnJvbSAnLi9iYXNlLnN0eWxlcy0xMWQzOTE4MS5qcyc7XG5pbXBvcnQgeyBjc3MsIExpdEVsZW1lbnQsIGh0bWwsIG5vdGhpbmcgfSBmcm9tICdsaXQnO1xuaW1wb3J0IHsgaWZEZWZpbmVkIH0gZnJvbSAnbGl0L2RpcmVjdGl2ZXMvaWYtZGVmaW5lZC5qcyc7XG5pbXBvcnQgeyBwcm9wZXJ0eSwgY3VzdG9tRWxlbWVudCB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IHQgYXMgdG9rZW5zIH0gZnJvbSAnLi9sYWJlbC50b2tlbnMtM2RmNzAyMDAuanMnO1xuXG5jb25zdCBiYXNlTGFiZWwgPSBjc3NgXG4gICoge1xuICAgIGNvbG9yOiB2YXIoLS1uZS1sYWJlbC1jb2xvci10aXRsZSk7XG4gICAgZm9udC1mYW1pbHk6IHZhcigtLW5lLWxhYmVsLWZvbnQtZmFtaWx5KTtcbiAgICBmb250LXNpemU6IDFlbTtcbiAgfVxuXG4gIC5vdXRlci1sYWJlbCB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmb250LXNpemU6IHZhcigtLW5lLWxhYmVsLWZvbnQtc2l6ZSk7XG4gIH1cblxuICAucmVxdWlyZWQtaW5kaWNhdG9yIHtcbiAgICBtYXJnaW4tbGVmdDogdmFyKC0tbmUtbGFiZWwtZ2FwKTtcbiAgICBjb2xvcjogdmFyKC0tbmUtbGFiZWwtY29sb3ItYXN0ZXJpc2spO1xuICB9XG5gO1xuY29uc3Qgc3R5bGVzID0gW2Jhc2VMYWJlbCwgY29tbW9uU3R5bGVzLCB0b2tlbnNdO1xuXG4vKipcbiAqIEB0YWcgbmUtbGFiZWxcbiAqIEB0YWduYW1lIG5lLWxhYmVsXG4gKlxuICovXG5sZXQgTmVMYWJlbCA9IGNsYXNzIE5lTGFiZWwgZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLmZvciA9ICcnO1xuICAgIHRoaXMucmVxdWlyZWQgPSBmYWxzZTtcbiAgfVxuICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gaHRtbGA8bGFiZWxcbiAgICAgIGNsYXNzPVwib3V0ZXItbGFiZWxcIlxuICAgICAgaWQ9JHtpZkRlZmluZWQodGhpcy5pZCl9XG4gICAgICBmb3I9JHtpZkRlZmluZWQodGhpcy5mb3IpfVxuICAgID5cbiAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICAgICR7dGhpcy5yZXF1aXJlZCA/IGh0bWxgPHNwYW4gY2xhc3M9XCJyZXF1aXJlZC1pbmRpY2F0b3JcIj4qPC9zcGFuPmAgOiBub3RoaW5nfVxuICAgIDwvbGFiZWw+IGA7XG4gIH1cbn07XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIGF0dHJpYnV0ZTogJ2Zvcidcbn0pXSwgTmVMYWJlbC5wcm90b3R5cGUsIFwiZm9yXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIGF0dHJpYnV0ZTogJ3JlcXVpcmVkJyxcbiAgdHlwZTogQm9vbGVhbixcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZUxhYmVsLnByb3RvdHlwZSwgXCJyZXF1aXJlZFwiLCB2b2lkIDApO1xuTmVMYWJlbCA9IF9fZGVjb3JhdGUoW2N1c3RvbUVsZW1lbnQoJ25lLWxhYmVsJyldLCBOZUxhYmVsKTtcblxuZXhwb3J0IHsgTmVMYWJlbCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGFiZWwuanMubWFwXG4iLCJpbXBvcnR7ZGlyZWN0aXZlIGFzIHN9ZnJvbVwiLi4vZGlyZWN0aXZlLmpzXCI7aW1wb3J0e1Vuc2FmZUhUTUxEaXJlY3RpdmUgYXMgZX1mcm9tXCIuL3Vuc2FmZS1odG1sLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9jbGFzcyB0IGV4dGVuZHMgZXt9dC5kaXJlY3RpdmVOYW1lPVwidW5zYWZlU1ZHXCIsdC5yZXN1bHRUeXBlPTI7Y29uc3Qgbz1zKHQpO2V4cG9ydHtvIGFzIHVuc2FmZVNWR307XG4vLyMgc291cmNlTWFwcGluZ1VSTD11bnNhZmUtc3ZnLmpzLm1hcFxuIiwiaW1wb3J0IHsgYyBhcyBjb21tb25TdHlsZXMsIF8gYXMgX19kZWNvcmF0ZSB9IGZyb20gJy4vYmFzZS5zdHlsZXMtMTFkMzkxODEuanMnO1xuaW1wb3J0IHsgY3NzLCBMaXRFbGVtZW50LCBodG1sIH0gZnJvbSAnbGl0JztcbmltcG9ydCB7IHByb3BlcnR5LCBjdXN0b21FbGVtZW50IH0gZnJvbSAnbGl0L2RlY29yYXRvcnMuanMnO1xuaW1wb3J0IHsgdW5zYWZlU1ZHIH0gZnJvbSAnbGl0L2RpcmVjdGl2ZXMvdW5zYWZlLXN2Zy5qcyc7XG5pbXBvcnQgeyBjbGFzc01hcCB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL2NsYXNzLW1hcC5qcyc7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5jb25zdCB0b2tlbnMgPSBjc3NgXG4gICoge1xuICAtLW5lLXNwaW5uZXItc2l6aW5nLWxhcmdlOiB2YXIoLS1uZS1yZWYtc2l6aW5nLTEyLCA0ZW0pO1xuICAtLW5lLXNwaW5uZXItc2l6aW5nLW1lZGl1bTogdmFyKC0tbmUtcmVmLXNpemluZy0xMSwgM2VtKTtcbiAgLS1uZS1zcGlubmVyLXNpemluZy1zbWFsbDogdmFyKC0tbmUtcmVmLXNpemluZy0wNCwgMWVtKTtcbiAgLS1uZS1zcGlubmVyLWdhcDogdmFyKC0tbmUtcmVmLXNwYWNpbmcteC1zbWFsbCwgMC41ZW0pO1xuICAtLW5lLXNwaW5uZXItY29sb3ItZGFyay1sZWZ0OiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS05MCwgIzE2MTcxOCk7XG4gIC0tbmUtc3Bpbm5lci1jb2xvci1kYXJrLXJpZ2h0OiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS01MCwgIzZENzM3OSk7XG4gIC0tbmUtc3Bpbm5lci1jb2xvci1kYXJrLXRleHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTkwLCAjMTYxNzE4KTtcbiAgLS1uZS1zcGlubmVyLWNvbG9yLWxpZ2h0LXJpZ2h0OiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS0yMCwgI0M0QzdDQSk7XG4gIC0tbmUtc3Bpbm5lci1jb2xvci1saWdodC1sZWZ0OiB2YXIoLS1uZS1yZWYtY29sb3Itd2hpdGUsICNmZmZmZmYpO1xuICAtLW5lLXNwaW5uZXItY29sb3ItbGlnaHQtdGV4dDogdmFyKC0tbmUtcmVmLWNvbG9yLXdoaXRlLCAjZmZmZmZmKTtcbiAgLS1uZS1zcGlubmVyLWZvbnQtZmFtaWx5OiB2YXIoLS1uZS1yZWYtZm9udC1mYW1pbHktb3Blbi1zYW5zLCBPcGVuIFNhbnMpO1xuICAtLW5lLXNwaW5uZXItZm9udC1zaXplLWxhcmdlOiB2YXIoLS1uZS1yZWYtZm9udC1zaXplLTA2LCAxLjEyNWVtKTtcbiAgLS1uZS1zcGlubmVyLWZvbnQtc2l6ZS1tZWRpdW06IHZhcigtLW5lLXJlZi1mb250LXNpemUtMDQsIDAuODc1ZW0pO1xuICAtLW5lLXNwaW5uZXItZm9udC1zaXplLXNtYWxsOiB2YXIoLS1uZS1yZWYtZm9udC1zaXplLTAyLCAwLjc1ZW0pO1xufVxuYDtcblxuY29uc3QgYmFzZUxvYWRpbmdJbmRpY2F0b3IgPSBjc3NgXG4gIEBrZXlmcmFtZXMgbWlkZGxlIHtcbiAgICAwJSB7XG4gICAgICBvcGFjaXR5OiAwO1xuICAgIH1cblxuICAgIDMyJSB7XG4gICAgICBvcGFjaXR5OiAwO1xuICAgIH1cblxuICAgIDUwJSB7XG4gICAgICBvcGFjaXR5OiAxO1xuICAgIH1cblxuICAgIDEwMCUge1xuICAgICAgb3BhY2l0eTogMTtcbiAgICB9XG4gIH1cblxuICBAa2V5ZnJhbWVzIHNlY29uZCB7XG4gICAgMCUge1xuICAgICAgb3BhY2l0eTogMDtcbiAgICB9XG5cbiAgICAyNCUge1xuICAgICAgb3BhY2l0eTogMDtcbiAgICB9XG5cbiAgICAzMiUge1xuICAgICAgb3BhY2l0eTogMC45O1xuICAgIH1cblxuICAgIDQwJSB7XG4gICAgICBvcGFjaXR5OiAwO1xuICAgIH1cblxuICAgIDEwMCUge1xuICAgICAgb3BhY2l0eTogMDtcbiAgICB9XG4gIH1cblxuICBAa2V5ZnJhbWVzIHRoaXJkIHtcbiAgICAwJSB7XG4gICAgICBvcGFjaXR5OiAwO1xuICAgIH1cblxuICAgIDE2JSB7XG4gICAgICBvcGFjaXR5OiAwO1xuICAgIH1cblxuICAgIDI0JSB7XG4gICAgICBvcGFjaXR5OiAwLjg7XG4gICAgfVxuXG4gICAgNDAlIHtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgfVxuXG4gICAgMTAwJSB7XG4gICAgICBvcGFjaXR5OiAwO1xuICAgIH1cbiAgfVxuXG4gIEBrZXlmcmFtZXMgZm9ydGgge1xuICAgIDAlIHtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgfVxuXG4gICAgOCUge1xuICAgICAgb3BhY2l0eTogMC43O1xuICAgIH1cblxuICAgIDI0JSB7XG4gICAgICBvcGFjaXR5OiAwO1xuICAgIH1cblxuICAgIDEwMCUge1xuICAgICAgb3BhY2l0eTogMDtcbiAgICB9XG4gIH1cblxuICBAa2V5ZnJhbWVzIGZpZnRoIHtcbiAgICAwJSB7XG4gICAgICBvcGFjaXR5OiAwLjY7XG4gICAgfVxuXG4gICAgMTAlIHtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgfVxuXG4gICAgMTAwJSB7XG4gICAgICBvcGFjaXR5OiAwO1xuICAgIH1cbiAgfVxuXG4gIC5uZS1zcGlubmVyIHtcbiAgICBjb2xvcjogdmFyKC0tbmUtc3Bpbm5lci1jb2xvci1kYXJrLXRleHQpO1xuICB9XG5cbiAgLm5lLXNwaW5uZXItc3RhdHVzIHtcbiAgICBtYXJnaW46IDFlbTtcbiAgICBmb250LXNpemU6IHZhcigtLW5lLXNwaW5uZXItZm9udC1zaXplLWxhcmdlKTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgZm9udC1mYW1pbHk6IHZhcigtLW5lLXNwaW5uZXItZm9udC1mYW1pbHkpO1xuICB9XG5cbiAgLm5lLXNwaW5uZXItY29udGFpbmVyIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB9XG5cbiAgLm5lLXNwaW5uZXItY29udGFpbmVyLWxhcmdlIHtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB9XG5cbiAgLm5lLXNwaW5uZXItY29udGFpbmVyLWNlbnRlciB7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIH1cblxuICAubmUtaWNvbiB7XG4gICAgZmlsbDogY3VycmVudGNvbG9yO1xuICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7XG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gIH1cblxuICAubmUtbmludGV4LXNwaW5uZXIgLm5lLWljb24ge1xuICAgIGhlaWdodDogdmFyKC0tbmUtc3Bpbm5lci1zaXppbmctbGFyZ2UpO1xuICAgIHdpZHRoOiB2YXIoLS1uZS1zcGlubmVyLXNpemluZy1sYXJnZSk7XG4gIH1cblxuICAubmUtbmludGV4LXNwaW5uZXIgPiBkaXYge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgfVxuXG4gIC5uZS1uaW50ZXgtc3Bpbm5lci1taWRkbGUge1xuICAgIGFuaW1hdGlvbi1uYW1lOiBtaWRkbGU7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB9XG5cbiAgLm5lLW5pbnRleC1zcGlubmVyLWxlZnQge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgfVxuXG4gIC5uZS1uaW50ZXgtc3Bpbm5lci10cmFpbC1sZWZ0LFxuICAubmUtbmludGV4LXNwaW5uZXItdHJhaWwtcmlnaHQge1xuICAgIG1hcmdpbjogMCAtOHB4O1xuICB9XG5cbiAgLm5lLW5pbnRleC1zcGlubmVyLXRyYWlsLWxlZnQsXG4gIC5uZS1uaW50ZXgtc3Bpbm5lci1sZWZ0IHtcbiAgICBjb2xvcjogdmFyKC0tbmUtc3Bpbm5lci1jb2xvci1kYXJrLWxlZnQpO1xuICB9XG5cbiAgLm5lLW5pbnRleC1zcGlubmVyLXRyYWlsLXJpZ2h0LFxuICAubmUtbmludGV4LXNwaW5uZXItcmlnaHQge1xuICAgIGNvbG9yOiB2YXIoLS1uZS1zcGlubmVyLWNvbG9yLWRhcmstcmlnaHQpO1xuICB9XG5cbiAgLm5lLW5pbnRleC1zcGlubmVyLW1pZGRsZSxcbiAgLm5lLW5pbnRleC1zcGlubmVyLXNlY29uZCxcbiAgLm5lLW5pbnRleC1zcGlubmVyLXRoaXJkLFxuICAubmUtbmludGV4LXNwaW5uZXItZm9ydGgsXG4gIC5uZS1uaW50ZXgtc3Bpbm5lci1maWZ0aCB7XG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAyMDAwbXM7XG4gICAgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyO1xuICAgIGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IGluZmluaXRlO1xuICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2UtaW4tb3V0O1xuICB9XG5cbiAgLm5lLW5pbnRleC1zcGlubmVyLXNlY29uZCB7XG4gICAgYW5pbWF0aW9uLW5hbWU6IHNlY29uZDtcbiAgfVxuXG4gIC5uZS1uaW50ZXgtc3Bpbm5lci10aGlyZCB7XG4gICAgYW5pbWF0aW9uLW5hbWU6IHRoaXJkO1xuICB9XG5cbiAgLm5lLW5pbnRleC1zcGlubmVyLWZvcnRoIHtcbiAgICBhbmltYXRpb24tbmFtZTogZm9ydGg7XG4gIH1cblxuICAubmUtbmludGV4LXNwaW5uZXItZmlmdGgge1xuICAgIGFuaW1hdGlvbi1uYW1lOiBmaWZ0aDtcbiAgfVxuXG4gIC5uZS1uaW50ZXgtc3Bpbm5lci1zbWFsbCB7XG4gICAgcGFkZGluZzogMDtcbiAgfVxuXG4gIC5uZS1uaW50ZXgtc3Bpbm5lci1zbWFsbCAubmUtaWNvbiB7XG4gICAgaGVpZ2h0OiB2YXIoLS1uZS1zcGlubmVyLXNpemluZy1zbWFsbCk7XG4gICAgd2lkdGg6IHZhcigtLW5lLXNwaW5uZXItc2l6aW5nLXNtYWxsKTtcbiAgfVxuXG4gIC5uZS1uaW50ZXgtc3Bpbm5lci1zbWFsbCAubmUtbmludGV4LXNwaW5uZXItdHJhaWwtbGVmdCxcbiAgLm5lLW5pbnRleC1zcGlubmVyLXNtYWxsIC5uZS1uaW50ZXgtc3Bpbm5lci10cmFpbC1yaWdodCB7XG4gICAgbWFyZ2luOiAwIC0ycHg7XG4gIH1cblxuICAubmUtbmludGV4LXNwaW5uZXItc21hbGwgLm5lLXNwaW5uZXItc3RhdHVzIHtcbiAgICBmb250LXNpemU6IHZhcigtLW5lLXNwaW5uZXItZm9udC1zaXplLXNtYWxsKTtcbiAgICBtYXJnaW46IDA7XG4gIH1cblxuICAubmUtbmludGV4LXNwaW5uZXItbWVkaXVtIC5uZS1pY29uIHtcbiAgICBoZWlnaHQ6IHZhcigtLW5lLXNwaW5uZXItc2l6aW5nLW1lZGl1bSk7XG4gICAgd2lkdGg6IHZhcigtLW5lLXNwaW5uZXItc2l6aW5nLW1lZGl1bSk7XG4gIH1cblxuICAubmUtbmludGV4LXNwaW5uZXItbWVkaXVtIC5uZS1uaW50ZXgtc3Bpbm5lci10cmFpbC1sZWZ0LFxuICAubmUtbmludGV4LXNwaW5uZXItbWVkaXVtIC5uZS1uaW50ZXgtc3Bpbm5lci10cmFpbC1yaWdodCB7XG4gICAgbWFyZ2luOiAwIC02cHg7XG4gIH1cblxuICAubmUtbmludGV4LXNwaW5uZXItbWVkaXVtIC5uZS1zcGlubmVyLXN0YXR1cyB7XG4gICAgZm9udC1zaXplOiB2YXIoLS1uZS1zcGlubmVyLWZvbnQtc2l6ZS1tZWRpdW0pO1xuICAgIG1hcmdpbjogMC44NzVlbTtcbiAgfVxuXG4gIC5uZS1zcGlubmVyLXRoZW1lLWxpZ2h0IC5uZS1uaW50ZXgtc3Bpbm5lci10cmFpbC1sZWZ0LFxuICAubmUtc3Bpbm5lci10aGVtZS1saWdodCAubmUtbmludGV4LXNwaW5uZXItdHJhaWwtcmlnaHQge1xuICAgIGNvbG9yOiB2YXIoLS1uZS1zcGlubmVyLWNvbG9yLWxpZ2h0LXJpZ2h0KTtcbiAgfVxuXG4gIC5uZS1zcGlubmVyLXRoZW1lLWxpZ2h0IC5uZS1uaW50ZXgtc3Bpbm5lci1sZWZ0IHtcbiAgICBjb2xvcjogdmFyKC0tbmUtc3Bpbm5lci1jb2xvci1saWdodC1sZWZ0KTtcbiAgfVxuXG4gIC5uZS1zcGlubmVyLXRoZW1lLWxpZ2h0IC5uZS1uaW50ZXgtc3Bpbm5lci10cmFpbC1yaWdodCxcbiAgLm5lLXNwaW5uZXItdGhlbWUtbGlnaHQgLm5lLW5pbnRleC1zcGlubmVyLXJpZ2h0IHtcbiAgICBjb2xvcjogdmFyKC0tbmUtc3Bpbm5lci1jb2xvci1saWdodC1yaWdodCk7XG4gIH1cblxuICAubmUtc3Bpbm5lci10aGVtZS1saWdodCAubmUtc3Bpbm5lci1zdGF0dXMge1xuICAgIGNvbG9yOiB2YXIoLS1uZS1zcGlubmVyLWNvbG9yLWxpZ2h0LXRleHQpO1xuICB9XG5cbiAgLm5lLXNwaW5uZXItc3RhdHVzLnZpc3VhbGx5LWhpZGRlbiB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuYDtcbmNvbnN0IHN0eWxlcyA9IFt0b2tlbnMsIGJhc2VMb2FkaW5nSW5kaWNhdG9yLCBjb21tb25TdHlsZXNdO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1zaGFkb3cgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgU3Bpbm5lclR5cGU7XG4oZnVuY3Rpb24gKFNwaW5uZXJUeXBlKSB7XG4gIFNwaW5uZXJUeXBlW1wibGFyZ2VcIl0gPSBcImxhcmdlXCI7XG4gIFNwaW5uZXJUeXBlW1wibWVkaXVtXCJdID0gXCJtZWRpdW1cIjtcbiAgU3Bpbm5lclR5cGVbXCJzbWFsbFwiXSA9IFwic21hbGxcIjtcbn0pKFNwaW5uZXJUeXBlIHx8IChTcGlubmVyVHlwZSA9IHt9KSk7XG52YXIgU3Bpbm5lclRoZW1lVHlwZTtcbihmdW5jdGlvbiAoU3Bpbm5lclRoZW1lVHlwZSkge1xuICBTcGlubmVyVGhlbWVUeXBlW1wibGlnaHRcIl0gPSBcImxpZ2h0XCI7XG4gIFNwaW5uZXJUaGVtZVR5cGVbXCJyZWd1bGFyXCJdID0gXCJyZWd1bGFyXCI7XG59KShTcGlubmVyVGhlbWVUeXBlIHx8IChTcGlubmVyVGhlbWVUeXBlID0ge30pKTtcblxuY29uc3QgY2VudGVyTGVmdCA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDM0IDM0XCIgd2lkdGg9XCIxZW1cIiBoZWlnaHQ9XCIxZW1cIiBjbGFzcz1cIm5lLWljb25fX2xvZ29zLW5pbnRleC14LWxvYWRlci1jZW50ZXItbGVmdCBuZS1pY29uIG5lLWljb24taW5saW5lIG5lLW5pbnRleC1zcGlubmVyLWxlZnRcIj48cGF0aCBkPVwiTTI0LjAxIDE3bC0xNyAxN0wwIDI2Ljk5IDkuOTkgMTcgMCA3LjAxIDcuMDEgMGwxNyAxN3pcIj48L3BhdGg+PC9zdmc+JztcblxuY29uc3QgY2VudGVyUmlnaHQgPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAzNCAzNFwiIHdpZHRoPVwiMWVtXCIgaGVpZ2h0PVwiMWVtXCIgY2xhc3M9XCJuZS1pY29uX19sb2dvcy1uaW50ZXgteC1sb2FkZXItY2VudGVyLXJpZ2h0IG5lLWljb24gbmUtaWNvbi1pbmxpbmUgbmUtbmludGV4LXNwaW5uZXItcmlnaHRcIj48cGF0aCBkPVwiTTI0LjAxIDE3TDM0IDI2Ljk5IDI2Ljk5IDM0bC0xNy0xNyAxNy0xN0wzNCA3LjAxIDI0LjAxIDE3elwiPjwvcGF0aD48L3N2Zz4nO1xuXG5jb25zdCBsZWZ0ID0gJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjQgMzRcIiB3aWR0aD1cIjFlbVwiIGhlaWdodD1cIjFlbVwiIGNsYXNzPVwibmUtaWNvbl9fbG9nb3MtbmludGV4LXgtbG9hZGVyLWxlZnQgbmUtaWNvbiBuZS1pY29uLWlubGluZVwiPjxwYXRoIGQ9XCJNMjQgMTdMNy4wMSAzNCAwIDI2Ljk5IDkuOTggMTcgMCA3LjAxIDcuMDEgMCAyNCAxN3pcIj48L3BhdGg+PC9zdmc+JztcblxuY29uc3QgcmlnaHQgPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyNCAzNFwiIHdpZHRoPVwiMWVtXCIgaGVpZ2h0PVwiMWVtXCIgY2xhc3M9XCJuZS1pY29uX19sb2dvcy1uaW50ZXgteC1sb2FkZXItcmlnaHQgbmUtaWNvbiBuZS1pY29uLWlubGluZVwiPjxwYXRoIGQ9XCJNMTQuMDIgMTYuOTlMMjQgMjYuOThsLTcuMDEgN0wwIDE2Ljk5IDE2Ljk5IDAgMjQgNy4wMWwtOS45OCA5Ljk4elwiPjwvcGF0aD48L3N2Zz4nO1xuXG4vKipcbiAqIEB0YWcgbmUtc3Bpbm5lclxuICogQHRhZ25hbWUgbmUtc3Bpbm5lclxuICogQGRlc2NyaXB0aW9uIENvbnRyb2wgdGhhdCByZW5kZXJzIHRoZSBzcGlubmVyLlxuICpcbiAqL1xubGV0IE5lU3Bpbm5lciA9IGNsYXNzIE5lU3Bpbm5lciBleHRlbmRzIExpdEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgc2l6ZSBvZiB0aGUgbG9hZGluZyBpY29uXG4gICAgICovXG4gICAgdGhpcy5zaXplID0gU3Bpbm5lclR5cGUubWVkaXVtO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgdGhlbWUgb2YgdGhlIGxvYWRpbmcgaWNvblxuICAgICAqL1xuICAgIHRoaXMudGhlbWUgPSBTcGlubmVyVGhlbWVUeXBlLnJlZ3VsYXI7XG4gIH1cbiAgLy8gU3R5bGVzXG4gIHN0YXRpYyBnZXQgc3R5bGVzKCkge1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHNwaW5uZXIgPSBodG1sYDxkaXZcbiAgICAgIGNsYXNzPSR7Y2xhc3NNYXAoe1xuICAgICAgJ25lLW5pbnRleC1zcGlubmVyIG5lLXNwaW5uZXInOiB0cnVlLFxuICAgICAgJ25lLW5pbnRleC1zcGlubmVyLXNtYWxsJzogdGhpcy5zaXplID09PSBTcGlubmVyVHlwZS5zbWFsbCxcbiAgICAgICduZS1uaW50ZXgtc3Bpbm5lci1tZWRpdW0nOiB0aGlzLnNpemUgPT09IFNwaW5uZXJUeXBlLm1lZGl1bSxcbiAgICAgICduZS1uaW50ZXgtc3Bpbm5lci1sYXJnZSc6IHRoaXMuc2l6ZSA9PT0gU3Bpbm5lclR5cGUubGFyZ2UsXG4gICAgICAnbmUtc3Bpbm5lci10aGVtZS1saWdodCc6IHRoaXMudGhlbWUgPT09IFNwaW5uZXJUaGVtZVR5cGUubGlnaHQsXG4gICAgICAnbmUtc3Bpbm5lci10aGVtZS1yZWd1bGFyJzogdGhpcy50aGVtZSA9PT0gU3Bpbm5lclRoZW1lVHlwZS5yZWd1bGFyXG4gICAgfSl9XG4gICAgPlxuICAgICAgPGRpdiBjbGFzcz1cIm5lLW5pbnRleC1zcGlubmVyLXRyYWlsLWxlZnQgbmUtbmludGV4LXNwaW5uZXItZmlmdGhcIj5cbiAgICAgICAgJHt1bnNhZmVTVkcobGVmdCl9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJuZS1uaW50ZXgtc3Bpbm5lci10cmFpbC1sZWZ0IG5lLW5pbnRleC1zcGlubmVyLWZvcnRoXCI+XG4gICAgICAgICR7dW5zYWZlU1ZHKGxlZnQpfVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibmUtbmludGV4LXNwaW5uZXItdHJhaWwtbGVmdCBuZS1uaW50ZXgtc3Bpbm5lci10aGlyZFwiPlxuICAgICAgICAke3Vuc2FmZVNWRyhsZWZ0KX1cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm5lLW5pbnRleC1zcGlubmVyLXRyYWlsLWxlZnQgbmUtbmludGV4LXNwaW5uZXItc2Vjb25kXCI+XG4gICAgICAgICR7dW5zYWZlU1ZHKGxlZnQpfVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibmUtbmludGV4LXNwaW5uZXItbWlkZGxlXCI+XG4gICAgICAgICR7dW5zYWZlU1ZHKGNlbnRlckxlZnQpfSAke3Vuc2FmZVNWRyhjZW50ZXJSaWdodCl9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJuZS1uaW50ZXgtc3Bpbm5lci10cmFpbC1yaWdodCBuZS1uaW50ZXgtc3Bpbm5lci1zZWNvbmRcIj5cbiAgICAgICAgJHt1bnNhZmVTVkcocmlnaHQpfVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibmUtbmludGV4LXNwaW5uZXItdHJhaWwtcmlnaHQgbmUtbmludGV4LXNwaW5uZXItdGhpcmRcIj5cbiAgICAgICAgJHt1bnNhZmVTVkcocmlnaHQpfVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibmUtbmludGV4LXNwaW5uZXItdHJhaWwtcmlnaHQgbmUtbmludGV4LXNwaW5uZXItZm9ydGhcIj5cbiAgICAgICAgJHt1bnNhZmVTVkcocmlnaHQpfVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibmUtbmludGV4LXNwaW5uZXItdHJhaWwtcmlnaHQgbmUtbmludGV4LXNwaW5uZXItZmlmdGhcIj5cbiAgICAgICAgJHt1bnNhZmVTVkcocmlnaHQpfVxuICAgICAgPC9kaXY+XG4gICAgICAke3RoaXMuc3RhdHVzID8gaHRtbGAgPHAgY2xhc3M9XCJuZS1zcGlubmVyLXN0YXR1c1wiIHJvbGU9XCJzdGF0dXNcIj4ke3RoaXMuc3RhdHVzfTwvcD4gYCA6IGh0bWxgXG4gICAgICAgICAgICA8cCBjbGFzcz1cIm5lLXNwaW5uZXItc3RhdHVzIHZpc3VhbGx5LWhpZGRlblwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgICAgJHt0aGlzLmRlZmF1bHRTdGF0dXN9XG4gICAgICAgICAgICA8L3A+XG4gICAgICAgICAgYH1cbiAgICA8L2Rpdj5gO1xuICAgIGlmICghdGhpcy53cmFwcGVkKSB7XG4gICAgICByZXR1cm4gaHRtbGAke3NwaW5uZXJ9YDtcbiAgICB9XG4gICAgcmV0dXJuIGh0bWxgPGRpdiBjbGFzcz1cIm5lLXNwaW5uZXItY29udGFpbmVyIG5lLXNwaW5uZXItY29udGFpbmVyLWNlbnRlclwiPlxuICAgICAgJHtzcGlubmVyfVxuICAgIDwvZGl2PmA7XG4gIH1cbn07XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZyxcbiAgYXR0cmlidXRlOiAnZGVmYXVsdC1zdGF0dXMnXG59KV0sIE5lU3Bpbm5lci5wcm90b3R5cGUsIFwiZGVmYXVsdFN0YXR1c1wiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBTdHJpbmcsXG4gIGF0dHJpYnV0ZTogJ3NpemUnLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIE5lU3Bpbm5lci5wcm90b3R5cGUsIFwic2l6ZVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBTdHJpbmcsXG4gIGF0dHJpYnV0ZTogJ3N0YXR1cycsXG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVTcGlubmVyLnByb3RvdHlwZSwgXCJzdGF0dXNcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogU3RyaW5nLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIE5lU3Bpbm5lci5wcm90b3R5cGUsIFwidGhlbWVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogQm9vbGVhbixcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZVNwaW5uZXIucHJvdG90eXBlLCBcIndyYXBwZWRcIiwgdm9pZCAwKTtcbk5lU3Bpbm5lciA9IF9fZGVjb3JhdGUoW2N1c3RvbUVsZW1lbnQoJ25lLXNwaW5uZXInKV0sIE5lU3Bpbm5lcik7XG5cbmV4cG9ydCB7IE5lU3Bpbm5lciBhcyBOLCBTcGlubmVyVHlwZSBhcyBTLCBTcGlubmVyVGhlbWVUeXBlIGFzIGEgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNwaW5uZXItYWE2YzU5YzkuanMubWFwXG4iLCJpbXBvcnQgeyBjIGFzIGNvbW1vblN0eWxlcywgXyBhcyBfX2RlY29yYXRlIH0gZnJvbSAnLi9iYXNlLnN0eWxlcy0xMWQzOTE4MS5qcyc7XG5pbXBvcnQgeyBjc3MsIExpdEVsZW1lbnQsIGh0bWwgfSBmcm9tICdsaXQnO1xuaW1wb3J0IHsgcHJvcGVydHksIGN1c3RvbUVsZW1lbnQgfSBmcm9tICdsaXQvZGVjb3JhdG9ycy5qcyc7XG5pbXBvcnQgeyBTY29wZWRFbGVtZW50c01peGluIH0gZnJvbSAnQG9wZW4td2Mvc2NvcGVkLWVsZW1lbnRzJztcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmNvbnN0IHRva2VucyA9IGNzc2BcbiAgKiB7XG4gIC0tbmUtb3ZlcmxheS1jb2xvcjogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktOTAtMzAsICMxNjE3MTgzMCk7XG59XG5gO1xuXG5jb25zdCBzdHlsZSA9IGNzc2BcbiAgLm92ZXJsYXkge1xuICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmUtb3ZlcmxheS1jb2xvcik7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIHotaW5kZXg6IDk5OTk7XG4gIH1cbmA7XG5jb25zdCBzdHlsZXMgPSBbdG9rZW5zLCBzdHlsZSwgY29tbW9uU3R5bGVzXTtcblxuLyoqXG4gKiBAdGFnIG5lLW92ZXJsYXlcbiAqIEB0YWduYW1lIG5lLW92ZXJsYXlcbiAqXG4gKiBAc2xvdCBkZWZhdWx0IFRoaXMgaXMgd2hlcmUgdGhlIGNvbnRlbnRzIG9mIHRoZSBvdmVybGF5IHdpbGwgYmUgcmVuZGVyZWRcbiAqXG4gKi9cbmxldCBOZU92ZXJsYXkgPSBjbGFzcyBOZU92ZXJsYXkgZXh0ZW5kcyBTY29wZWRFbGVtZW50c01peGluKExpdEVsZW1lbnQpIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHNob3dpbmcgYW5kIGhpZGluZyBvZiB0aGUgb3ZlcmxheVxuICAgICAqL1xuICAgIHRoaXMuc2hvdyA9IHRydWU7XG4gIH1cbiAgc3RhdGljIGdldCBzdHlsZXMoKSB7XG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2hvdyA/IGh0bWxgXG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJvdmVybGF5XCI+XG4gICAgICAgICAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgIDogaHRtbGBgO1xuICB9XG59O1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBCb29sZWFuLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIE5lT3ZlcmxheS5wcm90b3R5cGUsIFwic2hvd1wiLCB2b2lkIDApO1xuTmVPdmVybGF5ID0gX19kZWNvcmF0ZShbY3VzdG9tRWxlbWVudCgnbmUtb3ZlcmxheScpXSwgTmVPdmVybGF5KTtcblxuZXhwb3J0IHsgTmVPdmVybGF5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vdmVybGF5LmpzLm1hcFxuIiwiaW1wb3J0IHsgYyBhcyBjb21tb25TdHlsZXMsIF8gYXMgX19kZWNvcmF0ZSB9IGZyb20gJy4vYmFzZS5zdHlsZXMtMTFkMzkxODEuanMnO1xuaW1wb3J0IHsgTGl0RWxlbWVudCwgaHRtbCB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBwcm9wZXJ0eSwgc3RhdGUsIGN1c3RvbUVsZW1lbnQgfSBmcm9tICdsaXQvZGVjb3JhdG9ycy5qcyc7XG5pbXBvcnQgeyBTY29wZWRFbGVtZW50c01peGluIH0gZnJvbSAnQG9wZW4td2Mvc2NvcGVkLWVsZW1lbnRzJztcbmltcG9ydCB7IFMgYXMgU3Bpbm5lclR5cGUsIGEgYXMgU3Bpbm5lclRoZW1lVHlwZSwgTiBhcyBOZVNwaW5uZXIgfSBmcm9tICcuL3NwaW5uZXItYWE2YzU5YzkuanMnO1xuaW1wb3J0IHsgTmVPdmVybGF5IH0gZnJvbSAnLi9vdmVybGF5LmpzJztcbmltcG9ydCAnbGl0L2RpcmVjdGl2ZXMvdW5zYWZlLXN2Zy5qcyc7XG5pbXBvcnQgJ2xpdC9kaXJlY3RpdmVzL2NsYXNzLW1hcC5qcyc7XG5cbmNvbnN0IHN0eWxlcyA9IFtjb21tb25TdHlsZXNdO1xuXG4vKipcbiAqIEB0YWcgbmUtc3RhdHVzLW92ZXJsYXlcbiAqIEB0YWduYW1lIG5lLXN0YXR1cy1vdmVybGF5XG4gKlxuICovXG5sZXQgTmVTdGF0dXNPdmVybGF5ID0gY2xhc3MgTmVTdGF0dXNPdmVybGF5IGV4dGVuZHMgU2NvcGVkRWxlbWVudHNNaXhpbihMaXRFbGVtZW50KSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgLy8gUHJvcGVydGllc1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgc2hvd2luZyBhbmQgaGlkaW5nIG9mIHRoZSBvdmVybGF5XG4gICAgICovXG4gICAgdGhpcy5zaG93ID0gdHJ1ZTtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIGRlbGF5IGJlZm9yZSB0aGUgb3ZlcmxheSBpcyByZW5kZXJlZFxuICAgICAqL1xuICAgIHRoaXMuZGVsYXkgPSAwO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgc2l6ZSBvZiB0aGUgbG9hZGluZyBpbmRpY2F0b3JcbiAgICAgKi9cbiAgICB0aGlzLnNpemUgPSBTcGlubmVyVHlwZS5tZWRpdW07XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSB0aGVtZSBvZiB0aGUgbG9hZGluZyBpY29uXG4gICAgICovXG4gICAgdGhpcy50aGVtZSA9IFNwaW5uZXJUaGVtZVR5cGUucmVndWxhcjtcbiAgICB0aGlzLl9zaG93U2V0VGltZW91dCA9IDA7XG4gICAgdGhpcy5faXNTaG93T3ZlckxheSA9IGZhbHNlO1xuICB9XG4gIC8vIFN0eWxlc1xuICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9XG4gIHN0YXRpYyBnZXQgc2NvcGVkRWxlbWVudHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICduZS1vdmVybGF5JzogTmVPdmVybGF5LFxuICAgICAgJ25lLXNwaW5uZXInOiBOZVNwaW5uZXJcbiAgICB9O1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gaHRtbGA8bmUtb3ZlcmxheSAuc2hvdz0ke3RoaXMuX2lzU2hvd092ZXJMYXl9PlxuICAgICAgPG5lLXNwaW5uZXJcbiAgICAgICAgLnN0YXR1cz0ke3RoaXMuc3RhdHVzfVxuICAgICAgICB0aGVtZT0ke3RoaXMudGhlbWV9XG4gICAgICAgIC5zaXplPSR7dGhpcy5zaXplfVxuICAgICAgPjwvbmUtc3Bpbm5lcj5cbiAgICA8L25lLW92ZXJsYXk+YDtcbiAgfVxuICB1cGRhdGVkKGNoYW5nZWRQcm9wcykge1xuICAgIGlmIChjaGFuZ2VkUHJvcHMuaGFzKCdzaG93JykpIHtcbiAgICAgIGlmICh0aGlzLl9zaG93U2V0VGltZW91dCkge1xuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMuX3Nob3dTZXRUaW1lb3V0KTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnNob3cpIHtcbiAgICAgICAgaWYgKHRoaXMuZGVsYXkgPiAwKSB7XG4gICAgICAgICAgdGhpcy5fc2hvd1NldFRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9pc1Nob3dPdmVyTGF5ID0gdHJ1ZTtcbiAgICAgICAgICB9LCB0aGlzLmRlbGF5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9pc1Nob3dPdmVyTGF5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faXNTaG93T3ZlckxheSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogQm9vbGVhbixcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZVN0YXR1c092ZXJsYXkucHJvdG90eXBlLCBcInNob3dcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogTnVtYmVyLFxuICBhdHRyaWJ1dGU6ICdzdGF0dXMtZGVsYXknXG59KV0sIE5lU3RhdHVzT3ZlcmxheS5wcm90b3R5cGUsIFwiZGVsYXlcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogU3RyaW5nLFxuICBhdHRyaWJ1dGU6ICdzaXplJ1xufSldLCBOZVN0YXR1c092ZXJsYXkucHJvdG90eXBlLCBcInNpemVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogU3RyaW5nLFxuICBhdHRyaWJ1dGU6ICdzdGF0dXMnXG59KV0sIE5lU3RhdHVzT3ZlcmxheS5wcm90b3R5cGUsIFwic3RhdHVzXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZ1xufSldLCBOZVN0YXR1c092ZXJsYXkucHJvdG90eXBlLCBcInRoZW1lXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtzdGF0ZSgpXSwgTmVTdGF0dXNPdmVybGF5LnByb3RvdHlwZSwgXCJfc2hvd1NldFRpbWVvdXRcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3N0YXRlKCldLCBOZVN0YXR1c092ZXJsYXkucHJvdG90eXBlLCBcIl9pc1Nob3dPdmVyTGF5XCIsIHZvaWQgMCk7XG5OZVN0YXR1c092ZXJsYXkgPSBfX2RlY29yYXRlKFtjdXN0b21FbGVtZW50KCduZS1zdGF0dXMtb3ZlcmxheScpXSwgTmVTdGF0dXNPdmVybGF5KTtcblxuZXhwb3J0IHsgTmVTdGF0dXNPdmVybGF5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGF0dXMtb3ZlcmxheS5qcy5tYXBcbiIsImltcG9ydCB7IGMgYXMgY29tbW9uU3R5bGVzLCBfIGFzIF9fZGVjb3JhdGUgfSBmcm9tICcuL2Jhc2Uuc3R5bGVzLTExZDM5MTgxLmpzJztcbmltcG9ydCB7IGNzcywgTGl0RWxlbWVudCB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBwcm9wZXJ0eSwgY3VzdG9tRWxlbWVudCB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IHIgYXMgcmVuZGVySWNvbiB9IGZyb20gJy4vaWNvbi5iYXNlLTdhOTE5ZGIyLmpzJztcbmltcG9ydCAnbGl0L2RpcmVjdGl2ZXMvc3R5bGUtbWFwLmpzJztcbmltcG9ydCAnbGl0L2RpcmVjdGl2ZXMvdW50aWwuanMnO1xuXG5jb25zdCBiYXNlID0gY3NzYFxuICA6aG9zdCB7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBjb2xvcjogaW5oZXJpdDtcbiAgfVxuYDtcbmNvbnN0IHN0eWxlcyA9IFtjb21tb25TdHlsZXMsIGJhc2VdO1xuXG4vKipcbiAqIEB0YWcgbmUtaWNvblxuICogQHRhZ25hbWUgbmUtaWNvblxuICpcbiAqIEBkZXNjcmlwdGlvbiBDb250cm9sIHRoYXQgcmVuZGVycyBhbiBTVkcgaWNvbiwgdGhpcyB3aWxsIHR5cGljYWxseSBiZSB1c2VkIGluc2lkZSBvZiBvdGhlciBlbGVtZW50cyBzdWNoIGFzIGEgdG9vbGJhciBidXR0b24uXG4gKlxuICogQGNzc3Byb3BlcnR5IHtjb2xvcn0gW2NvbG9yXSBJY29uIGNvbG9yIGluaGV0ZWQgZnJvbSB0aGUgcGFyZW50IGNvbG9yXG4gKi9cbmxldCBOZUljb24gPSBjbGFzcyBOZUljb24gZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLmZpeGVkU2l6ZSA9ICcnO1xuICB9XG4gIHN0YXRpYyBnZXQgc3R5bGVzKCkge1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiByZW5kZXJJY29uKHtcbiAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgIGZpeGVkU2l6ZTogdGhpcy5maXhlZFNpemVcbiAgICB9KTtcbiAgfVxufTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgYXR0cmlidXRlOiAndHlwZScsXG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVJY29uLnByb3RvdHlwZSwgXCJ0eXBlXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZ1xufSldLCBOZUljb24ucHJvdG90eXBlLCBcImZpeGVkU2l6ZVwiLCB2b2lkIDApO1xuTmVJY29uID0gX19kZWNvcmF0ZShbY3VzdG9tRWxlbWVudCgnbmUtaWNvbicpXSwgTmVJY29uKTtcblxuZXhwb3J0IHsgTmVJY29uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pY29uLmpzLm1hcFxuIiwiaW1wb3J0IHsgYyBhcyBjb21tb25TdHlsZXMsIF8gYXMgX19kZWNvcmF0ZSB9IGZyb20gJy4vYmFzZS5zdHlsZXMtMTFkMzkxODEuanMnO1xuaW1wb3J0IHsgU2NvcGVkRWxlbWVudHNNaXhpbiB9IGZyb20gJ0BvcGVuLXdjL3Njb3BlZC1lbGVtZW50cyc7XG5pbXBvcnQgeyBjc3MsIExpdEVsZW1lbnQsIGh0bWwsIG5vdGhpbmcgfSBmcm9tICdsaXQnO1xuaW1wb3J0IHsgcHJvcGVydHksIGN1c3RvbUVsZW1lbnQgfSBmcm9tICdsaXQvZGVjb3JhdG9ycy5qcyc7XG5pbXBvcnQgeyBjbGFzc01hcCB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL2NsYXNzLW1hcC5qcyc7XG5pbXBvcnQgeyBmIGFzIGZpcmUgfSBmcm9tICcuL2V2ZW50cy0xMTczZjU2Mi5qcyc7XG5pbXBvcnQgeyByIGFzIHJlbmRlckljb24gfSBmcm9tICcuL2ljb24uYmFzZS03YTkxOWRiMi5qcyc7XG5pbXBvcnQgeyB0IGFzIHRva2VucyQxIH0gZnJvbSAnLi9idXR0b24udG9rZW5zLWU3OWM4YmJmLmpzJztcbmltcG9ydCAnbGl0L2RpcmVjdGl2ZXMvc3R5bGUtbWFwLmpzJztcbmltcG9ydCAnbGl0L2RpcmVjdGl2ZXMvdW50aWwuanMnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuY29uc3QgdG9rZW5zID0gY3NzYFxuICAqIHtcbiAgLS1uZS1pY29uLWJ1dHRvbi1pY29uLXNpemU6IHZhcigtLW5lLXJlZi1zaXppbmctMDQsIDFlbSk7XG4gIC0tbmUtaWNvbi1idXR0b24tY29sb3ItaWNvbi1kYXJrLW9uLWxpZ2h0LWJnLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTkwLCAjMTYxNzE4KTtcbiAgLS1uZS1pY29uLWJ1dHRvbi1jb2xvci1pY29uLWRhcmstb24tbGlnaHQtYmctZGlzYWJsZWQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTUwLCAjNkQ3Mzc5KTtcbiAgLS1uZS1pY29uLWJ1dHRvbi1jb2xvci1pY29uLWxpZ2h0LW9uLWRhcmstYmctZGVmYXVsdDogdmFyKC0tbmUtcmVmLWNvbG9yLXdoaXRlLCAjZmZmZmZmKTtcbiAgLS1uZS1pY29uLWJ1dHRvbi1jb2xvci1pY29uLWxpZ2h0LW9uLWRhcmstYmctZGlzYWJsZWQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTMwLCAjQTdBQkFGKTtcbiAgLS1uZS1pY29uLWJ1dHRvbi1jb2xvci1pY29uLWxpZ2h0LW9uLWRhcmstYmctaG92ZXI6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTA1LCAjRjBGN0ZGKTtcbiAgLS1uZS1pY29uLWJ1dHRvbi1jb2xvci1pY29uLWxpZ2h0LW9uLWRhcmstYmctZm9jdXNlZDogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtMDUsICNGMEY3RkYpO1xuICAtLW5lLWljb24tYnV0dG9uLWNvbG9yLWJhY2tncm91bmQtZGFyay1vbi1saWdodC1iZy1ob3ZlcjogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtMDUsICNGMEY3RkYpO1xuICAtLW5lLWljb24tYnV0dG9uLXBhZGRpbmc6IHZhcigtLW5lLXJlZi1zcGFjaW5nLXh4LXNtYWxsLCAwLjI1ZW0pO1xufVxuYDtcblxuY29uc3QgYmFzZUljb25CdXR0b24gPSBjc3NgXG4gIC5idG4ge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1mbG93OiByb3cgbm93cmFwO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgYWxpZ24tY29udGVudDogY2VudGVyO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgbWFyZ2luOiAwO1xuICAgIHBhZGRpbmc6IHZhcigtLW5lLWljb24tYnV0dG9uLXBhZGRpbmcpO1xuICAgIGZvbnQtc2l6ZTogMWVtO1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1uZS1idXR0b24tYm9yZGVyLXJhZGl1cyk7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gIH1cblxuICAuYnRuICoge1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgfVxuXG4gIC5idG46ZGlzYWJsZWQgKiB7XG4gICAgY3Vyc29yOiBkZWZhdWx0O1xuICB9XG5cbiAgLmJ0bi1kYXJrIHtcbiAgICBjb2xvcjogdmFyKC0tbmUtaWNvbi1idXR0b24tY29sb3ItaWNvbi1kYXJrLW9uLWxpZ2h0LWJnLWRlZmF1bHQpO1xuICB9XG5cbiAgLmJ0bi1kYXJrOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoXG4gICAgICAtLW5lLWljb24tYnV0dG9uLWNvbG9yLWJhY2tncm91bmQtZGFyay1vbi1saWdodC1iZy1ob3ZlclxuICAgICk7XG4gIH1cblxuICAuYnRuLWRhcms6Zm9jdXMtdmlzaWJsZSB7XG4gICAgb3V0bGluZTogdmFyKC0tbmUtYnV0dG9uLWJvcmRlci13aWR0aC1mb2N1cykgc29saWRcbiAgICAgIHZhcigtLW5lLWJ1dHRvbi1jb2xvci1ib3JkZXItZm9jdXMpO1xuICB9XG5cbiAgLmJ0bi1kYXJrOmRpc2FibGVkLFxuICAuYnRuLWRhcms6aG92ZXI6ZGlzYWJsZWQge1xuICAgIGNvbG9yOiB2YXIoLS1uZS1pY29uLWJ1dHRvbi1jb2xvci1pY29uLWRhcmstb24tbGlnaHQtYmctZGlzYWJsZWQpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIGN1cnNvcjogZGVmYXVsdDtcbiAgfVxuXG4gIC5idG4tbGlnaHQge1xuICAgIGNvbG9yOiB2YXIoLS1uZS1pY29uLWJ1dHRvbi1jb2xvci1pY29uLWxpZ2h0LW9uLWRhcmstYmctZGVmYXVsdCk7XG4gIH1cblxuICAuYnRuLWxpZ2h0OmhvdmVyIHtcbiAgICBjb2xvcjogdmFyKC0tbmUtaWNvbi1idXR0b24tY29sb3ItaWNvbi1saWdodC1vbi1kYXJrLWJnLWhvdmVyKTtcbiAgfVxuXG4gIC5idG4tbGlnaHQ6Zm9jdXMtdmlzaWJsZSB7XG4gICAgY29sb3I6IHZhcigtLW5lLWljb24tYnV0dG9uLWNvbG9yLWljb24tbGlnaHQtb24tZGFyay1iZy1mb2N1c2VkKTtcbiAgICBvdXRsaW5lOiB2YXIoLS1uZS1idXR0b24tYm9yZGVyLXdpZHRoLWZvY3VzKSBzb2xpZFxuICAgICAgdmFyKC0tbmUtYnV0dG9uLWNvbG9yLWJvcmRlci1mb2N1cyk7XG4gIH1cblxuICAuYnRuLWxpZ2h0OmRpc2FibGVkLFxuICAuYnRuLWxpZ2h0OmhvdmVyOmRpc2FibGVkIHtcbiAgICBjb2xvcjogdmFyKC0tbmUtaWNvbi1idXR0b24tY29sb3ItaWNvbi1saWdodC1vbi1kYXJrLWJnLWRpc2FibGVkKTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICBjdXJzb3I6IGRlZmF1bHQ7XG4gIH1cblxuICAuaWNvbiB7XG4gICAgaGVpZ2h0OiB2YXIoLS1uZS1pY29uLWJ1dHRvbi1pY29uLXNpemUpO1xuICAgIHdpZHRoOiB2YXIoLS1uZS1pY29uLWJ1dHRvbi1pY29uLXNpemUpO1xuICB9XG5gO1xuY29uc3Qgc3R5bGVzID0gW3Rva2VucyQxLCB0b2tlbnMsIGJhc2VJY29uQnV0dG9uLCBjb21tb25TdHlsZXNdO1xuXG5jb25zdCBpY29uQnV0dG9uVmFyaWFudHNBcnJheSA9IFsnZGFyaycsICdsaWdodCddO1xuLyoqXG4gKiBAdGFnIG5lLWljb24tYnV0dG9uXG4gKiBAdGFnbmFtZSBuZS1pY29uLWJ1dHRvblxuICpcbiAqIEBkZXNjcmlwdGlvbiBDb250cm9sIHRoYXQgcmVuZGVycyBhIGJ1dHRvbiBjb250YWluaW5nIGFuIFNWRyBpY29uLlxuICpcbiAqIEBldmVudCBuZS1jbGljayBSYWlzZWQgd2hlbiB0aGUgaWNvbiBidXR0b24gaXMgY2xpY2tlZC5cbiAqL1xubGV0IE5lSWNvbkJ1dHRvbiA9IGNsYXNzIE5lSWNvbkJ1dHRvbiBleHRlbmRzIFNjb3BlZEVsZW1lbnRzTWl4aW4oTGl0RWxlbWVudCkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIC8qKiBTcGVjaWZpZXMgdGhhdCB0aGUgaWNvbiBidXR0b24gc2hvdWxkIGJlIGRpc2FibGVkICovXG4gICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIC8qKiBTcGVjaWZpZXMgdGhlIHRleHQgdGhhdCB3aWxsIGJlIHJlYWQgYnkgdGhlIHNjcmVlbiByZWFkZXIgKi9cbiAgICB0aGlzLmFyaWFMYWJlbCA9ICcnO1xuICAgIC8qKiBTcGVjaWZpZXMgdGhlIHZhcmlhbnQgb2YgdGhlIGljb24gYnV0dG9uIHRvIGRpc3BsYXkuIEN1cnJlbnRseSAnZGFyaycgKGZvciBsaWdodCBiYWNrZ3JvdW5kcykgYW5kICdsaWdodCcgKGZvciBkYXJrIGJhY2tncm91bmRzKSBhcmUgc3VwcG9ydGVkICovXG4gICAgdGhpcy52YXJpYW50ID0gJ2RhcmsnO1xuICAgIHRoaXMuX29uQ2xpY2sgPSAoKSA9PiB7XG4gICAgICBmaXJlKHRoaXMsICduZS1jbGljaycsIHtcbiAgICAgICAgY29tcG9zZWQ6IHRydWUsXG4gICAgICAgIGJ1YmJsZXM6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cbiAgc3RhdGljIGdldCBzdHlsZXMoKSB7XG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIGh0bWxgPGJ1dHRvblxuICAgICAgaWQ9JHt0aGlzLmlkfVxuICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICA/ZGlzYWJsZWQ9JHt0aGlzLmRpc2FibGVkfVxuICAgICAgQGNsaWNrPVwiJHt0aGlzLl9vbkNsaWNrfVwiXG4gICAgICBhcmlhLWxhYmVsPSR7dGhpcy5hcmlhTGFiZWwgfHwgbm90aGluZ31cbiAgICAgIGNsYXNzPSR7Y2xhc3NNYXAoe1xuICAgICAgYnRuOiB0cnVlLFxuICAgICAgJ2J0bi1kYXJrJzogdGhpcy52YXJpYW50ID09PSAnZGFyaycsXG4gICAgICAnYnRuLWxpZ2h0JzogdGhpcy52YXJpYW50ID09PSAnbGlnaHQnXG4gICAgfSl9XG4gICAgPlxuICAgICAgPHNwYW4gY2xhc3M9XCJpY29uXCI+JHtyZW5kZXJJY29uKHtcbiAgICAgIHR5cGU6IHRoaXMuaWNvblR5cGVcbiAgICB9KX08L3NwYW4+XG4gICAgPC9idXR0b24+YDtcbiAgfVxufTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogQm9vbGVhbixcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZUljb25CdXR0b24ucHJvdG90eXBlLCBcImRpc2FibGVkXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIGF0dHJpYnV0ZTogJ25lLWFyaWEtbGFiZWwnLFxuICB0eXBlOiBTdHJpbmcsXG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVJY29uQnV0dG9uLnByb3RvdHlwZSwgXCJhcmlhTGFiZWxcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogU3RyaW5nLFxuICBhdHRyaWJ1dGU6ICdpY29uJyxcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZUljb25CdXR0b24ucHJvdG90eXBlLCBcImljb25UeXBlXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVJY29uQnV0dG9uLnByb3RvdHlwZSwgXCJ2YXJpYW50XCIsIHZvaWQgMCk7XG5OZUljb25CdXR0b24gPSBfX2RlY29yYXRlKFtjdXN0b21FbGVtZW50KCduZS1pY29uLWJ1dHRvbicpXSwgTmVJY29uQnV0dG9uKTtcblxuZXhwb3J0IHsgTmVJY29uQnV0dG9uLCBpY29uQnV0dG9uVmFyaWFudHNBcnJheSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWNvbi1idXR0b24uanMubWFwXG4iLCJjb25zdCBJY29ucyA9IHtcbiAgX2V4cG9ydDogJ19leHBvcnQnLFxuICBfaW1wb3J0OiAnX2ltcG9ydCcsXG4gIGFkZDogJ2FkZCcsXG4gIGFyY2hpdmU6ICdhcmNoaXZlJyxcbiAgYXJyb3dEb3duOiAnYXJyb3dEb3duJyxcbiAgYXJyb3dVcDogJ2Fycm93VXAnLFxuICBjYXJldERvd246ICdjYXJldERvd24nLFxuICBjYXJldExlZnQ6ICdjYXJldExlZnQnLFxuICBjYXJldFJpZ2h0OiAnY2FyZXRSaWdodCcsXG4gIGNhcmV0VXA6ICdjYXJldFVwJyxcbiAgY2hlY2s6ICdjaGVjaycsXG4gIGNoZXZyb25Eb3duOiAnY2hldnJvbkRvd24nLFxuICBjaGV2cm9uTGVmdDogJ2NoZXZyb25MZWZ0JyxcbiAgY2hldnJvbkxpZ2h0RG93bjogJ2NoZXZyb25MaWdodERvd24nLFxuICBjaGV2cm9uTGlnaHRMZWZ0OiAnY2hldnJvbkxpZ2h0TGVmdCcsXG4gIGNoZXZyb25MaWdodFJpZ2h0OiAnY2hldnJvbkxpZ2h0UmlnaHQnLFxuICBjaGV2cm9uTGlnaHRVcDogJ2NoZXZyb25MaWdodFVwJyxcbiAgY2hldnJvblJpZ2h0OiAnY2hldnJvblJpZ2h0JyxcbiAgY2hldnJvblVwOiAnY2hldnJvblVwJyxcbiAgY2xvc2VEZWZhdWx0OiAnY2xvc2VEZWZhdWx0JyxcbiAgZGFuZ2VyRXhjbGFtYXRpb246ICdkYW5nZXJFeGNsYW1hdGlvbicsXG4gIGRyb3B6b25lOiAnZHJvcHpvbmUnLFxuICBmZWVkYmFjazogJ2ZlZWRiYWNrJyxcbiAgZmlsZTogJ2ZpbGUnLFxuICBoaWRlOiAnaGlkZScsXG4gIGluZm86ICdpbmZvJyxcbiAgbWF4aW1pc2U6ICdtYXhpbWlzZScsXG4gIG1lYXRiYWxsczogJ21lYXRiYWxscycsXG4gIG1pbnVzOiAnbWludXMnLFxuICBvcGVuSW5OZXdXaW5kb3c6ICdvcGVuSW5OZXdXaW5kb3cnLFxuICBwcm9jZXNzOiAncHJvY2VzcycsXG4gIHByb2Nlc3NNb2RlbDogJ3Byb2Nlc3NNb2RlbCcsXG4gIHB1Ymxpc2g6ICdwdWJsaXNoJyxcbiAgcmVmcmVzaDogJ3JlZnJlc2gnLFxuICBzYXZlOiAnc2F2ZScsXG4gIHNjaGVkdWxlOiAnc2NoZWR1bGUnLFxuICBzZWFyY2g6ICdzZWFyY2gnLFxuICBzaG93OiAnc2hvdycsXG4gIHN1Y2Nlc3M6ICdzdWNjZXNzJyxcbiAgc3VtbWFyeTogJ3N1bW1hcnknLFxuICB0aWNrOiAndGljaycsXG4gIHRyYXNoOiAndHJhc2gnLFxuICB1c2VyOiAndXNlcicsXG4gIHVzZXJzOiAndXNlcnMnLFxuICB2ZXJzaW9uSGlzdG9yeTogJ3ZlcnNpb25IaXN0b3J5JyxcbiAgd2FybmluZ0V4Y2xhbWF0aW9uOiAnd2FybmluZ0V4Y2xhbWF0aW9uJ1xufTtcblxuZXhwb3J0IHsgSWNvbnMgYXMgSSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWNvblR5cGUtODMyNmVkZGIuanMubWFwXG4iLCJpbXBvcnQgeyBjIGFzIGNvbW1vblN0eWxlcywgXyBhcyBfX2RlY29yYXRlIH0gZnJvbSAnLi9iYXNlLnN0eWxlcy0xMWQzOTE4MS5qcyc7XG5pbXBvcnQgeyBTY29wZWRFbGVtZW50c01peGluIH0gZnJvbSAnQG9wZW4td2Mvc2NvcGVkLWVsZW1lbnRzJztcbmltcG9ydCB7IGNzcywgTGl0RWxlbWVudCwgaHRtbCB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBwcm9wZXJ0eSwgY3VzdG9tRWxlbWVudCB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IGNsYXNzTWFwIH0gZnJvbSAnbGl0L2RpcmVjdGl2ZXMvY2xhc3MtbWFwLmpzJztcbmltcG9ydCB7IE5lSWNvbiB9IGZyb20gJy4vaWNvbi5qcyc7XG5pbXBvcnQgeyBmIGFzIGZpcmUgfSBmcm9tICcuL2V2ZW50cy0xMTczZjU2Mi5qcyc7XG5pbXBvcnQgeyBOZU92ZXJsYXkgfSBmcm9tICcuL292ZXJsYXkuanMnO1xuaW1wb3J0IHsgTmVJY29uQnV0dG9uIH0gZnJvbSAnLi9pY29uLWJ1dHRvbi5qcyc7XG5pbXBvcnQgeyBJIGFzIEljb25zIH0gZnJvbSAnLi9pY29uVHlwZS04MzI2ZWRkYi5qcyc7XG5pbXBvcnQgeyBOZUJ1dHRvblNldCB9IGZyb20gJy4vYnV0dG9uLXNldC5qcyc7XG5pbXBvcnQgJy4vaWNvbi5iYXNlLTdhOTE5ZGIyLmpzJztcbmltcG9ydCAnbGl0L2RpcmVjdGl2ZXMvc3R5bGUtbWFwLmpzJztcbmltcG9ydCAnbGl0L2RpcmVjdGl2ZXMvdW50aWwuanMnO1xuaW1wb3J0ICcuL2J1dHRvbi50b2tlbnMtZTc5YzhiYmYuanMnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuY29uc3QgdG9rZW5zID0gY3NzYFxuICAqIHtcbiAgLS1uZS1tb2RhbC1zaXppbmctd2lkdGgtc21hbGw6IHZhcigtLW5lLXJlZi1zaXppbmctMTgsIDMyZW0pO1xuICAtLW5lLW1vZGFsLXNpemluZy13aWR0aC1tZWRpdW06IHZhcigtLW5lLXJlZi1zaXppbmctMjEsIDU2ZW0pO1xuICAtLW5lLW1vZGFsLXNpemluZy13aWR0aC1sYXJnZTogdmFyKC0tbmUtcmVmLXNpemluZy0yMiwgNjRlbSk7XG4gIC0tbmUtbW9kYWwtc2l6aW5nLWhlaWdodC1zbWFsbDogdmFyKC0tbmUtcmVmLXNpemluZy0xNiwgMTZlbSk7XG4gIC0tbmUtbW9kYWwtc2l6aW5nLWhlaWdodC1tZWRpdW06IHZhcigtLW5lLXJlZi1zaXppbmctMTcsIDI0ZW0pO1xuICAtLW5lLW1vZGFsLXNpemluZy1oZWlnaHQtbGFyZ2U6IHZhcigtLW5lLXJlZi1zaXppbmctMTksIDQwZW0pO1xuICAtLW5lLW1vZGFsLXBhZGRpbmctaG9yaXpvbnRhbDogdmFyKC0tbmUtcmVmLXNwYWNpbmctbWVkaXVtLCAxZW0pO1xuICAtLW5lLW1vZGFsLWhlYWRlci1mb250LWZhbWlseTogdmFyKC0tbmUtcmVmLWZvbnQtZmFtaWx5LW1vbnRzZXJyYXQsIE1vbnRzZXJyYXQpO1xuICAtLW5lLW1vZGFsLWhlYWRlci1wYWRkaW5nLXZlcnRpY2FsOiB2YXIoLS1uZS1yZWYtc3BhY2luZy14LXNtYWxsLCAwLjVlbSk7XG4gIC0tbmUtbW9kYWwtaGVhZGVyLWdhcDogdmFyKC0tbmUtcmVmLXNwYWNpbmcteC1zbWFsbCwgMC41ZW0pO1xuICAtLW5lLW1vZGFsLWhlYWRlci10aXRsZTogdmFyKC0tbmUtcmVmLWNvbG9yLW5pbnRleC1vcmFuZ2UsICNGNTY5MDApO1xuICAtLW5lLW1vZGFsLWhlYWRlci1mb250LXNpemU6IHZhcigtLW5lLXJlZi1mb250LXNpemUtMDgsIDEuNWVtKTtcbiAgLS1uZS1tb2RhbC1oZWFkZXItZm9udC13ZWlnaHQ6IHZhcigtLW5lLXJlZi1mb250LXdlaWdodC1zZW1pLWJvbGQsIFNlbWlCb2xkKTtcbiAgLS1uZS1tb2RhbC1jb250ZW50LXBhZGRpbmc6IHZhcigtLW5lLXJlZi1zcGFjaW5nLW1lZGl1bSwgMWVtKTtcbiAgLS1uZS1tb2RhbC1jb250ZW50LWdhcC12ZXJ0aWNhbDogdmFyKC0tbmUtcmVmLXNwYWNpbmctbWVkaXVtLCAxZW0pO1xuICAtLW5lLW1vZGFsLWJvcmRlci1yYWRpdXM6IHZhcigtLW5lLXJlZi1ib3JkZXItcmFkaXVzLW1lZGl1bSwgLjI1ZW0pO1xuICAtLW5lLW1vZGFsLWNvbG9yLWJvcmRlcjogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktMTAsICNFMkUzRTQpO1xuICAtLW5lLW1vZGFsLWJvcmRlci13aWR0aDogdmFyKC0tbmUtcmVmLWJvcmRlci13aWR0aC1zbWFsbCwgMXB4KTtcbiAgLS1uZS1tb2RhbC1nYXAtdmVydGljYWw6IHZhcigtLW5lLXJlZi1zcGFjaW5nLW1lZGl1bSwgMWVtKTtcbn1cbmA7XG5cbmNvbnN0IGJhc2VNb2RhbCA9IGNzc2BcbiAgZGlhbG9nIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgcGFkZGluZy1pbmxpbmU6IHZhcigtLW5lLW1vZGFsLXBhZGRpbmctaG9yaXpvbnRhbCk7XG4gICAgbWF4LWhlaWdodDogODAlO1xuICAgIHBhZGRpbmctYmxvY2s6IDA7XG4gICAgYm9yZGVyOiB2YXIoLS1uZS1tb2RhbC1ib3JkZXItd2lkdGgpIHNvbGlkIHZhcigtLW5lLW1vZGFsLWNvbG9yLWJvcmRlcik7XG4gICAgYm9yZGVyLXJhZGl1czogdmFyKC0tbmUtbW9kYWwtYm9yZGVyLXJhZGl1cyk7XG4gIH1cblxuICAuaGlkZSB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuXG4gIC5zbWFsbCB7XG4gICAgd2lkdGg6IHZhcigtLW5lLW1vZGFsLXNpemluZy13aWR0aC1zbWFsbCk7XG4gICAgbWluLWhlaWdodDogdmFyKC0tbmUtbW9kYWwtc2l6aW5nLWhlaWdodC1zbWFsbCk7XG4gIH1cblxuICAubWVkaXVtIHtcbiAgICB3aWR0aDogdmFyKC0tbmUtbW9kYWwtc2l6aW5nLXdpZHRoLW1lZGl1bSk7XG4gICAgbWluLWhlaWdodDogdmFyKC0tbmUtbW9kYWwtc2l6aW5nLWhlaWdodC1tZWRpdW0pO1xuICB9XG5cbiAgLmxhcmdlIHtcbiAgICB3aWR0aDogdmFyKC0tbmUtbW9kYWwtc2l6aW5nLXdpZHRoLWxhcmdlKTtcbiAgICBtaW4taGVpZ2h0OiB2YXIoLS1uZS1tb2RhbC1zaXppbmctaGVpZ2h0LWxhcmdlKTtcbiAgICBoZWlnaHQ6IDgwJTtcbiAgfVxuXG4gIC5oZWFkaW5nLWxhYmVsIHtcbiAgICBmb250LWZhbWlseTogdmFyKC0tbmUtbW9kYWwtaGVhZGVyLWZvbnQtZmFtaWx5KTtcbiAgICBmb250LXNpemU6IHZhcigtLW5lLW1vZGFsLWhlYWRlci1mb250LXNpemUpO1xuICAgIGZvbnQtd2VpZ2h0OiB2YXIoLS1uZS1tb2RhbC1oZWFkZXItZm9udC13ZWlnaHQpO1xuICAgIGNvbG9yOiB2YXIoLS1uZS1tb2RhbC1oZWFkZXItdGl0bGUpO1xuICAgIGdhcDogdmFyKC0tbmUtbW9kYWwtaGVhZGVyLWdhcCk7XG4gIH1cblxuICAuY29udGVudCB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWZsb3c6IHJvdyBub3dyYXA7XG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICAgIG92ZXJmbG93LXk6IGF1dG87XG4gICAgZmxleC1ncm93OiAxO1xuICAgIG1hcmdpbi1ibG9jazogdmFyKC0tbmUtbW9kYWwtZ2FwLXZlcnRpY2FsKTtcbiAgfVxuYDtcbmNvbnN0IHN0eWxlcyA9IFt0b2tlbnMsIGNvbW1vblN0eWxlcywgYmFzZU1vZGFsXTtcblxuY29uc3QgTW9kYWxTaXplID0ge1xuICBzbWFsbDogJ3NtYWxsJyxcbiAgbWVkaXVtOiAnbWVkaXVtJyxcbiAgbGFyZ2U6ICdsYXJnZSdcbn07XG5cbi8qKlxuICogQHRhZyBuZS1tb2RhbFxuICogQHRhZ25hbWUgbmUtbW9kYWxcbiAqXG4gKiBAc2xvdCBjb250ZW50LiBUaGlzIGlzIHdoZXJlIHRoZSBjb250ZW50IG9mIHRoZSBtb2RhbCB3aWxsIGJlIGluc2VydGVkXG4gKlxuICogQHNsb3QgZm9vdGVyLiBUaGlzIGlzIHdoZXJlIHRoZSBmb290ZXIgYnV0dG9ucyB3aWxsIGJlIGNvbmZpZ3VyZWQuIHRvIHBvc2l0aW9uIGZvb3RlciBjb250ZW50IG9uIHRoZSByaWdodCBhcHBseSB0aGUgLnJpZ2h0LXN0YXJ0IGNsYXNzIHRvIGxhc3QgY29udHJvbCB5b3Ugd2FudCBvbiB0aGUgcmlnaHQodmlldyBzdG9yeWJvb2sgZm9yIGV4YW1wbGUpXG4gKlxuICogQGV2ZW50IG5lLWNsb3NlIFJhaXNlZCB3aGVuIHRoZSBjbG9zZSBkaWFsb2cgaXMgY2xpY2tlZFxuICovXG5sZXQgTmVNb2RhbCA9IGNsYXNzIE5lTW9kYWwgZXh0ZW5kcyBTY29wZWRFbGVtZW50c01peGluKExpdEVsZW1lbnQpIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAvKiogU3BlY2lmaWVzIHRoZSBoZWFkZXIgdGV4dCBvZiB0aGUgZGlhbG9nICovXG4gICAgdGhpcy5oZWFkZXIgPSAnJztcbiAgICAvKiogU3BlY2lmaWVzIHRoZSBzaXplIG9mIHRoZSBtb2RhbCBkaWFsb2cgKi9cbiAgICB0aGlzLnNpemUgPSBNb2RhbFNpemUuc21hbGw7XG4gICAgLyoqIFNwZWNpZmllcyBpcyB0aGUgbW9kYWwgaXMgb3BlbiwgdGhpcyBkZWZhdWx0cyB0byB0cnVlIG1lYW5pbmcgeW91IGNhbid0IHVzZSB0aGUgP29wZW4gdG9rZW4gaW4gbGl0IHRvIGNvbnRyb2wgaXQuIGZhbHNlIG5lZWRzIHRvIGJlIHNldCwgdW5kZWZpbmVkIG9yIG51bGwgd2lsbCByZXN1bHQgaW4gaXQgYmVlbiBvcGVuICovXG4gICAgdGhpcy5vcGVuID0gdHJ1ZTtcbiAgICAvLyBFdmVudHNcbiAgICB0aGlzLl9oYW5kbGVDbG9zZSA9ICgpID0+IHtcbiAgICAgIHRoaXMub3BlbiA9IGZhbHNlO1xuICAgICAgZmlyZSh0aGlzLCAnbmUtY2xvc2UnLCB7XG4gICAgICAgIGNvbXBvc2VkOiB0cnVlLFxuICAgICAgICBidWJibGVzOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuICB9XG4gIHN0YXRpYyBnZXQgc2NvcGVkRWxlbWVudHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICduZS1pY29uJzogTmVJY29uLFxuICAgICAgJ25lLW92ZXJsYXknOiBOZU92ZXJsYXksXG4gICAgICAnbmUtaWNvbi1idXR0b24nOiBOZUljb25CdXR0b24sXG4gICAgICAnbmUtYnV0dG9uLXNldCc6IE5lQnV0dG9uU2V0XG4gICAgfTtcbiAgfVxuICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gaHRtbGA8bmUtb3ZlcmxheSAuc2hvdz0ke3RoaXMub3Blbn0+XG4gICAgICA8ZGlhbG9nXG4gICAgICAgIGNsYXNzPVwiJHtjbGFzc01hcCh7XG4gICAgICBkaWFsb2c6IHRydWUsXG4gICAgICBbdGhpcy5zaXplXTogdHJ1ZSxcbiAgICAgIGhpZGU6IHRoaXMub3BlbiAhPT0gdHJ1ZVxuICAgIH0pfVwiXG4gICAgICAgIHBhcnQ9XCJkaWFsb2dcIlxuICAgICAgICBhcmlhLW1vZGFsPVwidHJ1ZVwiXG4gICAgICAgID9vcGVuPSR7dGhpcy5vcGVufVxuICAgICAgICBAY2FuY2VsPSR7dGhpcy5faGFuZGxlQ2xvc2V9XG4gICAgICA+XG4gICAgICA8c3Bhbj5cbiAgICAgICAgPG5lLWJ1dHRvbi1zZXQgLnNob3dCb3R0b21EaXZpZGVyPSR7dHJ1ZX0+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiaGVhZGluZy1sYWJlbFwiPiR7dGhpcy5oZWFkZXJ9PC9sYWJlbD5cbiAgICAgICAgICA8bmUtaWNvbi1idXR0b25cbiAgICAgICAgICAgIGNsYXNzPVwicmlnaHQtc3RhcnRcIlxuICAgICAgICAgICAgdmFyaWFudD1cImRhcmtcIlxuICAgICAgICAgICAgbmUtYXJpYS1sYWJlbD1cImNsb3NlLWJ1dHRvblwiXG4gICAgICAgICAgICBpY29uPSR7SWNvbnMuY2xvc2VEZWZhdWx0fVxuICAgICAgICAgICAgQGNsaWNrPSR7dGhpcy5faGFuZGxlQ2xvc2V9XG4gICAgICAgICAgPjwvbmUtaWNvbi1idXR0b24+XG4gICAgICAgICAgPC9uZS1idXR0b24tc2V0PlxuICAgICAgPC9zcGFuPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29udGVudFwiPlxuICAgICAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxuZS1idXR0b24tc2V0IC5zaG93VG9wRGl2aWRlcj0ke3RydWV9PlxuICAgICAgICA8c2xvdCBuYW1lPVwiZm9vdGVyXCI+XG4gICAgICA8L25lLWJ1dHRvbi1zZXQ+XG4gICAgICA8L2RpYWxvZz5cbiAgICA8L25lLW92ZXJsYXk+YDtcbiAgfVxufTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogU3RyaW5nLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIE5lTW9kYWwucHJvdG90eXBlLCBcImhlYWRlclwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICBhdHRyaWJ1dGU6ICdtb2RhbC1zaXplJyxcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZU1vZGFsLnByb3RvdHlwZSwgXCJzaXplXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IEJvb2xlYW4sXG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVNb2RhbC5wcm90b3R5cGUsIFwib3BlblwiLCB2b2lkIDApO1xuTmVNb2RhbCA9IF9fZGVjb3JhdGUoW2N1c3RvbUVsZW1lbnQoJ25lLW1vZGFsJyldLCBOZU1vZGFsKTtcblxuZXhwb3J0IHsgTmVNb2RhbCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kYWwuanMubWFwXG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdsaXQnO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuXHJcbmZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cblxuLy8gQ29tbW9uIHN0eWxlcyBjYW4gYmUgYWRkZWQgaGVyZVxuY29uc3QgY29tbW9uU3R5bGVzID0gY3NzYFxuICA6aG9zdCB7XG4gICAgYWxsOiBpbml0aWFsO1xuICB9XG5cbiAgLmhpZGRlbiB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuYDtcblxuZXhwb3J0IHsgX19kZWNvcmF0ZSBhcyBfLCBjb21tb25TdHlsZXMgYXMgYyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZS5zdHlsZXMtMTFkMzkxODEuanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG5jb25zdCBkaXJlY3RpdmVzID0gbmV3IFdlYWtNYXAoKTtcbi8qKlxuICogQnJhbmRzIGEgZnVuY3Rpb24gYXMgYSBkaXJlY3RpdmUgZmFjdG9yeSBmdW5jdGlvbiBzbyB0aGF0IGxpdC1odG1sIHdpbGwgY2FsbFxuICogdGhlIGZ1bmN0aW9uIGR1cmluZyB0ZW1wbGF0ZSByZW5kZXJpbmcsIHJhdGhlciB0aGFuIHBhc3NpbmcgYXMgYSB2YWx1ZS5cbiAqXG4gKiBBIF9kaXJlY3RpdmVfIGlzIGEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIFBhcnQgYXMgYW4gYXJndW1lbnQuIEl0IGhhcyB0aGVcbiAqIHNpZ25hdHVyZTogYChwYXJ0OiBQYXJ0KSA9PiB2b2lkYC5cbiAqXG4gKiBBIGRpcmVjdGl2ZSBfZmFjdG9yeV8gaXMgYSBmdW5jdGlvbiB0aGF0IHRha2VzIGFyZ3VtZW50cyBmb3IgZGF0YSBhbmRcbiAqIGNvbmZpZ3VyYXRpb24gYW5kIHJldHVybnMgYSBkaXJlY3RpdmUuIFVzZXJzIG9mIGRpcmVjdGl2ZSB1c3VhbGx5IHJlZmVyIHRvXG4gKiB0aGUgZGlyZWN0aXZlIGZhY3RvcnkgYXMgdGhlIGRpcmVjdGl2ZS4gRm9yIGV4YW1wbGUsIFwiVGhlIHJlcGVhdCBkaXJlY3RpdmVcIi5cbiAqXG4gKiBVc3VhbGx5IGEgdGVtcGxhdGUgYXV0aG9yIHdpbGwgaW52b2tlIGEgZGlyZWN0aXZlIGZhY3RvcnkgaW4gdGhlaXIgdGVtcGxhdGVcbiAqIHdpdGggcmVsZXZhbnQgYXJndW1lbnRzLCB3aGljaCB3aWxsIHRoZW4gcmV0dXJuIGEgZGlyZWN0aXZlIGZ1bmN0aW9uLlxuICpcbiAqIEhlcmUncyBhbiBleGFtcGxlIG9mIHVzaW5nIHRoZSBgcmVwZWF0KClgIGRpcmVjdGl2ZSBmYWN0b3J5IHRoYXQgdGFrZXMgYW5cbiAqIGFycmF5IGFuZCBhIGZ1bmN0aW9uIHRvIHJlbmRlciBhbiBpdGVtOlxuICpcbiAqIGBgYGpzXG4gKiBodG1sYDx1bD48JHtyZXBlYXQoaXRlbXMsIChpdGVtKSA9PiBodG1sYDxsaT4ke2l0ZW19PC9saT5gKX08L3VsPmBcbiAqIGBgYFxuICpcbiAqIFdoZW4gYHJlcGVhdGAgaXMgaW52b2tlZCwgaXQgcmV0dXJucyBhIGRpcmVjdGl2ZSBmdW5jdGlvbiB0aGF0IGNsb3NlcyBvdmVyXG4gKiBgaXRlbXNgIGFuZCB0aGUgdGVtcGxhdGUgZnVuY3Rpb24uIFdoZW4gdGhlIG91dGVyIHRlbXBsYXRlIGlzIHJlbmRlcmVkLCB0aGVcbiAqIHJldHVybiBkaXJlY3RpdmUgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggdGhlIFBhcnQgZm9yIHRoZSBleHByZXNzaW9uLlxuICogYHJlcGVhdGAgdGhlbiBwZXJmb3JtcyBpdCdzIGN1c3RvbSBsb2dpYyB0byByZW5kZXIgbXVsdGlwbGUgaXRlbXMuXG4gKlxuICogQHBhcmFtIGYgVGhlIGRpcmVjdGl2ZSBmYWN0b3J5IGZ1bmN0aW9uLiBNdXN0IGJlIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFcbiAqIGZ1bmN0aW9uIG9mIHRoZSBzaWduYXR1cmUgYChwYXJ0OiBQYXJ0KSA9PiB2b2lkYC4gVGhlIHJldHVybmVkIGZ1bmN0aW9uIHdpbGxcbiAqIGJlIGNhbGxlZCB3aXRoIHRoZSBwYXJ0IG9iamVjdC5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGltcG9ydCB7ZGlyZWN0aXZlLCBodG1sfSBmcm9tICdsaXQtaHRtbCc7XG4gKlxuICogY29uc3QgaW1tdXRhYmxlID0gZGlyZWN0aXZlKCh2KSA9PiAocGFydCkgPT4ge1xuICogICBpZiAocGFydC52YWx1ZSAhPT0gdikge1xuICogICAgIHBhcnQuc2V0VmFsdWUodilcbiAqICAgfVxuICogfSk7XG4gKi9cbmV4cG9ydCBjb25zdCBkaXJlY3RpdmUgPSAoZikgPT4gKCguLi5hcmdzKSA9PiB7XG4gICAgY29uc3QgZCA9IGYoLi4uYXJncyk7XG4gICAgZGlyZWN0aXZlcy5zZXQoZCwgdHJ1ZSk7XG4gICAgcmV0dXJuIGQ7XG59KTtcbmV4cG9ydCBjb25zdCBpc0RpcmVjdGl2ZSA9IChvKSA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiBvID09PSAnZnVuY3Rpb24nICYmIGRpcmVjdGl2ZXMuaGFzKG8pO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpcmVjdGl2ZS5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG4vKipcbiAqIFRydWUgaWYgdGhlIGN1c3RvbSBlbGVtZW50cyBwb2x5ZmlsbCBpcyBpbiB1c2UuXG4gKi9cbmV4cG9ydCBjb25zdCBpc0NFUG9seWZpbGwgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHdpbmRvdy5jdXN0b21FbGVtZW50cyAhPSBudWxsICYmXG4gICAgd2luZG93LmN1c3RvbUVsZW1lbnRzLnBvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2sgIT09XG4gICAgICAgIHVuZGVmaW5lZDtcbi8qKlxuICogUmVwYXJlbnRzIG5vZGVzLCBzdGFydGluZyBmcm9tIGBzdGFydGAgKGluY2x1c2l2ZSkgdG8gYGVuZGAgKGV4Y2x1c2l2ZSksXG4gKiBpbnRvIGFub3RoZXIgY29udGFpbmVyIChjb3VsZCBiZSB0aGUgc2FtZSBjb250YWluZXIpLCBiZWZvcmUgYGJlZm9yZWAuIElmXG4gKiBgYmVmb3JlYCBpcyBudWxsLCBpdCBhcHBlbmRzIHRoZSBub2RlcyB0byB0aGUgY29udGFpbmVyLlxuICovXG5leHBvcnQgY29uc3QgcmVwYXJlbnROb2RlcyA9IChjb250YWluZXIsIHN0YXJ0LCBlbmQgPSBudWxsLCBiZWZvcmUgPSBudWxsKSA9PiB7XG4gICAgd2hpbGUgKHN0YXJ0ICE9PSBlbmQpIHtcbiAgICAgICAgY29uc3QgbiA9IHN0YXJ0Lm5leHRTaWJsaW5nO1xuICAgICAgICBjb250YWluZXIuaW5zZXJ0QmVmb3JlKHN0YXJ0LCBiZWZvcmUpO1xuICAgICAgICBzdGFydCA9IG47XG4gICAgfVxufTtcbi8qKlxuICogUmVtb3ZlcyBub2Rlcywgc3RhcnRpbmcgZnJvbSBgc3RhcnRgIChpbmNsdXNpdmUpIHRvIGBlbmRgIChleGNsdXNpdmUpLCBmcm9tXG4gKiBgY29udGFpbmVyYC5cbiAqL1xuZXhwb3J0IGNvbnN0IHJlbW92ZU5vZGVzID0gKGNvbnRhaW5lciwgc3RhcnQsIGVuZCA9IG51bGwpID0+IHtcbiAgICB3aGlsZSAoc3RhcnQgIT09IGVuZCkge1xuICAgICAgICBjb25zdCBuID0gc3RhcnQubmV4dFNpYmxpbmc7XG4gICAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChzdGFydCk7XG4gICAgICAgIHN0YXJ0ID0gbjtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZG9tLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxOCBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbi8qKlxuICogQSBzZW50aW5lbCB2YWx1ZSB0aGF0IHNpZ25hbHMgdGhhdCBhIHZhbHVlIHdhcyBoYW5kbGVkIGJ5IGEgZGlyZWN0aXZlIGFuZFxuICogc2hvdWxkIG5vdCBiZSB3cml0dGVuIHRvIHRoZSBET00uXG4gKi9cbmV4cG9ydCBjb25zdCBub0NoYW5nZSA9IHt9O1xuLyoqXG4gKiBBIHNlbnRpbmVsIHZhbHVlIHRoYXQgc2lnbmFscyBhIE5vZGVQYXJ0IHRvIGZ1bGx5IGNsZWFyIGl0cyBjb250ZW50LlxuICovXG5leHBvcnQgY29uc3Qgbm90aGluZyA9IHt9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFydC5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG4vKipcbiAqIEFuIGV4cHJlc3Npb24gbWFya2VyIHdpdGggZW1iZWRkZWQgdW5pcXVlIGtleSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aFxuICogcG9zc2libGUgdGV4dCBpbiB0ZW1wbGF0ZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBtYXJrZXIgPSBge3tsaXQtJHtTdHJpbmcoTWF0aC5yYW5kb20oKSkuc2xpY2UoMil9fX1gO1xuLyoqXG4gKiBBbiBleHByZXNzaW9uIG1hcmtlciB1c2VkIHRleHQtcG9zaXRpb25zLCBtdWx0aS1iaW5kaW5nIGF0dHJpYnV0ZXMsIGFuZFxuICogYXR0cmlidXRlcyB3aXRoIG1hcmt1cC1saWtlIHRleHQgdmFsdWVzLlxuICovXG5leHBvcnQgY29uc3Qgbm9kZU1hcmtlciA9IGA8IS0tJHttYXJrZXJ9LS0+YDtcbmV4cG9ydCBjb25zdCBtYXJrZXJSZWdleCA9IG5ldyBSZWdFeHAoYCR7bWFya2VyfXwke25vZGVNYXJrZXJ9YCk7XG4vKipcbiAqIFN1ZmZpeCBhcHBlbmRlZCB0byBhbGwgYm91bmQgYXR0cmlidXRlIG5hbWVzLlxuICovXG5leHBvcnQgY29uc3QgYm91bmRBdHRyaWJ1dGVTdWZmaXggPSAnJGxpdCQnO1xuLyoqXG4gKiBBbiB1cGRhdGFibGUgVGVtcGxhdGUgdGhhdCB0cmFja3MgdGhlIGxvY2F0aW9uIG9mIGR5bmFtaWMgcGFydHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUZW1wbGF0ZSB7XG4gICAgY29uc3RydWN0b3IocmVzdWx0LCBlbGVtZW50KSB7XG4gICAgICAgIHRoaXMucGFydHMgPSBbXTtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgY29uc3Qgbm9kZXNUb1JlbW92ZSA9IFtdO1xuICAgICAgICBjb25zdCBzdGFjayA9IFtdO1xuICAgICAgICAvLyBFZGdlIG5lZWRzIGFsbCA0IHBhcmFtZXRlcnMgcHJlc2VudDsgSUUxMSBuZWVkcyAzcmQgcGFyYW1ldGVyIHRvIGJlIG51bGxcbiAgICAgICAgY29uc3Qgd2Fsa2VyID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihlbGVtZW50LmNvbnRlbnQsIDEzMyAvKiBOb2RlRmlsdGVyLlNIT1dfe0VMRU1FTlR8Q09NTUVOVHxURVhUfSAqLywgbnVsbCwgZmFsc2UpO1xuICAgICAgICAvLyBLZWVwcyB0cmFjayBvZiB0aGUgbGFzdCBpbmRleCBhc3NvY2lhdGVkIHdpdGggYSBwYXJ0LiBXZSB0cnkgdG8gZGVsZXRlXG4gICAgICAgIC8vIHVubmVjZXNzYXJ5IG5vZGVzLCBidXQgd2UgbmV2ZXIgd2FudCB0byBhc3NvY2lhdGUgdHdvIGRpZmZlcmVudCBwYXJ0c1xuICAgICAgICAvLyB0byB0aGUgc2FtZSBpbmRleC4gVGhleSBtdXN0IGhhdmUgYSBjb25zdGFudCBub2RlIGJldHdlZW4uXG4gICAgICAgIGxldCBsYXN0UGFydEluZGV4ID0gMDtcbiAgICAgICAgbGV0IGluZGV4ID0gLTE7XG4gICAgICAgIGxldCBwYXJ0SW5kZXggPSAwO1xuICAgICAgICBjb25zdCB7IHN0cmluZ3MsIHZhbHVlczogeyBsZW5ndGggfSB9ID0gcmVzdWx0O1xuICAgICAgICB3aGlsZSAocGFydEluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gd2Fsa2VyLm5leHROb2RlKCk7XG4gICAgICAgICAgICBpZiAobm9kZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIFdlJ3ZlIGV4aGF1c3RlZCB0aGUgY29udGVudCBpbnNpZGUgYSBuZXN0ZWQgdGVtcGxhdGUgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBCZWNhdXNlIHdlIHN0aWxsIGhhdmUgcGFydHMgKHRoZSBvdXRlciBmb3ItbG9vcCksIHdlIGtub3c6XG4gICAgICAgICAgICAgICAgLy8gLSBUaGVyZSBpcyBhIHRlbXBsYXRlIGluIHRoZSBzdGFja1xuICAgICAgICAgICAgICAgIC8vIC0gVGhlIHdhbGtlciB3aWxsIGZpbmQgYSBuZXh0Tm9kZSBvdXRzaWRlIHRoZSB0ZW1wbGF0ZVxuICAgICAgICAgICAgICAgIHdhbGtlci5jdXJyZW50Tm9kZSA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAxIC8qIE5vZGUuRUxFTUVOVF9OT0RFICovKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuaGFzQXR0cmlidXRlcygpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBub2RlLmF0dHJpYnV0ZXM7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSBhdHRyaWJ1dGVzO1xuICAgICAgICAgICAgICAgICAgICAvLyBQZXJcbiAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL05hbWVkTm9kZU1hcCxcbiAgICAgICAgICAgICAgICAgICAgLy8gYXR0cmlidXRlcyBhcmUgbm90IGd1YXJhbnRlZWQgdG8gYmUgcmV0dXJuZWQgaW4gZG9jdW1lbnQgb3JkZXIuXG4gICAgICAgICAgICAgICAgICAgIC8vIEluIHBhcnRpY3VsYXIsIEVkZ2UvSUUgY2FuIHJldHVybiB0aGVtIG91dCBvZiBvcmRlciwgc28gd2UgY2Fubm90XG4gICAgICAgICAgICAgICAgICAgIC8vIGFzc3VtZSBhIGNvcnJlc3BvbmRlbmNlIGJldHdlZW4gcGFydCBpbmRleCBhbmQgYXR0cmlidXRlIGluZGV4LlxuICAgICAgICAgICAgICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW5kc1dpdGgoYXR0cmlidXRlc1tpXS5uYW1lLCBib3VuZEF0dHJpYnV0ZVN1ZmZpeCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChjb3VudC0tID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSB0ZW1wbGF0ZSBsaXRlcmFsIHNlY3Rpb24gbGVhZGluZyB1cCB0byB0aGUgZmlyc3RcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGV4cHJlc3Npb24gaW4gdGhpcyBhdHRyaWJ1dGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0cmluZ0ZvclBhcnQgPSBzdHJpbmdzW3BhcnRJbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGaW5kIHRoZSBhdHRyaWJ1dGUgbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IGxhc3RBdHRyaWJ1dGVOYW1lUmVnZXguZXhlYyhzdHJpbmdGb3JQYXJ0KVsyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpbmQgdGhlIGNvcnJlc3BvbmRpbmcgYXR0cmlidXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBbGwgYm91bmQgYXR0cmlidXRlcyBoYXZlIGhhZCBhIHN1ZmZpeCBhZGRlZCBpblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGVtcGxhdGVSZXN1bHQjZ2V0SFRNTCB0byBvcHQgb3V0IG9mIHNwZWNpYWwgYXR0cmlidXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBoYW5kbGluZy4gVG8gbG9vayB1cCB0aGUgYXR0cmlidXRlIHZhbHVlIHdlIGFsc28gbmVlZCB0byBhZGRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBzdWZmaXguXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVMb29rdXBOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpICsgYm91bmRBdHRyaWJ1dGVTdWZmaXg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVWYWx1ZSA9IG5vZGUuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZUxvb2t1cE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlTG9va3VwTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGF0aWNzID0gYXR0cmlidXRlVmFsdWUuc3BsaXQobWFya2VyUmVnZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJ0cy5wdXNoKHsgdHlwZTogJ2F0dHJpYnV0ZScsIGluZGV4LCBuYW1lLCBzdHJpbmdzOiBzdGF0aWNzIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFydEluZGV4ICs9IHN0YXRpY3MubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobm9kZS50YWdOYW1lID09PSAnVEVNUExBVEUnKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIHdhbGtlci5jdXJyZW50Tm9kZSA9IG5vZGUuY29udGVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChub2RlLm5vZGVUeXBlID09PSAzIC8qIE5vZGUuVEVYVF9OT0RFICovKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IG5vZGUuZGF0YTtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5pbmRleE9mKG1hcmtlcikgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0cmluZ3MgPSBkYXRhLnNwbGl0KG1hcmtlclJlZ2V4KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFzdEluZGV4ID0gc3RyaW5ncy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBhIG5ldyB0ZXh0IG5vZGUgZm9yIGVhY2ggbGl0ZXJhbCBzZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZXNlIG5vZGVzIGFyZSBhbHNvIHVzZWQgYXMgdGhlIG1hcmtlcnMgZm9yIG5vZGUgcGFydHNcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXN0SW5kZXg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGluc2VydDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzID0gc3RyaW5nc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydCA9IGNyZWF0ZU1hcmtlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSBsYXN0QXR0cmlidXRlTmFtZVJlZ2V4LmV4ZWMocyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoICE9PSBudWxsICYmIGVuZHNXaXRoKG1hdGNoWzJdLCBib3VuZEF0dHJpYnV0ZVN1ZmZpeCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcyA9IHMuc2xpY2UoMCwgbWF0Y2guaW5kZXgpICsgbWF0Y2hbMV0gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMl0uc2xpY2UoMCwgLWJvdW5kQXR0cmlidXRlU3VmZml4Lmxlbmd0aCkgKyBtYXRjaFszXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGluc2VydCwgbm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnRzLnB1c2goeyB0eXBlOiAnbm9kZScsIGluZGV4OiArK2luZGV4IH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gdGV4dCwgd2UgbXVzdCBpbnNlcnQgYSBjb21tZW50IHRvIG1hcmsgb3VyIHBsYWNlLlxuICAgICAgICAgICAgICAgICAgICAvLyBFbHNlLCB3ZSBjYW4gdHJ1c3QgaXQgd2lsbCBzdGljayBhcm91bmQgYWZ0ZXIgY2xvbmluZy5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0cmluZ3NbbGFzdEluZGV4XSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoY3JlYXRlTWFya2VyKCksIG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNUb1JlbW92ZS5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5kYXRhID0gc3RyaW5nc1tsYXN0SW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgYSBwYXJ0IGZvciBlYWNoIG1hdGNoIGZvdW5kXG4gICAgICAgICAgICAgICAgICAgIHBhcnRJbmRleCArPSBsYXN0SW5kZXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCAvKiBOb2RlLkNPTU1FTlRfTk9ERSAqLykge1xuICAgICAgICAgICAgICAgIGlmIChub2RlLmRhdGEgPT09IG1hcmtlcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCBhIG5ldyBtYXJrZXIgbm9kZSB0byBiZSB0aGUgc3RhcnROb2RlIG9mIHRoZSBQYXJ0IGlmIGFueSBvZlxuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgZm9sbG93aW5nIGFyZSB0cnVlOlxuICAgICAgICAgICAgICAgICAgICAvLyAgKiBXZSBkb24ndCBoYXZlIGEgcHJldmlvdXNTaWJsaW5nXG4gICAgICAgICAgICAgICAgICAgIC8vICAqIFRoZSBwcmV2aW91c1NpYmxpbmcgaXMgYWxyZWFkeSB0aGUgc3RhcnQgb2YgYSBwcmV2aW91cyBwYXJ0XG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlLnByZXZpb3VzU2libGluZyA9PT0gbnVsbCB8fCBpbmRleCA9PT0gbGFzdFBhcnRJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoY3JlYXRlTWFya2VyKCksIG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxhc3RQYXJ0SW5kZXggPSBpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJ0cy5wdXNoKHsgdHlwZTogJ25vZGUnLCBpbmRleCB9KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhIG5leHRTaWJsaW5nLCBrZWVwIHRoaXMgbm9kZSBzbyB3ZSBoYXZlIGFuIGVuZC5cbiAgICAgICAgICAgICAgICAgICAgLy8gRWxzZSwgd2UgY2FuIHJlbW92ZSBpdCB0byBzYXZlIGZ1dHVyZSBjb3N0cy5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUubmV4dFNpYmxpbmcgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuZGF0YSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNUb1JlbW92ZS5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgtLTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwYXJ0SW5kZXgrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpID0gLTE7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICgoaSA9IG5vZGUuZGF0YS5pbmRleE9mKG1hcmtlciwgaSArIDEpKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbW1lbnQgbm9kZSBoYXMgYSBiaW5kaW5nIG1hcmtlciBpbnNpZGUsIG1ha2UgYW4gaW5hY3RpdmUgcGFydFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGJpbmRpbmcgd29uJ3Qgd29yaywgYnV0IHN1YnNlcXVlbnQgYmluZGluZ3Mgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyAoanVzdGluZmFnbmFuaSk6IGNvbnNpZGVyIHdoZXRoZXIgaXQncyBldmVuIHdvcnRoIGl0IHRvXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYWtlIGJpbmRpbmdzIGluIGNvbW1lbnRzIHdvcmtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFydHMucHVzaCh7IHR5cGU6ICdub2RlJywgaW5kZXg6IC0xIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFydEluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVtb3ZlIHRleHQgYmluZGluZyBub2RlcyBhZnRlciB0aGUgd2FsayB0byBub3QgZGlzdHVyYiB0aGUgVHJlZVdhbGtlclxuICAgICAgICBmb3IgKGNvbnN0IG4gb2Ygbm9kZXNUb1JlbW92ZSkge1xuICAgICAgICAgICAgbi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG4pO1xuICAgICAgICB9XG4gICAgfVxufVxuY29uc3QgZW5kc1dpdGggPSAoc3RyLCBzdWZmaXgpID0+IHtcbiAgICBjb25zdCBpbmRleCA9IHN0ci5sZW5ndGggLSBzdWZmaXgubGVuZ3RoO1xuICAgIHJldHVybiBpbmRleCA+PSAwICYmIHN0ci5zbGljZShpbmRleCkgPT09IHN1ZmZpeDtcbn07XG5leHBvcnQgY29uc3QgaXNUZW1wbGF0ZVBhcnRBY3RpdmUgPSAocGFydCkgPT4gcGFydC5pbmRleCAhPT0gLTE7XG4vLyBBbGxvd3MgYGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJycpYCB0byBiZSByZW5hbWVkIGZvciBhXG4vLyBzbWFsbCBtYW51YWwgc2l6ZS1zYXZpbmdzLlxuZXhwb3J0IGNvbnN0IGNyZWF0ZU1hcmtlciA9ICgpID0+IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJycpO1xuLyoqXG4gKiBUaGlzIHJlZ2V4IGV4dHJhY3RzIHRoZSBhdHRyaWJ1dGUgbmFtZSBwcmVjZWRpbmcgYW4gYXR0cmlidXRlLXBvc2l0aW9uXG4gKiBleHByZXNzaW9uLiBJdCBkb2VzIHRoaXMgYnkgbWF0Y2hpbmcgdGhlIHN5bnRheCBhbGxvd2VkIGZvciBhdHRyaWJ1dGVzXG4gKiBhZ2FpbnN0IHRoZSBzdHJpbmcgbGl0ZXJhbCBkaXJlY3RseSBwcmVjZWRpbmcgdGhlIGV4cHJlc3Npb24sIGFzc3VtaW5nIHRoYXRcbiAqIHRoZSBleHByZXNzaW9uIGlzIGluIGFuIGF0dHJpYnV0ZS12YWx1ZSBwb3NpdGlvbi5cbiAqXG4gKiBTZWUgYXR0cmlidXRlcyBpbiB0aGUgSFRNTCBzcGVjOlxuICogaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L3N5bnRheC5odG1sI2VsZW1lbnRzLWF0dHJpYnV0ZXNcbiAqXG4gKiBcIiBcXHgwOVxceDBhXFx4MGNcXHgwZFwiIGFyZSBIVE1MIHNwYWNlIGNoYXJhY3RlcnM6XG4gKiBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvaW5mcmFzdHJ1Y3R1cmUuaHRtbCNzcGFjZS1jaGFyYWN0ZXJzXG4gKlxuICogXCJcXDAtXFx4MUZcXHg3Ri1cXHg5RlwiIGFyZSBVbmljb2RlIGNvbnRyb2wgY2hhcmFjdGVycywgd2hpY2ggaW5jbHVkZXMgZXZlcnlcbiAqIHNwYWNlIGNoYXJhY3RlciBleGNlcHQgXCIgXCIuXG4gKlxuICogU28gYW4gYXR0cmlidXRlIGlzOlxuICogICogVGhlIG5hbWU6IGFueSBjaGFyYWN0ZXIgZXhjZXB0IGEgY29udHJvbCBjaGFyYWN0ZXIsIHNwYWNlIGNoYXJhY3RlciwgKCcpLFxuICogICAgKFwiKSwgXCI+XCIsIFwiPVwiLCBvciBcIi9cIlxuICogICogRm9sbG93ZWQgYnkgemVybyBvciBtb3JlIHNwYWNlIGNoYXJhY3RlcnNcbiAqICAqIEZvbGxvd2VkIGJ5IFwiPVwiXG4gKiAgKiBGb2xsb3dlZCBieSB6ZXJvIG9yIG1vcmUgc3BhY2UgY2hhcmFjdGVyc1xuICogICogRm9sbG93ZWQgYnk6XG4gKiAgICAqIEFueSBjaGFyYWN0ZXIgZXhjZXB0IHNwYWNlLCAoJyksIChcIiksIFwiPFwiLCBcIj5cIiwgXCI9XCIsIChgKSwgb3JcbiAqICAgICogKFwiKSB0aGVuIGFueSBub24tKFwiKSwgb3JcbiAqICAgICogKCcpIHRoZW4gYW55IG5vbi0oJylcbiAqL1xuZXhwb3J0IGNvbnN0IGxhc3RBdHRyaWJ1dGVOYW1lUmVnZXggPSBcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4XG4vKFsgXFx4MDlcXHgwYVxceDBjXFx4MGRdKShbXlxcMC1cXHgxRlxceDdGLVxceDlGIFwiJz49L10rKShbIFxceDA5XFx4MGFcXHgwY1xceDBkXSo9WyBcXHgwOVxceDBhXFx4MGNcXHgwZF0qKD86W14gXFx4MDlcXHgwYVxceDBjXFx4MGRcIidgPD49XSp8XCJbXlwiXSp8J1teJ10qKSkkLztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRlbXBsYXRlLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbmltcG9ydCB7IGlzQ0VQb2x5ZmlsbCB9IGZyb20gJy4vZG9tLmpzJztcbmltcG9ydCB7IGlzVGVtcGxhdGVQYXJ0QWN0aXZlIH0gZnJvbSAnLi90ZW1wbGF0ZS5qcyc7XG4vKipcbiAqIEFuIGluc3RhbmNlIG9mIGEgYFRlbXBsYXRlYCB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byB0aGUgRE9NIGFuZCB1cGRhdGVkXG4gKiB3aXRoIG5ldyB2YWx1ZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUZW1wbGF0ZUluc3RhbmNlIHtcbiAgICBjb25zdHJ1Y3Rvcih0ZW1wbGF0ZSwgcHJvY2Vzc29yLCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX19wYXJ0cyA9IFtdO1xuICAgICAgICB0aGlzLnRlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgICAgIHRoaXMucHJvY2Vzc29yID0gcHJvY2Vzc29yO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICB1cGRhdGUodmFsdWVzKSB7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBwYXJ0IG9mIHRoaXMuX19wYXJ0cykge1xuICAgICAgICAgICAgaWYgKHBhcnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHBhcnQuc2V0VmFsdWUodmFsdWVzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHBhcnQgb2YgdGhpcy5fX3BhcnRzKSB7XG4gICAgICAgICAgICBpZiAocGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcGFydC5jb21taXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBfY2xvbmUoKSB7XG4gICAgICAgIC8vIFRoZXJlIGFyZSBhIG51bWJlciBvZiBzdGVwcyBpbiB0aGUgbGlmZWN5Y2xlIG9mIGEgdGVtcGxhdGUgaW5zdGFuY2Unc1xuICAgICAgICAvLyBET00gZnJhZ21lbnQ6XG4gICAgICAgIC8vICAxLiBDbG9uZSAtIGNyZWF0ZSB0aGUgaW5zdGFuY2UgZnJhZ21lbnRcbiAgICAgICAgLy8gIDIuIEFkb3B0IC0gYWRvcHQgaW50byB0aGUgbWFpbiBkb2N1bWVudFxuICAgICAgICAvLyAgMy4gUHJvY2VzcyAtIGZpbmQgcGFydCBtYXJrZXJzIGFuZCBjcmVhdGUgcGFydHNcbiAgICAgICAgLy8gIDQuIFVwZ3JhZGUgLSB1cGdyYWRlIGN1c3RvbSBlbGVtZW50c1xuICAgICAgICAvLyAgNS4gVXBkYXRlIC0gc2V0IG5vZGUsIGF0dHJpYnV0ZSwgcHJvcGVydHksIGV0Yy4sIHZhbHVlc1xuICAgICAgICAvLyAgNi4gQ29ubmVjdCAtIGNvbm5lY3QgdG8gdGhlIGRvY3VtZW50LiBPcHRpb25hbCBhbmQgb3V0c2lkZSBvZiB0aGlzXG4gICAgICAgIC8vICAgICBtZXRob2QuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFdlIGhhdmUgYSBmZXcgY29uc3RyYWludHMgb24gdGhlIG9yZGVyaW5nIG9mIHRoZXNlIHN0ZXBzOlxuICAgICAgICAvLyAgKiBXZSBuZWVkIHRvIHVwZ3JhZGUgYmVmb3JlIHVwZGF0aW5nLCBzbyB0aGF0IHByb3BlcnR5IHZhbHVlcyB3aWxsIHBhc3NcbiAgICAgICAgLy8gICAgdGhyb3VnaCBhbnkgcHJvcGVydHkgc2V0dGVycy5cbiAgICAgICAgLy8gICogV2Ugd291bGQgbGlrZSB0byBwcm9jZXNzIGJlZm9yZSB1cGdyYWRpbmcgc28gdGhhdCB3ZSdyZSBzdXJlIHRoYXQgdGhlXG4gICAgICAgIC8vICAgIGNsb25lZCBmcmFnbWVudCBpcyBpbmVydCBhbmQgbm90IGRpc3R1cmJlZCBieSBzZWxmLW1vZGlmeWluZyBET00uXG4gICAgICAgIC8vICAqIFdlIHdhbnQgY3VzdG9tIGVsZW1lbnRzIHRvIHVwZ3JhZGUgZXZlbiBpbiBkaXNjb25uZWN0ZWQgZnJhZ21lbnRzLlxuICAgICAgICAvL1xuICAgICAgICAvLyBHaXZlbiB0aGVzZSBjb25zdHJhaW50cywgd2l0aCBmdWxsIGN1c3RvbSBlbGVtZW50cyBzdXBwb3J0IHdlIHdvdWxkXG4gICAgICAgIC8vIHByZWZlciB0aGUgb3JkZXI6IENsb25lLCBQcm9jZXNzLCBBZG9wdCwgVXBncmFkZSwgVXBkYXRlLCBDb25uZWN0XG4gICAgICAgIC8vXG4gICAgICAgIC8vIEJ1dCBTYWZhcmkgZG9lcyBub3QgaW1wbGVtZW50IEN1c3RvbUVsZW1lbnRSZWdpc3RyeSN1cGdyYWRlLCBzbyB3ZVxuICAgICAgICAvLyBjYW4gbm90IGltcGxlbWVudCB0aGF0IG9yZGVyIGFuZCBzdGlsbCBoYXZlIHVwZ3JhZGUtYmVmb3JlLXVwZGF0ZSBhbmRcbiAgICAgICAgLy8gdXBncmFkZSBkaXNjb25uZWN0ZWQgZnJhZ21lbnRzLiBTbyB3ZSBpbnN0ZWFkIHNhY3JpZmljZSB0aGVcbiAgICAgICAgLy8gcHJvY2Vzcy1iZWZvcmUtdXBncmFkZSBjb25zdHJhaW50LCBzaW5jZSBpbiBDdXN0b20gRWxlbWVudHMgdjEgZWxlbWVudHNcbiAgICAgICAgLy8gbXVzdCBub3QgbW9kaWZ5IHRoZWlyIGxpZ2h0IERPTSBpbiB0aGUgY29uc3RydWN0b3IuIFdlIHN0aWxsIGhhdmUgaXNzdWVzXG4gICAgICAgIC8vIHdoZW4gY28tZXhpc3Rpbmcgd2l0aCBDRXYwIGVsZW1lbnRzIGxpa2UgUG9seW1lciAxLCBhbmQgd2l0aCBwb2x5ZmlsbHNcbiAgICAgICAgLy8gdGhhdCBkb24ndCBzdHJpY3RseSBhZGhlcmUgdG8gdGhlIG5vLW1vZGlmaWNhdGlvbiBydWxlIGJlY2F1c2Ugc2hhZG93XG4gICAgICAgIC8vIERPTSwgd2hpY2ggbWF5IGJlIGNyZWF0ZWQgaW4gdGhlIGNvbnN0cnVjdG9yLCBpcyBlbXVsYXRlZCBieSBiZWluZyBwbGFjZWRcbiAgICAgICAgLy8gaW4gdGhlIGxpZ2h0IERPTS5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gVGhlIHJlc3VsdGluZyBvcmRlciBpcyBvbiBuYXRpdmUgaXM6IENsb25lLCBBZG9wdCwgVXBncmFkZSwgUHJvY2VzcyxcbiAgICAgICAgLy8gVXBkYXRlLCBDb25uZWN0LiBkb2N1bWVudC5pbXBvcnROb2RlKCkgcGVyZm9ybXMgQ2xvbmUsIEFkb3B0LCBhbmQgVXBncmFkZVxuICAgICAgICAvLyBpbiBvbmUgc3RlcC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gVGhlIEN1c3RvbSBFbGVtZW50cyB2MSBwb2x5ZmlsbCBzdXBwb3J0cyB1cGdyYWRlKCksIHNvIHRoZSBvcmRlciB3aGVuXG4gICAgICAgIC8vIHBvbHlmaWxsZWQgaXMgdGhlIG1vcmUgaWRlYWw6IENsb25lLCBQcm9jZXNzLCBBZG9wdCwgVXBncmFkZSwgVXBkYXRlLFxuICAgICAgICAvLyBDb25uZWN0LlxuICAgICAgICBjb25zdCBmcmFnbWVudCA9IGlzQ0VQb2x5ZmlsbCA/XG4gICAgICAgICAgICB0aGlzLnRlbXBsYXRlLmVsZW1lbnQuY29udGVudC5jbG9uZU5vZGUodHJ1ZSkgOlxuICAgICAgICAgICAgZG9jdW1lbnQuaW1wb3J0Tm9kZSh0aGlzLnRlbXBsYXRlLmVsZW1lbnQuY29udGVudCwgdHJ1ZSk7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gW107XG4gICAgICAgIGNvbnN0IHBhcnRzID0gdGhpcy50ZW1wbGF0ZS5wYXJ0cztcbiAgICAgICAgLy8gRWRnZSBuZWVkcyBhbGwgNCBwYXJhbWV0ZXJzIHByZXNlbnQ7IElFMTEgbmVlZHMgM3JkIHBhcmFtZXRlciB0byBiZSBudWxsXG4gICAgICAgIGNvbnN0IHdhbGtlciA9IGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoZnJhZ21lbnQsIDEzMyAvKiBOb2RlRmlsdGVyLlNIT1dfe0VMRU1FTlR8Q09NTUVOVHxURVhUfSAqLywgbnVsbCwgZmFsc2UpO1xuICAgICAgICBsZXQgcGFydEluZGV4ID0gMDtcbiAgICAgICAgbGV0IG5vZGVJbmRleCA9IDA7XG4gICAgICAgIGxldCBwYXJ0O1xuICAgICAgICBsZXQgbm9kZSA9IHdhbGtlci5uZXh0Tm9kZSgpO1xuICAgICAgICAvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBub2RlcyBhbmQgcGFydHMgb2YgYSB0ZW1wbGF0ZVxuICAgICAgICB3aGlsZSAocGFydEluZGV4IDwgcGFydHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBwYXJ0ID0gcGFydHNbcGFydEluZGV4XTtcbiAgICAgICAgICAgIGlmICghaXNUZW1wbGF0ZVBhcnRBY3RpdmUocGFydCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9fcGFydHMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgIHBhcnRJbmRleCsrO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUHJvZ3Jlc3MgdGhlIHRyZWUgd2Fsa2VyIHVudGlsIHdlIGZpbmQgb3VyIG5leHQgcGFydCdzIG5vZGUuXG4gICAgICAgICAgICAvLyBOb3RlIHRoYXQgbXVsdGlwbGUgcGFydHMgbWF5IHNoYXJlIHRoZSBzYW1lIG5vZGUgKGF0dHJpYnV0ZSBwYXJ0c1xuICAgICAgICAgICAgLy8gb24gYSBzaW5nbGUgZWxlbWVudCksIHNvIHRoaXMgbG9vcCBtYXkgbm90IHJ1biBhdCBhbGwuXG4gICAgICAgICAgICB3aGlsZSAobm9kZUluZGV4IDwgcGFydC5pbmRleCkge1xuICAgICAgICAgICAgICAgIG5vZGVJbmRleCsrO1xuICAgICAgICAgICAgICAgIGlmIChub2RlLm5vZGVOYW1lID09PSAnVEVNUExBVEUnKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIHdhbGtlci5jdXJyZW50Tm9kZSA9IG5vZGUuY29udGVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKChub2RlID0gd2Fsa2VyLm5leHROb2RlKCkpID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlJ3ZlIGV4aGF1c3RlZCB0aGUgY29udGVudCBpbnNpZGUgYSBuZXN0ZWQgdGVtcGxhdGUgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAgICAgLy8gQmVjYXVzZSB3ZSBzdGlsbCBoYXZlIHBhcnRzICh0aGUgb3V0ZXIgZm9yLWxvb3ApLCB3ZSBrbm93OlxuICAgICAgICAgICAgICAgICAgICAvLyAtIFRoZXJlIGlzIGEgdGVtcGxhdGUgaW4gdGhlIHN0YWNrXG4gICAgICAgICAgICAgICAgICAgIC8vIC0gVGhlIHdhbGtlciB3aWxsIGZpbmQgYSBuZXh0Tm9kZSBvdXRzaWRlIHRoZSB0ZW1wbGF0ZVxuICAgICAgICAgICAgICAgICAgICB3YWxrZXIuY3VycmVudE5vZGUgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHdhbGtlci5uZXh0Tm9kZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFdlJ3ZlIGFycml2ZWQgYXQgb3VyIHBhcnQncyBub2RlLlxuICAgICAgICAgICAgaWYgKHBhcnQudHlwZSA9PT0gJ25vZGUnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFydCA9IHRoaXMucHJvY2Vzc29yLmhhbmRsZVRleHRFeHByZXNzaW9uKHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcGFydC5pbnNlcnRBZnRlck5vZGUobm9kZS5wcmV2aW91c1NpYmxpbmcpO1xuICAgICAgICAgICAgICAgIHRoaXMuX19wYXJ0cy5wdXNoKHBhcnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fX3BhcnRzLnB1c2goLi4udGhpcy5wcm9jZXNzb3IuaGFuZGxlQXR0cmlidXRlRXhwcmVzc2lvbnMobm9kZSwgcGFydC5uYW1lLCBwYXJ0LnN0cmluZ3MsIHRoaXMub3B0aW9ucykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFydEluZGV4Kys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ0VQb2x5ZmlsbCkge1xuICAgICAgICAgICAgZG9jdW1lbnQuYWRvcHROb2RlKGZyYWdtZW50KTtcbiAgICAgICAgICAgIGN1c3RvbUVsZW1lbnRzLnVwZ3JhZGUoZnJhZ21lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmcmFnbWVudDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZW1wbGF0ZS1pbnN0YW5jZS5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG4vKipcbiAqIEBtb2R1bGUgbGl0LWh0bWxcbiAqL1xuaW1wb3J0IHsgcmVwYXJlbnROb2RlcyB9IGZyb20gJy4vZG9tLmpzJztcbmltcG9ydCB7IGJvdW5kQXR0cmlidXRlU3VmZml4LCBsYXN0QXR0cmlidXRlTmFtZVJlZ2V4LCBtYXJrZXIsIG5vZGVNYXJrZXIgfSBmcm9tICcuL3RlbXBsYXRlLmpzJztcbi8qKlxuICogT3VyIFRydXN0ZWRUeXBlUG9saWN5IGZvciBIVE1MIHdoaWNoIGlzIGRlY2xhcmVkIHVzaW5nIHRoZSBodG1sIHRlbXBsYXRlXG4gKiB0YWcgZnVuY3Rpb24uXG4gKlxuICogVGhhdCBIVE1MIGlzIGEgZGV2ZWxvcGVyLWF1dGhvcmVkIGNvbnN0YW50LCBhbmQgaXMgcGFyc2VkIHdpdGggaW5uZXJIVE1MXG4gKiBiZWZvcmUgYW55IHVudHJ1c3RlZCBleHByZXNzaW9ucyBoYXZlIGJlZW4gbWl4ZWQgaW4uIFRoZXJlZm9yIGl0IGlzXG4gKiBjb25zaWRlcmVkIHNhZmUgYnkgY29uc3RydWN0aW9uLlxuICovXG5jb25zdCBwb2xpY3kgPSB3aW5kb3cudHJ1c3RlZFR5cGVzICYmXG4gICAgdHJ1c3RlZFR5cGVzLmNyZWF0ZVBvbGljeSgnbGl0LWh0bWwnLCB7IGNyZWF0ZUhUTUw6IChzKSA9PiBzIH0pO1xuY29uc3QgY29tbWVudE1hcmtlciA9IGAgJHttYXJrZXJ9IGA7XG4vKipcbiAqIFRoZSByZXR1cm4gdHlwZSBvZiBgaHRtbGAsIHdoaWNoIGhvbGRzIGEgVGVtcGxhdGUgYW5kIHRoZSB2YWx1ZXMgZnJvbVxuICogaW50ZXJwb2xhdGVkIGV4cHJlc3Npb25zLlxuICovXG5leHBvcnQgY2xhc3MgVGVtcGxhdGVSZXN1bHQge1xuICAgIGNvbnN0cnVjdG9yKHN0cmluZ3MsIHZhbHVlcywgdHlwZSwgcHJvY2Vzc29yKSB7XG4gICAgICAgIHRoaXMuc3RyaW5ncyA9IHN0cmluZ3M7XG4gICAgICAgIHRoaXMudmFsdWVzID0gdmFsdWVzO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnByb2Nlc3NvciA9IHByb2Nlc3NvcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHN0cmluZyBvZiBIVE1MIHVzZWQgdG8gY3JlYXRlIGEgYDx0ZW1wbGF0ZT5gIGVsZW1lbnQuXG4gICAgICovXG4gICAgZ2V0SFRNTCgpIHtcbiAgICAgICAgY29uc3QgbCA9IHRoaXMuc3RyaW5ncy5sZW5ndGggLSAxO1xuICAgICAgICBsZXQgaHRtbCA9ICcnO1xuICAgICAgICBsZXQgaXNDb21tZW50QmluZGluZyA9IGZhbHNlO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgcyA9IHRoaXMuc3RyaW5nc1tpXTtcbiAgICAgICAgICAgIC8vIEZvciBlYWNoIGJpbmRpbmcgd2Ugd2FudCB0byBkZXRlcm1pbmUgdGhlIGtpbmQgb2YgbWFya2VyIHRvIGluc2VydFxuICAgICAgICAgICAgLy8gaW50byB0aGUgdGVtcGxhdGUgc291cmNlIGJlZm9yZSBpdCdzIHBhcnNlZCBieSB0aGUgYnJvd3NlcidzIEhUTUxcbiAgICAgICAgICAgIC8vIHBhcnNlci4gVGhlIG1hcmtlciB0eXBlIGlzIGJhc2VkIG9uIHdoZXRoZXIgdGhlIGV4cHJlc3Npb24gaXMgaW4gYW5cbiAgICAgICAgICAgIC8vIGF0dHJpYnV0ZSwgdGV4dCwgb3IgY29tbWVudCBwb3NpdGlvbi5cbiAgICAgICAgICAgIC8vICAgKiBGb3Igbm9kZS1wb3NpdGlvbiBiaW5kaW5ncyB3ZSBpbnNlcnQgYSBjb21tZW50IHdpdGggdGhlIG1hcmtlclxuICAgICAgICAgICAgLy8gICAgIHNlbnRpbmVsIGFzIGl0cyB0ZXh0IGNvbnRlbnQsIGxpa2UgPCEtLXt7bGl0LWd1aWR9fS0tPi5cbiAgICAgICAgICAgIC8vICAgKiBGb3IgYXR0cmlidXRlIGJpbmRpbmdzIHdlIGluc2VydCBqdXN0IHRoZSBtYXJrZXIgc2VudGluZWwgZm9yIHRoZVxuICAgICAgICAgICAgLy8gICAgIGZpcnN0IGJpbmRpbmcsIHNvIHRoYXQgd2Ugc3VwcG9ydCB1bnF1b3RlZCBhdHRyaWJ1dGUgYmluZGluZ3MuXG4gICAgICAgICAgICAvLyAgICAgU3Vic2VxdWVudCBiaW5kaW5ncyBjYW4gdXNlIGEgY29tbWVudCBtYXJrZXIgYmVjYXVzZSBtdWx0aS1iaW5kaW5nXG4gICAgICAgICAgICAvLyAgICAgYXR0cmlidXRlcyBtdXN0IGJlIHF1b3RlZC5cbiAgICAgICAgICAgIC8vICAgKiBGb3IgY29tbWVudCBiaW5kaW5ncyB3ZSBpbnNlcnQganVzdCB0aGUgbWFya2VyIHNlbnRpbmVsIHNvIHdlIGRvbid0XG4gICAgICAgICAgICAvLyAgICAgY2xvc2UgdGhlIGNvbW1lbnQuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBjb2RlIHNjYW5zIHRoZSB0ZW1wbGF0ZSBzb3VyY2UsIGJ1dCBpcyAqbm90KiBhbiBIVE1MXG4gICAgICAgICAgICAvLyBwYXJzZXIuIFdlIGRvbid0IG5lZWQgdG8gdHJhY2sgdGhlIHRyZWUgc3RydWN0dXJlIG9mIHRoZSBIVE1MLCBvbmx5XG4gICAgICAgICAgICAvLyB3aGV0aGVyIGEgYmluZGluZyBpcyBpbnNpZGUgYSBjb21tZW50LCBhbmQgaWYgbm90LCBpZiBpdCBhcHBlYXJzIHRvIGJlXG4gICAgICAgICAgICAvLyB0aGUgZmlyc3QgYmluZGluZyBpbiBhbiBhdHRyaWJ1dGUuXG4gICAgICAgICAgICBjb25zdCBjb21tZW50T3BlbiA9IHMubGFzdEluZGV4T2YoJzwhLS0nKTtcbiAgICAgICAgICAgIC8vIFdlJ3JlIGluIGNvbW1lbnQgcG9zaXRpb24gaWYgd2UgaGF2ZSBhIGNvbW1lbnQgb3BlbiB3aXRoIG5vIGZvbGxvd2luZ1xuICAgICAgICAgICAgLy8gY29tbWVudCBjbG9zZS4gQmVjYXVzZSA8LS0gY2FuIGFwcGVhciBpbiBhbiBhdHRyaWJ1dGUgdmFsdWUgdGhlcmUgY2FuXG4gICAgICAgICAgICAvLyBiZSBmYWxzZSBwb3NpdGl2ZXMuXG4gICAgICAgICAgICBpc0NvbW1lbnRCaW5kaW5nID0gKGNvbW1lbnRPcGVuID4gLTEgfHwgaXNDb21tZW50QmluZGluZykgJiZcbiAgICAgICAgICAgICAgICBzLmluZGV4T2YoJy0tPicsIGNvbW1lbnRPcGVuICsgMSkgPT09IC0xO1xuICAgICAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYW4gYXR0cmlidXRlLWxpa2Ugc2VxdWVuY2UgcHJlY2VkaW5nIHRoZVxuICAgICAgICAgICAgLy8gZXhwcmVzc2lvbi4gVGhpcyBjYW4gbWF0Y2ggXCJuYW1lPXZhbHVlXCIgbGlrZSBzdHJ1Y3R1cmVzIGluIHRleHQsXG4gICAgICAgICAgICAvLyBjb21tZW50cywgYW5kIGF0dHJpYnV0ZSB2YWx1ZXMsIHNvIHRoZXJlIGNhbiBiZSBmYWxzZS1wb3NpdGl2ZXMuXG4gICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVNYXRjaCA9IGxhc3RBdHRyaWJ1dGVOYW1lUmVnZXguZXhlYyhzKTtcbiAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVNYXRjaCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIFdlJ3JlIG9ubHkgaW4gdGhpcyBicmFuY2ggaWYgd2UgZG9uJ3QgaGF2ZSBhIGF0dHJpYnV0ZS1saWtlXG4gICAgICAgICAgICAgICAgLy8gcHJlY2VkaW5nIHNlcXVlbmNlLiBGb3IgY29tbWVudHMsIHRoaXMgZ3VhcmRzIGFnYWluc3QgdW51c3VhbFxuICAgICAgICAgICAgICAgIC8vIGF0dHJpYnV0ZSB2YWx1ZXMgbGlrZSA8ZGl2IGZvbz1cIjwhLS0keydiYXInfVwiPi4gQ2FzZXMgbGlrZVxuICAgICAgICAgICAgICAgIC8vIDwhLS0gZm9vPSR7J2Jhcid9LS0+IGFyZSBoYW5kbGVkIGNvcnJlY3RseSBpbiB0aGUgYXR0cmlidXRlIGJyYW5jaFxuICAgICAgICAgICAgICAgIC8vIGJlbG93LlxuICAgICAgICAgICAgICAgIGh0bWwgKz0gcyArIChpc0NvbW1lbnRCaW5kaW5nID8gY29tbWVudE1hcmtlciA6IG5vZGVNYXJrZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gRm9yIGF0dHJpYnV0ZXMgd2UgdXNlIGp1c3QgYSBtYXJrZXIgc2VudGluZWwsIGFuZCBhbHNvIGFwcGVuZCBhXG4gICAgICAgICAgICAgICAgLy8gJGxpdCQgc3VmZml4IHRvIHRoZSBuYW1lIHRvIG9wdC1vdXQgb2YgYXR0cmlidXRlLXNwZWNpZmljIHBhcnNpbmdcbiAgICAgICAgICAgICAgICAvLyB0aGF0IElFIGFuZCBFZGdlIGRvIGZvciBzdHlsZSBhbmQgY2VydGFpbiBTVkcgYXR0cmlidXRlcy5cbiAgICAgICAgICAgICAgICBodG1sICs9IHMuc3Vic3RyKDAsIGF0dHJpYnV0ZU1hdGNoLmluZGV4KSArIGF0dHJpYnV0ZU1hdGNoWzFdICtcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlTWF0Y2hbMl0gKyBib3VuZEF0dHJpYnV0ZVN1ZmZpeCArIGF0dHJpYnV0ZU1hdGNoWzNdICtcbiAgICAgICAgICAgICAgICAgICAgbWFya2VyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGh0bWwgKz0gdGhpcy5zdHJpbmdzW2xdO1xuICAgICAgICByZXR1cm4gaHRtbDtcbiAgICB9XG4gICAgZ2V0VGVtcGxhdGVFbGVtZW50KCkge1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG4gICAgICAgIGxldCB2YWx1ZSA9IHRoaXMuZ2V0SFRNTCgpO1xuICAgICAgICBpZiAocG9saWN5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgc2VjdXJlIGJlY2F1c2UgYHRoaXMuc3RyaW5nc2AgaXMgYSBUZW1wbGF0ZVN0cmluZ3NBcnJheS5cbiAgICAgICAgICAgIC8vIFRPRE86IHZhbGlkYXRlIHRoaXMgd2hlblxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtYXJyYXktaXMtdGVtcGxhdGUtb2JqZWN0IGlzXG4gICAgICAgICAgICAvLyBpbXBsZW1lbnRlZC5cbiAgICAgICAgICAgIHZhbHVlID0gcG9saWN5LmNyZWF0ZUhUTUwodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgfVxufVxuLyoqXG4gKiBBIFRlbXBsYXRlUmVzdWx0IGZvciBTVkcgZnJhZ21lbnRzLlxuICpcbiAqIFRoaXMgY2xhc3Mgd3JhcHMgSFRNTCBpbiBhbiBgPHN2Zz5gIHRhZyBpbiBvcmRlciB0byBwYXJzZSBpdHMgY29udGVudHMgaW4gdGhlXG4gKiBTVkcgbmFtZXNwYWNlLCB0aGVuIG1vZGlmaWVzIHRoZSB0ZW1wbGF0ZSB0byByZW1vdmUgdGhlIGA8c3ZnPmAgdGFnIHNvIHRoYXRcbiAqIGNsb25lcyBvbmx5IGNvbnRhaW5lciB0aGUgb3JpZ2luYWwgZnJhZ21lbnQuXG4gKi9cbmV4cG9ydCBjbGFzcyBTVkdUZW1wbGF0ZVJlc3VsdCBleHRlbmRzIFRlbXBsYXRlUmVzdWx0IHtcbiAgICBnZXRIVE1MKCkge1xuICAgICAgICByZXR1cm4gYDxzdmc+JHtzdXBlci5nZXRIVE1MKCl9PC9zdmc+YDtcbiAgICB9XG4gICAgZ2V0VGVtcGxhdGVFbGVtZW50KCkge1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IHN1cGVyLmdldFRlbXBsYXRlRWxlbWVudCgpO1xuICAgICAgICBjb25zdCBjb250ZW50ID0gdGVtcGxhdGUuY29udGVudDtcbiAgICAgICAgY29uc3Qgc3ZnRWxlbWVudCA9IGNvbnRlbnQuZmlyc3RDaGlsZDtcbiAgICAgICAgY29udGVudC5yZW1vdmVDaGlsZChzdmdFbGVtZW50KTtcbiAgICAgICAgcmVwYXJlbnROb2Rlcyhjb250ZW50LCBzdmdFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGVtcGxhdGUtcmVzdWx0LmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbmltcG9ydCB7IGlzRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmUuanMnO1xuaW1wb3J0IHsgcmVtb3ZlTm9kZXMgfSBmcm9tICcuL2RvbS5qcyc7XG5pbXBvcnQgeyBub0NoYW5nZSwgbm90aGluZyB9IGZyb20gJy4vcGFydC5qcyc7XG5pbXBvcnQgeyBUZW1wbGF0ZUluc3RhbmNlIH0gZnJvbSAnLi90ZW1wbGF0ZS1pbnN0YW5jZS5qcyc7XG5pbXBvcnQgeyBUZW1wbGF0ZVJlc3VsdCB9IGZyb20gJy4vdGVtcGxhdGUtcmVzdWx0LmpzJztcbmltcG9ydCB7IGNyZWF0ZU1hcmtlciB9IGZyb20gJy4vdGVtcGxhdGUuanMnO1xuZXhwb3J0IGNvbnN0IGlzUHJpbWl0aXZlID0gKHZhbHVlKSA9PiB7XG4gICAgcmV0dXJuICh2YWx1ZSA9PT0gbnVsbCB8fFxuICAgICAgICAhKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSk7XG59O1xuZXhwb3J0IGNvbnN0IGlzSXRlcmFibGUgPSAodmFsdWUpID0+IHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHxcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgISEodmFsdWUgJiYgdmFsdWVbU3ltYm9sLml0ZXJhdG9yXSk7XG59O1xuLyoqXG4gKiBXcml0ZXMgYXR0cmlidXRlIHZhbHVlcyB0byB0aGUgRE9NIGZvciBhIGdyb3VwIG9mIEF0dHJpYnV0ZVBhcnRzIGJvdW5kIHRvIGFcbiAqIHNpbmdsZSBhdHRyaWJ1dGUuIFRoZSB2YWx1ZSBpcyBvbmx5IHNldCBvbmNlIGV2ZW4gaWYgdGhlcmUgYXJlIG11bHRpcGxlIHBhcnRzXG4gKiBmb3IgYW4gYXR0cmlidXRlLlxuICovXG5leHBvcnQgY2xhc3MgQXR0cmlidXRlQ29tbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBuYW1lLCBzdHJpbmdzKSB7XG4gICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnN0cmluZ3MgPSBzdHJpbmdzO1xuICAgICAgICB0aGlzLnBhcnRzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyaW5ncy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMucGFydHNbaV0gPSB0aGlzLl9jcmVhdGVQYXJ0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNpbmdsZSBwYXJ0LiBPdmVycmlkZSB0aGlzIHRvIGNyZWF0ZSBhIGRpZmZlcm50IHR5cGUgb2YgcGFydC5cbiAgICAgKi9cbiAgICBfY3JlYXRlUGFydCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBdHRyaWJ1dGVQYXJ0KHRoaXMpO1xuICAgIH1cbiAgICBfZ2V0VmFsdWUoKSB7XG4gICAgICAgIGNvbnN0IHN0cmluZ3MgPSB0aGlzLnN0cmluZ3M7XG4gICAgICAgIGNvbnN0IGwgPSBzdHJpbmdzLmxlbmd0aCAtIDE7XG4gICAgICAgIGNvbnN0IHBhcnRzID0gdGhpcy5wYXJ0cztcbiAgICAgICAgLy8gSWYgd2UncmUgYXNzaWduaW5nIGFuIGF0dHJpYnV0ZSB2aWEgc3ludGF4IGxpa2U6XG4gICAgICAgIC8vICAgIGF0dHI9XCIke2Zvb31cIiAgb3IgIGF0dHI9JHtmb299XG4gICAgICAgIC8vIGJ1dCBub3RcbiAgICAgICAgLy8gICAgYXR0cj1cIiR7Zm9vfSAke2Jhcn1cIiBvciBhdHRyPVwiJHtmb299IGJhelwiXG4gICAgICAgIC8vIHRoZW4gd2UgZG9uJ3Qgd2FudCB0byBjb2VyY2UgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBpbnRvIG9uZSBsb25nXG4gICAgICAgIC8vIHN0cmluZy4gSW5zdGVhZCB3ZSB3YW50IHRvIGp1c3QgcmV0dXJuIHRoZSB2YWx1ZSBpdHNlbGYgZGlyZWN0bHksXG4gICAgICAgIC8vIHNvIHRoYXQgc2FuaXRpemVET01WYWx1ZSBjYW4gZ2V0IHRoZSBhY3R1YWwgdmFsdWUgcmF0aGVyIHRoYW5cbiAgICAgICAgLy8gU3RyaW5nKHZhbHVlKVxuICAgICAgICAvLyBUaGUgZXhjZXB0aW9uIGlzIGlmIHYgaXMgYW4gYXJyYXksIGluIHdoaWNoIGNhc2Ugd2UgZG8gd2FudCB0byBzbWFzaFxuICAgICAgICAvLyBpdCB0b2dldGhlciBpbnRvIGEgc3RyaW5nIHdpdGhvdXQgY2FsbGluZyBTdHJpbmcoKSBvbiB0aGUgYXJyYXkuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFRoaXMgYWxzbyBhbGxvd3MgdHJ1c3RlZCB2YWx1ZXMgKHdoZW4gdXNpbmcgVHJ1c3RlZFR5cGVzKSBiZWluZ1xuICAgICAgICAvLyBhc3NpZ25lZCB0byBET00gc2lua3Mgd2l0aG91dCBiZWluZyBzdHJpbmdpZmllZCBpbiB0aGUgcHJvY2Vzcy5cbiAgICAgICAgaWYgKGwgPT09IDEgJiYgc3RyaW5nc1swXSA9PT0gJycgJiYgc3RyaW5nc1sxXSA9PT0gJycpIHtcbiAgICAgICAgICAgIGNvbnN0IHYgPSBwYXJ0c1swXS52YWx1ZTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdiA9PT0gJ3N5bWJvbCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nKHYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2ID09PSAnc3RyaW5nJyB8fCAhaXNJdGVyYWJsZSh2KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCB0ZXh0ID0gJyc7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICB0ZXh0ICs9IHN0cmluZ3NbaV07XG4gICAgICAgICAgICBjb25zdCBwYXJ0ID0gcGFydHNbaV07XG4gICAgICAgICAgICBpZiAocGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdiA9IHBhcnQudmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKGlzUHJpbWl0aXZlKHYpIHx8ICFpc0l0ZXJhYmxlKHYpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHQgKz0gdHlwZW9mIHYgPT09ICdzdHJpbmcnID8gdiA6IFN0cmluZyh2KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiB2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9IHR5cGVvZiB0ID09PSAnc3RyaW5nJyA/IHQgOiBTdHJpbmcodCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGV4dCArPSBzdHJpbmdzW2xdO1xuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG4gICAgY29tbWl0KCkge1xuICAgICAgICBpZiAodGhpcy5kaXJ0eSkge1xuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSh0aGlzLm5hbWUsIHRoaXMuX2dldFZhbHVlKCkpO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBBIFBhcnQgdGhhdCBjb250cm9scyBhbGwgb3IgcGFydCBvZiBhbiBhdHRyaWJ1dGUgdmFsdWUuXG4gKi9cbmV4cG9ydCBjbGFzcyBBdHRyaWJ1dGVQYXJ0IHtcbiAgICBjb25zdHJ1Y3Rvcihjb21taXR0ZXIpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jb21taXR0ZXIgPSBjb21taXR0ZXI7XG4gICAgfVxuICAgIHNldFZhbHVlKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbm9DaGFuZ2UgJiYgKCFpc1ByaW1pdGl2ZSh2YWx1ZSkgfHwgdmFsdWUgIT09IHRoaXMudmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAvLyBJZiB0aGUgdmFsdWUgaXMgYSBub3QgYSBkaXJlY3RpdmUsIGRpcnR5IHRoZSBjb21taXR0ZXIgc28gdGhhdCBpdCdsbFxuICAgICAgICAgICAgLy8gY2FsbCBzZXRBdHRyaWJ1dGUuIElmIHRoZSB2YWx1ZSBpcyBhIGRpcmVjdGl2ZSwgaXQnbGwgZGlydHkgdGhlXG4gICAgICAgICAgICAvLyBjb21taXR0ZXIgaWYgaXQgY2FsbHMgc2V0VmFsdWUoKS5cbiAgICAgICAgICAgIGlmICghaXNEaXJlY3RpdmUodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb21taXR0ZXIuZGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNvbW1pdCgpIHtcbiAgICAgICAgd2hpbGUgKGlzRGlyZWN0aXZlKHRoaXMudmFsdWUpKSB7XG4gICAgICAgICAgICBjb25zdCBkaXJlY3RpdmUgPSB0aGlzLnZhbHVlO1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IG5vQ2hhbmdlO1xuICAgICAgICAgICAgZGlyZWN0aXZlKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnZhbHVlID09PSBub0NoYW5nZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29tbWl0dGVyLmNvbW1pdCgpO1xuICAgIH1cbn1cbi8qKlxuICogQSBQYXJ0IHRoYXQgY29udHJvbHMgYSBsb2NhdGlvbiB3aXRoaW4gYSBOb2RlIHRyZWUuIExpa2UgYSBSYW5nZSwgTm9kZVBhcnRcbiAqIGhhcyBzdGFydCBhbmQgZW5kIGxvY2F0aW9ucyBhbmQgY2FuIHNldCBhbmQgdXBkYXRlIHRoZSBOb2RlcyBiZXR3ZWVuIHRob3NlXG4gKiBsb2NhdGlvbnMuXG4gKlxuICogTm9kZVBhcnRzIHN1cHBvcnQgc2V2ZXJhbCB2YWx1ZSB0eXBlczogcHJpbWl0aXZlcywgTm9kZXMsIFRlbXBsYXRlUmVzdWx0cyxcbiAqIGFzIHdlbGwgYXMgYXJyYXlzIGFuZCBpdGVyYWJsZXMgb2YgdGhvc2UgdHlwZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBOb2RlUGFydCB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB0aGlzLnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBcHBlbmRzIHRoaXMgcGFydCBpbnRvIGEgY29udGFpbmVyLlxuICAgICAqXG4gICAgICogVGhpcyBwYXJ0IG11c3QgYmUgZW1wdHksIGFzIGl0cyBjb250ZW50cyBhcmUgbm90IGF1dG9tYXRpY2FsbHkgbW92ZWQuXG4gICAgICovXG4gICAgYXBwZW5kSW50byhjb250YWluZXIpIHtcbiAgICAgICAgdGhpcy5zdGFydE5vZGUgPSBjb250YWluZXIuYXBwZW5kQ2hpbGQoY3JlYXRlTWFya2VyKCkpO1xuICAgICAgICB0aGlzLmVuZE5vZGUgPSBjb250YWluZXIuYXBwZW5kQ2hpbGQoY3JlYXRlTWFya2VyKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnNlcnRzIHRoaXMgcGFydCBhZnRlciB0aGUgYHJlZmAgbm9kZSAoYmV0d2VlbiBgcmVmYCBhbmQgYHJlZmAncyBuZXh0XG4gICAgICogc2libGluZykuIEJvdGggYHJlZmAgYW5kIGl0cyBuZXh0IHNpYmxpbmcgbXVzdCBiZSBzdGF0aWMsIHVuY2hhbmdpbmcgbm9kZXNcbiAgICAgKiBzdWNoIGFzIHRob3NlIHRoYXQgYXBwZWFyIGluIGEgbGl0ZXJhbCBzZWN0aW9uIG9mIGEgdGVtcGxhdGUuXG4gICAgICpcbiAgICAgKiBUaGlzIHBhcnQgbXVzdCBiZSBlbXB0eSwgYXMgaXRzIGNvbnRlbnRzIGFyZSBub3QgYXV0b21hdGljYWxseSBtb3ZlZC5cbiAgICAgKi9cbiAgICBpbnNlcnRBZnRlck5vZGUocmVmKSB7XG4gICAgICAgIHRoaXMuc3RhcnROb2RlID0gcmVmO1xuICAgICAgICB0aGlzLmVuZE5vZGUgPSByZWYubmV4dFNpYmxpbmc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGVuZHMgdGhpcyBwYXJ0IGludG8gYSBwYXJlbnQgcGFydC5cbiAgICAgKlxuICAgICAqIFRoaXMgcGFydCBtdXN0IGJlIGVtcHR5LCBhcyBpdHMgY29udGVudHMgYXJlIG5vdCBhdXRvbWF0aWNhbGx5IG1vdmVkLlxuICAgICAqL1xuICAgIGFwcGVuZEludG9QYXJ0KHBhcnQpIHtcbiAgICAgICAgcGFydC5fX2luc2VydCh0aGlzLnN0YXJ0Tm9kZSA9IGNyZWF0ZU1hcmtlcigpKTtcbiAgICAgICAgcGFydC5fX2luc2VydCh0aGlzLmVuZE5vZGUgPSBjcmVhdGVNYXJrZXIoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluc2VydHMgdGhpcyBwYXJ0IGFmdGVyIHRoZSBgcmVmYCBwYXJ0LlxuICAgICAqXG4gICAgICogVGhpcyBwYXJ0IG11c3QgYmUgZW1wdHksIGFzIGl0cyBjb250ZW50cyBhcmUgbm90IGF1dG9tYXRpY2FsbHkgbW92ZWQuXG4gICAgICovXG4gICAgaW5zZXJ0QWZ0ZXJQYXJ0KHJlZikge1xuICAgICAgICByZWYuX19pbnNlcnQodGhpcy5zdGFydE5vZGUgPSBjcmVhdGVNYXJrZXIoKSk7XG4gICAgICAgIHRoaXMuZW5kTm9kZSA9IHJlZi5lbmROb2RlO1xuICAgICAgICByZWYuZW5kTm9kZSA9IHRoaXMuc3RhcnROb2RlO1xuICAgIH1cbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGNvbW1pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhcnROb2RlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoaXNEaXJlY3RpdmUodGhpcy5fX3BlbmRpbmdWYWx1ZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGl2ZSA9IHRoaXMuX19wZW5kaW5nVmFsdWU7XG4gICAgICAgICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gbm9DaGFuZ2U7XG4gICAgICAgICAgICBkaXJlY3RpdmUodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLl9fcGVuZGluZ1ZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgPT09IG5vQ2hhbmdlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJpbWl0aXZlKHZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB0aGlzLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fX2NvbW1pdFRleHQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIHRoaXMuX19jb21taXRUZW1wbGF0ZVJlc3VsdCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBOb2RlKSB7XG4gICAgICAgICAgICB0aGlzLl9fY29tbWl0Tm9kZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNJdGVyYWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX19jb21taXRJdGVyYWJsZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUgPT09IG5vdGhpbmcpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBub3RoaW5nO1xuICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gRmFsbGJhY2ssIHdpbGwgcmVuZGVyIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb25cbiAgICAgICAgICAgIHRoaXMuX19jb21taXRUZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfX2luc2VydChub2RlKSB7XG4gICAgICAgIHRoaXMuZW5kTm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCB0aGlzLmVuZE5vZGUpO1xuICAgIH1cbiAgICBfX2NvbW1pdE5vZGUodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMudmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICB0aGlzLl9faW5zZXJ0KHZhbHVlKTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBfX2NvbW1pdFRleHQodmFsdWUpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xuICAgICAgICAvLyBJZiBgdmFsdWVgIGlzbid0IGFscmVhZHkgYSBzdHJpbmcsIHdlIGV4cGxpY2l0bHkgY29udmVydCBpdCBoZXJlIGluIGNhc2VcbiAgICAgICAgLy8gaXQgY2FuJ3QgYmUgaW1wbGljaXRseSBjb252ZXJ0ZWQgLSBpLmUuIGl0J3MgYSBzeW1ib2wuXG4gICAgICAgIGNvbnN0IHZhbHVlQXNTdHJpbmcgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gdmFsdWUgOiBTdHJpbmcodmFsdWUpO1xuICAgICAgICBpZiAobm9kZSA9PT0gdGhpcy5lbmROb2RlLnByZXZpb3VzU2libGluZyAmJlxuICAgICAgICAgICAgbm9kZS5ub2RlVHlwZSA9PT0gMyAvKiBOb2RlLlRFWFRfTk9ERSAqLykge1xuICAgICAgICAgICAgLy8gSWYgd2Ugb25seSBoYXZlIGEgc2luZ2xlIHRleHQgbm9kZSBiZXR3ZWVuIHRoZSBtYXJrZXJzLCB3ZSBjYW4ganVzdFxuICAgICAgICAgICAgLy8gc2V0IGl0cyB2YWx1ZSwgcmF0aGVyIHRoYW4gcmVwbGFjaW5nIGl0LlxuICAgICAgICAgICAgLy8gVE9ETyhqdXN0aW5mYWduYW5pKTogQ2FuIHdlIGp1c3QgY2hlY2sgaWYgdGhpcy52YWx1ZSBpcyBwcmltaXRpdmU/XG4gICAgICAgICAgICBub2RlLmRhdGEgPSB2YWx1ZUFzU3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fX2NvbW1pdE5vZGUoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodmFsdWVBc1N0cmluZykpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgX19jb21taXRUZW1wbGF0ZVJlc3VsdCh2YWx1ZSkge1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRoaXMub3B0aW9ucy50ZW1wbGF0ZUZhY3RvcnkodmFsdWUpO1xuICAgICAgICBpZiAodGhpcy52YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlSW5zdGFuY2UgJiZcbiAgICAgICAgICAgIHRoaXMudmFsdWUudGVtcGxhdGUgPT09IHRlbXBsYXRlKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlLnVwZGF0ZSh2YWx1ZS52YWx1ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHdlIHByb3BhZ2F0ZSB0aGUgdGVtcGxhdGUgcHJvY2Vzc29yIGZyb20gdGhlIFRlbXBsYXRlUmVzdWx0XG4gICAgICAgICAgICAvLyBzbyB0aGF0IHdlIHVzZSBpdHMgc3ludGF4IGV4dGVuc2lvbiwgZXRjLiBUaGUgdGVtcGxhdGUgZmFjdG9yeSBjb21lc1xuICAgICAgICAgICAgLy8gZnJvbSB0aGUgcmVuZGVyIGZ1bmN0aW9uIG9wdGlvbnMgc28gdGhhdCBpdCBjYW4gY29udHJvbCB0ZW1wbGF0ZVxuICAgICAgICAgICAgLy8gY2FjaGluZyBhbmQgcHJlcHJvY2Vzc2luZy5cbiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gbmV3IFRlbXBsYXRlSW5zdGFuY2UodGVtcGxhdGUsIHZhbHVlLnByb2Nlc3NvciwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGZyYWdtZW50ID0gaW5zdGFuY2UuX2Nsb25lKCk7XG4gICAgICAgICAgICBpbnN0YW5jZS51cGRhdGUodmFsdWUudmFsdWVzKTtcbiAgICAgICAgICAgIHRoaXMuX19jb21taXROb2RlKGZyYWdtZW50KTtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBpbnN0YW5jZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfX2NvbW1pdEl0ZXJhYmxlKHZhbHVlKSB7XG4gICAgICAgIC8vIEZvciBhbiBJdGVyYWJsZSwgd2UgY3JlYXRlIGEgbmV3IEluc3RhbmNlUGFydCBwZXIgaXRlbSwgdGhlbiBzZXQgaXRzXG4gICAgICAgIC8vIHZhbHVlIHRvIHRoZSBpdGVtLiBUaGlzIGlzIGEgbGl0dGxlIGJpdCBvZiBvdmVyaGVhZCBmb3IgZXZlcnkgaXRlbSBpblxuICAgICAgICAvLyBhbiBJdGVyYWJsZSwgYnV0IGl0IGxldHMgdXMgcmVjdXJzZSBlYXNpbHkgYW5kIGVmZmljaWVudGx5IHVwZGF0ZSBBcnJheXNcbiAgICAgICAgLy8gb2YgVGVtcGxhdGVSZXN1bHRzIHRoYXQgd2lsbCBiZSBjb21tb25seSByZXR1cm5lZCBmcm9tIGV4cHJlc3Npb25zIGxpa2U6XG4gICAgICAgIC8vIGFycmF5Lm1hcCgoaSkgPT4gaHRtbGAke2l9YCksIGJ5IHJldXNpbmcgZXhpc3RpbmcgVGVtcGxhdGVJbnN0YW5jZXMuXG4gICAgICAgIC8vIElmIF92YWx1ZSBpcyBhbiBhcnJheSwgdGhlbiB0aGUgcHJldmlvdXMgcmVuZGVyIHdhcyBvZiBhblxuICAgICAgICAvLyBpdGVyYWJsZSBhbmQgX3ZhbHVlIHdpbGwgY29udGFpbiB0aGUgTm9kZVBhcnRzIGZyb20gdGhlIHByZXZpb3VzXG4gICAgICAgIC8vIHJlbmRlci4gSWYgX3ZhbHVlIGlzIG5vdCBhbiBhcnJheSwgY2xlYXIgdGhpcyBwYXJ0IGFuZCBtYWtlIGEgbmV3XG4gICAgICAgIC8vIGFycmF5IGZvciBOb2RlUGFydHMuXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh0aGlzLnZhbHVlKSkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIC8vIExldHMgdXMga2VlcCB0cmFjayBvZiBob3cgbWFueSBpdGVtcyB3ZSBzdGFtcGVkIHNvIHdlIGNhbiBjbGVhciBsZWZ0b3ZlclxuICAgICAgICAvLyBpdGVtcyBmcm9tIGEgcHJldmlvdXMgcmVuZGVyXG4gICAgICAgIGNvbnN0IGl0ZW1QYXJ0cyA9IHRoaXMudmFsdWU7XG4gICAgICAgIGxldCBwYXJ0SW5kZXggPSAwO1xuICAgICAgICBsZXQgaXRlbVBhcnQ7XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB2YWx1ZSkge1xuICAgICAgICAgICAgLy8gVHJ5IHRvIHJldXNlIGFuIGV4aXN0aW5nIHBhcnRcbiAgICAgICAgICAgIGl0ZW1QYXJ0ID0gaXRlbVBhcnRzW3BhcnRJbmRleF07XG4gICAgICAgICAgICAvLyBJZiBubyBleGlzdGluZyBwYXJ0LCBjcmVhdGUgYSBuZXcgb25lXG4gICAgICAgICAgICBpZiAoaXRlbVBhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGl0ZW1QYXJ0ID0gbmV3IE5vZGVQYXJ0KHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgaXRlbVBhcnRzLnB1c2goaXRlbVBhcnQpO1xuICAgICAgICAgICAgICAgIGlmIChwYXJ0SW5kZXggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbVBhcnQuYXBwZW5kSW50b1BhcnQodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpdGVtUGFydC5pbnNlcnRBZnRlclBhcnQoaXRlbVBhcnRzW3BhcnRJbmRleCAtIDFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpdGVtUGFydC5zZXRWYWx1ZShpdGVtKTtcbiAgICAgICAgICAgIGl0ZW1QYXJ0LmNvbW1pdCgpO1xuICAgICAgICAgICAgcGFydEluZGV4Kys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRJbmRleCA8IGl0ZW1QYXJ0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIFRydW5jYXRlIHRoZSBwYXJ0cyBhcnJheSBzbyBfdmFsdWUgcmVmbGVjdHMgdGhlIGN1cnJlbnQgc3RhdGVcbiAgICAgICAgICAgIGl0ZW1QYXJ0cy5sZW5ndGggPSBwYXJ0SW5kZXg7XG4gICAgICAgICAgICB0aGlzLmNsZWFyKGl0ZW1QYXJ0ICYmIGl0ZW1QYXJ0LmVuZE5vZGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNsZWFyKHN0YXJ0Tm9kZSA9IHRoaXMuc3RhcnROb2RlKSB7XG4gICAgICAgIHJlbW92ZU5vZGVzKHRoaXMuc3RhcnROb2RlLnBhcmVudE5vZGUsIHN0YXJ0Tm9kZS5uZXh0U2libGluZywgdGhpcy5lbmROb2RlKTtcbiAgICB9XG59XG4vKipcbiAqIEltcGxlbWVudHMgYSBib29sZWFuIGF0dHJpYnV0ZSwgcm91Z2hseSBhcyBkZWZpbmVkIGluIHRoZSBIVE1MXG4gKiBzcGVjaWZpY2F0aW9uLlxuICpcbiAqIElmIHRoZSB2YWx1ZSBpcyB0cnV0aHksIHRoZW4gdGhlIGF0dHJpYnV0ZSBpcyBwcmVzZW50IHdpdGggYSB2YWx1ZSBvZlxuICogJycuIElmIHRoZSB2YWx1ZSBpcyBmYWxzZXksIHRoZSBhdHRyaWJ1dGUgaXMgcmVtb3ZlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIEJvb2xlYW5BdHRyaWJ1dGVQYXJ0IHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBuYW1lLCBzdHJpbmdzKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChzdHJpbmdzLmxlbmd0aCAhPT0gMiB8fCBzdHJpbmdzWzBdICE9PSAnJyB8fCBzdHJpbmdzWzFdICE9PSAnJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdCb29sZWFuIGF0dHJpYnV0ZXMgY2FuIG9ubHkgY29udGFpbiBhIHNpbmdsZSBleHByZXNzaW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5zdHJpbmdzID0gc3RyaW5ncztcbiAgICB9XG4gICAgc2V0VmFsdWUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBjb21taXQoKSB7XG4gICAgICAgIHdoaWxlIChpc0RpcmVjdGl2ZSh0aGlzLl9fcGVuZGluZ1ZhbHVlKSkge1xuICAgICAgICAgICAgY29uc3QgZGlyZWN0aXZlID0gdGhpcy5fX3BlbmRpbmdWYWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSBub0NoYW5nZTtcbiAgICAgICAgICAgIGRpcmVjdGl2ZSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fX3BlbmRpbmdWYWx1ZSA9PT0gbm9DaGFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2YWx1ZSA9ICEhdGhpcy5fX3BlbmRpbmdWYWx1ZTtcbiAgICAgICAgaWYgKHRoaXMudmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKHRoaXMubmFtZSwgJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSh0aGlzLm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSBub0NoYW5nZTtcbiAgICB9XG59XG4vKipcbiAqIFNldHMgYXR0cmlidXRlIHZhbHVlcyBmb3IgUHJvcGVydHlQYXJ0cywgc28gdGhhdCB0aGUgdmFsdWUgaXMgb25seSBzZXQgb25jZVxuICogZXZlbiBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgcGFydHMgZm9yIGEgcHJvcGVydHkuXG4gKlxuICogSWYgYW4gZXhwcmVzc2lvbiBjb250cm9scyB0aGUgd2hvbGUgcHJvcGVydHkgdmFsdWUsIHRoZW4gdGhlIHZhbHVlIGlzIHNpbXBseVxuICogYXNzaWduZWQgdG8gdGhlIHByb3BlcnR5IHVuZGVyIGNvbnRyb2wuIElmIHRoZXJlIGFyZSBzdHJpbmcgbGl0ZXJhbHMgb3JcbiAqIG11bHRpcGxlIGV4cHJlc3Npb25zLCB0aGVuIHRoZSBzdHJpbmdzIGFyZSBleHByZXNzaW9ucyBhcmUgaW50ZXJwb2xhdGVkIGludG9cbiAqIGEgc3RyaW5nIGZpcnN0LlxuICovXG5leHBvcnQgY2xhc3MgUHJvcGVydHlDb21taXR0ZXIgZXh0ZW5kcyBBdHRyaWJ1dGVDb21taXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG5hbWUsIHN0cmluZ3MpIHtcbiAgICAgICAgc3VwZXIoZWxlbWVudCwgbmFtZSwgc3RyaW5ncyk7XG4gICAgICAgIHRoaXMuc2luZ2xlID1cbiAgICAgICAgICAgIChzdHJpbmdzLmxlbmd0aCA9PT0gMiAmJiBzdHJpbmdzWzBdID09PSAnJyAmJiBzdHJpbmdzWzFdID09PSAnJyk7XG4gICAgfVxuICAgIF9jcmVhdGVQYXJ0KCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb3BlcnR5UGFydCh0aGlzKTtcbiAgICB9XG4gICAgX2dldFZhbHVlKCkge1xuICAgICAgICBpZiAodGhpcy5zaW5nbGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnRzWzBdLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5fZ2V0VmFsdWUoKTtcbiAgICB9XG4gICAgY29tbWl0KCkge1xuICAgICAgICBpZiAodGhpcy5kaXJ0eSkge1xuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudFt0aGlzLm5hbWVdID0gdGhpcy5fZ2V0VmFsdWUoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBQcm9wZXJ0eVBhcnQgZXh0ZW5kcyBBdHRyaWJ1dGVQYXJ0IHtcbn1cbi8vIERldGVjdCBldmVudCBsaXN0ZW5lciBvcHRpb25zIHN1cHBvcnQuIElmIHRoZSBgY2FwdHVyZWAgcHJvcGVydHkgaXMgcmVhZFxuLy8gZnJvbSB0aGUgb3B0aW9ucyBvYmplY3QsIHRoZW4gb3B0aW9ucyBhcmUgc3VwcG9ydGVkLiBJZiBub3QsIHRoZW4gdGhlIHRoaXJkXG4vLyBhcmd1bWVudCB0byBhZGQvcmVtb3ZlRXZlbnRMaXN0ZW5lciBpcyBpbnRlcnByZXRlZCBhcyB0aGUgYm9vbGVhbiBjYXB0dXJlXG4vLyB2YWx1ZSBzbyB3ZSBzaG91bGQgb25seSBwYXNzIHRoZSBgY2FwdHVyZWAgcHJvcGVydHkuXG5sZXQgZXZlbnRPcHRpb25zU3VwcG9ydGVkID0gZmFsc2U7XG4vLyBXcmFwIGludG8gYW4gSUlGRSBiZWNhdXNlIE1TIEVkZ2UgPD0gdjQxIGRvZXMgbm90IHN1cHBvcnQgaGF2aW5nIHRyeS9jYXRjaFxuLy8gYmxvY2tzIHJpZ2h0IGludG8gdGhlIGJvZHkgb2YgYSBtb2R1bGVcbigoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGdldCBjYXB0dXJlKCkge1xuICAgICAgICAgICAgICAgIGV2ZW50T3B0aW9uc1N1cHBvcnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIG9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndGVzdCcsIG9wdGlvbnMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBjYXRjaCAoX2UpIHtcbiAgICAgICAgLy8gZXZlbnQgb3B0aW9ucyBub3Qgc3VwcG9ydGVkXG4gICAgfVxufSkoKTtcbmV4cG9ydCBjbGFzcyBFdmVudFBhcnQge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGV2ZW50TmFtZSwgZXZlbnRDb250ZXh0KSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuZXZlbnROYW1lID0gZXZlbnROYW1lO1xuICAgICAgICB0aGlzLmV2ZW50Q29udGV4dCA9IGV2ZW50Q29udGV4dDtcbiAgICAgICAgdGhpcy5fX2JvdW5kSGFuZGxlRXZlbnQgPSAoZSkgPT4gdGhpcy5oYW5kbGVFdmVudChlKTtcbiAgICB9XG4gICAgc2V0VmFsdWUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBjb21taXQoKSB7XG4gICAgICAgIHdoaWxlIChpc0RpcmVjdGl2ZSh0aGlzLl9fcGVuZGluZ1ZhbHVlKSkge1xuICAgICAgICAgICAgY29uc3QgZGlyZWN0aXZlID0gdGhpcy5fX3BlbmRpbmdWYWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSBub0NoYW5nZTtcbiAgICAgICAgICAgIGRpcmVjdGl2ZSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fX3BlbmRpbmdWYWx1ZSA9PT0gbm9DaGFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdMaXN0ZW5lciA9IHRoaXMuX19wZW5kaW5nVmFsdWU7XG4gICAgICAgIGNvbnN0IG9sZExpc3RlbmVyID0gdGhpcy52YWx1ZTtcbiAgICAgICAgY29uc3Qgc2hvdWxkUmVtb3ZlTGlzdGVuZXIgPSBuZXdMaXN0ZW5lciA9PSBudWxsIHx8XG4gICAgICAgICAgICBvbGRMaXN0ZW5lciAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgKG5ld0xpc3RlbmVyLmNhcHR1cmUgIT09IG9sZExpc3RlbmVyLmNhcHR1cmUgfHxcbiAgICAgICAgICAgICAgICAgICAgbmV3TGlzdGVuZXIub25jZSAhPT0gb2xkTGlzdGVuZXIub25jZSB8fFxuICAgICAgICAgICAgICAgICAgICBuZXdMaXN0ZW5lci5wYXNzaXZlICE9PSBvbGRMaXN0ZW5lci5wYXNzaXZlKTtcbiAgICAgICAgY29uc3Qgc2hvdWxkQWRkTGlzdGVuZXIgPSBuZXdMaXN0ZW5lciAhPSBudWxsICYmIChvbGRMaXN0ZW5lciA9PSBudWxsIHx8IHNob3VsZFJlbW92ZUxpc3RlbmVyKTtcbiAgICAgICAgaWYgKHNob3VsZFJlbW92ZUxpc3RlbmVyKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLmV2ZW50TmFtZSwgdGhpcy5fX2JvdW5kSGFuZGxlRXZlbnQsIHRoaXMuX19vcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hvdWxkQWRkTGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX19vcHRpb25zID0gZ2V0T3B0aW9ucyhuZXdMaXN0ZW5lcik7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLmV2ZW50TmFtZSwgdGhpcy5fX2JvdW5kSGFuZGxlRXZlbnQsIHRoaXMuX19vcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbHVlID0gbmV3TGlzdGVuZXI7XG4gICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSBub0NoYW5nZTtcbiAgICB9XG4gICAgaGFuZGxlRXZlbnQoZXZlbnQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlLmNhbGwodGhpcy5ldmVudENvbnRleHQgfHwgdGhpcy5lbGVtZW50LCBldmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlLmhhbmRsZUV2ZW50KGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIFdlIGNvcHkgb3B0aW9ucyBiZWNhdXNlIG9mIHRoZSBpbmNvbnNpc3RlbnQgYmVoYXZpb3Igb2YgYnJvd3NlcnMgd2hlbiByZWFkaW5nXG4vLyB0aGUgdGhpcmQgYXJndW1lbnQgb2YgYWRkL3JlbW92ZUV2ZW50TGlzdGVuZXIuIElFMTEgZG9lc24ndCBzdXBwb3J0IG9wdGlvbnNcbi8vIGF0IGFsbC4gQ2hyb21lIDQxIG9ubHkgcmVhZHMgYGNhcHR1cmVgIGlmIHRoZSBhcmd1bWVudCBpcyBhbiBvYmplY3QuXG5jb25zdCBnZXRPcHRpb25zID0gKG8pID0+IG8gJiZcbiAgICAoZXZlbnRPcHRpb25zU3VwcG9ydGVkID9cbiAgICAgICAgeyBjYXB0dXJlOiBvLmNhcHR1cmUsIHBhc3NpdmU6IG8ucGFzc2l2ZSwgb25jZTogby5vbmNlIH0gOlxuICAgICAgICBvLmNhcHR1cmUpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFydHMuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuaW1wb3J0IHsgQXR0cmlidXRlQ29tbWl0dGVyLCBCb29sZWFuQXR0cmlidXRlUGFydCwgRXZlbnRQYXJ0LCBOb2RlUGFydCwgUHJvcGVydHlDb21taXR0ZXIgfSBmcm9tICcuL3BhcnRzLmpzJztcbi8qKlxuICogQ3JlYXRlcyBQYXJ0cyB3aGVuIGEgdGVtcGxhdGUgaXMgaW5zdGFudGlhdGVkLlxuICovXG5leHBvcnQgY2xhc3MgRGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgcGFydHMgZm9yIGFuIGF0dHJpYnV0ZS1wb3NpdGlvbiBiaW5kaW5nLCBnaXZlbiB0aGUgZXZlbnQsIGF0dHJpYnV0ZVxuICAgICAqIG5hbWUsIGFuZCBzdHJpbmcgbGl0ZXJhbHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBUaGUgZWxlbWVudCBjb250YWluaW5nIHRoZSBiaW5kaW5nXG4gICAgICogQHBhcmFtIG5hbWUgIFRoZSBhdHRyaWJ1dGUgbmFtZVxuICAgICAqIEBwYXJhbSBzdHJpbmdzIFRoZSBzdHJpbmcgbGl0ZXJhbHMuIFRoZXJlIGFyZSBhbHdheXMgYXQgbGVhc3QgdHdvIHN0cmluZ3MsXG4gICAgICogICBldmVudCBmb3IgZnVsbHktY29udHJvbGxlZCBiaW5kaW5ncyB3aXRoIGEgc2luZ2xlIGV4cHJlc3Npb24uXG4gICAgICovXG4gICAgaGFuZGxlQXR0cmlidXRlRXhwcmVzc2lvbnMoZWxlbWVudCwgbmFtZSwgc3RyaW5ncywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBwcmVmaXggPSBuYW1lWzBdO1xuICAgICAgICBpZiAocHJlZml4ID09PSAnLicpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbW1pdHRlciA9IG5ldyBQcm9wZXJ0eUNvbW1pdHRlcihlbGVtZW50LCBuYW1lLnNsaWNlKDEpLCBzdHJpbmdzKTtcbiAgICAgICAgICAgIHJldHVybiBjb21taXR0ZXIucGFydHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZWZpeCA9PT0gJ0AnKSB7XG4gICAgICAgICAgICByZXR1cm4gW25ldyBFdmVudFBhcnQoZWxlbWVudCwgbmFtZS5zbGljZSgxKSwgb3B0aW9ucy5ldmVudENvbnRleHQpXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJlZml4ID09PSAnPycpIHtcbiAgICAgICAgICAgIHJldHVybiBbbmV3IEJvb2xlYW5BdHRyaWJ1dGVQYXJ0KGVsZW1lbnQsIG5hbWUuc2xpY2UoMSksIHN0cmluZ3MpXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb21taXR0ZXIgPSBuZXcgQXR0cmlidXRlQ29tbWl0dGVyKGVsZW1lbnQsIG5hbWUsIHN0cmluZ3MpO1xuICAgICAgICByZXR1cm4gY29tbWl0dGVyLnBhcnRzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgcGFydHMgZm9yIGEgdGV4dC1wb3NpdGlvbiBiaW5kaW5nLlxuICAgICAqIEBwYXJhbSB0ZW1wbGF0ZUZhY3RvcnlcbiAgICAgKi9cbiAgICBoYW5kbGVUZXh0RXhwcmVzc2lvbihvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgTm9kZVBhcnQob3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IGRlZmF1bHRUZW1wbGF0ZVByb2Nlc3NvciA9IG5ldyBEZWZhdWx0VGVtcGxhdGVQcm9jZXNzb3IoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHQtdGVtcGxhdGUtcHJvY2Vzc29yLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbmltcG9ydCB7IG1hcmtlciwgVGVtcGxhdGUgfSBmcm9tICcuL3RlbXBsYXRlLmpzJztcbi8qKlxuICogVGhlIGRlZmF1bHQgVGVtcGxhdGVGYWN0b3J5IHdoaWNoIGNhY2hlcyBUZW1wbGF0ZXMga2V5ZWQgb25cbiAqIHJlc3VsdC50eXBlIGFuZCByZXN1bHQuc3RyaW5ncy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRlbXBsYXRlRmFjdG9yeShyZXN1bHQpIHtcbiAgICBsZXQgdGVtcGxhdGVDYWNoZSA9IHRlbXBsYXRlQ2FjaGVzLmdldChyZXN1bHQudHlwZSk7XG4gICAgaWYgKHRlbXBsYXRlQ2FjaGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0ZW1wbGF0ZUNhY2hlID0ge1xuICAgICAgICAgICAgc3RyaW5nc0FycmF5OiBuZXcgV2Vha01hcCgpLFxuICAgICAgICAgICAga2V5U3RyaW5nOiBuZXcgTWFwKClcbiAgICAgICAgfTtcbiAgICAgICAgdGVtcGxhdGVDYWNoZXMuc2V0KHJlc3VsdC50eXBlLCB0ZW1wbGF0ZUNhY2hlKTtcbiAgICB9XG4gICAgbGV0IHRlbXBsYXRlID0gdGVtcGxhdGVDYWNoZS5zdHJpbmdzQXJyYXkuZ2V0KHJlc3VsdC5zdHJpbmdzKTtcbiAgICBpZiAodGVtcGxhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgfVxuICAgIC8vIElmIHRoZSBUZW1wbGF0ZVN0cmluZ3NBcnJheSBpcyBuZXcsIGdlbmVyYXRlIGEga2V5IGZyb20gdGhlIHN0cmluZ3NcbiAgICAvLyBUaGlzIGtleSBpcyBzaGFyZWQgYmV0d2VlbiBhbGwgdGVtcGxhdGVzIHdpdGggaWRlbnRpY2FsIGNvbnRlbnRcbiAgICBjb25zdCBrZXkgPSByZXN1bHQuc3RyaW5ncy5qb2luKG1hcmtlcik7XG4gICAgLy8gQ2hlY2sgaWYgd2UgYWxyZWFkeSBoYXZlIGEgVGVtcGxhdGUgZm9yIHRoaXMga2V5XG4gICAgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhY2hlLmtleVN0cmluZy5nZXQoa2V5KTtcbiAgICBpZiAodGVtcGxhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIG5vdCBzZWVuIHRoaXMga2V5IGJlZm9yZSwgY3JlYXRlIGEgbmV3IFRlbXBsYXRlXG4gICAgICAgIHRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKHJlc3VsdCwgcmVzdWx0LmdldFRlbXBsYXRlRWxlbWVudCgpKTtcbiAgICAgICAgLy8gQ2FjaGUgdGhlIFRlbXBsYXRlIGZvciB0aGlzIGtleVxuICAgICAgICB0ZW1wbGF0ZUNhY2hlLmtleVN0cmluZy5zZXQoa2V5LCB0ZW1wbGF0ZSk7XG4gICAgfVxuICAgIC8vIENhY2hlIGFsbCBmdXR1cmUgcXVlcmllcyBmb3IgdGhpcyBUZW1wbGF0ZVN0cmluZ3NBcnJheVxuICAgIHRlbXBsYXRlQ2FjaGUuc3RyaW5nc0FycmF5LnNldChyZXN1bHQuc3RyaW5ncywgdGVtcGxhdGUpO1xuICAgIHJldHVybiB0ZW1wbGF0ZTtcbn1cbmV4cG9ydCBjb25zdCB0ZW1wbGF0ZUNhY2hlcyA9IG5ldyBNYXAoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRlbXBsYXRlLWZhY3RvcnkuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuaW1wb3J0IHsgcmVtb3ZlTm9kZXMgfSBmcm9tICcuL2RvbS5qcyc7XG5pbXBvcnQgeyBOb2RlUGFydCB9IGZyb20gJy4vcGFydHMuanMnO1xuaW1wb3J0IHsgdGVtcGxhdGVGYWN0b3J5IH0gZnJvbSAnLi90ZW1wbGF0ZS1mYWN0b3J5LmpzJztcbmV4cG9ydCBjb25zdCBwYXJ0cyA9IG5ldyBXZWFrTWFwKCk7XG4vKipcbiAqIFJlbmRlcnMgYSB0ZW1wbGF0ZSByZXN1bHQgb3Igb3RoZXIgdmFsdWUgdG8gYSBjb250YWluZXIuXG4gKlxuICogVG8gdXBkYXRlIGEgY29udGFpbmVyIHdpdGggbmV3IHZhbHVlcywgcmVldmFsdWF0ZSB0aGUgdGVtcGxhdGUgbGl0ZXJhbCBhbmRcbiAqIGNhbGwgYHJlbmRlcmAgd2l0aCB0aGUgbmV3IHJlc3VsdC5cbiAqXG4gKiBAcGFyYW0gcmVzdWx0IEFueSB2YWx1ZSByZW5kZXJhYmxlIGJ5IE5vZGVQYXJ0IC0gdHlwaWNhbGx5IGEgVGVtcGxhdGVSZXN1bHRcbiAqICAgICBjcmVhdGVkIGJ5IGV2YWx1YXRpbmcgYSB0ZW1wbGF0ZSB0YWcgbGlrZSBgaHRtbGAgb3IgYHN2Z2AuXG4gKiBAcGFyYW0gY29udGFpbmVyIEEgRE9NIHBhcmVudCB0byByZW5kZXIgdG8uIFRoZSBlbnRpcmUgY29udGVudHMgYXJlIGVpdGhlclxuICogICAgIHJlcGxhY2VkLCBvciBlZmZpY2llbnRseSB1cGRhdGVkIGlmIHRoZSBzYW1lIHJlc3VsdCB0eXBlIHdhcyBwcmV2aW91c1xuICogICAgIHJlbmRlcmVkIHRoZXJlLlxuICogQHBhcmFtIG9wdGlvbnMgUmVuZGVyT3B0aW9ucyBmb3IgdGhlIGVudGlyZSByZW5kZXIgdHJlZSByZW5kZXJlZCB0byB0aGlzXG4gKiAgICAgY29udGFpbmVyLiBSZW5kZXIgb3B0aW9ucyBtdXN0ICpub3QqIGNoYW5nZSBiZXR3ZWVuIHJlbmRlcnMgdG8gdGhlIHNhbWVcbiAqICAgICBjb250YWluZXIsIGFzIHRob3NlIGNoYW5nZXMgd2lsbCBub3QgZWZmZWN0IHByZXZpb3VzbHkgcmVuZGVyZWQgRE9NLlxuICovXG5leHBvcnQgY29uc3QgcmVuZGVyID0gKHJlc3VsdCwgY29udGFpbmVyLCBvcHRpb25zKSA9PiB7XG4gICAgbGV0IHBhcnQgPSBwYXJ0cy5nZXQoY29udGFpbmVyKTtcbiAgICBpZiAocGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlbW92ZU5vZGVzKGNvbnRhaW5lciwgY29udGFpbmVyLmZpcnN0Q2hpbGQpO1xuICAgICAgICBwYXJ0cy5zZXQoY29udGFpbmVyLCBwYXJ0ID0gbmV3IE5vZGVQYXJ0KE9iamVjdC5hc3NpZ24oeyB0ZW1wbGF0ZUZhY3RvcnkgfSwgb3B0aW9ucykpKTtcbiAgICAgICAgcGFydC5hcHBlbmRJbnRvKGNvbnRhaW5lcik7XG4gICAgfVxuICAgIHBhcnQuc2V0VmFsdWUocmVzdWx0KTtcbiAgICBwYXJ0LmNvbW1pdCgpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlbmRlci5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG4vKipcbiAqXG4gKiBNYWluIGxpdC1odG1sIG1vZHVsZS5cbiAqXG4gKiBNYWluIGV4cG9ydHM6XG4gKlxuICogLSAgW1todG1sXV1cbiAqIC0gIFtbc3ZnXV1cbiAqIC0gIFtbcmVuZGVyXV1cbiAqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqL1xuLyoqXG4gKiBEbyBub3QgcmVtb3ZlIHRoaXMgY29tbWVudDsgaXQga2VlcHMgdHlwZWRvYyBmcm9tIG1pc3BsYWNpbmcgdGhlIG1vZHVsZVxuICogZG9jcy5cbiAqL1xuaW1wb3J0IHsgZGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yIH0gZnJvbSAnLi9saWIvZGVmYXVsdC10ZW1wbGF0ZS1wcm9jZXNzb3IuanMnO1xuaW1wb3J0IHsgU1ZHVGVtcGxhdGVSZXN1bHQsIFRlbXBsYXRlUmVzdWx0IH0gZnJvbSAnLi9saWIvdGVtcGxhdGUtcmVzdWx0LmpzJztcbmV4cG9ydCB7IERlZmF1bHRUZW1wbGF0ZVByb2Nlc3NvciwgZGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yIH0gZnJvbSAnLi9saWIvZGVmYXVsdC10ZW1wbGF0ZS1wcm9jZXNzb3IuanMnO1xuZXhwb3J0IHsgZGlyZWN0aXZlLCBpc0RpcmVjdGl2ZSB9IGZyb20gJy4vbGliL2RpcmVjdGl2ZS5qcyc7XG4vLyBUT0RPKGp1c3RpbmZhZ25hbmkpOiByZW1vdmUgbGluZSB3aGVuIHdlIGdldCBOb2RlUGFydCBtb3ZpbmcgbWV0aG9kc1xuZXhwb3J0IHsgcmVtb3ZlTm9kZXMsIHJlcGFyZW50Tm9kZXMgfSBmcm9tICcuL2xpYi9kb20uanMnO1xuZXhwb3J0IHsgbm9DaGFuZ2UsIG5vdGhpbmcgfSBmcm9tICcuL2xpYi9wYXJ0LmpzJztcbmV4cG9ydCB7IEF0dHJpYnV0ZUNvbW1pdHRlciwgQXR0cmlidXRlUGFydCwgQm9vbGVhbkF0dHJpYnV0ZVBhcnQsIEV2ZW50UGFydCwgaXNJdGVyYWJsZSwgaXNQcmltaXRpdmUsIE5vZGVQYXJ0LCBQcm9wZXJ0eUNvbW1pdHRlciwgUHJvcGVydHlQYXJ0IH0gZnJvbSAnLi9saWIvcGFydHMuanMnO1xuZXhwb3J0IHsgcGFydHMsIHJlbmRlciB9IGZyb20gJy4vbGliL3JlbmRlci5qcyc7XG5leHBvcnQgeyB0ZW1wbGF0ZUNhY2hlcywgdGVtcGxhdGVGYWN0b3J5IH0gZnJvbSAnLi9saWIvdGVtcGxhdGUtZmFjdG9yeS5qcyc7XG5leHBvcnQgeyBUZW1wbGF0ZUluc3RhbmNlIH0gZnJvbSAnLi9saWIvdGVtcGxhdGUtaW5zdGFuY2UuanMnO1xuZXhwb3J0IHsgU1ZHVGVtcGxhdGVSZXN1bHQsIFRlbXBsYXRlUmVzdWx0IH0gZnJvbSAnLi9saWIvdGVtcGxhdGUtcmVzdWx0LmpzJztcbmV4cG9ydCB7IGNyZWF0ZU1hcmtlciwgaXNUZW1wbGF0ZVBhcnRBY3RpdmUsIFRlbXBsYXRlIH0gZnJvbSAnLi9saWIvdGVtcGxhdGUuanMnO1xuLy8gSU1QT1JUQU5UOiBkbyBub3QgY2hhbmdlIHRoZSBwcm9wZXJ0eSBuYW1lIG9yIHRoZSBhc3NpZ25tZW50IGV4cHJlc3Npb24uXG4vLyBUaGlzIGxpbmUgd2lsbCBiZSB1c2VkIGluIHJlZ2V4ZXMgdG8gc2VhcmNoIGZvciBsaXQtaHRtbCB1c2FnZS5cbi8vIFRPRE8oanVzdGluZmFnbmFuaSk6IGluamVjdCB2ZXJzaW9uIG51bWJlciBhdCBidWlsZCB0aW1lXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAod2luZG93WydsaXRIdG1sVmVyc2lvbnMnXSB8fCAod2luZG93WydsaXRIdG1sVmVyc2lvbnMnXSA9IFtdKSkucHVzaCgnMS40LjEnKTtcbn1cbi8qKlxuICogSW50ZXJwcmV0cyBhIHRlbXBsYXRlIGxpdGVyYWwgYXMgYW4gSFRNTCB0ZW1wbGF0ZSB0aGF0IGNhbiBlZmZpY2llbnRseVxuICogcmVuZGVyIHRvIGFuZCB1cGRhdGUgYSBjb250YWluZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBodG1sID0gKHN0cmluZ3MsIC4uLnZhbHVlcykgPT4gbmV3IFRlbXBsYXRlUmVzdWx0KHN0cmluZ3MsIHZhbHVlcywgJ2h0bWwnLCBkZWZhdWx0VGVtcGxhdGVQcm9jZXNzb3IpO1xuLyoqXG4gKiBJbnRlcnByZXRzIGEgdGVtcGxhdGUgbGl0ZXJhbCBhcyBhbiBTVkcgdGVtcGxhdGUgdGhhdCBjYW4gZWZmaWNpZW50bHlcbiAqIHJlbmRlciB0byBhbmQgdXBkYXRlIGEgY29udGFpbmVyLlxuICovXG5leHBvcnQgY29uc3Qgc3ZnID0gKHN0cmluZ3MsIC4uLnZhbHVlcykgPT4gbmV3IFNWR1RlbXBsYXRlUmVzdWx0KHN0cmluZ3MsIHZhbHVlcywgJ3N2ZycsIGRlZmF1bHRUZW1wbGF0ZVByb2Nlc3Nvcik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXQtaHRtbC5qcy5tYXAiLCIvKipcbiAqIENhY2hlIGNsYXNzIHRoYXQgYWxsb3dzIHRvIHNlYXJjaCBpbiBhIGNhY2hlIGhpZXJhcmNoeS5cbiAqIEB0ZW1wbGF0ZSBULCBRXG4gKi9cbmV4cG9ydCBjbGFzcyBDYWNoZSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgQ2FjaGUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtDYWNoZX0gW3BhcmVudF1cbiAgICovXG4gIGNvbnN0cnVjdG9yKHBhcmVudCkge1xuICAgIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgICB0aGlzLl9jYWNoZSA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgYm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgYW4gZWxlbWVudCB3aXRoIHRoZSBzcGVjaWZpZWQga2V5IGV4aXN0cyBvciBub3QuXG4gICAqXG4gICAqIEBwYXJhbSB7VH0ga2V5IC0gVGhlIGtleSBvZiB0aGUgZWxlbWVudCB0byB0ZXN0IGZvciBwcmVzZW5jZSBpbiB0aGUgQ2FjaGUgb2JqZWN0LlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaGFzKGtleSkge1xuICAgIHJldHVybiAhISh0aGlzLl9jYWNoZS5oYXMoa2V5KSB8fCAodGhpcy5fcGFyZW50ICYmIHRoaXMuX3BhcmVudC5fY2FjaGUuaGFzKGtleSkpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIG9yIHVwZGF0ZXMgYW4gZWxlbWVudCB3aXRoIGEgc3BlY2lmaWVkIGtleSBhbmQgYSB2YWx1ZSB0byBhIENhY2hlIG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtIHtUfSBrZXkgLSBUaGUga2V5IG9mIHRoZSBlbGVtZW50IHRvIGFkZCB0byB0aGUgQ2FjaGUgb2JqZWN0LlxuICAgKiBAcGFyYW0ge1F9IHZhbHVlIC0gVGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50IHRvIGFkZCB0byB0aGUgQ2FjaGUgb2JqZWN0LlxuICAgKiBAcmV0dXJuIHtDYWNoZTxULCBRPn0gdGhlIGNhY2hlIG9iamVjdFxuICAgKi9cbiAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICB0aGlzLl9jYWNoZS5zZXQoa2V5LCB2YWx1ZSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3BlY2lmaWVkIGVsZW1lbnQgZnJvbSBhIE1hcCBvYmplY3QuIElmIHRoZSB2YWx1ZSB0aGF0IGlzIGFzc29jaWF0ZWQgdG8gdGhlIHByb3ZpZGVkIGtleSBpcyBhblxuICAgKiBvYmplY3QsIHRoZW4geW91IHdpbGwgZ2V0IGEgcmVmZXJlbmNlIHRvIHRoYXQgb2JqZWN0IGFuZCBhbnkgY2hhbmdlIG1hZGUgdG8gdGhhdCBvYmplY3Qgd2lsbCBlZmZlY3RpdmVseSBtb2RpZnlcbiAgICogaXQgaW5zaWRlIHRoZSBNYXAgb2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0ge1R9IGtleSAtIFRoZSBrZXkgb2YgdGhlIGVsZW1lbnQgdG8gcmV0dXJuIGZyb20gdGhlIENhY2hlIG9iamVjdC5cbiAgICogQHJldHVybiB7UX1cbiAgICovXG4gIGdldChrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FjaGUuZ2V0KGtleSkgfHwgKHRoaXMuX3BhcmVudCAmJiB0aGlzLl9wYXJlbnQuX2NhY2hlLmdldChrZXkpKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBHbG9iYWwgY291bnRlciB0byBzY29wZSB0aGUgY3VzdG9tIGVsZW1lbnRzXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqL1xubGV0IGNvdW50ZXIgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMDAwMDApO1xuXG4vKipcbiAqIEFsbG93ZWQgdGFnIG5hbWUgY2hhcnNcbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBjaGFycyA9IGAtfFxcXFwufFswLTldfFthLXpdYDtcblxuLyoqXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gY2hlY2sgaWYgYSB2YWx1ZSBpcyBhIHZhbGlkIHRhZyBuYW1lXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xuY29uc3QgdGFnUmVnRXhwID0gbmV3IFJlZ0V4cChgW2Etel0oJHtjaGFyc30pKi0oJHtjaGFyc30pKmApO1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgdGFnIG5hbWUgaXMgdmFsaWRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgaXNWYWxpZCA9IHRhZyA9PiB0YWdSZWdFeHAuZXhlYyh0YWcpICE9PSBudWxsO1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgdGFnIGlzIGFscmVhZHkgcmVnaXN0ZXJlZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge0N1c3RvbUVsZW1lbnRSZWdpc3RyeX0gcmVnaXN0cnlcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBpc1RhZ1JlZ2lzdGVyZWQgPSAobmFtZSwgcmVnaXN0cnkpID0+ICEhcmVnaXN0cnkuZ2V0KG5hbWUpO1xuXG4vKipcbiAqIEdpdmVuIGEgdGFnIG5hbWUgc2NvcGVzIGl0IHdpdGggYSBudW1iZXIgc3VmZml4XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWVcbiAqIEBwYXJhbSB7Q3VzdG9tRWxlbWVudFJlZ2lzdHJ5fSByZWdpc3RyeVxuICogQHJldHVybnMge3N0cmluZ30gc2NvcGVkIHRhZyBuYW1lXG4gKi9cbmNvbnN0IGluY3JlbWVudFRhZ05hbWUgPSAodGFnTmFtZSwgcmVnaXN0cnkpID0+IHtcbiAgY29uc3QgbmV3VGFnTmFtZSA9IGAke3RhZ05hbWV9LSR7KGNvdW50ZXIgKz0gMSl9YDtcblxuICBpZiAoaXNUYWdSZWdpc3RlcmVkKG5ld1RhZ05hbWUsIHJlZ2lzdHJ5KSkge1xuICAgIHJldHVybiBpbmNyZW1lbnRUYWdOYW1lKHRhZ05hbWUsIHJlZ2lzdHJ5KTtcbiAgfVxuXG4gIHJldHVybiBuZXdUYWdOYW1lO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgdW5pcXVlIHNjb3BlZCB0YWcgbmFtZVxuICpcbiAqIEBleHBvcnRzXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnTmFtZSAtIHRhZyBuYW1lIHRvIHNjb3BlXG4gKiBAcGFyYW0ge0N1c3RvbUVsZW1lbnRSZWdpc3RyeX0gcmVnaXN0cnlcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHNjb3BlZCB0YWcgbmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVW5pcXVlVGFnKHRhZ05hbWUsIHJlZ2lzdHJ5ID0gY3VzdG9tRWxlbWVudHMpIHtcbiAgaWYgKCFpc1ZhbGlkKHRhZ05hbWUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd0YWdOYW1lIGlzIGludmFsaWQnKTtcbiAgfVxuXG4gIHJldHVybiBpbmNyZW1lbnRUYWdOYW1lKHRhZ05hbWUsIHJlZ2lzdHJ5KTtcbn1cbiIsIi8qKlxuICogVGhlIGdsb2JhbCBjYWNoZSBmb3IgdGFnIG5hbWVzXG4gKlxuICogQHR5cGUge1dlYWtNYXA8dHlwZW9mIEhUTUxFbGVtZW50LCBzdHJpbmc+fVxuICovXG5jb25zdCBnbG9iYWxUYWdzQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuXG4vKipcbiAqIEFkZHMgYSB0YWcgdG8gdGhlIGdsb2JhbCB0YWdzIGNhY2hlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZ1xuICogQHBhcmFtIHt0eXBlb2YgSFRNTEVsZW1lbnR9IGtsYXNzXG4gKi9cbmV4cG9ydCBjb25zdCBhZGRUb0dsb2JhbFRhZ3NDYWNoZSA9ICh0YWcsIGtsYXNzKSA9PiBnbG9iYWxUYWdzQ2FjaGUuc2V0KGtsYXNzLCB0YWcpO1xuXG4vKipcbiAqIEdldHMgYSB0YWcgZnJvbSB0aGUgZ2xvYmFsIHRhZ3MgY2FjaGVcbiAqXG4gKiBAZXhwb3J0c1xuICogQHBhcmFtIHt0eXBlb2YgSFRNTEVsZW1lbnR9IGtsYXNzXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfHN0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IGdldEZyb21HbG9iYWxUYWdzQ2FjaGUgPSBrbGFzcyA9PiBnbG9iYWxUYWdzQ2FjaGUuZ2V0KGtsYXNzKTtcbiIsImltcG9ydCB7IGNyZWF0ZVVuaXF1ZVRhZyB9IGZyb20gJy4vY3JlYXRlVW5pcXVlVGFnLmpzJztcbmltcG9ydCB7IGdldEZyb21HbG9iYWxUYWdzQ2FjaGUsIGFkZFRvR2xvYmFsVGFnc0NhY2hlIH0gZnJvbSAnLi9nbG9iYWxUYWdzQ2FjaGUuanMnO1xuXG4vKipcbiAqIENoZWNrcyBpZiBrbGFzcyBpcyBhIHN1YmNsYXNzIG9mIG5hdGl2ZSBIVE1MRWxlbWVudCBvciBwb2x5ZmlsbGVkIEhUTUxFbGVtZW50LlxuICogV2UgbWFudWFsbHkgbG9vcCBvdmVyIHRoZSBwcm90b3RwZSwgc28gd2UgY2FuIGRldGVjdCBpZiB3ZSBleHRlbmQgZnJvbSBuYXRpdmUgSFRNTEVsZW1lbnRcbiAqIG9yIHRoZSBwb2x5ZmlsbGVkIG9uZSBmcm9tIHNjb3BlZC1jdXN0b20tZWxlbWVudC1yZWdpc3RyeSAod2luZG93LkhUTUxFbGVtZW50KVxuICogQHBhcmFtIHt0eXBlb2YgSFRNTEVsZW1lbnR9IGtsYXNzIGEgY2xhc3MsIGxpa2UgTGl0RWxlbWVudFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGV4dGVuZHNIVE1MRWxlbWVudChrbGFzcykge1xuICBsZXQgY3VycmVudENsYXNzID0ga2xhc3M7XG4gIHdoaWxlIChjdXJyZW50Q2xhc3MpIHtcbiAgICAvLyBjdXJyZW50Q2xhc3MgY291bGQgZWl0aGVyIGJlOlxuICAgIC8vIDEuIHVucGF0Y2hlZCwgbmF0aXZlIEhUTUxFbGVtZW50ICh3aGVuIHBvbHlmaWxsIG5vdCBsb2FkZWQgdGhpcyBpcyBhbHdheXMgdGhlIGNhc2UpLCBvcjpcbiAgICAvLyAyLiBwYXRjaGVkIHdpbmRvdy5IVE1MRWxlbWVudCAoY2FuIGJlIHRoZSBjYXNlIHdoZW4gcG9seWZpbGwgaXMgbG9hZGVkKVxuICAgIC8vIElmIHBvbHlmaWxsIGlzIGxvYWRlZCBhbmQgY3VycmVudENsYXNzIGlzIHRoZSBuYXRpdmUgSFRNTEVsZW1lbnQsIHdlIGRvbid0IGhhdmUgYVxuICAgIC8vIHJlZmVyZW5jZSB0byBpdCAocG9seWZpbGwgY2FsbHMgaXQgTmF0aXZlSFRNTEVsZW1lbnQsIGJ1dCBkb2Vzbid0IGV4cG9zZSBpdCksXG4gICAgLy8gc28gd2UgY2hlY2sgaXRzIG5hbWUuXG4gICAgaWYgKGN1cnJlbnRDbGFzcyA9PT0gd2luZG93LkhUTUxFbGVtZW50IHx8IGN1cnJlbnRDbGFzcy5uYW1lID09PSAnSFRNTEVsZW1lbnQnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY3VycmVudENsYXNzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGN1cnJlbnRDbGFzcyk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIERlZmluZXMgYSBjdXN0b20gZWxlbWVudFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWdOYW1lXG4gKiBAcGFyYW0ge3R5cGVvZiBIVE1MRWxlbWVudH0ga2xhc3NcbiAqIEBwYXJhbSB7Q3VzdG9tRWxlbWVudFJlZ2lzdHJ5fSByZWdpc3RyeVxuICovXG5jb25zdCBkZWZpbmVFbGVtZW50ID0gKHRhZ05hbWUsIGtsYXNzLCByZWdpc3RyeSA9IGN1c3RvbUVsZW1lbnRzKSA9PiB7XG4gIGFkZFRvR2xvYmFsVGFnc0NhY2hlKHRhZ05hbWUsIGtsYXNzKTtcbiAgcmVnaXN0cnkuZGVmaW5lKHRhZ05hbWUsIGNsYXNzIGV4dGVuZHMga2xhc3Mge30pO1xufTtcblxuLyoqXG4gKiBTdG9yZXMgYSBsYXp5IGVsZW1lbnQgaW4gdGhlIGNhY2hlIHRvIGJlIHVzZWQgaW4gZnV0dXJlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWVcbiAqIEBwYXJhbSB7Q3VzdG9tRWxlbWVudFJlZ2lzdHJ5fSByZWdpc3RyeVxuICogQHBhcmFtIHtpbXBvcnQoJy4vQ2FjaGUuanMnKS5DYWNoZTxzdHJpbmcsIHN0cmluZz59IHRhZ3NDYWNoZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuY29uc3Qgc3RvcmVMYXp5RWxlbWVudEluQ2FjaGUgPSAodGFnTmFtZSwgcmVnaXN0cnksIHRhZ3NDYWNoZSkgPT4ge1xuICBjb25zdCB0YWcgPSBjcmVhdGVVbmlxdWVUYWcodGFnTmFtZSwgcmVnaXN0cnkpO1xuXG4gIGlmICghdGFnc0NhY2hlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdMYXp5IHNjb3BlZCBlbGVtZW50cyByZXF1aXJlcyB0aGUgdXNlIG9mIHRhZ3MgY2FjaGUnKTtcbiAgfVxuXG4gIHRhZ3NDYWNoZS5zZXQodGFnTmFtZSwgdGFnKTtcblxuICByZXR1cm4gdGFnO1xufTtcblxuLyoqXG4gKiBEZWZpbmUgYSBzY29wZWQgY3VzdG9tIGVsZW1lbnQgc3RvcmluZyB0aGUgc2NvcGVkIHRhZyBuYW1lIGluIHRoZSBjYWNoZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWdOYW1lXG4gKiBAcGFyYW0ge3R5cGVvZiBIVE1MRWxlbWVudH0ga2xhc3NcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL0NhY2hlLmpzJykuQ2FjaGU8c3RyaW5nLCBzdHJpbmc+fSB0YWdzQ2FjaGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmNvbnN0IGRlZmluZUVsZW1lbnRBbmRTdG9yZUluQ2FjaGUgPSAodGFnTmFtZSwga2xhc3MsIHRhZ3NDYWNoZSkgPT4ge1xuICBjb25zdCByZWdpc3RyeSA9IGN1c3RvbUVsZW1lbnRzO1xuXG4gIGlmICghZXh0ZW5kc0hUTUxFbGVtZW50KGtsYXNzKSkge1xuICAgIHJldHVybiBzdG9yZUxhenlFbGVtZW50SW5DYWNoZSh0YWdOYW1lLCByZWdpc3RyeSwgdGFnc0NhY2hlKTtcbiAgfVxuXG4gIGlmIChrbGFzcyA9PT0gY3VzdG9tRWxlbWVudHMuZ2V0KHRhZ05hbWUpKSB7XG4gICAgYWRkVG9HbG9iYWxUYWdzQ2FjaGUodGFnTmFtZSwga2xhc3MpO1xuXG4gICAgcmV0dXJuIHRhZ05hbWU7XG4gIH1cblxuICBjb25zdCB0YWcgPSBjcmVhdGVVbmlxdWVUYWcodGFnTmFtZSwgcmVnaXN0cnkpO1xuICAvLyBAdHMtaWdub3JlXG4gIC8vIHdlIGV4dGVuZCBpdCBqdXN0IGluIGNhc2UgdGhlIGNsYXNzIGhhcyBiZWVuIGRlZmluZWQgbWFudWFsbHlcbiAgZGVmaW5lRWxlbWVudCh0YWcsIGtsYXNzLCByZWdpc3RyeSk7XG5cbiAgcmV0dXJuIHRhZztcbn07XG5cbi8qKlxuICogR2V0cyBhIHNjb3BlZCB0YWcgbmFtZSBmcm9tIHRoZSBjYWNoZSBvciBnZW5lcmF0ZXMgYSBuZXcgb25lIGFuZCBkZWZpbmVzIHRoZSBlbGVtZW50IGlmIG5lZWRlZFxuICpcbiAqIEBleHBvcnRzXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnTmFtZVxuICogQHBhcmFtIHt0eXBlb2YgSFRNTEVsZW1lbnR9IGtsYXNzXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9DYWNoZS5qcycpLkNhY2hlPHN0cmluZywgc3RyaW5nPn0gdGFnc0NhY2hlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJFbGVtZW50KHRhZ05hbWUsIGtsYXNzLCB0YWdzQ2FjaGUgPSB1bmRlZmluZWQpIHtcbiAgY29uc3QgdGFnID1cbiAgICBnZXRGcm9tR2xvYmFsVGFnc0NhY2hlKGtsYXNzKSB8fFxuICAgICh0YWdzQ2FjaGUgJiYgdGFnc0NhY2hlLmdldCh0YWdOYW1lKSkgfHxcbiAgICBkZWZpbmVFbGVtZW50QW5kU3RvcmVJbkNhY2hlKHRhZ05hbWUsIGtsYXNzLCB0YWdzQ2FjaGUpO1xuXG4gIHJldHVybiB0YWc7XG59XG5cbi8qKlxuICogRGVmaW5lcyBhIGxhenkgZWxlbWVudFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWdOYW1lXG4gKiBAcGFyYW0ge3R5cGVvZiBIVE1MRWxlbWVudH0ga2xhc3NcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL0NhY2hlLmpzJykuQ2FjaGU8c3RyaW5nLCBzdHJpbmc+fSB0YWdzQ2FjaGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZVNjb3BlZEVsZW1lbnQodGFnTmFtZSwga2xhc3MsIHRhZ3NDYWNoZSkge1xuICBjb25zdCB0YWcgPSB0YWdzQ2FjaGUuZ2V0KHRhZ05hbWUpO1xuXG4gIGlmICh0YWcpIHtcbiAgICBpZiAoY3VzdG9tRWxlbWVudHMuZ2V0KHRhZykgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZGVmaW5lRWxlbWVudCh0YWcsIGtsYXNzLCBjdXN0b21FbGVtZW50cyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRhZ3NDYWNoZS5zZXQodGFnTmFtZSwgcmVnaXN0ZXJFbGVtZW50KHRhZ05hbWUsIGtsYXNzLCB0YWdzQ2FjaGUpKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgcmVnaXN0ZXJFbGVtZW50IH0gZnJvbSAnLi9yZWdpc3RlckVsZW1lbnQuanMnO1xuaW1wb3J0IHsgQ2FjaGUgfSBmcm9tICcuL0NhY2hlLmpzJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3R5cGVzJykuU2NvcGVkRWxlbWVudHNNYXB9IFNjb3BlZEVsZW1lbnRzTWFwXG4gKi9cblxuLyoqXG4gKiBBbGxvd2VkIHRhZyBuYW1lIGNoYXJzXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgY2hhcnMgPSBgLXxcXFxcLnxbMC05XXxbYS16XWA7XG5cbi8qKlxuICogUmVndWxhciBFeHByZXNzaW9uIHRvIGZpbmQgYSBjdXN0b20gZWxlbWVudCB0YWdcbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG5jb25zdCByZSA9IG5ldyBSZWdFeHAoYDxcXFxcLz8oW2Etel0oJHtjaGFyc30pKi0oJHtjaGFyc30pKilgLCAnZycpO1xuXG4vKipcbiAqIFRoZSBnbG9iYWwgY2FjaGUgb2YgcHJvY2Vzc2VkIHN0cmluZyBhcnJheXNcbiAqXG4gKiBAdHlwZSB7Q2FjaGU8VGVtcGxhdGVTdHJpbmdzQXJyYXksIFRlbXBsYXRlU3RyaW5nc0FycmF5Pn1cbiAqL1xuY29uc3QgZ2xvYmFsQ2FjaGUgPSBuZXcgQ2FjaGUoKTtcblxuLyoqXG4gKiBGaW5kIGN1c3RvbSBlbGVtZW50IHRhZ3MgaW4gdGhlIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm5zIHtSZWdFeHBFeGVjQXJyYXlbXX1cbiAqL1xuY29uc3QgbWF0Y2hBbGwgPSBzdHIgPT4ge1xuICBjb25zdCBtYXRjaGVzID0gW107XG4gIGxldCByZXN1bHQ7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25kLWFzc2lnblxuICB3aGlsZSAoKHJlc3VsdCA9IHJlLmV4ZWMoc3RyKSkgIT09IG51bGwpIHtcbiAgICBtYXRjaGVzLnB1c2gocmVzdWx0KTtcbiAgfVxuXG4gIHJldHVybiBtYXRjaGVzO1xufTtcblxuLyoqXG4gKiBUcmFuc2Zvcm1zIGEgc3RyaW5nIGFycmF5IGludG8gYW5vdGhlciBvbmUgd2l0aCByZXNvbHZlZCBzY29wZWQgZWxlbWVudHMgYW5kIGNhY2hlcyBpdCBmb3IgZnV0dXJlIHJlZmVyZW5jZXNcbiAqXG4gKiBAcGFyYW0ge1RlbXBsYXRlU3RyaW5nc0FycmF5fSBzdHJpbmdzXG4gKiBAcGFyYW0ge1Njb3BlZEVsZW1lbnRzTWFwfSBzY29wZWRFbGVtZW50c1xuICogQHBhcmFtIHtDYWNoZTxUZW1wbGF0ZVN0cmluZ3NBcnJheSwgVGVtcGxhdGVTdHJpbmdzQXJyYXk+fSB0ZW1wbGF0ZUNhY2hlXG4gKiBAcGFyYW0ge0NhY2hlPHN0cmluZywgc3RyaW5nPn0gdGFnc0NhY2hlXG4gKiBAcmV0dXJucyB7VGVtcGxhdGVTdHJpbmdzQXJyYXl9XG4gKi9cbmNvbnN0IHRyYW5zZm9ybVRlbXBsYXRlID0gKHN0cmluZ3MsIHNjb3BlZEVsZW1lbnRzLCB0ZW1wbGF0ZUNhY2hlLCB0YWdzQ2FjaGUpID0+IHtcbiAgY29uc3QgdHJhbnNmb3JtZWRTdHJpbmdzID0gc3RyaW5ncy5tYXAoc3RyID0+IHtcbiAgICBsZXQgYWNjID0gc3RyO1xuICAgIGNvbnN0IG1hdGNoZXMgPSBtYXRjaEFsbChzdHIpO1xuXG4gICAgZm9yIChsZXQgaSA9IG1hdGNoZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBtYXRjaGVzW2ldO1xuICAgICAgY29uc3QgW2Jsb2NrLCB0YWdOYW1lXSA9IGl0ZW07XG4gICAgICBjb25zdCB0YWcgPSByZWdpc3RlckVsZW1lbnQodGFnTmFtZSwgc2NvcGVkRWxlbWVudHNbdGFnTmFtZV0sIHRhZ3NDYWNoZSk7XG4gICAgICBjb25zdCBzdGFydCA9IGl0ZW0uaW5kZXggKyBibG9jay5sZW5ndGggLSB0YWdOYW1lLmxlbmd0aDtcbiAgICAgIGNvbnN0IGVuZCA9IHN0YXJ0ICsgdGFnTmFtZS5sZW5ndGg7XG4gICAgICBjb25zdCBpc0Nsb3NpbmdUYWcgPSBibG9jay5pbmRleE9mKCc8LycpID09PSAwO1xuXG4gICAgICBhY2MgPVxuICAgICAgICBhY2Muc2xpY2UoMCwgc3RhcnQpICtcbiAgICAgICAgKGlzQ2xvc2luZ1RhZyA/IHRhZyA6IGAke3RhZ30gZGF0YS10YWctbmFtZT1cIiR7dGFnTmFtZX1cImApICtcbiAgICAgICAgYWNjLnNsaWNlKGVuZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSk7XG5cbiAgLy8gQHRzLWlnbm9yZVxuICAvLyBub2luc3BlY3Rpb24gSlNDaGVja0Z1bmN0aW9uU2lnbmF0dXJlc1xuICB0ZW1wbGF0ZUNhY2hlLnNldChzdHJpbmdzLCB0cmFuc2Zvcm1lZFN0cmluZ3MpO1xuXG4gIC8vIEB0cy1pZ25vcmVcbiAgLy8gbm9pbnNwZWN0aW9uIEpTVmFsaWRhdGVUeXBlc1xuICByZXR1cm4gdHJhbnNmb3JtZWRTdHJpbmdzO1xufTtcblxuLyoqXG4gKiBPYnRhaW5zIHRoZSBjYWNoZWQgc3RyaW5ncyBhcnJheSB3aXRoIHJlc29sdmVkIHNjb3BlZCBlbGVtZW50cyBvciBjcmVhdGVzIGl0XG4gKlxuICogQGV4cG9ydHNcbiAqIEBwYXJhbSB7VGVtcGxhdGVTdHJpbmdzQXJyYXl9IHN0cmluZ3NcbiAqIEBwYXJhbSB7U2NvcGVkRWxlbWVudHNNYXB9IHNjb3BlZEVsZW1lbnRzXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9DYWNoZS5qcycpLkNhY2hlPFRlbXBsYXRlU3RyaW5nc0FycmF5LCBUZW1wbGF0ZVN0cmluZ3NBcnJheT59IHRlbXBsYXRlQ2FjaGVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL0NhY2hlLmpzJykuQ2FjaGU8c3RyaW5nLCBzdHJpbmc+fSB0YWdzQ2FjaGVcbiAqIEByZXR1cm5zIHtUZW1wbGF0ZVN0cmluZ3NBcnJheX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybShzdHJpbmdzLCBzY29wZWRFbGVtZW50cywgdGVtcGxhdGVDYWNoZSA9IGdsb2JhbENhY2hlLCB0YWdzQ2FjaGUpIHtcbiAgcmV0dXJuIChcbiAgICB0ZW1wbGF0ZUNhY2hlLmdldChzdHJpbmdzKSB8fFxuICAgIHRyYW5zZm9ybVRlbXBsYXRlKHN0cmluZ3MsIHNjb3BlZEVsZW1lbnRzLCB0ZW1wbGF0ZUNhY2hlLCB0YWdzQ2FjaGUpXG4gICk7XG59XG4iLCJpbXBvcnQgeyB0ZW1wbGF0ZUNhY2hlcyB9IGZyb20gJ2xpdC1odG1sL2xpYi90ZW1wbGF0ZS1mYWN0b3J5LmpzJztcbmltcG9ydCB7IG1hcmtlciwgVGVtcGxhdGUgfSBmcm9tICdsaXQtaHRtbC9saWIvdGVtcGxhdGUuanMnO1xuXG5jb25zdCBnZXRUZW1wbGF0ZUNhY2hlS2V5ID0gKHR5cGUsIHNjb3BlTmFtZSkgPT4gYCR7dHlwZX0tLSR7c2NvcGVOYW1lfWA7XG5cbmxldCBjb21wYXRpYmxlU2hhZHlDU1NWZXJzaW9uID0gdHJ1ZTtcblxuLy8gQHRzLWlnbm9yZVxuY29uc3QgeyBTaGFkeUNTUyB9ID0gd2luZG93O1xuXG5pZiAodHlwZW9mIFNoYWR5Q1NTID09PSAndW5kZWZpbmVkJykge1xuICBjb21wYXRpYmxlU2hhZHlDU1NWZXJzaW9uID0gZmFsc2U7XG59IGVsc2UgaWYgKHR5cGVvZiBTaGFkeUNTUy5wcmVwYXJlVGVtcGxhdGVEb20gPT09ICd1bmRlZmluZWQnKSB7XG4gIGNvbXBhdGlibGVTaGFkeUNTU1ZlcnNpb24gPSBmYWxzZTtcbn1cblxuLyoqXG4gKiBUZW1wbGF0ZSBmYWN0b3J5IHdoaWNoIHNjb3BlcyB0ZW1wbGF0ZSBET00gdXNpbmcgU2hhZHlDU1MuXG4gKiBAcGFyYW0gc2NvcGVOYW1lIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCBzaGFkeVRlbXBsYXRlRmFjdG9yeSA9IHNjb3BlTmFtZSA9PiByZXN1bHQgPT4ge1xuICBjb25zdCBjYWNoZUtleSA9IGdldFRlbXBsYXRlQ2FjaGVLZXkocmVzdWx0LnR5cGUsIHNjb3BlTmFtZSk7XG4gIGxldCB0ZW1wbGF0ZUNhY2hlID0gdGVtcGxhdGVDYWNoZXMuZ2V0KGNhY2hlS2V5KTtcbiAgaWYgKHRlbXBsYXRlQ2FjaGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHRlbXBsYXRlQ2FjaGUgPSB7XG4gICAgICBzdHJpbmdzQXJyYXk6IG5ldyBXZWFrTWFwKCksXG4gICAgICBrZXlTdHJpbmc6IG5ldyBNYXAoKSxcbiAgICB9O1xuICAgIHRlbXBsYXRlQ2FjaGVzLnNldChjYWNoZUtleSwgdGVtcGxhdGVDYWNoZSk7XG4gIH1cbiAgbGV0IHRlbXBsYXRlID0gdGVtcGxhdGVDYWNoZS5zdHJpbmdzQXJyYXkuZ2V0KHJlc3VsdC5zdHJpbmdzKTtcbiAgaWYgKHRlbXBsYXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdGVtcGxhdGU7XG4gIH1cbiAgY29uc3Qga2V5ID0gcmVzdWx0LnN0cmluZ3Muam9pbihtYXJrZXIpO1xuICB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ2FjaGUua2V5U3RyaW5nLmdldChrZXkpO1xuICBpZiAodGVtcGxhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSByZXN1bHQuZ2V0VGVtcGxhdGVFbGVtZW50KCk7XG4gICAgaWYgKGNvbXBhdGlibGVTaGFkeUNTU1ZlcnNpb24pIHtcbiAgICAgIFNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZURvbShlbGVtZW50LCBzY29wZU5hbWUpO1xuICAgIH1cbiAgICB0ZW1wbGF0ZSA9IG5ldyBUZW1wbGF0ZShyZXN1bHQsIGVsZW1lbnQpO1xuICAgIHRlbXBsYXRlQ2FjaGUua2V5U3RyaW5nLnNldChrZXksIHRlbXBsYXRlKTtcbiAgfVxuICB0ZW1wbGF0ZUNhY2hlLnN0cmluZ3NBcnJheS5zZXQocmVzdWx0LnN0cmluZ3MsIHRlbXBsYXRlKTtcbiAgcmV0dXJuIHRlbXBsYXRlO1xufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXVzZS1iZWZvcmUtZGVmaW5lICovXG5pbXBvcnQgeyBUZW1wbGF0ZVJlc3VsdCB9IGZyb20gJ2xpdC1odG1sJztcbmltcG9ydCB7IGRlZHVwZU1peGluIH0gZnJvbSAnQG9wZW4td2MvZGVkdXBlLW1peGluJztcbmltcG9ydCB7IENhY2hlIH0gZnJvbSAnLi9DYWNoZS5qcyc7XG5pbXBvcnQgeyB0cmFuc2Zvcm0gfSBmcm9tICcuL3RyYW5zZm9ybS5qcyc7XG5pbXBvcnQgeyBkZWZpbmVTY29wZWRFbGVtZW50LCByZWdpc3RlckVsZW1lbnQgfSBmcm9tICcuL3JlZ2lzdGVyRWxlbWVudC5qcyc7XG5pbXBvcnQgeyBzaGFkeVRlbXBsYXRlRmFjdG9yeSB9IGZyb20gJy4vc2hhZHlUZW1wbGF0ZUZhY3RvcnkuanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vdHlwZXMnKS5TY29wZWRFbGVtZW50c01peGlufSBTY29wZWRFbGVtZW50c01peGluXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3R5cGVzJykuU2NvcGVkRWxlbWVudHNNYXB9IFNjb3BlZEVsZW1lbnRzTWFwXG4gKiBAdHlwZWRlZiB7aW1wb3J0KFwibGl0LWVsZW1lbnRcIikuTGl0RWxlbWVudH0gTGl0RWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnbGl0LWh0bWwvbGliL3NoYWR5LXJlbmRlcicpLlNoYWR5UmVuZGVyT3B0aW9uc30gU2hhZHlSZW5kZXJPcHRpb25zXG4gKiBAdHlwZWRlZiB7ZnVuY3Rpb24oVGVtcGxhdGVSZXN1bHQsIEVsZW1lbnR8RG9jdW1lbnRGcmFnbWVudHxTaGFkb3dSb290LCBTaGFkeVJlbmRlck9wdGlvbnMpOiB2b2lkfSBSZW5kZXJGdW5jdGlvblxuICovXG5cbi8qKlxuICogVGVtcGxhdGUgY2FjaGVzXG4gKlxuICogQHR5cGUge1dlYWtNYXA8RnVuY3Rpb24sIENhY2hlPFRlbXBsYXRlU3RyaW5nc0FycmF5LCBUZW1wbGF0ZVN0cmluZ3NBcnJheT4+fVxuICovXG5jb25zdCB0ZW1wbGF0ZUNhY2hlcyA9IG5ldyBXZWFrTWFwKCk7XG5cbi8qKlxuICogUmV0cmlldmVzIG9yIGNyZWF0ZXMgYSB0ZW1wbGF0ZUNhY2hlIGZvciBhIHNwZWNpZmljIGtleVxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleVxuICogQHJldHVybnMge0NhY2hlPFRlbXBsYXRlU3RyaW5nc0FycmF5LCBUZW1wbGF0ZVN0cmluZ3NBcnJheT59XG4gKi9cbmNvbnN0IGdldFRlbXBsYXRlQ2FjaGUgPSBrZXkgPT4ge1xuICBpZiAoIXRlbXBsYXRlQ2FjaGVzLmhhcyhrZXkpKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHRlbXBsYXRlQ2FjaGVzLnNldChrZXksIG5ldyBDYWNoZSh0ZW1wbGF0ZUNhY2hlcy5nZXQoa2V5LmNvbnN0cnVjdG9yKSkpO1xuICB9XG5cbiAgcmV0dXJuIHRlbXBsYXRlQ2FjaGVzLmdldChrZXkpO1xufTtcblxuLyoqXG4gKiBUYWdzIGNhY2hlc1xuICpcbiAqIEB0eXBlIHtXZWFrTWFwPG9iamVjdCwgQ2FjaGU8c3RyaW5nLCBzdHJpbmc+Pn1cbiAqL1xuY29uc3QgdGFnc0NhY2hlcyA9IG5ldyBXZWFrTWFwKCk7XG5cbi8qKlxuICogUmV0cmlldmVzIG9yIGNyZWF0ZXMgYSB0YWdzQ2FjaGUgZm9yIGEgc3BlY2lmaWMga2V5XG4gKiBAcGFyYW0ge29iamVjdH0ga2V5XG4gKiBAcmV0dXJucyB7Q2FjaGU8c3RyaW5nLCBzdHJpbmc+fVxuICovXG5jb25zdCBnZXRUYWdzQ2FjaGUgPSBrZXkgPT4ge1xuICBpZiAoIXRhZ3NDYWNoZXMuaGFzKGtleSkpIHtcbiAgICB0YWdzQ2FjaGVzLnNldChrZXksIG5ldyBDYWNoZSh0YWdzQ2FjaGVzLmdldChrZXkuY29uc3RydWN0b3IpKSk7XG4gIH1cblxuICByZXR1cm4gdGFnc0NhY2hlcy5nZXQoa2V5KTtcbn07XG5cbi8qKlxuICogVHJhbnNmb3JtcyBhbiBhcnJheSBvZiBUZW1wbGF0ZVJlc3VsdHMgb3IgYXJyYXlzIGludG8gYW5vdGhlciBvbmUgd2l0aCByZXNvbHZlZCBzY29wZWQgZWxlbWVudHNcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5QXJyYXl9IGl0ZW1zXG4gKiBAcGFyYW0ge1Njb3BlZEVsZW1lbnRzTWFwfSBzY29wZWRFbGVtZW50c1xuICogQHBhcmFtIHtDYWNoZTxUZW1wbGF0ZVN0cmluZ3NBcnJheSwgVGVtcGxhdGVTdHJpbmdzQXJyYXk+fSB0ZW1wbGF0ZUNhY2hlXG4gKiBAcGFyYW0ge0NhY2hlPHN0cmluZywgc3RyaW5nPn0gdGFnc0NhY2hlXG4gKiBAcmV0dXJucyB7UmVhZG9ubHlBcnJheX1cbiAqL1xuY29uc3QgdHJhbnNmb3JtQXJyYXkgPSAoaXRlbXMsIHNjb3BlZEVsZW1lbnRzLCB0ZW1wbGF0ZUNhY2hlLCB0YWdzQ2FjaGUpID0+XG4gIGl0ZW1zLm1hcCh2YWx1ZSA9PiB7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVSZXN1bHQpIHtcbiAgICAgIHJldHVybiB0cmFuc2Zvcm1UZW1wbGF0ZSh2YWx1ZSwgc2NvcGVkRWxlbWVudHMsIHRlbXBsYXRlQ2FjaGUsIHRhZ3NDYWNoZSk7XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdHJhbnNmb3JtQXJyYXkodmFsdWUsIHNjb3BlZEVsZW1lbnRzLCB0ZW1wbGF0ZUNhY2hlLCB0YWdzQ2FjaGUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfSk7XG5cbi8qKlxuICogVHJhbnNmb3JtcyBhIFRlbXBsYXRlUmVzdWx0IGludG8gYW5vdGhlciBvbmUgd2l0aCByZXNvbHZlZCBzY29wZWQgZWxlbWVudHNcbiAqXG4gKiBAcGFyYW0ge1RlbXBsYXRlUmVzdWx0fSB0ZW1wbGF0ZVxuICogQHBhcmFtIHtTY29wZWRFbGVtZW50c01hcH0gc2NvcGVkRWxlbWVudHNcbiAqIEBwYXJhbSB7Q2FjaGU8VGVtcGxhdGVTdHJpbmdzQXJyYXksIFRlbXBsYXRlU3RyaW5nc0FycmF5Pn0gdGVtcGxhdGVDYWNoZVxuICogQHBhcmFtIHtDYWNoZTxzdHJpbmcsIHN0cmluZz59IHRhZ3NDYWNoZVxuICogQHJldHVybnMge1RlbXBsYXRlUmVzdWx0fVxuICovXG5jb25zdCB0cmFuc2Zvcm1UZW1wbGF0ZSA9ICh0ZW1wbGF0ZSwgc2NvcGVkRWxlbWVudHMsIHRlbXBsYXRlQ2FjaGUsIHRhZ3NDYWNoZSkgPT5cbiAgbmV3IFRlbXBsYXRlUmVzdWx0KFxuICAgIHRyYW5zZm9ybSh0ZW1wbGF0ZS5zdHJpbmdzLCBzY29wZWRFbGVtZW50cywgdGVtcGxhdGVDYWNoZSwgdGFnc0NhY2hlKSxcbiAgICB0cmFuc2Zvcm1BcnJheSh0ZW1wbGF0ZS52YWx1ZXMsIHNjb3BlZEVsZW1lbnRzLCB0ZW1wbGF0ZUNhY2hlLCB0YWdzQ2FjaGUpLFxuICAgIHRlbXBsYXRlLnR5cGUsXG4gICAgdGVtcGxhdGUucHJvY2Vzc29yLFxuICApO1xuXG4vKipcbiAqIEdldHMgYW4gaW5zdGFuY2Ugb2YgdGhlIFNjb3BlZEVsZW1lbnRzVGVtcGxhdGVGYWN0b3J5XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHNjb3BlTmFtZVxuICogQHBhcmFtIHtTY29wZWRFbGVtZW50c01hcH0gc2NvcGVkRWxlbWVudHNcbiAqIEBwYXJhbSB7Q2FjaGU8VGVtcGxhdGVTdHJpbmdzQXJyYXksIFRlbXBsYXRlU3RyaW5nc0FycmF5Pn0gdGVtcGxhdGVDYWNoZVxuICogQHBhcmFtIHtDYWNoZTxzdHJpbmcsIHN0cmluZz59IHRhZ3NDYWNoZVxuICogQHJldHVybnMge2Z1bmN0aW9uKGFueSk6IGFueX1cbiAqL1xuY29uc3Qgc2NvcGVkRWxlbWVudHNUZW1wbGF0ZUZhY3RvcnkgPSAoXG4gIHNjb3BlTmFtZSxcbiAgc2NvcGVkRWxlbWVudHMsXG4gIHRlbXBsYXRlQ2FjaGUsXG4gIHRhZ3NDYWNoZSxcbikgPT4gdGVtcGxhdGUgPT4ge1xuICBjb25zdCBuZXdUZW1wbGF0ZSA9IHRyYW5zZm9ybVRlbXBsYXRlKHRlbXBsYXRlLCBzY29wZWRFbGVtZW50cywgdGVtcGxhdGVDYWNoZSwgdGFnc0NhY2hlKTtcblxuICByZXR1cm4gc2hhZHlUZW1wbGF0ZUZhY3Rvcnkoc2NvcGVOYW1lKShuZXdUZW1wbGF0ZSk7XG59O1xuXG4vKiogQHR5cGUge1Njb3BlZEVsZW1lbnRzTWl4aW59ICovXG5jb25zdCBTY29wZWRFbGVtZW50c01peGluSW1wbGVtZW50YXRpb24gPSBzdXBlcmNsYXNzID0+XG4gIGNsYXNzIFNjb3BlZEVsZW1lbnRzSG9zdCBleHRlbmRzIHN1cGVyY2xhc3Mge1xuICAgIC8qKlxuICAgICAqIE9idGFpbnMgdGhlIHNjb3BlZCBlbGVtZW50cyBkZWZpbml0aW9ucyBtYXBcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtTY29wZWRFbGVtZW50c01hcH1cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IHNjb3BlZEVsZW1lbnRzKCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIC8qKiBAb3ZlcnJpZGUgKi9cbiAgICBzdGF0aWMgcmVuZGVyKHRlbXBsYXRlLCBjb250YWluZXIsIG9wdGlvbnMpIHtcbiAgICAgIGlmICghb3B0aW9ucyB8fCB0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcgfHwgIW9wdGlvbnMuc2NvcGVOYW1lKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGBzY29wZU5hbWVgIG9wdGlvbiBpcyByZXF1aXJlZC4nKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHsgc2NvcGVOYW1lLCBldmVudENvbnRleHQgfSA9IG9wdGlvbnM7XG5cbiAgICAgIGNvbnN0IHRlbXBsYXRlQ2FjaGUgPSBnZXRUZW1wbGF0ZUNhY2hlKGV2ZW50Q29udGV4dCk7XG4gICAgICBjb25zdCB0YWdzQ2FjaGUgPSBnZXRUYWdzQ2FjaGUoZXZlbnRDb250ZXh0KTtcbiAgICAgIGNvbnN0IHsgc2NvcGVkRWxlbWVudHMgfSA9IHRoaXM7XG5cbiAgICAgIHJldHVybiBzdXBlci5yZW5kZXIodGVtcGxhdGUsIGNvbnRhaW5lciwge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICB0ZW1wbGF0ZUZhY3Rvcnk6IHNjb3BlZEVsZW1lbnRzVGVtcGxhdGVGYWN0b3J5KFxuICAgICAgICAgIHNjb3BlTmFtZSxcbiAgICAgICAgICBzY29wZWRFbGVtZW50cyxcbiAgICAgICAgICB0ZW1wbGF0ZUNhY2hlLFxuICAgICAgICAgIHRhZ3NDYWNoZSxcbiAgICAgICAgKSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlZmluZXMgYSBzY29wZWQgZWxlbWVudFxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWVcbiAgICAgKiBAcGFyYW0ge3R5cGVvZiBIVE1MRWxlbWVudH0ga2xhc3NcbiAgICAgKi9cbiAgICBkZWZpbmVTY29wZWRFbGVtZW50KHRhZ05hbWUsIGtsYXNzKSB7XG4gICAgICByZXR1cm4gZGVmaW5lU2NvcGVkRWxlbWVudCh0YWdOYW1lLCBrbGFzcywgZ2V0VGFnc0NhY2hlKHRoaXMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgc2NvcGVkIHRhZyBuYW1lXG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZCBQbGVhc2UsIHVzZSB0aGUgaW5zdGFuY2UgbWV0aG9kIGluc3RlYWQgb2YgdGhlIHN0YXRpYyBvbmUuIFRoaXMgc3RhdGljIG1ldGhvZCBpcyBub3QgYWJsZSB0b1xuICAgICAqIG9idGFpbiB0aGUgdGFnTmFtZSBvZiBsYXp5IGRlZmluZWQgZWxlbWVudHMsIHdoaWxlIHRoZSBpbnN0YW5jZSBvbmUgaXMuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWVcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0U2NvcGVkVGFnTmFtZSh0YWdOYW1lKSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBjb25zdCBrbGFzcyA9IHRoaXMuc2NvcGVkRWxlbWVudHNbdGFnTmFtZV07XG5cbiAgICAgIHJldHVybiBrbGFzc1xuICAgICAgICA/IHJlZ2lzdGVyRWxlbWVudCh0YWdOYW1lLCBrbGFzcywgZ2V0VGFnc0NhY2hlKHRoaXMpKVxuICAgICAgICA6IGdldFRhZ3NDYWNoZSh0aGlzKS5nZXQodGFnTmFtZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHNjb3BlZCB0YWcgbmFtZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWVcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICBnZXRTY29wZWRUYWdOYW1lKHRhZ05hbWUpIHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGNvbnN0IGtsYXNzID0gdGhpcy5jb25zdHJ1Y3Rvci5zY29wZWRFbGVtZW50c1t0YWdOYW1lXTtcblxuICAgICAgcmV0dXJuIGtsYXNzXG4gICAgICAgID8gcmVnaXN0ZXJFbGVtZW50KHRhZ05hbWUsIGtsYXNzLCBnZXRUYWdzQ2FjaGUodGhpcykpXG4gICAgICAgIDogZ2V0VGFnc0NhY2hlKHRoaXMpLmdldCh0YWdOYW1lKTtcbiAgICB9XG4gIH07XG5cbmV4cG9ydCBjb25zdCBTY29wZWRFbGVtZW50c01peGluID0gZGVkdXBlTWl4aW4oU2NvcGVkRWxlbWVudHNNaXhpbkltcGxlbWVudGF0aW9uKTtcbiIsImltcG9ydCB7IGMgYXMgY29tbW9uU3R5bGVzLCBfIGFzIF9fZGVjb3JhdGUgfSBmcm9tICcuL2Jhc2Uuc3R5bGVzLTExZDM5MTgxLmpzJztcbmltcG9ydCB7IGNzcywgTGl0RWxlbWVudCwgbm90aGluZywgaHRtbCB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBwcm9wZXJ0eSwgY3VzdG9tRWxlbWVudCB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IGNsYXNzTWFwIH0gZnJvbSAnbGl0L2RpcmVjdGl2ZXMvY2xhc3MtbWFwLmpzJztcbmltcG9ydCB7IEkgYXMgSWNvbnMgfSBmcm9tICcuL2ljb25UeXBlLTgzMjZlZGRiLmpzJztcbmltcG9ydCB7IHIgYXMgcmVuZGVySWNvbiB9IGZyb20gJy4vaWNvbi5iYXNlLTdhOTE5ZGIyLmpzJztcblxuY29uc3QgQmFkZ2VWYXJpYW50cyA9IHtcbiAgZGVmYXVsdDogJ2RlZmF1bHQnLFxuICBhY3RpdmU6ICdhY3RpdmUnLFxuICBzdWNjZXNzOiAnc3VjY2VzcycsXG4gIGVycm9yOiAnZXJyb3InLFxuICBpbmZvOiAnaW5mbycsXG4gIHdhcm5pbmc6ICd3YXJuaW5nJ1xufTtcbmNvbnN0IEJhZGdlQ29udGFpbmVycyA9IHtcbiAgZmlsbGVkOiAnZmlsbGVkJyxcbiAgb3V0bGluZTogJ291dGxpbmUnXG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuY29uc3QgdG9rZW5zID0gY3NzYFxuICAqIHtcbiAgLS1uZS1iYWRnZS1zaXppbmctaWNvbjogdmFyKC0tbmUtcmVmLXNpemluZy0wNCwgMWVtKTtcbiAgLS1uZS1iYWRnZS1zaXppbmctaGVpZ2h0OiB2YXIoLS1uZS1yZWYtc2l6aW5nLTA2LCAxLjVlbSk7XG4gIC0tbmUtYmFkZ2UtcGFkZGluZy1ob3Jpem9udGFsOiB2YXIoLS1uZS1yZWYtc3BhY2luZy14LXNtYWxsLCAwLjVlbSk7XG4gIC0tbmUtYmFkZ2UtZ2FwOiB2YXIoLS1uZS1yZWYtc3BhY2luZy14eC1zbWFsbCwgMC4yNWVtKTtcbiAgLS1uZS1iYWRnZS1jb2xvci1ib3JkZXItZmlsbGVkLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTA1LCAjRUZGMEYwKTtcbiAgLS1uZS1iYWRnZS1jb2xvci1ib3JkZXItZmlsbGVkLWFjdGl2ZTogdmFyKC0tbmUtcmVmLWNvbG9yLXZpb2xldC0yMCwgI0Q5QzFGMSk7XG4gIC0tbmUtYmFkZ2UtY29sb3ItYm9yZGVyLWZpbGxlZC1zdWNjZXNzOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JlZW4tNTAsICMwMDg3MzgpO1xuICAtLW5lLWJhZGdlLWNvbG9yLWJvcmRlci1maWxsZWQtZXJyb3I6IHZhcigtLW5lLXJlZi1jb2xvci1yZWQtNTAsICNFNjAwMDApO1xuICAtLW5lLWJhZGdlLWNvbG9yLWJvcmRlci1maWxsZWQtaW5mbzogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtNjAsICMwMDZCRDYpO1xuICAtLW5lLWJhZGdlLWNvbG9yLWJvcmRlci1maWxsZWQtd2FybmluZzogdmFyKC0tbmUtcmVmLWNvbG9yLXllbGxvdy01MCwgI0ZGQ0YxQSk7XG4gIC0tbmUtYmFkZ2UtY29sb3ItYm9yZGVyLW91dGxpbmUtZGVmYXVsdDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktMjAsICNDNEM3Q0EpO1xuICAtLW5lLWJhZGdlLWNvbG9yLWJvcmRlci1vdXRsaW5lLWFjdGl2ZTogdmFyKC0tbmUtcmVmLWNvbG9yLXZpb2xldC02MCwgIzdGMzBDRik7XG4gIC0tbmUtYmFkZ2UtY29sb3ItYm9yZGVyLW91dGxpbmUtc3VjY2VzczogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZWVuLTUwLCAjMDA4NzM4KTtcbiAgLS1uZS1iYWRnZS1jb2xvci1ib3JkZXItb3V0bGluZS1lcnJvcjogdmFyKC0tbmUtcmVmLWNvbG9yLXJlZC01MCwgI0U2MDAwMCk7XG4gIC0tbmUtYmFkZ2UtY29sb3ItYm9yZGVyLW91dGxpbmUtaW5mbzogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtNjAsICMwMDZCRDYpO1xuICAtLW5lLWJhZGdlLWNvbG9yLWJvcmRlci1vdXRsaW5lLXdhcm5pbmc6IHZhcigtLW5lLXJlZi1jb2xvci15ZWxsb3ctNTAsICNGRkNGMUEpO1xuICAtLW5lLWJhZGdlLWNvbG9yLWJhY2tncm91bmQtZmlsbGVkLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTA1LCAjRUZGMEYwKTtcbiAgLS1uZS1iYWRnZS1jb2xvci1iYWNrZ3JvdW5kLWZpbGxlZC1hY3RpdmU6IHZhcigtLW5lLXJlZi1jb2xvci12aW9sZXQtMjAsICNEOUMxRjEpO1xuICAtLW5lLWJhZGdlLWNvbG9yLWJhY2tncm91bmQtZmlsbGVkLXN1Y2Nlc3M6IHZhcigtLW5lLXJlZi1jb2xvci1ncmVlbi01MCwgIzAwODczOCk7XG4gIC0tbmUtYmFkZ2UtY29sb3ItYmFja2dyb3VuZC1maWxsZWQtZXJyb3I6IHZhcigtLW5lLXJlZi1jb2xvci1yZWQtNTAsICNFNjAwMDApO1xuICAtLW5lLWJhZGdlLWNvbG9yLWJhY2tncm91bmQtZmlsbGVkLWluZm86IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTYwLCAjMDA2QkQ2KTtcbiAgLS1uZS1iYWRnZS1jb2xvci1iYWNrZ3JvdW5kLWZpbGxlZC13YXJuaW5nOiB2YXIoLS1uZS1yZWYtY29sb3IteWVsbG93LTUwLCAjRkZDRjFBKTtcbiAgLS1uZS1iYWRnZS1jb2xvci1sYWJlbC1maWxsZWQtZGVmYXVsdDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktOTAsICMxNjE3MTgpO1xuICAtLW5lLWJhZGdlLWNvbG9yLWxhYmVsLWZpbGxlZC1hY3RpdmU6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTkwLCAjMTYxNzE4KTtcbiAgLS1uZS1iYWRnZS1jb2xvci1sYWJlbC1maWxsZWQtc3VjY2VzczogdmFyKC0tbmUtcmVmLWNvbG9yLXdoaXRlLCAjZmZmZmZmKTtcbiAgLS1uZS1iYWRnZS1jb2xvci1sYWJlbC1maWxsZWQtZXJyb3I6IHZhcigtLW5lLXJlZi1jb2xvci13aGl0ZSwgI2ZmZmZmZik7XG4gIC0tbmUtYmFkZ2UtY29sb3ItbGFiZWwtZmlsbGVkLWluZm86IHZhcigtLW5lLXJlZi1jb2xvci13aGl0ZSwgI2ZmZmZmZik7XG4gIC0tbmUtYmFkZ2UtY29sb3ItbGFiZWwtZmlsbGVkLXdhcm5pbmc6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTkwLCAjMTYxNzE4KTtcbiAgLS1uZS1iYWRnZS1jb2xvci1sYWJlbC1vdXRsaW5lLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTkwLCAjMTYxNzE4KTtcbiAgLS1uZS1iYWRnZS1jb2xvci1sYWJlbC1vdXRsaW5lLWFjdGl2ZTogdmFyKC0tbmUtcmVmLWNvbG9yLXZpb2xldC02MCwgIzdGMzBDRik7XG4gIC0tbmUtYmFkZ2UtY29sb3ItbGFiZWwtb3V0bGluZS1zdWNjZXNzOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JlZW4tNTAsICMwMDg3MzgpO1xuICAtLW5lLWJhZGdlLWNvbG9yLWxhYmVsLW91dGxpbmUtZXJyb3I6IHZhcigtLW5lLXJlZi1jb2xvci1yZWQtNTAsICNFNjAwMDApO1xuICAtLW5lLWJhZGdlLWNvbG9yLWxhYmVsLW91dGxpbmUtaW5mbzogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtNjAsICMwMDZCRDYpO1xuICAtLW5lLWJhZGdlLWNvbG9yLWxhYmVsLW91dGxpbmUtd2FybmluZzogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktOTAsICMxNjE3MTgpO1xuICAtLW5lLWJhZGdlLWJvcmRlci1yYWRpdXM6IHZhcigtLW5lLXJlZi1ib3JkZXItcmFkaXVzLXhsLCAwLjc1ZW0pO1xuICAtLW5lLWJhZGdlLWJvcmRlci13aWR0aDogdmFyKC0tbmUtcmVmLWJvcmRlci13aWR0aC1zbWFsbCwgMXB4KTtcbiAgLS1uZS1iYWRnZS1mb250LWZhbWlseTogdmFyKC0tbmUtcmVmLWZvbnQtZmFtaWx5LW9wZW4tc2FucywgT3BlbiBTYW5zKTtcbiAgLS1uZS1iYWRnZS1mb250LXNpemU6IHZhcigtLW5lLXJlZi1mb250LXNpemUtMDQsIDAuODc1ZW0pO1xufVxuYDtcblxuY29uc3QgYmFzZUJhZGdlID0gY3NzYFxuICAuYmFkZ2Uge1xuICAgIGhlaWdodDogdmFyKC0tbmUtYmFkZ2Utc2l6aW5nLWhlaWdodCk7XG4gICAgcGFkZGluZy1yaWdodDogdmFyKC0tbmUtYmFkZ2UtcGFkZGluZy1ob3Jpem9udGFsKTtcbiAgICBwYWRkaW5nLWxlZnQ6IHZhcigtLW5lLWJhZGdlLXBhZGRpbmctaG9yaXpvbnRhbCk7XG4gICAgZ2FwOiB2YXIoLS1uZS1iYWRnZS1nYXApO1xuICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLW5lLWJhZGdlLWJvcmRlci1yYWRpdXMpO1xuICAgIGJvcmRlci13aWR0aDogdmFyKC0tbmUtYmFkZ2UtYm9yZGVyLXdpZHRoKTtcbiAgICBmb250LWZhbWlseTogdmFyKC0tbmUtYmFkZ2UtZm9udC1mYW1pbHkpO1xuICAgIGZvbnQtc2l6ZTogdmFyKC0tbmUtYmFkZ2UtZm9udC1zaXplKTtcbiAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIH1cblxuICAuYmFkZ2UtbGVmdC1pY29uIHtcbiAgICB3aWR0aDogdmFyKC0tbmUtYmFkZ2Utc2l6aW5nLWljb24pO1xuICB9XG5cbiAgLmJhZGdlLWZpbGxlZC1kZWZhdWx0IHtcbiAgICBjb2xvcjogdmFyKC0tbmUtYmFkZ2UtY29sb3ItbGFiZWwtZmlsbGVkLWRlZmF1bHQpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLWJhZGdlLWNvbG9yLWJhY2tncm91bmQtZmlsbGVkLWRlZmF1bHQpO1xuICAgIGJvcmRlci1jb2xvcjogdmFyKC0tbmUtYmFkZ2UtY29sb3ItYm9yZGVyLWZpbGxlZC1kZWZhdWx0KTtcbiAgfVxuXG4gIC5iYWRnZS1vdXRsaW5lLWRlZmF1bHQge1xuICAgIGNvbG9yOiB2YXIoLS1uZS1iYWRnZS1jb2xvci1sYWJlbC1vdXRsaW5lLWRlZmF1bHQpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLWJhZGdlLWNvbG9yLWJhY2tncm91bmQtb3V0bGluZS1kZWZhdWx0KTtcbiAgICBib3JkZXItY29sb3I6IHZhcigtLW5lLWJhZGdlLWNvbG9yLWJvcmRlci1vdXRsaW5lLWRlZmF1bHQpO1xuICB9XG5cbiAgLmJhZGdlLWZpbGxlZC1hY3RpdmUge1xuICAgIGNvbG9yOiB2YXIoLS1uZS1iYWRnZS1jb2xvci1sYWJlbC1maWxsZWQtYWN0aXZlKTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1iYWRnZS1jb2xvci1iYWNrZ3JvdW5kLWZpbGxlZC1hY3RpdmUpO1xuICAgIGJvcmRlci1jb2xvcjogdmFyKC0tbmUtYmFkZ2UtY29sb3ItYm9yZGVyLWZpbGxlZC1hY3RpdmUpO1xuICB9XG5cbiAgLmJhZGdlLW91dGxpbmUtYWN0aXZlIHtcbiAgICBjb2xvcjogdmFyKC0tbmUtYmFkZ2UtY29sb3ItbGFiZWwtb3V0bGluZS1hY3RpdmUpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLWJhZGdlLWNvbG9yLWJhY2tncm91bmQtb3V0bGluZS1hY3RpdmUpO1xuICAgIGJvcmRlci1jb2xvcjogdmFyKC0tbmUtYmFkZ2UtY29sb3ItYm9yZGVyLW91dGxpbmUtYWN0aXZlKTtcbiAgfVxuXG4gIC5iYWRnZS1maWxsZWQtc3VjY2VzcyB7XG4gICAgY29sb3I6IHZhcigtLW5lLWJhZGdlLWNvbG9yLWxhYmVsLWZpbGxlZC1zdWNjZXNzKTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1iYWRnZS1jb2xvci1iYWNrZ3JvdW5kLWZpbGxlZC1zdWNjZXNzKTtcbiAgICBib3JkZXItY29sb3I6IHZhcigtLW5lLWJhZGdlLWNvbG9yLWJvcmRlci1maWxsZWQtc3VjY2Vzcyk7XG4gIH1cblxuICAuYmFkZ2Utb3V0bGluZS1zdWNjZXNzIHtcbiAgICBjb2xvcjogdmFyKC0tbmUtYmFkZ2UtY29sb3ItbGFiZWwtb3V0bGluZS1zdWNjZXNzKTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1iYWRnZS1jb2xvci1iYWNrZ3JvdW5kLW91dGxpbmUtc3VjY2Vzcyk7XG4gICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1uZS1iYWRnZS1jb2xvci1ib3JkZXItb3V0bGluZS1zdWNjZXNzKTtcbiAgfVxuXG4gIC5iYWRnZS1maWxsZWQtZXJyb3Ige1xuICAgIGNvbG9yOiB2YXIoLS1uZS1iYWRnZS1jb2xvci1sYWJlbC1maWxsZWQtZXJyb3IpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLWJhZGdlLWNvbG9yLWJhY2tncm91bmQtZmlsbGVkLWVycm9yKTtcbiAgICBib3JkZXItY29sb3I6IHZhcigtLW5lLWJhZGdlLWNvbG9yLWJvcmRlci1maWxsZWQtZXJyb3IpO1xuICB9XG5cbiAgLmJhZGdlLW91dGxpbmUtZXJyb3Ige1xuICAgIGNvbG9yOiB2YXIoLS1uZS1iYWRnZS1jb2xvci1sYWJlbC1vdXRsaW5lLWVycm9yKTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1iYWRnZS1jb2xvci1iYWNrZ3JvdW5kLW91dGxpbmUtZXJyb3IpO1xuICAgIGJvcmRlci1jb2xvcjogdmFyKC0tbmUtYmFkZ2UtY29sb3ItYm9yZGVyLW91dGxpbmUtZXJyb3IpO1xuICB9XG5cbiAgLmJhZGdlLWZpbGxlZC1pbmZvIHtcbiAgICBjb2xvcjogdmFyKC0tbmUtYmFkZ2UtY29sb3ItbGFiZWwtZmlsbGVkLWluZm8pO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLWJhZGdlLWNvbG9yLWJhY2tncm91bmQtZmlsbGVkLWluZm8pO1xuICAgIGJvcmRlci1jb2xvcjogdmFyKC0tbmUtYmFkZ2UtY29sb3ItYm9yZGVyLWZpbGxlZC1pbmZvKTtcbiAgfVxuXG4gIC5iYWRnZS1vdXRsaW5lLWluZm8ge1xuICAgIGNvbG9yOiB2YXIoLS1uZS1iYWRnZS1jb2xvci1sYWJlbC1vdXRsaW5lLWluZm8pO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLWJhZGdlLWNvbG9yLWJhY2tncm91bmQtb3V0bGluZS1pbmZvKTtcbiAgICBib3JkZXItY29sb3I6IHZhcigtLW5lLWJhZGdlLWNvbG9yLWJvcmRlci1vdXRsaW5lLWluZm8pO1xuICB9XG5cbiAgLmJhZGdlLWZpbGxlZC13YXJuaW5nIHtcbiAgICBjb2xvcjogdmFyKC0tbmUtYmFkZ2UtY29sb3ItbGFiZWwtZmlsbGVkLXdhcm5pbmcpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLWJhZGdlLWNvbG9yLWJhY2tncm91bmQtZmlsbGVkLXdhcm5pbmcpO1xuICAgIGJvcmRlci1jb2xvcjogdmFyKC0tbmUtYmFkZ2UtY29sb3ItYm9yZGVyLWZpbGxlZC13YXJuaW5nKTtcbiAgfVxuXG4gIC5iYWRnZS1vdXRsaW5lLXdhcm5pbmcge1xuICAgIGNvbG9yOiB2YXIoLS1uZS1iYWRnZS1jb2xvci1sYWJlbC1vdXRsaW5lLXdhcm5pbmcpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLWJhZGdlLWNvbG9yLWJhY2tncm91bmQtb3V0bGluZS13YXJuaW5nKTtcbiAgICBib3JkZXItY29sb3I6IHZhcigtLW5lLWJhZGdlLWNvbG9yLWJvcmRlci1vdXRsaW5lLXdhcm5pbmcpO1xuICB9XG5gO1xuY29uc3Qgc3R5bGVzID0gW2Jhc2VCYWRnZSwgY29tbW9uU3R5bGVzLCB0b2tlbnNdO1xuXG4vKipcbiAqIEB0YWcgbmUtYmFkZ2VcbiAqIEB0YWduYW1lIG5lLWJhZGdlXG4gKlxuICogQGRlc2NyaXB0aW9uIENvbnRyb2wgdGhhdCByZW5kZXJzIGEgYmFkZ2Ugd2l0aCBhIGxhYmVsIGFuZCBhbiBvcHRpb25hbCBsZWZ0IFNWRyBpY29uLlxuICpcbiAqL1xubGV0IE5lQmFkZ2UgPSBjbGFzcyBOZUJhZGdlIGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgLyoqIFNwZWNpZmllcyB0aGUgdGV4dCB0aGF0IHdpbGwgZGlzcGxheWVkIG9uIHRoZSBiYWRnZSAqL1xuICAgIHRoaXMubGFiZWwgPSAnJztcbiAgICAvKiogU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IHRvIHNob3cgbGVmdCBpY29uIGluc2lkZSB0aGUgYmFkZ2UgKi9cbiAgICB0aGlzLnNob3dMZWZ0SWNvbiA9IGZhbHNlO1xuICAgIC8qKiBTcGVjaWZpZXMgdGhlIHZhcmlhbnQgb2YgdGhlIGJhZGdlIHRvIGRpc3BsYXkgKi9cbiAgICB0aGlzLnZhcmlhbnQgPSBCYWRnZVZhcmlhbnRzLmRlZmF1bHQ7XG4gICAgLyoqIFNwZWNpZmllcyB0aGUgY29udGFpbmVyIG9mIHRoZSBiYWRnZSB0byBkaXNwbGF5ICovXG4gICAgdGhpcy5jb250YWluZXIgPSBCYWRnZUNvbnRhaW5lcnMuZmlsbGVkO1xuICB9XG4gIHN0YXRpYyBnZXQgc3R5bGVzKCkge1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH1cbiAgX2dldEJhZGdlQ2xhc3NlcygpIHtcbiAgICBjb25zdCBpc0ZpbGxlZCA9IHRoaXMuY29udGFpbmVyID09PSBCYWRnZUNvbnRhaW5lcnMuZmlsbGVkO1xuICAgIGNvbnN0IGlzT3V0bGluZSA9IHRoaXMuY29udGFpbmVyID09PSBCYWRnZUNvbnRhaW5lcnMub3V0bGluZTtcbiAgICBjb25zdCBpc0RlZmF1bHQgPSB0aGlzLnZhcmlhbnQgPT09IEJhZGdlVmFyaWFudHMuZGVmYXVsdDtcbiAgICBjb25zdCBpc0FjdGl2ZSA9IHRoaXMudmFyaWFudCA9PT0gQmFkZ2VWYXJpYW50cy5hY3RpdmU7XG4gICAgY29uc3QgaXNTdWNjZXNzID0gdGhpcy52YXJpYW50ID09PSBCYWRnZVZhcmlhbnRzLnN1Y2Nlc3M7XG4gICAgY29uc3QgaXNFcnJvciA9IHRoaXMudmFyaWFudCA9PT0gQmFkZ2VWYXJpYW50cy5lcnJvcjtcbiAgICBjb25zdCBpc0luZm8gPSB0aGlzLnZhcmlhbnQgPT09IEJhZGdlVmFyaWFudHMuaW5mbztcbiAgICBjb25zdCBpc1dhcm5pbmcgPSB0aGlzLnZhcmlhbnQgPT09IEJhZGdlVmFyaWFudHMud2FybmluZztcbiAgICByZXR1cm4ge1xuICAgICAgYmFkZ2U6IHRydWUsXG4gICAgICAnYmFkZ2UtZmlsbGVkLWRlZmF1bHQnOiBpc0ZpbGxlZCAmJiBpc0RlZmF1bHQsXG4gICAgICAnYmFkZ2Utb3V0bGluZS1kZWZhdWx0JzogaXNPdXRsaW5lICYmIGlzRGVmYXVsdCxcbiAgICAgICdiYWRnZS1maWxsZWQtYWN0aXZlJzogaXNGaWxsZWQgJiYgaXNBY3RpdmUsXG4gICAgICAnYmFkZ2Utb3V0bGluZS1hY3RpdmUnOiBpc091dGxpbmUgJiYgaXNBY3RpdmUsXG4gICAgICAnYmFkZ2UtZmlsbGVkLXN1Y2Nlc3MnOiBpc0ZpbGxlZCAmJiBpc1N1Y2Nlc3MsXG4gICAgICAnYmFkZ2Utb3V0bGluZS1zdWNjZXNzJzogaXNPdXRsaW5lICYmIGlzU3VjY2VzcyxcbiAgICAgICdiYWRnZS1maWxsZWQtZXJyb3InOiBpc0ZpbGxlZCAmJiBpc0Vycm9yLFxuICAgICAgJ2JhZGdlLW91dGxpbmUtZXJyb3InOiBpc091dGxpbmUgJiYgaXNFcnJvcixcbiAgICAgICdiYWRnZS1maWxsZWQtaW5mbyc6IGlzRmlsbGVkICYmIGlzSW5mbyxcbiAgICAgICdiYWRnZS1vdXRsaW5lLWluZm8nOiBpc091dGxpbmUgJiYgaXNJbmZvLFxuICAgICAgJ2JhZGdlLWZpbGxlZC13YXJuaW5nJzogaXNGaWxsZWQgJiYgaXNXYXJuaW5nLFxuICAgICAgJ2JhZGdlLW91dGxpbmUtd2FybmluZyc6IGlzT3V0bGluZSAmJiBpc1dhcm5pbmdcbiAgICB9O1xuICB9XG4gIF9nZXRCYWRnZUljb25UeXBlKCkge1xuICAgIHN3aXRjaCAodGhpcy52YXJpYW50KSB7XG4gICAgICBjYXNlIEJhZGdlVmFyaWFudHMuYWN0aXZlOlxuICAgICAgICByZXR1cm4gSWNvbnMuc3VjY2VzcztcbiAgICAgIGNhc2UgQmFkZ2VWYXJpYW50cy5zdWNjZXNzOlxuICAgICAgICByZXR1cm4gSWNvbnMuc3VjY2VzcztcbiAgICAgIGNhc2UgQmFkZ2VWYXJpYW50cy5lcnJvcjpcbiAgICAgICAgcmV0dXJuIEljb25zLmRhbmdlckV4Y2xhbWF0aW9uO1xuICAgICAgY2FzZSBCYWRnZVZhcmlhbnRzLmluZm86XG4gICAgICAgIHJldHVybiBJY29ucy5pbmZvO1xuICAgICAgY2FzZSBCYWRnZVZhcmlhbnRzLndhcm5pbmc6XG4gICAgICAgIHJldHVybiBJY29ucy53YXJuaW5nRXhjbGFtYXRpb247XG4gICAgICBjYXNlIEJhZGdlVmFyaWFudHMuZGVmYXVsdDpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBJY29ucy51c2VyO1xuICAgIH1cbiAgfVxuICBfcmVuZGVyQmFkZ2VMZWZ0SWNvbigpIHtcbiAgICBpZiAoIXRoaXMuc2hvd0xlZnRJY29uKSB7XG4gICAgICByZXR1cm4gbm90aGluZztcbiAgICB9XG4gICAgY29uc3QgaWNvblR5cGUgPSB0aGlzLmxlZnRJY29uT3ZlcnJpZGUgfHwgdGhpcy5fZ2V0QmFkZ2VJY29uVHlwZSgpO1xuICAgIHJldHVybiByZW5kZXJJY29uKHtcbiAgICAgIHR5cGU6IGljb25UeXBlXG4gICAgfSk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IGNsYXNzZXMgPSB0aGlzLl9nZXRCYWRnZUNsYXNzZXMoKTtcbiAgICByZXR1cm4gaHRtbGBcbiAgICAgIDxkaXZcbiAgICAgICAgaWQ9JHt0aGlzLmlkfVxuICAgICAgICByb2xlPVwiYWxlcnRcIlxuICAgICAgICBhcmlhLWxhYmVsPSR7dGhpcy5sYWJlbCB8fCBub3RoaW5nfVxuICAgICAgICBjbGFzcz0ke2NsYXNzTWFwKGNsYXNzZXMpfVxuICAgICAgPlxuICAgICAgICA8c3BhbiBjbGFzcz0ke3RoaXMuc2hvd0xlZnRJY29uID8gJ2JhZGdlLWxlZnQtaWNvbicgOiAnaGlkZGVuJ30+XG4gICAgICAgICAgJHt0aGlzLl9yZW5kZXJCYWRnZUxlZnRJY29uKCl9XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgICAgJHt0aGlzLmxhYmVsfVxuICAgICAgPC9kaXY+XG4gICAgYDtcbiAgfVxufTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogU3RyaW5nLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIE5lQmFkZ2UucHJvdG90eXBlLCBcImxhYmVsXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IEJvb2xlYW4sXG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVCYWRnZS5wcm90b3R5cGUsIFwic2hvd0xlZnRJY29uXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZyxcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZUJhZGdlLnByb3RvdHlwZSwgXCJsZWZ0SWNvbk92ZXJyaWRlXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZyxcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZUJhZGdlLnByb3RvdHlwZSwgXCJ2YXJpYW50XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZyxcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZUJhZGdlLnByb3RvdHlwZSwgXCJjb250YWluZXJcIiwgdm9pZCAwKTtcbk5lQmFkZ2UgPSBfX2RlY29yYXRlKFtjdXN0b21FbGVtZW50KCduZS1iYWRnZScpXSwgTmVCYWRnZSk7XG5cbmV4cG9ydCB7IEJhZGdlVmFyaWFudHMgYXMgQiwgTmVCYWRnZSBhcyBOLCBCYWRnZUNvbnRhaW5lcnMgYXMgYSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFkZ2UtYWYxMWZiMjYuanMubWFwXG4iLCJpbXBvcnQgeyBfIGFzIF9fZGVjb3JhdGUgfSBmcm9tICcuL2Jhc2Uuc3R5bGVzLTExZDM5MTgxLmpzJztcbmltcG9ydCB7IExpdEVsZW1lbnQsIGh0bWwsIGNzcyB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBjbGFzc01hcCB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL2NsYXNzLW1hcC5qcyc7XG5pbXBvcnQgeyBwcm9wZXJ0eSB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IFNjb3BlZEVsZW1lbnRzTWl4aW4gfSBmcm9tICdAb3Blbi13Yy9zY29wZWQtZWxlbWVudHMnO1xuaW1wb3J0IHsgSSBhcyBJY29ucyB9IGZyb20gJy4vaWNvblR5cGUtODMyNmVkZGIuanMnO1xuaW1wb3J0IHsgciBhcyByZW5kZXJJY29uIH0gZnJvbSAnLi9pY29uLmJhc2UtN2E5MTlkYjIuanMnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1zaGFkb3cgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgVmFsaWRhdGlvblR5cGU7XG4oZnVuY3Rpb24gKFZhbGlkYXRpb25UeXBlKSB7XG4gIFZhbGlkYXRpb25UeXBlW1wiZGVmYXVsdFwiXSA9IFwiZGVmYXVsdFwiO1xuICBWYWxpZGF0aW9uVHlwZVtcIm5vbmVcIl0gPSBcIm5vbmVcIjtcbiAgVmFsaWRhdGlvblR5cGVbXCJ3YXJuaW5nXCJdID0gXCJ3YXJuaW5nXCI7XG4gIFZhbGlkYXRpb25UeXBlW1wiZXJyb3JcIl0gPSBcImVycm9yXCI7XG59KShWYWxpZGF0aW9uVHlwZSB8fCAoVmFsaWRhdGlvblR5cGUgPSB7fSkpO1xuXG5jbGFzcyBWYWxpZGF0aW9uQmFzZUNvbXBvbmVudCBleHRlbmRzIFNjb3BlZEVsZW1lbnRzTWl4aW4oTGl0RWxlbWVudCkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIC8qKlxuICAgICAqIEEgc2hvcnQgZGVzY3JpcHRpb24gd2h5IHRoZSB2YWxpZGF0aW9uIGZhaWxlZFxuICAgICAqL1xuICAgIHRoaXMudmFsaWRhdGlvbk1lc3NhZ2UgPSAnJztcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHR5cGUgb2Ygc3RhdGUgdGhlIHZhbGlkYXRpb24gaXMgaW4uIFRoaXMgY2FuIGJlIG9uZSBvZiB0aGUgZm9sbG93aW5nIDogXCJkZWZhdWx0XCIsIFwibm9uZVwiLCBcIndhcm5pbmdcIiwgXCJlcnJvclwiXG4gICAgICovXG4gICAgdGhpcy52YWxpZGF0aW9uU3RhdGUgPSBWYWxpZGF0aW9uVHlwZS5kZWZhdWx0O1xuICB9XG4gIGdldCBpc0ludmFsaWQoKSB7XG4gICAgc3dpdGNoICh0aGlzLnZhbGlkYXRpb25TdGF0ZSkge1xuICAgICAgY2FzZSBWYWxpZGF0aW9uVHlwZS5lcnJvcjpcbiAgICAgIGNhc2UgVmFsaWRhdGlvblR5cGUud2FybmluZzpcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJlbmRlcldpdGhWYWxpZGF0aW9uKGNvbXBvbmVudENvbnRlbnQpIHtcbiAgICBsZXQgaWNvblR5cGU7XG4gICAgc3dpdGNoICh0aGlzLnZhbGlkYXRpb25TdGF0ZSkge1xuICAgICAgY2FzZSBWYWxpZGF0aW9uVHlwZS5lcnJvcjpcbiAgICAgICAgaWNvblR5cGUgPSBJY29ucy5kYW5nZXJFeGNsYW1hdGlvbjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFZhbGlkYXRpb25UeXBlLndhcm5pbmc6XG4gICAgICAgIGljb25UeXBlID0gSWNvbnMud2FybmluZ0V4Y2xhbWF0aW9uO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGljb25UeXBlID0gdW5kZWZpbmVkO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgbGV0IGljb24gPSAnJztcbiAgICBpZiAodGhpcy52YWxpZGF0aW9uU3RhdGUgIT09IFZhbGlkYXRpb25UeXBlLmRlZmF1bHQpIHtcbiAgICAgIGljb24gPSBodG1sYDxkaXYgY2xhc3M9XCJ2YWxpZGF0aW9uLWljb25cIj5cbiAgICAgICAgJHtyZW5kZXJJY29uKHtcbiAgICAgICAgdHlwZTogaWNvblR5cGVcbiAgICAgIH0pfVxuICAgICAgPC9kaXY+YDtcbiAgICB9XG4gICAgcmV0dXJuIGh0bWxgXG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzPSR7Y2xhc3NNYXAoe1xuICAgICAgJ3ZhbGlkYXRpb24td3JhcHBlcic6IHRydWUsXG4gICAgICBub25lOiB0aGlzLnZhbGlkYXRpb25TdGF0ZSA9PT0gVmFsaWRhdGlvblR5cGUubm9uZSxcbiAgICAgIGRlZmF1bHQ6IHRoaXMudmFsaWRhdGlvblN0YXRlID09PSBWYWxpZGF0aW9uVHlwZS5kZWZhdWx0IHx8ICF0aGlzLnZhbGlkYXRpb25TdGF0ZSxcbiAgICAgIGVycm9yOiB0aGlzLnZhbGlkYXRpb25TdGF0ZSA9PT0gVmFsaWRhdGlvblR5cGUuZXJyb3IsXG4gICAgICB3YXJuaW5nOiB0aGlzLnZhbGlkYXRpb25TdGF0ZSA9PT0gVmFsaWRhdGlvblR5cGUud2FybmluZ1xuICAgIH0pfVxuICAgICAgPlxuICAgICAgICAke2NvbXBvbmVudENvbnRlbnR9XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzcz0ke2NsYXNzTWFwKHtcbiAgICAgICdtZXNzYWdlLWNvbnRhaW5lcic6IHRydWUsXG4gICAgICBub25lOiB0aGlzLnZhbGlkYXRpb25TdGF0ZSA9PT0gVmFsaWRhdGlvblR5cGUubm9uZSxcbiAgICAgIGRlZmF1bHQ6IHRoaXMudmFsaWRhdGlvblN0YXRlID09PSBWYWxpZGF0aW9uVHlwZS5kZWZhdWx0IHx8ICF0aGlzLnZhbGlkYXRpb25TdGF0ZSxcbiAgICAgIGVycm9yOiB0aGlzLnZhbGlkYXRpb25TdGF0ZSA9PT0gVmFsaWRhdGlvblR5cGUuZXJyb3IsXG4gICAgICB3YXJuaW5nOiB0aGlzLnZhbGlkYXRpb25TdGF0ZSA9PT0gVmFsaWRhdGlvblR5cGUud2FybmluZ1xuICAgIH0pfVxuICAgICAgICA+XG4gICAgICAgICAgJHtpY29ufSA8bGFiZWw+JHt0aGlzLmlzSW52YWxpZCA/IHRoaXMudmFsaWRhdGlvbk1lc3NhZ2UgOiAnJ308L2xhYmVsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIGA7XG4gIH1cbn1cbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgcmVmbGVjdDogdHJ1ZSxcbiAgYXR0cmlidXRlOiAndmFsaWRhdGlvbi1tZXNzYWdlJ1xufSldLCBWYWxpZGF0aW9uQmFzZUNvbXBvbmVudC5wcm90b3R5cGUsIFwidmFsaWRhdGlvbk1lc3NhZ2VcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgcmVmbGVjdDogdHJ1ZSxcbiAgYXR0cmlidXRlOiAndmFsaWRhdGlvbi1zdGF0ZSdcbn0pXSwgVmFsaWRhdGlvbkJhc2VDb21wb25lbnQucHJvdG90eXBlLCBcInZhbGlkYXRpb25TdGF0ZVwiLCB2b2lkIDApO1xuXG5jb25zdCB2YWxpZGF0aW9uTGF5b3V0U3R5bGVzID0gY3NzYFxuICAudmFsaWRhdGlvbi13cmFwcGVyIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gIH1cblxuICAubWVzc2FnZS1jb250YWluZXIge1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiB2YXIoLS1uZS1pY29uLXNpemUtZGVmYXVsdCkgYXV0bztcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IGF1dG87XG4gICAganVzdGlmeS1pdGVtczogZmxleC1zdGFydDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB9XG5cbiAgLnZhbGlkYXRpb24taWNvbiB7XG4gICAgbWluLXdpZHRoOiB2YXIoLS1uZS1pY29uLXNpemUtZGVmYXVsdCk7XG4gICAgcGFkZGluZy10b3A6IHZhcigtLW5lLWhlbHAtbWVzc2FnZS1wYWRkaW5nLXZlcnRpY2FsKTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gIH1cbmA7XG5jb25zdCB2YWxpZGF0aW9uU3R5bGVzID0gY3NzYFxuICAubWVzc2FnZS1jb250YWluZXIge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGZvbnQtc2l6ZTogdmFyKC0tbmUtaGVscC1tZXNzYWdlLWZvbnQtc2l6ZSk7XG4gICAgZm9udC1mYW1pbHk6IHZhcigtLW5lLWhlbHAtbWVzc2FnZS1mb250LWZhbWlseSk7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1uZS1oZWxwLW1lc3NhZ2UtYm9yZGVyLXJhZGl1cy10b3ApXG4gICAgICB2YXIoLS1uZS1oZWxwLW1lc3NhZ2UtYm9yZGVyLXJhZGl1cy10b3ApXG4gICAgICB2YXIoLS1uZS1oZWxwLW1lc3NhZ2UtYm9yZGVyLXJhZGl1cy1ib3R0b20pXG4gICAgICB2YXIoLS1uZS1oZWxwLW1lc3NhZ2UtYm9yZGVyLXJhZGl1cy1ib3R0b20pO1xuICAgIGdhcDogdmFyKC0tbmUtaGVscC1tZXNzYWdlLWdhcCk7XG4gICAgcGFkZGluZzogdmFyKC0tbmUtaGVscC1tZXNzYWdlLXBhZGRpbmctdmVydGljYWwpXG4gICAgICB2YXIoLS1uZS1oZWxwLW1lc3NhZ2UtcGFkZGluZy1ob3Jpem9udGFsKTtcbiAgfVxuXG4gIC5tZXNzYWdlLWNvbnRhaW5lci5kZWZhdWx0LFxuICAubWVzc2FnZS1jb250YWluZXIubm9uZSB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuXG4gIC5tZXNzYWdlLWNvbnRhaW5lci53YXJuaW5nIHtcbiAgICBjb2xvcjogdmFyKC0tbmUtaGVscC1tZXNzYWdlLWNvbG9yLWxhYmVsLXdhcm5pbmcpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLWhlbHAtbWVzc2FnZS1jb2xvci1iYWNrZ3JvdW5kLXdhcm5pbmcpO1xuICAgIGdhcDogdmFyKC0tbmUtaGVscC1tZXNzYWdlLXBhZGRpbmctaG9yaXpvbnRhbCk7XG4gICAgZ3JpZC1jb2x1bW46IDEgLyBzcGFuIDE7XG4gICAgZ3JpZC1yb3c6IDEgLyBzcGFuIDE7XG4gIH1cblxuICAubWVzc2FnZS1jb250YWluZXIuZXJyb3Ige1xuICAgIGdhcDogdmFyKC0tbmUtaGVscC1tZXNzYWdlLXBhZGRpbmctaG9yaXpvbnRhbCk7XG4gICAgY29sb3I6IHZhcigtLW5lLWhlbHAtbWVzc2FnZS1jb2xvci1sYWJlbC1lcnJvcik7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmUtaGVscC1tZXNzYWdlLWNvbG9yLWJhY2tncm91bmQtZXJyb3IpO1xuICAgIGdyaWQtY29sdW1uOiAxIC8gc3BhbiAxO1xuICAgIGdyaWQtcm93OiAxIC8gc3BhbiAxO1xuICB9XG5gO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuY29uc3QgdG9rZW5zID0gY3NzYFxuICAqIHtcbiAgLS1uZS1oZWxwLW1lc3NhZ2UtY29sb3ItYmFja2dyb3VuZC13YXJuaW5nOiB2YXIoLS1uZS1yZWYtY29sb3IteWVsbG93LTUwLCAjRkZDRjFBKTtcbiAgLS1uZS1oZWxwLW1lc3NhZ2UtY29sb3ItYmFja2dyb3VuZC1lcnJvcjogdmFyKC0tbmUtcmVmLWNvbG9yLXJlZC01MCwgI0U2MDAwMCk7XG4gIC0tbmUtaGVscC1tZXNzYWdlLWNvbG9yLWxhYmVsLWVycm9yOiB2YXIoLS1uZS1yZWYtY29sb3Itd2hpdGUsICNmZmZmZmYpO1xuICAtLW5lLWhlbHAtbWVzc2FnZS1jb2xvci1sYWJlbC13YXJuaW5nOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS05MCwgIzE2MTcxOCk7XG4gIC0tbmUtaGVscC1tZXNzYWdlLWNvbG9yLWJvcmRlci13YXJuaW5nOiB2YXIoLS1uZS1yZWYtY29sb3IteWVsbG93LTUwLCAjRkZDRjFBKTtcbiAgLS1uZS1oZWxwLW1lc3NhZ2UtY29sb3ItYm9yZGVyLWVycm9yOiB2YXIoLS1uZS1yZWYtY29sb3ItcmVkLTUwLCAjRTYwMDAwKTtcbiAgLS1uZS1oZWxwLW1lc3NhZ2UtZm9udC1zaXplOiB2YXIoLS1uZS1yZWYtZm9udC1zaXplLTA0LCAwLjg3NWVtKTtcbiAgLS1uZS1oZWxwLW1lc3NhZ2UtZm9udC1mYW1pbHk6IHZhcigtLW5lLXJlZi1mb250LWZhbWlseS1vcGVuLXNhbnMsIE9wZW4gU2Fucyk7XG4gIC0tbmUtaGVscC1tZXNzYWdlLWJvcmRlci1yYWRpdXMtdG9wOiB2YXIoLS1uZS1yZWYtYm9yZGVyLXJhZGl1cy1ub25lLCAwKTtcbiAgLS1uZS1oZWxwLW1lc3NhZ2UtYm9yZGVyLXJhZGl1cy1ib3R0b206IHZhcigtLW5lLXJlZi1ib3JkZXItcmFkaXVzLW1lZGl1bSwgLjI1ZW0pO1xuICAtLW5lLWhlbHAtbWVzc2FnZS1nYXA6IHZhcigtLW5lLXJlZi1zcGFjaW5nLXh4LXNtYWxsLCAwLjI1ZW0pO1xuICAtLW5lLWhlbHAtbWVzc2FnZS1wYWRkaW5nLXZlcnRpY2FsOiB2YXIoLS1uZS1yZWYtc3BhY2luZy14LXNtYWxsLCAwLjVlbSk7XG4gIC0tbmUtaGVscC1tZXNzYWdlLXBhZGRpbmctaG9yaXpvbnRhbDogdmFyKC0tbmUtcmVmLXNwYWNpbmcteC1zbWFsbCwgMC41ZW0pO1xuICAtLW5lLWhlbHAtbWVzc2FnZS1ib3JkZXItd2lkdGg6IHZhcigtLW5lLXJlZi1ib3JkZXItd2lkdGgtc21hbGwsIDFweCk7XG4gIC0tbmUtaGVscC1tZXNzYWdlLXNpemluZy1pY29uOiB2YXIoLS1uZS1yZWYtc2l6aW5nLTA0LCAxZW0pO1xufVxuYDtcblxuZXhwb3J0IHsgVmFsaWRhdGlvbkJhc2VDb21wb25lbnQgYXMgViwgdmFsaWRhdGlvblN0eWxlcyBhcyBhLCBWYWxpZGF0aW9uVHlwZSBhcyBiLCB0b2tlbnMgYXMgdCwgdmFsaWRhdGlvbkxheW91dFN0eWxlcyBhcyB2IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD12YWxpZGF0aW9uLnRva2Vucy1kYjg2ZWNhOS5qcy5tYXBcbiIsImltcG9ydCB7IGMgYXMgY29tbW9uU3R5bGVzLCBfIGFzIF9fZGVjb3JhdGUgfSBmcm9tICcuL2Jhc2Uuc3R5bGVzLTExZDM5MTgxLmpzJztcbmltcG9ydCB7IGNzcywgTGl0RWxlbWVudCwgaHRtbCB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBjdXN0b21FbGVtZW50IH0gZnJvbSAnbGl0L2RlY29yYXRvcnMuanMnO1xuXG5jb25zdCBiYXNlQWNjb3JkaW9uID0gY3NzYFxuICAuYWNjb3JkaW9uLWNvbnRhaW5lciB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB9XG5gO1xuY29uc3Qgc3R5bGVzID0gW2Jhc2VBY2NvcmRpb24sIGNvbW1vblN0eWxlc107XG5cbi8qKlxuICogQHRhZyBuZS1hY2NvcmRpb25cbiAqIEB0YWduYW1lIG5lLWFjY29yZGlvblxuICpcbiAqIEBzbG90IGRlZmF1bHQgVGhpcyBpcyB3aGVyZSB0aGUgY29udGVudHMgb2YgdGhlIGFjY29yZGlvbiB3aWxsIGJlIGluc2VydGVkXG4gKi9cbmxldCBOZUFjY29yZGlvbiA9IGNsYXNzIE5lQWNjb3JkaW9uIGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gIHN0YXRpYyBnZXQgc3R5bGVzKCkge1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBodG1sYDxkaXYgY2xhc3M9XCJhY2NvcmRpb24tY29udGFpbmVyXCI+XG4gICAgICA8c2xvdD48L3Nsb3Q+XG4gICAgPC9kaXY+YDtcbiAgfVxufTtcbk5lQWNjb3JkaW9uID0gX19kZWNvcmF0ZShbY3VzdG9tRWxlbWVudCgnbmUtYWNjb3JkaW9uJyldLCBOZUFjY29yZGlvbik7XG5cbmV4cG9ydCB7IE5lQWNjb3JkaW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hY2NvcmRpb24uanMubWFwXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1zaGFkb3cgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgQWxlcnRUeXBlO1xuKGZ1bmN0aW9uIChBbGVydFR5cGUpIHtcbiAgQWxlcnRUeXBlW1wiaW5mb1wiXSA9IFwiaW5mb1wiO1xuICBBbGVydFR5cGVbXCJzdWNjZXNzXCJdID0gXCJzdWNjZXNzXCI7XG4gIEFsZXJ0VHlwZVtcImRhbmdlclwiXSA9IFwiZGFuZ2VyXCI7XG4gIEFsZXJ0VHlwZVtcIndhcm5pbmdcIl0gPSBcIndhcm5pbmdcIjtcbn0pKEFsZXJ0VHlwZSB8fCAoQWxlcnRUeXBlID0ge30pKTtcblxuZXhwb3J0IHsgQWxlcnRUeXBlIGFzIEEgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFsZXJ0VHlwZS1iZGRhZGI0ZC5qcy5tYXBcbiIsImltcG9ydCB7IGMgYXMgY29tbW9uU3R5bGVzLCBfIGFzIF9fZGVjb3JhdGUgfSBmcm9tICcuL2Jhc2Uuc3R5bGVzLTExZDM5MTgxLmpzJztcbmltcG9ydCB7IGNzcywgTGl0RWxlbWVudCwgaHRtbCB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBwcm9wZXJ0eSwgY3VzdG9tRWxlbWVudCB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IGNsYXNzTWFwIH0gZnJvbSAnbGl0L2RpcmVjdGl2ZXMvY2xhc3MtbWFwLmpzJztcbmltcG9ydCB7IFNjb3BlZEVsZW1lbnRzTWl4aW4gfSBmcm9tICdAb3Blbi13Yy9zY29wZWQtZWxlbWVudHMnO1xuaW1wb3J0IHsgSSBhcyBJY29ucyB9IGZyb20gJy4vaWNvblR5cGUtODMyNmVkZGIuanMnO1xuaW1wb3J0IHsgTmVJY29uIH0gZnJvbSAnLi9pY29uLmpzJztcbmltcG9ydCB7IGYgYXMgZmlyZSB9IGZyb20gJy4vZXZlbnRzLTExNzNmNTYyLmpzJztcbmltcG9ydCB7IEEgYXMgQWxlcnRUeXBlIH0gZnJvbSAnLi9hbGVydFR5cGUtYmRkYWRiNGQuanMnO1xuaW1wb3J0ICcuL2ljb24uYmFzZS03YTkxOWRiMi5qcyc7XG5pbXBvcnQgJ2xpdC9kaXJlY3RpdmVzL3N0eWxlLW1hcC5qcyc7XG5pbXBvcnQgJ2xpdC9kaXJlY3RpdmVzL3VudGlsLmpzJztcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmNvbnN0IHRva2VucyA9IGNzc2BcbiAgKiB7XG4gIC0tbmUtYmFubmVyLXNpemluZy1pY29uOiB2YXIoLS1uZS1yZWYtc2l6aW5nLTA0LCAxZW0pO1xuICAtLW5lLWJhbm5lci1jb2xvci1iYWNrZ3JvdW5kLXN1Y2Nlc3M6IHZhcigtLW5lLXJlZi1jb2xvci1ncmVlbi01MCwgIzAwODczOCk7XG4gIC0tbmUtYmFubmVyLWNvbG9yLWJhY2tncm91bmQtaW5mbzogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtNjAsICMwMDZCRDYpO1xuICAtLW5lLWJhbm5lci1jb2xvci1iYWNrZ3JvdW5kLWRhbmdlcjogdmFyKC0tbmUtcmVmLWNvbG9yLXJlZC01MCwgI0U2MDAwMCk7XG4gIC0tbmUtYmFubmVyLWNvbG9yLWJhY2tncm91bmQtd2FybmluZzogdmFyKC0tbmUtcmVmLWNvbG9yLXllbGxvdy01MCwgI0ZGQ0YxQSk7XG4gIC0tbmUtYmFubmVyLWNvbG9yLWxhYmVsLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci13aGl0ZSwgI2ZmZmZmZik7XG4gIC0tbmUtYmFubmVyLWNvbG9yLWxhYmVsLXdhcm5pbmc6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTkwLCAjMTYxNzE4KTtcbiAgLS1uZS1iYW5uZXItZm9udC1mYW1pbHk6IHZhcigtLW5lLXJlZi1mb250LWZhbWlseS1vcGVuLXNhbnMsIE9wZW4gU2Fucyk7XG4gIC0tbmUtYmFubmVyLWZvbnQtc2l6ZTogdmFyKC0tbmUtcmVmLWZvbnQtc2l6ZS0wNCwgMC44NzVlbSk7XG4gIC0tbmUtYmFubmVyLXNoYWRvdzogMHB4IDBweCA4cHggdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktOTAtMjAsICMxNjE3MTgyMCk7XG4gIC0tbmUtYmFubmVyLWdhcDogdmFyKC0tbmUtcmVmLXNwYWNpbmcteC1zbWFsbCwgMC41ZW0pO1xuICAtLW5lLWJhbm5lci1wYWRkaW5nLWhvcml6b250YWw6IHZhcigtLW5lLXJlZi1zcGFjaW5nLW1lZGl1bSwgMWVtKTtcbiAgLS1uZS1iYW5uZXItcGFkZGluZy12ZXJ0aWNhbDogdmFyKC0tbmUtcmVmLXNwYWNpbmcteC1zbWFsbCwgMC41ZW0pO1xufVxuYDtcblxuY29uc3QgYmFzZSA9IGNzc2BcbiAgOmhvc3Qge1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG5cbiAgLmJhbm5lciB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1mbG93OiByb3cgbm93cmFwO1xuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgICBhbGlnbi1pdGVtczogdG9wO1xuICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBwYWRkaW5nOiB2YXIoLS1uZS1iYW5uZXItcGFkZGluZy1ob3Jpem9udGFsKSB2YXIoLS1uZS1iYW5uZXItcGFkZGluZy12ZXJ0aWNhbCk7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICBib3gtc2hhZG93OiB2YXIoLS1uZS1iYW5uZXItc2hhZG93KVxuICAgIGJvcmRlcjogbm9uZTtcbiAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1uZS1iYW5uZXItYm9yZGVyLXJhZGl1cy1kZWZhdWx0KTtcbiAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydFxuICB9XG5cbiAgLmluZm8ge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLWJhbm5lci1jb2xvci1iYWNrZ3JvdW5kLWluZm8pO1xuICAgIGNvbG9yOiB2YXIoLS1uZS1iYW5uZXItY29sb3ItbGFiZWwtZGVmYXVsdCk7XG4gIH1cblxuICAuc3VjY2VzcyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmUtYmFubmVyLWNvbG9yLWJhY2tncm91bmQtc3VjY2Vzcyk7XG4gICAgY29sb3I6IHZhcigtLW5lLWJhbm5lci1jb2xvci1sYWJlbC1kZWZhdWx0KTtcbiAgfVxuXG4gIC5kYW5nZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLWJhbm5lci1jb2xvci1iYWNrZ3JvdW5kLWRhbmdlcik7XG4gICAgY29sb3I6IHZhcigtLW5lLWJhbm5lci1jb2xvci1sYWJlbC1kZWZhdWx0KTtcbiAgfVxuXG4gIC53YXJuaW5nIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1iYW5uZXItY29sb3ItYmFja2dyb3VuZC13YXJuaW5nKTtcbiAgICBjb2xvcjogdmFyKC0tbmUtYmFubmVyLWNvbG9yLWxhYmVsLXdhcm5pbmcpO1xuICB9XG5cbiAgLmNvbnRlbnQge1xuICAgIGZsZXgtZ3JvdzogMTtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gICAgZm9udC1mYW1pbHk6IHZhcigtLW5lLWJhbm5lci1mb250LWZhbWlseSk7XG4gICAgZm9udC1zaXplOiB2YXIoLS1uZS1iYW5uZXItZm9udC1zaXplKTtcbiAgfVxuXG4gIC5iYW5uZXIuY2xvc2FibGUgLmNvbnRlbnQge1xuICAgIHBhZGRpbmctcmlnaHQ6IDA7XG4gIH1cblxuICAuaWNvbiB7XG4gICAgZmxleC1zaHJpbms6IDA7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIHBhZGRpbmctdG9wOiB2YXIoLS1uZS1yZWYtc3BhY2luZy14eHgtc21hbGwpO1xuXG4gIH1cblxuICAudHlwZS1pY29uIHtcbiAgICBtaW4td2lkdGg6IHZhcigtLW5lLWJhbm5lci1zaXppbmctaWNvbik7XG4gICAgaGVpZ2h0OiB2YXIoLS1uZS1iYW5uZXItc2l6aW5nLWljb24pO1xuICAgIG1hcmdpbjogMCB2YXIoLS1uZS1iYW5uZXItZ2FwKTtcbiAgfVxuXG4gIC5jbG9zZS1idXR0b24ge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1mbG93OiByb3cgbm93cmFwO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgYWxpZ24tY29udGVudDogY2VudGVyO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgbWFyZ2luOiAwO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLW5lLWJ1dHRvbi1ib3JkZXItcmFkaXVzKTtcbiAgICBtaW4td2lkdGg6IHZhcigtLW5lLWJhbm5lci1zaXppbmctaWNvbik7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gIH1cbiAgXG4gIC5jbG9zZS1idXR0b24gKiB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICB9XG5gO1xuY29uc3Qgc3R5bGVzID0gW2Jhc2UsIGNvbW1vblN0eWxlcywgdG9rZW5zXTtcblxuLyoqXG4gKiBAdGFnIG5lLWJhbm5lclxuICogQHRhZ25hbWUgbmUtYmFubmVyXG4gKlxuICogQGRlc2NyaXB0aW9uIENvbnRyb2wgdG8gcmVuZGVyIGEgYmFubmVyIGF0IHRoZSB0b3Agb2YgdGhlIHNjcmVlbiBieSBjb250ZW50IHN1cHBsaWVkIHRvIGFuIHVubmFtZWQgc2xvdC5cbiAqXG4gKiBAc2xvdCBkZWZhdWx0IFRoZSBzbG90IGNhbiBiZSBhbnkgc3RyaW5nIG9yIEhUTUwgRWxlbWVudCB3aXRoIGNoaWxkIGVsZW1lbnRzIHRoYXQgbWFrZXMgb3V0IHRoZSBjb250ZW50IG9mIHRoZSBiYW5uZXJcbiAqXG4gKiBAZXZlbnQgbmUtY2xvc2UgUmFpc2VkIHdoZW4gdGhlIGludGVybmFsIGJ1aWx0IGluIGNsb3NlIGJ1dHRvbiBpcyBjbGlja2VkXG4gKi9cbmxldCBOZUJhbm5lciA9IGNsYXNzIE5lQmFubmVyIGV4dGVuZHMgU2NvcGVkRWxlbWVudHNNaXhpbihMaXRFbGVtZW50KSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSB2YXJpYW50IHR5cGUgb2YgdGhlIGJhbm5lci4gQ3VycmVudGx5IFwiaW5mb1wiLCBcInN1Y2Nlc3NcIiBhbmQgXCJkYW5nZXJcIiBpcyBzdXBwb3J0ZWRcbiAgICAgKi9cbiAgICB0aGlzLnZhcmlhbnRUeXBlID0gQWxlcnRUeXBlLmluZm87XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHdoZXRoZXIgdGhlIGJhbm5lciBzaG91bGQgaGF2ZSBhIGJ1aWx0IGluIGNsb3NlIGJ1dHRvbiBvciBub3QuXG4gICAgICovXG4gICAgdGhpcy5jbG9zYWJsZSA9IGZhbHNlO1xuICAgIC8vIEV2ZW50c1xuICAgIHRoaXMuX29uQ2xvc2UgPSAoKSA9PiB7XG4gICAgICBmaXJlKHRoaXMsICduZS1jbG9zZScsIHt9KTtcbiAgICB9O1xuICAgIC8vIEZ1bmN0aW9uc1xuICAgIHRoaXMuZ2V0VHlwZUljb24gPSAoKSA9PiB7XG4gICAgICBsZXQgaWNvblR5cGU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVmYXVsdC1jYXNlXG4gICAgICBzd2l0Y2ggKHRoaXMudmFyaWFudFR5cGUpIHtcbiAgICAgICAgY2FzZSBBbGVydFR5cGUuaW5mbzpcbiAgICAgICAgICBpY29uVHlwZSA9IEljb25zLmluZm87XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQWxlcnRUeXBlLnN1Y2Nlc3M6XG4gICAgICAgICAgaWNvblR5cGUgPSBJY29ucy5zdWNjZXNzO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEFsZXJ0VHlwZS5kYW5nZXI6XG4gICAgICAgICAgaWNvblR5cGUgPSBJY29ucy5kYW5nZXJFeGNsYW1hdGlvbjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBBbGVydFR5cGUud2FybmluZzpcbiAgICAgICAgICBpY29uVHlwZSA9IEljb25zLndhcm5pbmdFeGNsYW1hdGlvbjtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHJldHVybiBodG1sYDxuZS1pY29uIHR5cGU9JHtpY29uVHlwZX0+PC9uZS1pY29uPmA7XG4gICAgfTtcbiAgfVxuICAvLyBTdHlsZXNcbiAgc3RhdGljIGdldCBzdHlsZXMoKSB7XG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfVxuICBzdGF0aWMgZ2V0IHNjb3BlZEVsZW1lbnRzKCkge1xuICAgIHJldHVybiB7XG4gICAgICAnbmUtaWNvbic6IE5lSWNvblxuICAgIH07XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBodG1sYDxkaXZcbiAgICAgIHJvbGU9XCJhbGVydFwiXG4gICAgICBjbGFzcz1cIiR7Y2xhc3NNYXAoe1xuICAgICAgYmFubmVyOiB0cnVlLFxuICAgICAgW3RoaXMudmFyaWFudFR5cGVdOiB0cnVlLFxuICAgICAgY2xvc2FibGU6IHRoaXMuY2xvc2FibGVcbiAgICB9KX1cIlxuICAgID5cbiAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbiB0eXBlLWljb25cIj4ke3RoaXMuZ2V0VHlwZUljb24oKX08L3NwYW4+XG4gICAgICA8ZGl2IGNsYXNzPVwiY29udGVudFwiPjxzbG90Pjwvc2xvdD48L2Rpdj5cbiAgICAgICR7dGhpcy5jbG9zYWJsZSA/IGh0bWxgPGJ1dHRvblxuICAgICAgICAgICAgaWQ9XCJjbG9zZS1idXR0b25cIlxuICAgICAgICAgICAgY2xhc3M9XCJjbG9zZS1idXR0b25cIlxuICAgICAgICAgICAgQGNsaWNrPVwiJHt0aGlzLl9vbkNsb3NlfVwiXG4gICAgICAgICAgICBhcmlhLWxhYmVsPVwiY2xvc2VcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgIGNsYXNzPVwiJHtjbGFzc01hcCh7XG4gICAgICBpY29uOiB0cnVlLFxuICAgICAgJ3R5cGUtaWNvbic6IHRydWUsXG4gICAgICBbdGhpcy52YXJpYW50VHlwZV06IHRydWVcbiAgICB9KX1cIlxuICAgICAgICAgICAgICA+PG5lLWljb24gdHlwZT0ke0ljb25zLmNsb3NlRGVmYXVsdH0+PC9uZS1pY29uXG4gICAgICAgICAgICA+PC9zcGFuPlxuICAgICAgICAgIDwvYnV0dG9uPmAgOiAnJ31cbiAgICA8L2Rpdj5gO1xuICB9XG59O1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBTdHJpbmcsXG4gIGF0dHJpYnV0ZTogJ3R5cGUnLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIE5lQmFubmVyLnByb3RvdHlwZSwgXCJ2YXJpYW50VHlwZVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBCb29sZWFuLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIE5lQmFubmVyLnByb3RvdHlwZSwgXCJjbG9zYWJsZVwiLCB2b2lkIDApO1xuTmVCYW5uZXIgPSBfX2RlY29yYXRlKFtjdXN0b21FbGVtZW50KCduZS1iYW5uZXInKV0sIE5lQmFubmVyKTtcblxuZXhwb3J0IHsgTmVCYW5uZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhbm5lci5qcy5tYXBcbiIsImltcG9ydCB7IGMgYXMgY29tbW9uU3R5bGVzLCBfIGFzIF9fZGVjb3JhdGUgfSBmcm9tICcuL2Jhc2Uuc3R5bGVzLTExZDM5MTgxLmpzJztcbmltcG9ydCB7IGNzcywgTGl0RWxlbWVudCwgaHRtbCwgbm90aGluZyB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBwcm9wZXJ0eSwgY3VzdG9tRWxlbWVudCB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IGNsYXNzTWFwIH0gZnJvbSAnbGl0L2RpcmVjdGl2ZXMvY2xhc3MtbWFwLmpzJztcbmltcG9ydCB7IGYgYXMgZmlyZSB9IGZyb20gJy4vZXZlbnRzLTExNzNmNTYyLmpzJztcbmltcG9ydCB7IHIgYXMgcmVuZGVySWNvbiB9IGZyb20gJy4vaWNvbi5iYXNlLTdhOTE5ZGIyLmpzJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnLi9jaGVjay0xMzJjOTg5NC5qcyc7XG5pbXBvcnQgJ2xpdC9kaXJlY3RpdmVzL3N0eWxlLW1hcC5qcyc7XG5pbXBvcnQgJ2xpdC9kaXJlY3RpdmVzL3VudGlsLmpzJztcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmNvbnN0IHRva2VucyA9IGNzc2BcbiAgKiB7XG4gIC0tbmUtY2hlY2tib3gtc2l6aW5nLXJlY3RhbmdsZTogdmFyKC0tbmUtcmVmLXNpemluZy0wNCwgMWVtKTtcbiAgLS1uZS1jaGVja2JveC1zaXppbmctdGljazogdmFyKC0tbmUtcmVmLXNpemluZy0wNCwgMWVtKTtcbiAgLS1uZS1jaGVja2JveC1nYXA6IHZhcigtLW5lLXJlZi1zcGFjaW5nLW1lZGl1bSwgMWVtKTtcbiAgLS1uZS1jaGVja2JveC1wYWRkaW5nLXN1YnRleHQ6IHZhcigtLW5lLXJlZi1zcGFjaW5nLXgtbGFyZ2UsIDJlbSk7XG4gIC0tbmUtY2hlY2tib3gtY29sb3ItYmFja2dyb3VuZC1zZWxlY3RlZC1kZWZhdWx0OiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS02MCwgIzAwNkJENik7XG4gIC0tbmUtY2hlY2tib3gtY29sb3ItYmFja2dyb3VuZC1zZWxlY3RlZC1kaXNhYmxlZDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktNTAsICM2RDczNzkpO1xuICAtLW5lLWNoZWNrYm94LWNvbG9yLWJhY2tncm91bmQtc2VsZWN0ZWQtaG92ZXI6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTcwLCAjMDA1MkEzKTtcbiAgLS1uZS1jaGVja2JveC1jb2xvci1iYWNrZ3JvdW5kLXNlbGVjdGVkLWZvY3VzOiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS03MCwgIzAwNTJBMyk7XG4gIC0tbmUtY2hlY2tib3gtY29sb3ItYmFja2dyb3VuZC11bnNlbGVjdGVkLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci13aGl0ZSwgI2ZmZmZmZik7XG4gIC0tbmUtY2hlY2tib3gtY29sb3ItYmFja2dyb3VuZC11bnNlbGVjdGVkLWRpc2FibGVkOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS0zMCwgI0E3QUJBRik7XG4gIC0tbmUtY2hlY2tib3gtY29sb3ItYmFja2dyb3VuZC11bnNlbGVjdGVkLWhvdmVyOiB2YXIoLS1uZS1yZWYtY29sb3Itd2hpdGUsICNmZmZmZmYpO1xuICAtLW5lLWNoZWNrYm94LWNvbG9yLWJhY2tncm91bmQtdW5zZWxlY3RlZC1mb2N1czogdmFyKC0tbmUtcmVmLWNvbG9yLXdoaXRlLCAjZmZmZmZmKTtcbiAgLS1uZS1jaGVja2JveC1jb2xvci10aWNrOiB2YXIoLS1uZS1yZWYtY29sb3Itd2hpdGUsICNmZmZmZmYpO1xuICAtLW5lLWNoZWNrYm94LWNvbG9yLWJvcmRlci1zZWxlY3RlZC1kZWZhdWx0OiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS02MCwgIzAwNkJENik7XG4gIC0tbmUtY2hlY2tib3gtY29sb3ItYm9yZGVyLXNlbGVjdGVkLWRpc2FibGVkOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS01MCwgIzZENzM3OSk7XG4gIC0tbmUtY2hlY2tib3gtY29sb3ItYm9yZGVyLXNlbGVjdGVkLWhvdmVyOiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS03MCwgIzAwNTJBMyk7XG4gIC0tbmUtY2hlY2tib3gtY29sb3ItYm9yZGVyLXNlbGVjdGVkLWZvY3VzOiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS0yMCwgI0EzRDFGRik7XG4gIC0tbmUtY2hlY2tib3gtY29sb3ItYm9yZGVyLXVuc2VsZWN0ZWQtZGVmYXVsdDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXk0MCwgIzg5OEY5NCk7XG4gIC0tbmUtY2hlY2tib3gtY29sb3ItYm9yZGVyLXVuc2VsZWN0ZWQtZGlzYWJsZWQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5NDAsICM4OThGOTQpO1xuICAtLW5lLWNoZWNrYm94LWNvbG9yLWJvcmRlci11bnNlbGVjdGVkLWhvdmVyOiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS03MCwgIzAwNTJBMyk7XG4gIC0tbmUtY2hlY2tib3gtY29sb3ItYm9yZGVyLXVuc2VsZWN0ZWQtZm9jdXM6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTIwLCAjQTNEMUZGKTtcbiAgLS1uZS1jaGVja2JveC1jb2xvci10ZXh0LWVuYWJsZWQtb3B0aW9uOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS05MCwgIzE2MTcxOCk7XG4gIC0tbmUtY2hlY2tib3gtY29sb3ItdGV4dC1lbmFibGVkLXN1YnRleHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTYwLCAjNTc1QzYxKTtcbiAgLS1uZS1jaGVja2JveC1jb2xvci10ZXh0LWRpc2FibGVkOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS01MCwgIzZENzM3OSk7XG4gIC0tbmUtY2hlY2tib3gtYm9yZGVyLXdpZHRoOiB2YXIoLS1uZS1yZWYtYm9yZGVyLXdpZHRoLXNtYWxsLCAxcHgpO1xuICAtLW5lLWNoZWNrYm94LWZvbnQtZmFtaWx5OiB2YXIoLS1uZS1yZWYtZm9udC1mYW1pbHktb3Blbi1zYW5zLCBPcGVuIFNhbnMpO1xuICAtLW5lLWNoZWNrYm94LWZvbnQtc2l6ZS1vcHRpb246IHZhcigtLW5lLXJlZi1mb250LXNpemUtMDQsIDAuODc1ZW0pO1xuICAtLW5lLWNoZWNrYm94LWZvbnQtc2l6ZS1zdWJ0ZXh0OiB2YXIoLS1uZS1yZWYtZm9udC1zaXplLTAyLCAwLjc1ZW0pO1xuICAtLW5lLWNoZWNrYm94LWJvcmRlci1yYWRpdXM6IHZhcigtLW5lLXJlZi1ib3JkZXItcmFkaXVzLXNtYWxsLCAwLjEyNWVtKTtcbiAgLS1uZS1jaGVja2JveC1mb2N1czogdmFyKC0tbmUtcmVmLWJvcmRlci13aWR0aC1sYXJnZSwgNHB4KTtcbn1cbmA7XG5cbmNvbnN0IGJhc2VDaGVja2JveCA9IGNzc2BcbiAgKiB7XG4gICAgZm9udC1mYW1pbHk6IHZhcigtLW5lLWNoZWNrYm94LWZvbnQtZmFtaWx5KTtcbiAgfVxuXG4gIC5jaGVja2JveC1jb250YWluZXIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICB9XG5cbiAgLmNoZWNrYm94LWlucHV0IHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgei1pbmRleDogOTk5OTtcbiAgICBvcGFjaXR5OiAwO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgfVxuXG4gIC5jaGVja2JveC1jb250cm9sIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1jaGVja2JveC1jb2xvci1iYWNrZ3JvdW5kLXVuc2VsZWN0ZWQtZGVmYXVsdCk7XG4gICAgYm9yZGVyOiB2YXIoLS1uZS1jaGVja2JveC1ib3JkZXItd2lkdGgpIHNvbGlkXG4gICAgICB2YXIoLS1uZS1jaGVja2JveC1jb2xvci1ib3JkZXItdW5zZWxlY3RlZC1kZWZhdWx0KTtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgd2lkdGg6IHZhcigtLW5lLWNoZWNrYm94LXNpemluZy1yZWN0YW5nbGUpO1xuICAgIG1pbi13aWR0aDogdmFyKC0tbmUtY2hlY2tib3gtc2l6aW5nLXJlY3RhbmdsZSk7XG4gICAgaGVpZ2h0OiB2YXIoLS1uZS1jaGVja2JveC1zaXppbmctcmVjdGFuZ2xlKTtcbiAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1uZS1jaGVja2JveC1ib3JkZXItcmFkaXVzKTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgY29sb3I6IHZhcigtLW5lLWNoZWNrYm94LWNvbG9yLXRpY2spO1xuICB9XG5cbiAgLmNoZWNrYm94LWNvbnRyb2wgc3ZnIHtcbiAgICB3aWR0aDogdmFyKC0tbmUtY2hlY2tib3gtc2l6aW5nLXRpY2spO1xuICB9XG5cbiAgLmNoZWNrYm94LXRleHQtY29udGFpbmVyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgbWFyZ2luLWlubGluZS1zdGFydDogdmFyKC0tbmUtY2hlY2tib3gtZ2FwKTtcbiAgfVxuXG4gIC5jaGVja2JveC10ZXh0IHtcbiAgICBmb250LXNpemU6IHZhcigtLW5lLWNoZWNrYm94LWZvbnQtc2l6ZS1vcHRpb24pO1xuICB9XG5cbiAgLmNoZWNrYm94LXN1YnRleHQge1xuICAgIGZvbnQtc2l6ZTogdmFyKC0tbmUtY2hlY2tib3gtZm9udC1zaXplLXN1YnRleHQpO1xuICAgIGNvbG9yOiB2YXIoLS1uZS1jaGVja2JveC1jb2xvci10ZXh0LWVuYWJsZWQtc3VidGV4dCk7XG4gIH1cblxuICAvKiBDaGVja2VkICovXG4gIC5jaGVja2JveC1jb250YWluZXIuY2hlY2tib3gtY29udGFpbmVyLWNoZWNrZWQgLmNoZWNrYm94LWNvbnRyb2wge1xuICAgIGJvcmRlci1jb2xvcjogdmFyKC0tbmUtY2hlY2tib3gtY29sb3ItYm9yZGVyLXNlbGVjdGVkLWRlZmF1bHQpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLWNoZWNrYm94LWNvbG9yLWJhY2tncm91bmQtc2VsZWN0ZWQtZGVmYXVsdCk7XG4gICAgbWFyZ2luLWJvdHRvbTogdmFyKC0tbmUtY2hlY2tib3gtZm9jdXMpO1xuICB9XG5cbiAgLmNoZWNrYm94LWNvbnRhaW5lci5jaGVja2JveC1jb250YWluZXItZGlzYWJsZWQgLmNoZWNrYm94LWNvbnRyb2wge1xuICAgIGJvcmRlci1jb2xvcjogdmFyKC0tbmUtY2hlY2tib3gtY29sb3ItYm9yZGVyLXVuc2VsZWN0ZWQtZGlzYWJsZWQpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLWNoZWNrYm94LWNvbG9yLWJhY2tncm91bmQtdW5zZWxlY3RlZC1kaXNhYmxlZCk7XG4gICAgY3Vyc29yOiBub3QtYWxsb3dlZDtcbiAgfVxuXG4gIC8qIEZvY3VzZWQgLSBub3QgY2hlY2tlZCAqL1xuICAuY2hlY2tib3gtY29udGFpbmVyOm5vdChcbiAgICAgIC5jaGVja2JveC1jb250YWluZXItY2hlY2tlZCxcbiAgICAgIC5jaGVja2JveC1jb250YWluZXItZGlzYWJsZWRcbiAgICApXG4gICAgLmNoZWNrYm94LWlucHV0OmZvY3VzXG4gICAgfiAuY2hlY2tib3gtY29udHJvbCB7XG4gICAgb3V0bGluZTogc29saWQgdmFyKC0tbmUtY2hlY2tib3gtZm9jdXMpXG4gICAgICB2YXIoLS1uZS1jaGVja2JveC1jb2xvci1ib3JkZXItdW5zZWxlY3RlZC1mb2N1cyk7XG4gIH1cblxuICAvKiBGb2N1c2VkIC0gY2hlY2tlZCAqL1xuICAuY2hlY2tib3gtY29udGFpbmVyLmNoZWNrYm94LWNvbnRhaW5lci1jaGVja2VkOm5vdChcbiAgICAgIC5jaGVja2JveC1jb250YWluZXItZGlzYWJsZWRcbiAgICApXG4gICAgLmNoZWNrYm94LWlucHV0OmZvY3VzXG4gICAgfiAuY2hlY2tib3gtY29udHJvbCB7XG4gICAgb3V0bGluZTogc29saWQgdmFyKC0tbmUtY2hlY2tib3gtZm9jdXMpXG4gICAgICB2YXIoLS1uZS1jaGVja2JveC1jb2xvci1ib3JkZXItc2VsZWN0ZWQtZm9jdXMpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLWNoZWNrYm94LWNvbG9yLWJhY2tncm91bmQtc2VsZWN0ZWQtZm9jdXMpO1xuICB9XG5cbiAgLyogRGlzYWJsZWQgKi9cbiAgLmNoZWNrYm94LWNvbnRhaW5lci5jaGVja2JveC1jb250YWluZXItZGlzYWJsZWQge1xuICAgIGN1cnNvcjogbm90LWFsbG93ZWQ7XG4gIH1cblxuICAuY2hlY2tib3gtY29udGFpbmVyLmNoZWNrYm94LWNvbnRhaW5lci1kaXNhYmxlZCAuY2hlY2tib3gtdGV4dCB7XG4gICAgY29sb3I6IHZhcigtLW5lLWNoZWNrYm94LWNvbG9yLXRleHQtZGlzYWJsZWQpO1xuICB9XG5cbiAgLmNoZWNrYm94LWNvbnRhaW5lci5jaGVja2JveC1jb250YWluZXItZGlzYWJsZWQgLmNoZWNrYm94LXN1YnRleHQge1xuICAgIGNvbG9yOiB2YXIoLS1uZS1jaGVja2JveC1jb2xvci10ZXh0LWRpc2FibGVkKTtcbiAgfVxuXG4gIC5jaGVja2JveC1jb250YWluZXIuY2hlY2tib3gtY29udGFpbmVyLWRpc2FibGVkIC5jaGVja2JveC1pbnB1dCB7XG4gICAgY3Vyc29yOiBub3QtYWxsb3dlZDtcbiAgfVxuXG4gIC8qIEhvdmVyZWQgLSBub3QgY2hlY2tlZCAqL1xuICAuY2hlY2tib3gtY29udGFpbmVyOm5vdCguY2hlY2tib3gtY29udGFpbmVyLWNoZWNrZWQpLmNoZWNrYm94LWNvbnRhaW5lcjpub3QoXG4gICAgICAuY2hlY2tib3gtY29udGFpbmVyLWRpc2FibGVkXG4gICAgKVxuICAgIC5jaGVja2JveC1pbnB1dDpob3ZlclxuICAgIH4gLmNoZWNrYm94LWNvbnRyb2wge1xuICAgIGJvcmRlci1jb2xvcjogdmFyKC0tbmUtY2hlY2tib3gtY29sb3ItYm9yZGVyLXVuc2VsZWN0ZWQtaG92ZXIpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLWNoZWNrYm94LWNvbG9yLWJhY2tncm91bmQtdW5zZWxlY3RlZC1ob3Zlcik7XG4gIH1cblxuICAvKiBIb3ZlcmVkIC0gY2hlY2tlZCAqL1xuICAuY2hlY2tib3gtY29udGFpbmVyLmNoZWNrYm94LWNvbnRhaW5lci1jaGVja2VkLmNoZWNrYm94LWNvbnRhaW5lcjpub3QoXG4gICAgICAuY2hlY2tib3gtY29udGFpbmVyLWRpc2FibGVkXG4gICAgKVxuICAgIC5jaGVja2JveC1pbnB1dDpob3ZlclxuICAgIH4gLmNoZWNrYm94LWNvbnRyb2wge1xuICAgIGJvcmRlci1jb2xvcjogdmFyKC0tbmUtY2hlY2tib3gtY29sb3ItYm9yZGVyLXNlbGVjdGVkLWhvdmVyKTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1jaGVja2JveC1jb2xvci1iYWNrZ3JvdW5kLXNlbGVjdGVkLWhvdmVyKTtcbiAgfVxuYDtcbmNvbnN0IHN0eWxlcyA9IFtiYXNlQ2hlY2tib3gsIGNvbW1vblN0eWxlcywgdG9rZW5zXTtcblxuLyoqXG4gKiBAdGFnIG5lLWNoZWNrYm94XG4gKiBAdGFnbmFtZSBuZS1jaGVja2JveFxuICpcbiAqIEBkZXNjcmlwdGlvbiBDb250cm9sIHRoYXQgcmVuZGVycyBhIGNoZWNrYm94IHRoYXQgY2FuIGJlIHVzZWQgaW4gZm9ybXMsIG9yIGluZGVwZW5kZW50bHkuXG4gKlxuICogQGV2ZW50IG5lLWNsaWNrIFJhaXNlZCB3aGVuIHRoZSBjaGVja2JveCBpcyBjbGlja2VkXG4gKi9cbmxldCBOZUNoZWNrYm94ID0gY2xhc3MgTmVDaGVja2JveCBleHRlbmRzIExpdEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgZGlzcGxheSBsYWJlbCBpcyBib3VuZCB0byB0aGlzIG9wdGlvblxuICAgICAqL1xuICAgIHRoaXMudGV4dCA9ICcnO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgYWRkaXRpb25hbCBkZXNjcmlwdGlvbiBvZiB0aGUgY2hlY2tib3ggaXMgYm91bmQgdG8gdGhpcyBvcHRpb24uIE5vdCByZXF1aXJlZC5cbiAgICAgKi9cbiAgICB0aGlzLnN1YlRleHQgPSAnJztcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgd2hldGhlciBvciBub3QgdGhlIGJvdW5kIGVsZW1lbnQgaXMgY2hlY2tlZC4gRmFsc2UgYnkgZGVmYXVsdC5cbiAgICAgKi9cbiAgICB0aGlzLmNoZWNrZWQgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhhdCBhbiBpbnB1dCBzaG91bGQgYmUgZGlzYWJsZWQuIEZhbHNlIGJ5IGRlZmF1bHQuXG4gICAgICovXG4gICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICB9XG4gIHN0YXRpYyBnZXQgc3R5bGVzKCkge1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH1cbiAgb25DbGljaygpIHtcbiAgICBmaXJlKHRoaXMsICduZS1jbGljaycsIHtcbiAgICAgIGNvbXBvc2VkOiB0cnVlLFxuICAgICAgYnViYmxlczogdHJ1ZVxuICAgIH0pO1xuICAgIHRoaXMuY2hlY2tlZCA9ICF0aGlzLmNoZWNrZWQ7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBodG1sYFxuICAgICAgPGxhYmVsXG4gICAgICAgIGNsYXNzPSR7Y2xhc3NNYXAoe1xuICAgICAgJ2NoZWNrYm94LWNvbnRhaW5lcic6IHRydWUsXG4gICAgICAnY2hlY2tib3gtY29udGFpbmVyLWNoZWNrZWQnOiB0aGlzLmNoZWNrZWQsXG4gICAgICAnY2hlY2tib3gtY29udGFpbmVyLWRpc2FibGVkJzogdGhpcy5kaXNhYmxlZFxuICAgIH0pfVxuICAgICAgPlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICBjbGFzcz1cImNoZWNrYm94LWlucHV0XCJcbiAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgIHRhYmluZGV4PSR7dGhpcy50YWJJbmRleC50b1N0cmluZygpfVxuICAgICAgICAgIC5kaXNhYmxlZD0ke3RoaXMuZGlzYWJsZWR9XG4gICAgICAgICAgLmNoZWNrZWQ9JHt0aGlzLmNoZWNrZWR9XG4gICAgICAgICAgYXJpYS1jaGVja2VkPSR7dGhpcy5jaGVja2VkID8gJ3RydWUnIDogJ2ZhbHNlJ31cbiAgICAgICAgICBAY2xpY2s9XCIke3RoaXMub25DbGlja31cIlxuICAgICAgICAvPlxuICAgICAgICA8c3BhbiBjbGFzcz1cImNoZWNrYm94LWNvbnRyb2xcIj5cbiAgICAgICAgICAke3RoaXMuY2hlY2tlZCA/IHJlbmRlckljb24oe1xuICAgICAgdHlwZUFzSHRtbDogY2hlY2tcbiAgICB9KSA6IG5vdGhpbmd9XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNoZWNrYm94LXRleHQtY29udGFpbmVyXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJjaGVja2JveC10ZXh0XCI+JHt0aGlzLnRleHR9PC9zcGFuPlxuICAgICAgICAgICR7dGhpcy5zdWJUZXh0ID8gaHRtbGA8c3BhbiBjbGFzcz1cImNoZWNrYm94LXN1YnRleHRcIj4ke3RoaXMuc3ViVGV4dH08L3NwYW4+YCA6IG5vdGhpbmd9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9sYWJlbD5cbiAgICBgO1xuICB9XG59O1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBTdHJpbmdcbn0pXSwgTmVDaGVja2JveC5wcm90b3R5cGUsIFwidGV4dFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBTdHJpbmdcbn0pXSwgTmVDaGVja2JveC5wcm90b3R5cGUsIFwic3ViVGV4dFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBCb29sZWFuLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIE5lQ2hlY2tib3gucHJvdG90eXBlLCBcImNoZWNrZWRcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogQm9vbGVhbixcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZUNoZWNrYm94LnByb3RvdHlwZSwgXCJkaXNhYmxlZFwiLCB2b2lkIDApO1xuTmVDaGVja2JveCA9IF9fZGVjb3JhdGUoW2N1c3RvbUVsZW1lbnQoJ25lLWNoZWNrYm94JyldLCBOZUNoZWNrYm94KTtcblxuZXhwb3J0IHsgTmVDaGVja2JveCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hlY2tib3guanMubWFwXG4iLCJpbXBvcnQgeyBjIGFzIGNvbW1vblN0eWxlcywgXyBhcyBfX2RlY29yYXRlIH0gZnJvbSAnLi9iYXNlLnN0eWxlcy0xMWQzOTE4MS5qcyc7XG5pbXBvcnQgeyBjc3MsIExpdEVsZW1lbnQsIGh0bWwgfSBmcm9tICdsaXQnO1xuaW1wb3J0IHsgU2NvcGVkRWxlbWVudHNNaXhpbiB9IGZyb20gJ0BvcGVuLXdjL3Njb3BlZC1lbGVtZW50cyc7XG5pbXBvcnQgeyBwcm9wZXJ0eSwgY3VzdG9tRWxlbWVudCwgc3RhdGUgfSBmcm9tICdsaXQvZGVjb3JhdG9ycy5qcyc7XG5pbXBvcnQgeyBjbGFzc01hcCB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL2NsYXNzLW1hcC5qcyc7XG5pbXBvcnQgeyBmIGFzIGZpcmUgfSBmcm9tICcuL2V2ZW50cy0xMTczZjU2Mi5qcyc7XG5pbXBvcnQgeyBJIGFzIEljb25zIH0gZnJvbSAnLi9pY29uVHlwZS04MzI2ZWRkYi5qcyc7XG5pbXBvcnQgeyBOZUljb24gfSBmcm9tICcuL2ljb24uanMnO1xuaW1wb3J0IHsgTmVJY29uQnV0dG9uIH0gZnJvbSAnLi9pY29uLWJ1dHRvbi5qcyc7XG5pbXBvcnQgeyBOZUJ1dHRvblNldCB9IGZyb20gJy4vYnV0dG9uLXNldC5qcyc7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5jb25zdCB0b2tlbnMgPSBjc3NgXG4gICoge1xuICAtLW5lLWNvbmZpZy1wYW5lbC1zaXppbmctaGVhZGVyLWljb24tYmc6IHZhcigtLW5lLXJlZi1zaXppbmctMTEsIDNlbSk7XG4gIC0tbmUtY29uZmlnLXBhbmVsLXNpemluZy1oZWFkZXItaWNvbjogdmFyKC0tbmUtcmVmLXNpemluZy0wOCwgMmVtKTtcbiAgLS1uZS1jb25maWctcGFuZWwtc2l6aW5nLWhlYWRlci1iYXItd2lkdGg6IHZhcigtLW5lLXJlZi1zaXppbmctMDEsIDAuMjVlbSk7XG4gIC0tbmUtY29uZmlnLXBhbmVsLXNpemluZy13aWR0aC1zbWFsbDogdmFyKC0tbmUtcmVmLXNpemluZy0xNywgMjRlbSk7XG4gIC0tbmUtY29uZmlnLXBhbmVsLXNpemluZy13aWR0aC1sYXJnZTogdmFyKC0tbmUtcmVmLXNpemluZy0yMCwgNDhlbSk7XG4gIC0tbmUtY29uZmlnLXBhbmVsLWNvbG9yLWJhY2tncm91bmQ6IHZhcigtLW5lLXJlZi1jb2xvci13aGl0ZSwgI2ZmZmZmZik7XG4gIC0tbmUtY29uZmlnLXBhbmVsLWNvbG9yLWhlYWRlci1iYXI6IHZhcigtLW5lLXJlZi1jb2xvci1uaW50ZXgtb3JhbmdlLCAjRjU2OTAwKTtcbiAgLS1uZS1jb25maWctcGFuZWwtY29sb3ItaGVhZGVyLWJvcmRlcjogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktMTAsICNFMkUzRTQpO1xuICAtLW5lLWNvbmZpZy1wYW5lbC1jb2xvci1oZWFkZXItdGl0bGU6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTkwLCAjMTYxNzE4KTtcbiAgLS1uZS1jb25maWctcGFuZWwtY29sb3ItaGVhZGVyLXN1YnRpdGxlOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS02MCwgIzU3NUM2MSk7XG4gIC0tbmUtY29uZmlnLXBhbmVsLWNvbG9yLWhlYWRlci1pY29uOiB2YXIoLS1uZS1yZWYtY29sb3Itd2hpdGUsICNmZmZmZmYpO1xuICAtLW5lLWNvbmZpZy1wYW5lbC1jb2xvci1oZWFkZXItaWNvbi1iZzogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtNzAsICMwMDUyQTMpO1xuICAtLW5lLWNvbmZpZy1wYW5lbC1zaGFkb3c6IDBweCAwcHggOHB4IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTkwLTIwLCAjMTYxNzE4MjApO1xuICAtLW5lLWNvbmZpZy1wYW5lbC1wYWRkaW5nOiB2YXIoLS1uZS1yZWYtc3BhY2luZy1tZWRpdW0sIDFlbSk7XG4gIC0tbmUtY29uZmlnLXBhbmVsLWhlYWRlci1wYWRkaW5nLWhvcml6b250YWw6IHZhcigtLW5lLXJlZi1zcGFjaW5nLW1lZGl1bSwgMWVtKTtcbiAgLS1uZS1jb25maWctcGFuZWwtaGVhZGVyLXBhZGRpbmctZ2FwOiB2YXIoLS1uZS1yZWYtc3BhY2luZy1tZWRpdW0sIDFlbSk7XG4gIC0tbmUtY29uZmlnLXBhbmVsLWhlYWRlci1wYWRkaW5nLXZlcnRpY2FsOiB2YXIoLS1uZS1yZWYtc3BhY2luZy1tZWRpdW0sIDFlbSk7XG4gIC0tbmUtY29uZmlnLXBhbmVsLWJ1dHRvbi1zZXQtcGFkZGluZy1ob3Jpem9udGFsOiB2YXIoLS1uZS1yZWYtc3BhY2luZy1tZWRpdW0sIDFlbSk7XG4gIC0tbmUtY29uZmlnLXBhbmVsLWJvcmRlci13aWR0aC1oZWFkZXI6IHZhcigtLW5lLXJlZi1ib3JkZXItd2lkdGgtc21hbGwsIDFweCk7XG4gIC0tbmUtY29uZmlnLXBhbmVsLWZvbnQtZmFtaWx5LWhlYWRlci10aXRsZTogdmFyKC0tbmUtcmVmLWZvbnQtZmFtaWx5LW1vbnRzZXJyYXQsIE1vbnRzZXJyYXQpO1xuICAtLW5lLWNvbmZpZy1wYW5lbC1mb250LWZhbWlseS1oZWFkZXItc3VidGl0bGU6IHZhcigtLW5lLXJlZi1mb250LWZhbWlseS1vcGVuLXNhbnMsIE9wZW4gU2Fucyk7XG4gIC0tbmUtY29uZmlnLXBhbmVsLWZvbnQtc2l6ZS1oZWFkZXItdGl0bGU6IHZhcigtLW5lLXJlZi1mb250LXNpemUtMDYsIDEuMTI1ZW0pO1xuICAtLW5lLWNvbmZpZy1wYW5lbC1mb250LXNpemUtaGVhZGVyLXN1YnRpdGxlOiB2YXIoLS1uZS1yZWYtZm9udC1zaXplLTA0LCAwLjg3NWVtKTtcbiAgLS1uZS1jb25maWctcGFuZWwtZm9udC13ZWlnaHQtaGVhZGVyLXRpdGxlOiB2YXIoLS1uZS1yZWYtZm9udC13ZWlnaHQtcmVndWxhciwgUmVndWxhcik7XG4gIC0tbmUtY29uZmlnLXBhbmVsLWZvbnQtd2VpZ2h0LWhlYWRlci1zdWJ0aXRsZTogdmFyKC0tbmUtcmVmLWZvbnQtd2VpZ2h0LXJlZ3VsYXIsIFJlZ3VsYXIpO1xuICAtLW5lLWNvbmZpZy1wYW5lbC1saW5lLWhlaWdodC1oZWFkZXItdGl0bGU6IHZhcigtLW5lLXJlZi1saW5lLWhlaWdodC0wOCwgMS41ZW0pO1xuICAtLW5lLWNvbmZpZy1wYW5lbC1saW5lLWhlaWdodC1oZWFkZXItc3VidGl0bGU6IHZhcigtLW5lLXJlZi1saW5lLWhlaWdodC0wOCwgMS41ZW0pO1xuICAtLW5lLWNvbmZpZy1wYW5lbC1ib3JkZXItcmFkaXVzLWhlYWRlci1pY29uLWJnOiB2YXIoLS1uZS1yZWYtYm9yZGVyLXJhZGl1cy1tZWRpdW0sIC4yNWVtKTtcbn1cbmA7XG5cbmNvbnN0IGJhc2UkMSA9IGNzc2BcbiAgOmhvc3Qge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgfVxuXG4gIC5uZS1jb25maWctcGFuZWwge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZmxvdzogY29sdW1uIG5vd3JhcDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gICAgYWxpZ24tY29udGVudDogY2VudGVyO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBib3gtc2hhZG93OiB2YXIoLS1uZS1jb25maWctcGFuZWwtc2hhZG93KTtcbiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1uZS1jb25maWctcGFuZWwtY29sb3ItYmFja2dyb3VuZCk7XG4gIH1cblxuICAuc21hbGwge1xuICAgIHdpZHRoOiB2YXIoLS1uZS1jb25maWctcGFuZWwtc2l6aW5nLXdpZHRoLXNtYWxsKTtcbiAgfVxuXG4gIC5sYXJnZSB7XG4gICAgd2lkdGg6IHZhcigtLW5lLWNvbmZpZy1wYW5lbC1zaXppbmctd2lkdGgtbGFyZ2UpO1xuICB9XG5cbiAgLmNvbnRlbnQge1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBwYWRkaW5nOiB2YXIoLS1uZS1jb25maWctcGFuZWwtcGFkZGluZyk7XG4gIH1cblxuICAuZm9vdGVyIHtcbiAgICBwYWRkaW5nLWxlZnQ6IHZhcigtLW5lLWNvbmZpZy1wYW5lbC1idXR0b24tc2V0LXBhZGRpbmctaG9yaXpvbnRhbCk7XG4gICAgcGFkZGluZy1yaWdodDogdmFyKC0tbmUtY29uZmlnLXBhbmVsLWJ1dHRvbi1zZXQtcGFkZGluZy1ob3Jpem9udGFsKTtcbiAgfVxuXG4gIC5oaWRlIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICB9XG5gO1xuY29uc3Qgc3R5bGVzJDEgPSBbYmFzZSQxLCBjb21tb25TdHlsZXMsIHRva2Vuc107XG5cbmNvbnN0IGJhc2UgPSBjc3NgXG4gIDpob3N0IHtcbiAgICB3aWR0aDogMTAwJTtcbiAgfVxuXG4gIC5uZS1jb25maWctcGFuZWwtaGVhZGVyIHtcbiAgICBwYWRkaW5nLXJpZ2h0OiB2YXIoLS1uZS1jb25maWctcGFuZWwtaGVhZGVyLXBhZGRpbmctaG9yaXpvbnRhbCk7XG4gICAgcGFkZGluZy1sZWZ0OiB2YXIoLS1uZS1jb25maWctcGFuZWwtaGVhZGVyLXBhZGRpbmctaG9yaXpvbnRhbCk7XG4gICAgYm9yZGVyLWxlZnQ6IHZhcigtLW5lLWNvbmZpZy1wYW5lbC1zaXppbmctaGVhZGVyLWJhci13aWR0aCkgc29saWRcbiAgICAgIHZhcigtLW5lLWNvbmZpZy1wYW5lbC1jb2xvci1oZWFkZXItYmFyKTtcbiAgICBib3JkZXItYm90dG9tOiB2YXIoLS1uZS1jb25maWctcGFuZWwtYm9yZGVyLXdpZHRoLWhlYWRlcikgc29saWRcbiAgICAgIHZhcigtLW5lLWNvbmZpZy1wYW5lbC1jb2xvci1oZWFkZXItYm9yZGVyKTtcbiAgfVxuXG4gIC5oZWFkZXItY29udGVudCB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWZsb3c6IHJvdyBub3dyYXA7XG4gICAgcGFkZGluZy10b3A6IHZhcigtLW5lLWNvbmZpZy1wYW5lbC1oZWFkZXItcGFkZGluZy12ZXJ0aWNhbCk7XG4gICAgcGFkZGluZy1ib3R0b206IHZhcigtLW5lLWNvbmZpZy1wYW5lbC1oZWFkZXItcGFkZGluZy12ZXJ0aWNhbCk7XG4gICAgZ2FwOiB2YXIoLS1uZS1jb25maWctcGFuZWwtaGVhZGVyLXBhZGRpbmctZ2FwKTtcbiAgfVxuXG4gIC5oZWFkZXItaWNvbiB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIHdpZHRoOiB2YXIoLS1uZS1jb25maWctcGFuZWwtc2l6aW5nLWhlYWRlci1pY29uLWJnKTtcbiAgICBoZWlnaHQ6IHZhcigtLW5lLWNvbmZpZy1wYW5lbC1zaXppbmctaGVhZGVyLWljb24tYmcpO1xuICAgIGJhY2tncm91bmQ6IHZhcigtLW5lLWNvbmZpZy1wYW5lbC1jb2xvci1oZWFkZXItaWNvbi1iZyk7XG4gICAgYm9yZGVyLXJhZGl1czogdmFyKC0tbmUtY29uZmlnLXBhbmVsLWJvcmRlci1yYWRpdXMtaGVhZGVyLWljb24tYmcpO1xuICB9XG5cbiAgLmljb24ge1xuICAgIGNvbG9yOiB2YXIoLS1uZS1jb25maWctcGFuZWwtY29sb3ItaGVhZGVyLWljb24pO1xuICAgIHdpZHRoOiB2YXIoLS1uZS1jb25maWctcGFuZWwtc2l6aW5nLWhlYWRlci1pY29uKTtcbiAgICBoZWlnaHQ6IHZhcigtLW5lLWNvbmZpZy1wYW5lbC1zaXppbmctaGVhZGVyLWljb24pO1xuICB9XG5cbiAgLmhlYWRlci10ZXh0IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZmxvdzogY29sdW1uO1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgICBmbGV4OiAxO1xuICB9XG5cbiAgLnRpdGxlLWxhYmVsIHtcbiAgICBjb2xvcjogdmFyKC0tbmUtY29uZmlnLXBhbmVsLWNvbG9yLWhlYWRlci10aXRsZSk7XG4gICAgZm9udC1mYW1pbHk6IHZhcigtLW5lLWNvbmZpZy1wYW5lbC1mb250LWZhbWlseS1oZWFkZXItdGl0bGUpO1xuICAgIGZvbnQtc2l6ZTogdmFyKC0tbmUtY29uZmlnLXBhbmVsLWZvbnQtc2l6ZS1oZWFkZXItdGl0bGUpO1xuICAgIGZvbnQtd2VpZ2h0OiB2YXIoLS1uZS1jb25maWctcGFuZWwtZm9udC13ZWlnaHQtaGVhZGVyLXRpdGxlKTtcbiAgICBsaW5lLWhlaWdodDogdmFyKC0tbmUtY29uZmlnLXBhbmVsLWxpbmUtaGVpZ2h0LWhlYWRlci10aXRsZSk7XG4gIH1cblxuICAuc3VidGl0bGUtbGFiZWwge1xuICAgIGNvbG9yOiB2YXIoLS1uZS1jb25maWctcGFuZWwtY29sb3ItaGVhZGVyLXN1YnRpdGxlKTtcbiAgICBmb250LWZhbWlseTogdmFyKC0tbmUtY29uZmlnLXBhbmVsLWZvbnQtZmFtaWx5LWhlYWRlci1zdWJ0aXRsZSk7XG4gICAgZm9udC1zaXplOiB2YXIoLS1uZS1jb25maWctcGFuZWwtZm9udC1zaXplLWhlYWRlci1zdWJ0aXRsZSk7XG4gICAgZm9udC13ZWlnaHQ6IHZhcigtLW5lLWNvbmZpZy1wYW5lbC1mb250LXdlaWdodC1oZWFkZXItc3VidGl0bGUpO1xuICAgIGxpbmUtaGVpZ2h0OiB2YXIoLS1uZS1jb25maWctcGFuZWwtbGluZS1oZWlnaHQtaGVhZGVyLXN1YnRpdGxlKTtcbiAgfVxuYDtcbmNvbnN0IHN0eWxlcyA9IFtiYXNlLCBjb21tb25TdHlsZXMsIHRva2Vuc107XG5cbi8qKlxuICogQHRhZyBuZS1jb25maWctcGFuZWwtaGVhZGVyXG4gKiBAdGFnbmFtZSBuZS1jb25maWctcGFuZWwtaGVhZGVyXG4gKlxuICovXG5sZXQgTmVDb25maWdQYW5lbEhlYWRlciA9IGNsYXNzIE5lQ29uZmlnUGFuZWxIZWFkZXIgZXh0ZW5kcyBTY29wZWRFbGVtZW50c01peGluKExpdEVsZW1lbnQpIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLnRpdGxlVGV4dCA9ICcnO1xuICAgIHRoaXMuc3VidGl0bGVUZXh0ID0gJyc7XG4gICAgLy8gRXZlbnRzXG4gICAgdGhpcy5fb25DbG9zZSA9ICgpID0+IHtcbiAgICAgIGZpcmUodGhpcywgJ25lLWNsb3NlJywge30pO1xuICAgIH07XG4gIH1cbiAgLy8gU3R5bGVzXG4gIHN0YXRpYyBnZXQgc3R5bGVzKCkge1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH1cbiAgc3RhdGljIGdldCBzY29wZWRFbGVtZW50cygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgJ25lLWljb24nOiBOZUljb24sXG4gICAgICAnbmUtaWNvbi1idXR0b24nOiBOZUljb25CdXR0b25cbiAgICB9O1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gaHRtbGA8ZGl2IGNsYXNzPVwibmUtY29uZmlnLXBhbmVsLWhlYWRlclwiPlxuICAgICAgPGRpdiBpZD1cImhlYWRlci1jb250ZW50XCIgY2xhc3M9XCJoZWFkZXItY29udGVudFwiPlxuICAgICAgICA8ZGl2IGlkPVwiaGVhZGVyLWljb25cIiBjbGFzcz1cImhlYWRlci1pY29uXCI+XG4gICAgICAgICAgPG5lLWljb24gaWQ9XCJpY29uXCIgY2xhc3M9XCJpY29uXCIgdHlwZT1cIiR7dGhpcy5pY29ufVwiPjwvbmUtaWNvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgaWQ9XCJoZWFkZXItdGV4dFwiIGNsYXNzPVwiaGVhZGVyLXRleHRcIj5cbiAgICAgICAgICA8bGFiZWwgaWQ9XCJ0aXRsZS1sYWJlbFwiIGNsYXNzPVwidGl0bGUtbGFiZWxcIj5cbiAgICAgICAgICAgICR7dGhpcy50aXRsZVRleHR9XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8bGFiZWwgaWQ9XCJzdWJ0aXRsZS1sYWJlbFwiIGNsYXNzPVwic3VidGl0bGUtbGFiZWxcIj5cbiAgICAgICAgICAgICR7dGhpcy5zdWJ0aXRsZVRleHR9XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxuZS1pY29uLWJ1dHRvblxuICAgICAgICAgIGlkPVwiY2xvc2UtYnV0dG9uXCJcbiAgICAgICAgICBjbGFzcz1cImNsb3NlLWJ1dHRvblwiXG4gICAgICAgICAgdmFyaWFudD1cImRhcmtcIlxuICAgICAgICAgIGljb249JHtJY29ucy5jbG9zZURlZmF1bHR9XG4gICAgICAgICAgQGNsaWNrPSR7dGhpcy5fb25DbG9zZX1cbiAgICAgICAgICBuZS1hcmlhLWxhYmVsPVwiY2xvc2UtYnV0dG9uXCJcbiAgICAgICAgPjwvbmUtaWNvbi1idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj4gYDtcbiAgfVxufTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgcmVmbGVjdDogdHJ1ZSxcbiAgYXR0cmlidXRlOiAnaWNvbidcbn0pXSwgTmVDb25maWdQYW5lbEhlYWRlci5wcm90b3R5cGUsIFwiaWNvblwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICByZWZsZWN0OiB0cnVlLFxuICBhdHRyaWJ1dGU6ICd0aXRsZS10ZXh0J1xufSldLCBOZUNvbmZpZ1BhbmVsSGVhZGVyLnByb3RvdHlwZSwgXCJ0aXRsZVRleHRcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgcmVmbGVjdDogdHJ1ZSxcbiAgYXR0cmlidXRlOiAnc3VidGl0bGUtdGV4dCdcbn0pXSwgTmVDb25maWdQYW5lbEhlYWRlci5wcm90b3R5cGUsIFwic3VidGl0bGVUZXh0XCIsIHZvaWQgMCk7XG5OZUNvbmZpZ1BhbmVsSGVhZGVyID0gX19kZWNvcmF0ZShbY3VzdG9tRWxlbWVudCgnbmUtY29uZmlnLXBhbmVsLWhlYWRlcicpXSwgTmVDb25maWdQYW5lbEhlYWRlcik7XG5cbmNvbnN0IFBhbmVsU2l6ZSA9IHtcbiAgc21hbGw6ICdzbWFsbCcsXG4gIGxhcmdlOiAnbGFyZ2UnXG59O1xubGV0IE5lQ29uZmlnUGFuZWwgPSBjbGFzcyBOZUNvbmZpZ1BhbmVsIGV4dGVuZHMgU2NvcGVkRWxlbWVudHNNaXhpbihMaXRFbGVtZW50KSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgLy8gUHJvcGVydGllc1xuICAgIHRoaXMuc2l6ZSA9IFBhbmVsU2l6ZS5zbWFsbDtcbiAgICB0aGlzLnRpdGxlVGV4dCA9ICcnO1xuICAgIHRoaXMuc3VidGl0bGVUZXh0ID0gJyc7XG4gICAgdGhpcy5faGlkZUZvb3RlciA9IGZhbHNlO1xuICB9XG4gIC8vIFN0eWxlc1xuICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICByZXR1cm4gc3R5bGVzJDE7XG4gIH1cbiAgc3RhdGljIGdldCBzY29wZWRFbGVtZW50cygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgJ25lLWNvbmZpZy1wYW5lbC1oZWFkZXInOiBOZUNvbmZpZ1BhbmVsSGVhZGVyLFxuICAgICAgJ25lLWJ1dHRvbi1zZXQnOiBOZUJ1dHRvblNldFxuICAgIH07XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBodG1sYDxkaXZcbiAgICAgIGNsYXNzPVwiJHtjbGFzc01hcCh7XG4gICAgICAnbmUtY29uZmlnLXBhbmVsJzogdHJ1ZSxcbiAgICAgIFt0aGlzLnNpemVdOiB0cnVlXG4gICAgfSl9XCJcbiAgICA+XG4gICAgICA8ZGl2IGlkPVwiaGVhZGVyXCIgY2xhc3M9XCJoZWFkZXJcIj5cbiAgICAgICAgPG5lLWNvbmZpZy1wYW5lbC1oZWFkZXJcbiAgICAgICAgICAuaWNvbj0ke3RoaXMuaWNvbn1cbiAgICAgICAgICAudGl0bGVUZXh0PSR7dGhpcy50aXRsZVRleHR9XG4gICAgICAgICAgLnN1YnRpdGxlVGV4dD0ke3RoaXMuc3VidGl0bGVUZXh0fVxuICAgICAgICA+XG4gICAgICAgIDwvbmUtY29uZmlnLXBhbmVsLWhlYWRlcj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNvbnRlbnRcIj5cbiAgICAgICAgPHNsb3Q+PC9zbG90PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzPVwiJHtjbGFzc01hcCh7XG4gICAgICBmb290ZXI6IHRydWUsXG4gICAgICBoaWRlOiB0aGlzLl9oaWRlRm9vdGVyXG4gICAgfSl9XCJcbiAgICAgID5cbiAgICAgICAgPG5lLWJ1dHRvbi1zZXQgY2xhc3M9XCJidXR0b24tc2V0XCIgc2hvdy1kaXZpZGVyLXRvcD1cInRydWVcIj5cbiAgICAgICAgICA8c2xvdCBuYW1lPVwiZm9vdGVyXCI+PC9zbG90PlxuICAgICAgICA8L25lLWJ1dHRvbi1zZXQ+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5gO1xuICB9XG4gIGZpcnN0VXBkYXRlZCgpIHtcbiAgICAvLyBDaGVjayBpZiBGb290ZXIgU2xvdCBoYXMgbm9kZShzKSBhc3NpZ25lZC4gTm9kZXMgY2FuIG9ubHkgYmUgZGV0ZWN0ZWQgYWZ0ZXIgZmlyc3QgcmVuZGVyLiBJZiBub3QgZGV0ZWN0ZWQsIGhpZGUgZm9vdGVyXG4gICAgY29uc3Qgc2xvdCA9IHRoaXM/LnNoYWRvd1Jvb3Q/LnF1ZXJ5U2VsZWN0b3IoJ3Nsb3RbbmFtZT1mb290ZXJdJyk7XG4gICAgdGhpcy5faGlkZUZvb3RlciA9IHNsb3Q/LmFzc2lnbmVkTm9kZXMoKS5sZW5ndGggPT09IDA7XG4gIH1cbn07XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIGF0dHJpYnV0ZTogJ3BhbmVsLXNpemUnLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIE5lQ29uZmlnUGFuZWwucHJvdG90eXBlLCBcInNpemVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgcmVmbGVjdDogdHJ1ZSxcbiAgYXR0cmlidXRlOiAnaWNvbidcbn0pXSwgTmVDb25maWdQYW5lbC5wcm90b3R5cGUsIFwiaWNvblwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICByZWZsZWN0OiB0cnVlLFxuICBhdHRyaWJ1dGU6ICd0aXRsZS10ZXh0J1xufSldLCBOZUNvbmZpZ1BhbmVsLnByb3RvdHlwZSwgXCJ0aXRsZVRleHRcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgcmVmbGVjdDogdHJ1ZSxcbiAgYXR0cmlidXRlOiAnc3VidGl0bGUtdGV4dCdcbn0pXSwgTmVDb25maWdQYW5lbC5wcm90b3R5cGUsIFwic3VidGl0bGVUZXh0XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtzdGF0ZSgpXSwgTmVDb25maWdQYW5lbC5wcm90b3R5cGUsIFwiX2hpZGVGb290ZXJcIiwgdm9pZCAwKTtcbk5lQ29uZmlnUGFuZWwgPSBfX2RlY29yYXRlKFtjdXN0b21FbGVtZW50KCduZS1jb25maWctcGFuZWwnKV0sIE5lQ29uZmlnUGFuZWwpO1xuXG5leHBvcnQgeyBOZUNvbmZpZ1BhbmVsIGFzIE4sIFBhbmVsU2l6ZSBhcyBQLCBOZUNvbmZpZ1BhbmVsSGVhZGVyIGFzIGEgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmZpZy1wYW5lbC04NzY2NDE4Ni5qcy5tYXBcbiIsImltcG9ydCB7IGMgYXMgY29tbW9uU3R5bGVzLCBfIGFzIF9fZGVjb3JhdGUgfSBmcm9tICcuL2Jhc2Uuc3R5bGVzLTExZDM5MTgxLmpzJztcbmltcG9ydCB7IGNzcywgTGl0RWxlbWVudCwgaHRtbCwgbm90aGluZyB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBwcm9wZXJ0eSwgY3VzdG9tRWxlbWVudCB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IGNsYXNzTWFwIH0gZnJvbSAnbGl0L2RpcmVjdGl2ZXMvY2xhc3MtbWFwLmpzJztcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmNvbnN0IHRva2VucyA9IGNzc2BcbiAgKiB7XG4gIC0tbmUtZHJvcGRvd24tbWVudS1jb2xvci1lbGV2YXRlZC1iYWNrZ3JvdW5kOiB2YXIoLS1uZS1yZWYtY29sb3Itd2hpdGUsICNmZmZmZmYpO1xuICAtLW5lLWRyb3Bkb3duLW1lbnUtY29sb3ItZWxldmF0ZWQtYm9yZGVyOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS0xMCwgI0UyRTNFNCk7XG4gIC0tbmUtZHJvcGRvd24tbWVudS1jb2xvci1mbGF0LWJhY2tncm91bmQ6IHZhcigtLW5lLXJlZi1jb2xvci13aGl0ZSwgI2ZmZmZmZik7XG4gIC0tbmUtZHJvcGRvd24tbWVudS1jb2xvci1mbGF0LWJvcmRlcjogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtNjAsICMwMDZCRDYpO1xuICAtLW5lLWRyb3Bkb3duLW1lbnUtYm9yZGVyLXJhZGl1cy1lbGV2YXRlZDogdmFyKC0tbmUtcmVmLWJvcmRlci1yYWRpdXMtbWVkaXVtLCAuMjVlbSk7XG4gIC0tbmUtZHJvcGRvd24tbWVudS1ib3JkZXItcmFkaXVzLWZsYXQtdG9wOiB2YXIoLS1uZS1yZWYtYm9yZGVyLXJhZGl1cy1ub25lLCAwKTtcbiAgLS1uZS1kcm9wZG93bi1tZW51LWJvcmRlci1yYWRpdXMtZmxhdC1ib3R0b206IHZhcigtLW5lLXJlZi1ib3JkZXItcmFkaXVzLW1lZGl1bSwgLjI1ZW0pO1xuICAtLW5lLWRyb3Bkb3duLW1lbnUtcGFkZGluZy1ob3Jpem9udGFsOiB2YXIoLS1uZS1yZWYtc3BhY2luZy1ub25lLCAwKTtcbiAgLS1uZS1kcm9wZG93bi1tZW51LXBhZGRpbmctdmVydGljYWw6IHZhcigtLW5lLXJlZi1zcGFjaW5nLXh4LXNtYWxsLCAwLjI1ZW0pO1xuICAtLW5lLWRyb3Bkb3duLW1lbnUtYm9yZGVyLXdpZHRoOiB2YXIoLS1uZS1yZWYtYm9yZGVyLXdpZHRoLXNtYWxsLCAxcHgpO1xuICAtLW5lLWRyb3Bkb3duLW1lbnUtc2hhZG93LWVsZXZhdGVkOiAwcHggMHB4IDhweCB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS05MC0yMCwgIzE2MTcxODIwKTtcbn1cbmA7XG5cbmNvbnN0IGJhc2VEcm9wZG93bk1lbnUgPSBjc3NgXG4gIC5kcm9wZG93bi1tZW51IHtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogdmFyKC0tbmUtZHJvcGRvd24tbWVudS1wYWRkaW5nLXZlcnRpY2FsKVxuICAgICAgdmFyKC0tbmUtZHJvcGRvd24tbWVudS1wYWRkaW5nLWhvcml6b250YWwpO1xuICAgIGJvcmRlci13aWR0aDogdmFyKC0tbmUtZHJvcGRvd24tbWVudS1ib3JkZXItd2lkdGgpO1xuICAgIGJvcmRlci1zdHlsZTogc29saWQ7XG4gIH1cblxuICAuZHJvcGRvd24tbWVudS5lbGV2YXRlZCB7XG4gICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1uZS1kcm9wZG93bi1tZW51LWNvbG9yLWVsZXZhdGVkLWJvcmRlcik7XG4gICAgYm9yZGVyLXJhZGl1czogdmFyKC0tbmUtZHJvcGRvd24tbWVudS1ib3JkZXItcmFkaXVzLWVsZXZhdGVkKTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1kcm9wZG93bi1tZW51LWNvbG9yLWVsZXZhdGVkLWJhY2tncm91bmQpO1xuICAgIGJveC1zaGFkb3c6IDNweCAzcHggNXB4IHJnYigyMiAyMyAyNCAvIDEwJSk7XG4gIH1cblxuICAuZHJvcGRvd24tbWVudS5mbGF0IHtcbiAgICBib3JkZXItY29sb3I6IHZhcigtLW5lLWRyb3Bkb3duLW1lbnUtY29sb3ItZmxhdC1ib3JkZXIpO1xuICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLW5lLWRyb3Bkb3duLW1lbnUtYm9yZGVyLXJhZGl1cy1mbGF0LXRvcClcbiAgICAgIHZhcigtLW5lLWRyb3Bkb3duLW1lbnUtYm9yZGVyLXJhZGl1cy1mbGF0LXRvcClcbiAgICAgIHZhcigtLW5lLWRyb3Bkb3duLW1lbnUtYm9yZGVyLXJhZGl1cy1mbGF0LWJvdHRvbSlcbiAgICAgIHZhcigtLW5lLWRyb3Bkb3duLW1lbnUtYm9yZGVyLXJhZGl1cy1mbGF0LWJvdHRvbSk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmUtZHJvcGRvd24tbWVudS1jb2xvci1mbGF0LWJhY2tncm91bmQpO1xuICB9XG5cbiAgLmRyb3Bkb3duLW1lbnUgLmZpeGVkLWhlaWdodCB7XG4gICAgLyogU2hvd3MgNiByb3dzICovXG4gICAgbWF4LWhlaWdodDogY2FsYygxMCAqICgxZW0gKiAxLjIpKTtcbiAgICBvdmVyZmxvdy15OiBhdXRvO1xuICB9XG5cbiAgLmRyb3Bkb3duLW1lbnUtZm9vdGVyIHtcbiAgICBwYWRkaW5nOiAwIDE0cHg7XG4gIH1cblxuICAuZHJvcGRvd24tbWVudSA6OnNsb3R0ZWQobGkpIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgfVxuYDtcbmNvbnN0IHN0eWxlcyA9IFt0b2tlbnMsIGJhc2VEcm9wZG93bk1lbnUsIGNvbW1vblN0eWxlc107XG5cbmNvbnN0IGRyb3Bkb3duTWVudVZhcmlhbnRzQXJyYXkgPSBbJ2VsZXZhdGVkJywgJ2ZsYXQnXTtcbi8qKlxuICogQGRlc2NyaXB0aW9uIENvbnRyb2wgdGhhdCByZW5kZXJzIGEgZHJvcGRvd24gbWVudSB0aGF0IGNhbiBiZSB1c2VkIGJ5IGFuZCBjb25uZWN0ZWQgdG8gb3RoZXIgY29tcG9uZW50cyAoZm9yIGV4YW1wbGUgdGhlIHRvb2xiYXIgYnV0dG9uLCB0aGUgZHJvcGRvd24gZmllbGQpLlxuICpcbiAqIEBzbG90IGRlZmF1bHQgQSBsaXN0IG9mIGVsZW1lbnRzIHRvIGJlIGRpc3BsYXllZCBhcyBpdGVtcyBpbiB0aGUgZHJvcGRvd24gbWVudSBjYW4gYmUgaW5zZXJ0ZWQgaGVyZSAoaXQgaXMgc3VnZ2VzdGVkIHRvIHVzZSBhIGxpc3Qgb2YgJ25lLWRyb3Bkb3duLW1lbnUtaXRlbScgZWxlbWVudHMpXG4gKi9cbmxldCBOZURyb3Bkb3duTWVudSA9IGNsYXNzIE5lRHJvcGRvd25NZW51IGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSB0ZXh0IHRoYXQgd2lsbCBiZSByZWFkIGJ5IHRoZSBzY3JlZW4gcmVhZGVyXG4gICAgICovXG4gICAgdGhpcy5hcmlhTGFiZWwgPSAnJztcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHZhcmlhbnQgdG8gYmUgcmVuZGVyZWQgKGN1cnJlbnRseSB0aGUgb3B0aW9ucyBhcmUgJ2VsZXZhdGVkJyBvciAnZmxhdCcpXG4gICAgICovXG4gICAgdGhpcy52YXJpYW50ID0gJ2VsZXZhdGVkJztcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgaWYgdGhlIG1lbnUgc2hvdWxkIGJlIHRoZSBwcmUtZGVmaW5lZCBoZWlnaHQuXG4gICAgICovXG4gICAgdGhpcy5maXhlZEhlaWdodCA9IGZhbHNlO1xuICAgIHRoaXMuc2hvd0Zvb3RlckFjdGlvbnMgPSBmYWxzZTtcbiAgfVxuICAvLyBTdHlsZXNcbiAgc3RhdGljIGdldCBzdHlsZXMoKSB7XG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIGh0bWxgPGRpdlxuICAgICAgY2xhc3M9JHtjbGFzc01hcCh7XG4gICAgICAnZHJvcGRvd24tbWVudSc6IHRydWUsXG4gICAgICBlbGV2YXRlZDogdGhpcy52YXJpYW50ID09PSAnZWxldmF0ZWQnLFxuICAgICAgZmxhdDogdGhpcy52YXJpYW50ID09PSAnZmxhdCdcbiAgICB9KX1cbiAgICAgIGFyaWEtbGFiZWw9JHt0aGlzLmFyaWFMYWJlbCB8fCBub3RoaW5nfVxuICAgID5cbiAgICAgIDxkaXYgY2xhc3M9JHtjbGFzc01hcCh7XG4gICAgICAnZml4ZWQtaGVpZ2h0JzogdGhpcy5maXhlZEhlaWdodCA9PT0gdHJ1ZVxuICAgIH0pfT5cbiAgICAgICAgPHNsb3Q+PC9zbG90PlxuICAgICAgPC9kaXY+XG4gICAgICAke3RoaXMuc2hvd0Zvb3RlckFjdGlvbnMgPyBodG1sYDxkaXYgY2xhc3M9XCJkcm9wZG93bi1tZW51LWZvb3RlclwiPlxuICAgICAgICAgICAgPHNsb3QgbmFtZT1cImZvb3Rlci1pdGVtc1wiPjwvc2xvdD5cbiAgICAgICAgICA8L2Rpdj5gIDogJyd9XG4gICAgPC9kaXY+YDtcbiAgfVxufTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgYXR0cmlidXRlOiAnbmUtYXJpYS1sYWJlbCcsXG4gIHR5cGU6IFN0cmluZyxcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZURyb3Bkb3duTWVudS5wcm90b3R5cGUsIFwiYXJpYUxhYmVsXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVEcm9wZG93bk1lbnUucHJvdG90eXBlLCBcInZhcmlhbnRcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogQm9vbGVhbixcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZURyb3Bkb3duTWVudS5wcm90b3R5cGUsIFwiZml4ZWRIZWlnaHRcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogQm9vbGVhblxufSldLCBOZURyb3Bkb3duTWVudS5wcm90b3R5cGUsIFwic2hvd0Zvb3RlckFjdGlvbnNcIiwgdm9pZCAwKTtcbk5lRHJvcGRvd25NZW51ID0gX19kZWNvcmF0ZShbY3VzdG9tRWxlbWVudCgnbmUtZHJvcGRvd24tbWVudScpXSwgTmVEcm9wZG93bk1lbnUpO1xuXG5leHBvcnQgeyBOZURyb3Bkb3duTWVudSwgZHJvcGRvd25NZW51VmFyaWFudHNBcnJheSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZHJvcGRvd24tbWVudS5qcy5tYXBcbiIsImltcG9ydCB7IGMgYXMgY29tbW9uU3R5bGVzLCBfIGFzIF9fZGVjb3JhdGUgfSBmcm9tICcuL2Jhc2Uuc3R5bGVzLTExZDM5MTgxLmpzJztcbmltcG9ydCB7IGNzcywgTGl0RWxlbWVudCwgaHRtbCwgbm90aGluZyB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBzdGF0ZSwgcXVlcnlBc3NpZ25lZE5vZGVzLCBwcm9wZXJ0eSwgY3VzdG9tRWxlbWVudCB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IGNsYXNzTWFwIH0gZnJvbSAnbGl0L2RpcmVjdGl2ZXMvY2xhc3MtbWFwLmpzJztcbmltcG9ydCB7IGYgYXMgZmlyZSB9IGZyb20gJy4vZXZlbnRzLTExNzNmNTYyLmpzJztcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmNvbnN0IHRva2VucyA9IGNzc2BcbiAgKiB7XG4gIC0tbmUtZHJvcGRvd24tbWVudS1pdGVtLXBhZGRpbmctaG9yaXpvbnRhbDogdmFyKC0tbmUtcmVmLXNwYWNpbmctbWVkaXVtLCAxZW0pO1xuICAtLW5lLWRyb3Bkb3duLW1lbnUtaXRlbS1wYWRkaW5nLXZlcnRpY2FsOiB2YXIoLS1uZS1yZWYtc3BhY2luZy14LXNtYWxsLCAwLjVlbSk7XG4gIC0tbmUtZHJvcGRvd24tbWVudS1pdGVtLWZvbnQtZmFtaWx5OiB2YXIoLS1uZS1yZWYtZm9udC1mYW1pbHktb3Blbi1zYW5zLCBPcGVuIFNhbnMpO1xuICAtLW5lLWRyb3Bkb3duLW1lbnUtaXRlbS1jb2xvci1iYWNrZ3JvdW5kLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci13aGl0ZSwgI2ZmZmZmZik7XG4gIC0tbmUtZHJvcGRvd24tbWVudS1pdGVtLWNvbG9yLWJhY2tncm91bmQtaG92ZXI6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTA1LCAjRjBGN0ZGKTtcbiAgLS1uZS1kcm9wZG93bi1tZW51LWl0ZW0tY29sb3ItdGV4dC1kZWZhdWx0OiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS05MCwgIzE2MTcxOCk7XG4gIC0tbmUtZHJvcGRvd24tbWVudS1pdGVtLWNvbG9yLXRleHQtZGlzYWJsZWQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTUwLCAjNkQ3Mzc5KTtcbiAgLS1uZS1kcm9wZG93bi1tZW51LWl0ZW0tY29sb3Itc3VidGV4dC1kZWZhdWx0OiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS02MCwgIzU3NUM2MSk7XG4gIC0tbmUtZHJvcGRvd24tbWVudS1pdGVtLWNvbG9yLXN1YnRleHQtZGlzYWJsZWQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTUwLCAjNkQ3Mzc5KTtcbiAgLS1uZS1kcm9wZG93bi1tZW51LWl0ZW0tY29sb3ItYm9yZGVyLWZvY3VzOiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS0yMCwgI0EzRDFGRik7XG4gIC0tbmUtZHJvcGRvd24tbWVudS1pdGVtLWZvbnQtc2l6ZS1zdWJ0ZXh0OiB2YXIoLS1uZS1yZWYtZm9udC1zaXplLTAyLCAwLjc1ZW0pO1xuICAtLW5lLWRyb3Bkb3duLW1lbnUtaXRlbS1mb250LXNpemUtb3B0aW9uOiB2YXIoLS1uZS1yZWYtZm9udC1zaXplLTA0LCAwLjg3NWVtKTtcbiAgLS1uZS1kcm9wZG93bi1tZW51LWl0ZW0tYm9yZGVyLXdpZHRoLWZvY3VzOiB2YXIoLS1uZS1yZWYtYm9yZGVyLXdpZHRoLWxhcmdlLCA0cHgpO1xufVxuYDtcblxuY29uc3QgYmFzZURyb3Bkb3duTWVudUl0ZW0gPSBjc3NgXG4gIC5kcm9wZG93bi1tZW51LWl0ZW0ge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZmxvdzogY29sdW1uIG5vd3JhcDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gICAgYWxpZ24tY29udGVudDogZmxleC1zdGFydDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIHBhZGRpbmc6IGNhbGMoXG4gICAgICAgIHZhcigtLW5lLWRyb3Bkb3duLW1lbnUtaXRlbS1wYWRkaW5nLXZlcnRpY2FsKSAtXG4gICAgICAgICAgdmFyKC0tbmUtZHJvcGRvd24tbWVudS1pdGVtLWJvcmRlci13aWR0aC1mb2N1cylcbiAgICAgIClcbiAgICAgIGNhbGMoXG4gICAgICAgIHZhcigtLW5lLWRyb3Bkb3duLW1lbnUtaXRlbS1wYWRkaW5nLWhvcml6b250YWwpIC1cbiAgICAgICAgICB2YXIoLS1uZS1kcm9wZG93bi1tZW51LWl0ZW0tYm9yZGVyLXdpZHRoLWZvY3VzKVxuICAgICAgKTtcbiAgICBib3JkZXI6IHZhcigtLW5lLWRyb3Bkb3duLW1lbnUtaXRlbS1ib3JkZXItd2lkdGgtZm9jdXMpIHNvbGlkXG4gICAgICB2YXIoLS1uZS1kcm9wZG93bi1tZW51LWl0ZW0tY29sb3ItYmFja2dyb3VuZC1kZWZhdWx0KTtcbiAgICBvdXRsaW5lOiBub25lO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLWRyb3Bkb3duLW1lbnUtaXRlbS1jb2xvci1iYWNrZ3JvdW5kLWRlZmF1bHQpO1xuICAgIGZvbnQtZmFtaWx5OiB2YXIoLS1uZS1kcm9wZG93bi1tZW51LWl0ZW0tZm9udC1mYW1pbHkpO1xuICAgIGZvbnQtc2l6ZTogdmFyKC0tbmUtZHJvcGRvd24tbWVudS1pdGVtLWZvbnQtc2l6ZS1vcHRpb24pO1xuICAgIGNvbG9yOiB2YXIoLS1uZS1kcm9wZG93bi1tZW51LWl0ZW0tY29sb3ItdGV4dC1kZWZhdWx0KTtcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIH1cblxuICAubXVsdGktc2VsZWN0IHtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogYXV0bztcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IGF1dG8gYXV0bztcbiAgfVxuXG4gIC5tdWx0aS1zZWxlY3QgLmNoZWNrYm94IHtcbiAgICBncmlkLWFyZWE6IDEgLyAxIC8gMyAvIDI7IC8qIFNwYW4gMiByb3dzIHN0YXJ0aW5nIGZyb20gcm93IDEgKi9cbiAgfVxuXG4gIC5tdWx0aS1zZWxlY3QgLnRleHQtc3BhbiB7XG4gICAgZ3JpZC1hcmVhOiAxIC8gMiAvIDIgLyAzOyAvKiBTcGFuIDEgcm93IHN0YXJ0aW5nIGZyb20gY29sdW1uIDIgKi9cbiAgfVxuXG4gIC5tdWx0aS1zZWxlY3QgLnN1YnRleHQtc3BhbiB7XG4gICAgZ3JpZC1hcmVhOiAyIC8gMiAvIDMgLyAzOyAvKiBTcGFuIDEgcm93IHN0YXJ0aW5nIGZyb20gY29sdW1uIDIgKi9cbiAgfVxuXG4gIC5kcm9wZG93bi1tZW51LWl0ZW06aG92ZXIge1xuICAgIGJvcmRlci1jb2xvcjogdmFyKC0tbmUtZHJvcGRvd24tbWVudS1pdGVtLWNvbG9yLWJhY2tncm91bmQtaG92ZXIpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLWRyb3Bkb3duLW1lbnUtaXRlbS1jb2xvci1iYWNrZ3JvdW5kLWhvdmVyKTtcbiAgfVxuXG4gIC5kcm9wZG93bi1tZW51LWl0ZW06ZGlzYWJsZWQge1xuICAgIGNvbG9yOiB2YXIoLS1uZS1kcm9wZG93bi1tZW51LWl0ZW0tY29sb3ItdGV4dC1kaXNhYmxlZCk7XG4gIH1cblxuICAuZHJvcGRvd24tbWVudS1pdGVtOmZvY3VzLFxuICAuZHJvcGRvd24tbWVudS1pdGVtOmZvY3VzOmhvdmVyIHtcbiAgICBib3JkZXItY29sb3I6IHZhcigtLW5lLWRyb3Bkb3duLW1lbnUtaXRlbS1jb2xvci1ib3JkZXItZm9jdXMpO1xuICB9XG5cbiAgLmRyb3Bkb3duLW1lbnUtaXRlbSAuc3VidGV4dC1zcGFuIHtcbiAgICBmb250LXNpemU6IHZhcigtLW5lLWRyb3Bkb3duLW1lbnUtaXRlbS1mb250LXNpemUtc3VidGV4dCk7XG4gICAgY29sb3I6IHZhcigtLW5lLWRyb3Bkb3duLW1lbnUtaXRlbS1jb2xvci1zdWJ0ZXh0LWRlZmF1bHQpO1xuICB9XG5cbiAgLmRyb3Bkb3duLW1lbnUtaXRlbTpkaXNhYmxlZCAuc3VidGV4dC1zcGFuIHtcbiAgICBjb2xvcjogdmFyKC0tbmUtZHJvcGRvd24tbWVudS1pdGVtLWNvbG9yLXN1YnRleHQtZGlzYWJsZWQpO1xuICB9XG5gO1xuY29uc3Qgc3R5bGVzID0gW3Rva2VucywgYmFzZURyb3Bkb3duTWVudUl0ZW0sIGNvbW1vblN0eWxlc107XG5cbmxldCBOZURyb3Bkb3duTWVudUl0ZW0gPSBjbGFzcyBOZURyb3Bkb3duTWVudUl0ZW0gZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLl9oYXNTdWJUZXh0U2xvdCA9IGZhbHNlO1xuICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLmFyaWFMYWJlbCA9ICcnO1xuICAgIHRoaXMudGV4dCA9ICcnO1xuICAgIHRoaXMuY2hlY2tlZCA9IGZhbHNlO1xuICAgIHRoaXMuaXNNdWx0aVNlbGVjdCA9IGZhbHNlO1xuICAgIHRoaXMuX29uU2xvdENoYW5nZWQgPSAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5fc3ViVGV4dFNsb3QgJiYgdGhpcy5fc3ViVGV4dFNsb3QubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLl9oYXNTdWJUZXh0U2xvdCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9oYXNTdWJUZXh0U2xvdCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5fb25DbGljayA9ICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5kaXNhYmxlZCkge1xuICAgICAgICBmaXJlKHRoaXMsICduZS1jbGljaycsIHtcbiAgICAgICAgICBjb21wb3NlZDogdHJ1ZSxcbiAgICAgICAgICBidWJibGVzOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuX29uS2V5RG93biA9IGV2dCA9PiB7XG4gICAgICBzd2l0Y2ggKGV2dC5jb2RlKSB7XG4gICAgICAgIGNhc2UgJ1NwYWNlJzpcbiAgICAgICAgY2FzZSAnRW50ZXInOlxuICAgICAgICBjYXNlICdOdW1wYWRFbnRlcic6XG4gICAgICAgICAgdGhpcy5fb25DbGljaygpO1xuICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMucmVuZGVyTXVsdGlTZWxlY3QgPSAoKSA9PiBodG1sYDxkaXZcbiAgICBjbGFzcz1cImRyb3Bkb3duLW1lbnUtaXRlbVwiXG4gICAgdGFiaW5kZXg9XCIwXCJcbiAgICA/ZGlzYWJsZWQ9JHt0aGlzLmRpc2FibGVkfVxuICAgIEBrZXlkb3duPSR7dGhpcy5fb25LZXlEb3dufVxuICAgIEBjbGljaz0ke2UgPT4ge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuX29uQ2xpY2soKTtcbiAgICB9fVxuICAgIGFyaWEtbGFiZWw9JHt0aGlzLmFyaWFMYWJlbCB8fCBub3RoaW5nfVxuICA+XG4gICAgPHNsb3QgbmFtZT1cIm11bHRpLXNlbGVjdFwiPjwvc2xvdD5cbiAgPC9kaXY+YDtcbiAgICB0aGlzLnJlbmRlclNpbmdsZVNlbGVjdCA9ICgpID0+IHtcbiAgICAgIGxldCBoYXNTdWJ0ZXh0UHJvcCA9IGZhbHNlO1xuICAgICAgaWYgKHRoaXMuc3ViVGV4dCAmJiB0aGlzLnN1YlRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICBoYXNTdWJ0ZXh0UHJvcCA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gaHRtbGA8YnV0dG9uXG4gICAgICBjbGFzcz1cImRyb3Bkb3duLW1lbnUtaXRlbVwiXG4gICAgICA/ZGlzYWJsZWQ9JHt0aGlzLmRpc2FibGVkfVxuICAgICAgQGNsaWNrPSR7ZSA9PiB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5fb25DbGljaygpO1xuICAgICAgfX1cbiAgICAgIGFyaWEtbGFiZWw9JHt0aGlzLmFyaWFMYWJlbCB8fCBub3RoaW5nfVxuICAgID5cbiAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1zcGFuXCI+PHNsb3Q+JHt0aGlzLnRleHR9PC9zbG90Pjwvc3Bhbj5cbiAgICAgIDxzcGFuXG4gICAgICAgIGNsYXNzPSR7Y2xhc3NNYXAoe1xuICAgICAgICAnc3VidGV4dC1zcGFuJzogdHJ1ZSxcbiAgICAgICAgaGlkZGVuOiAhdGhpcy5faGFzU3ViVGV4dFNsb3QgJiYgIWhhc1N1YnRleHRQcm9wXG4gICAgICB9KX1cbiAgICAgICAgPjxzbG90IG5hbWU9XCJzdWItdGV4dFwiIEBzbG90Y2hhbmdlPSR7dGhpcy5fb25TbG90Q2hhbmdlZH1cbiAgICAgICAgICA+JHt0aGlzLnN1YlRleHR9PC9zbG90XG4gICAgICAgID48L3NwYW5cbiAgICAgID5cbiAgICA8L2J1dHRvbj5gO1xuICAgIH07XG4gIH1cbiAgc3RhdGljIGdldCBzdHlsZXMoKSB7XG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIGh0bWxgJHt0aGlzLmlzTXVsdGlTZWxlY3QgPyB0aGlzLnJlbmRlck11bHRpU2VsZWN0KCkgOiB0aGlzLnJlbmRlclNpbmdsZVNlbGVjdCgpfWA7XG4gIH1cbn07XG5fX2RlY29yYXRlKFtzdGF0ZSgpXSwgTmVEcm9wZG93bk1lbnVJdGVtLnByb3RvdHlwZSwgXCJfaGFzU3ViVGV4dFNsb3RcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3F1ZXJ5QXNzaWduZWROb2Rlcyh7XG4gIHNsb3Q6ICdzdWItdGV4dCcsXG4gIGZsYXR0ZW46IHRydWVcbn0pXSwgTmVEcm9wZG93bk1lbnVJdGVtLnByb3RvdHlwZSwgXCJfc3ViVGV4dFNsb3RcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogQm9vbGVhbixcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZURyb3Bkb3duTWVudUl0ZW0ucHJvdG90eXBlLCBcImRpc2FibGVkXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIGF0dHJpYnV0ZTogJ25lLWFyaWEtbGFiZWwnLFxuICB0eXBlOiBTdHJpbmcsXG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVEcm9wZG93bk1lbnVJdGVtLnByb3RvdHlwZSwgXCJhcmlhTGFiZWxcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogU3RyaW5nLFxuICBhdHRyaWJ1dGU6ICd0ZXh0J1xufSldLCBOZURyb3Bkb3duTWVudUl0ZW0ucHJvdG90eXBlLCBcInRleHRcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogU3RyaW5nLFxuICBhdHRyaWJ1dGU6ICdzdWItdGV4dCcsXG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVEcm9wZG93bk1lbnVJdGVtLnByb3RvdHlwZSwgXCJzdWJUZXh0XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IEJvb2xlYW5cbn0pXSwgTmVEcm9wZG93bk1lbnVJdGVtLnByb3RvdHlwZSwgXCJjaGVja2VkXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IEJvb2xlYW5cbn0pXSwgTmVEcm9wZG93bk1lbnVJdGVtLnByb3RvdHlwZSwgXCJpc011bHRpU2VsZWN0XCIsIHZvaWQgMCk7XG5OZURyb3Bkb3duTWVudUl0ZW0gPSBfX2RlY29yYXRlKFtjdXN0b21FbGVtZW50KCduZS1kcm9wZG93bi1tZW51LWl0ZW0nKV0sIE5lRHJvcGRvd25NZW51SXRlbSk7XG5cbmV4cG9ydCB7IE5lRHJvcGRvd25NZW51SXRlbSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZHJvcGRvd24tbWVudS1pdGVtLmpzLm1hcFxuIiwiaW1wb3J0e25vdGhpbmcgYXMgaX1mcm9tXCIuLi9saXQtaHRtbC5qc1wiO2ltcG9ydHtBc3luY0RpcmVjdGl2ZSBhcyB0fWZyb21cIi4uL2FzeW5jLWRpcmVjdGl2ZS5qc1wiO2ltcG9ydHtkaXJlY3RpdmUgYXMgc31mcm9tXCIuLi9kaXJlY3RpdmUuanNcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL2NvbnN0IGU9KCk9Pm5ldyBvO2NsYXNzIG97fWNvbnN0IGg9bmV3IFdlYWtNYXAsbj1zKGNsYXNzIGV4dGVuZHMgdHtyZW5kZXIodCl7cmV0dXJuIGl9dXBkYXRlKHQsW3NdKXt2YXIgZTtjb25zdCBvPXMhPT10aGlzLkc7cmV0dXJuIG8mJnZvaWQgMCE9PXRoaXMuRyYmdGhpcy5vdCh2b2lkIDApLChvfHx0aGlzLnJ0IT09dGhpcy5sdCkmJih0aGlzLkc9cyx0aGlzLmN0PW51bGw9PT0oZT10Lm9wdGlvbnMpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLmhvc3QsdGhpcy5vdCh0aGlzLmx0PXQuZWxlbWVudCkpLGl9b3QoaSl7dmFyIHQ7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5HKXtjb25zdCBzPW51bGwhPT0odD10aGlzLmN0KSYmdm9pZCAwIT09dD90Omdsb2JhbFRoaXM7bGV0IGU9aC5nZXQocyk7dm9pZCAwPT09ZSYmKGU9bmV3IFdlYWtNYXAsaC5zZXQocyxlKSksdm9pZCAwIT09ZS5nZXQodGhpcy5HKSYmdGhpcy5HLmNhbGwodGhpcy5jdCx2b2lkIDApLGUuc2V0KHRoaXMuRyxpKSx2b2lkIDAhPT1pJiZ0aGlzLkcuY2FsbCh0aGlzLmN0LGkpfWVsc2UgdGhpcy5HLnZhbHVlPWl9Z2V0IHJ0KCl7dmFyIGksdCxzO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuRz9udWxsPT09KHQ9aC5nZXQobnVsbCE9PShpPXRoaXMuY3QpJiZ2b2lkIDAhPT1pP2k6Z2xvYmFsVGhpcykpfHx2b2lkIDA9PT10P3ZvaWQgMDp0LmdldCh0aGlzLkcpOm51bGw9PT0ocz10aGlzLkcpfHx2b2lkIDA9PT1zP3ZvaWQgMDpzLnZhbHVlfWRpc2Nvbm5lY3RlZCgpe3RoaXMucnQ9PT10aGlzLmx0JiZ0aGlzLm90KHZvaWQgMCl9cmVjb25uZWN0ZWQoKXt0aGlzLm90KHRoaXMubHQpfX0pO2V4cG9ydHtlIGFzIGNyZWF0ZVJlZixuIGFzIHJlZn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWYuanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmZ1bmN0aW9uIG4obixvLHIpe3JldHVybiBuP28oKTpudWxsPT1yP3ZvaWQgMDpyKCl9ZXhwb3J0e24gYXMgd2hlbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD13aGVuLmpzLm1hcFxuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGl0JztcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmNvbnN0IHRva2VucyA9IGNzc2BcbiAgKiB7XG4gICAgLS1uZS1pY29uLXNpemUtZGVmYXVsdDogMWVtO1xuICB9XG5gO1xuXG5leHBvcnQgeyB0b2tlbnMgYXMgdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWNvbi50b2tlbnMtZTRhZmZjNDkuanMubWFwXG4iLCJpbXBvcnQgeyBjIGFzIGNvbW1vblN0eWxlcywgXyBhcyBfX2RlY29yYXRlIH0gZnJvbSAnLi9iYXNlLnN0eWxlcy0xMWQzOTE4MS5qcyc7XG5pbXBvcnQgeyBTY29wZWRFbGVtZW50c01peGluIH0gZnJvbSAnQG9wZW4td2Mvc2NvcGVkLWVsZW1lbnRzJztcbmltcG9ydCB7IGNzcywgTGl0RWxlbWVudCwgaHRtbCwgbm90aGluZyB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBwcm9wZXJ0eSwgY3VzdG9tRWxlbWVudCB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IGNsYXNzTWFwIH0gZnJvbSAnbGl0L2RpcmVjdGl2ZXMvY2xhc3MtbWFwLmpzJztcbmltcG9ydCB7IE5lSWNvbkJ1dHRvbiB9IGZyb20gJy4vaWNvbi1idXR0b24uanMnO1xuaW1wb3J0IHsgSSBhcyBJY29ucyB9IGZyb20gJy4vaWNvblR5cGUtODMyNmVkZGIuanMnO1xuaW1wb3J0IHsgZiBhcyBmaXJlIH0gZnJvbSAnLi9ldmVudHMtMTE3M2Y1NjIuanMnO1xuaW1wb3J0ICcuL2ljb24uYmFzZS03YTkxOWRiMi5qcyc7XG5pbXBvcnQgJ2xpdC9kaXJlY3RpdmVzL3N0eWxlLW1hcC5qcyc7XG5pbXBvcnQgJ2xpdC9kaXJlY3RpdmVzL3VudGlsLmpzJztcbmltcG9ydCAnLi9idXR0b24udG9rZW5zLWU3OWM4YmJmLmpzJztcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmNvbnN0IHRva2VucyA9IGNzc2BcbiAgKiB7XG4gIC0tbmUtcGlsbC1jb2xvci10ZXh0LWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTkwLCAjMTYxNzE4KTtcbiAgLS1uZS1waWxsLWNvbG9yLXRleHQtZGlzYWJsZWQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTkwLCAjMTYxNzE4KTtcbiAgLS1uZS1waWxsLWNvbG9yLWJhY2tncm91bmQtZGVmYXVsdDogdmFyKC0tbmUtcmVmLWNvbG9yLXdoaXRlLCAjZmZmZmZmKTtcbiAgLS1uZS1waWxsLWNvbG9yLWJhY2tncm91bmQtaG92ZXI6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTA1LCAjRjBGN0ZGKTtcbiAgLS1uZS1waWxsLWNvbG9yLWJhY2tncm91bmQtZGlzYWJsZWQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTMwLCAjQTdBQkFGKTtcbiAgLS1uZS1waWxsLWNvbG9yLWJvcmRlci1kaXNhYmxlZDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktNTAsICM2RDczNzkpO1xuICAtLW5lLXBpbGwtY29sb3ItYm9yZGVyLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTEwLCAjRTJFM0U0KTtcbiAgLS1uZS1waWxsLWNvbG9yLWJvcmRlci1ob3ZlcjogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktMTAsICNFMkUzRTQpO1xuICAtLW5lLXBpbGwtYm9yZGVyLXJhZGl1czogdmFyKC0tbmUtcmVmLWJvcmRlci1yYWRpdXMtbWVkaXVtLCAuMjVlbSk7XG4gIC0tbmUtcGlsbC1ib3JkZXItd2lkdGg6IHZhcigtLW5lLXJlZi1ib3JkZXItd2lkdGgtc21hbGwsIDFweCk7XG4gIC0tbmUtcGlsbC1zaXppbmctaGVpZ2h0OiB2YXIoLS1uZS1yZWYtc2l6aW5nLTA2LCAxLjVlbSk7XG4gIC0tbmUtcGlsbC1wYWRkaW5nLWhvcml6b250YWw6IHZhcigtLW5lLXJlZi1zcGFjaW5nLXgtc21hbGwsIDAuNWVtKTtcbiAgLS1uZS1waWxsLWdhcDogdmFyKC0tbmUtcmVmLXNwYWNpbmcteHgtc21hbGwsIDAuMjVlbSk7XG4gIC0tbmUtcGlsbC1mb250LWZhbWlseTogdmFyKC0tbmUtcmVmLWZvbnQtZmFtaWx5LW9wZW4tc2FucywgT3BlbiBTYW5zKTtcbiAgLS1uZS1waWxsLWZvbnQtc2l6ZTogdmFyKC0tbmUtcmVmLWZvbnQtc2l6ZS0wNCwgMC44NzVlbSk7XG4gIC0tbmUtcGlsbC1saW5lLWhlaWdodDogdmFyKC0tbmUtcmVmLWxpbmUtaGVpZ2h0LWNvbmRlbnNlZCwgMS4yNWVtKTtcbiAgLS1uZS1waWxsLWZvbnQtd2VpZ2h0OiB2YXIoLS1uZS1yZWYtZm9udC13ZWlnaHQtcmVndWxhciwgUmVndWxhcik7XG59XG5gO1xuXG5jb25zdCBiYXNlUGlsbCA9IGNzc2BcbiAgOmhvc3Qge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1mbG93OiByb3cgbm93cmFwO1xuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbiAgICBhbGlnbi1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICB9XG5cbiAgLnBpbGwge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1mbG93OiByb3cgbm93cmFwO1xuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBnYXA6IHZhcigtLW5lLXBpbGwtcGFkZGluZy1ob3Jpem9udGFsKTtcbiAgICBtaW4taGVpZ2h0OiB2YXIoLS1uZS1waWxsLXNpemluZy1oZWlnaHQpO1xuICAgIG1heC13aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nOiAwIHZhcigtLW5lLXBpbGwtcGFkZGluZy1ob3Jpem9udGFsKSAwXG4gICAgICB2YXIoLS1uZS1waWxsLXBhZGRpbmctaG9yaXpvbnRhbCk7XG4gICAgYm9yZGVyOiB2YXIoLS1uZS1waWxsLWJvcmRlci13aWR0aCkgc29saWRcbiAgICAgIHZhcigtLW5lLXBpbGwtY29sb3ItYm9yZGVyLWRlZmF1bHQpO1xuICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLW5lLXBpbGwtYm9yZGVyLXJhZGl1cyk7XG4gICAgYm94LXNpemluZzogY29udGVudC1ib3g7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmUtcGlsbC1jb2xvci1iYWNrZ3JvdW5kLWRlZmF1bHQpO1xuICB9XG5cbiAgLnBpbGwgLnRleHQge1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgb3ZlcmZsb3ctd3JhcDogYnJlYWstd29yZDtcbiAgICBmb250LWZhbWlseTogdmFyKC0tbmUtcGlsbC1mb250LWZhbWlseSk7XG4gICAgZm9udC1zaXplOiB2YXIoLS1uZS1waWxsLWZvbnQtc2l6ZSk7XG4gICAgZm9udC13ZWlnaHQ6IHZhcigtLW5lLXBpbGwtZm9udC13ZWlnaHQpO1xuICAgIGxpbmUtaGVpZ2h0OiB2YXIoLS1uZS1waWxsLWxpbmUtaGVpZ2h0KTtcbiAgICBjb2xvcjogdmFyKC0tbmUtcGlsbC1jb2xvci10ZXh0LWRlZmF1bHQpO1xuICB9XG5cbiAgLnBpbGwuY2xvc2FibGUge1xuICAgIHBhZGRpbmctcmlnaHQ6IDA7XG4gIH1cblxuICAucGlsbC5kaXNhYmxlZCxcbiAgLnBpbGwuY2xvc2FibGUuZGlzYWJsZWQge1xuICAgIHBhZGRpbmctcmlnaHQ6IHZhcigtLW5lLXBpbGwtcGFkZGluZy1ob3Jpem9udGFsKTtcbiAgICBib3JkZXItY29sb3I6IHZhcigtLW5lLXBpbGwtY29sb3ItYm9yZGVyLWRpc2FibGVkKTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1waWxsLWNvbG9yLWJhY2tncm91bmQtZGlzYWJsZWQpO1xuICAgIGN1cnNvcjogZGVmYXVsdDtcbiAgfVxuYDtcbmNvbnN0IHN0eWxlcyA9IFt0b2tlbnMsIGNvbW1vblN0eWxlcywgYmFzZVBpbGxdO1xuXG4vKipcbiAqIEB0YWcgbmUtcGlsbFxuICogQHRhZ25hbWUgbmUtcGlsbFxuICpcbiAqIEBkZXNjcmlwdGlvbiBDb250cm9sIHRoYXQgcmVuZGVycyBhIHBpbGwgY29udGFpbmluZyB0ZXh0IGFuZCBhbiBvcHRpb25hbCBjbG9zZSBidXR0b24uXG4gKlxuICogQHNsb3QgZGVmYXVsdCBUaGlzIGlzIHdoZXJlIHRoZSB0ZXh0IG9mIHRoZSBwaWxsIHdpbGwgYmUgaW5zZXJ0ZWQuXG4gKlxuICogQGV2ZW50IG5lLWNsb3NlIFJhaXNlZCB3aGVuIHRoZSBpbnRlcm5hbCBjbG9zZSBidXR0b24gaXMgY2xpY2tlZC5cbiAqL1xubGV0IE5lUGlsbCA9IGNsYXNzIE5lUGlsbCBleHRlbmRzIFNjb3BlZEVsZW1lbnRzTWl4aW4oTGl0RWxlbWVudCkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIC8qKiBTcGVjaWZpZXMgdGhhdCB0aGUgcGlsbCBpcyBjbG9zYWJsZSAqL1xuICAgIHRoaXMuY2xvc2FibGUgPSBmYWxzZTtcbiAgICAvKiogU3BlY2lmaWVzIHRoYXQgdGhlIHBpbGwgc2hvdWxkIGJlIGRpc2FibGVkICovXG4gICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIC8qKiBTcGVjaWZpZXMgdGhlIHRleHQgdGhhdCB3aWxsIGJlIHJlYWQgYnkgdGhlIHNjcmVlbiByZWFkZXIgKi9cbiAgICB0aGlzLmFyaWFMYWJlbCA9ICcnO1xuICAgIHRoaXMuX29uQ2xvc2UgPSAoKSA9PiB7XG4gICAgICBmaXJlKHRoaXMsICduZS1jbG9zZScsIHtcbiAgICAgICAgY29tcG9zZWQ6IHRydWUsXG4gICAgICAgIGJ1YmJsZXM6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cbiAgc3RhdGljIGdldCBzY29wZWRFbGVtZW50cygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgJ25lLWljb24tYnV0dG9uJzogTmVJY29uQnV0dG9uXG4gICAgfTtcbiAgfVxuICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gaHRtbGA8ZGl2XG4gICAgICBpZD0ke3RoaXMuaWR9XG4gICAgICByb2xlPVwiZ3JvdXBcIlxuICAgICAgYXJpYS1sYWJlbD0ke3RoaXMuYXJpYUxhYmVsIHx8IG5vdGhpbmd9XG4gICAgICBjbGFzcz0ke2NsYXNzTWFwKHtcbiAgICAgIHBpbGw6IHRydWUsXG4gICAgICBkaXNhYmxlZDogdGhpcy5kaXNhYmxlZCxcbiAgICAgIGNsb3NhYmxlOiB0aGlzLmNsb3NhYmxlXG4gICAgfSl9XG4gICAgPlxuICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0XCI+PHNsb3Q+PC9zbG90Pjwvc3Bhbj4ke3RoaXMuY2xvc2FibGUgJiYgIXRoaXMuZGlzYWJsZWQgPyBodG1sYDxuZS1pY29uLWJ1dHRvblxuICAgICAgICAgICAgLnZhcmlhbnQ9XCJkYXJrXCJcbiAgICAgICAgICAgIC5hcmlhTGFiZWw9XCJjbG9zZS1idXR0b25cIlxuICAgICAgICAgICAgbmUtYXJpYS1sYWJlbD0ke3RoaXMuYXJpYUxhYmVsfVxuICAgICAgICAgICAgLmljb25UeXBlPSR7SWNvbnMuY2xvc2VEZWZhdWx0fVxuICAgICAgICAgICAgQG5lLWNsaWNrPVwiJHt0aGlzLl9vbkNsb3NlfVwiXG4gICAgICAgICAgPjwvbmUtaWNvbi1idXR0b24+YCA6ICcnfVxuICAgIDwvZGl2PmA7XG4gIH1cbn07XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IEJvb2xlYW4sXG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVQaWxsLnByb3RvdHlwZSwgXCJjbG9zYWJsZVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBCb29sZWFuLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIE5lUGlsbC5wcm90b3R5cGUsIFwiZGlzYWJsZWRcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgYXR0cmlidXRlOiAnbmUtYXJpYS1sYWJlbCcsXG4gIHR5cGU6IFN0cmluZyxcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZVBpbGwucHJvdG90eXBlLCBcImFyaWFMYWJlbFwiLCB2b2lkIDApO1xuTmVQaWxsID0gX19kZWNvcmF0ZShbY3VzdG9tRWxlbWVudCgnbmUtcGlsbCcpXSwgTmVQaWxsKTtcblxuZXhwb3J0IHsgTmVQaWxsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waWxsLmpzLm1hcFxuIiwiaW1wb3J0IHsgYyBhcyBjb21tb25TdHlsZXMsIF8gYXMgX19kZWNvcmF0ZSB9IGZyb20gJy4vYmFzZS5zdHlsZXMtMTFkMzkxODEuanMnO1xuaW1wb3J0IHsgY3NzLCBodG1sLCBub3RoaW5nIH0gZnJvbSAnbGl0JztcbmltcG9ydCB7IHN0YXRlLCBwcm9wZXJ0eSwgY3VzdG9tRWxlbWVudCB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IGNsYXNzTWFwIH0gZnJvbSAnbGl0L2RpcmVjdGl2ZXMvY2xhc3MtbWFwLmpzJztcbmltcG9ydCB7IGlmRGVmaW5lZCB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL2lmLWRlZmluZWQuanMnO1xuaW1wb3J0IHsgY3JlYXRlUmVmLCByZWYgfSBmcm9tICdsaXQvZGlyZWN0aXZlcy9yZWYuanMnO1xuaW1wb3J0IHsgd2hlbiB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL3doZW4uanMnO1xuaW1wb3J0IHsgZiBhcyBmaXJlIH0gZnJvbSAnLi9ldmVudHMtMTE3M2Y1NjIuanMnO1xuaW1wb3J0IHsgTmVEcm9wZG93bk1lbnUgfSBmcm9tICcuL2Ryb3Bkb3duLW1lbnUuanMnO1xuaW1wb3J0IHsgTmVEcm9wZG93bk1lbnVJdGVtIH0gZnJvbSAnLi9kcm9wZG93bi1tZW51LWl0ZW0uanMnO1xuaW1wb3J0IHsgdCBhcyB0b2tlbnMkMSwgdiBhcyB2YWxpZGF0aW9uTGF5b3V0U3R5bGVzLCBhIGFzIHZhbGlkYXRpb25TdHlsZXMsIFYgYXMgVmFsaWRhdGlvbkJhc2VDb21wb25lbnQsIGIgYXMgVmFsaWRhdGlvblR5cGUgfSBmcm9tICcuL3ZhbGlkYXRpb24udG9rZW5zLWRiODZlY2E5LmpzJztcbmltcG9ydCB7IHQgYXMgdG9rZW5zJDIgfSBmcm9tICcuL2ljb24udG9rZW5zLWU0YWZmYzQ5LmpzJztcbmltcG9ydCB7IE5lSWNvbiB9IGZyb20gJy4vaWNvbi5qcyc7XG5pbXBvcnQgeyBJIGFzIEljb25zIH0gZnJvbSAnLi9pY29uVHlwZS04MzI2ZWRkYi5qcyc7XG5pbXBvcnQgeyBOZVBpbGwgfSBmcm9tICcuL3BpbGwuanMnO1xuaW1wb3J0ICdAb3Blbi13Yy9zY29wZWQtZWxlbWVudHMnO1xuaW1wb3J0ICcuL2ljb24uYmFzZS03YTkxOWRiMi5qcyc7XG5pbXBvcnQgJ2xpdC9kaXJlY3RpdmVzL3N0eWxlLW1hcC5qcyc7XG5pbXBvcnQgJ2xpdC9kaXJlY3RpdmVzL3VudGlsLmpzJztcbmltcG9ydCAnLi9pY29uLWJ1dHRvbi5qcyc7XG5pbXBvcnQgJy4vYnV0dG9uLnRva2Vucy1lNzljOGJiZi5qcyc7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5jb25zdCB0b2tlbnMgPSBjc3NgXG4gICoge1xuICAtLW5lLWRyb3Bkb3duLWZpZWxkLXNpemluZy1pY29uOiB2YXIoLS1uZS1yZWYtc2l6aW5nLTA0LCAxZW0pO1xuICAtLW5lLWRyb3Bkb3duLWZpZWxkLWdhcDogdmFyKC0tbmUtcmVmLXNwYWNpbmcteHgtc21hbGwsIDAuMjVlbSk7XG4gIC0tbmUtZHJvcGRvd24tZmllbGQtcGFkZGluZy1ob3Jpem9udGFsOiB2YXIoLS1uZS1yZWYtc3BhY2luZy14LXNtYWxsLCAwLjVlbSk7XG4gIC0tbmUtZHJvcGRvd24tZmllbGQtcGFkZGluZy12ZXJ0aWNhbDogdmFyKC0tbmUtcmVmLXNwYWNpbmcteC1zbWFsbCwgMC41ZW0pO1xuICAtLW5lLWRyb3Bkb3duLWZpZWxkLWNvbnRlbnQtZ2FwOiB2YXIoLS1uZS1yZWYtc3BhY2luZy14LXNtYWxsLCAwLjVlbSk7XG4gIC0tbmUtZHJvcGRvd24tZmllbGQtY29sb3ItYmFja2dyb3VuZC1kZWZhdWx0OiB2YXIoLS1uZS1yZWYtY29sb3Itd2hpdGUsICNmZmZmZmYpO1xuICAtLW5lLWRyb3Bkb3duLWZpZWxkLWNvbG9yLWJhY2tncm91bmQtYWN0aXZlOiB2YXIoLS1uZS1yZWYtY29sb3Itd2hpdGUsICNmZmZmZmYpO1xuICAtLW5lLWRyb3Bkb3duLWZpZWxkLWNvbG9yLWJhY2tncm91bmQtZm9jdXM6IHZhcigtLW5lLXJlZi1jb2xvci13aGl0ZSwgI2ZmZmZmZik7XG4gIC0tbmUtZHJvcGRvd24tZmllbGQtY29sb3ItYmFja2dyb3VuZC1pbmFjdGl2ZTogdmFyKC0tbmUtcmVmLWNvbG9yLXdoaXRlLCAjZmZmZmZmKTtcbiAgLS1uZS1kcm9wZG93bi1maWVsZC1jb2xvci1iYWNrZ3JvdW5kLWRpc2FibGVkOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS0zMCwgI0E3QUJBRik7XG4gIC0tbmUtZHJvcGRvd24tZmllbGQtY29sb3ItYmFja2dyb3VuZC13YXJuaW5nOiB2YXIoLS1uZS1yZWYtY29sb3Itd2hpdGUsICNmZmZmZmYpO1xuICAtLW5lLWRyb3Bkb3duLWZpZWxkLWNvbG9yLWJhY2tncm91bmQtZXJyb3I6IHZhcigtLW5lLXJlZi1jb2xvci13aGl0ZSwgI2ZmZmZmZik7XG4gIC0tbmUtZHJvcGRvd24tZmllbGQtY29sb3ItYm9yZGVyLWFjdGl2ZTogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtNjAsICMwMDZCRDYpO1xuICAtLW5lLWRyb3Bkb3duLWZpZWxkLWNvbG9yLWJvcmRlci1pbmFjdGl2ZTogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXk0MCwgIzg5OEY5NCk7XG4gIC0tbmUtZHJvcGRvd24tZmllbGQtY29sb3ItYm9yZGVyLWZvY3VzOiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS0yMCwgI0EzRDFGRik7XG4gIC0tbmUtZHJvcGRvd24tZmllbGQtY29sb3ItYm9yZGVyLWRpc2FibGVkOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS0zMCwgI0E3QUJBRik7XG4gIC0tbmUtZHJvcGRvd24tZmllbGQtY29sb3ItYm9yZGVyLXdhcm5pbmc6IHZhcigtLW5lLXJlZi1jb2xvci15ZWxsb3ctNTAsICNGRkNGMUEpO1xuICAtLW5lLWRyb3Bkb3duLWZpZWxkLWNvbG9yLWJvcmRlci1lcnJvcjogdmFyKC0tbmUtcmVmLWNvbG9yLXJlZC01MCwgI0U2MDAwMCk7XG4gIC0tbmUtZHJvcGRvd24tZmllbGQtY29sb3ItaWNvbi1hY3RpdmU6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTkwLCAjMTYxNzE4KTtcbiAgLS1uZS1kcm9wZG93bi1maWVsZC1jb2xvci1pY29uLWRpc2FibGVkOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS05MCwgIzE2MTcxOCk7XG4gIC0tbmUtZHJvcGRvd24tZmllbGQtY29sb3ItdGV4dC1wbGFjZWhvbGRlcjogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktNTAsICM2RDczNzkpO1xuICAtLW5lLWRyb3Bkb3duLWZpZWxkLWNvbG9yLXRleHQtZGVmYXVsdDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktOTAsICMxNjE3MTgpO1xuICAtLW5lLWRyb3Bkb3duLWZpZWxkLWNvbG9yLXRleHQtZGlzYWJsZWQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTkwLCAjMTYxNzE4KTtcbiAgLS1uZS1kcm9wZG93bi1maWVsZC1ib3JkZXItcmFkaXVzLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1ib3JkZXItcmFkaXVzLW1lZGl1bSwgLjI1ZW0pO1xuICAtLW5lLWRyb3Bkb3duLWZpZWxkLWJvcmRlci1yYWRpdXMtd2l0aC1oZWxwLW1lc3NhZ2UtdG9wOiB2YXIoLS1uZS1yZWYtYm9yZGVyLXJhZGl1cy1tZWRpdW0sIC4yNWVtKTtcbiAgLS1uZS1kcm9wZG93bi1maWVsZC1ib3JkZXItcmFkaXVzLXdpdGgtaGVscC1tZXNzYWdlLWJvdHRvbTogdmFyKC0tbmUtcmVmLWJvcmRlci1yYWRpdXMtbm9uZSwgMCk7XG4gIC0tbmUtZHJvcGRvd24tZmllbGQtYm9yZGVyLXJhZGl1cy1hY3RpdmUtdG9wOiB2YXIoLS1uZS1yZWYtYm9yZGVyLXJhZGl1cy1tZWRpdW0sIC4yNWVtKTtcbiAgLS1uZS1kcm9wZG93bi1maWVsZC1ib3JkZXItcmFkaXVzLWFjdGl2ZS1ib3R0b206IHZhcigtLW5lLXJlZi1ib3JkZXItcmFkaXVzLW5vbmUsIDApO1xuICAtLW5lLWRyb3Bkb3duLWZpZWxkLWJvcmRlci13aWR0aC1kZWZhdWx0OiB2YXIoLS1uZS1yZWYtYm9yZGVyLXdpZHRoLXNtYWxsLCAxcHgpO1xuICAtLW5lLWRyb3Bkb3duLWZpZWxkLWJvcmRlci13aWR0aC1mb2N1czogdmFyKC0tbmUtcmVmLWJvcmRlci13aWR0aC1sYXJnZSwgNHB4KTtcbiAgLS1uZS1kcm9wZG93bi1maWVsZC1mb250LWZhbWlseTogdmFyKC0tbmUtcmVmLWZvbnQtZmFtaWx5LW9wZW4tc2FucywgT3BlbiBTYW5zKTtcbiAgLS1uZS1kcm9wZG93bi1maWVsZC1mb250LXNpemU6IHZhcigtLW5lLXJlZi1mb250LXNpemUtMDQsIDAuODc1ZW0pO1xufVxuYDtcblxuY29uc3QgYmFzZSA9IGNzc2BcbiAgLmNvbnRhaW5lciB7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgcGFkZGluZzogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgfVxuXG4gIC53cmFwcGVyIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgfVxuXG4gIC5tdWx0aS1zZWxlY3QtYnV0dG9uLFxuICBpbnB1dCB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nOiB2YXIoLS1uZS1kcm9wZG93bi1maWVsZC1wYWRkaW5nLXZlcnRpY2FsKVxuICAgICAgdmFyKC0tbmUtZHJvcGRvd24tZmllbGQtcGFkZGluZy1ob3Jpem9udGFsKVxuICAgICAgdmFyKC0tbmUtZHJvcGRvd24tZmllbGQtcGFkZGluZy12ZXJ0aWNhbClcbiAgICAgIHZhcigtLW5lLWRyb3Bkb3duLWZpZWxkLXBhZGRpbmctaG9yaXpvbnRhbCk7XG4gICAgZ2FwOiB2YXIoLS1uZS1kcm9wZG93bi1maWVsZC1jb250ZW50LWdhcCk7XG4gICAgYm9yZGVyOiB2YXIoLS1uZS1kcm9wZG93bi1maWVsZC1ib3JkZXItd2lkdGgtZGVmYXVsdCkgc29saWRcbiAgICAgIHZhcigtLW5lLWRyb3Bkb3duLWZpZWxkLWNvbG9yLWJvcmRlci1pbmFjdGl2ZSk7XG4gICAgYm9yZGVyLXJhZGl1czogdmFyKC0tbmUtZHJvcGRvd24tZmllbGQtYm9yZGVyLXJhZGl1cy1kZWZhdWx0KTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1kcm9wZG93bi1maWVsZC1jb2xvci1iYWNrZ3JvdW5kLWRlZmF1bHQpO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgICBmbGV4LWdyb3c6IDE7XG4gICAgZm9udC1mYW1pbHk6IHZhcigtLW5lLWRyb3Bkb3duLWZpZWxkLWZvbnQtZmFtaWx5KTtcbiAgICBmb250LXNpemU6IHZhcigtLW5lLWRyb3Bkb3duLWZpZWxkLWZvbnQtc2l6ZSk7XG4gICAgY29sb3I6IHZhcigtLW5lLWRyb3Bkb3duLWZpZWxkLWNvbG9yLXRleHQtZGVmYXVsdCk7XG4gICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgfVxuXG4gIC5wbGFjZWhvbGRlciB7XG4gICAgY29sb3I6IHZhcigtLW5lLWRyb3Bkb3duLWZpZWxkLWNvbG9yLXRleHQtcGxhY2Vob2xkZXIpO1xuICB9XG5cbiAgLm11bHRpLXNlbGVjdC1idXR0b24ge1xuICAgIGhlaWdodDogMzVweDtcbiAgICBwYWRkaW5nOiAwLjI1ZW07XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgfVxuXG4gIGlucHV0Lmhhcy1pY29uIHtcbiAgICBwYWRkaW5nLXJpZ2h0OiAyZW07XG4gIH1cblxuICAubXVsdGktc2VsZWN0LWJ1dHRvbi53YXJuaW5nLFxuICBpbnB1dC53YXJuaW5nIHtcbiAgICBib3JkZXI6IHZhcigtLW5lLWRyb3Bkb3duLWZpZWxkLWJvcmRlci13aWR0aC1kZWZhdWx0KSBzb2xpZFxuICAgICAgdmFyKC0tbmUtZHJvcGRvd24tZmllbGQtY29sb3ItYm9yZGVyLXdhcm5pbmcpO1xuICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLW5lLWRyb3Bkb3duLWZpZWxkLWJvcmRlci1yYWRpdXMtd2l0aC1oZWxwLW1lc3NhZ2UtdG9wKVxuICAgICAgdmFyKC0tbmUtZHJvcGRvd24tZmllbGQtYm9yZGVyLXJhZGl1cy13aXRoLWhlbHAtbWVzc2FnZS10b3ApXG4gICAgICB2YXIoLS1uZS1kcm9wZG93bi1maWVsZC1ib3JkZXItcmFkaXVzLXdpdGgtaGVscC1tZXNzYWdlLWJvdHRvbSlcbiAgICAgIHZhcigtLW5lLWRyb3Bkb3duLWZpZWxkLWJvcmRlci1yYWRpdXMtd2l0aC1oZWxwLW1lc3NhZ2UtYm90dG9tKTtcbiAgfVxuXG4gIC5tdWx0aS1zZWxlY3QtYnV0dG9uLmVycm9yLFxuICBpbnB1dC5lcnJvciB7XG4gICAgYm9yZGVyOiB2YXIoLS1uZS1kcm9wZG93bi1maWVsZC1ib3JkZXItd2lkdGgtZGVmYXVsdCkgc29saWRcbiAgICAgIHZhcigtLW5lLWRyb3Bkb3duLWZpZWxkLWNvbG9yLWJvcmRlci1lcnJvcik7XG4gICAgYm9yZGVyLXJhZGl1czogdmFyKC0tbmUtZHJvcGRvd24tZmllbGQtYm9yZGVyLXJhZGl1cy13aXRoLWhlbHAtbWVzc2FnZS10b3ApXG4gICAgICB2YXIoLS1uZS1kcm9wZG93bi1maWVsZC1ib3JkZXItcmFkaXVzLXdpdGgtaGVscC1tZXNzYWdlLXRvcClcbiAgICAgIHZhcigtLW5lLWRyb3Bkb3duLWZpZWxkLWJvcmRlci1yYWRpdXMtd2l0aC1oZWxwLW1lc3NhZ2UtYm90dG9tKVxuICAgICAgdmFyKC0tbmUtZHJvcGRvd24tZmllbGQtYm9yZGVyLXJhZGl1cy13aXRoLWhlbHAtbWVzc2FnZS1ib3R0b20pO1xuICB9XG5cbiAgLnN0YXRlLWluZGljYXRvci5kaXNhYmxlZCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmUtZHJvcGRvd24tZmllbGQtY29sb3ItYmFja2dyb3VuZC1kaXNhYmxlZCk7XG4gIH1cblxuICAubXVsdGktc2VsZWN0LWJ1dHRvbjpmb2N1cyxcbiAgaW5wdXQ6Zm9jdXMge1xuICAgIG91dGxpbmU6IHZhcigtLW5lLWRyb3Bkb3duLWZpZWxkLWJvcmRlci13aWR0aC1mb2N1cykgc29saWRcbiAgICAgIHZhcigtLW5lLWRyb3Bkb3duLWZpZWxkLWNvbG9yLWJvcmRlci1mb2N1cyk7XG4gICAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XG4gIH1cblxuICBpbnB1dC5hY3RpdmUsXG4gIGlucHV0LmFjdGl2ZTpmb2N1cyB7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgICBib3JkZXI6IHZhcigtLW5lLWRyb3Bkb3duLWZpZWxkLWJvcmRlci13aWR0aC1kZWZhdWx0KSBzb2xpZFxuICAgICAgdmFyKC0tbmUtZHJvcGRvd24tZmllbGQtY29sb3ItYm9yZGVyLWFjdGl2ZSk7XG4gICAgYm9yZGVyLXJhZGl1czogdmFyKC0tbmUtZHJvcGRvd24tZmllbGQtYm9yZGVyLXJhZGl1cy1hY3RpdmUtdG9wKVxuICAgICAgdmFyKC0tbmUtZHJvcGRvd24tZmllbGQtYm9yZGVyLXJhZGl1cy1hY3RpdmUtdG9wKVxuICAgICAgdmFyKC0tbmUtZHJvcGRvd24tZmllbGQtYm9yZGVyLXJhZGl1cy1hY3RpdmUtYm90dG9tKVxuICAgICAgdmFyKC0tbmUtZHJvcGRvd24tZmllbGQtYm9yZGVyLXJhZGl1cy1hY3RpdmUtYm90dG9tKTtcbiAgfVxuXG4gIC5tdWx0aS1zZWxlY3QtYnV0dG9uLmRpc2FibGVkLFxuICBpbnB1dC5kaXNhYmxlZCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmUtZHJvcGRvd24tZmllbGQtY29sb3ItYmFja2dyb3VuZC1kaXNhYmxlZCk7XG4gICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1uZS1kcm9wZG93bi1maWVsZC1jb2xvci1ib3JkZXItZGlzYWJsZWQpO1xuICAgIGNvbG9yOiB2YXIoLS1uZS1kcm9wZG93bi1maWVsZC1jb2xvci10ZXh0LWRpc2FibGVkKTtcbiAgfVxuXG4gIC5pY29uIHtcbiAgICBjb2xvcjogdmFyKC0tbmUtZHJvcGRvd24tZmllbGQtY29sb3ItaWNvbik7XG4gICAgd2lkdGg6IHZhcigtLW5lLWRyb3Bkb3duLWZpZWxkLXNpemluZy1pY29uKTtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwO1xuICAgIHJpZ2h0OiAwO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICBvdXRsaW5lOiBub25lO1xuICAgIHBhZGRpbmc6IDAgdmFyKC0tbmUtZHJvcGRvd24tZmllbGQtcGFkZGluZy1ob3Jpem9udGFsKTtcbiAgICBjdXJzb3I6IHVuc2V0O1xuICAgIGZsZXgtc2hyaW5rOiAwO1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICB9XG5cbiAgLmVtcGhhc2lzIHtcbiAgICBmb250LXdlaWdodDogdmFyKC0tbmUtZHJvcGRvd24tZmllbGQtZm9udC13ZWlnaHQtaGlnaGxpZ2h0KTtcbiAgfVxuXG4gIC5lbXB0eS1saXN0LFxuICAuZGF0YWxpc3Qge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB3aWR0aDogMTAwJTtcbiAgICB6LWluZGV4OiAxO1xuICB9XG5gO1xuY29uc3Qgc3R5bGVzID0gW3Rva2VucywgY29tbW9uU3R5bGVzLCBiYXNlLCB0b2tlbnMkMSwgdG9rZW5zJDIsIHZhbGlkYXRpb25MYXlvdXRTdHlsZXMsIHZhbGlkYXRpb25TdHlsZXNdO1xuXG52YXIgX2NsYXNzO1xudmFyIE5lRHJvcGRvd25GaWVsZF8xO1xuLyoqXG4gKiBAdGFnIG5lLWRyb3Bkb3duLWZpZWxkXG4gKiBAdGFnbmFtZSBuZS1kcm9wZG93bi1maWVsZFxuICpcbiAqIEBldmVudCBuZS1pbnB1dCBSYWlzZWQgd2hlbiB0aGUgdmFsdWUgb2YgdGhlIGludGVybmFsIGlucHV0IGlzIGNoYW5nZWRcbiAqIEBldmVudCBuZS1jaGFuZ2UgUmFpc2VkIHdoZW4gdGhlIHZhbHVlIG9mIHRoZSBEcm9wZG93biBmaWVsZCBpcyBjaGFuZ2VkIHRvIGEgdmFsaWQgdmFsdWVcbiAqL1xubGV0IE5lRHJvcGRvd25GaWVsZCA9IE5lRHJvcGRvd25GaWVsZF8xID0gKF9jbGFzcyA9IGNsYXNzIE5lRHJvcGRvd25GaWVsZCBleHRlbmRzIFZhbGlkYXRpb25CYXNlQ29tcG9uZW50IHtcbiAgc3RhdGljIGdldCBzY29wZWRFbGVtZW50cygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgJ25lLWRyb3Bkb3duLW1lbnUtaXRlbSc6IE5lRHJvcGRvd25NZW51SXRlbSxcbiAgICAgICduZS1kcm9wZG93bi1tZW51JzogTmVEcm9wZG93bk1lbnUsXG4gICAgICAnbmUtaWNvbic6IE5lSWNvbixcbiAgICAgICduZS1waWxsJzogTmVQaWxsXG4gICAgfTtcbiAgfVxuICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9XG4gIC8qKiBTcGVjaWZpZXMgdGhlIGxpc3Qgb2YgZGF0YSBsaW5rZWQgdG8gdGhlIERyb3Bkb3duIGZpZWxkICovXG4gIHNldCBkYXRhTGlzdCh2YWwpIHtcbiAgICBjb25zdCBvbGREYXRhTGlzdCA9IHRoaXMuX2RhdGFMaXN0O1xuICAgIHRoaXMuX2RhdGFMaXN0ID0gdmFsO1xuICAgIHRoaXMucmVxdWVzdFVwZGF0ZSgnZGF0YUxpc3QnLCBvbGREYXRhTGlzdCk7XG4gIH1cbiAgZ2V0IGRhdGFMaXN0KCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRhTGlzdDtcbiAgfVxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX211bHRpU2VsZWN0ID0gZmFsc2U7XG4gICAgLyoqIFNwZWNpZmllcyB0aGUgdmFsdWUgb2YgdGhlIERyb3Bkb3duIGZpZWxkICovXG4gICAgdGhpcy52YWx1ZSA9ICcnO1xuICAgIC8qKiBTcGVjaWZpZXMgdGhlIGRpc3BsYXkgdmFsdWUgb2YgdGhlIERyb3Bkb3duIGZpZWxkICovXG4gICAgdGhpcy5kaXNwbGF5VmFsdWUgPSAnJztcbiAgICAvKiogU3BlY2lmaWVzIHdoZXRoZXIgdGhlIERyb3Bkb3duIGZpZWxkIHNob3VsZCBiZSBkaXNhYmxlZCAqL1xuICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAvKiogU3BlY2lmaWVzIHdoZXRoZXIgdGhlIERyb3Bkb3duIGZpZWxkIHNob3VsZCBiZSB0aGUgcHJlLWRlZmluZWQgZml4ZWQgaGVpZ2h0ICovXG4gICAgdGhpcy5maXhlZEhlaWdodCA9IGZhbHNlO1xuICAgIC8qKiBTcGVjaWZpZXMgd2hldGhlciB0aGUgRHJvcGRvd24gc2hvdWxkIHNob3cgdGhlIHNlbGVjdCAvIGNsZWFyIGFsbCBidXR0b25zICovXG4gICAgdGhpcy5zaG93Rm9vdGVyQWN0aW9ucyA9IGZhbHNlO1xuICAgIC8qKiBTcGVjaWZpZXMgdGhlIGFyaWEtbGFiZWwgZm9yIHRoZSBEcm9wZG93biBmaWVsZCAqL1xuICAgIHRoaXMuYXJpYUxhYmVsID0gJyc7XG4gICAgLyoqIFNwZWNpZmllcyB0aGUgYXJpYS1sYWJlbGxlZGJ5IGZvciB0aGUgRHJvcGRvd24gZmllbGQgKi9cbiAgICB0aGlzLmFyaWFMYWJlbGxlZGJ5ID0gJyc7XG4gICAgdGhpcy5fZXhwYW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9kYXRhTGlzdCA9IFtdO1xuICAgIHRoaXMuX2lucHV0ID0gY3JlYXRlUmVmKCk7XG4gICAgdGhpcy5fcHJldmlvdXNWYWx1ZSA9ICcnO1xuICAgIHRoaXMudXBkYXRlZCA9ICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5fbXVsdGlTZWxlY3QpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlRGlzcGxheVRleHQoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuX3VwZGF0ZURpc3BsYXlUZXh0ID0gKCkgPT4ge1xuICAgICAgaWYgKHRoaXMudmFsdWUgJiYgdGhpcy52YWx1ZSAhPT0gJycgJiYgIXRoaXMuX211bHRpU2VsZWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl9kYXRhTGlzdCAmJiB0aGlzLl9kYXRhTGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdGhpcy5kaXNwbGF5VmFsdWUgPSB0aGlzLmRhdGFMaXN0LmZpbmQoeCA9PiB4LnZhbHVlID09PSB0aGlzLnZhbHVlKT8udGV4dDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kaXNwbGF5VmFsdWUgPSAnJztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9pbnB1dC52YWx1ZSAmJiB0aGlzLmRpc3BsYXlWYWx1ZSkge1xuICAgICAgICB0aGlzLl9pbnB1dC52YWx1ZS52YWx1ZSA9IHRoaXMuZGlzcGxheVZhbHVlO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5fb25Eb2N1bWVudENsaWNrID0gKCkgPT4ge1xuICAgICAgaWYgKCF0aGlzLl9leHBhbmRlZCkgcmV0dXJuO1xuICAgICAgdGhpcy5fb3JkZXJJdGVtcygpO1xuICAgICAgdGhpcy5fZXhwYW5kZWQgPSBmYWxzZTtcbiAgICAgIC8vIFdoZW4gbm90aGluZyBoYXMgYmVlbiBzZWxlY3RlZCBmcm9tIHRoZSBsaXN0LCBzaG93IHRoZSBsYXN0IHNlbGVjdGVkIHZhbHVlIGFnYWluLlxuICAgICAgLy8gVW5sZXNzIHRoZSBpbnB1dCBib3ggdmFsdWUgaGFzIGJlZW4gY2xlYXJlZCwgdGhlbiBjbGVhciB0aGUgdmFsdWUuXG4gICAgICBpZiAodGhpcy5faW5wdXQudmFsdWU/LnZhbHVlICYmIHRoaXMuX3ByZXZpb3VzVmFsdWUpIHtcbiAgICAgICAgdGhpcy5faW5wdXQudmFsdWUudmFsdWUgPSB0aGlzLl9wcmV2aW91c1ZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmlyZSh0aGlzLCAnbmUtY2hhbmdlJywge1xuICAgICAgICAgIGNvbXBvc2VkOiB0cnVlLFxuICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICB2YWx1ZTogdGhpcy52YWx1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLl9vbktleURvd24gPSBldnQgPT4ge1xuICAgICAgc3dpdGNoIChldnQuY29kZSkge1xuICAgICAgICBjYXNlICdTcGFjZSc6XG4gICAgICAgIGNhc2UgJ0VudGVyJzpcbiAgICAgICAgY2FzZSAnTnVtcGFkRW50ZXInOlxuICAgICAgICAgIHRoaXMuX2V4cGFuZGVkID0gIXRoaXMuX2V4cGFuZGVkO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdFc2NhcGUnOlxuICAgICAgICAgIHRoaXMuX2V4cGFuZGVkID0gIXRoaXMuX2V4cGFuZGVkO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgdGhpcy5yZXF1ZXN0VXBkYXRlKCk7XG4gICAgfTtcbiAgICB0aGlzLl9vbk1vdXNlRG93biA9IGV2dCA9PiB7XG4gICAgICBpZiAodGhpcy5kaXNhYmxlZCkgcmV0dXJuO1xuICAgICAgLy8gSFRNTCBkYXRhIGxpc3QgZWxlbWVudCB3aWxsIGV4cGFuZCB0aGUgbGlzdCB3aGVuIGZvY3VzaW5nIHdpdGggY2xpY2ssIGJ1dCBub3QgdGFiLlxuICAgICAgLy8gSXQgZG9lcyBub3QgY2xvc2Ugd2hlbiBjbGlja2luZyBhZ2Fpbiwgb25seSB3aGVuIGNsaWNraW5nIGF3YXkgb3Igc2VsZWN0aW5nLlxuICAgICAgdGhpcy5fZXhwYW5kZWQgPSAhdGhpcy5fZXhwYW5kZWQ7XG4gICAgICB0aGlzLl9vcmRlckl0ZW1zKCk7XG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB0aGlzLnJlcXVlc3RVcGRhdGUoKTtcbiAgICB9O1xuICAgIHRoaXMuX29uTXVsdGlTZWxlY3RMaXN0SXRlbUNsaWNrZWQgPSAoaXRlbSwgdmFsdWUpID0+IHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheSh0aGlzLnZhbHVlKSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gW107XG4gICAgICB9XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIGl0ZW0uY2hlY2tlZCA9ICFpdGVtLmNoZWNrZWQ7XG4gICAgICAvKiBBZGQgb3IgcmVtb3ZlIHRoZSBpdGVtIGZyb20gdGhlIGFycmF5ICovXG4gICAgICBpZiAoaXRlbS5jaGVja2VkID09PSBmYWxzZSkge1xuICAgICAgICBjb25zdCBpZHggPSB0aGlzLnZhbHVlLmZpbmRJbmRleChyID0+IHIgPT09IHZhbHVlKTtcbiAgICAgICAgdGhpcy52YWx1ZS5zcGxpY2UoaWR4LCAxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudmFsdWUucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICB0aGlzLnJlcXVlc3RVcGRhdGUoKTtcbiAgICB9O1xuICAgIHRoaXMuX29uVG9nZ2xlQWxsQ2xpY2tlZCA9IChldnQsIGlzU2VsZWN0ZWQpID0+IHtcbiAgICAgIGlmICghaXNTZWxlY3RlZCkge1xuICAgICAgICB0aGlzLl9jbGVhclNlbGVjdGlvbigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuX2RhdGFMaXN0Lm1hcCh4ID0+IHgudmFsdWUpO1xuICAgICAgfVxuICAgICAgdGhpcy5fZXhwYW5kZWQgPSBmYWxzZTtcbiAgICB9O1xuICAgIHRoaXMuX29uTGlzdEl0ZW1DbGlja2VkID0gKGV2dCwgdmFsdWUpID0+IHtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgIHRoaXMuX3ByZXZpb3VzVmFsdWUgPSB0aGlzLmRpc3BsYXlWYWx1ZTtcbiAgICAgIGZpcmUodGhpcywgJ25lLWNoYW5nZScsIHtcbiAgICAgICAgY29tcG9zZWQ6IHRydWUsXG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgIGRldGFpbDoge1xuICAgICAgICAgIHZhbHVlOiB0aGlzLnZhbHVlXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5fZXhwYW5kZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMucmVxdWVzdFVwZGF0ZSgpO1xuICAgIH07XG4gICAgdGhpcy5fcmVuZGVySW5wdXQgPSAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5fbXVsdGlTZWxlY3QpIHtcbiAgICAgICAgcmV0dXJuIGh0bWxgPGRpdlxuICAgICAgICB0YWJpbmRleD1cIjBcIlxuICAgICAgICBjbGFzcz0ke2NsYXNzTWFwKHtcbiAgICAgICAgICAnbXVsdGktc2VsZWN0LWJ1dHRvbic6IHRydWUsXG4gICAgICAgICAgJ2hhcy1pY29uJzogdHJ1ZSxcbiAgICAgICAgICBhY3RpdmU6IHRoaXMuX2V4cGFuZGVkLFxuICAgICAgICAgIGRpc2FibGVkOiB0aGlzLmRpc2FibGVkLFxuICAgICAgICAgIGVycm9yOiB0aGlzLnZhbGlkYXRpb25TdGF0ZSA9PT0gVmFsaWRhdGlvblR5cGUuZXJyb3IsXG4gICAgICAgICAgd2FybmluZzogdGhpcy52YWxpZGF0aW9uU3RhdGUgPT09IFZhbGlkYXRpb25UeXBlLndhcm5pbmdcbiAgICAgICAgfSl9XG4gICAgICAgIEBtb3VzZWRvd249JHt0aGlzLl9vbk1vdXNlRG93bn1cbiAgICAgICAgQGtleWRvd249JHt0aGlzLl9vbktleURvd259XG4gICAgICAgIEBjbGljaz0ke05lRHJvcGRvd25GaWVsZF8xLl9vbkNsaWNrfVxuICAgICAgPlxuICAgICAgICAke3doZW4odGhpcy52YWx1ZS5sZW5ndGggPCAxLCB0aGlzLl9yZW5kZXJQbGFjZWhvbGRlcil9XG4gICAgICAgICR7d2hlbih0aGlzLnZhbHVlLmxlbmd0aCA+IDAsIHRoaXMuX3JlbmRlclBpbGwpfVxuICAgICAgPC9kaXY+YDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBodG1sYCA8aW5wdXRcbiAgICAgIGNsYXNzPSR7Y2xhc3NNYXAoe1xuICAgICAgICAnaGFzLWljb24nOiB0cnVlLFxuICAgICAgICBhY3RpdmU6IHRoaXMuX2V4cGFuZGVkLFxuICAgICAgICBkaXNhYmxlZDogdGhpcy5kaXNhYmxlZFxuICAgICAgfSl9XG4gICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAke3JlZih0aGlzLl9pbnB1dCl9XG4gICAgICByZWFkb25seT1cInRydWVcIlxuICAgICAgYXJpYS1sYWJlbD0ke3RoaXMuYXJpYUxhYmVsIHx8IG5vdGhpbmd9XG4gICAgICBhcmlhLWxhYmVsbGVkYnk9JHt0aGlzLmFyaWFMYWJlbGxlZGJ5IHx8IG5vdGhpbmd9XG4gICAgICBwbGFjZWhvbGRlcj0ke2lmRGVmaW5lZCh0aGlzLnBsYWNlaG9sZGVyKX1cbiAgICAgIEBtb3VzZWRvd249JHt0aGlzLl9vbk1vdXNlRG93bn1cbiAgICAgIEBjbGljaz0ke05lRHJvcGRvd25GaWVsZF8xLl9vbkNsaWNrfVxuICAgIC8+YDtcbiAgICB9O1xuICAgIHRoaXMuX3JlbmRlclBsYWNlaG9sZGVyID0gKCkgPT4gaHRtbGA8c3BhbiBjbGFzcz1cInBsYWNlaG9sZGVyXCI+JHt0aGlzLnBsYWNlaG9sZGVyfTwvc3Bhbj5gO1xuICAgIHRoaXMuX3JlbmRlclBpbGwgPSAoKSA9PiBodG1sYDxzcGFuXG4gICAgICA+PG5lLXBpbGxcbiAgICAgICAgbmUtYXJpYS1sYWJlbD1cImNsb3NlXCJcbiAgICAgICAgY2xvc2FibGU9XCJcIlxuICAgICAgICA/ZGlzYWJsZWQ9JHt0aGlzLmRpc2FibGVkfVxuICAgICAgICBAbW91c2Vkb3duPSR7ZSA9PiB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH19XG4gICAgICAgIEBuZS1jbGljaz0ke2V2dCA9PiB7XG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuX2NsZWFyU2VsZWN0aW9uKCk7XG4gICAgfX1cbiAgICAgID5cbiAgICAgICAgJHt0aGlzLnZhbHVlLmxlbmd0aH0gc2VsZWN0ZWRcbiAgICAgIDwvbmUtcGlsbD5cbiAgICA8L3NwYW4+YDtcbiAgICB0aGlzLl9jbGVhclNlbGVjdGlvbiA9ICgpID0+IHtcbiAgICAgIHRoaXMudmFsdWUgPSBbXTtcbiAgICAgIHRoaXMuZGF0YUxpc3QgPSB0aGlzLmRhdGFMaXN0Lm1hcCh4ID0+IHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIHguY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4geDtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5fb3JkZXJJdGVtcygpO1xuICAgICAgZmlyZSh0aGlzLCAnbmUtY2hhbmdlJywge1xuICAgICAgICBjb21wb3NlZDogdHJ1ZSxcbiAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgdmFsdWU6IHRoaXMudmFsdWVcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgICB0aGlzLl9vcmRlckl0ZW1zID0gKCkgPT4ge1xuICAgICAgY29uc3QgY2hlY2tlZEl0ZW1zID0gdGhpcy5kYXRhTGlzdC5maWx0ZXIoeCA9PiB7XG4gICAgICAgIGlmICh4LmNoZWNrZWQgPT09IHRydWUpIHtcbiAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0pO1xuICAgICAgdGhpcy52YWx1ZSA9IGNoZWNrZWRJdGVtcy5tYXAoeCA9PiB4LnZhbHVlKTtcbiAgICAgIGNvbnN0IG5vbmNoZWNrZWRJdGVtcyA9IHRoaXMuZGF0YUxpc3QuZmlsdGVyKHggPT4ge1xuICAgICAgICBpZiAoIXguY2hlY2tlZCkge1xuICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmRhdGFMaXN0ID0gWy4uLmNoZWNrZWRJdGVtcywgLi4ubm9uY2hlY2tlZEl0ZW1zXTtcbiAgICB9O1xuICAgIHRoaXMuX3JlbmRlckxpc3RJdGVtcyA9ICgpID0+IGh0bWxgPGRpdiBjbGFzcz1cImRhdGFsaXN0XCI+XG4gICAgPG5lLWRyb3Bkb3duLW1lbnVcbiAgICAgIHZhcmlhbnQ9XCJmbGF0XCJcbiAgICAgID9maXhlZEhlaWdodD0ke3RoaXMuZml4ZWRIZWlnaHR9XG4gICAgICA/c2hvd0Zvb3RlckFjdGlvbnM9JHt0aGlzLnNob3dGb290ZXJBY3Rpb25zfVxuICAgID5cbiAgICAgICR7dGhpcy5kYXRhTGlzdC5tYXAoaXRlbSA9PiB7XG4gICAgICBpZiAodGhpcy5fbXVsdGlTZWxlY3QpIHtcbiAgICAgICAgcmV0dXJuIGh0bWxgPG5lLWRyb3Bkb3duLW1lbnUtaXRlbVxuICAgICAgICAgICAgbmUtYXJpYS1sYWJlbD0ke2lmRGVmaW5lZChpdGVtLmFyaWFMYWJlbCl9XG4gICAgICAgICAgICBpc011bHRpU2VsZWN0XG4gICAgICAgICAgICBAbmUtY2xpY2s9JHsoKSA9PiB7XG4gICAgICAgICAgdGhpcy5fb25NdWx0aVNlbGVjdExpc3RJdGVtQ2xpY2tlZChpdGVtLCBpdGVtLnZhbHVlKTtcbiAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8c3BhbiBzbG90PVwibXVsdGktc2VsZWN0XCI+XG4gICAgICAgICAgICAgIDxuZS1jaGVja2JveFxuICAgICAgICAgICAgICAgIEBuZS1jbGljaz0ke2V2dCA9PiB7XG4gICAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9fVxuICAgICAgICAgICAgICAgIHRhYkluZGV4PSR7LTF9XG4gICAgICAgICAgICAgICAgdGV4dD0ke2l0ZW0udGV4dH1cbiAgICAgICAgICAgICAgICBzdWJUZXh0PSR7aXRlbS5zdWJUZXh0fVxuICAgICAgICAgICAgICAgIGNoZWNrZWQ9JHtpdGVtLmNoZWNrZWQgPyAndHJ1ZScgOiBub3RoaW5nfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDwvbmUtY2hlY2tib3g+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9uZS1kcm9wZG93bi1tZW51LWl0ZW0+YDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBodG1sYDxuZS1kcm9wZG93bi1tZW51LWl0ZW1cbiAgICAgICAgICBuZS1hcmlhLWxhYmVsPSR7aWZEZWZpbmVkKGl0ZW0uYXJpYUxhYmVsKX1cbiAgICAgICAgICBAbmUtY2xpY2s9JHtldnQgPT4ge1xuICAgICAgICB0aGlzLl9vbkxpc3RJdGVtQ2xpY2tlZChldnQsIGl0ZW0udmFsdWUpO1xuICAgICAgfX1cbiAgICAgICAgICA+PHNwYW4+JHtpdGVtLnRleHR9PC9zcGFuPlxuICAgICAgICAgIDxzcGFuIHNsb3Q9XCJzdWItdGV4dFwiPiR7aXRlbS5zdWJUZXh0fTwvc3Bhbj5cbiAgICAgICAgPC9uZS1kcm9wZG93bi1tZW51LWl0ZW0+YDtcbiAgICB9KX1cbiAgICAgIDxzcGFuIHNsb3Q9XCJmb290ZXItaXRlbXNcIj5cbiAgICAgICAgPG5lLWJ1dHRvbi1zZXQ+XG4gICAgICAgICAgPG5lLWJ1dHRvblxuICAgICAgICAgICAgdmFyaWFudD1cInNlY29uZGFyeVwiXG4gICAgICAgICAgICBAY2xpY2s9JHtlID0+IHtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfX1cbiAgICAgICAgICAgIEBuZS1jbGljaz0ke2UgPT4ge1xuICAgICAgdGhpcy5fb25Ub2dnbGVBbGxDbGlja2VkKGUsIHRydWUpO1xuICAgIH19XG4gICAgICAgICAgICA+U2VsZWN0IEFsbFxuICAgICAgICAgIDwvbmUtYnV0dG9uPlxuICAgICAgICAgIDxuZS1idXR0b25cbiAgICAgICAgICAgIHZhcmlhbnQ9XCJ0ZXh0XCJcbiAgICAgICAgICAgIEBjbGljaz0ke2UgPT4ge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9fVxuICAgICAgICAgICAgQG5lLWNsaWNrPSR7ZSA9PiB7XG4gICAgICB0aGlzLl9vblRvZ2dsZUFsbENsaWNrZWQoZSwgZmFsc2UpO1xuICAgIH19XG4gICAgICAgICAgICA+Q2xlYXIgQWxsXG4gICAgICAgICAgPC9uZS1idXR0b24+XG4gICAgICAgIDwvbmUtYnV0dG9uLXNldD5cbiAgICAgIDwvc3Bhbj5cbiAgICA8L25lLWRyb3Bkb3duLW1lbnU+XG4gIDwvZGl2PmA7XG4gICAgdGhpcy5yZW5kZXIgPSAoKSA9PiB0aGlzLnJlbmRlcldpdGhWYWxpZGF0aW9uKGh0bWxgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwic3RhdGUtaW5kaWNhdG9yXCI+XG4gICAgICAgICAgJHt0aGlzLl9yZW5kZXJJbnB1dCgpfVxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJpY29uXCIgQG1vdXNlZG93bj0ke3RoaXMuX29uTW91c2VEb3dufT5cbiAgICAgICAgICAgICR7dGhpcy5fZXhwYW5kZWQgPyBodG1sYDxuZS1pY29uIC50eXBlPSR7SWNvbnMuY2FyZXRVcH0+PC9uZS1pY29uPmAgOiBodG1sYDxuZS1pY29uIC50eXBlPSR7SWNvbnMuY2FyZXREb3dufT48L25lLWljb24+YH1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgICR7d2hlbih0aGlzLl9leHBhbmRlZCwgdGhpcy5fcmVuZGVyTGlzdEl0ZW1zKX1cbiAgICAgIDwvZGl2PmApO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fb25Eb2N1bWVudENsaWNrKTtcbiAgfVxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaz8uKCk7XG4gICAgY29uc3QgcmVzID0gdGhpcy5kYXRhTGlzdFswXTtcbiAgICBpZiAodGhpcy5kYXRhTGlzdCAmJiByZXMuY2hlY2tlZCkge1xuICAgICAgdGhpcy5fbXVsdGlTZWxlY3QgPSB0cnVlO1xuICAgICAgdGhpcy5fb3JkZXJJdGVtcygpO1xuICAgIH1cbiAgfVxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaz8uKCk7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9vbkRvY3VtZW50Q2xpY2spO1xuICB9XG59LCBfY2xhc3MuX29uQ2xpY2sgPSBldnQgPT4ge1xuICAvLyBXZSBkb24ndCB3YW50IHRoZSBldmVudCB0byBidWJibGUgdG8gdGhlIGRvY3VtZW50LFxuICAvLyBhcyBpdCB3aWxsIGNsb3NlIHRoZSBkcm9wZG93biBtZW51LiBUaGUgbW91c2UgZG93biBleHBhbmRzIHRoZSBtZW51LlxuICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG59LCBfY2xhc3MpO1xuX19kZWNvcmF0ZShbc3RhdGUoKV0sIE5lRHJvcGRvd25GaWVsZC5wcm90b3R5cGUsIFwiX211bHRpU2VsZWN0XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZ1xufSldLCBOZURyb3Bkb3duRmllbGQucHJvdG90eXBlLCBcInBsYWNlaG9sZGVyXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIGF0dHJpYnV0ZTogJ3ZhbHVlJ1xufSldLCBOZURyb3Bkb3duRmllbGQucHJvdG90eXBlLCBcInZhbHVlXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZyxcbiAgYXR0cmlidXRlOiAnZGlzcGxheS12YWx1ZSdcbn0pXSwgTmVEcm9wZG93bkZpZWxkLnByb3RvdHlwZSwgXCJkaXNwbGF5VmFsdWVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogQm9vbGVhbixcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZURyb3Bkb3duRmllbGQucHJvdG90eXBlLCBcImRpc2FibGVkXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IEJvb2xlYW5cbn0pXSwgTmVEcm9wZG93bkZpZWxkLnByb3RvdHlwZSwgXCJmaXhlZEhlaWdodFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBCb29sZWFuXG59KV0sIE5lRHJvcGRvd25GaWVsZC5wcm90b3R5cGUsIFwic2hvd0Zvb3RlckFjdGlvbnNcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogU3RyaW5nLFxuICBhdHRyaWJ1dGU6ICduZS1hcmlhLWxhYmVsJyxcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZURyb3Bkb3duRmllbGQucHJvdG90eXBlLCBcImFyaWFMYWJlbFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBTdHJpbmcsXG4gIGF0dHJpYnV0ZTogJ25lLWFyaWEtbGFiZWxsZWRieScsXG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVEcm9wZG93bkZpZWxkLnByb3RvdHlwZSwgXCJhcmlhTGFiZWxsZWRieVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBBcnJheSxcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZURyb3Bkb3duRmllbGQucHJvdG90eXBlLCBcImRhdGFMaXN0XCIsIG51bGwpO1xuX19kZWNvcmF0ZShbc3RhdGUoKV0sIE5lRHJvcGRvd25GaWVsZC5wcm90b3R5cGUsIFwiX2V4cGFuZGVkXCIsIHZvaWQgMCk7XG5OZURyb3Bkb3duRmllbGQgPSBOZURyb3Bkb3duRmllbGRfMSA9IF9fZGVjb3JhdGUoW2N1c3RvbUVsZW1lbnQoJ25lLWRyb3Bkb3duLWZpZWxkJyldLCBOZURyb3Bkb3duRmllbGQpO1xuXG5leHBvcnQgeyBOZURyb3Bkb3duRmllbGQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRyb3Bkb3duLWZpZWxkLmpzLm1hcFxuIiwiaW1wb3J0IHsgYyBhcyBjb21tb25TdHlsZXMsIF8gYXMgX19kZWNvcmF0ZSB9IGZyb20gJy4vYmFzZS5zdHlsZXMtMTFkMzkxODEuanMnO1xuaW1wb3J0IHsgY3NzLCBMaXRFbGVtZW50LCBodG1sIH0gZnJvbSAnbGl0JztcbmltcG9ydCB7IHByb3BlcnR5LCBjdXN0b21FbGVtZW50IH0gZnJvbSAnbGl0L2RlY29yYXRvcnMuanMnO1xuaW1wb3J0IHsgZiBhcyBmaXJlIH0gZnJvbSAnLi9ldmVudHMtMTE3M2Y1NjIuanMnO1xuaW1wb3J0IHsgdHJhc2ggfSBmcm9tICcuL3RyYXNoLTU2YTEzY2M2LmpzJztcbmltcG9ydCB7IGZpbGUgfSBmcm9tICcuL2ZpbGUtNGFiMDI3MDUuanMnO1xuaW1wb3J0IHsgciBhcyByZW5kZXJJY29uIH0gZnJvbSAnLi9pY29uLmJhc2UtN2E5MTlkYjIuanMnO1xuaW1wb3J0ICdsaXQvZGlyZWN0aXZlcy9zdHlsZS1tYXAuanMnO1xuaW1wb3J0ICdsaXQvZGlyZWN0aXZlcy91bnRpbC5qcyc7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5jb25zdCB0b2tlbnMgPSBjc3NgXG4gICoge1xuICAtLW5lLWZpbGUtcGlja2VyLWNhcmQtcGFkZGluZy1ob3Jpem9udGFsOiB2YXIoLS1uZS1yZWYtc3BhY2luZy1tZWRpdW0sIDFlbSk7XG4gIC0tbmUtZmlsZS1waWNrZXItY2FyZC1wYWRkaW5nLXZlcnRpY2FsOiB2YXIoLS1uZS1yZWYtc3BhY2luZy14LXNtYWxsLCAwLjVlbSk7XG4gIC0tbmUtZmlsZS1waWNrZXItY2FyZC1nYXA6IHZhcigtLW5lLXJlZi1zcGFjaW5nLXgtc21hbGwsIDAuNWVtKTtcbiAgLS1uZS1maWxlLXBpY2tlci1jYXJkLXNpemluZy1pY29uOiB2YXIoLS1uZS1yZWYtc2l6aW5nLTA2LCAxLjVlbSk7XG4gIC0tbmUtZmlsZS1waWNrZXItY2FyZC1jb2xvci1iYWNrZ3JvdW5kOiB2YXIoLS1uZS1yZWYtY29sb3Itd2hpdGUsICNmZmZmZmYpO1xuICAtLW5lLWZpbGUtcGlja2VyLWNhcmQtY29sb3ItYm9yZGVyOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS0xMCwgI0UyRTNFNCk7XG4gIC0tbmUtZmlsZS1waWNrZXItY2FyZC1jb2xvci10ZXh0LWZpbGUtbmFtZTogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktOTAsICMxNjE3MTgpO1xuICAtLW5lLWZpbGUtcGlja2VyLWNhcmQtY29sb3ItdGV4dC1zdWJ0ZXh0OiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS02MCwgIzU3NUM2MSk7XG4gIC0tbmUtZmlsZS1waWNrZXItY2FyZC1ib3JkZXItd2lkdGg6IHZhcigtLW5lLXJlZi1ib3JkZXItd2lkdGgtc21hbGwsIDFweCk7XG4gIC0tbmUtZmlsZS1waWNrZXItY2FyZC1mb250LWZhbWlseTogdmFyKC0tbmUtcmVmLWZvbnQtZmFtaWx5LW9wZW4tc2FucywgT3BlbiBTYW5zKTtcbiAgLS1uZS1maWxlLXBpY2tlci1jYXJkLWZvbnQtc2l6ZS1maWxlLW5hbWU6IHZhcigtLW5lLXJlZi1mb250LXNpemUtMDQsIDAuODc1ZW0pO1xuICAtLW5lLWZpbGUtcGlja2VyLWNhcmQtZm9udC1zaXplLXN1YnRleHQ6IHZhcigtLW5lLXJlZi1mb250LXNpemUtMDIsIDAuNzVlbSk7XG4gIC0tbmUtZmlsZS1waWNrZXItY2FyZC1ib3JkZXItcmFkaXVzOiB2YXIoLS1uZS1yZWYtYm9yZGVyLXJhZGl1cy1tZWRpdW0sIC4yNWVtKTtcbiAgLS1uZS1maWxlLXBpY2tlci1jYXJkLWxpbmUtaGVpZ2h0OiB2YXIoLS1uZS1yZWYtbGluZS1oZWlnaHQtY29uZGVuc2VkLCAxLjI1ZW0pO1xufVxuYDtcblxuY29uc3QgYmFzZUZpbGVDYXJkID0gY3NzYFxuICAuZmlsZS1jYXJkLWFyZWEge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgYm9yZGVyOiB2YXIoLS1uZS1maWxlLXBpY2tlci1jYXJkLWJvcmRlci13aWR0aCkgc29saWRcbiAgICAgIHZhcigtLW5lLWZpbGUtcGlja2VyLWNhcmQtY29sb3ItYm9yZGVyKTtcbiAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1uZS1maWxlLXBpY2tlci1jYXJkLWJvcmRlci1yYWRpdXMpO1xuICAgIHBhZGRpbmc6IHZhcigtLW5lLWZpbGUtcGlja2VyLWNhcmQtcGFkZGluZy12ZXJ0aWNhbClcbiAgICAgIHZhcigtLW5lLWZpbGUtcGlja2VyLWNhcmQtcGFkZGluZy1ob3Jpem9udGFsKTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1maWxlLXBpY2tlci1jYXJkLWNvbG9yLWJhY2tncm91bmQpO1xuICB9XG5cbiAgLmNvbnRlbnQge1xuICAgIGFsaWduLXNlbGY6IHN0cmV0Y2g7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBnYXA6IHZhcigtLW5lLWZpbGUtcGlja2VyLWNhcmQtZ2FwKTtcbiAgICBhbGlnbi1pdGVtczogc3RhcnQ7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgZm9udC1mYW1pbHk6IHZhcigtLW5lLWZpbGUtcGlja2VyLWNhcmQtZm9udC1mYW1pbHkpO1xuICAgIGZvbnQtc2l6ZTogdmFyKC0tbmUtZmlsZS1waWNrZXItY2FyZC1mb250LXNpemUtZmlsZS1uYW1lKTtcbiAgICBjb2xvcjogdmFyKC0tbmUtZmlsZS1waWNrZXItY29sb3ItbGFiZWwpO1xuICB9XG5cbiAgLnRleHQtY29udGVudCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBsaW5lLWhlaWdodDogdmFyKC0tbmUtZmlsZS1waWNrZXItY2FyZC1saW5lLWhlaWdodCk7XG4gIH1cblxuICAuZmlsZS1pY29uIHtcbiAgICB3aWR0aDogdmFyKC0tbmUtZmlsZS1waWNrZXItY2FyZC1zaXppbmctaWNvbik7XG4gICAgaGVpZ2h0OiB2YXIoLS1uZS1maWxlLXBpY2tlci1jYXJkLXNpemluZy1pY29uKTtcbiAgICBwYWRkaW5nOiAxcHggY2FsYyh2YXIoLS1uZS1maWxlLXBpY2tlci1jYXJkLWdhcCkgLyAyKTtcbiAgfVxuXG4gIC5kZWxldGUtYnV0dG9uIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGhlaWdodDogZml0LWNvbnRlbnQ7XG4gICAgd2lkdGg6IGZpdC1jb250ZW50O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgbWFyZ2luOiAwIGF1dG87XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICB9XG5cbiAgLmJ0biB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogaW5oZXJpdDtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgZm9udC1zaXplOiB2YXIoLS1uZS1maWxlLXBpY2tlci1jYXJkLXNpemluZy1pY29uKTtcbiAgICBjdXJzb3I6IGluaGVyaXQ7XG4gIH1cblxuICBuZS1pY29uIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgY29sb3I6IHZhcigtLW5lLWZpbGUtcGlja2VyLWNhcmQtY29sb3ItdGV4dC1maWxlLW5hbWUpO1xuICB9XG5cbiAgLmRlbGV0ZS1pY29uIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgd2lkdGg6IDEycHg7XG4gICAgaGVpZ2h0OiAxNnB4O1xuICB9XG5cbiAgLnN1Yi10ZXh0IHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICBmb250LXNpemU6IHZhcigtLW5lLWZpbGUtcGlja2VyLWNhcmQtZm9udC1zaXplLXN1YnRleHQpO1xuICAgIGNvbG9yOiB2YXIoLS1uZS1maWxlLXBpY2tlci1jYXJkLWNvbG9yLXRleHQtc3VidGV4dCk7XG4gICAgZ2FwOiBjYWxjKHZhcigtLW5lLWZpbGUtcGlja2VyLWNhcmQtZ2FwKSAqIDIpO1xuICB9XG5gO1xuY29uc3Qgc3R5bGVzID0gW2Jhc2VGaWxlQ2FyZCwgY29tbW9uU3R5bGVzLCB0b2tlbnNdO1xuXG5jb25zdCBkZWZhdWx0RmlsZUZvcm1hdCA9ICdEb2N1bWVudCc7XG5jb25zdCBmb3JtYXRTdWJ0ZXh0ID0gJyBmaWxlJztcbmNvbnN0IHNpemVGaWxlRm9ybWF0cyA9IFsnQicsICdLQicsICdNQicsICdHQicsICdUQiddO1xuY29uc3QgZmlsZVNpemVJRUMgPSBmaWxlc2l6ZSA9PiB7XG4gIGNvbnN0IHBvdyA9IGZpbGVzaXplID09PSAwID8gMCA6IE1hdGguZmxvb3IoTWF0aC5sb2coZmlsZXNpemUpIC8gTWF0aC5sb2coMTAyNCkpO1xuICByZXR1cm4gYCR7KGZpbGVzaXplIC8gMTAyNCAqKiBwb3cpLnRvRml4ZWQoMil9ICR7c2l6ZUZpbGVGb3JtYXRzW3Bvd119YDtcbn07XG4vKipcbiAqIEB0YWcgbmUtZmlsZS1jYXJkXG4gKiBAdGFnbmFtZSBuZS1maWxlLWNhcmRcbiAqXG4gKi9cbmxldCBOZUZpbGVDYXJkID0gY2xhc3MgTmVGaWxlQ2FyZCBleHRlbmRzIExpdEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMuZmlsZU5hbWUgPSAnJztcbiAgICB0aGlzLmZpbGVTaXplID0gMDtcbiAgICB0aGlzLmhhbmRsZUNsaWNrID0gZSA9PiB7XG4gICAgICBmaXJlKHRoaXMsICduZS1jbGljaycsIHtcbiAgICAgICAgY29tcG9zZWQ6IHRydWUsXG4gICAgICAgIGJ1YmJsZXM6IHRydWVcbiAgICAgIH0pO1xuICAgICAgaWYgKCF0aGlzLm9uRGVsZXRlKSB7XG4gICAgICAgIGNvbnN0IHVwbG9hZGVkRmlsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ25lLWZpbGUtY2FyZCcpO1xuICAgICAgICB1cGxvYWRlZEZpbGU/LnN0eWxlPy5zZXRQcm9wZXJ0eSgnZGlzcGxheScsICdub25lJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9uRGVsZXRlKGUsIHRoaXMuaWQpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgc3RhdGljIGdldCBzdHlsZXMoKSB7XG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfVxuICBfaGFuZGxlQ2xpY2soZSkge1xuICAgIHRoaXMuaGFuZGxlQ2xpY2soZSk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGxldCBmaWxlRm9ybWF0ID0gYCR7dGhpcy5maWxlTmFtZS5zbGljZSh0aGlzLmZpbGVOYW1lLmxhc3RJbmRleE9mKCcuJykgKyAxLCB0aGlzLmZpbGVOYW1lLmxlbmd0aCl9YDtcbiAgICBjb25zdCBmaWxlTmFtZSA9IGZpbGVGb3JtYXQubGVuZ3RoICsgZm9ybWF0U3VidGV4dC5sZW5ndGggPiAxMCA/IHRoaXMuZmlsZU5hbWUgOiB0aGlzLmZpbGVOYW1lLnNwbGl0KGAuJHtmaWxlRm9ybWF0fWApWzBdO1xuICAgIGlmIChmaWxlRm9ybWF0Lmxlbmd0aCArIGZvcm1hdFN1YnRleHQubGVuZ3RoID4gMTApIHtcbiAgICAgIGZpbGVGb3JtYXQgPSBkZWZhdWx0RmlsZUZvcm1hdDtcbiAgICB9IGVsc2Uge1xuICAgICAgZmlsZUZvcm1hdCA9IGZpbGVGb3JtYXQudG9VcHBlckNhc2UoKSArIGZvcm1hdFN1YnRleHQ7XG4gICAgfVxuICAgIGNvbnN0IGZpbGVTaXplID0gZmlsZVNpemVJRUModGhpcy5maWxlU2l6ZSk7XG4gICAgcmV0dXJuIGh0bWxgIDxkaXYgY2xhc3M9XCJmaWxlLWNhcmQtYXJlYVwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNvbnRlbnRcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZpbGUtaWNvblwiPlxuICAgICAgICAgICR7cmVuZGVySWNvbih7XG4gICAgICB0eXBlQXNIdG1sOiBmaWxlXG4gICAgfSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jb250ZW50XCI+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZmlsZS1jYXJkLWxhYmVsXCI+JHtmaWxlTmFtZX08L2xhYmVsPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzdWItdGV4dFwiPlxuICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZmlsZS1maWxlRm9ybWF0XCI+JHtmaWxlRm9ybWF0fTwvbGFiZWw+XG4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJmaWxlLXNpemVcIj4ke2ZpbGVTaXplfTwvbGFiZWw+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZGVsZXRlLWJ1dHRvblwiPlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIGNsYXNzPVwiYnRuXCJcbiAgICAgICAgICAgIEBjbGljaz0ke3RoaXMuX2hhbmRsZUNsaWNrfVxuICAgICAgICAgICAgaWQ9XCIke3RoaXMuaWR9LWRlbGV0ZSBidXR0b25cIlxuICAgICAgICAgICAgYXJpYS1sYWJlbD1cImRlbGV0ZSBidXR0b25cIlxuICAgICAgICAgID5cbiAgICAgICAgICAgICR7cmVuZGVySWNvbih7XG4gICAgICB0eXBlQXNIdG1sOiB0cmFzaCxcbiAgICAgIGNsYXNzTmFtZTogJ2RlbGV0ZS1pY29uJ1xuICAgIH0pfVxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PmA7XG4gIH1cbn07XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZyxcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZUZpbGVDYXJkLnByb3RvdHlwZSwgXCJmaWxlTmFtZVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBOdW1iZXIsXG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVGaWxlQ2FyZC5wcm90b3R5cGUsIFwiZmlsZVNpemVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KCldLCBOZUZpbGVDYXJkLnByb3RvdHlwZSwgXCJvbkRlbGV0ZVwiLCB2b2lkIDApO1xuTmVGaWxlQ2FyZCA9IF9fZGVjb3JhdGUoW2N1c3RvbUVsZW1lbnQoJ25lLWZpbGUtY2FyZCcpXSwgTmVGaWxlQ2FyZCk7XG5cbmV4cG9ydCB7IE5lRmlsZUNhcmQsIGZpbGVTaXplSUVDIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWxlLWNhcmQuanMubWFwXG4iLCJpbXBvcnQgeyBjIGFzIGNvbW1vblN0eWxlcywgXyBhcyBfX2RlY29yYXRlIH0gZnJvbSAnLi9iYXNlLnN0eWxlcy0xMWQzOTE4MS5qcyc7XG5pbXBvcnQgeyBTY29wZWRFbGVtZW50c01peGluIH0gZnJvbSAnQG9wZW4td2Mvc2NvcGVkLWVsZW1lbnRzJztcbmltcG9ydCB7IGNzcywgTGl0RWxlbWVudCwgaHRtbCB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBwcm9wZXJ0eSwgY3VzdG9tRWxlbWVudCB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IGlmRGVmaW5lZCB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL2lmLWRlZmluZWQuanMnO1xuaW1wb3J0IHsgY2xhc3NNYXAgfSBmcm9tICdsaXQvZGlyZWN0aXZlcy9jbGFzcy1tYXAuanMnO1xuaW1wb3J0IHsgY3JlYXRlUmVmLCByZWYgfSBmcm9tICdsaXQvZGlyZWN0aXZlcy9yZWYuanMnO1xuaW1wb3J0IHsgZiBhcyBmaXJlIH0gZnJvbSAnLi9ldmVudHMtMTE3M2Y1NjIuanMnO1xuaW1wb3J0IHsgZHJvcHpvbmUgfSBmcm9tICcuL2Ryb3B6b25lLTcwMTY2YTc5LmpzJztcbmltcG9ydCB7IHIgYXMgcmVuZGVySWNvbiB9IGZyb20gJy4vaWNvbi5iYXNlLTdhOTE5ZGIyLmpzJztcbmltcG9ydCB7IE5lQnV0dG9uIH0gZnJvbSAnLi9idXR0b24uanMnO1xuaW1wb3J0IHsgTmVGaWxlQ2FyZCB9IGZyb20gJy4vZmlsZS1jYXJkLmpzJztcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmNvbnN0IHRva2VucyA9IGNzc2BcbiAgKiB7XG4gIC0tbmUtZmlsZS1waWNrZXItc2l6aW5nLWljb246IHZhcigtLW5lLXJlZi1zaXppbmctMDgsIDJlbSk7XG4gIC0tbmUtZmlsZS1waWNrZXItc2l6aW5nLWhlaWdodDogdmFyKC0tbmUtcmVmLXNpemluZy0xNCwgNmVtKTtcbiAgLS1uZS1maWxlLXBpY2tlci1tZXNzYWdlLXBhZGRpbmc6IHZhcigtLW5lLXJlZi1zcGFjaW5nLW1lZGl1bSwgMWVtKTtcbiAgLS1uZS1maWxlLXBpY2tlci1tZXNzYWdlLWdhcDogdmFyKC0tbmUtcmVmLXNwYWNpbmctbWVkaXVtLCAxZW0pO1xuICAtLW5lLWZpbGUtcGlja2VyLXBhZGRpbmc6IHZhcigtLW5lLXJlZi1zcGFjaW5nLW1lZGl1bSwgMWVtKTtcbiAgLS1uZS1maWxlLXBpY2tlci1jb2xvci1iYWNrZ3JvdW5kLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci13aGl0ZSwgI2ZmZmZmZik7XG4gIC0tbmUtZmlsZS1waWNrZXItY29sb3ItYmFja2dyb3VuZC1ob3ZlcjogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtMDUsICNGMEY3RkYpO1xuICAtLW5lLWZpbGUtcGlja2VyLWNvbG9yLWxhYmVsOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS02MCwgIzU3NUM2MSk7XG4gIC0tbmUtZmlsZS1waWNrZXItY29sb3ItYm9yZGVyLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5NDAsICM4OThGOTQpO1xuICAtLW5lLWZpbGUtcGlja2VyLWNvbG9yLWJvcmRlci13YXJuaW5nOiB2YXIoLS1uZS1yZWYtY29sb3IteWVsbG93LTUwLCAjRkZDRjFBKTtcbiAgLS1uZS1maWxlLXBpY2tlci1jb2xvci1ib3JkZXItZXJyb3I6IHZhcigtLW5lLXJlZi1jb2xvci1yZWQtNTAsICNFNjAwMDApO1xuICAtLW5lLWZpbGUtcGlja2VyLWJvcmRlci13aWR0aDogdmFyKC0tbmUtcmVmLWJvcmRlci13aWR0aC1zbWFsbCwgMXB4KTtcbiAgLS1uZS1maWxlLXBpY2tlci1ib3JkZXItcmFkaXVzOiB2YXIoLS1uZS1yZWYtYm9yZGVyLXJhZGl1cy1tZWRpdW0sIC4yNWVtKTtcbiAgLS1uZS1maWxlLXBpY2tlci1mb250LWZhbWlseTogdmFyKC0tbmUtcmVmLWZvbnQtZmFtaWx5LW9wZW4tc2FucywgT3BlbiBTYW5zKTtcbiAgLS1uZS1maWxlLXBpY2tlci1mb250LXNpemU6IHZhcigtLW5lLXJlZi1mb250LXNpemUtMDQsIDAuODc1ZW0pO1xuICAtLW5lLWZpbGUtcGlja2VyLWdhcDogdmFyKC0tbmUtcmVmLXNwYWNpbmctbWVkaXVtLCAxZW0pO1xufVxuYDtcblxuY29uc3QgYmFzZUZpbGVQaWNrZXIgPSBjc3NgXG4gIC5kcmFnLWZpbGUtYXJlYSB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgYm9yZGVyOiB2YXIoLS1uZS1maWxlLXBpY2tlci1ib3JkZXItd2lkdGgpIGRhc2hlZFxuICAgICAgdmFyKC0tbmUtZmlsZS1waWNrZXItY29sb3ItYm9yZGVyLWRlZmF1bHQpO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgYm9yZGVyLXJhZGl1czogdmFyKC0tbmUtZmlsZS1waWNrZXItYm9yZGVyLXJhZGl1cyk7XG4gICAgcGFkZGluZzogY2FsYyh2YXIoLS1uZS1maWxlLXBpY2tlci1wYWRkaW5nKSAvIDIpO1xuICAgIG1pbi1oZWlnaHQ6IDk2cHg7XG4gIH1cblxuICAuZHJhZy1maWxlLWFyZWEuZHJhZ2dpbmctb3Zlci1hcmVhIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1maWxlLXBpY2tlci1jb2xvci1iYWNrZ3JvdW5kLWhvdmVyKTtcbiAgICBoZWlnaHQ6IDk2cHg7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBwYWRkaW5nOiAwIGNhbGModmFyKC0tbmUtZmlsZS1waWNrZXItcGFkZGluZykgLyAyKTtcbiAgfVxuXG4gIC5mb3JtLWNvbnRhaW5lciB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gIH1cblxuICAuZmlsZS1waWNrZXItY29udGFpbmVyIHtcbiAgICBhbGlnbi1zZWxmOiBzdHJldGNoO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBtYXJnaW46IGNhbGModmFyKC0tbmUtZmlsZS1waWNrZXItcGFkZGluZykgLyAyKTtcbiAgfVxuXG4gIC51cGxvYWQtZmlsZXMtY29udGFpbmVyIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGdhcDogdmFyKC0tbmUtZmlsZS1waWNrZXItcGFkZGluZyk7XG4gIH1cblxuICAuZmlsZS1waWNrZXItY29udGFpbmVyIC51cGxvYWQtZmlsZXMtY29udGFpbmVyIG5lLWZpbGUtY2FyZDpsYXN0LWNoaWxkIHtcbiAgICBtYXJnaW4tYm90dG9tOiB2YXIoLS1uZS1maWxlLXBpY2tlci1wYWRkaW5nKTtcbiAgfVxuXG4gIC5maWxlLXBpY2tlci1tZXNzYWdlIHtcbiAgICB3aWR0aDogZml0LWNvbnRlbnQ7XG4gICAgaGVpZ2h0OiBmaXQtY29udGVudDtcbiAgICBwYWRkaW5nOiB2YXIoLS1uZS1maWxlLXBpY2tlci1tZXNzYWdlLXBhZGRpbmcpO1xuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICAgIGdhcDogdmFyKC0tbmUtZmlsZS1waWNrZXItbWVzc2FnZS1nYXApO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgZm9udC1mYW1pbHk6IHZhcigtLW5lLWZpbGUtcGlja2VyLWZvbnQtZmFtaWx5KTtcbiAgICBmb250LXNpemU6IHZhcigtLW5lLWZpbGUtcGlja2VyLWZvbnQtc2l6ZSk7XG4gICAgY29sb3I6IHZhcigtLW5lLWZpbGUtcGlja2VyLWNvbG9yLWxhYmVsKTtcbiAgfVxuXG4gICNkZWZhdWx0LWZpbGUtaW5wdXQge1xuICAgIG9wYWNpdHk6IDA7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgei1pbmRleDogLTE7XG4gICAgbGVmdDogMDtcbiAgICB0b3A6IDA7XG4gICAgd2lkdGg6IDA7XG4gICAgaGVpZ2h0OiAwO1xuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgfVxuYDtcbmNvbnN0IHN0eWxlcyQxID0gW2Jhc2VGaWxlUGlja2VyLCBjb21tb25TdHlsZXMsIHRva2Vuc107XG5cbmNvbnN0IGJhc2VGaWxlRHJvcHpvbmUgPSBjc3NgXG4gIC5maWxlLXBpY2tlci1jb250YWluZXIge1xuICAgIHBvc2l0aW9uOiBpbmhlcml0O1xuICAgIGFsaWduLXNlbGY6IHN0cmV0Y2g7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIG1hcmdpbjogY2FsYyh2YXIoLS1uZS1maWxlLXBpY2tlci1wYWRkaW5nKSAvIDIpO1xuICB9XG5cbiAgLmZpbGUtcGlja2VyLW1lc3NhZ2Uge1xuICAgIHdpZHRoOiBmaXQtY29udGVudDtcbiAgICBoZWlnaHQ6IGZpdC1jb250ZW50O1xuICAgIHBhZGRpbmc6IHZhcigtLW5lLWZpbGUtcGlja2VyLW1lc3NhZ2UtcGFkZGluZyk7XG4gICAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gICAgZ2FwOiB2YXIoLS1uZS1maWxlLXBpY2tlci1tZXNzYWdlLWdhcCk7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBmb250LWZhbWlseTogdmFyKC0tbmUtZmlsZS1waWNrZXItZm9udC1mYW1pbHkpO1xuICAgIGZvbnQtc2l6ZTogdmFyKC0tbmUtZmlsZS1waWNrZXItZm9udC1zaXplKTtcbiAgICBjb2xvcjogdmFyKC0tbmUtZmlsZS1waWNrZXItY29sb3ItbGFiZWwpO1xuICB9XG5cbiAgI2RlZmF1bHQtZmlsZS1pbnB1dCB7XG4gICAgb3BhY2l0eTogMDtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgei1pbmRleDogLTE7XG4gICAgbGVmdDogMDtcbiAgICB0b3A6IDA7XG4gICAgd2lkdGg6IDA7XG4gICAgaGVpZ2h0OiAwO1xuICB9XG5cbiAgLmRyb3B6b25lLWljb24tY29udGFpbmVyIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIHdpZHRoOiB2YXIoLS1uZS1maWxlLXBpY2tlci1zaXppbmctaWNvbik7XG4gICAgaGVpZ2h0OiB2YXIoLS1uZS1maWxlLXBpY2tlci1zaXppbmctaWNvbik7XG4gIH1cblxuICAuZHJvcHpvbmUtaWNvbi1jb250YWluZXIgc3ZnIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IHZhcigtLW5lLWZpbGUtcGlja2VyLXNpemluZy1pY29uKTtcbiAgfVxuYDtcbmNvbnN0IHN0eWxlcyA9IFtiYXNlRmlsZURyb3B6b25lLCBjb21tb25TdHlsZXMsIHRva2Vuc107XG5cbi8qKlxuICogQHRhZyBuZS1maWxlLWRyb3B6b25lXG4gKiBAdGFnbmFtZSBuZS1maWxlLWRyb3B6b25lXG4gKlxuICovXG5sZXQgTmVGaWxlRHJvcHpvbmUgPSBjbGFzcyBOZUZpbGVEcm9wem9uZSBleHRlbmRzIExpdEVsZW1lbnQge1xuICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9XG4gIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2luZ2xlRmlsZToge1xuICAgICAgICB0eXBlOiBCb29sZWFuXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc2luZ2xlRmlsZSA9IGZhbHNlO1xuICAgIHRoaXMuc2luZ2xlRmlsZSA9IGZhbHNlO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBmaWxlU3RyID0gdGhpcy5zaW5nbGVGaWxlID8gJ2ZpbGUnIDogJ2ZpbGVzJztcbiAgICByZXR1cm4gaHRtbGAgPGRpdiBjbGFzcz1cImZpbGUtcGlja2VyLWNvbnRhaW5lclwiPlxuICAgICAgPGRpdiBjbGFzcz1cImZpbGUtcGlja2VyLW1lc3NhZ2VcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImRyb3B6b25lLWljb24tY29udGFpbmVyIGRyb3B6b25lLWljb25cIj5cbiAgICAgICAgICAke3JlbmRlckljb24oe1xuICAgICAgdHlwZUFzSHRtbDogZHJvcHpvbmVcbiAgICB9KX1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxsYWJlbFxuICAgICAgICAgIGRyYWdnYWJsZT1cInRydWVcIlxuICAgICAgICAgIGlkPVwiJHt0aGlzLmlkfS1kcm9wem9uZS1sYWJlbFwiXG4gICAgICAgICAgZm9yPVwiZGVmYXVsdC1maWxlLWlucHV0XCJcbiAgICAgICAgICBhcmlhLWxhYmVsPVwiRHJhZyAke2ZpbGVTdHJ9IGhlcmVcIlxuICAgICAgICA+XG4gICAgICAgICAgRHJhZyAke2ZpbGVTdHJ9IGhlcmUuLi5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPHNsb3Q+XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICB0YWJpbmRleD1cIi0xXCJcbiAgICAgICAgICAgIEBpbnB1dD1cIiR7dGhpcy5oYW5kbGVDaGFuZ2V9XCJcbiAgICAgICAgICAgIHR5cGU9XCJmaWxlXCJcbiAgICAgICAgICAgIGlkPVwiZGVmYXVsdC1maWxlLWlucHV0XCJcbiAgICAgICAgICAgID9tdWx0aXBsZT1cIiR7IXRoaXMuc2luZ2xlRmlsZX1cIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvc2xvdD5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PmA7XG4gIH1cbn07XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSgpXSwgTmVGaWxlRHJvcHpvbmUucHJvdG90eXBlLCBcImhhbmRsZUNoYW5nZVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBCb29sZWFuXG59KV0sIE5lRmlsZURyb3B6b25lLnByb3RvdHlwZSwgXCJzaW5nbGVGaWxlXCIsIHZvaWQgMCk7XG5OZUZpbGVEcm9wem9uZSA9IF9fZGVjb3JhdGUoW2N1c3RvbUVsZW1lbnQoJ25lLWZpbGUtZHJvcHpvbmUnKV0sIE5lRmlsZURyb3B6b25lKTtcblxuLyoqXG4gKiBAdGFnIG5lLWZpbGUtcGlja2VyXG4gKiBAdGFnbmFtZSBuZS1maWxlLXBpY2tlclxuICpcbiAqL1xubGV0IE5lRmlsZVBpY2tlciA9IGNsYXNzIE5lRmlsZVBpY2tlciBleHRlbmRzIFNjb3BlZEVsZW1lbnRzTWl4aW4oTGl0RWxlbWVudCkge1xuICBzdGF0aWMgZ2V0IHNjb3BlZEVsZW1lbnRzKCkge1xuICAgIHJldHVybiB7XG4gICAgICAnbmUtZmlsZS1kcm9wem9uZSc6IE5lRmlsZURyb3B6b25lLFxuICAgICAgJ25lLWJ1dHRvbic6IE5lQnV0dG9uLFxuICAgICAgJ25lLWZpbGUtY2FyZCc6IE5lRmlsZUNhcmRcbiAgICB9O1xuICB9XG4gIGdldCBmaWxlUGlja2VyQ2FyZHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ZpbGVQaWNrZXJDYXJkcztcbiAgfVxuICBzZXQgZmlsZVBpY2tlckNhcmRzKHZhbHVlKSB7XG4gICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLl9maWxlUGlja2VyQ2FyZHM7XG4gICAgdGhpcy5fZmlsZVBpY2tlckNhcmRzID0gdmFsdWU7XG4gICAgdGhpcy5yZXF1ZXN0VXBkYXRlKCdmaWxlUGlja2VyQ2FyZHMnLCBvbGRWYWx1ZSk7XG4gIH1cbiAgZ2V0IGRyYWdvdmVyKCkge1xuICAgIHJldHVybiB0aGlzLl9kcmFnb3ZlcjtcbiAgfVxuICBzZXQgZHJhZ292ZXIodmFsdWUpIHtcbiAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXMuX2RyYWdvdmVyO1xuICAgIHRoaXMuX2RyYWdvdmVyID0gdmFsdWU7XG4gICAgdGhpcy5yZXF1ZXN0VXBkYXRlKCdkcmFnb3ZlcicsIG9sZFZhbHVlKTtcbiAgfVxuICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICByZXR1cm4gc3R5bGVzJDE7XG4gIH1cbiAgc3RhdGljIGdldCBwcm9wZXJ0aWVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBmaWxlUGlja2VyQ2FyZHM6IHtcbiAgICAgICAgdHlwZTogQXJyYXlcbiAgICAgIH0sXG4gICAgICBzaW5nbGVGaWxlOiB7XG4gICAgICAgIHR5cGU6IEJvb2xlYW5cbiAgICAgIH0sXG4gICAgICBkcmFnb3Zlcjoge1xuICAgICAgICB0eXBlOiBCb29sZWFuXG4gICAgICB9LFxuICAgICAgYWNjZXB0czoge1xuICAgICAgICB0eXBlOiBTdHJpbmdcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgLyoqXG4gICAgICogVGhpcyBhdHRyaWJ1dGUgc3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IHRoZSBib3VuZCBlbGVtZW50IGlzIGFsbG93IHRvIHVwbG9hZCBtdWx0aXBsZSBudW1iZXIgb2YgZmlsZXMuIElmIHNldCB0byB0cnVlLCBpdCBhbGxvdyB0byB1cGxvYWQgb25seSBzaW5nbGUgZmlsZS4gQnkgZGVmYXVsdCwgdGhlIGF0dHJpYnV0ZSBpcyB0cnVlLlxuICAgICAqL1xuICAgIHRoaXMuc2luZ2xlRmlsZSA9IGZhbHNlO1xuICAgIHRoaXMuX2ZpbGVQaWNrZXJDYXJkcyA9IFtdO1xuICAgIHRoaXMuX2RyYWdvdmVyID0gZmFsc2U7XG4gICAgdGhpcy5faW5wdXRSZWYgPSBjcmVhdGVSZWYoKTtcbiAgICB0aGlzLnByZXZlbnREZWZhdWx0cyA9IGUgPT4ge1xuICAgICAgZmlyZSh0aGlzLCAnbmUtY2hhbmdlJywge1xuICAgICAgICBjb21wb3NlZDogdHJ1ZSxcbiAgICAgICAgYnViYmxlczogdHJ1ZVxuICAgICAgfSk7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH07XG4gICAgdGhpcy5oYW5kbGVDbGljayA9ICgpID0+IHtcbiAgICAgIGZpcmUodGhpcywgJ25lLWNsaWNrJywge1xuICAgICAgICBjb21wb3NlZDogdHJ1ZSxcbiAgICAgICAgYnViYmxlczogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcbiAgICB0aGlzLl9oYW5kbGVDaGFuZ2UgPSBhc3luYyBlID0+IHtcbiAgICAgIGNvbnN0IGZpbGVzID0gZT8udGFyZ2V0Py5maWxlcztcbiAgICAgIGF3YWl0IHRoaXMuZ2V0RmlsZXMoZmlsZXMpO1xuICAgIH07XG4gICAgdGhpcy5vbkRyb3AgPSBhc3luYyBlID0+IHtcbiAgICAgIGlmIChlKSB7XG4gICAgICAgIGlmIChlLnR5cGUgPT09ICdkcm9wJyAmJiBlLmRhdGFUcmFuc2Zlcikge1xuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGZpbGVzXG4gICAgICAgICAgfSA9IGUuZGF0YVRyYW5zZmVyO1xuICAgICAgICAgIGF3YWl0IHRoaXMuZ2V0RmlsZXMoZmlsZXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmaXJlKHRoaXMsICduZS1kcm9wJywge1xuICAgICAgICBjb21wb3NlZDogdHJ1ZSxcbiAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgdmFsdWU6IGUudGFyZ2V0LnZhbHVlLFxuICAgICAgICAgIGRhdGE6IGUudGFyZ2V0LmZpbGVzLFxuICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGVcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy5kcmFnb3ZlciA9IGZhbHNlO1xuICAgIH07XG4gICAgdGhpcy5vbkRyYWdPdmVyID0gKCkgPT4ge1xuICAgICAgdGhpcy5kcmFnb3ZlciA9IHRydWU7XG4gICAgfTtcbiAgICB0aGlzLm9uRHJhZ092ZXJFbmQgPSAoKSA9PiB7XG4gICAgICB0aGlzLmRyYWdvdmVyID0gZmFsc2U7XG4gICAgfTtcbiAgICB0aGlzLmZpbGVQaWNrZXJDYXJkcyA9IFtdO1xuICAgIHRoaXMuZHJhZ292ZXIgPSBmYWxzZTtcbiAgfVxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgd2MvZ3VhcmQtc3VwZXItY2FsbFxuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgWydkcmFnb3ZlcicsICdkcmFnbGVhdmUnLCAnZHJvcCddLmZvckVhY2goZXZlbnROYW1lID0+IHtcbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHRoaXMucHJldmVudERlZmF1bHRzLCBmYWxzZSk7XG4gICAgfSk7XG4gICAgWydkcmFnZW50ZXInLCAnZHJhZ292ZXInXS5mb3JFYWNoKGV2ZW50TmFtZSA9PiB7XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCB0aGlzLm9uRHJhZ092ZXIsIGZhbHNlKTtcbiAgICB9KTtcbiAgICBbJ2RyYWdsZWF2ZScsICdkcm9wJ10uZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgdGhpcy5vbkRyYWdPdmVyRW5kLCBmYWxzZSk7XG4gICAgfSk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgdGhpcy5vbkRyb3AsIGZhbHNlKTtcbiAgfVxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBbJ2RyYWdvdmVyJywgJ2RyYWdsZWF2ZScsICdkcm9wJ10uZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgdGhpcy5wcmV2ZW50RGVmYXVsdHMsIGZhbHNlKTtcbiAgICB9KTtcbiAgICBbJ2RyYWdlbnRlcicsICdkcmFnb3ZlciddLmZvckVhY2goZXZlbnROYW1lID0+IHtcbiAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHRoaXMub25EcmFnT3ZlciwgZmFsc2UpO1xuICAgIH0pO1xuICAgIFsnZHJhZ2xlYXZlJywgJ2Ryb3AnXS5mb3JFYWNoKGV2ZW50TmFtZSA9PiB7XG4gICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCB0aGlzLm9uRHJhZ092ZXJFbmQsIGZhbHNlKTtcbiAgICB9KTtcbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCB0aGlzLm9uRHJvcCwgZmFsc2UpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB3Yy9ndWFyZC1zdXBlci1jYWxsXG4gICAgc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgfVxuICBfaGFuZGxlQ2xpY2soKSB7XG4gICAgY29uc3QgZmlsZUlucHV0ID0gdGhpcy5faW5wdXRSZWYudmFsdWU7XG4gICAgZmlsZUlucHV0Py5jbGljaygpO1xuICAgIHRoaXMuaGFuZGxlQ2xpY2soKTtcbiAgfVxuICBhc3luYyBnZXRGaWxlcyhmaWxlcykge1xuICAgIGlmIChmaWxlcykge1xuICAgICAgY29uc3QgZmlsZUNhcmRzTGlzdCA9IHRoaXMuZmlsZVBpY2tlckNhcmRzO1xuICAgICAgbGV0IGlkeCA9IDA7XG4gICAgICBpZiAodGhpcy5maWxlUGlja2VyQ2FyZHMubGVuZ3RoID4gMCkge1xuICAgICAgICBpZHggPSB0aGlzLmZpbGVQaWNrZXJDYXJkcy5sZW5ndGg7XG4gICAgICB9XG4gICAgICBsZXQgYnJlYWtNZSA9IGZhbHNlO1xuICAgICAgQXJyYXkuZnJvbShmaWxlcykuZm9yRWFjaCgodmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgIGlmICghYnJlYWtNZSkge1xuICAgICAgICAgIGNvbnN0IGZpbGUgPSB2YWx1ZTtcbiAgICAgICAgICBmaWxlQ2FyZHNMaXN0LnB1c2goe1xuICAgICAgICAgICAgaWQ6IGlkeCAhPT0gMCA/IFN0cmluZyhpbmRleCArIGlkeCkgOiBTdHJpbmcoaW5kZXgpLFxuICAgICAgICAgICAgZmlsZU5hbWU6IGZpbGUubmFtZSxcbiAgICAgICAgICAgIGZpbGVTaXplOiBmaWxlLnNpemVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAodGhpcy5zaW5nbGVGaWxlICYmIGZpbGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGJyZWFrTWUgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLmZpbGVQaWNrZXJDYXJkcyA9IGZpbGVDYXJkc0xpc3Q7XG4gICAgICBpZiAodGhpcy5vbkNoYW5nZSkge1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKGZpbGVzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5yZXF1ZXN0VXBkYXRlKCk7XG4gIH1cbiAgYXN5bmMgb25EZWxldGUoZSwgaWQsIGZpbGVQaWNrZXJDYXJkcykge1xuICAgIGZpcmUodGhpcywgJ25lLWNsaWNrJywge1xuICAgICAgY29tcG9zZWQ6IHRydWUsXG4gICAgICBidWJibGVzOiB0cnVlXG4gICAgfSk7XG4gICAgdGhpcy5maWxlUGlja2VyQ2FyZHMgPSBmaWxlUGlja2VyQ2FyZHMuZmlsdGVyKGl0ZW0gPT4gaXRlbS5pZCAhPT0gaWQpO1xuICAgIGlmICh0aGlzLm9uQ2hhbmdlKSB7XG4gICAgICB0aGlzLm9uQ2hhbmdlKHRoaXMuZmlsZVBpY2tlckNhcmRzKTtcbiAgICB9XG4gICAgdGhpcy5yZXF1ZXN0VXBkYXRlKCk7XG4gIH1cbiAgcmVuZGVyRm9ybSh1cGxvYWRGaWxlc0NvbnRhaW5lcikge1xuICAgIGNvbnN0IGZpbGVTdHIgPSB0aGlzLnNpbmdsZUZpbGUgPyAnZmlsZScgOiAnZmlsZXMnO1xuICAgIGlmICghdGhpcy5kcmFnb3Zlcikge1xuICAgICAgcmV0dXJuIGh0bWxgIDxmb3JtIGNsYXNzPVwiZm9ybS1jb250YWluZXJcIiBlbmN0eXBlPVwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZmlsZS1waWNrZXItY29udGFpbmVyXCI+XG4gICAgICAgICAgJHt1cGxvYWRGaWxlc0NvbnRhaW5lcn1cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmlsZS1waWNrZXItbWVzc2FnZVwiPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICR7cmVmKHRoaXMuX2lucHV0UmVmKX1cbiAgICAgICAgICAgICAgQGlucHV0PVwiJHt0aGlzLl9oYW5kbGVDaGFuZ2V9XCJcbiAgICAgICAgICAgICAgdHlwZT1cImZpbGVcIlxuICAgICAgICAgICAgICA/bXVsdGlwbGU9XCIkeyF0aGlzLnNpbmdsZUZpbGV9XCJcbiAgICAgICAgICAgICAgdGFiaW5kZXg9XCItMVwiXG4gICAgICAgICAgICAgIGlkPVwiZGVmYXVsdC1maWxlLWlucHV0XCJcbiAgICAgICAgICAgICAgbmFtZT1cInNlbGVjdC1maWxlLWlucHV0XCJcbiAgICAgICAgICAgICAgYWNjZXB0PVwiJHt0aGlzLmFjY2VwdHN9XCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8bGFiZWxcbiAgICAgICAgICAgICAgZHJhZ2dhYmxlPVwidHJ1ZVwiXG4gICAgICAgICAgICAgIGlkPVwiU2VsZWN0ICR7ZmlsZVN0cn1cIlxuICAgICAgICAgICAgICBmb3I9XCIke3RoaXMuaWR9LWJ1dHRvblwiXG4gICAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJEcmFnICR7ZmlsZVN0cn0gaGVyZVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIERyYWcgJHtmaWxlU3RyfSBoZXJlIG9yXG4gICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgPG5lLWJ1dHRvblxuICAgICAgICAgICAgICBpZD1cIiR7dGhpcy5pZH0tYnV0dG9uXCJcbiAgICAgICAgICAgICAgdmFyaWFudD1cInNlY29uZGFyeVwiXG4gICAgICAgICAgICAgIEBjbGljaz0ke3RoaXMuX2hhbmRsZUNsaWNrfVxuICAgICAgICAgICAgICBuZS1hcmlhLWxhYmVsPVwiU2VsZWN0ICR7ZmlsZVN0cn1cIlxuICAgICAgICAgICAgICB0YWJpbmRleD1cIjBcIlxuICAgICAgICAgICAgICA+U2VsZWN0ICR7ZmlsZVN0cn1cbiAgICAgICAgICAgIDwvbmUtYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZm9ybT5gO1xuICAgIH1cbiAgICByZXR1cm4gaHRtbGAgPGRpdiBjbGFzcz1cImZpbGUtcGlja2VyLWNvbnRhaW5lclwiPlxuICAgICAgPG5lLWZpbGUtZHJvcHpvbmVcbiAgICAgICAgaWQ9XCIke3RoaXMuaWR9LWRyb3B6b25lXCJcbiAgICAgICAgP3NpbmdsZUZpbGU9XCIke3RoaXMuc2luZ2xlRmlsZX1cIlxuICAgICAgICAuaGFuZGxlQ2hhbmdlPVwiJHt0aGlzLl9oYW5kbGVDaGFuZ2V9XCJcbiAgICAgID48L25lLWZpbGUtZHJvcHpvbmU+XG4gICAgPC9kaXY+YDtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgZmlsZUNhcmRzID0gW107XG4gICAgY29uc3QgdXBsb2FkRmlsZXNDb250YWluZXIgPSBbXTtcbiAgICBpZiAodGhpcy5maWxlUGlja2VyQ2FyZHMpIHtcbiAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB0aGlzLmZpbGVQaWNrZXJDYXJkcykge1xuICAgICAgICBmaWxlQ2FyZHMucHVzaChodG1sYCA8bmUtZmlsZS1jYXJkXG4gICAgICAgICAgLmlkPSR7aXRlbS5pZH1cbiAgICAgICAgICAuZmlsZU5hbWU9JHtpdGVtLmZpbGVOYW1lfVxuICAgICAgICAgIC5maWxlU2l6ZT1cIiR7aWZEZWZpbmVkKGl0ZW0uZmlsZVNpemUpfVwiXG4gICAgICAgICAgLm9uRGVsZXRlPVwiJHsoZSwgaWQpID0+IHRoaXMub25EZWxldGUoZSwgaWQsIHRoaXMuZmlsZVBpY2tlckNhcmRzKX1cIlxuICAgICAgICA+PC9uZS1maWxlLWNhcmQ+YCk7XG4gICAgICB9XG4gICAgICBpZiAoZmlsZUNhcmRzKSB7XG4gICAgICAgIHVwbG9hZEZpbGVzQ29udGFpbmVyLnB1c2goaHRtbGAgPGRpdiBjbGFzcz1cInVwbG9hZC1maWxlcy1jb250YWluZXJcIj4ke2ZpbGVDYXJkc308L2Rpdj5gKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc2luZ2xlRmlsZSAmJiBmaWxlQ2FyZHMubGVuZ3RoID09PSAxID8gaHRtbGAke3VwbG9hZEZpbGVzQ29udGFpbmVyfWAgOiBodG1sYFxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNsYXNzPSR7Y2xhc3NNYXAoe1xuICAgICAgJ2RyYWctZmlsZS1hcmVhJzogdHJ1ZSxcbiAgICAgICdkcmFnZ2luZy1vdmVyLWFyZWEnOiB0aGlzLmRyYWdvdmVyXG4gICAgfSl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgJHt0aGlzLnJlbmRlckZvcm0odXBsb2FkRmlsZXNDb250YWluZXIpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgO1xuICB9XG59O1xuX19kZWNvcmF0ZShbcHJvcGVydHkoKV0sIE5lRmlsZVBpY2tlci5wcm90b3R5cGUsIFwib25DaGFuZ2VcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogQm9vbGVhblxufSldLCBOZUZpbGVQaWNrZXIucHJvdG90eXBlLCBcInNpbmdsZUZpbGVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogU3RyaW5nXG59KV0sIE5lRmlsZVBpY2tlci5wcm90b3R5cGUsIFwiYWNjZXB0c1wiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBBcnJheSxcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZUZpbGVQaWNrZXIucHJvdG90eXBlLCBcImZpbGVQaWNrZXJDYXJkc1wiLCBudWxsKTtcbk5lRmlsZVBpY2tlciA9IF9fZGVjb3JhdGUoW2N1c3RvbUVsZW1lbnQoJ25lLWZpbGUtcGlja2VyJyldLCBOZUZpbGVQaWNrZXIpO1xuXG5leHBvcnQgeyBOZUZpbGVQaWNrZXIgYXMgTiwgTmVGaWxlRHJvcHpvbmUgYXMgYSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsZS1waWNrZXItZDBlMDI4MDcuanMubWFwXG4iLCJpbXBvcnR7bm9DaGFuZ2UgYXMgcixub3RoaW5nIGFzIGV9ZnJvbVwiLi4vbGl0LWh0bWwuanNcIjtpbXBvcnR7ZGlyZWN0aXZlIGFzIGksRGlyZWN0aXZlIGFzIHQsUGFydFR5cGUgYXMgbn1mcm9tXCIuLi9kaXJlY3RpdmUuanNcIjtpbXBvcnR7aXNTaW5nbGVFeHByZXNzaW9uIGFzIG8sc2V0Q29tbWl0dGVkVmFsdWUgYXMgc31mcm9tXCIuLi9kaXJlY3RpdmUtaGVscGVycy5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovY29uc3QgbD1pKGNsYXNzIGV4dGVuZHMgdHtjb25zdHJ1Y3RvcihyKXtpZihzdXBlcihyKSxyLnR5cGUhPT1uLlBST1BFUlRZJiZyLnR5cGUhPT1uLkFUVFJJQlVURSYmci50eXBlIT09bi5CT09MRUFOX0FUVFJJQlVURSl0aHJvdyBFcnJvcihcIlRoZSBgbGl2ZWAgZGlyZWN0aXZlIGlzIG5vdCBhbGxvd2VkIG9uIGNoaWxkIG9yIGV2ZW50IGJpbmRpbmdzXCIpO2lmKCFvKHIpKXRocm93IEVycm9yKFwiYGxpdmVgIGJpbmRpbmdzIGNhbiBvbmx5IGNvbnRhaW4gYSBzaW5nbGUgZXhwcmVzc2lvblwiKX1yZW5kZXIocil7cmV0dXJuIHJ9dXBkYXRlKGksW3RdKXtpZih0PT09cnx8dD09PWUpcmV0dXJuIHQ7Y29uc3Qgbz1pLmVsZW1lbnQsbD1pLm5hbWU7aWYoaS50eXBlPT09bi5QUk9QRVJUWSl7aWYodD09PW9bbF0pcmV0dXJuIHJ9ZWxzZSBpZihpLnR5cGU9PT1uLkJPT0xFQU5fQVRUUklCVVRFKXtpZighIXQ9PT1vLmhhc0F0dHJpYnV0ZShsKSlyZXR1cm4gcn1lbHNlIGlmKGkudHlwZT09PW4uQVRUUklCVVRFJiZvLmdldEF0dHJpYnV0ZShsKT09PXQrXCJcIilyZXR1cm4gcjtyZXR1cm4gcyhpKSx0fX0pO2V4cG9ydHtsIGFzIGxpdmV9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGl2ZS5qcy5tYXBcbiIsImltcG9ydCB7IGMgYXMgY29tbW9uU3R5bGVzLCBfIGFzIF9fZGVjb3JhdGUgfSBmcm9tICcuL2Jhc2Uuc3R5bGVzLTExZDM5MTgxLmpzJztcbmltcG9ydCB7IGNzcywgaHRtbCwgbm90aGluZyB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBwcm9wZXJ0eSwgc3RhdGUsIGN1c3RvbUVsZW1lbnQgfSBmcm9tICdsaXQvZGVjb3JhdG9ycy5qcyc7XG5pbXBvcnQgeyBjbGFzc01hcCB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL2NsYXNzLW1hcC5qcyc7XG5pbXBvcnQgeyBpZkRlZmluZWQgfSBmcm9tICdsaXQvZGlyZWN0aXZlcy9pZi1kZWZpbmVkLmpzJztcbmltcG9ydCB7IGxpdmUgfSBmcm9tICdsaXQvZGlyZWN0aXZlcy9saXZlLmpzJztcbmltcG9ydCB7IHdoZW4gfSBmcm9tICdsaXQvZGlyZWN0aXZlcy93aGVuLmpzJztcbmltcG9ydCAnLi9jaGVja2JveC5qcyc7XG5pbXBvcnQgeyBmIGFzIGZpcmUgfSBmcm9tICcuL2V2ZW50cy0xMTczZjU2Mi5qcyc7XG5pbXBvcnQgeyB0IGFzIHRva2VucyQxLCB2IGFzIHZhbGlkYXRpb25MYXlvdXRTdHlsZXMsIGEgYXMgdmFsaWRhdGlvblN0eWxlcywgViBhcyBWYWxpZGF0aW9uQmFzZUNvbXBvbmVudCwgYiBhcyBWYWxpZGF0aW9uVHlwZSB9IGZyb20gJy4vdmFsaWRhdGlvbi50b2tlbnMtZGI4NmVjYTkuanMnO1xuaW1wb3J0IHsgdCBhcyB0b2tlbnMkMiB9IGZyb20gJy4vaWNvbi50b2tlbnMtZTRhZmZjNDkuanMnO1xuaW1wb3J0IHsgciBhcyByZW5kZXJJY29uIH0gZnJvbSAnLi9pY29uLmJhc2UtN2E5MTlkYjIuanMnO1xuaW1wb3J0IHsgY2xvc2VEZWZhdWx0IH0gZnJvbSAnLi9jbG9zZURlZmF1bHQtZTZkYTNhZDguanMnO1xuaW1wb3J0ICcuL2NoZWNrLTEzMmM5ODk0LmpzJztcbmltcG9ydCAnQG9wZW4td2Mvc2NvcGVkLWVsZW1lbnRzJztcbmltcG9ydCAnLi9pY29uVHlwZS04MzI2ZWRkYi5qcyc7XG5pbXBvcnQgJ2xpdC9kaXJlY3RpdmVzL3N0eWxlLW1hcC5qcyc7XG5pbXBvcnQgJ2xpdC9kaXJlY3RpdmVzL3VudGlsLmpzJztcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmNvbnN0IHRva2VucyA9IGNzc2BcbiAgKiB7XG4gIC0tbmUtaW5wdXQtYm9yZGVyLXJhZGl1cy1kZWZhdWx0OiB2YXIoLS1uZS1yZWYtYm9yZGVyLXJhZGl1cy1tZWRpdW0sIC4yNWVtKTtcbiAgLS1uZS1pbnB1dC1ib3JkZXItcmFkaXVzLXdpdGgtaGVscC1tZXNzYWdlLXRvcDogdmFyKC0tbmUtcmVmLWJvcmRlci1yYWRpdXMtbWVkaXVtLCAuMjVlbSk7XG4gIC0tbmUtaW5wdXQtYm9yZGVyLXJhZGl1cy13aXRoLWhlbHAtbWVzc2FnZS1ib3R0b206IHZhcigtLW5lLXJlZi1ib3JkZXItcmFkaXVzLW5vbmUsIDApO1xuICAtLW5lLWlucHV0LWZvbnQtZmFtaWx5OiB2YXIoLS1uZS1yZWYtZm9udC1mYW1pbHktb3Blbi1zYW5zLCBPcGVuIFNhbnMpO1xuICAtLW5lLWlucHV0LWZvbnQtc2l6ZTogdmFyKC0tbmUtcmVmLWZvbnQtc2l6ZS0wNCwgMC44NzVlbSk7XG4gIC0tbmUtaW5wdXQtZ2FwOiB2YXIoLS1uZS1yZWYtc3BhY2luZy14eC1zbWFsbCwgMC4yNWVtKTtcbiAgLS1uZS1pbnB1dC1wYWRkaW5nLWhvcml6b250YWw6IHZhcigtLW5lLXJlZi1zcGFjaW5nLXgtc21hbGwsIDAuNWVtKTtcbiAgLS1uZS1pbnB1dC1wYWRkaW5nLXZlcnRpY2FsOiB2YXIoLS1uZS1yZWYtc3BhY2luZy14LXNtYWxsLCAwLjVlbSk7XG4gIC0tbmUtaW5wdXQtY29sb3ItYmFja2dyb3VuZC1hY3RpdmU6IHZhcigtLW5lLXJlZi1jb2xvci13aGl0ZSwgI2ZmZmZmZik7XG4gIC0tbmUtaW5wdXQtY29sb3ItYmFja2dyb3VuZC1mb2N1czogdmFyKC0tbmUtcmVmLWNvbG9yLXdoaXRlLCAjZmZmZmZmKTtcbiAgLS1uZS1pbnB1dC1jb2xvci1iYWNrZ3JvdW5kLWluYWN0aXZlOiB2YXIoLS1uZS1yZWYtY29sb3Itd2hpdGUsICNmZmZmZmYpO1xuICAtLW5lLWlucHV0LWNvbG9yLWJhY2tncm91bmQtZGlzYWJsZWQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTMwLCAjQTdBQkFGKTtcbiAgLS1uZS1pbnB1dC1jb2xvci1iYWNrZ3JvdW5kLWVycm9yOiB2YXIoLS1uZS1yZWYtY29sb3Itd2hpdGUsICNmZmZmZmYpO1xuICAtLW5lLWlucHV0LWNvbG9yLWJhY2tncm91bmQtd2FybmluZzogdmFyKC0tbmUtcmVmLWNvbG9yLXdoaXRlLCAjZmZmZmZmKTtcbiAgLS1uZS1pbnB1dC1jb2xvci1iYWNrZ3JvdW5kLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci13aGl0ZSwgI2ZmZmZmZik7XG4gIC0tbmUtaW5wdXQtY29sb3ItYm9yZGVyLWFjdGl2ZTogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtNjAsICMwMDZCRDYpO1xuICAtLW5lLWlucHV0LWNvbG9yLWJvcmRlci1pbmFjdGl2ZTogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXk0MCwgIzg5OEY5NCk7XG4gIC0tbmUtaW5wdXQtY29sb3ItYm9yZGVyLWZvY3VzOiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS0yMCwgI0EzRDFGRik7XG4gIC0tbmUtaW5wdXQtY29sb3ItYm9yZGVyLXdhcm5pbmc6IHZhcigtLW5lLXJlZi1jb2xvci15ZWxsb3ctNTAsICNGRkNGMUEpO1xuICAtLW5lLWlucHV0LWNvbG9yLWJvcmRlci1lcnJvcjogdmFyKC0tbmUtcmVmLWNvbG9yLXJlZC01MCwgI0U2MDAwMCk7XG4gIC0tbmUtaW5wdXQtY29sb3ItYm9yZGVyLWRpc2FibGVkOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS0zMCwgI0E3QUJBRik7XG4gIC0tbmUtaW5wdXQtY29sb3ItaWNvbi1hY3RpdmU6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTkwLCAjMTYxNzE4KTtcbiAgLS1uZS1pbnB1dC1jb2xvci1pY29uLWRpc2FibGVkOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS05MCwgIzE2MTcxOCk7XG4gIC0tbmUtaW5wdXQtY29sb3ItdGV4dC1wbGFjZWhvbGRlcjogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktNTAsICM2RDczNzkpO1xuICAtLW5lLWlucHV0LWNvbG9yLXRleHQtZGVmYXVsdDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktOTAsICMxNjE3MTgpO1xuICAtLW5lLWlucHV0LWNvbG9yLXRleHQtZGlzYWJsZWQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTkwLCAjMTYxNzE4KTtcbiAgLS1uZS1pbnB1dC1ib3JkZXItd2lkdGgtZGVmYXVsdDogdmFyKC0tbmUtcmVmLWJvcmRlci13aWR0aC1zbWFsbCwgMXB4KTtcbiAgLS1uZS1pbnB1dC1ib3JkZXItd2lkdGgtZm9jdXM6IHZhcigtLW5lLXJlZi1ib3JkZXItd2lkdGgtbGFyZ2UsIDRweCk7XG4gIC0tbmUtaW5wdXQtc2l6aW5nLWljb246IHZhcigtLW5lLXJlZi1zaXppbmctMDQsIDFlbSk7XG4gIC0tbmUtaW5wdXQtY29udGVudC1nYXA6IHZhcigtLW5lLXJlZi1zcGFjaW5nLXgtc21hbGwsIDAuNWVtKTtcbn1cbmA7XG5cbmNvbnN0IGJhc2VJbnB1dCA9IGNzc2BcbiAgLmNvbnRhaW5lciB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBwYWRkaW5nOiAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG5cbiAgaW5wdXQge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmc6IHZhcigtLW5lLWlucHV0LXBhZGRpbmctdmVydGljYWwpIHZhcigtLW5lLWlucHV0LXBhZGRpbmctaG9yaXpvbnRhbClcbiAgICAgIHZhcigtLW5lLWlucHV0LXBhZGRpbmctdmVydGljYWwpIHZhcigtLW5lLWlucHV0LXBhZGRpbmctaG9yaXpvbnRhbCk7XG4gICAgZ2FwOiB2YXIoLS1uZS1pbnB1dC1jb250ZW50LWdhcCk7XG4gICAgZm9udC1mYW1pbHk6IHZhcigtLW5lLWlucHV0LWZvbnQtZmFtaWx5KTtcbiAgICBmb250LXNpemU6IHZhcigtLW5lLWlucHV0LWZvbnQtc2l6ZSk7XG4gICAgYm9yZGVyOiB2YXIoLS1uZS1pbnB1dC1ib3JkZXItd2lkdGgtZGVmYXVsdCkgc29saWRcbiAgICAgIHZhcigtLW5lLWlucHV0LWNvbG9yLWJvcmRlci1pbmFjdGl2ZSk7XG4gICAgYm9yZGVyLXJhZGl1czogdmFyKC0tbmUtaW5wdXQtYm9yZGVyLXJhZGl1cy1kZWZhdWx0KTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1pbnB1dC1jb2xvci1iYWNrZ3JvdW5kLWRlZmF1bHQpO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgICBmbGV4LWdyb3c6IDE7XG4gIH1cblxuICAuc2hvdy1wYXNzd29yZC1jb250YWluZXIge1xuICAgIG1hcmdpbi10b3A6IHZhcigtLW5lLWlucHV0LWNvbnRlbnQtZ2FwKTtcbiAgfVxuXG4gIC5oYXMtbGVmdC1pY29uIGlucHV0IHtcbiAgICBwYWRkaW5nLWxlZnQ6IDI1cHg7XG4gICAgcGFkZGluZy1yaWdodDogMjVweDtcbiAgfVxuXG4gIGlucHV0OjpwbGFjZWhvbGRlciB7XG4gICAgY29sb3I6IHZhcigtLW5lLWlucHV0LWNvbG9yLXRleHQtcGxhY2Vob2xkZXIpO1xuICB9XG5cbiAgaW5wdXQ6YWN0aXZlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1pbnB1dC1jb2xvci1iYWNrZ3JvdW5kLWFjdGl2ZSk7XG4gICAgYm9yZGVyOiB2YXIoLS1uZS1pbnB1dC1ib3JkZXItd2lkdGgtZGVmYXVsdCkgc29saWRcbiAgICAgIHZhcigtLW5lLWlucHV0LWNvbG9yLWJvcmRlci1hY3RpdmUpO1xuICB9XG5cbiAgaW5wdXQ6ZGlzYWJsZWQge1xuICAgIGNvbG9yOiB2YXIoLS1uZS1pbnB1dC1jb2xvci10ZXh0LWRpc2FibGVkKTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1pbnB1dC1jb2xvci1iYWNrZ3JvdW5kLWRpc2FibGVkKTtcbiAgICBib3JkZXI6IHZhcigtLW5lLWlucHV0LWJvcmRlci13aWR0aC1kZWZhdWx0KSBzb2xpZFxuICAgICAgdmFyKC0tbmUtaW5wdXQtY29sb3ItYm9yZGVyLWRpc2FibGVkKTtcbiAgfVxuXG4gIGlucHV0OmZvY3VzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1pbnB1dC1jb2xvci1iYWNrZ3JvdW5kLWluYWN0aXZlKTtcbiAgICBvdXRsaW5lOiB2YXIoLS1uZS1pbnB1dC1ib3JkZXItd2lkdGgtZm9jdXMpIHNvbGlkXG4gICAgICB2YXIoLS1uZS1pbnB1dC1jb2xvci1ib3JkZXItZm9jdXMpO1xuICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLW5lLWlucHV0LWJvcmRlci1yYWRpdXMtZGVmYXVsdCk7XG4gICAgYm9yZGVyOiB2YXIoLS1uZS1pbnB1dC1ib3JkZXItd2lkdGgtZGVmYXVsdCkgc29saWRcbiAgICAgIHZhcigtLW5lLWlucHV0LWNvbG9yLWJhY2tncm91bmQtaW5hY3RpdmUpO1xuICB9XG5cbiAgaW5wdXQud2FybmluZyB7XG4gICAgYm9yZGVyOiB2YXIoLS1uZS1pbnB1dC1ib3JkZXItd2lkdGgtZGVmYXVsdCkgc29saWRcbiAgICAgIHZhcigtLW5lLWlucHV0LWNvbG9yLWJvcmRlci13YXJuaW5nKTtcbiAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1uZS1pbnB1dC1ib3JkZXItcmFkaXVzLXdpdGgtaGVscC1tZXNzYWdlLXRvcClcbiAgICAgIHZhcigtLW5lLWlucHV0LWJvcmRlci1yYWRpdXMtd2l0aC1oZWxwLW1lc3NhZ2UtdG9wKVxuICAgICAgdmFyKC0tbmUtaW5wdXQtYm9yZGVyLXJhZGl1cy13aXRoLWhlbHAtbWVzc2FnZS1ib3R0b20pXG4gICAgICB2YXIoLS1uZS1pbnB1dC1ib3JkZXItcmFkaXVzLXdpdGgtaGVscC1tZXNzYWdlLWJvdHRvbSk7XG4gIH1cblxuICBpbnB1dC5lcnJvciB7XG4gICAgYm9yZGVyOiB2YXIoLS1uZS1pbnB1dC1ib3JkZXItd2lkdGgtZGVmYXVsdCkgc29saWRcbiAgICAgIHZhcigtLW5lLWlucHV0LWNvbG9yLWJvcmRlci1lcnJvcik7XG4gICAgYm9yZGVyLXJhZGl1czogdmFyKC0tbmUtaW5wdXQtYm9yZGVyLXJhZGl1cy13aXRoLWhlbHAtbWVzc2FnZS10b3ApXG4gICAgICB2YXIoLS1uZS1pbnB1dC1ib3JkZXItcmFkaXVzLXdpdGgtaGVscC1tZXNzYWdlLXRvcClcbiAgICAgIHZhcigtLW5lLWlucHV0LWJvcmRlci1yYWRpdXMtd2l0aC1oZWxwLW1lc3NhZ2UtYm90dG9tKVxuICAgICAgdmFyKC0tbmUtaW5wdXQtYm9yZGVyLXJhZGl1cy13aXRoLWhlbHAtbWVzc2FnZS1ib3R0b20pO1xuICB9XG5cbiAgaW5wdXQuZXJyb3I6Zm9jdXMsXG4gIGlucHV0Lndhcm5pbmc6Zm9jdXMge1xuICAgIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgb3V0bGluZTogdmFyKC0tbmUtaW5wdXQtYm9yZGVyLXdpZHRoLWZvY3VzKSBzb2xpZFxuICAgICAgdmFyKC0tbmUtaW5wdXQtY29sb3ItYm9yZGVyLWZvY3VzKTtcbiAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1uZS1pbnB1dC1ib3JkZXItcmFkaXVzLWRlZmF1bHQpO1xuICB9XG5cbiAgaW5wdXRbcmVhZG9ubHldIHtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgfVxuXG4gIC5tZXNzYWdlLWNvbnRhaW5lci53YXJuaW5nIHtcbiAgICBib3JkZXI6IHZhcigtLW5lLWlucHV0LWJvcmRlci13aWR0aC1kZWZhdWx0KSBzb2xpZFxuICAgICAgdmFyKC0tbmUtaW5wdXQtY29sb3ItYm9yZGVyLXdhcm5pbmcpO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIH1cblxuICAubWVzc2FnZS1jb250YWluZXIuZXJyb3Ige1xuICAgIGJvcmRlcjogdmFyKC0tbmUtaW5wdXQtYm9yZGVyLXdpZHRoLWRlZmF1bHQpIHNvbGlkXG4gICAgICB2YXIoLS1uZS1pbnB1dC1jb2xvci1ib3JkZXItZXJyb3IpO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIH1cblxuICAubGVmdC1pY29uIHtcbiAgICB3aWR0aDogdmFyKC0tbmUtaWNvbi1zaXplLWRlZmF1bHQpO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBwYWRkaW5nLWxlZnQ6IDVweDtcbiAgICBjdXJzb3I6IHVuc2V0O1xuICAgIGZsZXgtc2hyaW5rOiAwO1xuICB9XG5cbiAgLmNsZWFyLWJ1dHRvbiB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICByaWdodDogMDtcbiAgICB0b3A6IDA7XG4gICAgaGVpZ2h0OiAyNXB4O1xuICAgIHdpZHRoOiAyNXB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICBvdXRsaW5lOiBub25lO1xuICAgIG1hcmdpbjogNHB4IDJweDtcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlLWluLW91dCAwcztcbiAgfVxuXG4gIC5jbGVhci1idXR0b24taWNvbiB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICB9XG5gO1xuY29uc3Qgc3R5bGVzID0gW3Rva2VucywgYmFzZUlucHV0LCB0b2tlbnMkMSwgdG9rZW5zJDIsIHZhbGlkYXRpb25MYXlvdXRTdHlsZXMsIHZhbGlkYXRpb25TdHlsZXMsIGNvbW1vblN0eWxlc107XG5cbi8qKlxuICogQHRhZyBuZS1pbnB1dFxuICogQHRhZ25hbWUgbmUtaW5wdXRcbiAqXG4gKiBAZGVzY3JpcHRpb24gQ29udHJvbCB0aGF0IHJlbmRlcnMgYW4gaW5wdXQgY29udHJvbCB0aGF0IGNhbiBiZSB1c2VkIGluIGZvcm1zLCBvciBpbmRlcGVuZGFudGx5LlxuICpcbiAqIEBldmVudCBuZS1pbnB1dCBSYWlzZWQgd2hlbiB0eXBpbmcgaW4gdGhlIGlucHV0IGNvbnRyb2xcbiAqL1xubGV0IE5lSW5wdXQgPSBjbGFzcyBOZUlucHV0IGV4dGVuZHMgVmFsaWRhdGlvbkJhc2VDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGF0IGFuIGlucHV0IHNob3VsZCBiZSBkaXNhYmxlZFxuICAgICAqL1xuICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhhdCBhbiBpbnB1dCBzaG91bGQgYmUgcmVhZG9ubHlcbiAgICAgKi9cbiAgICB0aGlzLnJlYWRvbmx5ID0gZmFsc2U7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoYXQgYW4gaW5wdXQgdmFsdWUgaXMgcmVxdWlyZWRcbiAgICAgKi9cbiAgICB0aGlzLnJlcXVpcmVkID0gZmFsc2U7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBpbnB1dCB0eXBlLiBEZWZhdWx0IGlzIHRleHQgYnV0IHN1cHBvcnRzIHBhc3N3b3JkIGFuZCBzZWFyY2hcbiAgICAgKi9cbiAgICB0aGlzLnR5cGUgPSAndGV4dCc7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSB0ZXh0IHRoYXQgd2lsbCBiZSByZWFkIGJ5IHRoZSBzY3JlZW4gcmVhZGVyXG4gICAgICovXG4gICAgdGhpcy5hcmlhTGFiZWwgPSAnJztcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHRleHQgdGhhdCB3aWxsIGJlIHJlYWQgYnkgdGhlIHNjcmVlbiByZWFkZXJcbiAgICAgKi9cbiAgICB0aGlzLmFyaWFMYWJlbGxlZGJ5ID0gJyc7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSB2YWx1ZSB0aGUgaW5wdXQgY29udHJvbCBjb250YWluc1xuICAgICAqL1xuICAgIHRoaXMudmFsdWUgPSAnJztcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhhdCB0aGUgaW5wdXQgY29udHJvbCB3aWxsIGhhdmUgYSBjbGVhciBidXR0b24gdGhhdCByZXNldHMgdGhlIHZhbHVlXG4gICAgICovXG4gICAgdGhpcy5yZXNldCA9IGZhbHNlO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgbGFiZWwgZm9yIHRoZSBzaG93IHBhc3N3b3JkIGNoZWNrYm94XG4gICAgICovXG4gICAgdGhpcy5wYXNzd29yZFdpdGhWaXNpYmlsaXR5TGFiZWwgPSAnU2hvdyBwYXNzd29yZCc7XG4gICAgLy8gRXZlbnRzXG4gICAgdGhpcy5faGFuZGxlSW5wdXQgPSBldnQgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICB2YWx1ZVxuICAgICAgfSA9IGV2dC50YXJnZXQ7XG4gICAgICBmaXJlKHRoaXMsICduZS1pbnB1dCcsIHtcbiAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgZGF0YTogZXZ0LmRhdGFcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfTtcbiAgICB0aGlzLl9oYW5kbGVDbGlja0NsZWFyID0gKCkgPT4ge1xuICAgICAgdGhpcy52YWx1ZSA9ICcnO1xuICAgIH07XG4gIH1cbiAgc3RhdGljIGdldCBzdHlsZXMoKSB7XG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfVxuICB3aWxsVXBkYXRlKGNoYW5nZWRQcm9wZXJ0aWVzKSB7XG4gICAgaWYgKGNoYW5nZWRQcm9wZXJ0aWVzLmhhcygndHlwZScpICYmIHRoaXMuX3R5cGUpIHtcbiAgICAgIC8vIHJlc2V0IHRoZSBfdHlwZSBzdGF0ZSB2YWx1ZSB3aGVuIHR5cGUgY2hhbmdlcywgdGhpcyBtYXkgbm90IGJlIHJlcXVpcmVkID8/XG4gICAgICB0aGlzLl90eXBlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuICBfdG9nZ2xlU2hvd1Bhc3N3b3JkKGUpIHtcbiAgICBjb25zdCBpc0NoZWNrZWQgPSBlLnRhcmdldC5jaGVja2VkO1xuICAgIGZpcmUodGhpcywgJ25lLWNoYW5nZScsIHtcbiAgICAgIGNvbXBvc2VkOiB0cnVlLFxuICAgICAgYnViYmxlczogdHJ1ZVxuICAgIH0pO1xuICAgIGlmIChpc0NoZWNrZWQpIHtcbiAgICAgIHRoaXMuX3R5cGUgPSAndGV4dCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3R5cGUgPSAncGFzc3dvcmQnO1xuICAgIH1cbiAgfVxuICAvLyBGdW5jdGlvbnNcbiAgX2lucHV0RWxlbWVudCgpIHtcbiAgICByZXR1cm4gaHRtbGA8aW5wdXRcbiAgICAgIHR5cGU9JHt0aGlzLnR5cGUgPT09ICdwYXNzd29yZCcgJiYgdGhpcy5fdHlwZSA/IHRoaXMuX3R5cGUgOiB0aGlzLnR5cGV9XG4gICAgICA/ZGlzYWJsZWQ9JHt0aGlzLmRpc2FibGVkfVxuICAgICAgP3JlYWRvbmx5PSR7dGhpcy5yZWFkb25seX1cbiAgICAgID9yZXF1aXJlZD0ke3RoaXMucmVxdWlyZWR9XG4gICAgICBwbGFjZWhvbGRlcj0ke2lmRGVmaW5lZCh0aGlzLnBsYWNlaG9sZGVyKX1cbiAgICAgIGFyaWEtbGFiZWw9JHt0aGlzLmFyaWFMYWJlbCB8fCBub3RoaW5nfVxuICAgICAgYXJpYS1sYWJlbGxlZGJ5PSR7dGhpcy5hcmlhTGFiZWxsZWRieSB8fCBub3RoaW5nfVxuICAgICAgLnZhbHVlPSR7bGl2ZSh0aGlzLnZhbHVlKX1cbiAgICAgIEBpbnB1dD0ke3RoaXMuX2hhbmRsZUlucHV0fVxuICAgICAgY2xhc3M9JHtjbGFzc01hcCh7XG4gICAgICBlcnJvcjogdGhpcy52YWxpZGF0aW9uU3RhdGUgPT09IFZhbGlkYXRpb25UeXBlLmVycm9yLFxuICAgICAgd2FybmluZzogdGhpcy52YWxpZGF0aW9uU3RhdGUgPT09IFZhbGlkYXRpb25UeXBlLndhcm5pbmdcbiAgICB9KX1cbiAgICAvPmA7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IGVuYWJsZVNob3dQYXNzd29yZCA9IHRoaXMudHlwZSA9PT0gJ3Bhc3N3b3JkJztcbiAgICByZXR1cm4gaHRtbGAgPGRpdj5cbiAgICAgICR7dGhpcy5yZW5kZXJXaXRoVmFsaWRhdGlvbihodG1sYCA8ZGl2XG4gICAgICAgIGNsYXNzPSR7Y2xhc3NNYXAoe1xuICAgICAgY29udGFpbmVyOiB0cnVlLFxuICAgICAgJ2hhcy1sZWZ0LWljb24nOiB0aGlzLmxlZnRJY29uVHlwZSAhPT0gdW5kZWZpbmVkXG4gICAgfSl9XG4gICAgICA+XG4gICAgICAgIDxkaXYgY2xhc3M9JHt0aGlzLmxlZnRJY29uVHlwZSAhPT0gdW5kZWZpbmVkID8gJ2xlZnQtaWNvbicgOiAnaGlkZGVuJ30+XG4gICAgICAgICAgJHtyZW5kZXJJY29uKHtcbiAgICAgIHR5cGU6IHRoaXMubGVmdEljb25UeXBlXG4gICAgfSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICAke3RoaXMuX2lucHV0RWxlbWVudCgpfVxuICAgICAgICAke3doZW4odGhpcy5yZXNldCwgKCkgPT4gaHRtbGAgPGJ1dHRvblxuICAgICAgICAgICAgaWQ9XCJjbGVhci1idXR0b25cIlxuICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICBjbGFzcz0ke3RoaXMudmFsdWUubGVuZ3RoID4gMCA/ICdjbGVhci1idXR0b24nIDogJ2hpZGRlbid9XG4gICAgICAgICAgICBAY2xpY2s9JHt0aGlzLl9oYW5kbGVDbGlja0NsZWFyfVxuICAgICAgICAgICAgP2Rpc2FibGVkPSR7dGhpcy5kaXNhYmxlZH1cbiAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJjbGVhci1idXR0b25cIlxuICAgICAgICAgID5cbiAgICAgICAgICAgICR7cmVuZGVySWNvbih7XG4gICAgICB0eXBlQXNIdG1sOiBjbG9zZURlZmF1bHQsXG4gICAgICBjbGFzc05hbWU6ICdjbGVhci1idXR0b24taWNvbidcbiAgICB9KX1cbiAgICAgICAgICA8L2J1dHRvbj5gKX1cbiAgICAgIDwvZGl2PmApfVxuICAgICAgJHtlbmFibGVTaG93UGFzc3dvcmQgPyBodG1sYDxkaXYgY2xhc3M9XCJzaG93LXBhc3N3b3JkLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPG5lLWNoZWNrYm94XG4gICAgICAgICAgICAgIHRleHQ9XCIke3RoaXMucGFzc3dvcmRXaXRoVmlzaWJpbGl0eUxhYmVsfVwiXG4gICAgICAgICAgICAgIEBjbGljaz1cIiR7ZSA9PiB0aGlzLl90b2dnbGVTaG93UGFzc3dvcmQoZSl9XCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgIDwvbmUtY2hlY2tib3g+XG4gICAgICAgICAgPC9kaXY+YCA6IG5vdGhpbmd9XG4gICAgPC9kaXY+YDtcbiAgfVxufTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogQm9vbGVhbixcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZUlucHV0LnByb3RvdHlwZSwgXCJkaXNhYmxlZFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBCb29sZWFuLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIE5lSW5wdXQucHJvdG90eXBlLCBcInJlYWRvbmx5XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IEJvb2xlYW4sXG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVJbnB1dC5wcm90b3R5cGUsIFwicmVxdWlyZWRcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogU3RyaW5nXG59KV0sIE5lSW5wdXQucHJvdG90eXBlLCBcInBsYWNlaG9sZGVyXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHJlZmxlY3Q6IHRydWUsXG4gIGF0dHJpYnV0ZTogJ3R5cGUnLFxuICB0eXBlOiBTdHJpbmdcbn0pXSwgTmVJbnB1dC5wcm90b3R5cGUsIFwidHlwZVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBTdHJpbmcsXG4gIGF0dHJpYnV0ZTogJ25lLWFyaWEtbGFiZWwnXG59KV0sIE5lSW5wdXQucHJvdG90eXBlLCBcImFyaWFMYWJlbFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBTdHJpbmcsXG4gIGF0dHJpYnV0ZTogJ25lLWFyaWEtbGFiZWxsZWRieSdcbn0pXSwgTmVJbnB1dC5wcm90b3R5cGUsIFwiYXJpYUxhYmVsbGVkYnlcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogU3RyaW5nLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIE5lSW5wdXQucHJvdG90eXBlLCBcInZhbHVlXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZyxcbiAgYXR0cmlidXRlOiAnbGVmdC1pY29uJyxcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZUlucHV0LnByb3RvdHlwZSwgXCJsZWZ0SWNvblR5cGVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogQm9vbGVhbixcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZUlucHV0LnByb3RvdHlwZSwgXCJyZXNldFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBTdHJpbmcsXG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVJbnB1dC5wcm90b3R5cGUsIFwicGFzc3dvcmRXaXRoVmlzaWJpbGl0eUxhYmVsXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtzdGF0ZSgpXSwgTmVJbnB1dC5wcm90b3R5cGUsIFwiX3R5cGVcIiwgdm9pZCAwKTtcbk5lSW5wdXQgPSBfX2RlY29yYXRlKFtjdXN0b21FbGVtZW50KCduZS1pbnB1dCcpXSwgTmVJbnB1dCk7XG5cbmV4cG9ydCB7IE5lSW5wdXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlucHV0LmpzLm1hcFxuIiwiaW1wb3J0IHsgYyBhcyBjb21tb25TdHlsZXMsIF8gYXMgX19kZWNvcmF0ZSB9IGZyb20gJy4vYmFzZS5zdHlsZXMtMTFkMzkxODEuanMnO1xuaW1wb3J0IHsgU2NvcGVkRWxlbWVudHNNaXhpbiB9IGZyb20gJ0BvcGVuLXdjL3Njb3BlZC1lbGVtZW50cyc7XG5pbXBvcnQgeyBjc3MsIExpdEVsZW1lbnQsIGh0bWwsIG5vdGhpbmcgfSBmcm9tICdsaXQnO1xuaW1wb3J0IHsgcHJvcGVydHksIHN0YXRlLCBjdXN0b21FbGVtZW50IH0gZnJvbSAnbGl0L2RlY29yYXRvcnMuanMnO1xuaW1wb3J0IHsgY2xhc3NNYXAgfSBmcm9tICdsaXQvZGlyZWN0aXZlcy9jbGFzcy1tYXAuanMnO1xuaW1wb3J0IHsgaWZEZWZpbmVkIH0gZnJvbSAnbGl0L2RpcmVjdGl2ZXMvaWYtZGVmaW5lZC5qcyc7XG5pbXBvcnQgeyBjcmVhdGVSZWYsIHJlZiB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL3JlZi5qcyc7XG5pbXBvcnQgeyB1bnNhZmVIVE1MIH0gZnJvbSAnbGl0L2RpcmVjdGl2ZXMvdW5zYWZlLWh0bWwuanMnO1xuaW1wb3J0IHsgd2hlbiB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL3doZW4uanMnO1xuaW1wb3J0IHsgZiBhcyBmaXJlIH0gZnJvbSAnLi9ldmVudHMtMTE3M2Y1NjIuanMnO1xuaW1wb3J0IHsgTmVEcm9wZG93bk1lbnUgfSBmcm9tICcuL2Ryb3Bkb3duLW1lbnUuanMnO1xuaW1wb3J0IHsgTmVEcm9wZG93bk1lbnVJdGVtIH0gZnJvbSAnLi9kcm9wZG93bi1tZW51LWl0ZW0uanMnO1xuaW1wb3J0IHsgTmVJY29uIH0gZnJvbSAnLi9pY29uLmpzJztcbmltcG9ydCAnLi9pY29uLmJhc2UtN2E5MTlkYjIuanMnO1xuaW1wb3J0ICdsaXQvZGlyZWN0aXZlcy9zdHlsZS1tYXAuanMnO1xuaW1wb3J0ICdsaXQvZGlyZWN0aXZlcy91bnRpbC5qcyc7XG5cbi8qKlxuICogRXNjYXBlcyByZWdleCBjb250cm9sIGNoYXJhY3RlcnMgZm91bmQgaW4gYSBzdHJpbmcuXG4gKiBAcGFyYW0gdGV4dCAtIFRoZSB0ZXh0IHRvIGVzY2FwZSBmb3IgUmVnZXhcbiAqIEByZXR1cm5zIFRoZSBlc2NhcGVkIHRleHRcbiAqL1xuY29uc3QgZXNjYXBlRm9yUmVnRXhwID0gdGV4dCA9PiB0ZXh0LnJlcGxhY2UoL1stW1xcXXt9KCkqKz8uLFxcXFxeJHwjXFxzXS9nLCAnXFxcXCQmJyk7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5jb25zdCB0b2tlbnMgPSBjc3NgXG4gICoge1xuICAtLW5lLWxvb2t1cC1maWVsZC1mb250LWZhbWlseTogdmFyKC0tbmUtcmVmLWZvbnQtZmFtaWx5LW9wZW4tc2FucywgT3BlbiBTYW5zKTtcbiAgLS1uZS1sb29rdXAtZmllbGQtZm9udC1zaXplOiB2YXIoLS1uZS1yZWYtZm9udC1zaXplLTA0LCAwLjg3NWVtKTtcbiAgLS1uZS1sb29rdXAtZmllbGQtY29sb3ItdGV4dC1wbGFjZWhvbGRlcjogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktNTAsICM2RDczNzkpO1xuICAtLW5lLWxvb2t1cC1maWVsZC1jb2xvci10ZXh0LWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTkwLCAjMTYxNzE4KTtcbiAgLS1uZS1sb29rdXAtZmllbGQtY29sb3ItdGV4dC1kaXNhYmxlZDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktOTAsICMxNjE3MTgpO1xuICAtLW5lLWxvb2t1cC1maWVsZC1jb2xvci1iYWNrZ3JvdW5kLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci13aGl0ZSwgI2ZmZmZmZik7XG4gIC0tbmUtbG9va3VwLWZpZWxkLWNvbG9yLWJhY2tncm91bmQtZGlzYWJsZWQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTMwLCAjQTdBQkFGKTtcbiAgLS1uZS1sb29rdXAtZmllbGQtY29sb3ItaWNvbjogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktOTAsICMxNjE3MTgpO1xuICAtLW5lLWxvb2t1cC1maWVsZC1jb2xvci1ib3JkZXItZGVmYXVsdDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXk0MCwgIzg5OEY5NCk7XG4gIC0tbmUtbG9va3VwLWZpZWxkLWNvbG9yLWJvcmRlci1hY3RpdmU6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTYwLCAjMDA2QkQ2KTtcbiAgLS1uZS1sb29rdXAtZmllbGQtY29sb3ItYm9yZGVyLWZvY3VzOiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS0yMCwgI0EzRDFGRik7XG4gIC0tbmUtbG9va3VwLWZpZWxkLWNvbG9yLWJvcmRlci1kaXNhYmxlZDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktMzAsICNBN0FCQUYpO1xuICAtLW5lLWxvb2t1cC1maWVsZC1zaXppbmctaWNvbjogdmFyKC0tbmUtcmVmLXNpemluZy0wNCwgMWVtKTtcbiAgLS1uZS1sb29rdXAtZmllbGQtcGFkZGluZy12ZXJ0aWNhbDogdmFyKC0tbmUtcmVmLXNwYWNpbmcteC1zbWFsbCwgMC41ZW0pO1xuICAtLW5lLWxvb2t1cC1maWVsZC1wYWRkaW5nLWhvcml6b250YWw6IHZhcigtLW5lLXJlZi1zcGFjaW5nLXgtc21hbGwsIDAuNWVtKTtcbiAgLS1uZS1sb29rdXAtZmllbGQtY29udGVudC1nYXA6IHZhcigtLW5lLXJlZi1zcGFjaW5nLXgtc21hbGwsIDAuNWVtKTtcbiAgLS1uZS1sb29rdXAtZmllbGQtYm9yZGVyLXJhZGl1cy1kZWZhdWx0OiB2YXIoLS1uZS1yZWYtYm9yZGVyLXJhZGl1cy1tZWRpdW0sIC4yNWVtKTtcbiAgLS1uZS1sb29rdXAtZmllbGQtYm9yZGVyLXJhZGl1cy1hY3RpdmUtdG9wOiB2YXIoLS1uZS1yZWYtYm9yZGVyLXJhZGl1cy1tZWRpdW0sIC4yNWVtKTtcbiAgLS1uZS1sb29rdXAtZmllbGQtYm9yZGVyLXJhZGl1cy1hY3RpdmUtYm90dG9tOiB2YXIoLS1uZS1yZWYtYm9yZGVyLXJhZGl1cy1ub25lLCAwKTtcbiAgLS1uZS1sb29rdXAtZmllbGQtYm9yZGVyLXdpZHRoLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1ib3JkZXItd2lkdGgtc21hbGwsIDFweCk7XG4gIC0tbmUtbG9va3VwLWZpZWxkLWJvcmRlci13aWR0aC1mb2N1czogdmFyKC0tbmUtcmVmLWJvcmRlci13aWR0aC1sYXJnZSwgNHB4KTtcbiAgLS1uZS1sb29rdXAtZmllbGQtZ2FwOiB2YXIoLS1uZS1yZWYtc3BhY2luZy14eC1zbWFsbCwgMC4yNWVtKTtcbiAgLS1uZS1sb29rdXAtZmllbGQtZm9udC13ZWlnaHQtaGlnaGxpZ2h0OiB2YXIoLS1uZS1yZWYtZm9udC13ZWlnaHQtYm9sZCwgQm9sZCk7XG59XG5gO1xuXG5jb25zdCBiYXNlID0gY3NzYFxuICAuY29udGFpbmVyIHtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBwYWRkaW5nOiAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG5cbiAgLndyYXBwZXIge1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG5cbiAgaW5wdXQge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmc6IHZhcigtLW5lLWxvb2t1cC1maWVsZC1wYWRkaW5nLXZlcnRpY2FsKVxuICAgICAgdmFyKC0tbmUtbG9va3VwLWZpZWxkLXBhZGRpbmctaG9yaXpvbnRhbClcbiAgICAgIHZhcigtLW5lLWxvb2t1cC1maWVsZC1wYWRkaW5nLXZlcnRpY2FsKVxuICAgICAgdmFyKC0tbmUtbG9va3VwLWZpZWxkLXBhZGRpbmctaG9yaXpvbnRhbCk7XG4gICAgZ2FwOiB2YXIoLS1uZS1sb29rdXAtZmllbGQtY29udGVudC1nYXApO1xuICAgIGJvcmRlcjogdmFyKC0tbmUtbG9va3VwLWZpZWxkLWJvcmRlci13aWR0aC1kZWZhdWx0KSBzb2xpZFxuICAgICAgdmFyKC0tbmUtbG9va3VwLWZpZWxkLWNvbG9yLWJvcmRlci1kZWZhdWx0KTtcbiAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1uZS1sb29rdXAtZmllbGQtYm9yZGVyLXJhZGl1cy1kZWZhdWx0KTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1sb29rdXAtZmllbGQtY29sb3ItYmFja2dyb3VuZC1kZWZhdWx0KTtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIG91dGxpbmU6IG5vbmU7XG4gICAgZmxleC1ncm93OiAxO1xuICAgIGZvbnQtZmFtaWx5OiB2YXIoLS1uZS1sb29rdXAtZmllbGQtZm9udC1mYW1pbHkpO1xuICAgIGZvbnQtc2l6ZTogdmFyKC0tbmUtbG9va3VwLWZpZWxkLWZvbnQtc2l6ZSk7XG4gICAgY29sb3I6IHZhcigtLW5lLWxvb2t1cC1maWVsZC1jb2xvci10ZXh0LWRlZmF1bHQpO1xuICB9XG5cbiAgaW5wdXQuaGFzLWljb24ge1xuICAgIHBhZGRpbmctcmlnaHQ6IDJlbTtcbiAgfVxuXG4gIC5zdGF0ZS1pbmRpY2F0b3IuZGlzYWJsZWQge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLWxvb2t1cC1maWVsZC1jb2xvci1iYWNrZ3JvdW5kLWRpc2FibGVkKTtcbiAgfVxuXG4gIGlucHV0OmZvY3VzIHtcbiAgICBvdXRsaW5lOiB2YXIoLS1uZS1sb29rdXAtZmllbGQtYm9yZGVyLXdpZHRoLWZvY3VzKSBzb2xpZFxuICAgICAgdmFyKC0tbmUtbG9va3VwLWZpZWxkLWNvbG9yLWJvcmRlci1mb2N1cyk7XG4gICAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XG4gIH1cblxuICBpbnB1dC5hY3RpdmUsXG4gIGlucHV0LmFjdGl2ZTpmb2N1cyB7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgICBib3JkZXI6IHZhcigtLW5lLWxvb2t1cC1maWVsZC1ib3JkZXItd2lkdGgtZGVmYXVsdCkgc29saWRcbiAgICAgIHZhcigtLW5lLWxvb2t1cC1maWVsZC1jb2xvci1ib3JkZXItYWN0aXZlKTtcbiAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1uZS1sb29rdXAtZmllbGQtYm9yZGVyLXJhZGl1cy1hY3RpdmUtdG9wKVxuICAgICAgdmFyKC0tbmUtbG9va3VwLWZpZWxkLWJvcmRlci1yYWRpdXMtYWN0aXZlLXRvcClcbiAgICAgIHZhcigtLW5lLWxvb2t1cC1maWVsZC1ib3JkZXItcmFkaXVzLWFjdGl2ZS1ib3R0b20pXG4gICAgICB2YXIoLS1uZS1sb29rdXAtZmllbGQtYm9yZGVyLXJhZGl1cy1hY3RpdmUtYm90dG9tKTtcbiAgfVxuXG4gIGlucHV0LmRpc2FibGVkIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1sb29rdXAtZmllbGQtY29sb3ItYmFja2dyb3VuZC1kaXNhYmxlZCk7XG4gICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1uZS1sb29rdXAtZmllbGQtY29sb3ItYm9yZGVyLWRpc2FibGVkKTtcbiAgICBjb2xvcjogdmFyKC0tbmUtbG9va3VwLWZpZWxkLWNvbG9yLXRleHQtZGlzYWJsZWQpO1xuICB9XG5cbiAgLmljb24ge1xuICAgIGNvbG9yOiB2YXIoLS1uZS1sb29rdXAtZmllbGQtY29sb3ItaWNvbik7XG4gICAgd2lkdGg6IHZhcigtLW5lLWxvb2t1cC1maWVsZC1zaXppbmctaWNvbik7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICByaWdodDogMDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgICBwYWRkaW5nOiB2YXIoLS1uZS1sb29rdXAtZmllbGQtcGFkZGluZy12ZXJ0aWNhbClcbiAgICAgIHZhcigtLW5lLWxvb2t1cC1maWVsZC1wYWRkaW5nLWhvcml6b250YWwpXG4gICAgICB2YXIoLS1uZS1sb29rdXAtZmllbGQtcGFkZGluZy12ZXJ0aWNhbClcbiAgICAgIHZhcigtLW5lLWxvb2t1cC1maWVsZC1wYWRkaW5nLWhvcml6b250YWwpO1xuICAgIGN1cnNvcjogdW5zZXQ7XG4gICAgZmxleC1zaHJpbms6IDA7XG4gIH1cblxuICAuZW1waGFzaXMge1xuICAgIGZvbnQtd2VpZ2h0OiB2YXIoLS1uZS1sb29rdXAtZmllbGQtZm9udC13ZWlnaHQtaGlnaGxpZ2h0KTtcbiAgfVxuXG4gIC5lbXB0eS1saXN0LFxuICAuZGF0YWxpc3QsXG4gIC5sb2FkaW5nIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgei1pbmRleDogMTtcbiAgfVxuYDtcbmNvbnN0IHN0eWxlcyA9IFt0b2tlbnMsIGNvbW1vblN0eWxlcywgYmFzZV07XG5cbnZhciBfY2xhc3M7XG52YXIgTmVMb29rdXBGaWVsZF8xO1xuY29uc3QgZHJvcGRvd25NZW51VmFyaWFudHNBcnJheSA9IFsnZWxldmF0ZWQnLCAnZmxhdCddO1xuLyoqXG4gKiBAdGFnIG5lLWxvb2t1cC1maWVsZFxuICogQHRhZ25hbWUgbmUtbG9va3VwLWZpZWxkXG4gKlxuICogQGV2ZW50IG5lLWlucHV0IFJhaXNlZCB3aGVuIHRoZSB2YWx1ZSBvZiB0aGUgaW50ZXJuYWwgaW5wdXQgaXMgY2hhbmdlZFxuICogQGV2ZW50IG5lLWNoYW5nZSBSYWlzZWQgd2hlbiB0aGUgdmFsdWUgb2YgdGhlIGxvb2t1cCBmaWVsZCBpcyBjaGFuZ2VkIHRvIGEgdmFsaWQgdmFsdWVcbiAqL1xubGV0IE5lTG9va3VwRmllbGQgPSBOZUxvb2t1cEZpZWxkXzEgPSAoX2NsYXNzID0gY2xhc3MgTmVMb29rdXBGaWVsZCBleHRlbmRzIFNjb3BlZEVsZW1lbnRzTWl4aW4oTGl0RWxlbWVudCkge1xuICBzdGF0aWMgZ2V0IHNjb3BlZEVsZW1lbnRzKCkge1xuICAgIHJldHVybiB7XG4gICAgICAnbmUtZHJvcGRvd24tbWVudS1pdGVtJzogTmVEcm9wZG93bk1lbnVJdGVtLFxuICAgICAgJ25lLWRyb3Bkb3duLW1lbnUnOiBOZURyb3Bkb3duTWVudSxcbiAgICAgICduZS1pY29uJzogTmVJY29uXG4gICAgfTtcbiAgfVxuICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9XG4gIC8qKiBTcGVjaWZpZXMgdGhlIGxpc3Qgb2YgZGF0YSBsaW5rZWQgdG8gdGhlIGxvb2t1cCBmaWVsZCAqL1xuICBzZXQgZGF0YUxpc3QodmFsKSB7XG4gICAgY29uc3Qgb2xkRGF0YUxpc3QgPSB0aGlzLl9kYXRhTGlzdDtcbiAgICB0aGlzLl9pc0xvYWRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9kYXRhTGlzdCA9IHZhbDtcbiAgICBpZiAodGhpcy5leHRlcm5hbExpc3RGaWx0ZXIpIHtcbiAgICAgIHRoaXMuX2ZpbHRlcmVkTGlzdCA9IHZhbDtcbiAgICB9XG4gICAgdGhpcy5yZXF1ZXN0VXBkYXRlKCdkYXRhTGlzdCcsIG9sZERhdGFMaXN0KTtcbiAgfVxuICBnZXQgZGF0YUxpc3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGFMaXN0O1xuICB9XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgLyoqIFNwZWNpZmllcyB0aGUgdmFsdWUgb2YgdGhlIGxvb2t1cCBmaWVsZCAqL1xuICAgIHRoaXMudmFsdWUgPSAnJztcbiAgICAvKiogU3BlY2lmaWVzIHRoZSBkaXNwbGF5IHZhbHVlIG9mIHRoZSBsb29rdXAgZmllbGQgKi9cbiAgICB0aGlzLmRpc3BsYXlWYWx1ZSA9ICcnO1xuICAgIC8qKiBTcGVjaWZpZXMgd2hldGhlciB0aGUgbG9va3VwIGZpZWxkIHNob3VsZCBiZSBkaXNhYmxlZCAqL1xuICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAvKiogU3BlY2lmaWVzIHdoZXRoZXIgdGhlIGxvb2t1cCBmaWVsZCBzaG91bGQgYmUgcmVhZCBvbmx5ICovXG4gICAgdGhpcy5yZWFkb25seSA9IGZhbHNlO1xuICAgIC8qKiBTcGVjaWZpZXMgd2hldGhlciB0aGUgZGF0YSBsaXN0IG9mIHRoZSBsb29rdXAgZmllbGQgaXMgZmlsdGVyZWQgZXh0ZXJuYWxseSAqL1xuICAgIHRoaXMuZXh0ZXJuYWxMaXN0RmlsdGVyID0gZmFsc2U7XG4gICAgLyoqIFNwZWNpZmllcyB0aGUgYXJpYS1sYWJlbCBmb3IgdGhlIGxvb2t1cCBmaWVsZCAqL1xuICAgIHRoaXMuYXJpYUxhYmVsID0gJyc7XG4gICAgLyoqIFNwZWNpZmllcyB0aGUgYXJpYS1sYWJlbGxlZGJ5IGZvciB0aGUgbG9va3VwIGZpZWxkICovXG4gICAgdGhpcy5hcmlhTGFiZWxsZWRieSA9ICcnO1xuICAgIC8qKiBTcGVjaWZpZXMgdGhlIHRleHQgdG8gZGlzcGxheSBpbiB0aGUgbGlzdCB3aGVuIG5vIHJlc3VsdHMgbWF0Y2ggdGhlIHNlYXJjaCBzdHJpbmcgZW50ZXJlZCAqL1xuICAgIHRoaXMubm9SZXN1bHRzVGV4dCA9ICdObyBtYXRjaGVzIGZvdW5kJztcbiAgICAvKiogU3BlY2lmaWVzIHRoZSB0ZXh0IHRvIGRpc3BsYXkgaW4gdGhlIGxpc3Qgd2hlbiB0aGUgdXNlciBoYXMgbm90IHR5cGVkIGEgc2VhcmNoIHN0cmluZyB5ZXQsIGFuZCBhIGxpc3QgaXNudCBwb3B1bGF0ZWQgKi9cbiAgICB0aGlzLnR5cGVUb1NlYXJjaFRleHQgPSAnVHlwZSB0byBzZWFyY2gnO1xuICAgIC8qKiBTcGVjaWZpZXMgdGhlIHRleHQgdG8gZGlzcGxheSBpbiB0aGUgbGlzdCB3aGVuIHRoZSBzZWFyY2ggdG8gcG9wdWxhdGUgdGhlIGxpc3QgaXMgc3RpbGwgaW4gcHJvZ3Jlc3MgKi9cbiAgICB0aGlzLnNlYXJjaExvYWRpbmdUZXh0ID0gJ0xvYWRpbmcuLi4nO1xuICAgIHRoaXMuZHJvcGRvd25WYXJpYW50ID0gJ2ZsYXQnO1xuICAgIHRoaXMuX2V4cGFuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5faXNMb2FkaW5nID0gZmFsc2U7XG4gICAgdGhpcy5faWdub3JlRm9jdXNPdXQgPSBmYWxzZTtcbiAgICB0aGlzLl9kYXRhTGlzdCA9IFtdO1xuICAgIHRoaXMuX2ZpbHRlcmVkTGlzdCA9IFtdO1xuICAgIHRoaXMuX2lucHV0ID0gY3JlYXRlUmVmKCk7XG4gICAgdGhpcy5fc2VhcmNoVmFsdWUgPSAnJztcbiAgICB0aGlzLl9wcmV2aW91c1ZhbHVlID0gJyc7XG4gICAgdGhpcy51cGRhdGVkID0gKCkgPT4ge1xuICAgICAgdGhpcy5fdXBkYXRlRGlzcGxheVRleHQoKTtcbiAgICB9O1xuICAgIHRoaXMuX3VwZGF0ZURpc3BsYXlUZXh0ID0gKCkgPT4ge1xuICAgICAgaWYgKHRoaXMudmFsdWUgJiYgdGhpcy52YWx1ZSAhPT0gJycpIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YUxpc3QgJiYgdGhpcy5kYXRhTGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdGhpcy5kaXNwbGF5VmFsdWUgPSB0aGlzLmRhdGFMaXN0LmZpbmQoeCA9PiB4LnZhbHVlID09PSB0aGlzLnZhbHVlKT8udGV4dDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kaXNwbGF5VmFsdWUgPSAnJztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9pbnB1dC52YWx1ZSAmJiB0aGlzLmRpc3BsYXlWYWx1ZSkge1xuICAgICAgICB0aGlzLl9pbnB1dC52YWx1ZS52YWx1ZSA9IHRoaXMuZGlzcGxheVZhbHVlO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5fZmlsdGVyTGlzdCA9ICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5fc2VhcmNoVmFsdWUpIHtcbiAgICAgICAgdGhpcy5fZmlsdGVyZWRMaXN0ID0gW107XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVzY2FwZWRTZWFyY2hWYWx1ZSA9IGVzY2FwZUZvclJlZ0V4cCh0aGlzLl9zZWFyY2hWYWx1ZSk7XG4gICAgICBjb25zdCBtYXRjaGVyID0gbmV3IFJlZ0V4cChlc2NhcGVkU2VhcmNoVmFsdWUsICdnaScpO1xuICAgICAgdGhpcy5fZmlsdGVyZWRMaXN0ID0gdGhpcy5kYXRhTGlzdC5maWx0ZXIoeCA9PiAhIXgudGV4dC5tYXRjaChtYXRjaGVyKSk7XG4gICAgfTtcbiAgICB0aGlzLl9vbkRvY3VtZW50Q2xpY2sgPSAoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuX2V4cGFuZGVkKSByZXR1cm47XG4gICAgICB0aGlzLl9leHBhbmRlZCA9IGZhbHNlO1xuICAgICAgLy8gV2hlbiBub3RoaW5nIGhhcyBiZWVuIHNlbGVjdGVkIGZyb20gdGhlIGxpc3QsIHNob3cgdGhlIGxhc3Qgc2VsZWN0ZWQgdmFsdWUgYWdhaW4uXG4gICAgICAvLyBVbmxlc3MgdGhlIGlucHV0IGJveCB2YWx1ZSBoYXMgYmVlbiBjbGVhcmVkLCB0aGVuIGNsZWFyIHRoZSB2YWx1ZS5cbiAgICAgIGlmICh0aGlzLl9pbnB1dC52YWx1ZT8udmFsdWUgJiYgdGhpcy5fcHJldmlvdXNWYWx1ZSkge1xuICAgICAgICB0aGlzLl9pbnB1dC52YWx1ZS52YWx1ZSA9IHRoaXMuX3ByZXZpb3VzVmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmaXJlKHRoaXMsICduZS1jaGFuZ2UnLCB7XG4gICAgICAgICAgY29tcG9zZWQ6IHRydWUsXG4gICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLnZhbHVlXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuX29uRHJvcERvd25Nb3VzZURvd24gPSAoKSA9PiB7XG4gICAgICB0aGlzLl9pZ25vcmVGb2N1c091dCA9IHRydWU7XG4gICAgfTtcbiAgICB0aGlzLl9vbk1vdXNlRG93biA9IGV2dCA9PiB7XG4gICAgICBpZiAodGhpcy5kaXNhYmxlZCB8fCB0aGlzLnJlYWRvbmx5KSByZXR1cm47XG4gICAgICAvLyBIVE1MIGRhdGEgbGlzdCBlbGVtZW50IHdpbGwgZXhwYW5kIHRoZSBsaXN0IHdoZW4gZm9jdXNpbmcgd2l0aCBjbGljaywgYnV0IG5vdCB0YWIuXG4gICAgICAvLyBJdCBkb2VzIG5vdCBjbG9zZSB3aGVuIGNsaWNraW5nIGFnYWluLCBvbmx5IHdoZW4gY2xpY2tpbmcgYXdheSBvciBzZWxlY3RpbmcuXG4gICAgICB0aGlzLl9leHBhbmRlZCA9IHRydWU7XG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfTtcbiAgICB0aGlzLl9vbklucHV0ID0gZXZ0ID0+IHtcbiAgICAgIGlmICh0aGlzLmRpc2FibGVkIHx8IHRoaXMucmVhZG9ubHkpIHJldHVybjtcbiAgICAgIHRoaXMudmFsdWUgPSAnJztcbiAgICAgIHRoaXMuX3NlYXJjaFZhbHVlID0gdGhpcy5faW5wdXQudmFsdWU/LnZhbHVlO1xuICAgICAgdGhpcy5kaXNwbGF5VmFsdWUgPSB0aGlzLl9zZWFyY2hWYWx1ZTtcbiAgICAgIHRoaXMuX2V4cGFuZGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuX2lzTG9hZGluZyA9IHRydWU7XG4gICAgICBpZiAoIXRoaXMuZXh0ZXJuYWxMaXN0RmlsdGVyKSB7XG4gICAgICAgIHRoaXMuX2ZpbHRlckxpc3QoKTtcbiAgICAgIH1cbiAgICAgIGZpcmUodGhpcywgJ25lLWlucHV0Jywge1xuICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICBkYXRhOiBldnQuZGF0YSxcbiAgICAgICAgICB2YWx1ZTogdGhpcy5faW5wdXQudmFsdWU/LnZhbHVlXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gICAgdGhpcy5fb25Gb2N1c091dCA9ICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5faWdub3JlRm9jdXNPdXQpIHtcbiAgICAgICAgLy8gZG8gdGhlIHNhbWUgd29yayB0aGF0IHdvdWxkIGJlIGRvbmUgaWYgdGhlIHVzZXIgY2xpY2tlZCBvdXQuXG4gICAgICAgIHRoaXMuX29uRG9jdW1lbnRDbGljaygpO1xuICAgICAgfVxuICAgICAgdGhpcy5faWdub3JlRm9jdXNPdXQgPSBmYWxzZTtcbiAgICB9O1xuICAgIHRoaXMuX29uTGlzdEl0ZW1DbGlja2VkID0gKGV2dCwgdmFsdWUpID0+IHtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgIHRoaXMuX3VwZGF0ZURpc3BsYXlUZXh0KCk7XG4gICAgICB0aGlzLl9zZWFyY2hWYWx1ZSA9IHRoaXMuZGlzcGxheVZhbHVlO1xuICAgICAgdGhpcy5fcHJldmlvdXNWYWx1ZSA9IHRoaXMuZGlzcGxheVZhbHVlO1xuICAgICAgZmlyZSh0aGlzLCAnbmUtY2hhbmdlJywge1xuICAgICAgICBjb21wb3NlZDogdHJ1ZSxcbiAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgdmFsdWU6IHRoaXMudmFsdWVcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLl9leHBhbmRlZCA9IGZhbHNlO1xuICAgIH07XG4gICAgdGhpcy5fcmVuZGVySW5wdXQgPSAoKSA9PiBodG1sYCA8aW5wdXRcbiAgICBjbGFzcz0ke2NsYXNzTWFwKHtcbiAgICAgICdoYXMtaWNvbic6IHRoaXMuaWNvbiAhPT0gdW5kZWZpbmVkLFxuICAgICAgYWN0aXZlOiB0aGlzLl9leHBhbmRlZCxcbiAgICAgIGRpc2FibGVkOiB0aGlzLmRpc2FibGVkXG4gICAgfSl9XG4gICAgdHlwZT1cInRleHRcIlxuICAgICR7cmVmKHRoaXMuX2lucHV0KX1cbiAgICA/cmVhZG9ubHk9JHt0aGlzLnJlYWRvbmx5IHx8IHRoaXMuZGlzYWJsZWR9XG4gICAgYXJpYS1sYWJlbD0ke3RoaXMuYXJpYUxhYmVsIHx8IG5vdGhpbmd9XG4gICAgYXJpYS1sYWJlbGxlZGJ5PSR7dGhpcy5hcmlhTGFiZWxsZWRieSB8fCBub3RoaW5nfVxuICAgIHBsYWNlaG9sZGVyPSR7aWZEZWZpbmVkKHRoaXMucGxhY2Vob2xkZXIpfVxuICAgIEBrZXlkb3duPSR7TmVMb29rdXBGaWVsZF8xLl9vbktleURvd259XG4gICAgQGlucHV0PSR7dGhpcy5fb25JbnB1dH1cbiAgICBAbW91c2Vkb3duPSR7dGhpcy5fb25Nb3VzZURvd259XG4gICAgQGNsaWNrPSR7TmVMb29rdXBGaWVsZF8xLl9vbkNsaWNrfVxuICAgIEBmb2N1c291dD0ke3RoaXMuX29uRm9jdXNPdXR9XG4gIC8+YDtcbiAgICB0aGlzLl9yZW5kZXJMaXN0SXRlbXMgPSAoKSA9PiBodG1sYDxkaXYgY2xhc3M9XCJkYXRhbGlzdFwiPlxuICAgIDxuZS1kcm9wZG93bi1tZW51IHZhcmlhbnQ9JHt0aGlzLmRyb3Bkb3duVmFyaWFudH0+XG4gICAgICAke3RoaXMuX2ZpbHRlcmVkTGlzdC5tYXAoaXRlbSA9PiBodG1sYDxuZS1kcm9wZG93bi1tZW51LWl0ZW1cbiAgICAgICAgICBuZS1hcmlhLWxhYmVsPSR7aWZEZWZpbmVkKGl0ZW0uYXJpYUxhYmVsKX1cbiAgICAgICAgICBAbmUtY2xpY2s9JHtldnQgPT4gdGhpcy5fb25MaXN0SXRlbUNsaWNrZWQoZXZ0LCBpdGVtLnZhbHVlKX1cbiAgICAgICAgICBAbW91c2Vkb3duPSR7dGhpcy5fb25Ecm9wRG93bk1vdXNlRG93bn1cbiAgICAgICAgICA+PHNwYW4+JHt0aGlzLl9yZW5kZXJXaXRoSGlnaGxpZ2h0KGl0ZW0udGV4dCl9PC9zcGFuPlxuICAgICAgICAgIDxzcGFuIHNsb3Q9XCJzdWItdGV4dFwiPiR7aXRlbS5zdWJUZXh0fTwvc3Bhbj48L25lLWRyb3Bkb3duLW1lbnUtaXRlbVxuICAgICAgICA+YCl9XG4gICAgPC9uZS1kcm9wZG93bi1tZW51PlxuICA8L2Rpdj5gO1xuICAgIHRoaXMuX3JlbmRlckVtcHR5TGlzdCA9ICgpID0+IGh0bWxgPGRpdiBjbGFzcz1cImVtcHR5LWxpc3RcIj5cbiAgICA8bmUtZHJvcGRvd24tbWVudSB2YXJpYW50PSR7dGhpcy5kcm9wZG93blZhcmlhbnR9PlxuICAgICAgPG5lLWRyb3Bkb3duLW1lbnUtaXRlbSBkaXNhYmxlZD1cIlwiXG4gICAgICAgID4ke3doZW4odGhpcy5fc2VhcmNoVmFsdWUsICgpID0+IHRoaXMubm9SZXN1bHRzVGV4dCwgKCkgPT4gdGhpcy50eXBlVG9TZWFyY2hUZXh0KX08L25lLWRyb3Bkb3duLW1lbnUtaXRlbVxuICAgICAgPlxuICAgIDwvbmUtZHJvcGRvd24tbWVudT5cbiAgPC9kaXY+YDtcbiAgICB0aGlzLl9yZW5kZXJMb2FkaW5nSW5kaWNhdG9yID0gKCkgPT4gaHRtbGA8ZGl2IGNsYXNzPVwibG9hZGluZ1wiPlxuICAgIDxuZS1kcm9wZG93bi1tZW51IHZhcmlhbnQ9JHt0aGlzLmRyb3Bkb3duVmFyaWFudH0+XG4gICAgICA8bmUtZHJvcGRvd24tbWVudS1pdGVtIGRpc2FibGVkPVwiXCJcbiAgICAgICAgPiR7dGhpcy5zZWFyY2hMb2FkaW5nVGV4dH08L25lLWRyb3Bkb3duLW1lbnUtaXRlbVxuICAgICAgPlxuICAgIDwvbmUtZHJvcGRvd24tbWVudT5cbiAgPC9kaXY+YDtcbiAgICB0aGlzLl9yZW5kZXJXaXRoSGlnaGxpZ2h0ID0gdGV4dCA9PiB7XG4gICAgICBpZiAoIXRoaXMuX3NlYXJjaFZhbHVlIHx8ICF0ZXh0KSByZXR1cm4gdGV4dDtcbiAgICAgIGNvbnN0IGVzY2FwZWRTZWFyY2hWYWx1ZSA9IGVzY2FwZUZvclJlZ0V4cCh0aGlzLl9zZWFyY2hWYWx1ZSk7XG4gICAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoZXNjYXBlZFNlYXJjaFZhbHVlLCAnZ2knKTtcbiAgICAgIGNvbnN0IG1hdGNoZXMgPSB0ZXh0Lm1hdGNoKHJlZ2V4KTtcbiAgICAgIGNvbnN0IHNwbGl0cyA9IHRleHQuc3BsaXQocmVnZXgpO1xuICAgICAgaWYgKCFtYXRjaGVzIHx8ICFzcGxpdHMpIHJldHVybiB0ZXh0O1xuICAgICAgbGV0IGRpc3BsYXlFbGVtZW50cyA9ICcnO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBsdXNwbHVzXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNwbGl0cy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgZGlzcGxheUVsZW1lbnRzICs9IGAke3NwbGl0c1tpXX08c3BhbiBjbGFzcz1cImVtcGhhc2lzXCI+JHttYXRjaGVzW2ldfTwvc3Bhbj5gO1xuICAgICAgfVxuICAgICAgZGlzcGxheUVsZW1lbnRzICs9IGAke3NwbGl0c1tzcGxpdHMubGVuZ3RoIC0gMV19YDtcbiAgICAgIHJldHVybiBodG1sYCR7dW5zYWZlSFRNTChkaXNwbGF5RWxlbWVudHMpfWA7XG4gICAgfTtcbiAgICB0aGlzLnJlbmRlciA9ICgpID0+IGh0bWxgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxuICAgIDxkaXYgY2xhc3M9XCJzdGF0ZS1pbmRpY2F0b3JcIj5cbiAgICAgICR7dGhpcy5fcmVuZGVySW5wdXQoKX1cbiAgICAgIDxkaXYgY2xhc3M9JHt0aGlzLmljb24gIT09IHVuZGVmaW5lZCA/ICdpY29uJyA6ICdoaWRkZW4nfT5cbiAgICAgICAgPG5lLWljb24gLnR5cGU9JHt0aGlzLmljb259PjwvbmUtaWNvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgICR7d2hlbih0aGlzLl9leHBhbmRlZCAmJiB0aGlzLl9maWx0ZXJlZExpc3QubGVuZ3RoID4gMCwgdGhpcy5fcmVuZGVyTGlzdEl0ZW1zKX1cbiAgICAke3doZW4odGhpcy5fZXhwYW5kZWQgJiYgdGhpcy5fZmlsdGVyZWRMaXN0Lmxlbmd0aCA9PT0gMCAmJiAhdGhpcy5faXNMb2FkaW5nLCB0aGlzLl9yZW5kZXJFbXB0eUxpc3QpfVxuICAgICR7d2hlbih0aGlzLl9leHBhbmRlZCAmJiB0aGlzLl9maWx0ZXJlZExpc3QubGVuZ3RoID09PSAwICYmIHRoaXMuX3NlYXJjaFZhbHVlICYmIHRoaXMuX2lzTG9hZGluZywgdGhpcy5fcmVuZGVyTG9hZGluZ0luZGljYXRvcil9XG4gIDwvZGl2PmA7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9vbkRvY3VtZW50Q2xpY2spO1xuICB9XG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrPy4oKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX29uRG9jdW1lbnRDbGljayk7XG4gIH1cbn0sIF9jbGFzcy5fb25DbGljayA9IGV2dCA9PiB7XG4gIC8vIFdlIGRvbid0IHdhbnQgdGhlIGV2ZW50IHRvIGJ1YmJsZSB0byB0aGUgZG9jdW1lbnQsXG4gIC8vIGFzIGl0IHdpbGwgY2xvc2UgdGhlIGRyb3Bkb3duIG1lbnUuIFRoZSBtb3VzZSBkb3duIGV4cGFuZHMgdGhlIG1lbnUuXG4gIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbn0sIF9jbGFzcy5fb25LZXlEb3duID0gZXZ0ID0+IHtcbiAgLy8gVGhpcyBpcyBuZWNlc3NheSBhcyB0aGUgZXZlbiBidWJibGVzIG91dCBvZiB0aGUgaW5wdXQgYm94IGlmIHdlIGRvbid0IHN0b3AgcHJvcGFnYXRpb25cbiAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xufSwgX2NsYXNzKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogU3RyaW5nXG59KV0sIE5lTG9va3VwRmllbGQucHJvdG90eXBlLCBcInBsYWNlaG9sZGVyXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZyxcbiAgYXR0cmlidXRlOiAndmFsdWUnXG59KV0sIE5lTG9va3VwRmllbGQucHJvdG90eXBlLCBcInZhbHVlXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZyxcbiAgYXR0cmlidXRlOiAnZGlzcGxheS12YWx1ZSdcbn0pXSwgTmVMb29rdXBGaWVsZC5wcm90b3R5cGUsIFwiZGlzcGxheVZhbHVlXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IEJvb2xlYW4sXG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVMb29rdXBGaWVsZC5wcm90b3R5cGUsIFwiZGlzYWJsZWRcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogQm9vbGVhbixcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZUxvb2t1cEZpZWxkLnByb3RvdHlwZSwgXCJyZWFkb25seVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBCb29sZWFuLFxuICBhdHRyaWJ1dGU6ICdleHRlcm5hbC1saXN0LWZpbHRlcicsXG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVMb29rdXBGaWVsZC5wcm90b3R5cGUsIFwiZXh0ZXJuYWxMaXN0RmlsdGVyXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZyxcbiAgYXR0cmlidXRlOiAnbmUtYXJpYS1sYWJlbCcsXG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVMb29rdXBGaWVsZC5wcm90b3R5cGUsIFwiYXJpYUxhYmVsXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZyxcbiAgYXR0cmlidXRlOiAnbmUtYXJpYS1sYWJlbGxlZGJ5JyxcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZUxvb2t1cEZpZWxkLnByb3RvdHlwZSwgXCJhcmlhTGFiZWxsZWRieVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBTdHJpbmcsXG4gIGF0dHJpYnV0ZTogJ2ljb24nLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIE5lTG9va3VwRmllbGQucHJvdG90eXBlLCBcImljb25cIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogQXJyYXksXG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVMb29rdXBGaWVsZC5wcm90b3R5cGUsIFwiZGF0YUxpc3RcIiwgbnVsbCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZyxcbiAgYXR0cmlidXRlOiAnbm8tcmVzdWx0cy10ZXh0JyxcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZUxvb2t1cEZpZWxkLnByb3RvdHlwZSwgXCJub1Jlc3VsdHNUZXh0XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZyxcbiAgYXR0cmlidXRlOiAndHlwZS10by1zZWFyY2gtdGV4dCcsXG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVMb29rdXBGaWVsZC5wcm90b3R5cGUsIFwidHlwZVRvU2VhcmNoVGV4dFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBTdHJpbmcsXG4gIGF0dHJpYnV0ZTogJ3NlYXJjaC1sb2FkaW5nLXRleHQnLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIE5lTG9va3VwRmllbGQucHJvdG90eXBlLCBcInNlYXJjaExvYWRpbmdUZXh0XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZyxcbiAgYXR0cmlidXRlOiAnZHJvcGRvd24tdmFyaWFudCdcbn0pXSwgTmVMb29rdXBGaWVsZC5wcm90b3R5cGUsIFwiZHJvcGRvd25WYXJpYW50XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtzdGF0ZSgpXSwgTmVMb29rdXBGaWVsZC5wcm90b3R5cGUsIFwiX2V4cGFuZGVkXCIsIHZvaWQgMCk7XG5OZUxvb2t1cEZpZWxkID0gTmVMb29rdXBGaWVsZF8xID0gX19kZWNvcmF0ZShbY3VzdG9tRWxlbWVudCgnbmUtbG9va3VwLWZpZWxkJyldLCBOZUxvb2t1cEZpZWxkKTtcblxuZXhwb3J0IHsgTmVMb29rdXBGaWVsZCwgZHJvcGRvd25NZW51VmFyaWFudHNBcnJheSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9va3VwLWZpZWxkLmpzLm1hcFxuIiwiaW1wb3J0IHsgYyBhcyBjb21tb25TdHlsZXMsIF8gYXMgX19kZWNvcmF0ZSB9IGZyb20gJy4vYmFzZS5zdHlsZXMtMTFkMzkxODEuanMnO1xuaW1wb3J0IHsgU2NvcGVkRWxlbWVudHNNaXhpbiB9IGZyb20gJ0BvcGVuLXdjL3Njb3BlZC1lbGVtZW50cyc7XG5pbXBvcnQgeyBjc3MsIExpdEVsZW1lbnQsIGh0bWwgfSBmcm9tICdsaXQnO1xuaW1wb3J0IHsgcHJvcGVydHksIGN1c3RvbUVsZW1lbnQgfSBmcm9tICdsaXQvZGVjb3JhdG9ycy5qcyc7XG5pbXBvcnQgeyBOZUJ1dHRvblNldCB9IGZyb20gJy4vYnV0dG9uLXNldC5qcyc7XG5pbXBvcnQgJ2xpdC9kaXJlY3RpdmVzL2NsYXNzLW1hcC5qcyc7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5jb25zdCB0b2tlbnMgPSBjc3NgXG4gICoge1xuICAtLW5lLXBhbmVsLWhlYWRlci1mb250LWZhbWlseTogdmFyKC0tbmUtcmVmLWZvbnQtZmFtaWx5LW1vbnRzZXJyYXQsIE1vbnRzZXJyYXQpO1xuICAtLW5lLXBhbmVsLWhlYWRlci1mb250LXdlaWdodDogdmFyKC0tbmUtcmVmLWZvbnQtd2VpZ2h0LXNlbWktYm9sZCwgU2VtaUJvbGQpO1xuICAtLW5lLXBhbmVsLWhlYWRlci1mb250LXNpemU6IHZhcigtLW5lLXJlZi1mb250LXNpemUtMDgsIDEuNWVtKTtcbiAgLS1uZS1wYW5lbC1oZWFkZXItdGl0bGU6IHZhcigtLW5lLXJlZi1jb2xvci1uaW50ZXgtb3JhbmdlLCAjRjU2OTAwKTtcbiAgLS1uZS1wYW5lbC1jb2xvci1ib3JkZXI6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTEwLCAjRTJFM0U0KTtcbiAgLS1uZS1wYW5lbC1ib3JkZXItcmFkaXVzOiB2YXIoLS1uZS1yZWYtYm9yZGVyLXJhZGl1cy1tZWRpdW0sIC4yNWVtKTtcbiAgLS1uZS1wYW5lbC1ib3JkZXItd2lkdGg6IHZhcigtLW5lLXJlZi1ib3JkZXItd2lkdGgtc21hbGwsIDFweCk7XG4gIC0tbmUtcGFuZWwtcGFkZGluZy1ob3Jpem9udGFsOiB2YXIoLS1uZS1yZWYtc3BhY2luZy1tZWRpdW0sIDFlbSk7XG4gIC0tbmUtcGFuZWwtcGFkZGluZy12ZXJ0aWNhbDogdmFyKC0tbmUtcmVmLXNwYWNpbmctbWVkaXVtLCAxZW0pO1xuICAtLW5lLXBhbmVsLWdhcC12ZXJ0aWNhbDogdmFyKC0tbmUtcmVmLXNwYWNpbmctbWVkaXVtLCAxZW0pO1xufVxuYDtcblxuY29uc3QgYmFzZUZpbGVQYW5lbCA9IGNzc2BcbiAgLnBhbmVsLWNvbnRhaW5lciB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1uZS1wYW5lbC1ib3JkZXItcmFkaXVzKTtcbiAgICBib3JkZXI6IHZhcigtLW5lLXBhbmVsLWJvcmRlci13aWR0aCkgc29saWQgdmFyKC0tbmUtcGFuZWwtY29sb3ItYm9yZGVyKTtcbiAgICBwYWRkaW5nOiAwIHZhcigtLW5lLXBhbmVsLXBhZGRpbmctaG9yaXpvbnRhbClcbiAgICAgIHZhcigtLW5lLXBhbmVsLXBhZGRpbmctdmVydGljYWwpIHZhcigtLW5lLXBhbmVsLXBhZGRpbmctaG9yaXpvbnRhbCk7XG4gICAgbWFyZ2luOiAwO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLXBhbmVsLWNvbG9yLWJhY2tncm91bmQpO1xuICB9XG5cbiAgLnBhbmVsLWhlYWRlciB7XG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHZhcigtLW5lLXBhbmVsLWNvbG9yLWJvcmRlcik7XG4gIH1cblxuICAuaGVhZGVyLWxhYmVsIHtcbiAgICBmb250LWZhbWlseTogdmFyKC0tbmUtcGFuZWwtaGVhZGVyLWZvbnQtZmFtaWx5KTtcbiAgICBmb250LXdlaWdodDogdmFyKC0tbmUtcGFuZWwtaGVhZGVyLWZvbnQtd2VpZ2h0KTtcbiAgICBmb250LXNpemU6IHZhcigtLW5lLXBhbmVsLWhlYWRlci1mb250LXNpemUpO1xuICAgIGNvbG9yOiB2YXIoLS1uZS1wYW5lbC1oZWFkZXItdGl0bGUpO1xuICB9XG5cbiAgLnBhbmVsLWNvbnRlbnQge1xuICAgIGZvbnQtc2l6ZTogdmFyKC0tbmUtcGFuZWwtZm9udC1zaXplKTtcbiAgICBmb250LWZhbWlseTogdmFyKC0tbmUtcGFuZWwtZm9udC1mYW1pbHkpO1xuICAgIHBhZGRpbmc6IHZhcigtLW5lLXBhbmVsLXBhZGRpbmctdmVydGljYWwpIHZhcigtLW5lLXBhbmVsLXBhZGRpbmctaG9yaXpvbnRhbCk7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgfVxuYDtcbmNvbnN0IHN0eWxlcyA9IFtiYXNlRmlsZVBhbmVsLCBjb21tb25TdHlsZXMsIHRva2Vuc107XG5cbi8qKlxuICogQHRhZyBuZS1wYW5lbFxuICogQHRhZ25hbWUgbmUtcGFuZWxcbiAqXG4gKi9cbmxldCBOZVBhbmVsID0gY2xhc3MgTmVQYW5lbCBleHRlbmRzIFNjb3BlZEVsZW1lbnRzTWl4aW4oTGl0RWxlbWVudCkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMuaGVhZGluZyA9ICcnO1xuICB9XG4gIHN0YXRpYyBnZXQgc2NvcGVkRWxlbWVudHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICduZS1idXR0b24tc2V0JzogTmVCdXR0b25TZXRcbiAgICB9O1xuICB9XG4gIHN0YXRpYyBnZXQgc3R5bGVzKCkge1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBodG1sYCA8ZGl2IGNsYXNzPVwicGFuZWwtY29udGFpbmVyXCI+XG4gICAgICA8c3BhbiBjbGFzcz1cInBhbmVsLWhlYWRlclwiPlxuICAgICAgICA8bmUtYnV0dG9uLXNldD5cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJoZWFkZXItbGFiZWxcIj4ke3RoaXMuaGVhZGluZ308L2xhYmVsPlxuICAgICAgICA8L25lLWJ1dHRvbi1zZXQ+XG4gICAgICA8L3NwYW4+XG4gICAgICA8cCBjbGFzcz1cInBhbmVsLWNvbnRlbnRcIj5cbiAgICAgICAgPHNsb3Q+PC9zbG90PlxuICAgICAgPC9wPlxuICAgIDwvZGl2PmA7XG4gIH1cbn07XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZ1xufSldLCBOZVBhbmVsLnByb3RvdHlwZSwgXCJoZWFkaW5nXCIsIHZvaWQgMCk7XG5OZVBhbmVsID0gX19kZWNvcmF0ZShbY3VzdG9tRWxlbWVudCgnbmUtcGFuZWwnKV0sIE5lUGFuZWwpO1xuXG5leHBvcnQgeyBOZVBhbmVsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYW5lbC5qcy5tYXBcbiIsImltcG9ydCB7IGMgYXMgY29tbW9uU3R5bGVzLCBfIGFzIF9fZGVjb3JhdGUgfSBmcm9tICcuL2Jhc2Uuc3R5bGVzLTExZDM5MTgxLmpzJztcbmltcG9ydCB7IGNzcywgTGl0RWxlbWVudCwgaHRtbCB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBwcm9wZXJ0eSwgY3VzdG9tRWxlbWVudCB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IHN0eWxlTWFwIH0gZnJvbSAnbGl0L2RpcmVjdGl2ZXMvc3R5bGUtbWFwLmpzJztcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmNvbnN0IHRva2VucyA9IGNzc2BcbiAgKiB7XG4gIC0tbmUtcHJvZ3Jlc3MtYmFyLXNpemluZy1oZWlnaHQ6IHZhcigtLW5lLXJlZi1zaXppbmctMDMsIDAuNzVlbSk7XG4gIC0tbmUtcHJvZ3Jlc3MtYmFyLXNwYWNpbmctZ2FwOiB2YXIoLS1uZS1yZWYtc3BhY2luZy14LXNtYWxsLCAwLjVlbSk7XG4gIC0tbmUtcHJvZ3Jlc3MtYmFyLWNvbG9yLWxhYmVsOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS02MCwgIzU3NUM2MSk7XG4gIC0tbmUtcHJvZ3Jlc3MtYmFyLWNvbG9yLW9wdGlvbmFsLXRleHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTYwLCAjNTc1QzYxKTtcbiAgLS1uZS1wcm9ncmVzcy1iYXItY29sb3ItaW5kaWNhdG9yOiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS02MCwgIzAwNkJENik7XG4gIC0tbmUtcHJvZ3Jlc3MtYmFyLWNvbG9yLXRyYWNrOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS0yMCwgI0M0QzdDQSk7XG4gIC0tbmUtcHJvZ3Jlc3MtYmFyLWJvcmRlci13aWR0aDogdmFyKC0tbmUtcmVmLWJvcmRlci13aWR0aC1zbWFsbCwgMXB4KTtcbiAgLS1uZS1wcm9ncmVzcy1iYXItZm9udC1mYW1pbHk6IHZhcigtLW5lLXJlZi1mb250LWZhbWlseS1vcGVuLXNhbnMsIE9wZW4gU2Fucyk7XG4gIC0tbmUtcHJvZ3Jlc3MtYmFyLWZvbnQtc2l6ZTogdmFyKC0tbmUtcmVmLWZvbnQtc2l6ZS0wNCwgMC44NzVlbSk7XG4gIC0tbmUtcHJvZ3Jlc3MtYmFyLWJvcmRlci1yYWRpdXM6IHZhcigtLW5lLXJlZi1ib3JkZXItcmFkaXVzLWxhcmdlLCAwLjVlbSk7XG59XG5gO1xuXG5jb25zdCBiYXNlUHJvZ3Jlc3NCYXJTdHlsZXMgPSBjc3NgXG4gIDpob3N0IHtcbiAgICBjb250YWluOiBjb250ZW50O1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG5cbiAgLnByb2dyZXNzLWJhci13cmFwcGVyIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IHZhcigtLW5lLXByb2dyZXNzLWJhci1zaXppbmctaGVpZ2h0KTtcbiAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1uZS1wcm9ncmVzcy1iYXItYm9yZGVyLXJhZGl1cyk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmUtcHJvZ3Jlc3MtYmFyLWNvbG9yLXRyYWNrKTtcbiAgfVxuXG4gIC5wcm9ncmVzcyxcbiAgLnByb2dyZXNzLWJhci13cmFwcGVyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gIH1cblxuICAucHJvZ3Jlc3MtYmFyIHtcbiAgICBoZWlnaHQ6IHZhcigtLW5lLXByb2dyZXNzLWJhci1zaXppbmctaGVpZ2h0KTtcbiAgICB0cmFuc2l0aW9uOiB3aWR0aCAwLjZzIGVhc2U7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmUtcHJvZ3Jlc3MtYmFyLWNvbG9yLWluZGljYXRvcik7XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgfVxuXG4gIC5sYWJlbC10b3Age1xuICAgIGZvbnQtc2l6ZTogdmFyKC0tbmUtcHJvZ3Jlc3MtYmFyLWZvbnQtc2l6ZSk7XG4gICAgZm9udC1mYW1pbHk6IHZhcigtLW5lLXByb2dyZXNzLWJhci1mb250LWZhbWlseSk7XG4gICAgY29sb3I6IHZhcigtLW5lLXByb2dyZXNzLWJhci1jb2xvci1sYWJlbCk7XG4gICAgZ2FwOiB2YXIoLS1uZS1wcm9ncmVzcy1iYXItc3BhY2luZy1nYXApO1xuICAgIG1hcmdpbi1ib3R0b206IDVweDtcbiAgfVxuXG4gIC5sYWJlbC1ib3R0b20ge1xuICAgIGZvbnQtc2l6ZTogdmFyKC0tbmUtcHJvZ3Jlc3MtYmFyLWZvbnQtc2l6ZSk7XG4gICAgZm9udC1mYW1pbHk6IHZhcigtLW5lLXByb2dyZXNzLWJhci1mb250LWZhbWlseSk7XG4gICAgY29sb3I6IHZhcigtLW5lLXByb2dyZXNzLWJhci1jb2xvci1vcHRpb25hbC10ZXh0KTtcbiAgICBnYXA6IHZhcigtLW5lLXByb2dyZXNzLWJhci1zcGFjaW5nLWdhcCk7XG4gICAgbWFyZ2luLXRvcDogNXB4O1xuICB9XG5gO1xuY29uc3Qgc3R5bGVzID0gW2Jhc2VQcm9ncmVzc0JhclN0eWxlcywgY29tbW9uU3R5bGVzLCB0b2tlbnNdO1xuXG4vKipcbiAqIEB0YWcgbmUtcHJvZ3Jlc3MtYmFyXG4gKiBAdGFnbmFtZSBuZS1wcm9ncmVzcy1iYXJcbiAqXG4gKi9cbmxldCBOZVByb2dyZXNzQmFyID0gY2xhc3MgTmVQcm9ncmVzc0JhciBleHRlbmRzIExpdEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgbGFiZWwgdGV4dCBhdCB0aGUgdG9wIG9mIHRoZSBwcm9ncmVzcyBiYXJcbiAgICAgKi9cbiAgICB0aGlzLnRvcExhYmVsID0gJyc7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBvcHRpb25hbCBsYWJlbCB0ZXh0IGF0IHRoZSBib3R0b20gb2YgdGhlIHByb2dyZXNzIGJhclxuICAgICAqL1xuICAgIHRoaXMuYm90dG9tTGFiZWwgPSAnJztcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHByb2dyZXNzIHBlcmNlbnRhZ2UuIDAgdG8gMTAwLlxuICAgICAqL1xuICAgIHRoaXMucHJvZ3Jlc3MgPSAwO1xuICB9XG4gIHN0YXRpYyBnZXQgc3R5bGVzKCkge1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBodG1sYFxuICAgICAgPGRpdiBpZD1cInRpdGxlXCIgY2xhc3M9XCJsYWJlbC10b3BcIj4ke3RoaXMudG9wTGFiZWx9PC9kaXY+XG4gICAgICA8ZGl2XG4gICAgICAgIHJvbGU9XCJwcm9ncmVzc2JhclwiXG4gICAgICAgIGFyaWEtdmFsdWVtaW49XCIwXCJcbiAgICAgICAgYXJpYS12YWx1ZW1heD1cIjEwMFwiXG4gICAgICAgIGFyaWEtdmFsdWVub3c9JHt0aGlzLnByb2dyZXNzfVxuICAgICAgICBhcmlhLWxhYmVsbGVkYnk9XCJ0aXRsZVwiXG4gICAgICAgIGNsYXNzPVwicHJvZ3Jlc3MtYmFyLXdyYXBwZXJcIlxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3M9XCJwcm9ncmVzcy1iYXJcIlxuICAgICAgICAgIHN0eWxlPSR7c3R5bGVNYXAoe1xuICAgICAgd2lkdGg6IGAke3RoaXMucHJvZ3Jlc3N9JWBcbiAgICB9KX1cbiAgICAgICAgPjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibGFiZWwtYm90dG9tXCI+JHt0aGlzLmJvdHRvbUxhYmVsfTwvZGl2PlxuICAgIGA7XG4gIH1cbn07XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZyxcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZVByb2dyZXNzQmFyLnByb3RvdHlwZSwgXCJ0b3BMYWJlbFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBTdHJpbmcsXG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVQcm9ncmVzc0Jhci5wcm90b3R5cGUsIFwiYm90dG9tTGFiZWxcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogTnVtYmVyLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIE5lUHJvZ3Jlc3NCYXIucHJvdG90eXBlLCBcInByb2dyZXNzXCIsIHZvaWQgMCk7XG5OZVByb2dyZXNzQmFyID0gX19kZWNvcmF0ZShbY3VzdG9tRWxlbWVudCgnbmUtcHJvZ3Jlc3MtYmFyJyldLCBOZVByb2dyZXNzQmFyKTtcblxuZXhwb3J0IHsgTmVQcm9ncmVzc0JhciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvZ3Jlc3MtYmFyLmpzLm1hcFxuIiwiaW1wb3J0IHsgYyBhcyBjb21tb25TdHlsZXMsIF8gYXMgX19kZWNvcmF0ZSB9IGZyb20gJy4vYmFzZS5zdHlsZXMtMTFkMzkxODEuanMnO1xuaW1wb3J0IHsgY3NzLCBMaXRFbGVtZW50LCBub3RoaW5nLCBodG1sIH0gZnJvbSAnbGl0JztcbmltcG9ydCB7IHByb3BlcnR5LCBjdXN0b21FbGVtZW50LCBzdGF0ZSB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IGlmRGVmaW5lZCB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL2lmLWRlZmluZWQuanMnO1xuaW1wb3J0IHsgZiBhcyBmaXJlIH0gZnJvbSAnLi9ldmVudHMtMTE3M2Y1NjIuanMnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuY29uc3QgdG9rZW5zJDEgPSBjc3NgXG4gICoge1xuICAtLW5lLXJhZGlvLWJ1dHRvbi1nYXA6IHZhcigtLW5lLXJlZi1zcGFjaW5nLW1lZGl1bSwgMWVtKTtcbiAgLS1uZS1yYWRpby1idXR0b24tcGFkZGluZy1zdWJ0ZXh0OiB2YXIoLS1uZS1yZWYtc3BhY2luZy14LWxhcmdlLCAyZW0pO1xuICAtLW5lLXJhZGlvLWJ1dHRvbi1jb2xvci1iYWNrZ3JvdW5kLXNlbGVjdGVkLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTYwLCAjMDA2QkQ2KTtcbiAgLS1uZS1yYWRpby1idXR0b24tY29sb3ItYmFja2dyb3VuZC1zZWxlY3RlZC1kaXNhYmxlZDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktNTAsICM2RDczNzkpO1xuICAtLW5lLXJhZGlvLWJ1dHRvbi1jb2xvci1iYWNrZ3JvdW5kLXNlbGVjdGVkLWhvdmVyOiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS03MCwgIzAwNTJBMyk7XG4gIC0tbmUtcmFkaW8tYnV0dG9uLWNvbG9yLWJhY2tncm91bmQtc2VsZWN0ZWQtZm9jdXM6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTcwLCAjMDA1MkEzKTtcbiAgLS1uZS1yYWRpby1idXR0b24tY29sb3ItYmFja2dyb3VuZC11bnNlbGVjdGVkLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci13aGl0ZSwgI2ZmZmZmZik7XG4gIC0tbmUtcmFkaW8tYnV0dG9uLWNvbG9yLWJhY2tncm91bmQtdW5zZWxlY3RlZC1kaXNhYmxlZDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktMzAsICNBN0FCQUYpO1xuICAtLW5lLXJhZGlvLWJ1dHRvbi1jb2xvci1iYWNrZ3JvdW5kLXVuc2VsZWN0ZWQtaG92ZXI6IHZhcigtLW5lLXJlZi1jb2xvci13aGl0ZSwgI2ZmZmZmZik7XG4gIC0tbmUtcmFkaW8tYnV0dG9uLWNvbG9yLWJhY2tncm91bmQtdW5zZWxlY3RlZC1mb2N1czogdmFyKC0tbmUtcmVmLWNvbG9yLXdoaXRlLCAjZmZmZmZmKTtcbiAgLS1uZS1yYWRpby1idXR0b24tY29sb3ItbWFyazogdmFyKC0tbmUtcmVmLWNvbG9yLXdoaXRlLCAjZmZmZmZmKTtcbiAgLS1uZS1yYWRpby1idXR0b24tY29sb3ItYm9yZGVyLXNlbGVjdGVkLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTYwLCAjMDA2QkQ2KTtcbiAgLS1uZS1yYWRpby1idXR0b24tY29sb3ItYm9yZGVyLXNlbGVjdGVkLWRpc2FibGVkOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS01MCwgIzZENzM3OSk7XG4gIC0tbmUtcmFkaW8tYnV0dG9uLWNvbG9yLWJvcmRlci1zZWxlY3RlZC1ob3ZlcjogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtNzAsICMwMDUyQTMpO1xuICAtLW5lLXJhZGlvLWJ1dHRvbi1jb2xvci1ib3JkZXItc2VsZWN0ZWQtZm9jdXM6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTIwLCAjQTNEMUZGKTtcbiAgLS1uZS1yYWRpby1idXR0b24tY29sb3ItYm9yZGVyLXVuc2VsZWN0ZWQtZGVmYXVsdDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXk0MCwgIzg5OEY5NCk7XG4gIC0tbmUtcmFkaW8tYnV0dG9uLWNvbG9yLWJvcmRlci11bnNlbGVjdGVkLWRpc2FibGVkOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS01MCwgIzZENzM3OSk7XG4gIC0tbmUtcmFkaW8tYnV0dG9uLWNvbG9yLWJvcmRlci11bnNlbGVjdGVkLWhvdmVyOiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS03MCwgIzAwNTJBMyk7XG4gIC0tbmUtcmFkaW8tYnV0dG9uLWNvbG9yLWJvcmRlci11bnNlbGVjdGVkLWZvY3VzOiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS0yMCwgI0EzRDFGRik7XG4gIC0tbmUtcmFkaW8tYnV0dG9uLWNvbG9yLXRleHQtZW5hYmxlZC1vcHRpb246IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTkwLCAjMTYxNzE4KTtcbiAgLS1uZS1yYWRpby1idXR0b24tY29sb3ItdGV4dC1lbmFibGVkLXN1YnRleHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTYwLCAjNTc1QzYxKTtcbiAgLS1uZS1yYWRpby1idXR0b24tY29sb3ItdGV4dC1kaXNhYmxlZDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktNTAsICM2RDczNzkpO1xuICAtLW5lLXJhZGlvLWJ1dHRvbi1ib3JkZXItd2lkdGg6IHZhcigtLW5lLXJlZi1ib3JkZXItd2lkdGgtc21hbGwsIDFweCk7XG4gIC0tbmUtcmFkaW8tYnV0dG9uLWZvbnQtZmFtaWx5OiB2YXIoLS1uZS1yZWYtZm9udC1mYW1pbHktb3Blbi1zYW5zLCBPcGVuIFNhbnMpO1xuICAtLW5lLXJhZGlvLWJ1dHRvbi1mb250LXNpemUtb3B0aW9uOiB2YXIoLS1uZS1yZWYtZm9udC1zaXplLTA0LCAwLjg3NWVtKTtcbiAgLS1uZS1yYWRpby1idXR0b24tZm9udC1zaXplLXN1YnRleHQ6IHZhcigtLW5lLXJlZi1mb250LXNpemUtMDIsIDAuNzVlbSk7XG4gIC0tbmUtcmFkaW8tYnV0dG9uLXNpemluZy1tYXJrOiB2YXIoLS1uZS1yZWYtc2l6aW5nLTAyLCAwLjVlbSk7XG4gIC0tbmUtcmFkaW8tYnV0dG9uLXNpemluZy1yYWRpbzogdmFyKC0tbmUtcmVmLXNpemluZy0wNCwgMWVtKTtcbiAgLS1uZS1yYWRpby1idXR0b24tZm9jdXM6IHZhcigtLW5lLXJlZi1ib3JkZXItd2lkdGgtbGFyZ2UsIDRweCk7XG4gIC0tbmUtcmFkaW8tYnV0dG9uLWxpbmUtaGVpZ2h0OiB2YXIoLS1uZS1yZWYtbGluZS1oZWlnaHQtY29uZGVuc2VkLCAxLjI1ZW0pO1xufVxuYDtcblxuY29uc3QgYmFzZVJhZGlvQnV0dG9uID0gY3NzYFxuICAuY29udGFpbmVyIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBnYXA6IHZhcigtLW5lLXJhZGlvLWJ1dHRvbi1nYXApO1xuICAgIG1pbi1oZWlnaHQ6IHZhcigtLW5lLXJhZGlvLWJ1dHRvbi1saW5lLWhlaWdodCk7XG4gICAgZm9udC1mYW1pbHk6IHZhcigtLW5lLXJhZGlvLWJ1dHRvbi1mb250LWZhbWlseSk7XG4gICAgbGluZS1oZWlnaHQ6IHZhcigtLW5lLXJhZGlvLWJ1dHRvbi1saW5lLWhlaWdodCk7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgfVxuXG4gIC5jb250ZW50IHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuICB9XG5cbiAgLnJhZGlvLWxhYmVsIHtcbiAgICBoZWlnaHQ6IHZhcigtLW5lLXJhZGlvLWJ1dHRvbi1saW5lLWhlaWdodCk7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGNvbG9yOiB2YXIoLS1uZS1yYWRpby1idXR0b24tY29sb3ItdGV4dC1lbmFibGVkLW9wdGlvbik7XG4gICAgZm9udC1zaXplOiB2YXIoLS1uZS1yYWRpby1idXR0b24tZm9udC1zaXplLW9wdGlvbik7XG4gIH1cblxuICAuc3ViLXRleHQge1xuICAgIGZvbnQtc2l6ZTogdmFyKC0tbmUtcmFkaW8tYnV0dG9uLWZvbnQtc2l6ZS1zdWJ0ZXh0KTtcbiAgICBjb2xvcjogdmFyKC0tbmUtcmFkaW8tYnV0dG9uLWNvbG9yLXRleHQtZW5hYmxlZC1zdWJ0ZXh0KTtcbiAgfVxuXG4gIC5yYWRpby1jb250ZW50IHtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGFsaWduLXNlbGY6IGJhc2VsaW5lO1xuICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBoZWlnaHQ6IHZhcigtLW5lLXJhZGlvLWJ1dHRvbi1saW5lLWhlaWdodCk7XG4gICAgd2lkdGg6IGNhbGModmFyKC0tbmUtcmFkaW8tYnV0dG9uLXNpemluZy1yYWRpbykgKyAxcHgpO1xuICB9XG5cbiAgLnJhZGlvLWNvbnRhaW5lciB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICB9XG5cbiAgLmNvbnRhaW5lciBpbnB1dCB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIG9wYWNpdHk6IDA7XG4gICAgYXBwZWFyYW5jZTogbm9uZTtcbiAgICBsZWZ0OiB2YXIoLS1uZS1yYWRpby1idXR0b24tYm9yZGVyLXdpZHRoKTtcbiAgICB0b3A6IGNhbGMoXG4gICAgICB2YXIoLS1uZS1yYWRpby1idXR0b24tbGluZS1oZWlnaHQpIC0gdmFyKC0tbmUtcmFkaW8tYnV0dG9uLXNpemluZy1yYWRpbylcbiAgICApO1xuICAgIGhlaWdodDogMXB4O1xuICB9XG5cbiAgLmNoZWNrbWFyayB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGxlZnQ6IDA7XG4gICAgaGVpZ2h0OiBjYWxjKFxuICAgICAgdmFyKC0tbmUtcmFkaW8tYnV0dG9uLXNpemluZy1yYWRpbykgLVxuICAgICAgICBjYWxjKDIgKiB2YXIoLS1uZS1yYWRpby1idXR0b24tYm9yZGVyLXdpZHRoKSlcbiAgICApO1xuICAgIHdpZHRoOiBjYWxjKFxuICAgICAgdmFyKC0tbmUtcmFkaW8tYnV0dG9uLXNpemluZy1yYWRpbykgLVxuICAgICAgICBjYWxjKDIgKiB2YXIoLS1uZS1yYWRpby1idXR0b24tYm9yZGVyLXdpZHRoKSlcbiAgICApO1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICBib3JkZXI6IHZhcigtLW5lLXJhZGlvLWJ1dHRvbi1ib3JkZXItd2lkdGgpIHNvbGlkXG4gICAgICB2YXIoLS1uZS1yYWRpby1idXR0b24tY29sb3ItYm9yZGVyLXVuc2VsZWN0ZWQtZGVmYXVsdCk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKFxuICAgICAgLS1uZS1yYWRpby1idXR0b24tY29sb3ItYmFja2dyb3VuZC11bnNlbGVjdGVkLWRlZmF1bHRcbiAgICApO1xuICB9XG5cbiAgLmNvbnRhaW5lciBpbnB1dFtkaXNhYmxlZF0gfiAuY2hlY2ttYXJrIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoXG4gICAgICAtLW5lLXJhZGlvLWJ1dHRvbi1jb2xvci1iYWNrZ3JvdW5kLXVuc2VsZWN0ZWQtZGlzYWJsZWRcbiAgICApO1xuICAgIGJvcmRlcjogdmFyKC0tbmUtcmFkaW8tYnV0dG9uLWJvcmRlci13aWR0aCkgc29saWRcbiAgICAgIHZhcigtLW5lLXJhZGlvLWJ1dHRvbi1jb2xvci1ib3JkZXItdW5zZWxlY3RlZC1kaXNhYmxlZCk7XG4gIH1cblxuICAuY2hlY2ttYXJrOjphZnRlciB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cblxuICAuY29udGFpbmVyIC5jaGVja21hcms6OmFmdGVyIHtcbiAgICB0b3A6IGNhbGModmFyKC0tbmUtcmFkaW8tYnV0dG9uLXNpemluZy1tYXJrKSAvIDIpO1xuICAgIGxlZnQ6IGNhbGModmFyKC0tbmUtcmFkaW8tYnV0dG9uLXNpemluZy1tYXJrKSAvIDIpO1xuICAgIHdpZHRoOiB2YXIoLS1uZS1yYWRpby1idXR0b24tc2l6aW5nLW1hcmspO1xuICAgIGhlaWdodDogdmFyKC0tbmUtcmFkaW8tYnV0dG9uLXNpemluZy1tYXJrKTtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmUtcmFkaW8tYnV0dG9uLWNvbG9yLW1hcmspO1xuICB9XG5cbiAgLmNvbnRhaW5lciBpbnB1dFtjaGVja2VkXSB+IC5jaGVja21hcms6OmFmdGVyIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgfVxuXG4gIC5jb250YWluZXIgaW5wdXQ6Zm9jdXMgfiAuY2hlY2ttYXJrIHtcbiAgICBib3JkZXI6IHZhcigtLW5lLXJhZGlvLWJ1dHRvbi1ib3JkZXItd2lkdGgpIHNvbGlkXG4gICAgICB2YXIoLS1uZS1yYWRpby1idXR0b24tY29sb3ItYm9yZGVyLXNlbGVjdGVkLWhvdmVyKTtcbiAgICBvdXRsaW5lOiA0cHggc29saWQgdmFyKC0tbmUtcmFkaW8tYnV0dG9uLWNvbG9yLWJvcmRlci1zZWxlY3RlZC1mb2N1cyk7XG4gIH1cblxuICAuY29udGFpbmVyIGlucHV0W2NoZWNrZWRdIH4gLmNoZWNrbWFyayB7XG4gICAgaGVpZ2h0OiB2YXIoLS1uZS1yYWRpby1idXR0b24tc2l6aW5nLXJhZGlvKTtcbiAgICB3aWR0aDogdmFyKC0tbmUtcmFkaW8tYnV0dG9uLXNpemluZy1yYWRpbyk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmUtcmFkaW8tYnV0dG9uLWNvbG9yLWJhY2tncm91bmQtc2VsZWN0ZWQtZGVmYXVsdCk7XG4gICAgYm9yZGVyOiBub25lO1xuICB9XG5cbiAgLmNvbnRhaW5lciBpbnB1dDpub3QoW2Rpc2FibGVkXSk6aG92ZXIgfiAuY2hlY2ttYXJrIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgYm9yZGVyOiB2YXIoLS1uZS1yYWRpby1idXR0b24tYm9yZGVyLXdpZHRoKSBzb2xpZFxuICAgICAgdmFyKC0tbmUtcmFkaW8tYnV0dG9uLWNvbG9yLWJvcmRlci1zZWxlY3RlZC1ob3Zlcik7XG4gIH1cblxuICAuY29udGFpbmVyIGlucHV0W2NoZWNrZWRdOmhvdmVyIH4gLmNoZWNrbWFyayB7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLXJhZGlvLWJ1dHRvbi1jb2xvci1iYWNrZ3JvdW5kLXNlbGVjdGVkLWhvdmVyKTtcbiAgfVxuXG4gIC5jb250YWluZXIgaW5wdXRbZGlzYWJsZWRdOmNoZWNrZWQgfiAuY2hlY2ttYXJrIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1yYWRpby1idXR0b24tY29sb3ItYmFja2dyb3VuZC1zZWxlY3RlZC1kaXNhYmxlZCk7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIGhlaWdodDogdmFyKC0tbmUtcmFkaW8tYnV0dG9uLXNpemluZy1yYWRpbyk7XG4gICAgd2lkdGg6IHZhcigtLW5lLXJhZGlvLWJ1dHRvbi1zaXppbmctcmFkaW8pO1xuICB9XG5cbiAgLmNvbnRhaW5lciBpbnB1dFtkaXNhYmxlZF0gfiAuY29udGVudCBsYWJlbCB7XG4gICAgY29sb3I6IHZhcigtLW5lLXJhZGlvLWJ1dHRvbi1jb2xvci10ZXh0LWRpc2FibGVkKTtcbiAgfVxuYDtcbmNvbnN0IHN0eWxlcyQxID0gW2Jhc2VSYWRpb0J1dHRvbiwgY29tbW9uU3R5bGVzLCB0b2tlbnMkMV07XG5cbi8qKlxuICogQHRhZyBuZS1yYWRpby1idXR0b25cbiAqIEB0YWduYW1lIG5lLXJhZGlvLWJ1dHRvblxuICpcbiAqL1xubGV0IE5lUmFkaW9CdXR0b24gPSBjbGFzcyBOZVJhZGlvQnV0dG9uIGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMuY2hlY2tlZCA9IGZhbHNlO1xuICAgIHRoaXMubmFtZSA9ICcnO1xuICAgIHRoaXMudmFsdWUgPSAnJztcbiAgICB0aGlzLnN1YnRleHQgPSAnJztcbiAgICB0aGlzLmdyb3VwTmFtZSA9ICcnO1xuICAgIHRoaXMuaGFuZGxlQ2xpY2sgPSAoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMub25DbGljaykge1xuICAgICAgICBmaXJlKHRoaXMsICduZS1jbGljaycsIHtcbiAgICAgICAgICBjb21wb3NlZDogdHJ1ZSxcbiAgICAgICAgICBidWJibGVzOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNoZWNrZWQgPSAhdGhpcy5jaGVja2VkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmlyZSh0aGlzLCAnbmUtY2xpY2snLCB7XG4gICAgICAgICAgY29tcG9zZWQ6IHRydWUsXG4gICAgICAgICAgYnViYmxlczogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vbkNsaWNrKHRoaXMubmFtZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICByZXR1cm4gc3R5bGVzJDE7XG4gIH1cbiAgX2tleWRvd25IYW5kbGVyKGUpIHtcbiAgICBpZiAoIXRoaXMua2V5ZG93bkhhbmRsZXIpIHtcbiAgICAgIGlmIChlLmNvZGUgPT09ICdTcGFjZScpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVDbGljaygpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmtleWRvd25IYW5kbGVyKGUpO1xuICAgIH1cbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgZ3JvdXAgPSB0aGlzLmdyb3VwTmFtZSA/IGAke3RoaXMuZ3JvdXBOYW1lfS0ke3RoaXMuaWR9YCA6IG5vdGhpbmc7XG4gICAgcmV0dXJuIGh0bWxgXG4gICAgICA8bGFiZWwgY2xhc3M9XCJjb250YWluZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInJhZGlvLWNvbnRlbnRcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicmFkaW8tY29udGFpbmVyXCI+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICBjbGFzcz1cImlucHV0LXJhZGlvXCJcbiAgICAgICAgICAgICAgICB0eXBlPVwicmFkaW9cIlxuICAgICAgICAgICAgICAgIGlkPVwiJHtncm91cCB8fCB0aGlzLmlkfVwiXG4gICAgICAgICAgICAgICAgP2Rpc2FibGVkPSR7dGhpcy5kaXNhYmxlZH1cbiAgICAgICAgICAgICAgICA/Y2hlY2tlZD1cIiR7dGhpcy5jaGVja2VkfVwiXG4gICAgICAgICAgICAgICAgQGNsaWNrPVwiJHt0aGlzLmhhbmRsZUNsaWNrfVwiXG4gICAgICAgICAgICAgICAgbmFtZT0ke3RoaXMubmFtZX1cbiAgICAgICAgICAgICAgICBAa2V5ZG93bj1cIiR7dGhpcy5fa2V5ZG93bkhhbmRsZXJ9XCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjaGVja21hcmtcIlxuICAgICAgICAgICAgICA+PC9zcGFuPlxuICAgICAgICAgICAgPC9pbnB1dD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb250ZW50XCI+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwicmFkaW8tbGFiZWxcIiBmb3I9XCJpbnB1dC1yYWRpb1wiPiR7dGhpcy52YWx1ZX08L2xhYmVsPlxuICAgICAgICAgICR7dGhpcy5zdWJ0ZXh0Lmxlbmd0aCA+IDAgPyBodG1sYDxsYWJlbCBjbGFzcz1cInN1Yi10ZXh0XCI+JHt0aGlzLnN1YnRleHR9PC9sYWJlbD5gIDogbm90aGluZ31cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2xhYmVsPmA7XG4gIH1cbn07XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIGF0dHJpYnV0ZTogJ2Rpc2FibGVkJyxcbiAgdHlwZTogQm9vbGVhblxufSldLCBOZVJhZGlvQnV0dG9uLnByb3RvdHlwZSwgXCJkaXNhYmxlZFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICBhdHRyaWJ1dGU6ICdjaGVja2VkJyxcbiAgdHlwZTogQm9vbGVhblxufSldLCBOZVJhZGlvQnV0dG9uLnByb3RvdHlwZSwgXCJjaGVja2VkXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZyxcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZVJhZGlvQnV0dG9uLnByb3RvdHlwZSwgXCJuYW1lXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZyxcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZVJhZGlvQnV0dG9uLnByb3RvdHlwZSwgXCJ2YWx1ZVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBTdHJpbmdcbn0pXSwgTmVSYWRpb0J1dHRvbi5wcm90b3R5cGUsIFwic3VidGV4dFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBTdHJpbmdcbn0pXSwgTmVSYWRpb0J1dHRvbi5wcm90b3R5cGUsIFwiZ3JvdXBOYW1lXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSgpXSwgTmVSYWRpb0J1dHRvbi5wcm90b3R5cGUsIFwib25DbGlja1wiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoKV0sIE5lUmFkaW9CdXR0b24ucHJvdG90eXBlLCBcImtleWRvd25IYW5kbGVyXCIsIHZvaWQgMCk7XG5OZVJhZGlvQnV0dG9uID0gX19kZWNvcmF0ZShbY3VzdG9tRWxlbWVudCgnbmUtcmFkaW8tYnV0dG9uJyldLCBOZVJhZGlvQnV0dG9uKTtcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmNvbnN0IHRva2VucyA9IGNzc2BcbiAgKiB7XG4gIC0tbmUtcmFkaW8tYnV0dG9uLWdyb3VwLWdhcDogdmFyKC0tbmUtcmVmLXNwYWNpbmcteC1zbWFsbCwgMC41ZW0pO1xufVxuYDtcblxuY29uc3QgYmFzZVJhZGlvQnV0dG9uR3JvdXAgPSBjc3NgXG4gIC5yYWRpby1idXR0b24tZ3JvdXAtY29udGFpbmVyIHtcbiAgICBoZWlnaHQ6IGZpdC1jb250ZW50O1xuICAgIHdpZHRoOiBmaXQtY29udGVudDtcbiAgICBtYXJnaW46IHZhcigtLW5lLXJhZGlvLWJ1dHRvbi1ncm91cC1nYXApIDA7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBncmlkLXJvdy1nYXA6IHZhcigtLW5lLXJhZGlvLWJ1dHRvbi1ncm91cC1nYXApO1xuICAgIGZvbnQtZmFtaWx5OiB2YXIoLS1uZS1yZWYtZm9udC1mYW1pbHktb3Blbi1zYW5zLCBPcGVuIFNhbnMpO1xuICAgIGNvbG9yOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS02MCwgIzU3NWM2MSk7XG4gICAgZm9udC1zaXplOiB2YXIoLS1uZS1yZWYtZm9udC1zaXplLTA0LCAwLjg3NWVtKTtcbiAgICBsaW5lLWhlaWdodDogdmFyKC0tbmUtcmVmLWxpbmUtaGVpZ2h0LXNtYWxsLCAxLjE4NzVlbSk7XG4gIH1cblxuICAucmFkaW8tYnV0dG9uLWdyb3VwIHtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGdhcDogdmFyKC0tbmUtcmFkaW8tYnV0dG9uLWdyb3VwLWdhcCk7XG4gIH1cbmA7XG5jb25zdCBzdHlsZXMgPSBbYmFzZVJhZGlvQnV0dG9uR3JvdXAsIGNvbW1vblN0eWxlcywgdG9rZW5zXTtcblxuLyoqXG4gKiBAdGFnIG5lLXJhZGlvLWJ1dHRvbi1ncm91cFxuICogQHRhZ25hbWUgbmUtcmFkaW8tYnV0dG9uLWdyb3VwXG4gKlxuICovXG5sZXQgTmVSYWRpb0J1dHRvbkdyb3VwID0gY2xhc3MgTmVSYWRpb0J1dHRvbkdyb3VwIGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy5ncm91cE5hbWUgPSAnJztcbiAgICB0aGlzLmxhYmVsID0gJyc7XG4gICAgdGhpcy5pdGVtcyA9IFtdO1xuICB9XG4gIHN0YXRpYyBnZXQgc3R5bGVzKCkge1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH1cbiAgb25DbGljayhuYW1lLCBpdGVtcykge1xuICAgIHRoaXMuaXRlbXMgPSBpdGVtcy5tYXAoaXRlbSA9PiB7XG4gICAgICBjb25zdCBuZXdJdGVtID0gaXRlbTtcbiAgICAgIG5ld0l0ZW0uY2hlY2tlZCA9IG5ld0l0ZW0ubmFtZSA9PT0gbmFtZTtcbiAgICAgIHJldHVybiBuZXdJdGVtO1xuICAgIH0pO1xuICAgIGlmICh0aGlzLmhhbmRsZUNsaWNrKSB7XG4gICAgICB0aGlzLmhhbmRsZUNsaWNrKG5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZTtcbiAgfVxuICBrZXlkb3duSGFuZGxlcihlLCBpLCBpdGVtcykge1xuICAgIGxldCBpZHggPSBpO1xuICAgIGlmIChlLmNvZGUgPT09ICdTcGFjZScpIHtcbiAgICAgIHRoaXMub25DbGljayhpdGVtc1tpZHhdLm5hbWUsIGl0ZW1zKTtcbiAgICB9XG4gICAgaWYgKGUuY29kZSA9PT0gJ0Fycm93RG93bicpIHtcbiAgICAgIGlkeCA9IGkgKyAxO1xuICAgICAgaWYgKGl0ZW1zW2lkeF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZHggPSAwO1xuICAgICAgfVxuICAgICAgY29uc3QgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCduZS1yYWRpby1idXR0b24tZ3JvdXAnKT8uc2hhZG93Um9vdD8uZ2V0RWxlbWVudEJ5SWQoaXRlbXNbaWR4XS5pZCk/LnNoYWRvd1Jvb3Q/LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0Jyk7XG4gICAgICBlbD8uZm9jdXMoKTtcbiAgICAgIHRoaXMub25DbGljayhpdGVtc1tpZHhdLm5hbWUsIGl0ZW1zKTtcbiAgICB9XG4gICAgaWYgKGUuY29kZSA9PT0gJ0Fycm93VXAnKSB7XG4gICAgICBpZHggPSBpIC0gMTtcbiAgICAgIGlmIChpZHggPCAwKSB7XG4gICAgICAgIGlkeCA9IGl0ZW1zLmxlbmd0aCAtIDE7XG4gICAgICB9XG4gICAgICBjb25zdCBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ25lLXJhZGlvLWJ1dHRvbi1ncm91cCcpPy5zaGFkb3dSb290Py5nZXRFbGVtZW50QnlJZChpdGVtc1tpZHhdLmlkKT8uc2hhZG93Um9vdD8ucXVlcnlTZWxlY3RvcignaW5wdXQnKTtcbiAgICAgIGVsPy5mb2N1cygpO1xuICAgICAgdGhpcy5vbkNsaWNrKGl0ZW1zW2lkeF0ubmFtZSwgaXRlbXMpO1xuICAgIH1cbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgcmFkaW9CdXR0b25Hcm91cCA9IHRoaXMuaXRlbXMubWFwKChpdGVtLCBpZHgpID0+IGh0bWxgIDxuZS1yYWRpby1idXR0b25cbiAgICAgICAgLmtleWRvd25IYW5kbGVyPVwiJHtlID0+IHRoaXMua2V5ZG93bkhhbmRsZXIoZSwgaWR4LCB0aGlzLml0ZW1zKX1cIlxuICAgICAgICA/ZGlzYWJsZWQ9JHtpdGVtPy5kaXNhYmxlZH1cbiAgICAgICAgP2NoZWNrZWQ9XCIke2l0ZW0uY2hlY2tlZD8udmFsdWVPZigpfVwiXG4gICAgICAgIGlkPSR7aXRlbS5pZH1cbiAgICAgICAgZ3JvdXBOYW1lPSR7dGhpcy5ncm91cE5hbWV9XG4gICAgICAgIG5hbWU9XCIke2l0ZW0ubmFtZX1cIlxuICAgICAgICAub25DbGljaz1cIiR7bmFtZSA9PiB0aGlzLm9uQ2xpY2sobmFtZSwgdGhpcy5pdGVtcyl9XCJcbiAgICAgICAgdmFsdWU9XCIke2l0ZW0udmFsdWV9XCJcbiAgICAgICAgc3VidGV4dD1cIiR7aWZEZWZpbmVkKGl0ZW0uc3VidGV4dCl9XCJcbiAgICAgID5cbiAgICAgIDwvbmUtcmFkaW8tYnV0dG9uPmApO1xuICAgIHJldHVybiBodG1sYCA8ZGl2XG4gICAgICBjbGFzcz1cInJhZGlvLWJ1dHRvbi1ncm91cC1jb250YWluZXJcIlxuICAgICAgdGl0bGU9XCJyYWRpbyBncm91cCAke3RoaXMubGFiZWwgPz8gdGhpcy5ncm91cE5hbWV9XCJcbiAgICA+XG4gICAgICA8bGFiZWwgaWQ9XCIke3RoaXMuaWR9LWxhYmVsXCIgZm9yPSR7dGhpcy5ncm91cE5hbWV9PlxuICAgICAgICAke3RoaXMubGFiZWwgPz8gbm90aGluZ31cbiAgICAgIDwvbGFiZWw+XG4gICAgICA8ZGl2IGNsYXNzPVwicmFkaW8tYnV0dG9uLWdyb3VwXCIgaWQ9JHt0aGlzLmlkfT4ke3JhZGlvQnV0dG9uR3JvdXB9PC9kaXY+XG4gICAgPC9kaXY+YDtcbiAgfVxufTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogU3RyaW5nXG59KV0sIE5lUmFkaW9CdXR0b25Hcm91cC5wcm90b3R5cGUsIFwiZ3JvdXBOYW1lXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZ1xufSldLCBOZVJhZGlvQnV0dG9uR3JvdXAucHJvdG90eXBlLCBcImxhYmVsXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSgpXSwgTmVSYWRpb0J1dHRvbkdyb3VwLnByb3RvdHlwZSwgXCJoYW5kbGVDbGlja1wiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbc3RhdGUoKV0sIE5lUmFkaW9CdXR0b25Hcm91cC5wcm90b3R5cGUsIFwiaXRlbXNcIiwgdm9pZCAwKTtcbk5lUmFkaW9CdXR0b25Hcm91cCA9IF9fZGVjb3JhdGUoW2N1c3RvbUVsZW1lbnQoJ25lLXJhZGlvLWJ1dHRvbi1ncm91cCcpXSwgTmVSYWRpb0J1dHRvbkdyb3VwKTtcblxuZXhwb3J0IHsgTmVSYWRpb0J1dHRvbiBhcyBOLCBOZVJhZGlvQnV0dG9uR3JvdXAgYXMgYSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmFkaW8tYnV0dG9uLWdyb3VwLTVhMzEwNmQyLmpzLm1hcFxuIiwiaW1wb3J0IHsgYyBhcyBjb21tb25TdHlsZXMsIF8gYXMgX19kZWNvcmF0ZSB9IGZyb20gJy4vYmFzZS5zdHlsZXMtMTFkMzkxODEuanMnO1xuaW1wb3J0IHsgY3NzLCBMaXRFbGVtZW50LCBodG1sLCBub3RoaW5nIH0gZnJvbSAnbGl0JztcbmltcG9ydCB7IHByb3BlcnR5LCBjdXN0b21FbGVtZW50IH0gZnJvbSAnbGl0L2RlY29yYXRvcnMuanMnO1xuaW1wb3J0IHsgY2xhc3NNYXAgfSBmcm9tICdsaXQvZGlyZWN0aXZlcy9jbGFzcy1tYXAuanMnO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICcuL2NoZWNrLTEzMmM5ODk0LmpzJztcbmltcG9ydCB7IHIgYXMgcmVuZGVySWNvbiB9IGZyb20gJy4vaWNvbi5iYXNlLTdhOTE5ZGIyLmpzJztcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmNvbnN0IHRva2VucyA9IGNzc2BcbiAgKiB7XG4gIC0tbmUtc3RlcHBlci1zaXppbmctY2lyY2xlOiB2YXIoLS1uZS1yZWYtc2l6aW5nLTA4LCAyZW0pO1xuICAtLW5lLXN0ZXBwZXItc2l6aW5nLWljb246IHZhcigtLW5lLXJlZi1zaXppbmctMDQsIDFlbSk7XG4gIC0tbmUtc3RlcHBlci1wYWRkaW5nLWVsZW1lbnQ6IHZhcigtLW5lLXJlZi1zcGFjaW5nLXgtc21hbGwsIDAuNWVtKTtcbiAgLS1uZS1zdGVwcGVyLWdhcDogdmFyKC0tbmUtcmVmLXNwYWNpbmcteHgtc21hbGwsIDAuMjVlbSk7XG4gIC0tbmUtc3RlcHBlci1jb2xvci1iYWNrZ3JvdW5kLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTYwLCAjMDA2QkQ2KTtcbiAgLS1uZS1zdGVwcGVyLWNvbG9yLWJhY2tncm91bmQtZGlzYWJsZWQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTUwLCAjNkQ3Mzc5KTtcbiAgLS1uZS1zdGVwcGVyLWNvbG9yLWJhY2tncm91bmQtaG92ZXI6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTcwLCAjMDA1MkEzKTtcbiAgLS1uZS1zdGVwcGVyLWNvbG9yLWJvcmRlci1kZWZhdWx0OiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS02MCwgIzAwNkJENik7XG4gIC0tbmUtc3RlcHBlci1jb2xvci1ib3JkZXItZGlzYWJsZWQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTUwLCAjNkQ3Mzc5KTtcbiAgLS1uZS1zdGVwcGVyLWNvbG9yLWxhYmVsOiB2YXIoLS1uZS1yZWYtY29sb3Itd2hpdGUsICNmZmZmZmYpO1xuICAtLW5lLXN0ZXBwZXItY29sb3Itc3RlcC10ZXh0LWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTkwLCAjMTYxNzE4KTtcbiAgLS1uZS1zdGVwcGVyLWNvbG9yLXN0ZXAtdGV4dC1kaXNhYmxlZDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktNTAsICM2RDczNzkpO1xuICAtLW5lLXN0ZXBwZXItYm9yZGVyLXdpZHRoOiB2YXIoLS1uZS1yZWYtYm9yZGVyLXdpZHRoLW1lZGl1bSwgMnB4KTtcbiAgLS1uZS1zdGVwcGVyLWZvbnQtZmFtaWx5OiB2YXIoLS1uZS1yZWYtZm9udC1mYW1pbHktb3Blbi1zYW5zLCBPcGVuIFNhbnMpO1xuICAtLW5lLXN0ZXBwZXItZm9udC1zaXplOiB2YXIoLS1uZS1yZWYtZm9udC1zaXplLTA0LCAwLjg3NWVtKTtcbiAgLS1uZS1zdGVwcGVyLWZvbnQtd2VpZ2h0LXN0ZXAtdGV4dC1kZWZhdWx0OiB2YXIoLS1uZS1yZWYtZm9udC13ZWlnaHQtcmVndWxhciwgUmVndWxhcik7XG4gIC0tbmUtc3RlcHBlci1mb250LXdlaWdodC1zdGVwLXRleHQtYWN0aXZlOiB2YXIoLS1uZS1yZWYtZm9udC13ZWlnaHQtYm9sZCwgQm9sZCk7XG59XG5gO1xuXG5jb25zdCBiYXNlU3RlcCA9IGNzc2BcbiAgLnN0ZXAtY29udGFpbmVyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgfVxuXG4gIC5zdGVwLWNpcmNsZS1jb250YWluZXIge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IGF1dG87XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB9XG5cbiAgLnN0ZXBwZXItdGl0bGUge1xuICAgIG1hcmdpbi10b3A6IHZhcigtLW5lLXN0ZXBwZXItcGFkZGluZy1lbGVtZW50KTtcbiAgICBmb250LWZhbWlseTogdmFyKC0tbmUtc3RlcHBlci1mb250LWZhbWlseSk7XG4gICAgZm9udC1zaXplOiB2YXIoLS1uZS1zdGVwcGVyLWZvbnQtc2l6ZSk7XG4gICAgZm9udC13ZWlnaHQ6IHZhcigtLW5lLXN0ZXBwZXItZm9udC13ZWlnaHQtc3RlcC10ZXh0LWRlZmF1bHQpO1xuICB9XG5cbiAgLnN0ZXBwZXItdGl0bGUuZGlzYWJsZWQge1xuICAgIGNvbG9yOiB2YXIoLS1uZS1zdGVwcGVyLWNvbG9yLXN0ZXAtdGV4dC1kaXNhYmxlZCk7XG4gIH1cblxuICAuc3RlcHBlci10aXRsZS5hY3RpdmUge1xuICAgIGZvbnQtd2VpZ2h0OiB2YXIoLS1uZS1zdGVwcGVyLWZvbnQtd2VpZ2h0LXN0ZXAtdGV4dC1hY3RpdmUpO1xuICB9XG5cbiAgLnN0ZXBwZXItc3RlcCB7XG4gICAgYmFja2dyb3VuZDogdmFyKC0tbmUtc3RlcHBlci1jb2xvci1ib3JkZXItZGVmYXVsdCk7XG4gICAgd2lkdGg6IHZhcigtLW5lLXN0ZXBwZXItc2l6aW5nLWNpcmNsZSk7XG4gICAgaGVpZ2h0OiB2YXIoLS1uZS1zdGVwcGVyLXNpemluZy1jaXJjbGUpO1xuICAgIGJvcmRlci1yYWRpdXM6IDEwMCU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGNvbG9yOiB2YXIoLS1uZS1zdGVwcGVyLWNvbG9yLWxhYmVsKTtcbiAgICBmb250LXNpemU6IHZhcigtLW5lLXN0ZXBwZXItZm9udC1zaXplKTtcbiAgfVxuXG4gIC5zdGVwcGVyLXN0ZXAgLm5lLWljb24ge1xuICAgIGNvbG9yOiB2YXIoLS1uZS1zdGVwcGVyLWNvbG9yLWxhYmVsKTtcbiAgICBoZWlnaHQ6IHZhcigtLW5lLXN0ZXBwZXItc2l6aW5nLWljb24pO1xuICAgIHdpZHRoOiB2YXIoLS1uZS1zdGVwcGVyLXNpemluZy1pY29uKTtcbiAgfVxuXG4gIC5zdGVwcGVyLXN0ZXAuZGlzYWJsZWQge1xuICAgIGJhY2tncm91bmQ6IHZhcigtLW5lLXN0ZXBwZXItY29sb3Itc3RlcC10ZXh0LWRpc2FibGVkKTtcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgfVxuXG4gIC5sZWZ0LWxpbmUge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBsZWZ0OiAwO1xuICAgIGJhY2tncm91bmQ6IHZhcigtLW5lLXN0ZXBwZXItY29sb3ItYm9yZGVyLWRlZmF1bHQpO1xuICAgIGhlaWdodDogdmFyKC0tbmUtc3RlcHBlci1ib3JkZXItd2lkdGgpO1xuICAgIHdpZHRoOiA1MCU7XG4gICAgei1pbmRleDogLTE7XG4gIH1cblxuICAucmlnaHQtbGluZSB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHJpZ2h0OiAwO1xuICAgIGJhY2tncm91bmQ6IHZhcigtLW5lLXN0ZXBwZXItY29sb3ItYm9yZGVyLWRlZmF1bHQpO1xuICAgIGhlaWdodDogdmFyKC0tbmUtc3RlcHBlci1ib3JkZXItd2lkdGgpO1xuICAgIHdpZHRoOiA1MCU7XG4gICAgei1pbmRleDogLTE7XG4gIH1cblxuICAuc3RlcHBlci1zdGVwOmZvY3VzIHtcbiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1uZS1zdGVwcGVyLWNvbG9yLWJhY2tncm91bmQtaG92ZXIpO1xuICAgIGJveC1zaGFkb3c6ICNhM2QxZmYgMCAwIDAgY2FsYyh2YXIoLS1uZS1zdGVwcGVyLWJvcmRlci13aWR0aCkgKiAyKTtcbiAgICBvdXRsaW5lOiBub25lO1xuICB9XG5cbiAgLnN0ZXBwZXItc3RlcDpob3ZlcixcbiAgLnN0ZXBwZXItc3RlcDpob3ZlciA+IC5sZWZ0LWxpbmUsXG4gIC5zdGVwcGVyLXN0ZXA6aG92ZXIgPiAucmlnaHQtbGluZSxcbiAgLnN0ZXBwZXItc3RlcDpmb2N1cyAubGVmdC1saW5lLFxuICAuc3RlcHBlci1zdGVwOmZvY3VzIC5yaWdodC1saW5lIHtcbiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1uZS1zdGVwcGVyLWNvbG9yLWJhY2tncm91bmQtaG92ZXIpO1xuICB9XG5cbiAgLnN0ZXBwZXItc3RlcC5kaXNhYmxlZCAubGVmdC1saW5lLFxuICAuc3RlcHBlci1zdGVwLmRpc2FibGVkIC5yaWdodC1saW5lIHtcbiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1uZS1zdGVwcGVyLWNvbG9yLXN0ZXAtdGV4dC1kaXNhYmxlZCk7XG4gIH1cbmA7XG5jb25zdCBzdHlsZXMkMSA9IFt0b2tlbnMsIGJhc2VTdGVwLCBjb21tb25TdHlsZXNdO1xuXG5sZXQgTmVTdGVwID0gY2xhc3MgTmVTdGVwIGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgLyoqIFByb2dyZXNzIGxpbmUgc2hvdyBpY29uICovXG4gICAgdGhpcy5jb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAvKiogUHJvZ3Jlc3MgbGluZSBpcyBzdGVwIGFjdGl2ZSAqL1xuICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgLyoqIFByb2dyZXNzIGxpbmUgaXMgc3RlcCBkaXNhYmxlZCAqL1xuICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgfVxuICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICByZXR1cm4gc3R5bGVzJDE7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGxldCBwcm9ncmVzc0xpbmVMZWZ0ID0gbm90aGluZztcbiAgICBsZXQgcHJvZ3Jlc3NMaW5lUmlnaHQgPSBub3RoaW5nO1xuICAgIGlmICh0aGlzLnByb2dyZXNzTGluZVR5cGUgPT09ICdzdGFydCcgfHwgdGhpcy5wcm9ncmVzc0xpbmVUeXBlID09PSAnY2VudGVyJykge1xuICAgICAgcHJvZ3Jlc3NMaW5lTGVmdCA9IGh0bWxgPHNwYW4gY2xhc3M9XCJsZWZ0LWxpbmVcIj48L3NwYW4+YDtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvZ3Jlc3NMaW5lVHlwZSA9PT0gJ2VuZCcgfHwgdGhpcy5wcm9ncmVzc0xpbmVUeXBlID09PSAnY2VudGVyJykge1xuICAgICAgcHJvZ3Jlc3NMaW5lUmlnaHQgPSBodG1sYDxzcGFuIGNsYXNzPVwicmlnaHQtbGluZVwiPjwvc3Bhbj5gO1xuICAgIH1cbiAgICByZXR1cm4gaHRtbGAgPGRpdiBjbGFzcz1cInN0ZXAtY29udGFpbmVyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwic3RlcC1jaXJjbGUtY29udGFpbmVyXCI+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICB0YWJpbmRleD1cIiR7dGhpcy5kaXNhYmxlZCA/ICctMScgOiAnMCd9XCJcbiAgICAgICAgICBjbGFzcz0ke2NsYXNzTWFwKHtcbiAgICAgICdzdGVwcGVyLXN0ZXAnOiB0cnVlLFxuICAgICAgZGlzYWJsZWQ6IHRoaXMuZGlzYWJsZWRcbiAgICB9KX1cbiAgICAgICAgPlxuICAgICAgICAgICR7cHJvZ3Jlc3NMaW5lTGVmdH1cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgJHt0aGlzLmNvbXBsZXRlZCA/IHJlbmRlckljb24oe1xuICAgICAgdHlwZUFzSHRtbDogY2hlY2tcbiAgICB9KSA6IHRoaXMuaW5kZXh9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgJHtwcm9ncmVzc0xpbmVSaWdodH1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3M9JHtjbGFzc01hcCh7XG4gICAgICAnc3RlcHBlci10aXRsZSc6IHRydWUsXG4gICAgICBkaXNhYmxlZDogdGhpcy5kaXNhYmxlZCxcbiAgICAgIGFjdGl2ZTogdGhpcy5hY3RpdmVcbiAgICB9KX1cbiAgICAgID5cbiAgICAgICAgJHt0aGlzLm5hbWV9XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5gO1xuICB9XG59O1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICBhdHRyaWJ1dGU6ICdpbmRleCcsXG4gIHR5cGU6IFN0cmluZyxcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZVN0ZXAucHJvdG90eXBlLCBcImluZGV4XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIGF0dHJpYnV0ZTogJ25hbWUnLFxuICB0eXBlOiBTdHJpbmcsXG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVTdGVwLnByb3RvdHlwZSwgXCJuYW1lXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZyxcbiAgYXR0cmlidXRlOiAnbG9jYXRpb24nLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIE5lU3RlcC5wcm90b3R5cGUsIFwicHJvZ3Jlc3NMaW5lVHlwZVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICBhdHRyaWJ1dGU6ICdjb21wbGV0ZWQnLFxuICB0eXBlOiBCb29sZWFuLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIE5lU3RlcC5wcm90b3R5cGUsIFwiY29tcGxldGVkXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIGF0dHJpYnV0ZTogJ2FjdGl2ZScsXG4gIHR5cGU6IEJvb2xlYW4sXG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVTdGVwLnByb3RvdHlwZSwgXCJhY3RpdmVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgYXR0cmlidXRlOiAnZGlzYWJsZWQnLFxuICB0eXBlOiBCb29sZWFuLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIE5lU3RlcC5wcm90b3R5cGUsIFwiZGlzYWJsZWRcIiwgdm9pZCAwKTtcbk5lU3RlcCA9IF9fZGVjb3JhdGUoW2N1c3RvbUVsZW1lbnQoJ25lLXN0ZXAnKV0sIE5lU3RlcCk7XG5cbmNvbnN0IGJhc2VTdGVwcGVyID0gY3NzYFxuICA6OnNsb3R0ZWQoKikge1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG5cbiAgLnN0ZXBwZXItY29udGFpbmVyIHtcbiAgICBmb250LWZhbWlseTogdmFyKC0tbmUtc3RlcHBlci1mb250LWZhbWlseSk7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogYXV0bztcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIH1cbmA7XG5jb25zdCBzdHlsZXMgPSBbdG9rZW5zLCBiYXNlU3RlcHBlciwgY29tbW9uU3R5bGVzXTtcblxudmFyIF9jbGFzcztcbmxldCBOZVN0ZXBwZXIgPSAoX2NsYXNzID0gY2xhc3MgTmVTdGVwcGVyIGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gaHRtbGAgPGRpdiBjbGFzcz1cInN0ZXBwZXItY29udGFpbmVyXCI+XG4gICAgICA8c2xvdD48L3Nsb3Q+XG4gICAgPC9kaXY+YDtcbiAgfVxufSwgX2NsYXNzLnN0eWxlcyA9IFtzdHlsZXMsIGNzc2BcbiAgICAgIDpob3N0IHtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICB9XG4gICAgYF0sIF9jbGFzcyk7XG5OZVN0ZXBwZXIgPSBfX2RlY29yYXRlKFtjdXN0b21FbGVtZW50KCduZS1zdGVwcGVyJyldLCBOZVN0ZXBwZXIpO1xuXG5leHBvcnQgeyBOZVN0ZXBwZXIgYXMgTiwgTmVTdGVwIGFzIGEgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0ZXBwZXItYzkyOGIwZGUuanMubWFwXG4iLCJpbXBvcnQgeyBjIGFzIGNvbW1vblN0eWxlcywgXyBhcyBfX2RlY29yYXRlIH0gZnJvbSAnLi9iYXNlLnN0eWxlcy0xMWQzOTE4MS5qcyc7XG5pbXBvcnQgeyBjc3MsIExpdEVsZW1lbnQsIGh0bWwgfSBmcm9tICdsaXQnO1xuaW1wb3J0IHsgcHJvcGVydHksIGN1c3RvbUVsZW1lbnQgfSBmcm9tICdsaXQvZGVjb3JhdG9ycy5qcyc7XG5pbXBvcnQgeyBjcmVhdGVSZWYsIHJlZiB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL3JlZi5qcyc7XG5pbXBvcnQgeyBjbGFzc01hcCB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL2NsYXNzLW1hcC5qcyc7XG5pbXBvcnQgeyBmIGFzIGZpcmUgfSBmcm9tICcuL2V2ZW50cy0xMTczZjU2Mi5qcyc7XG5pbXBvcnQgeyB0IGFzIHRva2VucyQxIH0gZnJvbSAnLi9sYWJlbC50b2tlbnMtM2RmNzAyMDAuanMnO1xuaW1wb3J0IHsgciBhcyByZW5kZXJJY29uIH0gZnJvbSAnLi9pY29uLmJhc2UtN2E5MTlkYjIuanMnO1xuaW1wb3J0ICdsaXQvZGlyZWN0aXZlcy9zdHlsZS1tYXAuanMnO1xuaW1wb3J0ICdsaXQvZGlyZWN0aXZlcy91bnRpbC5qcyc7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5jb25zdCB0b2tlbnMgPSBjc3NgXG4gICoge1xuICAtLW5lLXN3aXRjaC1ib3JkZXItcmFkaXVzOiB2YXIoLS1uZS1yZWYtYm9yZGVyLXJhZGl1cy14bCwgMC43NWVtKTtcbiAgLS1uZS1zd2l0Y2gtY29sb3ItYmFja2dyb3VuZC1vbjogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtNjAsICMwMDZCRDYpO1xuICAtLW5lLXN3aXRjaC1jb2xvci1iYWNrZ3JvdW5kLW9mZjogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktNjAsICM1NzVDNjEpO1xuICAtLW5lLXN3aXRjaC1jb2xvci1iYWNrZ3JvdW5kLWRpc2FibGVkOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS01MCwgIzZENzM3OSk7XG4gIC0tbmUtc3dpdGNoLWNvbG9yLWhhbmRsZTogdmFyKC0tbmUtcmVmLWNvbG9yLXdoaXRlLCAjZmZmZmZmKTtcbiAgLS1uZS1zd2l0Y2gtY29sb3ItaWNvbjogdmFyKC0tbmUtcmVmLWNvbG9yLXdoaXRlLCAjZmZmZmZmKTtcbiAgLS1uZS1zd2l0Y2gtY29sb3ItYm9yZGVyLWZvY3VzOiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS0yMCwgI0EzRDFGRik7XG4gIC0tbmUtc3dpdGNoLWdhcDogdmFyKC0tbmUtcmVmLXNwYWNpbmcteC1zbWFsbCwgMC41ZW0pO1xuICAtLW5lLXN3aXRjaC1zaXppbmctaWNvbjogdmFyKC0tbmUtcmVmLXNpemluZy0wNCwgMWVtKTtcbiAgLS1uZS1zd2l0Y2gtc2l6aW5nLXRyYWNrLWhlaWdodDogdmFyKC0tbmUtcmVmLXNpemluZy0wNiwgMS41ZW0pO1xuICAtLW5lLXN3aXRjaC1zaXppbmctdHJhY2std2lkdGg6IHZhcigtLW5lLXJlZi1zaXppbmctMTEsIDNlbSk7XG4gIC0tbmUtc3dpdGNoLXNpemluZy1oYW5kbGU6IHZhcigtLW5lLXJlZi1zaXppbmctMDUsIDEuMjVlbSk7XG4gIC0tbmUtc3dpdGNoLWJvcmRlci13aWR0aC1mb2N1czogdmFyKC0tbmUtcmVmLWJvcmRlci13aWR0aC1sYXJnZSwgNHB4KTtcbn1cbmA7XG5cbmNvbnN0IGJhc2VUb2dnbGVCdXR0b24gPSBjc3NgXG4gIC5jb250YWluZXIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgfVxuXG4gIC5zd2l0Y2gge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgd2lkdGg6IHZhcigtLW5lLXN3aXRjaC1zaXppbmctdHJhY2std2lkdGgpO1xuICAgIGhlaWdodDogdmFyKC0tbmUtc3dpdGNoLXNpemluZy10cmFjay1oZWlnaHQpO1xuICB9XG5cbiAgLnN3aXRjaDpmb2N1cy13aXRoaW4ge1xuICAgIG91dGxpbmU6IHZhcigtLW5lLXN3aXRjaC1ib3JkZXItd2lkdGgtZm9jdXMpIHNvbGlkXG4gICAgICB2YXIoLS1uZS1zd2l0Y2gtY29sb3ItYm9yZGVyLWZvY3VzKTtcbiAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1uZS1zd2l0Y2gtYm9yZGVyLXJhZGl1cyk7XG4gIH1cblxuICAuc2xpZGVyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgdG9wOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgcmlnaHQ6IDA7XG4gICAgYm90dG9tOiAwO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLXN3aXRjaC1jb2xvci1iYWNrZ3JvdW5kLW9mZik7XG4gICAgdHJhbnNpdGlvbjogMC40cztcbiAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1uZS1zd2l0Y2gtYm9yZGVyLXJhZGl1cyk7XG4gIH1cblxuICBpbnB1dCB7XG4gICAgb3BhY2l0eTogMDtcbiAgICB3aWR0aDogMDtcbiAgICBoZWlnaHQ6IDA7XG4gIH1cblxuICBpbnB1dDpmb2N1cyArIC5zbGlkZXIge1xuICAgIGJveC1zaGFkb3c6IDAgMCAxcHggdmFyKC0tbmUtc3dpdGNoLWNvbG9yLWJhY2tncm91bmQtb24pO1xuICB9XG5cbiAgaW5wdXQ6Y2hlY2tlZCArIC5zbGlkZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLXN3aXRjaC1jb2xvci1iYWNrZ3JvdW5kLW9uKTtcbiAgfVxuXG4gIC5zbGlkZXI6OmJlZm9yZSB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIGhlaWdodDogdmFyKC0tbmUtc3dpdGNoLXNpemluZy1oYW5kbGUpO1xuICAgIHdpZHRoOiB2YXIoLS1uZS1zd2l0Y2gtc2l6aW5nLWhhbmRsZSk7XG4gICAgbGVmdDogMnB4O1xuICAgIGJvdHRvbTogMnB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLXN3aXRjaC1jb2xvci1oYW5kbGUpO1xuICAgIHRyYW5zaXRpb246IDAuNHM7XG4gICAgYm9yZGVyLXJhZGl1czogdmFyKC0tbmUtc3dpdGNoLWJvcmRlci1yYWRpdXMpO1xuICB9XG5cbiAgLnNsaWRlci5jaGVja2VkOjpiZWZvcmUge1xuICAgIGxlZnQ6IDA7XG4gIH1cblxuICBpbnB1dDpjaGVja2VkICsgLnNsaWRlcjo6YmVmb3JlIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMjZweCk7XG4gIH1cblxuICAuc2xpZGVyLmRpc2FibGVkIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS1zd2l0Y2gtY29sb3ItYmFja2dyb3VuZC1kaXNhYmxlZCk7XG4gIH1cblxuICBpbnB1dDpjaGVja2VkICsgLnNsaWRlci5kaXNhYmxlZCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmUtc3dpdGNoLWNvbG9yLWJhY2tncm91bmQtZGlzYWJsZWQpO1xuICB9XG5cbiAgLmljb24ge1xuICAgIGNvbG9yOiB2YXIoLS1uZS1zd2l0Y2gtY29sb3ItaWNvbik7XG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xuICAgIHdpZHRoOiB2YXIoLS1uZS1zd2l0Y2gtc2l6aW5nLWljb24pO1xuICAgIG1hcmdpbjogdmFyKC0tbmUtc3dpdGNoLWdhcCk7XG4gIH1cblxuICAuc3RhdGUtbGFiZWwge1xuICAgIGZvbnQtZmFtaWx5OiB2YXIoLS1uZS1sYWJlbC1mb250LWZhbWlseSk7XG4gICAgY29sb3I6IHZhcigtLW5lLWxhYmVsLWNvbG9yLXRpdGxlKTtcbiAgICBmb250LXNpemU6IHZhcigtLW5lLWxhYmVsLWZvbnQtc2l6ZSk7XG4gICAgbWFyZ2luLWxlZnQ6IHZhcigtLW5lLWxhYmVsLWdhcCk7XG4gIH1cblxuICAuc3RhdGUtbGFiZWwubGVmdCB7XG4gICAgcGFkZGluZy1pbmxpbmUtZW5kOiB2YXIoLS1uZS1zd2l0Y2gtZ2FwKTtcbiAgfVxuXG4gIC5zdGF0ZS1sYWJlbC5yaWdodCB7XG4gICAgcGFkZGluZy1pbmxpbmUtc3RhcnQ6IHZhcigtLW5lLXN3aXRjaC1nYXApO1xuICB9XG5gO1xuY29uc3Qgc3R5bGVzID0gW3Rva2VucywgdG9rZW5zJDEsIGNvbW1vblN0eWxlcywgYmFzZVRvZ2dsZUJ1dHRvbl07XG5cbi8qKlxuICogQHRhZyBuZS1zd2l0Y2hcbiAqIEB0YWduYW1lIG5lLXN3aXRjaFxuICpcbiAqIEBldmVudCBuZS1jaGFuZ2UgUmFpc2VkIHdoZW4gdGhlIHN3aXRjaCBpcyB0b2dnbGVkLlxuICovXG5sZXQgTmVTd2l0Y2ggPSBjbGFzcyBOZVN3aXRjaCBleHRlbmRzIExpdEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIC8vIFJlZlxuICAgIHRoaXMuX2NoZWNrYm94Tm9kZSA9IGNyZWF0ZVJlZigpO1xuICAgIC8vIFByb3BlcnRpZXNcbiAgICAvKiogU2V0cyB0aGUgdG9nZ2xlIHN0YXR1cyBvZiB0aGUgc3dpdGNoIHRvIGVpdGhlciBvbiBvciBvZmYuIEZhbHNlIGJ5IGRlZmF1bHQuICovXG4gICAgdGhpcy5jaGVja2VkID0gZmFsc2U7XG4gICAgLyoqIFNwZWNpZmllcyB0aGF0IHRoZSB0b2dnbGUgc3dpdGNoIHNob3VsZCBiZSBkaXNhYmxlZC4gRmFsc2UgYnkgZGVmYXVsdC4gKi9cbiAgICB0aGlzLmRpc2FibGVkID0gZmFsc2U7XG4gICAgLyoqIFNldHMgdGhlIHBvc2l0aW9uIG9mIHRoZSBsYWJlbCB0byBlaXRoZXIgYmUgb24gdGhlIGxlZnQgb3IgcmlnaHQgc2lkZSBvZiB0aGUgdG9nZ2xlIHN3aXRjaC4gRmFsc2UgYnkgZGVmYXVsdC4gKi9cbiAgICB0aGlzLmludmVydFN0YXRlTGFiZWxQbGFjZW1lbnQgPSBmYWxzZTtcbiAgICAvKiogU2hvdy9IaWRlIHRoZSBcIk9uL09mZlwiIGxhYmVsIG5leHQgdG8gdGhlIHN3aXRjaC4gVHJ1ZSBieSBkZWZhdWx0LiAqL1xuICAgIHRoaXMuc3RhdGVMYWJlbFZpc2libGUgPSB0cnVlO1xuICAgIC8vIEV2ZW50c1xuICAgIHRoaXMuX29uQ2hhbmdlID0gKCkgPT4ge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY2hlY2tlZFxuICAgICAgfSA9IHRoaXMuX2NoZWNrYm94Tm9kZS52YWx1ZTtcbiAgICAgIHRoaXMuY2hlY2tlZCA9IGNoZWNrZWQ7XG4gICAgICBpZiAoIXRoaXMuZGlzYWJsZWQpIHtcbiAgICAgICAgZmlyZSh0aGlzLCAnbmUtY2hhbmdlJywge1xuICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgY2hlY2tlZCxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLl9zdGF0dXNMYWJlbERlc2NyaXB0aW9uKClcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgLy8gU3R5bGVzXG4gIHN0YXRpYyBnZXQgc3R5bGVzKCkge1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH1cbiAgX3N0YXR1c0xhYmVsRGVzY3JpcHRpb24oKSB7XG4gICAgaWYgKHRoaXMuY2hlY2tlZCkge1xuICAgICAgcmV0dXJuICdPbic7XG4gICAgfVxuICAgIHJldHVybiAnT2ZmJztcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgbGVmdExhYmVsID0gdGhpcy5zdGF0ZUxhYmVsVmlzaWJsZSAmJiB0aGlzLmludmVydFN0YXRlTGFiZWxQbGFjZW1lbnQgPyBodG1sYDxkaXYgY2xhc3M9XCJzdGF0ZS1sYWJlbCBsZWZ0XCI+XG4gICAgICAgICAgICAke3RoaXMuX3N0YXR1c0xhYmVsRGVzY3JpcHRpb24oKX1cbiAgICAgICAgICA8L2Rpdj5gIDogbnVsbDtcbiAgICBjb25zdCByaWdodExhYmVsID0gdGhpcy5zdGF0ZUxhYmVsVmlzaWJsZSAmJiAhdGhpcy5pbnZlcnRTdGF0ZUxhYmVsUGxhY2VtZW50ID8gaHRtbGA8ZGl2IGNsYXNzPVwic3RhdGUtbGFiZWwgcmlnaHRcIj5cbiAgICAgICAgICAgICR7dGhpcy5fc3RhdHVzTGFiZWxEZXNjcmlwdGlvbigpfVxuICAgICAgICAgIDwvZGl2PmAgOiBudWxsO1xuICAgIHJldHVybiBodG1sYFxuICAgICAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxuICAgICAgICAke2xlZnRMYWJlbH1cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwic3dpdGNoXCI+XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICBpZD1cImNoZWNrYm94XCJcbiAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgICBhcmlhLWxhYmVsPSR7dGhpcy5fc3RhdHVzTGFiZWxEZXNjcmlwdGlvbigpfVxuICAgICAgICAgICAgJHtyZWYodGhpcy5fY2hlY2tib3hOb2RlKX1cbiAgICAgICAgICAgIC5jaGVja2VkPSR7dGhpcy5jaGVja2VkfVxuICAgICAgICAgICAgP2Rpc2FibGVkPSR7dGhpcy5kaXNhYmxlZH1cbiAgICAgICAgICAgIEBjaGFuZ2U9JHt0aGlzLl9vbkNoYW5nZX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICBjbGFzcz0ke2NsYXNzTWFwKHtcbiAgICAgIHNsaWRlcjogdHJ1ZSxcbiAgICAgIGRpc2FibGVkOiB0aGlzLmRpc2FibGVkLFxuICAgICAgY2hlY2tlZDogdGhpcy5jaGVja2VkXG4gICAgfSl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz0ke3RoaXMuY2hlY2tlZCA/ICdpY29uJyA6ICdoaWRkZW4nfT5cbiAgICAgICAgICAgICAgJHtyZW5kZXJJY29uKHtcbiAgICAgIHR5cGU6ICdjaGVjaydcbiAgICB9KX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgJHtyaWdodExhYmVsfVxuICAgICAgPC9kaXY+XG4gICAgYDtcbiAgfVxufTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogQm9vbGVhbixcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZVN3aXRjaC5wcm90b3R5cGUsIFwiY2hlY2tlZFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBCb29sZWFuLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIE5lU3dpdGNoLnByb3RvdHlwZSwgXCJkaXNhYmxlZFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBCb29sZWFuLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIE5lU3dpdGNoLnByb3RvdHlwZSwgXCJpbnZlcnRTdGF0ZUxhYmVsUGxhY2VtZW50XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IEJvb2xlYW4sXG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVTd2l0Y2gucHJvdG90eXBlLCBcInN0YXRlTGFiZWxWaXNpYmxlXCIsIHZvaWQgMCk7XG5OZVN3aXRjaCA9IF9fZGVjb3JhdGUoW2N1c3RvbUVsZW1lbnQoJ25lLXN3aXRjaCcpXSwgTmVTd2l0Y2gpO1xuXG5leHBvcnQgeyBOZVN3aXRjaCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3dpdGNoLmpzLm1hcFxuIiwiaW1wb3J0IHsgYyBhcyBjb21tb25TdHlsZXMsIF8gYXMgX19kZWNvcmF0ZSB9IGZyb20gJy4vYmFzZS5zdHlsZXMtMTFkMzkxODEuanMnO1xuaW1wb3J0IHsgY3NzLCBodG1sLCBub3RoaW5nIH0gZnJvbSAnbGl0JztcbmltcG9ydCB7IHByb3BlcnR5LCBjdXN0b21FbGVtZW50IH0gZnJvbSAnbGl0L2RlY29yYXRvcnMuanMnO1xuaW1wb3J0IHsgbGl2ZSB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL2xpdmUuanMnO1xuaW1wb3J0IHsgaWZEZWZpbmVkIH0gZnJvbSAnbGl0L2RpcmVjdGl2ZXMvaWYtZGVmaW5lZC5qcyc7XG5pbXBvcnQgeyBjbGFzc01hcCB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL2NsYXNzLW1hcC5qcyc7XG5pbXBvcnQgeyB2IGFzIHZhbGlkYXRpb25MYXlvdXRTdHlsZXMsIGEgYXMgdmFsaWRhdGlvblN0eWxlcywgdCBhcyB0b2tlbnMkMSwgViBhcyBWYWxpZGF0aW9uQmFzZUNvbXBvbmVudCwgYiBhcyBWYWxpZGF0aW9uVHlwZSB9IGZyb20gJy4vdmFsaWRhdGlvbi50b2tlbnMtZGI4NmVjYTkuanMnO1xuaW1wb3J0IHsgZiBhcyBmaXJlIH0gZnJvbSAnLi9ldmVudHMtMTE3M2Y1NjIuanMnO1xuaW1wb3J0ICdAb3Blbi13Yy9zY29wZWQtZWxlbWVudHMnO1xuaW1wb3J0ICcuL2ljb25UeXBlLTgzMjZlZGRiLmpzJztcbmltcG9ydCAnLi9pY29uLmJhc2UtN2E5MTlkYjIuanMnO1xuaW1wb3J0ICdsaXQvZGlyZWN0aXZlcy9zdHlsZS1tYXAuanMnO1xuaW1wb3J0ICdsaXQvZGlyZWN0aXZlcy91bnRpbC5qcyc7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5jb25zdCB0b2tlbnMgPSBjc3NgXG4gICoge1xuICAtLW5lLXRleHRhcmVhLWZvbnQtZmFtaWx5OiB2YXIoLS1uZS1yZWYtZm9udC1mYW1pbHktb3Blbi1zYW5zLCBPcGVuIFNhbnMpO1xuICAtLW5lLXRleHRhcmVhLWZvbnQtc2l6ZTogdmFyKC0tbmUtcmVmLWZvbnQtc2l6ZS0wNCwgMC44NzVlbSk7XG4gIC0tbmUtdGV4dGFyZWEtcGFkZGluZy1ob3Jpem9udGFsOiB2YXIoLS1uZS1yZWYtc3BhY2luZy14LXNtYWxsLCAwLjVlbSk7XG4gIC0tbmUtdGV4dGFyZWEtcGFkZGluZy12ZXJ0aWNhbDogdmFyKC0tbmUtcmVmLXNwYWNpbmcteC1zbWFsbCwgMC41ZW0pO1xuICAtLW5lLXRleHRhcmVhLWNvbG9yLWJhY2tncm91bmQtYWN0aXZlOiB2YXIoLS1uZS1yZWYtY29sb3Itd2hpdGUsICNmZmZmZmYpO1xuICAtLW5lLXRleHRhcmVhLWNvbG9yLWJhY2tncm91bmQtZm9jdXM6IHZhcigtLW5lLXJlZi1jb2xvci13aGl0ZSwgI2ZmZmZmZik7XG4gIC0tbmUtdGV4dGFyZWEtY29sb3ItYmFja2dyb3VuZC1pbmFjdGl2ZTogdmFyKC0tbmUtcmVmLWNvbG9yLXdoaXRlLCAjZmZmZmZmKTtcbiAgLS1uZS10ZXh0YXJlYS1jb2xvci1iYWNrZ3JvdW5kLWRpc2FibGVkOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS0zMCwgI0E3QUJBRik7XG4gIC0tbmUtdGV4dGFyZWEtY29sb3ItYmFja2dyb3VuZC1lcnJvcjogdmFyKC0tbmUtcmVmLWNvbG9yLXdoaXRlLCAjZmZmZmZmKTtcbiAgLS1uZS10ZXh0YXJlYS1jb2xvci1iYWNrZ3JvdW5kLXdhcm5pbmc6IHZhcigtLW5lLXJlZi1jb2xvci13aGl0ZSwgI2ZmZmZmZik7XG4gIC0tbmUtdGV4dGFyZWEtY29sb3ItYmFja2dyb3VuZC1kZWZhdWx0OiB2YXIoLS1uZS1yZWYtY29sb3Itd2hpdGUsICNmZmZmZmYpO1xuICAtLW5lLXRleHRhcmVhLWNvbG9yLWJvcmRlci1hY3RpdmU6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTYwLCAjMDA2QkQ2KTtcbiAgLS1uZS10ZXh0YXJlYS1jb2xvci1ib3JkZXItaW5hY3RpdmU6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5NDAsICM4OThGOTQpO1xuICAtLW5lLXRleHRhcmVhLWNvbG9yLWJvcmRlci1mb2N1czogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtMjAsICNBM0QxRkYpO1xuICAtLW5lLXRleHRhcmVhLWNvbG9yLWJvcmRlci13YXJuaW5nOiB2YXIoLS1uZS1yZWYtY29sb3IteWVsbG93LTUwLCAjRkZDRjFBKTtcbiAgLS1uZS10ZXh0YXJlYS1jb2xvci1ib3JkZXItZXJyb3I6IHZhcigtLW5lLXJlZi1jb2xvci1yZWQtNTAsICNFNjAwMDApO1xuICAtLW5lLXRleHRhcmVhLWNvbG9yLWJvcmRlci1kaXNhYmxlZDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktMzAsICNBN0FCQUYpO1xuICAtLW5lLXRleHRhcmVhLWNvbG9yLXRleHQtcGxhY2Vob2xkZXI6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTUwLCAjNkQ3Mzc5KTtcbiAgLS1uZS10ZXh0YXJlYS1jb2xvci10ZXh0LWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTkwLCAjMTYxNzE4KTtcbiAgLS1uZS10ZXh0YXJlYS1jb2xvci10ZXh0LWRpc2FibGVkOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS05MCwgIzE2MTcxOCk7XG4gIC0tbmUtdGV4dGFyZWEtYm9yZGVyLXJhZGl1cy1kZWZhdWx0OiB2YXIoLS1uZS1yZWYtYm9yZGVyLXJhZGl1cy1tZWRpdW0sIC4yNWVtKTtcbiAgLS1uZS10ZXh0YXJlYS1ib3JkZXItcmFkaXVzLWhlbHAtbWVzc2FnZS10b3A6IHZhcigtLW5lLXJlZi1ib3JkZXItcmFkaXVzLW1lZGl1bSwgLjI1ZW0pO1xuICAtLW5lLXRleHRhcmVhLWJvcmRlci1yYWRpdXMtaGVscC1tZXNzYWdlLWJvdHRvbTogdmFyKC0tbmUtcmVmLWJvcmRlci1yYWRpdXMtbm9uZSwgMCk7XG4gIC0tbmUtdGV4dGFyZWEtYm9yZGVyLXdpZHRoLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1ib3JkZXItd2lkdGgtc21hbGwsIDFweCk7XG4gIC0tbmUtdGV4dGFyZWEtYm9yZGVyLXdpZHRoLWZvY3VzOiB2YXIoLS1uZS1yZWYtYm9yZGVyLXdpZHRoLWxhcmdlLCA0cHgpO1xuICAtLW5lLXRleHRhcmVhLWdhcDogdmFyKC0tbmUtcmVmLXNwYWNpbmcteHgtc21hbGwsIDAuMjVlbSk7XG59XG5gO1xuXG5jb25zdCBiYXNlVGV4dGFyZWEgPSBjc3NgXG4gIHRleHRhcmVhIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgcmVzaXplOiBub25lO1xuICAgIGZvbnQtZmFtaWx5OiB2YXIoLS1uZS10ZXh0YXJlYS1mb250LWZhbWlseSk7XG4gICAgZm9udC1zaXplOiB2YXIoLS1uZS10ZXh0YXJlYS1mb250LXNpemUpO1xuICAgIGNvbG9yOiB2YXIoLS1uZS10ZXh0YXJlYS1jb2xvci10ZXh0LWRlZmF1bHQpO1xuICAgIGdhcDogdmFyKC0tbmUtdGV4dGFyZWEtZ2FwKTtcbiAgICBwYWRkaW5nOiB2YXIoLS1uZS10ZXh0YXJlYS1wYWRkaW5nLXZlcnRpY2FsKVxuICAgICAgdmFyKC0tbmUtdGV4dGFyZWEtcGFkZGluZy1ob3Jpem9udGFsKTtcbiAgICBib3JkZXItd2lkdGg6IDA7XG4gICAgYm9yZGVyLXJhZGl1czogdmFyKC0tbmUtdGV4dGFyZWEtYm9yZGVyLXJhZGl1cy1kZWZhdWx0KTtcbiAgICBib3JkZXI6IHZhcigtLW5lLXRleHRhcmVhLWJvcmRlci13aWR0aC1kZWZhdWx0KSBzb2xpZFxuICAgICAgdmFyKC0tbmUtdGV4dGFyZWEtY29sb3ItYm9yZGVyLWluYWN0aXZlKTtcbiAgICBvdXRsaW5lOiBub25lO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLXRleHRhcmVhLWNvbG9yLWJhY2tncm91bmQtZGVmYXVsdCk7XG4gIH1cblxuICB0ZXh0YXJlYTo6cGxhY2Vob2xkZXIge1xuICAgIGNvbG9yOiB2YXIoLS1uZS10ZXh0YXJlYS1jb2xvci10ZXh0LXBsYWNlaG9sZGVyKTtcbiAgfVxuXG4gIHRleHRhcmVhOmFjdGl2ZSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmUtdGV4dGFyZWEtY29sb3ItYmFja2dyb3VuZC1hY3RpdmUpO1xuICAgIGJvcmRlcjogdmFyKC0tbmUtdGV4dGFyZWEtYm9yZGVyLXdpZHRoLWRlZmF1bHQpIHNvbGlkXG4gICAgICB2YXIoLS1uZS10ZXh0YXJlYS1jb2xvci1ib3JkZXItYWN0aXZlKTtcbiAgfVxuXG4gIHRleHRhcmVhOmZvY3VzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS10ZXh0YXJlYS1jb2xvci1iYWNrZ3JvdW5kLWZvY3VzKTtcbiAgICBib3JkZXI6IHZhcigtLW5lLXRleHRhcmVhLWJvcmRlci13aWR0aC1kZWZhdWx0KSBzb2xpZFxuICAgICAgdmFyKC0tbmUtdGV4dGFyZWEtY29sb3ItYmFja2dyb3VuZC1mb2N1cyk7XG4gICAgb3V0bGluZTogdmFyKC0tbmUtdGV4dGFyZWEtYm9yZGVyLXdpZHRoLWZvY3VzKSBzb2xpZFxuICAgICAgdmFyKC0tbmUtdGV4dGFyZWEtY29sb3ItYm9yZGVyLWZvY3VzKTtcbiAgfVxuXG4gIHRleHRhcmVhOmRpc2FibGVkIHtcbiAgICBjb2xvcjogdmFyKC0tbmUtdGV4dGFyZWEtY29sb3ItdGV4dC1kaXNhYmxlZCk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmUtdGV4dGFyZWEtY29sb3ItYmFja2dyb3VuZC1kaXNhYmxlZCk7XG4gIH1cblxuICB0ZXh0YXJlYS53YXJuaW5nIHtcbiAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1uZS10ZXh0YXJlYS1ib3JkZXItcmFkaXVzLWhlbHAtbWVzc2FnZS10b3ApXG4gICAgICB2YXIoLS1uZS10ZXh0YXJlYS1ib3JkZXItcmFkaXVzLWhlbHAtbWVzc2FnZS10b3ApXG4gICAgICB2YXIoLS1uZS10ZXh0YXJlYS1ib3JkZXItcmFkaXVzLWhlbHAtbWVzc2FnZS1ib3R0b20pXG4gICAgICB2YXIoLS1uZS10ZXh0YXJlYS1ib3JkZXItcmFkaXVzLWhlbHAtbWVzc2FnZS1ib3R0b20pO1xuICAgIGJvcmRlcjogdmFyKC0tbmUtdGV4dGFyZWEtYm9yZGVyLXdpZHRoLWRlZmF1bHQpIHNvbGlkXG4gICAgICB2YXIoLS1uZS10ZXh0YXJlYS1jb2xvci1ib3JkZXItd2FybmluZyk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmUtdGV4dGFyZWEtY29sb3ItYmFja2dyb3VuZC13YXJuaW5nKTtcbiAgfVxuXG4gIHRleHRhcmVhLmVycm9yIHtcbiAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1uZS10ZXh0YXJlYS1ib3JkZXItcmFkaXVzLWhlbHAtbWVzc2FnZS10b3ApXG4gICAgICB2YXIoLS1uZS10ZXh0YXJlYS1ib3JkZXItcmFkaXVzLWhlbHAtbWVzc2FnZS10b3ApXG4gICAgICB2YXIoLS1uZS10ZXh0YXJlYS1ib3JkZXItcmFkaXVzLWhlbHAtbWVzc2FnZS1ib3R0b20pXG4gICAgICB2YXIoLS1uZS10ZXh0YXJlYS1ib3JkZXItcmFkaXVzLWhlbHAtbWVzc2FnZS1ib3R0b20pO1xuICAgIGJvcmRlcjogdmFyKC0tbmUtdGV4dGFyZWEtYm9yZGVyLXdpZHRoLWRlZmF1bHQpIHNvbGlkXG4gICAgICB2YXIoLS1uZS10ZXh0YXJlYS1jb2xvci1ib3JkZXItZXJyb3IpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLXRleHRhcmVhLWNvbG9yLWJhY2tncm91bmQtZXJyb3IpO1xuICB9XG5cbiAgdGV4dGFyZWEuZXJyb3I6Zm9jdXMsXG4gIHRleHRhcmVhLndhcm5pbmc6Zm9jdXMge1xuICAgIGJvcmRlci1jb2xvcjogdmFyKC0tbmUtdGV4dGFyZWEtY29sb3ItYm9yZGVyLWFjdGl2ZSk7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgfVxuXG4gIHRleHRhcmVhW3JlYWRvbmx5XSB7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIG91dGxpbmU6IG5vbmU7XG4gIH1cblxuICAubWVzc2FnZS1jb250YWluZXIud2FybmluZyB7XG4gICAgYm9yZGVyOiB2YXIoLS1uZS10ZXh0YXJlYS1ib3JkZXItd2lkdGgtZGVmYXVsdCkgc29saWRcbiAgICAgIHZhcigtLW5lLXRleHRhcmVhLWNvbG9yLWJvcmRlci13YXJuaW5nKTtcbiAgfVxuXG4gIC5tZXNzYWdlLWNvbnRhaW5lci5lcnJvciB7XG4gICAgYm9yZGVyOiB2YXIoLS1uZS10ZXh0YXJlYS1ib3JkZXItd2lkdGgtZGVmYXVsdCkgc29saWRcbiAgICAgIHZhcigtLW5lLXRleHRhcmVhLWNvbG9yLWJvcmRlci1lcnJvcik7XG4gIH1cbmA7XG5jb25zdCBzdHlsZXMgPSBbdG9rZW5zLCBiYXNlVGV4dGFyZWEsIHZhbGlkYXRpb25MYXlvdXRTdHlsZXMsIHZhbGlkYXRpb25TdHlsZXMsIHRva2VucyQxLCBjb21tb25TdHlsZXNdO1xuXG4vKipcbiAqIEB0YWcgbmUtdGV4dGFyZWFcbiAqIEB0YWduYW1lIG5lLXRleHRhcmVhXG4gKlxuICovXG5sZXQgTmVUZXh0YXJlYSA9IGNsYXNzIE5lVGV4dGFyZWEgZXh0ZW5kcyBWYWxpZGF0aW9uQmFzZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgLy8gUHJvcGVydGllc1xuICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlYWRvbmx5ID0gZmFsc2U7XG4gICAgdGhpcy5yZXF1aXJlZCA9IGZhbHNlO1xuICAgIHRoaXMudmFsdWUgPSAnJztcbiAgICB0aGlzLmFyaWFMYWJlbCA9ICcnO1xuICAgIHRoaXMuYXJpYUxhYmVsbGVkYnkgPSAnJztcbiAgICB0aGlzLnJvd3MgPSAyO1xuICAgIC8vIEV2ZW50c1xuICAgIHRoaXMuX2hhbmRsZUlucHV0ID0gZXZ0ID0+IHtcbiAgICAgIGZpcmUodGhpcywgJ25lLWlucHV0Jywge1xuICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICB2YWx1ZTogZXZ0LnRhcmdldC52YWx1ZVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG4gIC8vIFN0eWxlc1xuICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBodG1sVGVtcGxhdGUgPSBodG1sYFxuICAgICAgPHRleHRhcmVhXG4gICAgICAgID9kaXNhYmxlZD0ke3RoaXMuZGlzYWJsZWR9XG4gICAgICAgID9yZWFkb25seT0ke3RoaXMucmVhZG9ubHl9XG4gICAgICAgID9yZXF1aXJlZD0ke3RoaXMucmVxdWlyZWR9XG4gICAgICAgIGFyaWEtbGFiZWw9JHt0aGlzLmFyaWFMYWJlbCB8fCBub3RoaW5nfVxuICAgICAgICBhcmlhLWxhYmVsbGVkYnk9JHt0aGlzLmFyaWFMYWJlbGxlZGJ5IHx8IG5vdGhpbmd9XG4gICAgICAgIHBsYWNlaG9sZGVyPSR7aWZEZWZpbmVkKHRoaXMucGxhY2Vob2xkZXIpfVxuICAgICAgICByb3dzPSR7dGhpcy5yb3dzfVxuICAgICAgICBAaW5wdXQ9JHt0aGlzLl9oYW5kbGVJbnB1dH1cbiAgICAgICAgLnZhbHVlPSR7bGl2ZSh0aGlzLnZhbHVlKX1cbiAgICAgICAgY2xhc3M9JHtjbGFzc01hcCh7XG4gICAgICBlcnJvcjogdGhpcy52YWxpZGF0aW9uU3RhdGUgPT09IFZhbGlkYXRpb25UeXBlLmVycm9yLFxuICAgICAgd2FybmluZzogdGhpcy52YWxpZGF0aW9uU3RhdGUgPT09IFZhbGlkYXRpb25UeXBlLndhcm5pbmdcbiAgICB9KX1cbiAgICAgID48L3RleHRhcmVhPlxuICAgIGA7XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyV2l0aFZhbGlkYXRpb24oaHRtbFRlbXBsYXRlKTtcbiAgfVxufTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogQm9vbGVhbixcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZVRleHRhcmVhLnByb3RvdHlwZSwgXCJkaXNhYmxlZFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBCb29sZWFuLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIE5lVGV4dGFyZWEucHJvdG90eXBlLCBcInJlYWRvbmx5XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IEJvb2xlYW4sXG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVUZXh0YXJlYS5wcm90b3R5cGUsIFwicmVxdWlyZWRcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogU3RyaW5nXG59KV0sIE5lVGV4dGFyZWEucHJvdG90eXBlLCBcInBsYWNlaG9sZGVyXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZ1xufSldLCBOZVRleHRhcmVhLnByb3RvdHlwZSwgXCJ2YWx1ZVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBTdHJpbmcsXG4gIGF0dHJpYnV0ZTogJ25lLWFyaWEtbGFiZWwnXG59KV0sIE5lVGV4dGFyZWEucHJvdG90eXBlLCBcImFyaWFMYWJlbFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBTdHJpbmcsXG4gIGF0dHJpYnV0ZTogJ25lLWFyaWEtbGFiZWxsZWRieSdcbn0pXSwgTmVUZXh0YXJlYS5wcm90b3R5cGUsIFwiYXJpYUxhYmVsbGVkYnlcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogTnVtYmVyXG59KV0sIE5lVGV4dGFyZWEucHJvdG90eXBlLCBcInJvd3NcIiwgdm9pZCAwKTtcbk5lVGV4dGFyZWEgPSBfX2RlY29yYXRlKFtjdXN0b21FbGVtZW50KCduZS10ZXh0YXJlYScpXSwgTmVUZXh0YXJlYSk7XG5cbmV4cG9ydCB7IE5lVGV4dGFyZWEgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRleHRhcmVhLmpzLm1hcFxuIiwiaW1wb3J0IHsgXyBhcyBfX2RlY29yYXRlIH0gZnJvbSAnLi9iYXNlLnN0eWxlcy0xMWQzOTE4MS5qcyc7XG5pbXBvcnQgeyBjc3MsIExpdEVsZW1lbnQsIGh0bWwgfSBmcm9tICdsaXQnO1xuaW1wb3J0IHsgc3RhdGUsIHByb3BlcnR5LCBjdXN0b21FbGVtZW50IH0gZnJvbSAnbGl0L2RlY29yYXRvcnMuanMnO1xuaW1wb3J0IHsgY2xhc3NNYXAgfSBmcm9tICdsaXQvZGlyZWN0aXZlcy9jbGFzcy1tYXAuanMnO1xuaW1wb3J0IHsgc3R5bGVNYXAgfSBmcm9tICdsaXQvZGlyZWN0aXZlcy9zdHlsZS1tYXAuanMnO1xuaW1wb3J0IHsgU2NvcGVkRWxlbWVudHNNaXhpbiB9IGZyb20gJ0BvcGVuLXdjL3Njb3BlZC1lbGVtZW50cyc7XG5pbXBvcnQgeyBJIGFzIEljb25zIH0gZnJvbSAnLi9pY29uVHlwZS04MzI2ZWRkYi5qcyc7XG5pbXBvcnQgeyBOZUljb24gfSBmcm9tICcuL2ljb24uanMnO1xuaW1wb3J0IHsgZiBhcyBmaXJlIH0gZnJvbSAnLi9ldmVudHMtMTE3M2Y1NjIuanMnO1xuaW1wb3J0IHsgQSBhcyBBbGVydFR5cGUgfSBmcm9tICcuL2FsZXJ0VHlwZS1iZGRhZGI0ZC5qcyc7XG5pbXBvcnQgeyByIGFzIHJlbmRlckljb24gfSBmcm9tICcuL2ljb24uYmFzZS03YTkxOWRiMi5qcyc7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5jb25zdCB0b2tlbnMgPSBjc3NgXG4gICoge1xuICAtLW5lLXRvYXN0LXNpemluZy1pY29uOiB2YXIoLS1uZS1yZWYtc2l6aW5nLTA0LCAxZW0pO1xuICAtLW5lLXRvYXN0LXNpemluZy10aW1lci1iYXItaGVpZ2h0OiB2YXIoLS1uZS1yZWYtc2l6aW5nLTAxLCAwLjI1ZW0pO1xuICAtLW5lLXRvYXN0LXBhZGRpbmctaG9yaXpvbnRhbDogdmFyKC0tbmUtcmVmLXNwYWNpbmctbWVkaXVtLCAxZW0pO1xuICAtLW5lLXRvYXN0LXBhZGRpbmctdmVydGljYWw6IHZhcigtLW5lLXJlZi1zcGFjaW5nLXgtc21hbGwsIDAuNWVtKTtcbiAgLS1uZS10b2FzdC1nYXA6IHZhcigtLW5lLXJlZi1zcGFjaW5nLW1lZGl1bSwgMWVtKTtcbiAgLS1uZS10b2FzdC1jb2xvci1iYWNrZ3JvdW5kLWRhbmdlcjogdmFyKC0tbmUtcmVmLWNvbG9yLXJlZC01MCwgI0U2MDAwMCk7XG4gIC0tbmUtdG9hc3QtY29sb3ItYmFja2dyb3VuZC1zdWNjZXNzOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JlZW4tNTAsICMwMDg3MzgpO1xuICAtLW5lLXRvYXN0LWNvbG9yLWJhY2tncm91bmQtaW5mbzogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtNjAsICMwMDZCRDYpO1xuICAtLW5lLXRvYXN0LWNvbG9yLWJhY2tncm91bmQtd2FybmluZzogdmFyKC0tbmUtcmVmLWNvbG9yLXllbGxvdy01MCwgI0ZGQ0YxQSk7XG4gIC0tbmUtdG9hc3QtY29sb3ItbGFiZWwtZGVmYXVsdDogdmFyKC0tbmUtcmVmLWNvbG9yLXdoaXRlLCAjZmZmZmZmKTtcbiAgLS1uZS10b2FzdC1jb2xvci1sYWJlbC13YXJuaW5nOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS05MCwgIzE2MTcxOCk7XG4gIC0tbmUtdG9hc3QtY29sb3ItdGltZXItZGVmYXVsdDogdmFyKC0tbmUtcmVmLWNvbG9yLXdoaXRlLCAjZmZmZmZmKTtcbiAgLS1uZS10b2FzdC1jb2xvci10aW1lci13YXJuaW5nOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS05MCwgIzE2MTcxOCk7XG4gIC0tbmUtdG9hc3QtYm9yZGVyLXJhZGl1cy1kZWZhdWx0OiB2YXIoLS1uZS1yZWYtYm9yZGVyLXJhZGl1cy1tZWRpdW0sIC4yNWVtKTtcbiAgLS1uZS10b2FzdC1ib3JkZXItcmFkaXVzLXRpbWVyLXRvcDogdmFyKC0tbmUtcmVmLWJvcmRlci1yYWRpdXMtbm9uZSwgMCk7XG4gIC0tbmUtdG9hc3QtYm9yZGVyLXJhZGl1cy10aW1lci1ib3R0b20tbGVmdDogdmFyKC0tbmUtcmVmLWJvcmRlci1yYWRpdXMtbWVkaXVtLCAuMjVlbSk7XG4gIC0tbmUtdG9hc3QtYm9yZGVyLXJhZGl1cy10aW1lci1ib3R0b20tcmlnaHQ6IHZhcigtLW5lLXJlZi1ib3JkZXItcmFkaXVzLW5vbmUsIDApO1xuICAtLW5lLXRvYXN0LXNoYWRvdzogMHB4IDBweCA4cHggdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktOTAtMjAsICMxNjE3MTgyMCk7XG4gIC0tbmUtdG9hc3QtZm9udC1mYW1pbHk6IHZhcigtLW5lLXJlZi1mb250LWZhbWlseS1vcGVuLXNhbnMsIE9wZW4gU2Fucyk7XG4gIC0tbmUtdG9hc3QtZm9udC1zaXplOiB2YXIoLS1uZS1yZWYtZm9udC1zaXplLTA0LCAwLjg3NWVtKTtcbn1cbmA7XG5cbmNvbnN0IGJhc2UkMSA9IGNzc2BcbiAgOmhvc3Qge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGJveC1zaGFkb3c6IHZhcigtLW5lLXJlZi1zaGFkb3ctbGV2ZWwxKTtcbiAgfVxuXG4gIC50b2FzdC1pdGVtIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWZsb3c6IHJvdyBub3dyYXA7XG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgYWxpZ24tY29udGVudDogY2VudGVyO1xuICAgIHBhZGRpbmc6IHZhcigtLW5lLXRvYXN0LXBhZGRpbmctaG9yaXpvbnRhbCkgdmFyKC0tbmUtdG9hc3QtcGFkZGluZy12ZXJ0aWNhbCk7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgYm9yZGVyLXJhZGl1czogdmFyKC0tbmUtdG9hc3QtYm9yZGVyLXJhZGl1cy1kZWZhdWx0KTtcbiAgICBmb250LWZhbWlseTogdmFyKC0tbmUtdG9hc3QtZm9udC1mYW1pbHkpO1xuICAgIGZvbnQtc2l6ZTogdmFyKC0tbmUtdG9hc3QtZm9udC1zaXplKTtcbiAgICBjb2xvcjogdmFyKC0tbmUtdG9hc3QtY29sb3ItbGFiZWwtZGVmYXVsdCk7XG4gIH1cblxuICAudGltZXItYmFyIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgYm90dG9tOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgaGVpZ2h0OiAwLjI1ZW07XG4gICAgYm9yZGVyLXJhZGl1czogdmFyKC0tbmUtdG9hc3QtYm9yZGVyLXJhZGl1cy10aW1lci10b3ApXG4gICAgICB2YXIoLS1uZS10b2FzdC1ib3JkZXItcmFkaXVzLXRpbWVyLXRvcClcbiAgICAgIHZhcigtLW5lLXRvYXN0LWJvcmRlci1yYWRpdXMtdGltZXItYm90dG9tLWxlZnQpXG4gICAgICB2YXIoLS1uZS10b2FzdC1ib3JkZXItcmFkaXVzLXRpbWVyLWJvdHRvbS1yaWdodCk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmUtdG9hc3QtY29sb3ItdGltZXItZGVmYXVsdCk7XG4gICAgdHJhbnNpdGlvbjogd2lkdGggNTBtcyBsaW5lYXI7XG4gIH1cblxuICAuaW5mbyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmUtdG9hc3QtY29sb3ItYmFja2dyb3VuZC1pbmZvKTtcbiAgfVxuXG4gIC5zdWNjZXNzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS10b2FzdC1jb2xvci1iYWNrZ3JvdW5kLXN1Y2Nlc3MpO1xuICB9XG5cbiAgLmRhbmdlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmUtdG9hc3QtY29sb3ItYmFja2dyb3VuZC1kYW5nZXIpO1xuICB9XG5cbiAgLndhcm5pbmcge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLXRvYXN0LWNvbG9yLWJhY2tncm91bmQtd2FybmluZyk7XG4gICAgY29sb3I6IHZhcigtLW5lLXRvYXN0LWNvbG9yLWxhYmVsLXdhcm5pbmcpO1xuICB9XG5cbiAgLndhcm5pbmcgLnRpbWVyLWJhciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmUtdG9hc3QtY29sb3ItdGltZXItd2FybmluZyk7XG4gIH1cblxuICAuY29udGVudCB7XG4gICAgZmxleC1ncm93OiAxO1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgfVxuXG4gIC5iYW5uZXItYWxlcnQuY2xvc2FibGUgLmNvbnRlbnQge1xuICAgIHBhZGRpbmctcmlnaHQ6IDA7XG4gIH1cblxuICAuaWNvbiB7XG4gICAgZmxleC1zaHJpbms6IDA7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgfVxuXG4gIC53YXJuaW5nIC5pY29uIHtcbiAgICBjb2xvcjogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktOTApO1xuICB9XG5cbiAgLnR5cGUtaWNvbiB7XG4gICAgbWluLXdpZHRoOiB2YXIoLS1uZS10b2FzdC1zaXppbmctaWNvbik7XG4gICAgbWF4LXdpZHRoOiB2YXIoLS1uZS10b2FzdC1zaXppbmctaWNvbik7XG4gICAgbWFyZ2luOiAwIDZweDtcbiAgfVxuYDtcbmNvbnN0IHN0eWxlcyQxID0gW2Jhc2UkMSwgdG9rZW5zXTtcblxuLyoqXG4gKiBAdGFnIG5lLXRvYXN0LWl0ZW1cbiAqIEB0YWduYW1lIG5lLXRvYXN0LWl0ZW1cbiAqXG4gKiBAZGVzY3JpcHRpb24gQ29udHJvbCB0byByZW5kZXIgYSB0b2FzdCBub3RpZmljYXRpb24gYXQgdGhlIHRvcCBvZiB0aGUgc2NyZWVuIHdpdGggYSBkZWZhdWx0IHRpbWVvdXQgZHVyYXRpb24gb2YgNjAwMCBtaWxsaXNlY29uZHMuXG4gKlxuICogQGV2ZW50IG5lLWNsb3NlIFJhaXNlZCB3aGVuIHRoZSBpbnRlcm5hbCBidWlsdCBpbiBjbG9zZSBidXR0b24gaXMgY2xpY2tlZFxuICovXG5sZXQgTmVUb2FzdEl0ZW0gPSBjbGFzcyBOZVRvYXN0SXRlbSBleHRlbmRzIFNjb3BlZEVsZW1lbnRzTWl4aW4oTGl0RWxlbWVudCkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMuZGVmYXVsdER1cmF0aW9uID0gNjAwMDtcbiAgICB0aGlzLl9wcm9ncmVzc1RpbWVyID0gbnVsbDtcbiAgICB0aGlzLl9wcm9ncmVzcyA9IDEwMDtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhhdCB2YXJpYW50IHR5cGUuIEluZm8gaXMgZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuYWxlcnRUeXBlID0gQWxlcnRUeXBlLmluZm87XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSB0aW1lb3V0IGR1cmF0aW9uLiA2MDAwIGJ5IGRlZmF1bHQsIHNldHRpbmcgdGhlIGR1cmF0aW9uIHRvIDAgd2lsbCB1c2UgdGhlIGRlZmF1bHQgdmFsdWVcbiAgICAgKi9cbiAgICB0aGlzLmR1cmF0aW9uID0gdGhpcy5kZWZhdWx0RHVyYXRpb247XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoYXQgdGhlIHNob3VsZCBiZSBjbG9zYWJsZSBvciBub3RcbiAgICAgKi9cbiAgICB0aGlzLmNsb3NhYmxlID0gZmFsc2U7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoYXQgYW4gaW5wdXQgc2hvdWxkIGJlIGRpc2FibGVkXG4gICAgICovXG4gICAgdGhpcy5hdXRvQ2xvc2UgPSB0cnVlO1xuICAgIC8vIEV2ZW50c1xuICAgIHRoaXMuX2hhbmRsZU1vdXNlT3ZlciA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLl9wcm9ncmVzc1RpbWVyKSB7XG4gICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5fcHJvZ3Jlc3NUaW1lcik7XG4gICAgICB9XG4gICAgICB0aGlzLl9wcm9ncmVzc1RpbWVyID0gbnVsbDtcbiAgICB9O1xuICAgIHRoaXMuX2hhbmRsZU1vdXNlT3V0ID0gKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuYXV0b0Nsb3NlICYmIHRoaXMuX3Byb2dyZXNzID4gMCkge1xuICAgICAgICB0aGlzLl91cGRhdGVQcm9ncmVzcygpO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5faGFuZGxlQmFubmVyQWxlcnROZUNsb3NlID0gZXZ0ID0+IHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgdGhpcy5fY2xvc2UoKTtcbiAgICB9O1xuICAgIC8vIEZ1bmN0aW9uc1xuICAgIHRoaXMuX2Nsb3NlID0gKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuX3Byb2dyZXNzVGltZXIpIHtcbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLl9wcm9ncmVzc1RpbWVyKTtcbiAgICAgICAgdGhpcy5fcHJvZ3Jlc3NUaW1lciA9IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5tZXNzYWdlSWQpIHtcbiAgICAgICAgZmlyZSh0aGlzLCAnbmUtY2xvc2UnLCB7XG4gICAgICAgICAgZGV0YWlsOiB0aGlzLm1lc3NhZ2VJZFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuX3VwZGF0ZVByb2dyZXNzID0gKCkgPT4ge1xuICAgICAgdGhpcy5fcHJvZ3Jlc3MgLT0gMTtcbiAgICAgIGlmICh0aGlzLl9wcm9ncmVzcyA+IDApIHtcbiAgICAgICAgdGhpcy5fcHJvZ3Jlc3NUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHRoaXMuX3VwZGF0ZVByb2dyZXNzKCksIHRoaXMuZHVyYXRpb24gPiAwID8gdGhpcy5kdXJhdGlvbiAvIDEwMCA6IHRoaXMuZGVmYXVsdER1cmF0aW9uIC8gMTAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2Nsb3NlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmdldFR5cGVJY29uID0gKCkgPT4ge1xuICAgICAgbGV0IGljb25UeXBlO1xuICAgICAgc3dpdGNoICh0aGlzLmFsZXJ0VHlwZSkge1xuICAgICAgICBjYXNlIEFsZXJ0VHlwZS5pbmZvOlxuICAgICAgICAgIGljb25UeXBlID0gSWNvbnMuaW5mbztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBBbGVydFR5cGUuc3VjY2VzczpcbiAgICAgICAgICBpY29uVHlwZSA9IEljb25zLnN1Y2Nlc3M7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQWxlcnRUeXBlLmRhbmdlcjpcbiAgICAgICAgICBpY29uVHlwZSA9IEljb25zLmRhbmdlckV4Y2xhbWF0aW9uO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEFsZXJ0VHlwZS53YXJuaW5nOlxuICAgICAgICAgIGljb25UeXBlID0gSWNvbnMud2FybmluZ0V4Y2xhbWF0aW9uO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGljb25UeXBlO1xuICAgIH07XG4gIH1cbiAgLy8gU3R5bGVzXG4gIHN0YXRpYyBnZXQgc3R5bGVzKCkge1xuICAgIHJldHVybiBzdHlsZXMkMTtcbiAgfVxuICBzdGF0aWMgZ2V0IHNjb3BlZEVsZW1lbnRzKCkge1xuICAgIHJldHVybiB7XG4gICAgICAnbmUtaWNvbic6IE5lSWNvblxuICAgIH07XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBodG1sYDxkaXZcbiAgICAgIHJvbGU9XCJhbGVydFwiXG4gICAgICBjbGFzcz1cIiR7Y2xhc3NNYXAoe1xuICAgICAgJ3RvYXN0LWl0ZW0nOiB0cnVlLFxuICAgICAgW3RoaXMuYWxlcnRUeXBlXTogdHJ1ZSxcbiAgICAgIGNsb3NhYmxlOiB0aGlzLmNsb3NhYmxlXG4gICAgfSl9XCJcbiAgICAgIEBtb3VzZW92ZXI9XCIke3RoaXMuX2hhbmRsZU1vdXNlT3Zlcn1cIlxuICAgICAgQG1vdXNlb3V0PVwiJHt0aGlzLl9oYW5kbGVNb3VzZU91dH1cIlxuICAgICAgQGZvY3VzPVwiJHt0aGlzLl9oYW5kbGVNb3VzZU92ZXJ9XCJcbiAgICAgIEBibHVyPVwiJHt0aGlzLl9oYW5kbGVNb3VzZU91dH1cIlxuICAgID5cbiAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbiB0eXBlLWljb25cIj4ke3JlbmRlckljb24oe1xuICAgICAgdHlwZTogdGhpcy5nZXRUeXBlSWNvbigpXG4gICAgfSl9PC9uZS1pY29uPjwvc3Bhbj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb250ZW50XCI+PHNsb3Q+PC9zbG90PjwvZGl2PlxuICAgICAgJHt0aGlzLmNsb3NhYmxlID8gaHRtbGA8bmUtaWNvbi1idXR0b25cbiAgICAgICAgICAgICAgdmFyaWFudD0ke3RoaXMuYWxlcnRUeXBlID09PSBBbGVydFR5cGUud2FybmluZyA/ICdkYXJrJyA6ICdsaWdodCd9XG4gICAgICAgICAgICAgIG5lLWFyaWEtbGFiZWw9XCJjbG9zZS1idXR0b25cIlxuICAgICAgICAgICAgICBpY29uPSR7SWNvbnMuY2xvc2VEZWZhdWx0fVxuICAgICAgICAgICAgICBAY2xpY2s9JHt0aGlzLl9oYW5kbGVCYW5uZXJBbGVydE5lQ2xvc2V9XG4gICAgICAgICAgICA+PC9uZS1pY29uLWJ1dHRvbj5gIDogJyd9XG4gICAgICAke3RoaXMuYXV0b0Nsb3NlID8gaHRtbGA8ZGl2XG4gICAgICAgICAgICAgIGNsYXNzPVwidGltZXItYmFyXCJcbiAgICAgICAgICAgICAgc3R5bGU9JHtzdHlsZU1hcCh7XG4gICAgICB3aWR0aDogYCR7dGhpcy5fcHJvZ3Jlc3N9JWBcbiAgICB9KX1cbiAgICAgICAgICAgID48L2Rpdj5gIDogJyd9XG4gICAgPC9kaXY+YDtcbiAgfVxuICBmaXJzdFVwZGF0ZWQoKSB7XG4gICAgaWYgKHRoaXMuYXV0b0Nsb3NlKSB7XG4gICAgICB0aGlzLl91cGRhdGVQcm9ncmVzcygpO1xuICAgIH1cbiAgfVxufTtcbl9fZGVjb3JhdGUoW3N0YXRlKCldLCBOZVRvYXN0SXRlbS5wcm90b3R5cGUsIFwiX3Byb2dyZXNzXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZyxcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZVRvYXN0SXRlbS5wcm90b3R5cGUsIFwiYWxlcnRUeXBlXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZyxcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZVRvYXN0SXRlbS5wcm90b3R5cGUsIFwibWVzc2FnZUlkXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IE51bWJlcixcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZVRvYXN0SXRlbS5wcm90b3R5cGUsIFwiZHVyYXRpb25cIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogQm9vbGVhblxufSldLCBOZVRvYXN0SXRlbS5wcm90b3R5cGUsIFwiY2xvc2FibGVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogQm9vbGVhblxufSldLCBOZVRvYXN0SXRlbS5wcm90b3R5cGUsIFwiYXV0b0Nsb3NlXCIsIHZvaWQgMCk7XG5OZVRvYXN0SXRlbSA9IF9fZGVjb3JhdGUoW2N1c3RvbUVsZW1lbnQoJ25lLXRvYXN0LWl0ZW0nKV0sIE5lVG9hc3RJdGVtKTtcblxuY29uc3QgYmFzZSA9IGNzc2BcbiAgLnRvYXN0LW5vdGlmaWNhdGlvbiB7XG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIGxlZnQ6IDUwJTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtd3JhcDogbm93cmFwO1xuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcbiAgICB3aWR0aDogNTB2dztcbiAgICBwYWRkaW5nOiAzcHggNHB4IDRweDtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcbiAgICB6LWluZGV4OiA5OTk5O1xuICB9XG5cbiAgLnRvYXN0LW5vdGlmaWNhdGlvbi50b3AtY2VudGVyIHtcbiAgICB0b3A6IDA7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgfVxuXG4gIC50b2FzdC1ub3RpZmljYXRpb24uYm90dG9tLWNlbnRlciB7XG4gICAgYm90dG9tOiAwO1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4tcmV2ZXJzZTtcbiAgfVxuXG4gIC50b2FzdC1pdGVtLmhpZGRlbiB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuYDtcbmNvbnN0IHN0eWxlcyA9IFtiYXNlXTtcblxuLyoqXG4gKiBAdGFnIG5lLXRvYXN0LW5vdGlmaWNhdGlvblxuICogQHRhZ25hbWUgbmUtdG9hc3Qtbm90aWZpY2F0aW9uXG4gKlxuICovXG5sZXQgTmVUb2FzdE5vdGlmaWNhdGlvbiA9IGNsYXNzIE5lVG9hc3ROb3RpZmljYXRpb24gZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAvLyBQcm9wZXJ0aWVzXG4gICAgdGhpcy5fdG9hc3RJdGVtcyA9IFtdO1xuICAgIHRoaXMucG9zaXRpb24gPSAndG9wLWNlbnRlcic7XG4gICAgLy8gRXZlbnRzXG4gICAgdGhpcy5faGFuZGxlVG9hc3RJdGVtTmVDbG9zZSA9IGV2dCA9PiB7XG4gICAgICBjb25zdCBpZHggPSB0aGlzLl90b2FzdEl0ZW1zLmZpbmRJbmRleCh0aSA9PiB0aS5tZXNzYWdlSWQgPT09IGV2dC5kZXRhaWwpO1xuICAgICAgaWYgKGlkeCA+IC0xKSB7XG4gICAgICAgIGNvbnN0IG5ld1RvYXN0SXRlbXMgPSB0aGlzLl90b2FzdEl0ZW1zLnNsaWNlKCk7XG4gICAgICAgIG5ld1RvYXN0SXRlbXNbaWR4XS5oaWRkZW4gPSB0cnVlO1xuICAgICAgICBjb25zdCBhbGxUb2FzdHNIaWRkZW4gPSAhbmV3VG9hc3RJdGVtcy5zb21lKHRpID0+IHRpLmhpZGRlbiAhPT0gdHJ1ZSk7XG4gICAgICAgIHRoaXMuX3RvYXN0SXRlbXMgPSBhbGxUb2FzdHNIaWRkZW4gPyBbXSA6IG5ld1RvYXN0SXRlbXM7XG4gICAgICB9XG4gICAgfTtcbiAgICAvLyBGdW5jdGlvbnNcbiAgICB0aGlzLnNob3dUb2FzdCA9IHRvYXN0SXRlbVByb3BzID0+IHtcbiAgICAgIGNvbnN0IHRvYXN0SXRlbSA9IHtcbiAgICAgICAgLi4udG9hc3RJdGVtUHJvcHNcbiAgICAgIH07XG4gICAgICBpZiAoIXRvYXN0SXRlbS5tZXNzYWdlSWQpIHtcbiAgICAgICAgdG9hc3RJdGVtLm1lc3NhZ2VJZCA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyLCA5KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3RvYXN0SXRlbXMgPSBbLi4udGhpcy5fdG9hc3RJdGVtcywgdG9hc3RJdGVtXTtcbiAgICB9O1xuICB9XG4gIC8vIFN0eWxlc1xuICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gaHRtbGA8ZGl2IGNsYXNzPVwidG9hc3Qtbm90aWZpY2F0aW9uICR7dGhpcy5wb3NpdGlvbn1cIj5cbiAgICAgICR7dGhpcy5fdG9hc3RJdGVtcy5tYXAodGkgPT4gaHRtbGA8bmUtdG9hc3QtaXRlbVxuICAgICAgICAgICAgY2xhc3M9XCJ0b2FzdC1pdGVtICR7dGkuaGlkZGVuID8gJ2hpZGRlbicgOiAnJ31cIlxuICAgICAgICAgICAgLmFsZXJ0VHlwZT0ke3RpWydhbGVydC10eXBlJ119XG4gICAgICAgICAgICAubWVzc2FnZUlkPSR7dGkubWVzc2FnZUlkfVxuICAgICAgICAgICAgLmR1cmF0aW9uPSR7dGkuZHVyYXRpb259XG4gICAgICAgICAgICAuY2xvc2FibGU9JHt0aS5jbG9zYWJsZSA9PT0gdHJ1ZX1cbiAgICAgICAgICAgIC5hdXRvQ2xvc2U9JHt0aS5hdXRvQ2xvc2UgIT09IGZhbHNlfVxuICAgICAgICAgICAgQG5lLWNsb3NlPSR7dGhpcy5faGFuZGxlVG9hc3RJdGVtTmVDbG9zZX1cbiAgICAgICAgICAgID4ke3RpLmNvbnRlbnR9PC9uZS10b2FzdC1pdGVtXG4gICAgICAgICAgPmApfVxuICAgIDwvZGl2PmA7XG4gIH1cbn07XG5fX2RlY29yYXRlKFtzdGF0ZSgpXSwgTmVUb2FzdE5vdGlmaWNhdGlvbi5wcm90b3R5cGUsIFwiX3RvYXN0SXRlbXNcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZVRvYXN0Tm90aWZpY2F0aW9uLnByb3RvdHlwZSwgXCJwb3NpdGlvblwiLCB2b2lkIDApO1xuTmVUb2FzdE5vdGlmaWNhdGlvbiA9IF9fZGVjb3JhdGUoW2N1c3RvbUVsZW1lbnQoJ25lLXRvYXN0LW5vdGlmaWNhdGlvbicpXSwgTmVUb2FzdE5vdGlmaWNhdGlvbik7XG5cbmV4cG9ydCB7IE5lVG9hc3RJdGVtIGFzIE4sIE5lVG9hc3ROb3RpZmljYXRpb24gYXMgYSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9hc3Qtbm90aWZpY2F0aW9uLTBkZGU2ZmZmLmpzLm1hcFxuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGl0JztcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmNvbnN0IHRva2VucyA9IGNzc2BcbiAgKiB7XG4gIC0tbmUtdG9vbGJhci1mb250LXNpemU6IHZhcigtLW5lLXJlZi1mb250LXNpemUtMDQsIDAuODc1ZW0pO1xuICAtLW5lLXRvb2xiYXItcGFkZGluZy1ob3Jpem9udGFsOiB2YXIoLS1uZS1yZWYtc3BhY2luZy14LXNtYWxsLCAwLjVlbSk7XG4gIC0tbmUtdG9vbGJhci1wYWRkaW5nLXZlcnRpY2FsOiB2YXIoLS1uZS1yZWYtc3BhY2luZy1ub25lLCAwKTtcbiAgLS1uZS10b29sYmFyLWdhcDogdmFyKC0tbmUtcmVmLXNwYWNpbmcteC1zbWFsbCwgMC41ZW0pO1xuICAtLW5lLXRvb2xiYXItYmFja2dyb3VuZDogdmFyKC0tbmUtcmVmLWNvbG9yLXdoaXRlLCAjZmZmZmZmKTtcbiAgLS1uZS10b29sYmFyLXNoYWRvdzogMHB4IDBweCA4cHggdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktOTAtMjAsICMxNjE3MTgyMCk7XG59XG5gO1xuXG5leHBvcnQgeyB0b2tlbnMgYXMgdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9vbGJhci50b2tlbnMtNTA3ZjU4OGYuanMubWFwXG4iLCJpbXBvcnQgeyBjIGFzIGNvbW1vblN0eWxlcywgXyBhcyBfX2RlY29yYXRlIH0gZnJvbSAnLi9iYXNlLnN0eWxlcy0xMWQzOTE4MS5qcyc7XG5pbXBvcnQgeyBjc3MsIExpdEVsZW1lbnQsIGh0bWwsIG5vdGhpbmcgfSBmcm9tICdsaXQnO1xuaW1wb3J0IHsgcHJvcGVydHksIGN1c3RvbUVsZW1lbnQgfSBmcm9tICdsaXQvZGVjb3JhdG9ycy5qcyc7XG5pbXBvcnQgeyB0IGFzIHRva2VucyB9IGZyb20gJy4vdG9vbGJhci50b2tlbnMtNTA3ZjU4OGYuanMnO1xuXG5jb25zdCBiYXNlVG9vbGJhciA9IGNzc2BcbiAgLnRvb2xiYXIge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZmxvdzogcm93IG5vd3JhcDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XG4gICAgZ2FwOiB2YXIoLS1uZS10b29sYmFyLWdhcCk7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogdmFyKC0tbmUtdG9vbGJhci1wYWRkaW5nLXZlcnRpY2FsKVxuICAgICAgdmFyKC0tbmUtdG9vbGJhci1wYWRkaW5nLWhvcml6b250YWwpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLXRvb2xiYXItYmFja2dyb3VuZCk7XG4gICAgYm94LXNoYWRvdzogM3B4IDNweCA1cHggcmdiKDE5NiAxOTkgMjAyIC8gNTAlKTtcbiAgfVxuXG4gIC50b29sYmFyIDo6c2xvdHRlZChsaSkge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICB9XG5cbiAgLnRvb2xiYXIgOjpzbG90dGVkKC5yaWdodC1zdGFydCkge1xuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICB9XG5gO1xuY29uc3Qgc3R5bGVzID0gW3Rva2VucywgYmFzZVRvb2xiYXIsIGNvbW1vblN0eWxlc107XG5cbmxldCBOZVRvb2xiYXIgPSBjbGFzcyBOZVRvb2xiYXIgZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLmFyaWFMYWJlbCA9ICcnO1xuICB9XG4gIC8vIFN0eWxlc1xuICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gaHRtbGA8ZGl2IGNsYXNzPVwidG9vbGJhclwiIGFyaWEtbGFiZWw9JHt0aGlzLmFyaWFMYWJlbCB8fCBub3RoaW5nfT5cbiAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICA8L2Rpdj5gO1xuICB9XG59O1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICBhdHRyaWJ1dGU6ICduZS1hcmlhLWxhYmVsJyxcbiAgdHlwZTogU3RyaW5nLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIE5lVG9vbGJhci5wcm90b3R5cGUsIFwiYXJpYUxhYmVsXCIsIHZvaWQgMCk7XG5OZVRvb2xiYXIgPSBfX2RlY29yYXRlKFtjdXN0b21FbGVtZW50KCduZS10b29sYmFyJyldLCBOZVRvb2xiYXIpO1xuXG5leHBvcnQgeyBOZVRvb2xiYXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvb2xiYXIuanMubWFwXG4iLCJpbXBvcnQgeyBjIGFzIGNvbW1vblN0eWxlcywgXyBhcyBfX2RlY29yYXRlIH0gZnJvbSAnLi9iYXNlLnN0eWxlcy0xMWQzOTE4MS5qcyc7XG5pbXBvcnQgeyBjc3MsIExpdEVsZW1lbnQsIGh0bWwsIG5vdGhpbmcgfSBmcm9tICdsaXQnO1xuaW1wb3J0IHsgcXVlcnlBc3NpZ25lZE5vZGVzLCBzdGF0ZSwgcHJvcGVydHksIGN1c3RvbUVsZW1lbnQgfSBmcm9tICdsaXQvZGVjb3JhdG9ycy5qcyc7XG5pbXBvcnQgeyBjbGFzc01hcCB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL2NsYXNzLW1hcC5qcyc7XG5pbXBvcnQgeyBpZkRlZmluZWQgfSBmcm9tICdsaXQvZGlyZWN0aXZlcy9pZi1kZWZpbmVkLmpzJztcbmltcG9ydCB7IGNyZWF0ZVJlZiwgcmVmIH0gZnJvbSAnbGl0L2RpcmVjdGl2ZXMvcmVmLmpzJztcbmltcG9ydCB7IFNjb3BlZEVsZW1lbnRzTWl4aW4gfSBmcm9tICdAb3Blbi13Yy9zY29wZWQtZWxlbWVudHMnO1xuaW1wb3J0IHsgTmVJY29uIH0gZnJvbSAnLi9pY29uLmpzJztcbmltcG9ydCB7IHQgYXMgdG9rZW5zJDEgfSBmcm9tICcuL3Rvb2xiYXIudG9rZW5zLTUwN2Y1ODhmLmpzJztcbmltcG9ydCB7IGYgYXMgZmlyZSB9IGZyb20gJy4vZXZlbnRzLTExNzNmNTYyLmpzJztcbmltcG9ydCAnLi9pY29uLmJhc2UtN2E5MTlkYjIuanMnO1xuaW1wb3J0ICdsaXQvZGlyZWN0aXZlcy9zdHlsZS1tYXAuanMnO1xuaW1wb3J0ICdsaXQvZGlyZWN0aXZlcy91bnRpbC5qcyc7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5jb25zdCB0b2tlbnMgPSBjc3NgXG4gICoge1xuICAtLW5lLXRvb2xiYXItYnV0dG9uLXBhZGRpbmctaG9yaXpvbnRhbDogdmFyKC0tbmUtcmVmLXNwYWNpbmctbWVkaXVtLCAxZW0pO1xuICAtLW5lLXRvb2xiYXItYnV0dG9uLXBhZGRpbmctdmVydGljYWw6IHZhcigtLW5lLXJlZi1zcGFjaW5nLXgtc21hbGwsIDAuNWVtKTtcbiAgLS1uZS10b29sYmFyLWJ1dHRvbi1nYXA6IHZhcigtLW5lLXJlZi1zcGFjaW5nLXgtc21hbGwsIDAuNWVtKTtcbiAgLS1uZS10b29sYmFyLWJ1dHRvbi1jb2xvci1iYWNrZ3JvdW5kLWhvdmVyOiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS0wNSwgI0YwRjdGRik7XG4gIC0tbmUtdG9vbGJhci1idXR0b24tY29sb3ItYm9yZGVyLWZvY3VzOiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS0yMCwgI0EzRDFGRik7XG4gIC0tbmUtdG9vbGJhci1idXR0b24tY29sb3ItbGFiZWwtZGVmYXVsdDogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktOTAsICMxNjE3MTgpO1xuICAtLW5lLXRvb2xiYXItYnV0dG9uLWNvbG9yLWxhYmVsLWRpc2FibGVkOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS01MCwgIzZENzM3OSk7XG4gIC0tbmUtdG9vbGJhci1idXR0b24tZm9udC1mYW1pbHk6IHZhcigtLW5lLXJlZi1mb250LWZhbWlseS1vcGVuLXNhbnMsIE9wZW4gU2Fucyk7XG4gIC0tbmUtdG9vbGJhci1idXR0b24tc2l6aW5nLWljb246IHZhcigtLW5lLXJlZi1zaXppbmctMDQsIDFlbSk7XG59XG5gO1xuXG5jb25zdCBiYXNlVG9vbGJhckJ1dHRvbiA9IGNzc2BcbiAgLm91dGVyLWNvbnRhaW5lciB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIH1cblxuICAudG9vbGJhci1idXR0b24ge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZmxvdzogcm93IG5vd3JhcDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XG4gICAgZ2FwOiB2YXIoLS1uZS10b29sYmFyLWJ1dHRvbi1nYXApO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgbWFyZ2luOiAwO1xuICAgIHBhZGRpbmc6IGNhbGModmFyKC0tbmUtdG9vbGJhci1idXR0b24tcGFkZGluZy12ZXJ0aWNhbCkgLSA0cHgpXG4gICAgICBjYWxjKHZhcigtLW5lLXRvb2xiYXItYnV0dG9uLXBhZGRpbmctaG9yaXpvbnRhbCkgLSA0cHgpO1xuICAgIGJvcmRlcjogNHB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICAgIG91dGxpbmU6IG5vbmU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgZm9udC1mYW1pbHk6IHZhcigtLW5lLXRvb2xiYXItYnV0dG9uLWZvbnQtZmFtaWx5KTtcbiAgICBmb250LXNpemU6IHZhcigtLW5lLXRvb2xiYXItZm9udC1zaXplKTtcbiAgICBjb2xvcjogdmFyKC0tbmUtdG9vbGJhci1idXR0b24tY29sb3ItbGFiZWwtZGVmYXVsdCk7XG4gIH1cblxuICAudG9vbGJhci1idXR0b246Zm9jdXMge1xuICAgIGJvcmRlci1jb2xvcjogdmFyKC0tbmUtdG9vbGJhci1idXR0b24tY29sb3ItYm9yZGVyLWZvY3VzKTtcbiAgfVxuXG4gIC50b29sYmFyLWJ1dHRvbjpob3ZlcixcbiAgLnRvb2xiYXItYnV0dG9uLmRyb3Bkb3duLW1lbnUtc2hvd24ge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW5lLXRvb2xiYXItYnV0dG9uLWNvbG9yLWJhY2tncm91bmQtaG92ZXIpO1xuICB9XG5cbiAgLnRvb2xiYXItYnV0dG9uOmRpc2FibGVkIHtcbiAgICBjb2xvcjogdmFyKC0tbmUtdG9vbGJhci1idXR0b24tY29sb3ItbGFiZWwtZGlzYWJsZWQpO1xuICB9XG5cbiAgLmRyb3Bkb3duLW1lbnUtY29udGFpbmVyIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgbGVmdDogLTRweDtcbiAgICByaWdodDogaW5pdGlhbDtcbiAgICBkaXNwbGF5OiBub25lO1xuICAgIG1hcmdpbi10b3A6IDRweDtcbiAgICB6LWluZGV4OiAxO1xuICB9XG5cbiAgLnRvb2xiYXItYnV0dG9uLmRyb3Bkb3duLW1lbnUtc2hvd24gKyAuZHJvcGRvd24tbWVudS1jb250YWluZXIge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICB9XG5cbiAgLmRyb3Bkb3duLW1lbnUtY29udGFpbmVyLnJpZ2h0LWFsaWduZWQge1xuICAgIGxlZnQ6IGluaXRpYWw7XG4gICAgcmlnaHQ6IC00cHg7XG4gIH1cblxuICAuZHJvcGRvd24tbWVudS1jb250YWluZXIgOjpzbG90dGVkKHVsKSB7XG4gICAgbWFyZ2luOiAwO1xuICAgIHBhZGRpbmc6IDA7XG4gIH1cblxuICAuaWNvbiB7XG4gICAgaGVpZ2h0OiB2YXIoLS1uZS10b29sYmFyLWJ1dHRvbi1zaXppbmctaWNvbik7XG4gICAgd2lkdGg6IHZhcigtLW5lLXRvb2xiYXItYnV0dG9uLXNpemluZy1pY29uKTtcbiAgfVxuXG4gIC5pY29uLmZpeGVkLXNpemUge1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAganVzdGlmeS1pdGVtczogY2VudGVyO1xuICB9XG5gO1xuY29uc3Qgc3R5bGVzID0gW3Rva2VucywgYmFzZVRvb2xiYXJCdXR0b24sIHRva2VucyQxLCBjb21tb25TdHlsZXNdO1xuXG5sZXQgTmVUb29sYmFyQnV0dG9uID0gY2xhc3MgTmVUb29sYmFyQnV0dG9uIGV4dGVuZHMgU2NvcGVkRWxlbWVudHNNaXhpbihMaXRFbGVtZW50KSB7XG4gIHN0YXRpYyBnZXQgc2NvcGVkRWxlbWVudHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICduZS1pY29uJzogTmVJY29uXG4gICAgfTtcbiAgfVxuICAvLyBTdHlsZXNcbiAgc3RhdGljIGdldCBzdHlsZXMoKSB7XG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfVxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc2hvd0Ryb3Bkb3duTWVudSA9IGZhbHNlO1xuICAgIHRoaXMuaGFzRHJvcGRvd25NZW51ID0gZmFsc2U7XG4gICAgdGhpcy5idXR0b25DbGlja2VkID0gZmFsc2U7XG4gICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMubGVmdEljb25TaXplID0gJyc7XG4gICAgdGhpcy5yaWdodEljb25TaXplID0gJyc7XG4gICAgdGhpcy5hcmlhTGFiZWwgPSAnJztcbiAgICB0aGlzLl9kcm9wZG93bk1lbnVDb250YWluZXJFbGVtUmVmID0gY3JlYXRlUmVmKCk7XG4gICAgLy8gRXZlbnRzXG4gICAgdGhpcy5fb25DbGljayA9ICgpID0+IHtcbiAgICAgIHRoaXMuYnV0dG9uQ2xpY2tlZCA9IHRydWU7XG4gICAgICBpZiAoIXRoaXMuZGlzYWJsZWQpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzRHJvcGRvd25NZW51KSB7XG4gICAgICAgICAgdGhpcy5zaG93RHJvcGRvd25NZW51ID0gIXRoaXMuc2hvd0Ryb3Bkb3duTWVudTtcbiAgICAgICAgfVxuICAgICAgICBmaXJlKHRoaXMsICduZS1jbGljaycsIHtcbiAgICAgICAgICBjb21wb3NlZDogdHJ1ZSxcbiAgICAgICAgICBidWJibGVzOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuX29uRG9jdW1lbnRDbGljayA9ICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5idXR0b25DbGlja2VkKSB7XG4gICAgICAgIHRoaXMuc2hvd0Ryb3Bkb3duTWVudSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgdGhpcy5idXR0b25DbGlja2VkID0gZmFsc2U7XG4gICAgfTtcbiAgICB0aGlzLl9vbkRyb3Bkb3duTWVudUVsZW1DaGFuZ2UgPSAoKSA9PiB7XG4gICAgICB0aGlzLmhhc0Ryb3Bkb3duTWVudSA9IHRoaXMuX3Nsb3R0ZWREcm9wZG93bk1lbnVFbGVtcy5sZW5ndGggPiAwO1xuICAgIH07XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9vbkRvY3VtZW50Q2xpY2spO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gaHRtbGA8ZGl2IGNsYXNzPVwib3V0ZXItY29udGFpbmVyXCI+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIGNsYXNzPSR7Y2xhc3NNYXAoe1xuICAgICAgJ3Rvb2xiYXItYnV0dG9uJzogdHJ1ZSxcbiAgICAgICdkcm9wZG93bi1tZW51LXNob3duJzogdGhpcy5zaG93RHJvcGRvd25NZW51ICYmIHRoaXMuaGFzRHJvcGRvd25NZW51XG4gICAgfSl9XG4gICAgICAgID9kaXNhYmxlZD0ke3RoaXMuZGlzYWJsZWR9XG4gICAgICAgIEBjbGljaz0ke3RoaXMuX29uQ2xpY2t9XG4gICAgICAgIGFyaWEtZXhwYW5kZWQ9JHtpZkRlZmluZWQodGhpcy5oYXNEcm9wZG93bk1lbnUgPyB0aGlzLnNob3dEcm9wZG93bk1lbnUgOiB1bmRlZmluZWQpfVxuICAgICAgICBhcmlhLWxhYmVsPSR7dGhpcy5hcmlhTGFiZWwgfHwgbm90aGluZ31cbiAgICAgID5cbiAgICAgICAgJHt0aGlzLmxlZnRJY29uVHlwZSAhPT0gdW5kZWZpbmVkID8gaHRtbGA8bmUtaWNvblxuICAgICAgICAgICAgICBjbGFzcz0ke2NsYXNzTWFwKHtcbiAgICAgIGljb246IHRydWUsXG4gICAgICAnZml4ZWQtc2l6ZSc6IHRoaXMubGVmdEljb25TaXplICYmIHRoaXMubGVmdEljb25TaXplICE9PSAnJ1xuICAgIH0pfVxuICAgICAgICAgICAgICB0eXBlPVwiJHt0aGlzLmxlZnRJY29uVHlwZX1cIlxuICAgICAgICAgICAgICAuZml4ZWRTaXplPSR7dGhpcy5sZWZ0SWNvblNpemV9XG4gICAgICAgICAgICA+PC9uZS1pY29uPmAgOiAnJ31cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJidXR0b24tdGV4dFwiPjxzbG90Pjwvc2xvdD48L3NwYW4+XG4gICAgICAgICR7dGhpcy5yaWdodEljb25UeXBlICE9PSB1bmRlZmluZWQgPyBodG1sYDxuZS1pY29uXG4gICAgICAgICAgICAgIGNsYXNzPSR7Y2xhc3NNYXAoe1xuICAgICAgaWNvbjogdHJ1ZSxcbiAgICAgIHJpZ2h0OiB0cnVlLFxuICAgICAgJ2ZpeGVkLXNpemUnOiB0aGlzLnJpZ2h0SWNvblNpemUgJiYgdGhpcy5yaWdodEljb25TaXplICE9PSAnJ1xuICAgIH0pfVxuICAgICAgICAgICAgICB0eXBlPVwiJHt0aGlzLnJpZ2h0SWNvblR5cGV9XCJcbiAgICAgICAgICAgICAgLmZpeGVkU2l6ZT0ke3RoaXMucmlnaHRJY29uU2l6ZX1cbiAgICAgICAgICAgID48L25lLWljb24+YCA6ICcnfVxuICAgICAgPC9idXR0b24+XG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzPVwiZHJvcGRvd24tbWVudS1jb250YWluZXJcIlxuICAgICAgICAke3JlZih0aGlzLl9kcm9wZG93bk1lbnVDb250YWluZXJFbGVtUmVmKX1cbiAgICAgID5cbiAgICAgICAgPHNsb3RcbiAgICAgICAgICBuYW1lPVwiZHJvcGRvd24tbWVudVwiXG4gICAgICAgICAgQHNsb3RjaGFuZ2U9JHt0aGlzLl9vbkRyb3Bkb3duTWVudUVsZW1DaGFuZ2V9XG4gICAgICAgID48L3Nsb3Q+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5gO1xuICB9XG4gIHVwZGF0ZWQoY2hhbmdlZFByb3BzKSB7XG4gICAgaWYgKGNoYW5nZWRQcm9wcy5oYXMoJ3Nob3dEcm9wZG93bk1lbnUnKSAmJiB0aGlzLmhhc0Ryb3Bkb3duTWVudSAmJiB0aGlzLl9kcm9wZG93bk1lbnVDb250YWluZXJFbGVtUmVmLnZhbHVlKSB7XG4gICAgICBpZiAodGhpcy5zaG93RHJvcGRvd25NZW51KSB7XG4gICAgICAgIGNvbnN0IGRyb3Bkb3duTWVudUNvbnRhaW5lckVsZW1SZWN0ID0gdGhpcy5fZHJvcGRvd25NZW51Q29udGFpbmVyRWxlbVJlZi52YWx1ZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgaWYgKGRyb3Bkb3duTWVudUNvbnRhaW5lckVsZW1SZWN0LnJpZ2h0ID4gKHdpbmRvdy5pbm5lcldpZHRoIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCkpIHtcbiAgICAgICAgICB0aGlzLl9kcm9wZG93bk1lbnVDb250YWluZXJFbGVtUmVmLnZhbHVlLmNsYXNzTGlzdC5hZGQoJ3JpZ2h0LWFsaWduZWQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9kcm9wZG93bk1lbnVDb250YWluZXJFbGVtUmVmLnZhbHVlLmNsYXNzTGlzdC5yZW1vdmUoJ3JpZ2h0LWFsaWduZWQnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fZHJvcGRvd25NZW51Q29udGFpbmVyRWxlbVJlZi52YWx1ZS5jbGFzc0xpc3QucmVtb3ZlKCdyaWdodC1hbGlnbmVkJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrPy4oKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX29uRG9jdW1lbnRDbGljayk7XG4gIH1cbn07XG5fX2RlY29yYXRlKFtxdWVyeUFzc2lnbmVkTm9kZXMoe1xuICBzbG90OiAnZHJvcGRvd24tbWVudScsXG4gIGZsYXR0ZW46IHRydWVcbn0pXSwgTmVUb29sYmFyQnV0dG9uLnByb3RvdHlwZSwgXCJfc2xvdHRlZERyb3Bkb3duTWVudUVsZW1zXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtzdGF0ZSgpXSwgTmVUb29sYmFyQnV0dG9uLnByb3RvdHlwZSwgXCJzaG93RHJvcGRvd25NZW51XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtzdGF0ZSgpXSwgTmVUb29sYmFyQnV0dG9uLnByb3RvdHlwZSwgXCJoYXNEcm9wZG93bk1lbnVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3N0YXRlKCldLCBOZVRvb2xiYXJCdXR0b24ucHJvdG90eXBlLCBcImJ1dHRvbkNsaWNrZWRcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogQm9vbGVhbixcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZVRvb2xiYXJCdXR0b24ucHJvdG90eXBlLCBcImRpc2FibGVkXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZyxcbiAgYXR0cmlidXRlOiAnbGVmdC1pY29uJyxcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZVRvb2xiYXJCdXR0b24ucHJvdG90eXBlLCBcImxlZnRJY29uVHlwZVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBTdHJpbmcsXG4gIGF0dHJpYnV0ZTogJ2xlZnQtaWNvbi1zaXplJyxcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZVRvb2xiYXJCdXR0b24ucHJvdG90eXBlLCBcImxlZnRJY29uU2l6ZVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBTdHJpbmcsXG4gIGF0dHJpYnV0ZTogJ3JpZ2h0LWljb24nLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIE5lVG9vbGJhckJ1dHRvbi5wcm90b3R5cGUsIFwicmlnaHRJY29uVHlwZVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBTdHJpbmcsXG4gIGF0dHJpYnV0ZTogJ3JpZ2h0LWljb24tc2l6ZScsXG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVUb29sYmFyQnV0dG9uLnByb3RvdHlwZSwgXCJyaWdodEljb25TaXplXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIGF0dHJpYnV0ZTogJ25lLWFyaWEtbGFiZWwnLFxuICB0eXBlOiBTdHJpbmcsXG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVUb29sYmFyQnV0dG9uLnByb3RvdHlwZSwgXCJhcmlhTGFiZWxcIiwgdm9pZCAwKTtcbk5lVG9vbGJhckJ1dHRvbiA9IF9fZGVjb3JhdGUoW2N1c3RvbUVsZW1lbnQoJ25lLXRvb2xiYXItYnV0dG9uJyldLCBOZVRvb2xiYXJCdXR0b24pO1xuXG5leHBvcnQgeyBOZVRvb2xiYXJCdXR0b24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvb2xiYXItYnV0dG9uLmpzLm1hcFxuIiwiaW1wb3J0IHsgYyBhcyBjb21tb25TdHlsZXMsIF8gYXMgX19kZWNvcmF0ZSB9IGZyb20gJy4vYmFzZS5zdHlsZXMtMTFkMzkxODEuanMnO1xuaW1wb3J0IHsgY3NzLCBMaXRFbGVtZW50LCBodG1sIH0gZnJvbSAnbGl0JztcbmltcG9ydCB7IHByb3BlcnR5LCBzdGF0ZSwgY3VzdG9tRWxlbWVudCB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IGNsYXNzTWFwIH0gZnJvbSAnbGl0L2RpcmVjdGl2ZXMvY2xhc3MtbWFwLmpzJztcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmNvbnN0IHRva2VucyA9IGNzc2BcbiAgKiB7XG4gIC0tbmUtdG9vbHRpcC1zaXppbmctd2lkdGg6IHZhcigtLW5lLXJlZi1zaXppbmctMTYsIDE2ZW0pO1xuICAtLW5lLXRvb2x0aXAtcGFkZGluZzogdmFyKC0tbmUtcmVmLXNwYWNpbmcteC1zbWFsbCwgMC41ZW0pO1xuICAtLW5lLXRvb2x0aXAtY29sb3ItYmFja2dyb3VuZDogdmFyKC0tbmUtcmVmLWNvbG9yLXdoaXRlLCAjZmZmZmZmKTtcbiAgLS1uZS10b29sdGlwLWNvbG9yLXRleHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTkwLCAjMTYxNzE4KTtcbiAgLS1uZS10b29sdGlwLWNvbG9yLWljb24tZXJyb3I6IHZhcigtLW5lLXJlZi1jb2xvci1yZWQtNTAsICNFNjAwMDApO1xuICAtLW5lLXRvb2x0aXAtY29sb3ItYm9yZGVyLWVycm9yOiB2YXIoLS1uZS1yZWYtY29sb3ItcmVkLTUwLCAjRTYwMDAwKTtcbiAgLS1uZS10b29sdGlwLWNvbG9yLWJvcmRlci13YXJuaW5nOiB2YXIoLS1uZS1yZWYtY29sb3IteWVsbG93LTUwLCAjRkZDRjFBKTtcbiAgLS1uZS10b29sdGlwLWNvbG9yLWJvcmRlci1zdWNjZXNzOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JlZW4tNTAsICMwMDg3MzgpO1xuICAtLW5lLXRvb2x0aXAtY29sb3ItYm9yZGVyLWluZm86IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTYwLCAjMDA2QkQ2KTtcbiAgLS1uZS10b29sdGlwLWZvbnQtZmFtaWx5OiB2YXIoLS1uZS1yZWYtZm9udC1mYW1pbHktb3Blbi1zYW5zLCBPcGVuIFNhbnMpO1xuICAtLW5lLXRvb2x0aXAtZm9udC1zaXplOiB2YXIoLS1uZS1yZWYtZm9udC1zaXplLTA0LCAwLjg3NWVtKTtcbiAgLS1uZS10b29sdGlwLXNoYWRvdzogMHB4IDBweCA4cHggdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktOTAtMjAsICMxNjE3MTgyMCk7XG4gIC0tbmUtdG9vbHRpcC1ib3JkZXItcmFkaXVzLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1ib3JkZXItcmFkaXVzLW1lZGl1bSwgLjI1ZW0pO1xuICAtLW5lLXRvb2x0aXAtYm9yZGVyLXdpZHRoLWJhcjogdmFyKC0tbmUtcmVmLWJvcmRlci13aWR0aC1sYXJnZSwgNHB4KTtcbiAgLS1uZS10b29sdGlwLWljb24tcGFkZGluZzogdmFyKC0tbmUtcmVmLXNwYWNpbmcteC1zbWFsbCwgMC41ZW0pO1xufVxuYDtcblxuY29uc3QgYmFzZVRvb2x0aXAgPSBjc3NgXG4gIC50b29sdGlwIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIH1cblxuICAudG9vbHRpcC1jb250ZW50IHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgei1pbmRleDogMjtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1uZS10b29sdGlwLWNvbG9yLWJhY2tncm91bmQpO1xuICAgIGNvbG9yOiB2YXIoLS1uZS10b29sdGlwLWNvbG9yLXRleHQpO1xuICAgIHBhZGRpbmc6IHZhcigtLW5lLXRvb2x0aXAtc2l6aW5nLXBhZGRpbmcpO1xuICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLW5lLXRvb2x0aXAtYm9yZGVyLXJhZGl1cy1kZWZhdWx0KTtcbiAgICBib3gtc2hhZG93OiB2YXIoLS1uZS10b29sdGlwLXNoYWRvdyk7XG4gICAgZm9udC1zaXplOiB2YXIoLS1uZS10b29sdGlwLWZvbnQtc2l6ZSk7XG4gICAgZm9udC1mYW1pbHk6IHZhcigtLW5lLXRvb2x0aXAtZm9udC1mYW1pbHkpO1xuICAgIHdpZHRoOiB2YXIoLS1uZS10b29sdGlwLXNpemluZy13aWR0aCk7XG4gIH1cblxuICAuc2hvdyB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB9XG5cbiAgLmRhbmdlciB7XG4gICAgYm9yZGVyLWxlZnQ6IHZhcigtLW5lLXRvb2x0aXAtYm9yZGVyLXdpZHRoLWJhcikgc29saWRcbiAgICAgIHZhcigtLW5lLXRvb2x0aXAtY29sb3ItYm9yZGVyLWVycm9yKTtcbiAgfVxuXG4gIC5pbmZvIHtcbiAgICBib3JkZXItbGVmdDogdmFyKC0tbmUtdG9vbHRpcC1ib3JkZXItd2lkdGgtYmFyKSBzb2xpZFxuICAgICAgdmFyKC0tbmUtdG9vbHRpcC1jb2xvci1ib3JkZXItaW5mbyk7XG4gIH1cblxuICAud2FybmluZyB7XG4gICAgYm9yZGVyLWxlZnQ6IHZhcigtLW5lLXRvb2x0aXAtYm9yZGVyLXdpZHRoLWJhcikgc29saWRcbiAgICAgIHZhcigtLW5lLXRvb2x0aXAtY29sb3ItYm9yZGVyLXdhcm5pbmcpO1xuICB9XG5cbiAgLnN1Y2Nlc3Mge1xuICAgIGJvcmRlci1sZWZ0OiB2YXIoLS1uZS10b29sdGlwLWJvcmRlci13aWR0aC1iYXIpIHNvbGlkXG4gICAgICB2YXIoLS1uZS10b29sdGlwLWNvbG9yLWJvcmRlci1zdWNjZXNzKTtcbiAgfVxuXG4gIC5kZWZhdWx0IHtcbiAgICBib3JkZXItbGVmdDogdmFyKC0tbmUtdG9vbHRpcC1ib3JkZXItd2lkdGgtYmFyKSBzb2xpZFxuICAgICAgdmFyKC0tbmUtdG9vbHRpcC1jb2xvci1iYWNrZ3JvdW5kKTtcbiAgfVxuXG4gIC8qIFBsYWNlbWVudCBzdHlsZXMgKi9cbiAgLnRvcCB7XG4gICAgYm90dG9tOiAxMDAlO1xuICAgIGxlZnQ6IDUwJTtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XG4gICAgbWFyZ2luLWJvdHRvbTogNHB4O1xuICB9XG5cbiAgLmJvdHRvbSB7XG4gICAgdG9wOiAxMDAlO1xuICAgIGxlZnQ6IDUwJTtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XG4gICAgbWFyZ2luLXRvcDogNHB4O1xuICB9XG5cbiAgLmxlZnQge1xuICAgIHJpZ2h0OiAxMDAlO1xuICAgIHRvcDogNTAlO1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbiAgICBtYXJnaW4tcmlnaHQ6IDRweDtcbiAgfVxuXG4gIC5yaWdodCB7XG4gICAgdG9wOiA1MCU7XG4gICAgbGVmdDogMTAwJTtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XG4gICAgbWFyZ2luLWxlZnQ6IDRweDtcbiAgfVxuYDtcbmNvbnN0IHN0eWxlcyA9IFt0b2tlbnMsIGJhc2VUb29sdGlwLCBjb21tb25TdHlsZXNdO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1zaGFkb3cgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgVmFyaWFudFR5cGU7XG4oZnVuY3Rpb24gKFZhcmlhbnRUeXBlKSB7XG4gIFZhcmlhbnRUeXBlW1wiZGVmYXVsdFwiXSA9IFwiZGVmYXVsdFwiO1xuICBWYXJpYW50VHlwZVtcImluZm9cIl0gPSBcImluZm9cIjtcbiAgVmFyaWFudFR5cGVbXCJzdWNjZXNzXCJdID0gXCJzdWNjZXNzXCI7XG4gIFZhcmlhbnRUeXBlW1wiZGFuZ2VyXCJdID0gXCJkYW5nZXJcIjtcbiAgVmFyaWFudFR5cGVbXCJ3YXJuaW5nXCJdID0gXCJ3YXJuaW5nXCI7XG59KShWYXJpYW50VHlwZSB8fCAoVmFyaWFudFR5cGUgPSB7fSkpO1xuXG5jb25zdCBQbGFjZW1lbnQgPSB7XG4gIHRvcDogJ3RvcCcsXG4gIGJvdHRvbTogJ2JvdHRvbScsXG4gIExlZnQ6ICdsZWZ0JyxcbiAgcmlnaHQ6ICdyaWdodCdcbn07XG5cbi8qKlxuICogQHRhZyBuZS10b29sdGlwXG4gKiBAdGFnbmFtZSBuZS10b29sdGlwXG4gKlxuICogQGRlc2NyaXB0aW9uIENvbnRyb2wgdGhhdCByZW5kZXJzIGEgdG9vbHRpcCBmb3IgdGhlIGNvbnN1bWluZyBjb250cm9sLlxuICpcbiAqL1xubGV0IE5lVG9vbHRpcCA9IGNsYXNzIE5lVG9vbHRpcCBleHRlbmRzIExpdEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgdmFyaWFudCBvZiB0aGUgdG9vbHRpcC4gQ3VycmVudGx5IG9ubHkgXCJpbmZvXCIgYW5kIFwiZGFuZ2VyXCIgYXJlIHN1cHBvcnRlZC5cbiAgICAgKi9cbiAgICB0aGlzLnZhcmlhbnQgPSBWYXJpYW50VHlwZS5kZWZhdWx0O1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB3aGVyZSB0aGUgdG9vbCB0aXAgd2lsbCBhcHBlYXIgcmVsYXRpdmUgdG8gdGhlIGNvbnN1bWVyIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICB0aGlzLnBsYWNlbWVudCA9IFBsYWNlbWVudC50b3A7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBjb250ZW50IHRoYXQgd2lsbCBhcGVhciBpbnNpZGUgdGhlIHRvb2x0aXAuXG4gICAgICovXG4gICAgdGhpcy5jb250ZW50ID0gJyc7XG4gICAgdGhpcy5fc2hvd1Rvb2xUaXAgPSBmYWxzZTtcbiAgfVxuICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9XG4gIGhpZGVUb29sdGlwKCkge1xuICAgIHRoaXMuX3Nob3dUb29sVGlwID0gZmFsc2U7XG4gIH1cbiAgc2hvd1Rvb2x0aXAoKSB7XG4gICAgdGhpcy5fc2hvd1Rvb2xUaXAgPSB0cnVlO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gaHRtbGA8ZGl2IGNsYXNzPVwidG9vbHRpcFwiPlxuICAgICAgPHNsb3RcbiAgICAgICAgQG1vdXNlb3Zlcj1cIiR7dGhpcy5zaG93VG9vbHRpcH1cIlxuICAgICAgICBAbW91c2VvdXQ9XCIke3RoaXMuaGlkZVRvb2x0aXB9XCJcbiAgICAgICAgQGZvY3VzPVwiJHt0aGlzLnNob3dUb29sdGlwfVwiXG4gICAgICAgIEBibHVyPVwiJHt0aGlzLmhpZGVUb29sdGlwfVwiXG4gICAgICA+PC9zbG90PlxuICAgICAgPGRpdlxuICAgICAgICBjbGFzcz1cIiR7Y2xhc3NNYXAoe1xuICAgICAgJ3Rvb2x0aXAtY29udGVudCc6IHRydWUsXG4gICAgICBzaG93OiB0aGlzLl9zaG93VG9vbFRpcCxcbiAgICAgIFt0aGlzLnBsYWNlbWVudF06IHRydWUsXG4gICAgICBbdGhpcy52YXJpYW50XTogdHJ1ZVxuICAgIH0pfVwiXG4gICAgICA+XG4gICAgICAgICR7dGhpcy5jb250ZW50fVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+YDtcbiAgfVxufTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogU3RyaW5nLFxuICBhdHRyaWJ1dGU6ICd0eXBlJyxcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZVRvb2x0aXAucHJvdG90eXBlLCBcInZhcmlhbnRcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogU3RyaW5nLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIE5lVG9vbHRpcC5wcm90b3R5cGUsIFwicGxhY2VtZW50XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IFN0cmluZyxcbiAgcmVmbGVjdDogdHJ1ZVxufSldLCBOZVRvb2x0aXAucHJvdG90eXBlLCBcImNvbnRlbnRcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3N0YXRlKCldLCBOZVRvb2x0aXAucHJvdG90eXBlLCBcIl9zaG93VG9vbFRpcFwiLCB2b2lkIDApO1xuTmVUb29sdGlwID0gX19kZWNvcmF0ZShbY3VzdG9tRWxlbWVudCgnbmUtdG9vbHRpcCcpXSwgTmVUb29sdGlwKTtcblxuZXhwb3J0IHsgTmVUb29sdGlwIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b29sdGlwLmpzLm1hcFxuIiwiZXhwb3J0IHsgSSBhcyBJY29ucyB9IGZyb20gJy4vaWNvblR5cGUtODMyNmVkZGIuanMnO1xuZXhwb3J0IHsgYSBhcyBCYWRnZUNvbnRhaW5lcnMsIEIgYXMgQmFkZ2VWYXJpYW50cywgTiBhcyBOZUJhZGdlIH0gZnJvbSAnLi9iYWRnZS1hZjExZmIyNi5qcyc7XG5leHBvcnQgeyBWIGFzIFZhbGlkYXRpb25CYXNlQ29tcG9uZW50LCB2IGFzIHZhbGlkYXRpb25MYXlvdXRTdHlsZXMsIGEgYXMgdmFsaWRhdGlvblN0eWxlcywgdCBhcyB2YWxpZGF0aW9uVG9rZW5zIH0gZnJvbSAnLi92YWxpZGF0aW9uLnRva2Vucy1kYjg2ZWNhOS5qcyc7XG5leHBvcnQgeyBOZUFjY29yZGlvbiB9IGZyb20gJy4vYWNjb3JkaW9uLmpzJztcbmltcG9ydCB7IGMgYXMgY29tbW9uU3R5bGVzLCBfIGFzIF9fZGVjb3JhdGUgfSBmcm9tICcuL2Jhc2Uuc3R5bGVzLTExZDM5MTgxLmpzJztcbmltcG9ydCB7IGNzcywgTGl0RWxlbWVudCwgaHRtbCB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBwcm9wZXJ0eSwgY3VzdG9tRWxlbWVudCB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IGNsYXNzTWFwIH0gZnJvbSAnbGl0L2RpcmVjdGl2ZXMvY2xhc3MtbWFwLmpzJztcbmltcG9ydCB7IGYgYXMgZmlyZSB9IGZyb20gJy4vZXZlbnRzLTExNzNmNTYyLmpzJztcbmltcG9ydCB7IHIgYXMgcmVuZGVySWNvbiB9IGZyb20gJy4vaWNvbi5iYXNlLTdhOTE5ZGIyLmpzJztcbmltcG9ydCB7IGNoZXZyb25SaWdodCB9IGZyb20gJy4vY2hldnJvblJpZ2h0LWJmY2JjZDBmLmpzJztcbmV4cG9ydCB7IE5lQmFubmVyIH0gZnJvbSAnLi9iYW5uZXIuanMnO1xuZXhwb3J0IHsgTmVCdXR0b24gfSBmcm9tICcuL2J1dHRvbi5qcyc7XG5leHBvcnQgeyBOZUJ1dHRvblNldCB9IGZyb20gJy4vYnV0dG9uLXNldC5qcyc7XG5leHBvcnQgeyBOZUNoZWNrYm94IH0gZnJvbSAnLi9jaGVja2JveC5qcyc7XG5leHBvcnQgeyBOIGFzIE5lQ29uZmlnUGFuZWwsIGEgYXMgTmVDb25maWdQYW5lbEhlYWRlciB9IGZyb20gJy4vY29uZmlnLXBhbmVsLTg3NjY0MTg2LmpzJztcbmV4cG9ydCB7IE5lRHJvcGRvd25NZW51IH0gZnJvbSAnLi9kcm9wZG93bi1tZW51LmpzJztcbmV4cG9ydCB7IE5lRHJvcGRvd25NZW51SXRlbSB9IGZyb20gJy4vZHJvcGRvd24tbWVudS1pdGVtLmpzJztcbmV4cG9ydCB7IE5lRHJvcGRvd25GaWVsZCB9IGZyb20gJy4vZHJvcGRvd24tZmllbGQuanMnO1xuZXhwb3J0IHsgTmVGaWxlQ2FyZCB9IGZyb20gJy4vZmlsZS1jYXJkLmpzJztcbmV4cG9ydCB7IGEgYXMgTmVGaWxlRHJvcHpvbmUsIE4gYXMgTmVGaWxlUGlja2VyIH0gZnJvbSAnLi9maWxlLXBpY2tlci1kMGUwMjgwNy5qcyc7XG5leHBvcnQgeyBOZUljb24gfSBmcm9tICcuL2ljb24uanMnO1xuZXhwb3J0IHsgTmVJY29uQnV0dG9uIH0gZnJvbSAnLi9pY29uLWJ1dHRvbi5qcyc7XG5leHBvcnQgeyBOZUlucHV0IH0gZnJvbSAnLi9pbnB1dC5qcyc7XG5leHBvcnQgeyBOZUxvb2t1cEZpZWxkIH0gZnJvbSAnLi9sb29rdXAtZmllbGQuanMnO1xuZXhwb3J0IHsgTmVMYWJlbCB9IGZyb20gJy4vbGFiZWwuanMnO1xuZXhwb3J0IHsgTmVNb2RhbCB9IGZyb20gJy4vbW9kYWwuanMnO1xuZXhwb3J0IHsgTmVPdmVybGF5IH0gZnJvbSAnLi9vdmVybGF5LmpzJztcbmV4cG9ydCB7IE5lUGFuZWwgfSBmcm9tICcuL3BhbmVsLmpzJztcbmV4cG9ydCB7IE5lUHJvZ3Jlc3NCYXIgfSBmcm9tICcuL3Byb2dyZXNzLWJhci5qcyc7XG5leHBvcnQgeyBOIGFzIE5lUmFkaW9CdXR0b24sIGEgYXMgTmVSYWRpb0J1dHRvbkdyb3VwIH0gZnJvbSAnLi9yYWRpby1idXR0b24tZ3JvdXAtNWEzMTA2ZDIuanMnO1xuZXhwb3J0IHsgTiBhcyBOZVNwaW5uZXIgfSBmcm9tICcuL3NwaW5uZXItYWE2YzU5YzkuanMnO1xuZXhwb3J0IHsgTmVTdGF0dXNPdmVybGF5IH0gZnJvbSAnLi9zdGF0dXMtb3ZlcmxheS5qcyc7XG5leHBvcnQgeyBhIGFzIE5lU3RlcCwgTiBhcyBOZVN0ZXBwZXIgfSBmcm9tICcuL3N0ZXBwZXItYzkyOGIwZGUuanMnO1xuZXhwb3J0IHsgTmVTd2l0Y2ggfSBmcm9tICcuL3N3aXRjaC5qcyc7XG5leHBvcnQgeyBOZVRleHRhcmVhIH0gZnJvbSAnLi90ZXh0YXJlYS5qcyc7XG5leHBvcnQgeyBOIGFzIE5lVG9hc3RJdGVtLCBhIGFzIE5lVG9hc3ROb3RpZmljYXRpb24gfSBmcm9tICcuL3RvYXN0LW5vdGlmaWNhdGlvbi0wZGRlNmZmZi5qcyc7XG5leHBvcnQgeyBOZVRvb2xiYXIgfSBmcm9tICcuL3Rvb2xiYXIuanMnO1xuZXhwb3J0IHsgTmVUb29sYmFyQnV0dG9uIH0gZnJvbSAnLi90b29sYmFyLWJ1dHRvbi5qcyc7XG5leHBvcnQgeyBOZVBpbGwgfSBmcm9tICcuL3BpbGwuanMnO1xuZXhwb3J0IHsgTmVUb29sdGlwIH0gZnJvbSAnLi90b29sdGlwLmpzJztcbmltcG9ydCAnQG9wZW4td2Mvc2NvcGVkLWVsZW1lbnRzJztcbmltcG9ydCAnbGl0L2RpcmVjdGl2ZXMvc3R5bGUtbWFwLmpzJztcbmltcG9ydCAnbGl0L2RpcmVjdGl2ZXMvdW50aWwuanMnO1xuaW1wb3J0ICcuL2FsZXJ0VHlwZS1iZGRhZGI0ZC5qcyc7XG5pbXBvcnQgJy4vYnV0dG9uLnRva2Vucy1lNzljOGJiZi5qcyc7XG5pbXBvcnQgJy4vY2hlY2stMTMyYzk4OTQuanMnO1xuaW1wb3J0ICdsaXQvZGlyZWN0aXZlcy9pZi1kZWZpbmVkLmpzJztcbmltcG9ydCAnbGl0L2RpcmVjdGl2ZXMvcmVmLmpzJztcbmltcG9ydCAnbGl0L2RpcmVjdGl2ZXMvd2hlbi5qcyc7XG5pbXBvcnQgJy4vaWNvbi50b2tlbnMtZTRhZmZjNDkuanMnO1xuaW1wb3J0ICcuL3RyYXNoLTU2YTEzY2M2LmpzJztcbmltcG9ydCAnLi9maWxlLTRhYjAyNzA1LmpzJztcbmltcG9ydCAnLi9kcm9wem9uZS03MDE2NmE3OS5qcyc7XG5pbXBvcnQgJ2xpdC9kaXJlY3RpdmVzL2xpdmUuanMnO1xuaW1wb3J0ICcuL2Nsb3NlRGVmYXVsdC1lNmRhM2FkOC5qcyc7XG5pbXBvcnQgJ2xpdC9kaXJlY3RpdmVzL3Vuc2FmZS1odG1sLmpzJztcbmltcG9ydCAnLi9sYWJlbC50b2tlbnMtM2RmNzAyMDAuanMnO1xuaW1wb3J0ICdsaXQvZGlyZWN0aXZlcy91bnNhZmUtc3ZnLmpzJztcbmltcG9ydCAnLi90b29sYmFyLnRva2Vucy01MDdmNTg4Zi5qcyc7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5jb25zdCB0b2tlbnMgPSBjc3NgXG4gICoge1xuICAtLW5lLWFjY29yZGlvbi1zaXppbmctaWNvbjogdmFyKC0tbmUtcmVmLXNpemluZy0wNCwgMWVtKTtcbiAgLS1uZS1hY2NvcmRpb24tcGFkZGluZy1oZWFkZXI6IHZhcigtLW5lLXJlZi1zcGFjaW5nLW1lZGl1bSwgMWVtKTtcbiAgLS1uZS1hY2NvcmRpb24tcGFkZGluZy1ib2R5OiB2YXIoLS1uZS1yZWYtc3BhY2luZy1tZWRpdW0sIDFlbSk7XG4gIC0tbmUtYWNjb3JkaW9uLWdhcDogdmFyKC0tbmUtcmVmLXNwYWNpbmctbWVkaXVtLCAxZW0pO1xuICAtLW5lLWFjY29yZGlvbi1jb2xvci1iYWNrZ3JvdW5kOiB2YXIoLS1uZS1yZWYtY29sb3Itd2hpdGUsICNmZmZmZmYpO1xuICAtLW5lLWFjY29yZGlvbi1jb2xvci1oZWFkZXItaG92ZXI6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTA1LCAjRjBGN0ZGKTtcbiAgLS1uZS1hY2NvcmRpb24tY29sb3ItaGVhZGVyLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci13aGl0ZSwgI2ZmZmZmZik7XG4gIC0tbmUtYWNjb3JkaW9uLWNvbG9yLXRpdGxlOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS05MCwgIzE2MTcxOCk7XG4gIC0tbmUtYWNjb3JkaW9uLWNvbG9yLWFzdGVyaXNrOiB2YXIoLS1uZS1yZWYtY29sb3ItcmVkLTYwLCAjQjgwMDAwKTtcbiAgLS1uZS1hY2NvcmRpb24tY29sb3ItYm9yZGVyOiB2YXIoLS1uZS1yZWYtY29sb3ItZ3JleS0xMCwgI0UyRTNFNCk7XG4gIC0tbmUtYWNjb3JkaW9uLWNvbG9yLWljb246IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTkwLCAjMTYxNzE4KTtcbiAgLS1uZS1hY2NvcmRpb24tYm9yZGVyLXdpZHRoOiB2YXIoLS1uZS1yZWYtYm9yZGVyLXdpZHRoLXNtYWxsLCAxcHgpO1xuICAtLW5lLWFjY29yZGlvbi1mb250LWZhbWlseS10aXRsZTogdmFyKC0tbmUtcmVmLWZvbnQtZmFtaWx5LW1vbnRzZXJyYXQsIE1vbnRzZXJyYXQpO1xuICAtLW5lLWFjY29yZGlvbi1mb250LXNpemUtdGl0bGU6IHZhcigtLW5lLXJlZi1mb250LXNpemUtMDYsIDEuMTI1ZW0pO1xuICAtLW5lLWFjY29yZGlvbi1jb250ZW50LWdhcC12ZXJ0aWNhbDogdmFyKC0tbmUtcmVmLXNwYWNpbmctbWVkaXVtLCAxZW0pO1xufVxuYDtcblxuY29uc3QgYmFzZUFjY29yZGlvbkl0ZW0gPSBjc3NgXG4gIC5hY2NvcmRpb24taXRlbS1jb250YWluZXIge1xuICAgIGJvcmRlci1ib3R0b206IHZhcigtLW5lLWFjY29yZGlvbi1ib3JkZXItd2lkdGgpIHNvbGlkXG4gICAgICB2YXIoLS1uZS1hY2NvcmRpb24tY29sb3ItYm9yZGVyKTtcbiAgfVxuXG4gIC5hY2NvcmRpb24tdGl0bGUtY29udGFpbmVyIHtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgZm9udC1mYW1pbHk6IHZhcigtLW5lLWFjY29yZGlvbi1mb250LWZhbWlseS10aXRsZSk7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1uZS1hY2NvcmRpb24tY29sb3ItaGVhZGVyLWRlZmF1bHQpO1xuICAgIHBhZGRpbmc6IHZhcigtLW5lLWFjY29yZGlvbi1wYWRkaW5nLWhlYWRlcik7XG4gICAgZm9udC1zaXplOiB2YXIoLS1uZS1hY2NvcmRpb24tZm9udC1zaXplLXRpdGxlKTtcbiAgICBjb2xvcjogdmFyKC0tbmUtYWNjb3JkaW9uLWNvbG9yLXRpdGxlKTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgdHJhbnNpdGlvbjogYWxsIDAuM3MgZWFzZTtcbiAgfVxuXG4gIC5hY2NvcmRpb24tdGl0bGUtY29udGFpbmVyOmhvdmVyLFxuICAuYWNjb3JkaW9uLXRpdGxlLWNvbnRhaW5lcjpmb2N1cyB7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1uZS1hY2NvcmRpb24tY29sb3ItaGVhZGVyLWhvdmVyKTtcbiAgfVxuXG4gIC5hY2NvcmRpb24tY2hldnJvbiB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGhlaWdodDogdmFyKC0tbmUtYWNjb3JkaW9uLXNpemluZy1pY29uKTtcbiAgICB3aWR0aDogdmFyKC0tbmUtYWNjb3JkaW9uLXNpemluZy1pY29uKTtcbiAgICBtYXJnaW4tcmlnaHQ6IHZhcigtLW5lLWFjY29yZGlvbi1nYXApO1xuICAgIHRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2U7XG4gIH1cblxuICAuYWNjb3JkaW9uLWNoZXZyb24gLm5lLWljb24ge1xuICAgIGNvbG9yOiB2YXIoLS1uZS1hY2NvcmRpb24tY29sb3ItaWNvbik7XG4gICAgaGVpZ2h0OiAxMHB4O1xuICAgIHdpZHRoOiAxMHB4O1xuICB9XG5cbiAgLmFjY29yZGlvbi10aXRsZS1jb250YWluZXIub3BlbiAuYWNjb3JkaW9uLWNoZXZyb24ge1xuICAgIHRyYW5zZm9ybTogcm90YXRlWig5MGRlZyk7XG4gIH1cblxuICAuYWNjb3JkaW9uLWNvbnRlbnQtY29udGFpbmVyIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICAgIHBhZGRpbmc6IHZhcigtLW5lLWFjY29yZGlvbi1wYWRkaW5nLWJvZHkpO1xuICAgIGJhY2tncm91bmQ6IHZhcigtLW5lLWFjY29yZGlvbi1jb2xvci1iYWNrZ3JvdW5kKTtcbiAgfVxuXG4gIC5hY2NvcmRpb24tY29udGVudC1jb250YWluZXIub3BlbiB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gIH1cbmA7XG5jb25zdCBzdHlsZXMgPSBbdG9rZW5zLCBiYXNlQWNjb3JkaW9uSXRlbSwgY29tbW9uU3R5bGVzXTtcblxuLyoqXG4gKiBAdGFnIG5lLWFjY29yZGlvbi1pdGVtXG4gKiBAdGFnbmFtZSBuZS1hY2NvcmRpb24taXRlbVxuICpcbiAqL1xubGV0IE5lQWNjb3JkaW9uSXRlbSA9IGNsYXNzIE5lQWNjb3JkaW9uSXRlbSBleHRlbmRzIExpdEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIC8qKiBBY2NvcmRpb24gaXRlbSB0aXRsZSAqL1xuICAgIHRoaXMuYWNjb3JkaW9uVGl0bGUgPSAnJztcbiAgICAvKiogQWNjb3JkaW9uIGl0ZW0gaXMgb3BlbiAqL1xuICAgIHRoaXMub3BlbiA9IGZhbHNlO1xuICAgIHRoaXMub25DbGljayA9ICgpID0+IHtcbiAgICAgIGZpcmUodGhpcywgJ25lLWNsaWNrJywge1xuICAgICAgICBjb21wb3NlZDogdHJ1ZSxcbiAgICAgICAgYnViYmxlczogdHJ1ZVxuICAgICAgfSk7XG4gICAgICB0aGlzLm9wZW4gPSAhdGhpcy5vcGVuO1xuICAgIH07XG4gIH1cbiAgc3RhdGljIGdldCBzdHlsZXMoKSB7XG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIGh0bWxgIDxkaXYgY2xhc3M9XCJhY2NvcmRpb24taXRlbS1jb250YWluZXJcIj5cbiAgICAgIDxidXR0b25cbiAgICAgICAgaWQ9XCJhY2NvcmRpb25JZFwiXG4gICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICBhcmlhLWV4cGFuZGVkPVwiJHt0aGlzLm9wZW59XCJcbiAgICAgICAgYXJpYS1jb250cm9scz1cInNlY3RcIlxuICAgICAgICBjbGFzcz1cIiR7Y2xhc3NNYXAoe1xuICAgICAgJ2FjY29yZGlvbi10aXRsZS1jb250YWluZXInOiB0cnVlLFxuICAgICAgb3BlbjogdGhpcy5vcGVuXG4gICAgfSl9XCJcbiAgICAgICAgQGNsaWNrPVwiJHt0aGlzLm9uQ2xpY2t9XCJcbiAgICAgID5cbiAgICAgICAgPGRpdiBjbGFzcz1cImFjY29yZGlvbi1jaGV2cm9uXCI+XG4gICAgICAgICAgJHtyZW5kZXJJY29uKHtcbiAgICAgIHR5cGVBc0h0bWw6IGNoZXZyb25SaWdodFxuICAgIH0pfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdj4ke3RoaXMuYWNjb3JkaW9uVGl0bGV9PC9kaXY+XG4gICAgICA8L2J1dHRvbj5cbiAgICAgIDxkaXZcbiAgICAgICAgaWQ9XCJzZWN0XCJcbiAgICAgICAgcm9sZT1cInJlZ2lvblwiXG4gICAgICAgIGFyaWEtbGFiZWxsZWRieT1cImFjY29yZGlvbklkXCJcbiAgICAgICAgY2xhc3M9XCIke2NsYXNzTWFwKHtcbiAgICAgICdhY2NvcmRpb24tY29udGVudC1jb250YWluZXInOiB0cnVlLFxuICAgICAgb3BlbjogdGhpcy5vcGVuXG4gICAgfSl9XCJcbiAgICAgID5cbiAgICAgICAgPHNsb3Q+PC9zbG90PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+YDtcbiAgfVxufTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgYXR0cmlidXRlOiAnYWNjb3JkaW9uLXRpdGxlJyxcbiAgdHlwZTogU3RyaW5nLFxuICByZWZsZWN0OiB0cnVlXG59KV0sIE5lQWNjb3JkaW9uSXRlbS5wcm90b3R5cGUsIFwiYWNjb3JkaW9uVGl0bGVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgYXR0cmlidXRlOiAnb3BlbicsXG4gIHR5cGU6IEJvb2xlYW4sXG4gIHJlZmxlY3Q6IHRydWVcbn0pXSwgTmVBY2NvcmRpb25JdGVtLnByb3RvdHlwZSwgXCJvcGVuXCIsIHZvaWQgMCk7XG5OZUFjY29yZGlvbkl0ZW0gPSBfX2RlY29yYXRlKFtjdXN0b21FbGVtZW50KCduZS1hY2NvcmRpb24taXRlbScpXSwgTmVBY2NvcmRpb25JdGVtKTtcblxuZXhwb3J0IHsgTmVBY2NvcmRpb25JdGVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsImltcG9ydCB7IGMgYXMgY29tbW9uU3R5bGVzLCBfIGFzIF9fZGVjb3JhdGUgfSBmcm9tICcuL2Jhc2Uuc3R5bGVzLTExZDM5MTgxLmpzJztcbmltcG9ydCB7IGNzcywgTGl0RWxlbWVudCwgaHRtbCB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBpZkRlZmluZWQgfSBmcm9tICdsaXQvZGlyZWN0aXZlcy9pZi1kZWZpbmVkLmpzJztcbmltcG9ydCB7IHByb3BlcnR5LCBjdXN0b21FbGVtZW50IH0gZnJvbSAnbGl0L2RlY29yYXRvcnMuanMnO1xuaW1wb3J0IHsgU2NvcGVkRWxlbWVudHNNaXhpbiB9IGZyb20gJ0BvcGVuLXdjL3Njb3BlZC1lbGVtZW50cyc7XG5pbXBvcnQgeyBOZUljb24gfSBmcm9tICdAbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzJztcblxuLyoqXG4gKlxuICogQHBhcmFtIGVsZW1lbnQgVGhlIEVsZW1lbnQgdGhhdCB0cmlnZ2VycyB0aGUgZXZlbnQsIG5vcm1hbGx5ICd0aGlzJ1xuICogQHBhcmFtIGV2ZW50VHlwZSBjaG9zZSBmcm9tIEN1c3RvbUV2ZW50VHlwZXNcbiAqIEBwYXJhbSBkYXRhIHRoZSBkYXRhIHBhc3NlZCBpbiB0aGUgZXZlbnRcbiAqIEByZXR1cm5zIGFuIGluc3RhbmNlIG9mIHRoZSBldmVudCB0aGF0IHdhcyBkaXNwYXRjaGVkXG4gKi9cbmNvbnN0IGZpcmUgPSAoZWxlbWVudCwgZXZlbnRUeXBlLCBkYXRhKSA9PiB7XG4gIGNvbnN0IGFyZ3MgPSB7XG4gICAgYnViYmxlczogdHJ1ZSxcbiAgICBjYW5jZWxhYmxlOiBmYWxzZSxcbiAgICBjb21wb3NlZDogdHJ1ZSxcbiAgICAuLi5kYXRhXG4gIH07XG4gIGNvbnN0IGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KGV2ZW50VHlwZSwgYXJncyk7XG4gIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gIHJldHVybiBldmVudDtcbn07XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5jb25zdCB0b2tlbnMgPSBjc3NgXG4gICoge1xuICAtLW5lLWxpbmstZ2FwOiB2YXIoLS1uZS1yZWYtc3BhY2luZy14eC1zbWFsbCwgMC4yNWVtKTtcbiAgLS1uZS1saW5rLWNvbG9yLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTYwLCAjMDA2QkQ2KTtcbiAgLS1uZS1saW5rLWNvbG9yLWhvdmVyOiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS03MCwgIzAwNTJBMyk7XG4gIC0tbmUtbGluay1jb2xvci1mb2N1czogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtNzAsICMwMDUyQTMpO1xuICAtLW5lLWxpbmstY29sb3ItZGlzYWJsZWQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTUwLCAjNkQ3Mzc5KTtcbiAgLS1uZS1saW5rLWNvbG9yLWJvcmRlci1mb2N1czogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtMjAsICNBM0QxRkYpO1xuICAtLW5lLWxpbmstZm9udC1mYW1pbHk6IHZhcigtLW5lLXJlZi1mb250LWZhbWlseS1vcGVuLXNhbnMsIE9wZW4gU2Fucyk7XG4gIC0tbmUtbGluay1mb250LXNpemU6IHZhcigtLW5lLXJlZi1mb250LXNpemUtMDQsIDAuODc1ZW0pO1xuICAtLW5lLWxpbmstdGV4dC1kZWNyb3JhdGlvbi1kZWZhdWx0OiB2YXIoLS1uZS1yZWYtdGV4dC1kZWNvcmF0aW9uLW5vbmUsIG5vbmUpO1xuICAtLW5lLWxpbmstdGV4dC1kZWNyb3JhdGlvbi1ob3ZlcjogdmFyKC0tbmUtcmVmLXRleHQtZGVjb3JhdGlvbi11bmRlcmxpbmUsIHVuZGVybGluZSk7XG4gIC0tbmUtbGluay10ZXh0LWRlY3JvcmF0aW9uLWZvY3VzOiB2YXIoLS1uZS1yZWYtdGV4dC1kZWNvcmF0aW9uLXVuZGVybGluZSwgdW5kZXJsaW5lKTtcbiAgLS1uZS1saW5rLXNpemluZy1pY29uOiB2YXIoLS1uZS1yZWYtc2l6aW5nLTA0LCAxZW0pO1xufVxuYDtcblxuY29uc3QgYmFzZUxpbmsgPSBjc3NgXG4gIDpob3N0IHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtZ3JpZDtcbiAgICB2ZXJ0aWNhbC1hbGlnbjogdGV4dC1ib3R0b207XG4gIH1cblxuICBhIHtcbiAgICBjb2xvcjogdmFyKC0tbmUtbGluay1jb2xvci1kZWZhdWx0KTtcbiAgICBmb250LWZhbWlseTogdmFyKC0tbmUtbGluay1mb250LWZhbWlseSk7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiB2YXIoLS1uZS1saW5rLXRleHQtZGVjcm9yYXRpb24tZGVmYXVsdCk7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogMDtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogbWluLWNvbnRlbnQgbWluLWNvbnRlbnQgbWluLWNvbnRlbnQ7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICB9XG5cbiAgYTpob3ZlciB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiB2YXIoLS1uZS1saW5rLXRleHQtZGVjcm9yYXRpb24taG92ZXIpO1xuICAgIGNvbG9yOiB2YXIoLS1uZS1saW5rLWNvbG9yLWhvdmVyKTtcbiAgfVxuXG4gIGE6Zm9jdXMtdmlzaWJsZSB7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICB0ZXh0LWRlY29yYXRpb246IHZhcigtLW5lLWxpbmstdGV4dC1kZWNyb3JhdGlvbi1mb2N1cyk7XG4gICAgb3V0bGluZTogNHB4IHNvbGlkIHZhcigtLW5lLWxpbmstY29sb3ItYm9yZGVyLWZvY3VzKTtcbiAgICBjb2xvcjogdmFyKC0tbmUtbGluay1jb2xvci1mb2N1cyk7XG4gIH1cblxuICBhLmRpc2FibGVkIHtcbiAgICBjdXJzb3I6IGRlZmF1bHQ7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiB2YXIoLS1uZS1saW5rLXRleHQtZGVjcm9yYXRpb24tZGVmYXVsdCk7XG4gICAgY29sb3I6IHZhcigtLW5lLWxpbmstY29sb3ItZGlzYWJsZWQpO1xuICB9XG5cbiAgLmljb24tc2xvdCB7XG4gICAgbWluLXdpZHRoOiB2YXIoLS1uZS1saW5rLXNpemluZy1pY29uKTtcbiAgICBtYXgtd2lkdGg6IHZhcigtLW5lLWxpbmstc2l6aW5nLWljb24pO1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gIH1cblxuICAuaWNvbi1zbG90LXJpZ2h0IHtcbiAgICBtYXJnaW4tbGVmdDogdmFyKC0tbmUtbGluay1nYXApO1xuICB9XG5cbiAgLmljb24tc2xvdC1sZWZ0IHtcbiAgICBtYXJnaW4tcmlnaHQ6IHZhcigtLW5lLWxpbmstZ2FwKTtcbiAgfVxuXG4gIHNwYW4uZGVmYXVsdCB7XG4gICAgLyogVGhpcyBzZXRzIHNpemluZyBmb3IgYWxsIGVtIHNpemluZyBvbiBjdXJyZW50IGVsZW1lbnQgc28gYmUgY2FyZWZ1bCAqL1xuICAgIGZvbnQtc2l6ZTogdmFyKC0tbmUtbGluay1mb250LXNpemUpO1xuICB9XG5gO1xuY29uc3Qgc3R5bGVzID0gW2NvbW1vblN0eWxlcywgYmFzZUxpbmssIHRva2Vuc107XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXNoYWRvdyAqL1xudmFyIFRhcmdldFR5cGVzO1xuKGZ1bmN0aW9uIChUYXJnZXRUeXBlcykge1xuICAvLyBPcGVucyB0aGUgbGlua2VkIGRvY3VtZW50IGluIHRoZSBzYW1lIGZyYW1lIGFzIGl0IHdhcyBjbGlja2VkICh0aGlzIGlzIGRlZmF1bHQpXG4gIFRhcmdldFR5cGVzW1wic2VsZlwiXSA9IFwiX3NlbGZcIjtcbiAgLy8gT3BlbnMgdGhlIGxpbmtlZCBkb2N1bWVudCBpbiBhIG5ldyB3aW5kb3cgb3IgdGFiXG4gIFRhcmdldFR5cGVzW1wiYmxhbmtcIl0gPSBcIl9ibGFua1wiO1xuICAvLyBPcGVucyB0aGUgbGlua2VkIGRvY3VtZW50IGluIHRoZSBwYXJlbnQgZnJhbWVcbiAgVGFyZ2V0VHlwZXNbXCJwYXJlbnRcIl0gPSBcIl9wYXJlbnRcIjtcbiAgLy8gT3BlbnMgdGhlIGxpbmtlZCBkb2N1bWVudCBpbiB0aGUgZnVsbCBib2R5IG9mIHRoZSB3aW5kb3dcbiAgVGFyZ2V0VHlwZXNbXCJ0b3BcIl0gPSBcIl90b3BcIjtcbn0pKFRhcmdldFR5cGVzIHx8IChUYXJnZXRUeXBlcyA9IHt9KSk7XG5jb25zdCBkZWZhdWx0SHJlZlZhbHVlID0gJ2phdmFzY3JpcHQudm9pZCgwKTsnO1xuY29uc3QgZGVmYXVsdFRhcmdldFZhbHVlID0gVGFyZ2V0VHlwZXMuc2VsZjtcblxuLyoqXG4gKiBAdGFnIG5lLWxpbmtcbiAqIEB0YWduYW1lIG5lLWxpbmtcbiAqXG4gKi9cbmxldCBOZUxpbmsgPSBjbGFzcyBOZUxpbmsgZXh0ZW5kcyBTY29wZWRFbGVtZW50c01peGluKExpdEVsZW1lbnQpIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLmxhYmVsID0gJyc7XG4gICAgdGhpcy5ocmVmID0gZGVmYXVsdEhyZWZWYWx1ZTtcbiAgICB0aGlzLnRhcmdldCA9IGRlZmF1bHRUYXJnZXRWYWx1ZTtcbiAgICB0aGlzLm9uQ2xpY2sgPSBlID0+IHtcbiAgICAgIGlmICh0aGlzLmhyZWYgPT09IGRlZmF1bHRIcmVmVmFsdWUgfHwgdGhpcy5kaXNhYmxlZD8udmFsdWVPZigpID09PSB0cnVlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cbiAgICAgIGlmIChpZkRlZmluZWQodGhpcy5kaXNhYmxlZCkudmFsdWVPZigpID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZpcmUodGhpcywgJ25lLWNsaWNrJywge1xuICAgICAgICBjb21wb3NlZDogdHJ1ZSxcbiAgICAgICAgYnViYmxlczogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuICBzdGF0aWMgZ2V0IHNjb3BlZEVsZW1lbnRzKCkge1xuICAgIHJldHVybiB7XG4gICAgICAnbmUtaWNvbic6IE5lSWNvblxuICAgIH07XG4gIH1cbiAgc3RhdGljIGdldCBzdHlsZXMoKSB7XG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgbGVmdEljb24gPSB0aGlzLmxlZnRJY29uVHlwZT8udmFsdWVPZigpID8gaHRtbGA8bmUtaWNvbiBpZD1cImxlZnRJY29uXCIgdHlwZT0ke3RoaXMubGVmdEljb25UeXBlfT48L25lLWljb24+YCA6ICcnO1xuICAgIGNvbnN0IHJpZ2h0SWNvbiA9IHRoaXMucmlnaHRJY29uVHlwZT8udmFsdWVPZigpID8gaHRtbGA8bmUtaWNvbiBpZD1cInJpZ2h0SWNvblwiIHR5cGU9JHt0aGlzLnJpZ2h0SWNvblR5cGV9PjwvbmUtaWNvbj5gIDogJyc7XG4gICAgcmV0dXJuIGh0bWxgPGFcbiAgICAgIEBjbGljaz1cIiR7dGhpcy5vbkNsaWNrfVwiXG4gICAgICBocmVmPVwiJHtpZkRlZmluZWQodGhpcy5kaXNhYmxlZCkgJiYgdGhpcy5kaXNhYmxlZD8udmFsdWVPZigpID09PSB0cnVlID8gZGVmYXVsdEhyZWZWYWx1ZSA6IHRoaXMuaHJlZn1cIlxuICAgICAgdGFyZ2V0PVwiJHt0aGlzLnRhcmdldH1cIlxuICAgICAgY2xhc3M9XCIke2lmRGVmaW5lZCh0aGlzLmRpc2FibGVkKSAmJiB0aGlzLmRpc2FibGVkPy52YWx1ZU9mKCkgPT09IHRydWUgPyAnZGlzYWJsZWQnIDogJyd9ICR7aWZEZWZpbmVkKHRoaXMubGVmdEljb25UeXBlKX1cIlxuICAgID5cbiAgICAgIDxzcGFuXG4gICAgICAgIGNsYXNzPSR7aWZEZWZpbmVkKHRoaXMubGVmdEljb25UeXBlKSAmJiB0aGlzLmxlZnRJY29uVHlwZSAhPT0gdW5kZWZpbmVkID8gJ2ljb24tc2xvdCAgaWNvbi1zbG90LWxlZnQnIDogJ2hpZGRlbid9XG4gICAgICA+XG4gICAgICAgICR7bGVmdEljb259XG4gICAgICA8L3NwYW4+XG4gICAgICA8c2xvdD48c3BhbiBjbGFzcz1cImRlZmF1bHRcIj4ke3RoaXMubGFiZWx9PC9zcGFuPjwvc2xvdD5cbiAgICAgIDxzcGFuXG4gICAgICAgIGNsYXNzPSR7dGhpcy5yaWdodEljb25UeXBlICE9PSB1bmRlZmluZWQgPyAnaWNvbi1zbG90IGljb24tc2xvdC1yaWdodCcgOiAnaGlkZGVuJ31cbiAgICAgID5cbiAgICAgICAgJHtyaWdodEljb259XG4gICAgICA8L3NwYW4+XG4gICAgPC9hPmA7XG4gIH1cbn07XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIGF0dHJpYnV0ZTogJ2xhYmVsJ1xufSldLCBOZUxpbmsucHJvdG90eXBlLCBcImxhYmVsXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIGF0dHJpYnV0ZTogJ2xlZnQtaWNvbi10eXBlJyxcbiAgdHlwZTogU3RyaW5nXG59KV0sIE5lTGluay5wcm90b3R5cGUsIFwibGVmdEljb25UeXBlXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIGF0dHJpYnV0ZTogJ3JpZ2h0LWljb24tdHlwZScsXG4gIHR5cGU6IFN0cmluZ1xufSldLCBOZUxpbmsucHJvdG90eXBlLCBcInJpZ2h0SWNvblR5cGVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgYXR0cmlidXRlOiAnaHJlZicsXG4gIHR5cGU6IFN0cmluZ1xufSldLCBOZUxpbmsucHJvdG90eXBlLCBcImhyZWZcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgYXR0cmlidXRlOiAndGFyZ2V0JyxcbiAgdHlwZTogU3RyaW5nXG59KV0sIE5lTGluay5wcm90b3R5cGUsIFwidGFyZ2V0XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIGF0dHJpYnV0ZTogJ2Rpc2FibGVkJyxcbiAgdHlwZTogQm9vbGVhblxufSldLCBOZUxpbmsucHJvdG90eXBlLCBcImRpc2FibGVkXCIsIHZvaWQgMCk7XG5OZUxpbmsgPSBfX2RlY29yYXRlKFtjdXN0b21FbGVtZW50KCduZS1saW5rJyldLCBOZUxpbmspO1xuXG5leHBvcnQgeyBOZUxpbmsgYXMgTiwgZmlyZSBhcyBmIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saW5rLWFjMDY1ZDI4LmpzLm1hcFxuIiwiaW1wb3J0IHsgYyBhcyBjb21tb25TdHlsZXMsIF8gYXMgX19kZWNvcmF0ZSB9IGZyb20gJy4vYmFzZS5zdHlsZXMtMTFkMzkxODEuanMnO1xuaW1wb3J0IHsgY3NzLCBodG1sLCBMaXRFbGVtZW50IH0gZnJvbSAnbGl0JztcbmltcG9ydCB7IHByb3BlcnR5LCBzdGF0ZSwgY3VzdG9tRWxlbWVudCB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IGNsYXNzTWFwIH0gZnJvbSAnbGl0L2RpcmVjdGl2ZXMvY2xhc3MtbWFwLmpzJztcbmltcG9ydCB7IFNjb3BlZEVsZW1lbnRzTWl4aW4gfSBmcm9tICdAb3Blbi13Yy9zY29wZWQtZWxlbWVudHMnO1xuaW1wb3J0IHsgTmVJY29uLCBOZUxhYmVsLCBOZUNoZWNrYm94IH0gZnJvbSAnQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cyc7XG5pbXBvcnQgeyBOIGFzIE5lTGluaywgZiBhcyBmaXJlIH0gZnJvbSAnLi9saW5rLWFjMDY1ZDI4LmpzJztcbmltcG9ydCB7IGlmRGVmaW5lZCB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL2lmLWRlZmluZWQuanMnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuY29uc3QgdG9rZW5zID0gY3NzYFxuICAqIHtcbiAgICAtLW5lLWRhdGEtdGFibGUtcGFkZGluZy12ZXJ0aWNhbDogdmFyKC0tbmUtcmVmLXNwYWNpbmctc21hbGwsIDAuNzVlbSk7XG4gICAgLS1uZS1kYXRhLXRhYmxlLXBhZGRpbmctaG9yaXpvbnRhbDogdmFyKC0tbmUtcmVmLXNwYWNpbmctc21hbGwsIDAuNzVlbSk7XG4gICAgLS1uZS1kYXRhLXRhYmxlLWNvbG9yLWJvcmRlcjogdmFyKC0tbmUtcmVmLWNvbG9yLWdyZXktMTAsICNlMmUzZTQpO1xuICAgIC0tbmUtZGF0YS10YWJsZS1jb2xvci1jb2x1bW4taGVhZGVyLWJhY2tncm91bmQtZm9jdXM6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTA1LCNmMGY3ZmYpO1xuICAgIC0tbmUtZGF0YS10YWJsZS1jb2xvci1jb2x1bW4taGVhZGVyLWJhY2tncm91bmQtaG92ZXI6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTA1LCNmMGY3ZmYpO1xuICAgIC0tbmUtZGF0YS10YWJsZS1jb2xvci1jb2x1bW4taGVhZGVyLXRleHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTYwLCM1NzVjNjEpO1xuICAgIC0tbmUtZGF0YS10YWJsZS1jb2xvci1jb2x1bW4taGVhZGVyLWljb24tc29ydGVkLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1jb2xvci1ncmV5LTkwLCMxNjE3MTgpO1xuICAgIC0tbmUtZGF0YS10YWJsZS1jb2xvci1jb2x1bW4taGVhZGVyLWljb24tc29ydGVkLWhvdmVyOiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS02MCwjMDA2YmQ2KTtcbiAgICAtLW5lLWRhdGEtdGFibGUtY29sb3ItY29sdW1uLWhlYWRlci1pY29uLXNvcnRlZC1mb2N1czogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtNjAsIzAwNmJkNik7XG4gICAgLS1uZS1kYXRhLXRhYmxlLWNvbG9yLWNvbHVtbi1oZWFkZXItYm9yZGVyLWZvY3VzOiB2YXIoLS1uZS1yZWYtY29sb3ItYmx1ZS0yMCwjYTNkMWZmKTtcbiAgICAtLW5lLWRhdGEtdGFibGUtY29sdW1uLWhlYWRlci1pY29uOiB2YXIoLS1uZS1yZWYtc2l6aW5nLTA0LCAxZW0pO1xuICAgIC0tbmUtZGF0YS10YWJsZS1jb2x1bW4taGVhZGVyLWdhcDogdmFyKC0tbmUtcmVmLXNwYWNpbmcteHgtc21hbGwsIDAuMjVlbSk7XG4gICAgLS1uZS1kYXRhLXRhYmxlLWZvbnQtZmFtaWx5LWNvbHVtbi1oZWFkZXI6IHZhcigtLW5lLXJlZi1mb250LWZhbWlseS1vcGVuLXNhbnMsJ09wZW4gU2FucycpO1xuICAgIC0tbmUtZGF0YS10YWJsZS1mb250LXdlaWdodC1jb2x1bW4taGVhZGVyOiB2YXIoLS1uZS1yZWYtZm9udC13ZWlnaHQtYm9sZCxCb2xkKTtcbiAgICAtLW5lLWRhdGEtdGFibGUtZm9udC1zaXplLWNvbHVtbi1oZWFkZXI6IHZhcigtLW5lLXJlZi1mb250LXNpemUtMDQsMC44NzVlbSk7XG4gICAgLS1uZS1kYXRhLXRhYmxlLWJvcmRlci13aWR0aC1jb2x1bW4taGVhZGVyLWRlZmF1bHQ6IHZhcigtLW5lLXJlZi1ib3JkZXItd2lkdGgtc21hbGwsMXB4KTtcbiAgICAtLW5lLWRhdGEtdGFibGUtYm9yZGVyLXdpZHRoLWNvbHVtbi1oZWFkZXItZm9jdXM6IHZhcigtLW5lLXJlZi1ib3JkZXItd2lkdGgtbGFyZ2UsNHB4KTtcbiAgfVxuYDtcblxuY29uc3QgYmFzZVRhYmxlID0gY3NzYFxuICA6aG9zdCB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB9XG5cbiAgKiB7XG4gICAgZm9udC1mYW1pbHk6IHZhcigtLW5lLWRhdGEtdGFibGUtZm9udC1mYW1pbHktY29sdW1uLWhlYWRlcik7XG4gICAgZm9udC13ZWlnaHQ6IGluaGVyaXQ7XG4gIH1cblxuICB0YWJsZSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgfVxuXG4gIHRoZWFkIHtcbiAgICBjb2xvcjogdmFyKC0tbmUtZGF0YS10YWJsZS1jb2xvci1jb2x1bW4taGVhZGVyLXRleHQpO1xuICAgIGZvbnQtZmFtaWx5OiB2YXIoLS1uZS1kYXRhLXRhYmxlLWZvbnQtZmFtaWx5LWNvbHVtbi1oZWFkZXIpO1xuICAgIGZvbnQtd2VpZ2h0OiB2YXIoLS1uZS1kYXRhLXRhYmxlLWZvbnQtd2VpZ2h0LWNvbHVtbi1oZWFkZXIpO1xuICB9XG5cbiAgdGgsXG4gIHRkIHtcbiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgZm9udC1zaXplOiB2YXIoLS1uZS1kYXRhLXRhYmxlLWZvbnQtc2l6ZS1jb2x1bW4taGVhZGVyKTtcbiAgICBwYWRkaW5nOiB2YXIoLS1uZS1kYXRhLXRhYmxlLXBhZGRpbmctdmVydGljYWwpXG4gICAgICB2YXIoLS1uZS1kYXRhLXRhYmxlLXBhZGRpbmctdmVydGljYWwpO1xuICB9XG5cbiAgdGhlYWQsXG4gIHRib2R5IHtcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICB9XG5cbiAgdGQge1xuICAgIGJvcmRlci1ib3R0b206IHZhcigtLW5lLWRhdGEtdGFibGUtYm9yZGVyLXdpZHRoLWNvbHVtbi1oZWFkZXItZGVmYXVsdCkgc29saWRcbiAgICAgIHZhcigtLW5lLWRhdGEtdGFibGUtY29sb3ItYm9yZGVyKTtcbiAgfVxuXG4gIHRib2R5IHRkIHtcbiAgICBib3JkZXItYm90dG9tOiB2YXIoLS1uZS1kYXRhLXRhYmxlLWJvcmRlci13aWR0aC1jb2x1bW4taGVhZGVyLWRlZmF1bHQpIHNvbGlkXG4gICAgICB2YXIoLS1uZS1kYXRhLXRhYmxlLWNvbG9yLWJvcmRlcik7XG4gIH1cblxuICB0Ym9keSB0cjpmaXJzdC1jaGlsZCB0ZCB7XG4gICAgYm9yZGVyLXRvcDogdmFyKC0tbmUtZGF0YS10YWJsZS1ib3JkZXItd2lkdGgtY29sdW1uLWhlYWRlci1kZWZhdWx0KSBzb2xpZFxuICAgICAgdmFyKC0tbmUtZGF0YS10YWJsZS1jb2xvci1ib3JkZXIpO1xuICB9XG5cbiAgdGJvZHkgdHI6bGFzdC1jaGlsZCB0ZCB7XG4gICAgYm9yZGVyLWJvdHRvbTogbm9uZTtcbiAgfVxuXG4gIHRib2R5IHRyOmhvdmVyLFxuICB0aC5zb3J0YWJsZTpob3ZlciB7XG4gICAgYmFja2dyb3VuZDogdmFyKC0tbmUtZGF0YS10YWJsZS1jb2xvci1jb2x1bW4taGVhZGVyLWJhY2tncm91bmQtaG92ZXIpO1xuICB9XG5cbiAgdGguc29ydGFibGU6aGFzKDpmb2N1cykge1xuICAgIGJhY2tncm91bmQ6IHZhcigtLW5lLWRhdGEtdGFibGUtY29sb3ItY29sdW1uLWhlYWRlci1iYWNrZ3JvdW5kLWZvY3VzKTtcblxuICAgIC8qIFRoZSBsZWZ0IGJvcmRlciBkb2VzIG5vdCBzaG93IHdpdGggdGhpcyBhbmQgd2lsbCBiZSBhdHRlbmRlZCBpbiBvbmUgb2YgdGhlIG90aGVyIEdpdEh1Yklzc3N1ZSBpdGVtcy4gKi9cblxuICAgIC8qIGJvcmRlcjogdmFyKC0tbmUtZGF0YS10YWJsZS1ib3JkZXItd2lkdGgtY29sdW1uLWhlYWRlci1mb2N1cykgc29saWRcbiAgICAgIHZhcigtLW5lLWRhdGEtdGFibGUtY29sb3ItY29sdW1uLWhlYWRlci1ib3JkZXItZm9jdXMpOyAqL1xuICB9XG5cbiAgdGguc29ydGFibGUgYnV0dG9uIHtcbiAgICBmb250LXNpemU6IDFlbTtcbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgICBjb2xvcjogaW5oZXJpdDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICBwYWRkaW5nOiAwO1xuICB9XG5cbiAgdGguc29ydGFibGUgbGFiZWwge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgfVxuXG4gIC5pY29uIHtcbiAgICB3aWR0aDogdmFyKC0tbmUtZGF0YS10YWJsZS1jb2x1bW4taGVhZGVyLWljb24pO1xuICAgIG1pbi13aWR0aDogdmFyKC0tbmUtZGF0YS10YWJsZS1jb2x1bW4taGVhZGVyLWljb24pO1xuICAgIG91dGxpbmU6IG5vbmU7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIHBhZGRpbmctbGVmdDogdmFyKC0tbmUtcmVmLXNwYWNpbmcteHgtc21hbGwsIDAuMjVlbSk7XG4gIH1cblxuICBhIC5pY29uIHtcbiAgICBwYWRkaW5nOiB2YXIoLS1uZS1yZWYtc3BhY2luZy14eC1zbWFsbCwgMC4yNWVtKVxuICAgICAgdmFyKC0tbmUtcmVmLXNwYWNpbmcteHgtc21hbGwsIDAuMjVlbSkgMDtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBjb2xvcjogdW5zZXQ7XG4gICAgd2lkdGg6IHZhcigtLW5lLWRhdGEtdGFibGUtY29sdW1uLWhlYWRlci1pY29uKTtcbiAgICBoZWlnaHQ6IHZhcigtLW5lLWRhdGEtdGFibGUtY29sdW1uLWhlYWRlci1pY29uKTtcbiAgfVxuXG4gIC5pY29uLmF2YXRhciB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgY29sb3I6IHVuc2V0O1xuICAgIHdpZHRoOiBjYWxjKDIgKiB2YXIoLS1uZS1kYXRhLXRhYmxlLWNvbHVtbi1oZWFkZXItaWNvbikpO1xuICAgIGhlaWdodDogY2FsYygyICogdmFyKC0tbmUtZGF0YS10YWJsZS1jb2x1bW4taGVhZGVyLWljb24pKTtcbiAgfVxuXG4gIC5zb3J0LWRpcmVjdGlvbi1hc2Mge1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDE4MGRlZyk7XG4gIH1cblxuICB0aC5zb3J0YWJsZTpob3ZlciAuaWNvbixcbiAgdGguc29ydGFibGU6aGFzKDpmb2N1cykgLmljb24ge1xuICAgIGNvbG9yOiB2YXIoLS1uZS1kYXRhLXRhYmxlLWNvbG9yLWNvbHVtbi1oZWFkZXItaWNvbi1zb3J0ZWQtaG92ZXIpO1xuICB9XG5cbiAgLmljb24uc29ydGVkIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBjb2xvcjogdmFyKC0tbmUtZGF0YS10YWJsZS1jb2xvci1jb2x1bW4taGVhZGVyLWljb24tc29ydGVkLWRlZmF1bHQpO1xuICB9XG5cbiAgYSB7XG4gICAgY29sb3I6IHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTYwLCAjMDA2YmQ2KTtcbiAgICBmb250LWZhbWlseTogdmFyKC0tbmUtcmVmLWZvbnQtZmFtaWx5LW9wZW4tc2FucywgT3BlbiBTYW5zKTtcbiAgICB0ZXh0LWRlY29yYXRpb246IHZhcigtLW5lLXJlZi10ZXh0LWRlY29yYXRpb24tbm9uZSwgbm9uZSk7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogMDtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogbWluLWNvbnRlbnQgbWluLWNvbnRlbnQgbWluLWNvbnRlbnQ7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICB9XG5cbiAgYTpob3ZlciB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiB2YXIoLS1uZS1yZWYtdGV4dC1kZWNvcmF0aW9uLXVuZGVybGluZSwgdW5kZXJsaW5lKTtcbiAgICBjb2xvcjogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtNzAsICMwMDUyYTMpO1xuICB9XG5cbiAgYTpmb2N1cy12aXNpYmxlIHtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIHRleHQtZGVjb3JhdGlvbjogdmFyKC0tbmUtcmVmLXRleHQtZGVjb3JhdGlvbi11bmRlcmxpbmUsIHVuZGVybGluZSk7XG4gICAgb3V0bGluZTogNHB4IHNvbGlkIHZhcigtLW5lLXJlZi1jb2xvci1ibHVlLTIwLCAjYTNkMWZmKTtcbiAgICBjb2xvcjogdmFyKC0tbmUtcmVmLWNvbG9yLWJsdWUtNzAsICMwMDUyYTMpO1xuICB9XG5gO1xuY29uc3Qgc3R5bGVzID0gW2NvbW1vblN0eWxlcywgYmFzZVRhYmxlLCB0b2tlbnNdO1xuXG5jb25zdCBicm93c2VyTG9jYWxlID0gbmF2aWdhdG9yLmxhbmd1YWdlO1xuY29uc3QgZm9ybWF0RGF0ZUZuID0gbG9jYWxlID0+IChkYXRlLCBkYXRlU3R5bGUpID0+IHtcbiAgaWYgKCFkYXRlKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIHJldHVybiBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGUsIHtcbiAgICBkYXRlU3R5bGVcbiAgfSkuZm9ybWF0KGRhdGUpO1xufTtcbmNvbnN0IGdldEZyaWVuZGx5UGFzdERhdGUgPSAoZGlmZiwgdmFsdWUsIGZyaWVuZGx5RGF0ZVN0eWxlKSA9PiB7XG4gIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM1NTI0NjEvaG93LXRvLWZvcm1hdC1hLWphdmFzY3JpcHQtZGF0ZS8zODY3NjM4NFxuICAvLyBodHRwczovL2RldmhpbnRzLmlvL3dpcC9pbnRsLWRhdGV0aW1lXG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0RhdGUvdG9Mb2NhbGVUaW1lU3RyaW5nXG4gIGNvbnN0IHJ0ZiA9IG5ldyBJbnRsLlJlbGF0aXZlVGltZUZvcm1hdChbXSwge1xuICAgIHN0eWxlOiBmcmllbmRseURhdGVTdHlsZSxcbiAgICBudW1lcmljOiAnYXV0bydcbiAgfSk7XG4gIC8vIDwgMSBtaW4uXG4gIGlmIChkaWZmIDwgNjAwMDApIHtcbiAgICByZXR1cm4gJ0p1c3Qgbm93JztcbiAgfVxuICAvLyA8IDEgaG91ci5cbiAgaWYgKGRpZmYgPCAzNjAwMDAwKSB7XG4gICAgY29uc3QgbWlucyA9IDAgLSBNYXRoLmZsb29yKGRpZmYgLyAoMTAwMCAqIDYwKSk7XG4gICAgcmV0dXJuIHJ0Zi5mb3JtYXQobWlucywgJ21pbnV0ZScpO1xuICB9XG4gIC8vIDwgMjQgaG91cnMuXG4gIGlmIChkaWZmIDwgODY0MDAwMDApIHtcbiAgICBjb25zdCBob3VycyA9IDAgLSBNYXRoLmZsb29yKGRpZmYgLyAoMTAwMCAqIDYwICogNjApKTtcbiAgICByZXR1cm4gcnRmLmZvcm1hdChob3VycywgJ2hvdXInKTtcbiAgfVxuICAvLyBEYXkgZGlmZmVyZW5jZS5cbiAgY29uc3QgdG9kYXlEYXRlID0gbmV3IERhdGUoKTtcbiAgdG9kYXlEYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICBsZXQgZGlmZkRheSA9IHRvZGF5RGF0ZS5nZXRUaW1lKCkgLSB2YWx1ZS5nZXRUaW1lKCk7XG4gIC8vIDwgdGhpcyB3ZWVrLlxuICBpZiAoZGlmZkRheSA8IHRvZGF5RGF0ZS5nZXREYXkoKSAqIDg2NDAwMDAwKSB7XG4gICAgY29uc3QgZGF5cyA9IDAgLSBNYXRoLmNlaWwoZGlmZkRheSAvIDg2NDAwMDAwKTtcbiAgICByZXR1cm4gcnRmLmZvcm1hdChkYXlzLCAnZGF5Jyk7XG4gIH1cbiAgLy8gU2V0IGRhdGUgdG8gYmVnaW5uaW5nIG9mIHdlZWsgZm9yIG5leHQgY29tcGFyaXNvbnMuXG4gIHRvZGF5RGF0ZS5zZXRUaW1lKHRvZGF5RGF0ZS5nZXRUaW1lKCkgLSAodG9kYXlEYXRlLmdldERheSgpIC0gMSkgKiA4NjQwMDAwMCk7XG4gIGRpZmZEYXkgPSB0b2RheURhdGUuZ2V0VGltZSgpIC0gdmFsdWUuZ2V0VGltZSgpO1xuICAvLyA8IDQgd2Vla3MuXG4gIGlmIChkaWZmRGF5IDw9IDI4ICogODY0MDAwMDApIHtcbiAgICBjb25zdCB3ZWVrcyA9IDAgLSBNYXRoLmNlaWwoZGlmZkRheSAvICg4NjQwMDAwMCAqIDcpKTtcbiAgICByZXR1cm4gcnRmLmZvcm1hdCh3ZWVrcywgJ3dlZWsnKTtcbiAgfVxuICAvLyA8IGEgeWVhciBsZXNzIGV4Y2x1ZGluZyBzYW1lIG1vbnRoIHdoaWNoIG1pZ2h0IGJlIGNvbmZ1c2luZy5cbiAgY29uc3QgbGFzdFllYXIgPSBuZXcgRGF0ZSgpO1xuICBpZiAobGFzdFllYXIuZ2V0TW9udGgoKSA9PT0gMTIpIHtcbiAgICBsYXN0WWVhci5zZXRNb250aCgxLCAxKTtcbiAgfSBlbHNlIHtcbiAgICBsYXN0WWVhci5zZXRGdWxsWWVhcihsYXN0WWVhci5nZXRGdWxsWWVhcigpIC0gMSk7XG4gICAgbGFzdFllYXIuc2V0TW9udGgobGFzdFllYXIuZ2V0TW9udGgoKSArIDEsIDEpO1xuICB9XG4gIGlmICh2YWx1ZSA+PSBsYXN0WWVhcikge1xuICAgIHJldHVybiB2YWx1ZS50b0xvY2FsZVN0cmluZyhbXSwge1xuICAgICAgbW9udGg6ICdsb25nJ1xuICAgIH0pO1xuICB9XG4gIC8vIHRoZSByZXN0LlxuICByZXR1cm4gdmFsdWUudG9Mb2NhbGVTdHJpbmcoW10sIHtcbiAgICB5ZWFyOiAnbnVtZXJpYydcbiAgfSk7XG59O1xuY29uc3QgZm9ybWF0RGF0ZSA9IGZvcm1hdERhdGVGbihicm93c2VyTG9jYWxlKTtcblxuY2xhc3MgVGFibGVDb250cm9scyB7XG4gIC8vIENPTlRST0wgUkVOREVSSU5HXG4gIHJlbmRlckNlbGxJY29uKGlzQXZhdGFyLCBkZXRhaWxEYXRhKSB7XG4gICAgcmV0dXJuIGh0bWxgPGRpdiBjbGFzcz0ke2NsYXNzTWFwKHtcbiAgICAgIGljb246IHRydWUsXG4gICAgICBhdmF0YXI6IGlzQXZhdGFyXG4gICAgfSl9PlxuICAgICAgPG5lLWljb24gdHlwZT0ke2RldGFpbERhdGF9PjwvbmUtaWNvbj5cbiAgICA8L2Rpdj5gO1xuICB9XG4gIHJlbmRlckRhdGVUaW1lKHRleHQsXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZWZhdWx0LXBhcmFtLWxhc3RcbiAgZGF0ZVN0eWxlID0gJ2N1c3RvbScsIGRhdGVGb3JtYXQpIHtcbiAgICBpZiAoZGF0ZUZvcm1hdCB8fCBkYXRlU3R5bGUgPT09ICdjdXN0b20nKSB7XG4gICAgICBsZXQgZGYgPSBkYXRlRm9ybWF0O1xuICAgICAgaWYgKCFkYXRlRm9ybWF0KSB7XG4gICAgICAgIGRmID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoJ2VuLVVTJywge1xuICAgICAgICAgIGRhdGVTdHlsZTogJ21lZGl1bScsXG4gICAgICAgICAgdGltZVN0eWxlOiAnc2hvcnQnXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGh0bWxgPG5lLWxhYmVsPiR7ZGY/LmZvcm1hdChuZXcgRGF0ZSh0ZXh0KSl9PC9uZS1sYWJlbD5gO1xuICAgIH1cbiAgICByZXR1cm4gaHRtbGA8bmUtbGFiZWxcbiAgICAgID4ke2Zvcm1hdERhdGUobmV3IERhdGUodGV4dCksIGRhdGVTdHlsZSl9PC9uZS1sYWJlbFxuICAgID5gO1xuICB9XG4gIHJlbmRlckZyaWVuZGx5RGF0ZSh0ZXh0LCB0aW1lU3R5bGUpIHtcbiAgICBjb25zdCBkdDEgPSArbmV3IERhdGUoKTtcbiAgICBjb25zdCBkdDIgPSArbmV3IERhdGUodGV4dCk7XG4gICAgY29uc3QgZGlmZiA9IGR0MSAtIGR0MjtcbiAgICByZXR1cm4gaHRtbGA8bmUtbGFiZWxcbiAgICAgID4ke2dldEZyaWVuZGx5UGFzdERhdGUoZGlmZiwgbmV3IERhdGUodGV4dCksIHRpbWVTdHlsZSl9PC9uZS1sYWJlbFxuICAgID5gO1xuICB9XG4gIHJlbmRlckNoZWNrYm94KGNoYW5nZUV2ZW50LCBjaGVja2VkKSB7XG4gICAgcmV0dXJuIGh0bWxgPG5lLWNoZWNrYm94XG4gICAgICBAbmUtY2xpY2s9JHtjaGFuZ2VFdmVudH1cbiAgICAgIC5jaGVja2VkPSR7Y2hlY2tlZCA/PyBmYWxzZX1cbiAgICA+PC9uZS1jaGVja2JveD5gO1xuICB9XG4gIHJlbmRlclJhZGlvKGNoZWNrZWQsIGNoYW5nZUV2ZW50KSB7XG4gICAgcmV0dXJuIGh0bWxgPG5lLXJhZGlvLWJ1dHRvblxuICAgICAgQG5lLWNsaWNrPSR7Y2hhbmdlRXZlbnR9XG4gICAgICBuYW1lPVwic2VsZWN0ZWRcIlxuICAgICAgLmNoZWNrZWQ9JHtjaGVja2VkID8/IGZhbHNlfVxuICAgID5cbiAgICA8L25lLXJhZGlvLWJ1dHRvbj5gO1xuICB9XG4gIHJlbmRlckh5cGVybGluayh0ZXh0LCB1cmwsIGljb25OYW1lLCB0YXJnZXQsIGNoYW5nZUV2ZW50KSB7XG4gICAgcmV0dXJuIGh0bWxgPG5lLWxpbmtcbiAgICAgIGxhYmVsPSR7dGV4dH1cbiAgICAgIHRhcmdldD0ke2lmRGVmaW5lZCh0YXJnZXQpfVxuICAgICAgaHJlZj0ke2lmRGVmaW5lZCh1cmwpfVxuICAgICAgbGVmdC1pY29uLXR5cGU9JHtpZkRlZmluZWQoaWNvbk5hbWUpfVxuICAgICAgQG5lLWNsaWNrPSR7ZSA9PiB7XG4gICAgICBjaGFuZ2VFdmVudD8uKGUpO1xuICAgIH19XG4gICAgPjwvbmUtbGluaz5gO1xuICB9XG59XG5cbi8qKlxuICogQHRhZyBuZS1kYXRhLXRhYmxlXG4gKiBAdGFnbmFtZSBuZS1kYXRhLXRhYmxlXG4gKiBAZXZlbnQgbmUtY2xpY2sgUmFpc2VkIHdoZW4gdGhlIGNoZWNrYm94IGlzIGNsaWNrZWQgZm9yIGV2ZXJ5IHJvdyB0aGF0IGlzIHNlbGVjdGVkIG9yIHRoZSBzZWxlY3QgYWxsXG4gKiBAZXZlbnQgbmUtc29ydCBSYWlzZWQgd2hlbiB0aGUgc29ydGluZyBhY3Rpb24gaXMgY2xpY2tlZCBpbiB0aGUgdGFibGUgaGVhZGVyXG4gKiBAZXZlbnQgbmUtY2hhbmdlIFJhaXNlZCB3aGVuIHRoZSByYWRpb2J1dHRvbiBpcyBjbGlja2VkIG9uIHRoZSBzaW5nbGVTZWxlY3QgdGFibGUgdmFyaWFudFxuICovXG5sZXQgTmVEYXRhVGFibGUgPSBjbGFzcyBOZURhdGFUYWJsZSBleHRlbmRzIFNjb3BlZEVsZW1lbnRzTWl4aW4oTGl0RWxlbWVudCkge1xuICBzdGF0aWMgZ2V0IHNjb3BlZEVsZW1lbnRzKCkge1xuICAgIHJldHVybiB7XG4gICAgICAnbmUtaWNvbic6IE5lSWNvbixcbiAgICAgICduZS1saW5rJzogTmVMaW5rLFxuICAgICAgJ25lLWxhYmVsJzogTmVMYWJlbCxcbiAgICAgICduZS1jaGVja2JveCc6IE5lQ2hlY2tib3hcbiAgICB9O1xuICB9XG4gIHN0YXRpYyBnZXQgc3R5bGVzKCkge1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH1cbiAgZ2V0IGhlYWRlcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RhYmxlSGVhZGVycztcbiAgfVxuICBzZXQgaGVhZGVycyh2YWwpIHtcbiAgICB0aGlzLl90YWJsZUhlYWRlcnMgPSB2YWw7XG4gIH1cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICB2YXJpYW50OiAnZGVmYXVsdCcsXG4gICAgICBzaG93SGVhZGVyczogdHJ1ZVxuICAgIH07XG4gICAgdGhpcy5yb3dzID0gW107XG4gICAgdGhpcy5fdGFibGVIZWFkZXJzID0gW107XG4gICAgdGhpcy5hbGxTZWxlY3RlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3RhYmxlQ29udHJvbHMgPSBuZXcgVGFibGVDb250cm9scygpO1xuICB9XG4gIC8vIEhFQURFUiBSRU5ERVJJTkdcbiAgcmVuZGVySGVhZGVyUm93KCkge1xuICAgIHJldHVybiBodG1sYDx0cj5cbiAgICAgICR7dGhpcy5yZW5kZXJIZWFkZXJzKCl9XG4gICAgPC90cj5gO1xuICB9XG4gIHJlbmRlckhlYWRlcnMoKSB7XG4gICAgY29uc3QgdGFibGVIZWFkZXJzID0gW107XG4gICAgc3dpdGNoICh0aGlzLm9wdGlvbnMudmFyaWFudCkge1xuICAgICAgY2FzZSAnbXVsdGlTZWxlY3QnOlxuICAgICAgICBjb25zdCBjID0ge1xuICAgICAgICAgIHR5cGU6ICdjaGVja2JveCcsXG4gICAgICAgICAgcHJvcGVydHk6IHVuZGVmaW5lZCxcbiAgICAgICAgICB0aXRsZTogJ1NlbGVjdCBBbGwnLFxuICAgICAgICAgIGNoZWNrZWQ6IHRoaXMuYWxsU2VsZWN0ZWRcbiAgICAgICAgfTtcbiAgICAgICAgdGFibGVIZWFkZXJzLnB1c2goaHRtbGA8dGggc2NvcGU9XCJjb2xcIj4ke3RoaXMucmVuZGVySGVhZGVyQ2VsbChjKX08L3RoPmApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3NpbmdsZVNlbGVjdCc6XG4gICAgICAgIGNvbnN0IGNvbmYgPSB7XG4gICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgcHJvcGVydHk6IHVuZGVmaW5lZCxcbiAgICAgICAgICB0aXRsZTogJycsXG4gICAgICAgICAgY2hlY2tlZDogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgdGFibGVIZWFkZXJzLnB1c2goaHRtbGA8dGggc2NvcGU9XCJjb2xcIj4ke3RoaXMucmVuZGVySGVhZGVyQ2VsbChjb25mKX08L3RoPmApO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgdGhpcy5oZWFkZXJzLmZvckVhY2goKGhlYWRlckNvbHVtbiwgaW5kZXgpID0+IHtcbiAgICAgIHRhYmxlSGVhZGVycy5wdXNoKGh0bWxgPHRoXG4gICAgICAgIHNjb3BlPVwiY29sXCJcbiAgICAgICAga2V5PSR7aW5kZXh9XG4gICAgICAgIGNsYXNzPSR7Y2xhc3NNYXAoe1xuICAgICAgICBzb3J0YWJsZTogaGVhZGVyQ29sdW1uLnNvcnRhYmxlID09PSB0cnVlXG4gICAgICB9KX1cbiAgICAgID5cbiAgICAgICAgJHt0aGlzLnJlbmRlckhlYWRlckNvbnRlbnQoaGVhZGVyQ29sdW1uKX1cbiAgICAgIDwvdGg+YCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRhYmxlSGVhZGVycztcbiAgfVxuICByZW5kZXJIZWFkZXJDb250ZW50KGhlYWRlckNvbHVtbikge1xuICAgIHJldHVybiBodG1sYCR7dGhpcy5yZW5kZXJIZWFkZXJDZWxsKGhlYWRlckNvbHVtbil9IGA7XG4gIH1cbiAgcmVuZGVySGVhZGVyQ2VsbChoZWFkZXIpIHtcbiAgICBzd2l0Y2ggKGhlYWRlci50eXBlKSB7XG4gICAgICBjYXNlICdjaGVja2JveCc6XG4gICAgICAgIGNvbnN0IG15Q2hhbmdlRXZlbnQgPSBlID0+IHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICB0aGlzLmFsbFNlbGVjdGVkID0gIXRoaXMuYWxsU2VsZWN0ZWQ7XG4gICAgICAgICAgLy8gc2V0IHRoZSBzdGF0ZSBmb3IgYWxsIHRoZSByb3dzLlxuICAgICAgICAgIHRoaXMucm93cy5tYXAoeCA9PiB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICAgIHguY2hlY2tlZCA9IHRoaXMuYWxsU2VsZWN0ZWQ7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLmZpcmVTZWxlY3QoZSwgaGVhZGVyKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RhYmxlQ29udHJvbHMucmVuZGVyQ2hlY2tib3gobXlDaGFuZ2VFdmVudCwgdGhpcy5hbGxTZWxlY3RlZCk7XG4gICAgICBjYXNlICdyYWRpb0J1dHRvbic6XG4gICAgICAgIHJldHVybiB0aGlzLl90YWJsZUNvbnRyb2xzLnJlbmRlclJhZGlvKGZhbHNlLCBlID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgICAvKiAqL1xuICAgICAgICB9KTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGh0bWxgJHt0aGlzLnJlbmRlclNvcnQoaGVhZGVyKX1gO1xuICAgIH1cbiAgfVxuICAvLyBST1cgUkVOREVSSU5HXG4gIHJlbmRlclRhYmxlUm93cygpIHtcbiAgICBpZiAoIXRoaXMucm93cz8ubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnJvd3MubWFwKHIgPT4gaHRtbGA8dHI+XG4gICAgICAgICAgJHt0aGlzLnJlbmRlclJvd0NvbHVtbihyKX1cbiAgICAgICAgPC90cj5gKTtcbiAgfVxuICByZW5kZXJSb3dDb2x1bW4ocm93KSB7XG4gICAgY29uc3QgdGRzID0gW107XG4gICAgc3dpdGNoICh0aGlzLm9wdGlvbnMudmFyaWFudCkge1xuICAgICAgY2FzZSAnbXVsdGlTZWxlY3QnOlxuICAgICAgICB0ZHMucHVzaChodG1sYDx0ZD5cbiAgICAgICAgICAgICR7dGhpcy5yZW5kZXJDZWxsQ29udGVudCh7XG4gICAgICAgICAgdHlwZTogJ2NoZWNrYm94JyxcbiAgICAgICAgICBwcm9wZXJ0eTogdW5kZWZpbmVkXG4gICAgICAgIH0sIHJvdyl9XG4gICAgICAgICAgPC90ZD5gKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzaW5nbGVTZWxlY3QnOlxuICAgICAgICB0ZHMucHVzaChodG1sYDx0ZD5cbiAgICAgICAgICAgICR7dGhpcy5yZW5kZXJDZWxsQ29udGVudCh7XG4gICAgICAgICAgdHlwZTogJ3JhZGlvQnV0dG9uJyxcbiAgICAgICAgICBwcm9wZXJ0eTogdW5kZWZpbmVkXG4gICAgICAgIH0sIHJvdyl9XG4gICAgICAgICAgPC90ZD5gKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuaGVhZGVycy5mb3JFYWNoKHRoID0+IHtcbiAgICAgIGlmICghdGgucHJvcGVydHkpIHtcbiAgICAgICAgdGRzLnB1c2goaHRtbGA8dGQ+PC90ZD5gKTtcbiAgICAgIH1cbiAgICAgIHRkcy5wdXNoKGh0bWxgPHRkPiR7dGhpcy5yZW5kZXJDZWxsQ29udGVudCh0aCwgcm93KX08L3RkPmApO1xuICAgIH0pO1xuICAgIHJldHVybiB0ZHM7XG4gIH1cbiAgcmVuZGVyQ2VsbENvbnRlbnQoaGVhZGVyLCByb3cpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGxldCBjZWxsSXRlbVZhbHVlO1xuICAgIGxldCB0ZXh0UHJvcGVydHk7XG4gICAgaWYgKGhlYWRlci5wcm9wZXJ0eSkge1xuICAgICAgdGV4dFByb3BlcnR5ID0gaGVhZGVyLnByb3BlcnR5O1xuICAgICAgY2VsbEl0ZW1WYWx1ZSA9IHJvdy5yZWNvcmRbdGV4dFByb3BlcnR5XTtcbiAgICB9XG4gICAgc3dpdGNoIChoZWFkZXIudHlwZSkge1xuICAgICAgY2FzZSAnaWNvbic6XG4gICAgICAgIHJldHVybiB0aGlzLl90YWJsZUNvbnRyb2xzLnJlbmRlckNlbGxJY29uKHRydWUsIGNlbGxJdGVtVmFsdWUpO1xuICAgICAgY2FzZSAnZGF0ZXRpbWUnOlxuICAgICAgICByZXR1cm4gdGhpcy5fdGFibGVDb250cm9scy5yZW5kZXJEYXRlVGltZShjZWxsSXRlbVZhbHVlLCBoZWFkZXIuZGF0ZVN0eWxlLCBoZWFkZXIuZGF0ZUZvcm1hdCk7XG4gICAgICBjYXNlICdkYXRldGltZV9ydGYnOlxuICAgICAgICByZXR1cm4gdGhpcy5fdGFibGVDb250cm9scy5yZW5kZXJGcmllbmRseURhdGUoY2VsbEl0ZW1WYWx1ZSwgaGVhZGVyLnRpbWVTdHlsZSk7XG4gICAgICBjYXNlICdoeXBlcmxpbmsnOlxuICAgICAgICBjb25zdCB1cmxQcm9wID0gaGVhZGVyLnVybFByb3BlcnR5O1xuICAgICAgICBsZXQgdXJsVmFsdWU7XG4gICAgICAgIGlmICh1cmxQcm9wKSB7XG4gICAgICAgICAgdXJsVmFsdWUgPSByb3cucmVjb3JkW3VybFByb3BdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByb3AgPSBoZWFkZXIuaWNvblByb3BlcnR5O1xuICAgICAgICBsZXQgaWNvbk5hbWU7XG4gICAgICAgIGlmIChwcm9wKSB7XG4gICAgICAgICAgaWNvbk5hbWUgPSByb3cucmVjb3JkW3Byb3BdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG15SHlwZXJsaW5rRXZlbnQgPSBlID0+IHtcbiAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBjb25zdCBkID0ge1xuICAgICAgICAgICAgcHJvcGVydHk6IHRleHRQcm9wZXJ0eSxcbiAgICAgICAgICAgIGl0ZW06IHJvd1xuICAgICAgICAgIH07XG4gICAgICAgICAgdGhpcy5maXJlQ2xpY2soZCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLl90YWJsZUNvbnRyb2xzLnJlbmRlckh5cGVybGluayhjZWxsSXRlbVZhbHVlLCB1cmxWYWx1ZSwgaWNvbk5hbWUsIGhlYWRlci50YXJnZXQsIG15SHlwZXJsaW5rRXZlbnQpO1xuICAgICAgY2FzZSAnY2hlY2tib3gnOlxuICAgICAgICBjb25zdCBteUNoYW5nZUV2ZW50ID0gZSA9PiB7XG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgdGhpcy5maXJlU2VsZWN0KGUsIHJvdyk7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgcm93LmNoZWNrZWQgPSAhcm93LmNoZWNrZWQ7XG4gICAgICAgICAgdGhpcy5hbGxTZWxlY3RlZCA9IHRoaXMucm93cy5tYXAoeCA9PiB4LmNoZWNrZWQgPT09IHRydWUpLmZpbHRlcihkID0+IGQgPT09IHRydWUpLmxlbmd0aCA9PT0gdGhpcy5yb3dzLmxlbmd0aDtcbiAgICAgICAgICB0aGlzLnJlcXVlc3RVcGRhdGUoKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RhYmxlQ29udHJvbHMucmVuZGVyQ2hlY2tib3gobXlDaGFuZ2VFdmVudCwgdGhpcy5hbGxTZWxlY3RlZCA/IHRydWUgOiByb3cuY2hlY2tlZCk7XG4gICAgICBjYXNlICdyYWRpb0J1dHRvbic6XG4gICAgICAgIGNvbnN0IG15Q2xpY2tFdmVudCA9IGUgPT4ge1xuICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHRoaXMuZmlyZVNlbGVjdChlLCByb3cpO1xuICAgICAgICAgIHRoaXMucmVxdWVzdFVwZGF0ZSgpO1xuICAgICAgICAgIHRoaXMuYWxsU2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLnNlbGVjdGVkUmVjb3JkID0gcm93LnJlY29yZDtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RhYmxlQ29udHJvbHMucmVuZGVyUmFkaW8ocm93LnJlY29yZCA9PT0gdGhpcy5zZWxlY3RlZFJlY29yZCwgbXlDbGlja0V2ZW50KTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBodG1sYDxuZS1sYWJlbD4ke2NlbGxJdGVtVmFsdWV9PC9uZS1sYWJlbD5gO1xuICAgIH1cbiAgfVxuICByZW5kZXJTb3J0KGhlYWRlcikge1xuICAgIGlmICghaGVhZGVyLnNvcnRhYmxlICYmIGhlYWRlci50aXRsZSkge1xuICAgICAgcmV0dXJuIGh0bWxgPG5lLWxhYmVsPiR7aGVhZGVyLnRpdGxlfTwvbmUtbGFiZWw+YDtcbiAgICB9XG4gICAgaWYgKGhlYWRlci5zb3J0YWJsZSkge1xuICAgICAgc3dpdGNoIChoZWFkZXIuc29ydERpcmVjdGlvbikge1xuICAgICAgICBjYXNlICdhc2MnOlxuICAgICAgICAgIHJldHVybiBodG1sYDxidXR0b25cbiAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgQGNsaWNrPSR7ZSA9PiB0aGlzLmZpcmVTb3J0KGUsIGhlYWRlcil9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPG5lLWxhYmVsPiR7aGVhZGVyLnRpdGxlfTwvbmUtbGFiZWw+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGNsYXNzPSR7Y2xhc3NNYXAoe1xuICAgICAgICAgICAgaWNvbjogdHJ1ZSxcbiAgICAgICAgICAgIHNvcnRlZDogaGVhZGVyLnNvcnRlZCA9PT0gdHJ1ZVxuICAgICAgICAgIH0pfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8bmUtaWNvbiAudHlwZT0keydhcnJvd1VwJ30+PC9uZS1pY29uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9idXR0b24+YDtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gaHRtbGA8YnV0dG9uXG4gICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgIEBjbGljaz0ke2UgPT4gdGhpcy5maXJlU29ydChlLCBoZWFkZXIpfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxuZS1sYWJlbD4ke2hlYWRlci50aXRsZX08L25lLWxhYmVsPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBjbGFzcz0ke2NsYXNzTWFwKHtcbiAgICAgICAgICAgIGljb246IHRydWUsXG4gICAgICAgICAgICBzb3J0ZWQ6IGhlYWRlci5zb3J0ZWQgPT09IHRydWVcbiAgICAgICAgICB9KX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPG5lLWljb24gLnR5cGU9JHsnYXJyb3dEb3duJ30+PC9uZS1pY29uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9idXR0b24+YDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGh0bWxgYDtcbiAgfVxuICBmaXJlU2VsZWN0KGUsIGl0ZW0pIHtcbiAgICBjb25zdCBkZXRhaWwgPSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgbmV3VmFsdWU6ICFlLnRhcmdldD8uY2hlY2tlZCxcbiAgICAgIHByb3BlcnR5OiAnY2hlY2tlZCcsXG4gICAgICBpdGVtXG4gICAgfTtcbiAgICBmaXJlKHRoaXMsICduZS1jaGFuZ2UnLCB7XG4gICAgICBjb21wb3NlZDogdHJ1ZSxcbiAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICBkZXRhaWxcbiAgICB9KTtcbiAgfVxuICBmaXJlU29ydChlLCBjb2x1bW5IZWFkZXJJdGVtKSB7XG4gICAgY29uc3QgZGV0YWlsID0ge1xuICAgICAgcHJvcGVydHk6IGNvbHVtbkhlYWRlckl0ZW0/LnByb3BlcnR5LFxuICAgICAgbmV3U29ydERpcmVjdGlvbjogY29sdW1uSGVhZGVySXRlbT8uc29ydERpcmVjdGlvbiA9PT0gJ2Rlc2MnID8gJ2FzYycgOiAnZGVzYycsXG4gICAgICBjb2x1bW5IZWFkZXI6IGNvbHVtbkhlYWRlckl0ZW1cbiAgICB9O1xuICAgIGZpcmUodGhpcywgJ25lLXNvcnQnLCB7XG4gICAgICBjb21wb3NlZDogdHJ1ZSxcbiAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICBkZXRhaWxcbiAgICB9KTtcbiAgICAvLyByZXNldCBhbGwgdGhlIGNvbHVtbnMgYW5kIHNldCBzb3J0IGRpcmVjdGlvbiBhbmQgc29ydGVkXG4gICAgdGhpcy5fdGFibGVIZWFkZXJzLmZvckVhY2goKGgsIGkpID0+IHtcbiAgICAgIGNvbnN0IGhzID0gdGhpcy5fdGFibGVIZWFkZXJzW2ldO1xuICAgICAgaWYgKGggIT09IGNvbHVtbkhlYWRlckl0ZW0gJiYgaC5zb3J0YWJsZSkge1xuICAgICAgICBocy5zb3J0RGlyZWN0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICBocy5zb3J0ZWQgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBocy5zb3J0ZWQgPSB0cnVlO1xuICAgICAgICBocy5zb3J0RGlyZWN0aW9uID0gZGV0YWlsLm5ld1NvcnREaXJlY3Rpb247XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5yZXF1ZXN0VXBkYXRlKCk7XG4gIH1cbiAgZmlyZUNsaWNrKGRldGFpbCkge1xuICAgIGZpcmUodGhpcywgJ25lLWNsaWNrJywge1xuICAgICAgY29tcG9zZWQ6IHRydWUsXG4gICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgZGV0YWlsXG4gICAgfSk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBodG1sYFxuICAgICAgPHRhYmxlPlxuICAgICAgICA8dGhlYWQ+XG4gICAgICAgICAgJHt0aGlzLm9wdGlvbnMuc2hvd0hlYWRlcnMgPT09IHRydWUgPyB0aGlzLnJlbmRlckhlYWRlclJvdygpIDogJyd9XG4gICAgICAgIDwvdGhlYWQ+XG4gICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAke3RoaXMucmVuZGVyVGFibGVSb3dzKCl9XG4gICAgICAgIDwvdGJvZHk+XG4gICAgICA8L3RhYmxlPlxuICAgIGA7XG4gIH1cbn07XG5fX2RlY29yYXRlKFtwcm9wZXJ0eSh7XG4gIHR5cGU6IE9iamVjdFxufSldLCBOZURhdGFUYWJsZS5wcm90b3R5cGUsIFwib3B0aW9uc1wiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbcHJvcGVydHkoe1xuICB0eXBlOiBBcnJheVxufSldLCBOZURhdGFUYWJsZS5wcm90b3R5cGUsIFwiaGVhZGVyc1wiLCBudWxsKTtcbl9fZGVjb3JhdGUoW3Byb3BlcnR5KHtcbiAgdHlwZTogQXJyYXlcbn0pXSwgTmVEYXRhVGFibGUucHJvdG90eXBlLCBcInJvd3NcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3N0YXRlKCldLCBOZURhdGFUYWJsZS5wcm90b3R5cGUsIFwiYWxsU2VsZWN0ZWRcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW3N0YXRlKClcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5dLCBOZURhdGFUYWJsZS5wcm90b3R5cGUsIFwic2VsZWN0ZWRSZWNvcmRcIiwgdm9pZCAwKTtcbk5lRGF0YVRhYmxlID0gX19kZWNvcmF0ZShbY3VzdG9tRWxlbWVudCgnbmUtZGF0YS10YWJsZScpXSwgTmVEYXRhVGFibGUpO1xuXG5leHBvcnQgeyBOZURhdGFUYWJsZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YS10YWJsZS5qcy5tYXBcbiIsImltcG9ydCAnLi4vY29tbW9uLmNvbmZpZ3VyZSc7XG5pbXBvcnQgeyBTY29wZWRFbGVtZW50c01peGluIH0gZnJvbSAnQG9wZW4td2Mvc2NvcGVkLWVsZW1lbnRzJztcbmltcG9ydCB7IENTU1Jlc3VsdCwgaHRtbCwgTGl0RWxlbWVudCB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBjdXN0b21FbGVtZW50IH0gZnJvbSAnbGl0L2RlY29yYXRvcnMuanMnO1xuaW1wb3J0IENvbnRleHRTZXJ2aWNlIGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQuc2VydmljZSc7XG5pbXBvcnQgRGF0YVNlcnZpY2UgZnJvbSAnLi4vc2VydmljZXMvZGF0YS5zZXJ2aWNlJztcbmltcG9ydCBFdmVudFNlcnZpY2UgZnJvbSAnLi4vc2VydmljZXMvZXZlbnQuc2VydmljZSc7XG5pbXBvcnQgUHJvY2Vzc2VzQXBpU2VydmljZSBmcm9tICcuLi9zZXJ2aWNlcy9wcm9jZXNzZXMtYXBpLnNlcnZpY2UnO1xuaW1wb3J0IHsgc3R5bGVzIH0gZnJvbSAnLi9hcHAuc3R5bGVzJztcbmltcG9ydCB7IFBpSGVhZGVyIH0gZnJvbSAnLi9waS1oZWFkZXIvcGktaGVhZGVyJztcbmltcG9ydCB7IFBpTGlzdENvbXBvbmVudCB9IGZyb20gJy4vcGktbGlzdC1jb21wb25lbnQvcGktbGlzdC1jb21wb25lbnQnO1xuaW1wb3J0ICdAbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2NvbXBvbmVudHMvYnV0dG9uJztcbmltcG9ydCAnQG5pbnRleGdsb2JhbC9lYXJ0aGxpbmctY29tcG9uZW50cy9jb21wb25lbnRzL2J1dHRvbi1zZXQnO1xuaW1wb3J0ICdAbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2NvbXBvbmVudHMvbGFiZWwnO1xuaW1wb3J0ICdAbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2NvbXBvbmVudHMvc3RhdHVzLW92ZXJsYXknO1xuaW1wb3J0ICdAbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2NvbXBvbmVudHMvbW9kYWwnO1xuaW1wb3J0ICdAbmludGV4Z2xvYmFsL2VhcnRobGluZy1jb21wb25lbnRzL2NvbXBvbmVudHMvaWNvbic7XG5pbXBvcnQgJ0BuaW50ZXhnbG9iYWwvZWFydGhsaW5nLWNvbXBvbmVudHMtYWxwaGEvY29tcG9uZW50cy9kYXRhLXRhYmxlJztcblxuQGN1c3RvbUVsZW1lbnQoJ3BpLWJwbW4tbGlzdCcpXG5leHBvcnQgY2xhc3MgQXBwQ29tcG9uZW50IGV4dGVuZHMgU2NvcGVkRWxlbWVudHNNaXhpbihMaXRFbGVtZW50KSB7XG4gIHN0YXRpYyBnZXQgc2NvcGVkRWxlbWVudHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICdwaS1saXN0LWNvbXBvbmVudCc6IFBpTGlzdENvbXBvbmVudCxcbiAgICAgICdwaS1oZWFkZXInOiBQaUhlYWRlcixcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGdldCBzdHlsZXMoKTogQ1NTUmVzdWx0W10ge1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgLy8gISEhIE9yZGVyIGlzIGltcG9ydGFudCByZXNldCBpbiBvcmRlciBvZiBzZXJ2aWNlIGludGVybmFsIGRlcGVuZGVuY2llcyAhISFcbiAgICBEYXRhU2VydmljZS5yZXNldEluc3RhbmNlKCk7XG4gICAgUHJvY2Vzc2VzQXBpU2VydmljZS5yZXNldEluc3RhbmNlKCk7XG4gICAgQ29udGV4dFNlcnZpY2UucmVzZXRJbnN0YW5jZSgpO1xuICAgIEV2ZW50U2VydmljZS5yZXNldEluc3RhbmNlKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIGh0bWxgIDxwaS1oZWFkZXI+PC9waS1oZWFkZXI+XG4gICAgICA8cGktbGlzdC1jb21wb25lbnQ+PC9waS1saXN0LWNvbXBvbmVudD5gO1xuICB9XG59XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgaW50ZXJmYWNlIEhUTUxFbGVtZW50VGFnTmFtZU1hcCB7XG4gICAgJ3BpLWJwbW4tbGlzdCc6IEFwcENvbXBvbmVudDtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIl9leHBvcnQiLCJfaW1wb3J0IiwiYWRkIiwiYXJjaGl2ZSIsImFycm93RG93biIsImFycm93VXAiLCJjYXJldERvd24iLCJjYXJldExlZnQiLCJjYXJldFJpZ2h0IiwiY2FyZXRVcCIsImNoZWNrIiwiY2hldnJvbkRvd24iLCJjaGV2cm9uTGVmdCIsImNoZXZyb25MaWdodERvd24iLCJjaGV2cm9uTGlnaHRMZWZ0IiwiY2hldnJvbkxpZ2h0UmlnaHQiLCJjaGV2cm9uTGlnaHRVcCIsImNoZXZyb25SaWdodCIsImNoZXZyb25VcCIsImNsb3NlRGVmYXVsdCIsImRhbmdlckV4Y2xhbWF0aW9uIiwiZHJvcHpvbmUiLCJmZWVkYmFjayIsImZpbGUiLCJoaWRlIiwiaW5mbyIsIm1heGltaXNlIiwibWVhdGJhbGxzIiwibWludXMiLCJvcGVuSW5OZXdXaW5kb3ciLCJwcm9jZXNzIiwicHJvY2Vzc01vZGVsIiwicHVibGlzaCIsInJlZnJlc2giLCJzYXZlIiwic2NoZWR1bGUiLCJzZWFyY2giLCJzaG93Iiwic3VjY2VzcyIsInN1bW1hcnkiLCJ0aWNrIiwidHJhc2giLCJ1c2VyIiwidXNlcnMiLCJ2ZXJzaW9uSGlzdG9yeSIsIndhcm5pbmdFeGNsYW1hdGlvbiIsImgiLCJiIiwiYyIsImxlbmd0aCIsImRvbmUiLCJ2YWx1ZSIsImsiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNhbGwiLCJuZXh0IiwibSIsIkFycmF5IiwiYSIsInB1c2giLCJuIiwiT2JqZWN0IiwiY3JlYXRlIiwicHJvdG90eXBlIiwidCIsInEiLCJnbG9iYWxUaGlzIiwid2luZG93Iiwic2VsZiIsImciLCJNYXRoIiwiRXJyb3IiLCJwIiwidGhpcyIsInIiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiZCIsImUiLCJzZXRQcm90b3R5cGVPZiIsIkZ1bmN0aW9uIiwiYXBwbHkiLCJ1IiwidyIsIl9fcHJvdG9fXyIsIlR5cGVFcnJvciIsIngiLCJTaGFkb3dSb290IiwiY3JlYXRlRWxlbWVudCIsIkwiLCJ5IiwiSFRNTEVsZW1lbnQiLCJBIiwiY3VzdG9tRWxlbWVudHMiLCJkZWZpbmUiLCJCIiwiZ2V0IiwiQyIsIkQiLCJXZWFrTWFwIiwiRSIsIkYiLCJHIiwiQ3VzdG9tRWxlbWVudFJlZ2lzdHJ5IiwibCIsIk1hcCIsIm8iLCJpIiwidG9Mb3dlckNhc2UiLCJqIiwiRE9NRXhjZXB0aW9uIiwiYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrIiwiU2V0Iiwib2JzZXJ2ZWRBdHRyaWJ1dGVzIiwiSCIsImNvbm5lY3RlZENhbGxiYWNrIiwiZGlzY29ubmVjdGVkQ2FsbGJhY2siLCJhZG9wdGVkQ2FsbGJhY2siLCJmb3JtQXNzb2NpYXRlZCIsImZvcm1Bc3NvY2lhdGVkQ2FsbGJhY2siLCJmb3JtRGlzYWJsZWRDYWxsYmFjayIsImZvcm1SZXNldENhbGxiYWNrIiwiZm9ybVN0YXRlUmVzdG9yZUNhbGxiYWNrIiwic2V0IiwiSSIsInMiLCJkZWxldGUiLCJKIiwicmVzb2x2ZSIsInVwZ3JhZGUiLCJLIiwiYXJndW1lbnRzIiwicG9wIiwid2hlbkRlZmluZWQiLCJQcm9taXNlIiwicHJvbWlzZSIsImNvbnN0cnVjdG9yIiwiZ2V0Um9vdE5vZGUiLCJkb2N1bWVudCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsInNpemUiLCJzZXRBdHRyaWJ1dGUiLCJmIiwiaGFzIiwieiIsImdldEF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsInRvZ2dsZUF0dHJpYnV0ZSIsIk0iLCJnZXRQcm90b3R5cGVPZiIsImZvckVhY2giLCJoYXNBdHRyaWJ1dGUiLCJpc0Nvbm5lY3RlZCIsIk4iLCJFbGVtZW50IiwiYXR0YWNoU2hhZG93IiwiTyIsIlAiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJhc3NpZ24iLCJ3cml0YWJsZSIsIkVsZW1lbnRJbnRlcm5hbHMiLCJzZXRGb3JtVmFsdWUiLCJRIiwiUiIsImF0dGFjaEludGVybmFscyIsImNvbmNhdCIsIlJhZGlvTm9kZUxpc3QiLCJTIiwiVCIsIlUiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiViIsImZpbmQiLCJjaGVja2VkIiwiSFRNTEZvcm1Db250cm9sc0NvbGxlY3Rpb24iLCJuYW1lZEl0ZW0iLCJXIiwiSFRNTEZvcm1FbGVtZW50IiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJqb2luIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZ2V0VGFyZ2V0IiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJ3ZWJwYWNrRW1wdHlBc3luY0NvbnRleHQiLCJyZXEiLCJ0aGVuIiwiY29kZSIsImtleXMiLCJTaGFkeUNTUyIsIm5hdGl2ZVNoYWRvdyIsIkRvY3VtZW50IiwiQ1NTU3R5bGVTaGVldCIsIl8kY3NzUmVzdWx0JCIsInJlcGxhY2VTeW5jIiwicmVkdWNlIiwiYWRvcHRlZFN0eWxlU2hlZXRzIiwibGl0Tm9uY2UiLCJ0ZXh0Q29udGVudCIsImNzc1J1bGVzIiwidHJ1c3RlZFR5cGVzIiwiY3JlYXRlUG9saWN5IiwiY3JlYXRlSFRNTCIsInJhbmRvbSIsInNsaWNlIiwiY3JlYXRlQ29tbWVudCIsImlzQXJyYXkiLCJ2IiwiXyIsIlJlZ0V4cCIsIiQiLCJfJGxpdFR5cGUkIiwic3RyaW5ncyIsInZhbHVlcyIsImZvciIsImNyZWF0ZVRyZWVXYWxrZXIiLCJoYXNPd25Qcm9wZXJ0eSIsImxhc3RJbmRleCIsImV4ZWMiLCJ0ZXN0Iiwic3RhcnRzV2l0aCIsInBhcnRzIiwiZWwiLCJjdXJyZW50Tm9kZSIsImFwcGVuZCIsImNoaWxkTm9kZXMiLCJuZXh0Tm9kZSIsIm5vZGVUeXBlIiwiaGFzQXR0cmlidXRlcyIsImdldEF0dHJpYnV0ZU5hbWVzIiwiZW5kc1dpdGgiLCJzcGxpdCIsInR5cGUiLCJuYW1lIiwiY3RvciIsInRhZ05hbWUiLCJlbXB0eVNjcmlwdCIsImluZGV4T2YiLCJzdGF0aWMiLCJpbm5lckhUTUwiLCJfJENvIiwiXyRDbCIsIl8kbGl0RGlyZWN0aXZlJCIsIl8kQU8iLCJfJEFUIiwiXyRBUyIsIl8kQVYiLCJfJEFOIiwiXyRBRCIsIl8kQU0iLCJfJEFVIiwiY3JlYXRpb25TY29wZSIsImltcG9ydE5vZGUiLCJuZXh0U2libGluZyIsIloiLCJfJEFJIiwiXyRBSCIsIl8kQUEiLCJfJEFCIiwiXyRDcCIsInN0YXJ0Tm9kZSIsImVuZE5vZGUiLCJfJEFSIiwiaW5zZXJ0QmVmb3JlIiwiXyRBQyIsIl8kQVAiLCJzZXRDb25uZWN0ZWQiLCJmaWxsIiwiU3RyaW5nIiwic3VwZXIiLCJjYXB0dXJlIiwib25jZSIsInBhc3NpdmUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZUV2ZW50IiwiaG9zdCIsImxpdEh0bWxQb2x5ZmlsbFN1cHBvcnQiLCJsaXRIdG1sVmVyc2lvbnMiLCJyZW5kZXJCZWZvcmUiLCJfJGxpdFBhcnQkIiwicmVhY3RpdmVFbGVtZW50UG9seWZpbGxTdXBwb3J0IiwidG9BdHRyaWJ1dGUiLCJCb29sZWFuIiwiZnJvbUF0dHJpYnV0ZSIsIk51bWJlciIsInBhcnNlIiwiYXR0cmlidXRlIiwiY29udmVydGVyIiwicmVmbGVjdCIsImhhc0NoYW5nZWQiLCJfJEVpIiwiaXNVcGRhdGVQZW5kaW5nIiwiaGFzVXBkYXRlZCIsIl8kRWwiLCJmaW5hbGl6ZSIsImVsZW1lbnRQcm9wZXJ0aWVzIiwiXyRFcCIsIl8kRXYiLCJzdGF0ZSIsIm5vQWNjZXNzb3IiLCJnZXRQcm9wZXJ0eURlc2NyaXB0b3IiLCJyZXF1ZXN0VXBkYXRlIiwicHJvcGVydGllcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJjcmVhdGVQcm9wZXJ0eSIsImVsZW1lbnRTdHlsZXMiLCJmaW5hbGl6ZVN0eWxlcyIsInN0eWxlcyIsImZsYXQiLCJyZXZlcnNlIiwidW5zaGlmdCIsIl8kRV8iLCJlbmFibGVVcGRhdGluZyIsIl8kQUwiLCJfJEVnIiwiYWRkQ29udHJvbGxlciIsIl8kRVMiLCJyZW5kZXJSb290IiwiaG9zdENvbm5lY3RlZCIsInJlbW92ZUNvbnRyb2xsZXIiLCJjcmVhdGVSZW5kZXJSb290Iiwic2hhZG93Um9vdCIsInNoYWRvd1Jvb3RPcHRpb25zIiwiaG9zdERpc2Nvbm5lY3RlZCIsIl8kQUsiLCJfJEVPIiwiZ2V0UHJvcGVydHlPcHRpb25zIiwiXyRFQyIsIl8kRWoiLCJhc3luYyIsInJlamVjdCIsInNjaGVkdWxlVXBkYXRlIiwicGVyZm9ybVVwZGF0ZSIsInNob3VsZFVwZGF0ZSIsIndpbGxVcGRhdGUiLCJob3N0VXBkYXRlIiwiXyRFayIsIl8kQUUiLCJob3N0VXBkYXRlZCIsImZpcnN0VXBkYXRlZCIsInVwZGF0ZWQiLCJ1cGRhdGVDb21wbGV0ZSIsImdldFVwZGF0ZUNvbXBsZXRlIiwibW9kZSIsIlJlYWN0aXZlRWxlbWVudCIsInJlYWN0aXZlRWxlbWVudFZlcnNpb25zIiwicmVuZGVyT3B0aW9ucyIsIl8kRG8iLCJyZW5kZXIiLCJmaW5hbGl6ZWQiLCJfJGxpdEVsZW1lbnQkIiwibGl0RWxlbWVudEh5ZHJhdGVTdXBwb3J0IiwiTGl0RWxlbWVudCIsImxpdEVsZW1lbnRQb2x5ZmlsbFN1cHBvcnQiLCJsaXRFbGVtZW50VmVyc2lvbnMiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImRlZmluaXRpb24iLCJrZXkiLCJwcm9wIiwidG9TdHJpbmdUYWciLCJuYyIsIkRlZmVycmVkIiwic2V0dGxlZCIsIl9yZXNvbHZlIiwiX3JlamVjdCIsImVycm9yIiwiam9pblN0cmluZ3NBbmRWYWx1ZXMiLCJ2YWx1ZU9yZGVyIiwiaGwiLCJIQVNIX0RFTElNSVRFUiIsIkhUTUxfUFJFRklYIiwiU1RSSU5HX1BSRUZJWCIsImdlbmVyYXRlTXNnSWQiLCJpc0h0bWxUYWdnZWQiLCJzdHIiLCJ0MCIsInYwIiwidDEiLCJ2MSIsInQyIiwidjIiLCJ0MyIsInYzIiwiY2hhckNvZGVBdCIsImZudjFhNjQiLCJleHByZXNzaW9uT3JkZXJzIiwiaGFzaENhY2hlIiwicnVudGltZU1zZyIsInRlbXBsYXRlcyIsInRlbXBsYXRlIiwiX2EiLCJnZW5lcmF0ZUlkIiwibG9jYWxpemVkIiwib3JkZXIiLCJpc1N0clRhZ2dlZCIsInZhbCIsImRpc3BhdGNoU3RhdHVzRXZlbnQiLCJkZXRhaWwiLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJsb2FkaW5nTG9jYWxlIiwic291cmNlTG9jYWxlIiwidmFsaWRMb2NhbGVzIiwibG9hZExvY2FsZSIsImFjdGl2ZUxvY2FsZSIsImxvYWRpbmciLCJyZXF1ZXN0SWQiLCJnZXRMb2NhbGUiLCJzZXRMb2NhbGUiLCJuZXdMb2NhbGUiLCJ0aGlzUmVxdWVzdElkIiwic3RhdHVzIiwibW9kIiwicmVhZHlMb2NhbGUiLCJlcnIiLCJlcnJvckxvY2FsZSIsImVycm9yTWVzc2FnZSIsIm1zZyIsImluc3RhbGxlZCIsImNvbmZpZyIsImltcGwiLCJ0YXJnZXRMb2NhbGVzIiwiY29uZmlndXJlTG9jYWxpemF0aW9uIiwibG9jYWxlIiwiYXBwbGllZENsYXNzTWl4aW5zIiwiZGVkdXBlTWl4aW4iLCJtaXhpbiIsInN1cGVyQ2xhc3MiLCJrbGFzcyIsIndhc01peGluUHJldmlvdXNseUFwcGxpZWQiLCJtaXhlZENsYXNzIiwic3VwcG9ydHNTY29wZWRSZWdpc3RyeSIsIlNjb3BlZEVsZW1lbnRzTWl4aW4iLCJzdXBlcmNsYXNzIiwic2NvcGVkRWxlbWVudHMiLCJfX3NoYWRvd1Jvb3RPcHRpb25zIiwiX19lbGVtZW50U3R5bGVzIiwiX2FyZ3MiLCJyZWdpc3RyeSIsIl9fcmVnaXN0cnkiLCJlbnRyaWVzIiwiZGVmaW5lU2NvcGVkRWxlbWVudCIsImNyZWF0ZWRSb290IiwiY3JlYXRlU2NvcGVkRWxlbWVudCIsInJlZ2lzdGVyZWRDbGFzcyIsImNvbnNvbGUiLCJnZXRTY29wZWRUYWdOYW1lIiwia2luZCIsImVsZW1lbnRzIiwiZmluaXNoZXIiLCJkZXNjcmlwdG9yIiwicGxhY2VtZW50Iiwib3JpZ2luYWxLZXkiLCJpbml0aWFsaXplciIsIkhUTUxTbG90RWxlbWVudCIsImFzc2lnbmVkRWxlbWVudHMiLCJhc3NpZ25lZE5vZGVzIiwiZmlsdGVyIiwiTm9kZSIsIkVMRU1FTlRfTk9ERSIsInNsb3QiLCJmbGF0dGVuIiwic2VsZWN0b3IiLCJtYXRjaGVzIiwiZXh0ZW5kU3RhdGljcyIsIl9fZXh0ZW5kcyIsIl9fIiwiX192YWx1ZXMiLCJfX3JlYWQiLCJhciIsIl9fc3ByZWFkQXJyYXkiLCJ0byIsImZyb20iLCJwYWNrIiwiU3VwcHJlc3NlZEVycm9yIiwiaXNGdW5jdGlvbiIsImNyZWF0ZUVycm9yQ2xhc3MiLCJjcmVhdGVJbXBsIiwiY3RvckZ1bmMiLCJpbnN0YW5jZSIsInN0YWNrIiwiVW5zdWJzY3JpcHRpb25FcnJvciIsIl9zdXBlciIsImVycm9ycyIsIm1lc3NhZ2UiLCJhcnJSZW1vdmUiLCJhcnIiLCJTdWJzY3JpcHRpb24iLCJpbml0aWFsVGVhcmRvd24iLCJjbG9zZWQiLCJfcGFyZW50YWdlIiwiX2ZpbmFsaXplcnMiLCJlbXB0eSIsInVuc3Vic2NyaWJlIiwiZV8xIiwiZV8yIiwiX2IiLCJfcGFyZW50YWdlXzEiLCJfcGFyZW50YWdlXzFfMSIsImVfMV8xIiwicmV0dXJuIiwiaW5pdGlhbEZpbmFsaXplciIsIl9maW5hbGl6ZXJzXzEiLCJfZmluYWxpemVyc18xXzEiLCJmaW5hbGl6ZXIiLCJleGVjRmluYWxpemVyIiwiZV8yXzEiLCJ0ZWFyZG93biIsIl9oYXNQYXJlbnQiLCJfYWRkUGFyZW50IiwicGFyZW50IiwiaW5jbHVkZXMiLCJfcmVtb3ZlUGFyZW50IiwiRU1QVFkiLCJFTVBUWV9TVUJTQ1JJUFRJT04iLCJpc1N1YnNjcmlwdGlvbiIsIm9uVW5oYW5kbGVkRXJyb3IiLCJvblN0b3BwZWROb3RpZmljYXRpb24iLCJ1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nIiwidXNlRGVwcmVjYXRlZE5leHRDb250ZXh0IiwidGltZW91dFByb3ZpZGVyIiwic2V0VGltZW91dCIsImhhbmRsZXIiLCJ0aW1lb3V0IiwiYXJncyIsImRlbGVnYXRlIiwiY2xlYXJUaW1lb3V0IiwiaGFuZGxlIiwibm9vcCIsIkNPTVBMRVRFX05PVElGSUNBVElPTiIsImNyZWF0ZU5vdGlmaWNhdGlvbiIsImNvbnRleHQiLCJlcnJvckNvbnRleHQiLCJjYiIsImlzUm9vdCIsImVycm9yVGhyb3duIiwiU3Vic2NyaWJlciIsImRlc3RpbmF0aW9uIiwiX3RoaXMiLCJpc1N0b3BwZWQiLCJFTVBUWV9PQlNFUlZFUiIsImNvbXBsZXRlIiwiU2FmZVN1YnNjcmliZXIiLCJoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uIiwibmV4dE5vdGlmaWNhdGlvbiIsIl9uZXh0IiwiX2Vycm9yIiwiX2NvbXBsZXRlIiwiX2JpbmQiLCJiaW5kIiwiZm4iLCJ0aGlzQXJnIiwiQ29uc3VtZXJPYnNlcnZlciIsInBhcnRpYWxPYnNlcnZlciIsImhhbmRsZVVuaGFuZGxlZEVycm9yIiwib2JzZXJ2ZXJPck5leHQiLCJjb250ZXh0XzEiLCJyZXBvcnRVbmhhbmRsZWRFcnJvciIsIm5vdGlmaWNhdGlvbiIsInN1YnNjcmliZXIiLCJvYnNlcnZhYmxlIiwiaWRlbnRpdHkiLCJwaXBlRnJvbUFycmF5IiwiZm5zIiwiaW5wdXQiLCJwcmV2IiwiT2JzZXJ2YWJsZSIsInN1YnNjcmliZSIsIl9zdWJzY3JpYmUiLCJsaWZ0Iiwib3BlcmF0b3IiLCJzb3VyY2UiLCJpc09ic2VydmVyIiwiX3RyeVN1YnNjcmliZSIsInNpbmsiLCJwcm9taXNlQ3RvciIsImdldFByb21pc2VDdG9yIiwicGlwZSIsIm9wZXJhdGlvbnMiLCJ0b1Byb21pc2UiLCJodHRwTWV0aG9kIiwiT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IiLCJTdWJqZWN0IiwiY3VycmVudE9ic2VydmVycyIsIm9ic2VydmVycyIsImhhc0Vycm9yIiwidGhyb3duRXJyb3IiLCJzdWJqZWN0IiwiQW5vbnltb3VzU3ViamVjdCIsIl90aHJvd0lmQ2xvc2VkIiwiX2MiLCJzaGlmdCIsIl9jaGVja0ZpbmFsaXplZFN0YXR1c2VzIiwiX2lubmVyU3Vic2NyaWJlIiwiYXNPYnNlcnZhYmxlIiwiQ29udGV4dFNlcnZpY2UiLCJwcm9wZXJ0eUNoYW5nZVN1YmplY3QiLCJfY29udGV4dFNlcnZpY2UiLCJEYXRhU2VydmljZSIsImh0dHBHZXQiLCJ1cmwiLCJyZXNwb25zZSIsImZldGNoIiwiYmFzZVVybCIsIm1ldGhvZCIsIm9rIiwiZXgiLCJwcm90b2NvbCIsInBhdGhuYW1lIiwibG9jYXRpb24iLCJ0ZW5hbnRJZCIsIm1hdGNoIiwiYXQiLCJnZXRJbnN0YW5jZSIsIl9kYXRhU2VydmljZSIsInJlc2V0SW5zdGFuY2UiLCJFdmVudFNlcnZpY2UiLCJ0cmlnZ2VySW5pdGlhbGl6ZWQiLCJpbml0aWFsaXplZFN1YmplY3QiLCJ0cmlnZ2VyT3BlblByb2Nlc3MiLCJ0YWJsZVJvdyIsInJlY29yZCIsIm9wZW5Qcm9jZXNzU3Vic2NyaXB0aW9uIiwidHJpZ2dlckNvbXBsZXRlZCIsImNvbXBsZXRlZFN1YmplY3QiLCJfZXZlbnRTZXJ2aWNlIiwiZmlyZUV4dGVybmFsIiwiZXZlbnRUeXBlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjb21wb3NlZCIsImV2ZW50IiwiUHJvY2Vzc2VzQXBpU2VydmljZSIsIl9iYXNlVXJsIiwiZ2V0UHJvY2Vzc0xpc3QiLCJsaXN0UHJvY2Vzc1NlYXJjaFBhcmFtcyIsInVybFNlYXJjaFBhcmFtc1N0cmluZyIsIlVSTFNlYXJjaFBhcmFtcyIsImpzb24iLCJfcHJvY2Vzc2VzQXBpU2VydmljZSIsImxvY2FscyIsImNvbW1vblN0eWxlcyIsImNvbW1vbkVtIiwiY29uc29sZUxvZ2dlciIsImxvZyIsIm91dHB1dCIsIndhcm4iLCJMb2dnZXIiLCJjb25jcmV0ZUxvZ2dlciIsImluaXQiLCJwcmVmaXgiLCJsb2dnZXIiLCJkZWJ1ZyIsIl9sZW4iLCJfa2V5IiwiZm9yd2FyZCIsIl9sZW4yIiwiX2tleTIiLCJfbGVuMyIsIl9rZXkzIiwiZGVwcmVjYXRlIiwiX2xlbjQiLCJfa2V5NCIsImx2bCIsImRlYnVnT25seSIsIm1vZHVsZU5hbWUiLCJjbG9uZSIsImJhc2VMb2dnZXIiLCJFdmVudEVtaXR0ZXIiLCJvbiIsImV2ZW50cyIsImxpc3RlbmVyIiwib2ZmIiwiZW1pdCIsIm9ic2VydmVyIiwiZGVmZXIiLCJyZXMiLCJyZWoiLCJtYWtlU3RyaW5nIiwib2JqZWN0IiwiZ2V0TGFzdE9mUGF0aCIsInBhdGgiLCJFbXB0eSIsImNsZWFuS2V5IiwicmVwbGFjZSIsImNhbk5vdFRyYXZlcnNlRGVlcGVyIiwic2V0UGF0aCIsIm5ld1ZhbHVlIiwiZ2V0UGF0aCIsImRlZXBFeHRlbmQiLCJvdmVyd3JpdGUiLCJyZWdleEVzY2FwZSIsIl9lbnRpdHlNYXAiLCJjaGFycyIsImRlZXBGaW5kIiwia2V5U2VwYXJhdG9yIiwicGF0aHMiLCJjdXJyZW50IiwibWl4Iiwiam9pbmVkUGF0aCIsImdldENsZWFuZWRDb2RlIiwiUmVzb3VyY2VTdG9yZSIsIm5zIiwiZGVmYXVsdE5TIiwiaWdub3JlSlNPTlN0cnVjdHVyZSIsImFkZE5hbWVzcGFjZXMiLCJyZW1vdmVOYW1lc3BhY2VzIiwiZ2V0UmVzb3VyY2UiLCJsbmciLCJhZGRSZXNvdXJjZSIsInNpbGVudCIsImFkZFJlc291cmNlcyIsInJlc291cmNlcyIsImFkZFJlc291cmNlQnVuZGxlIiwiZGVlcCIsInJlbW92ZVJlc291cmNlQnVuZGxlIiwiaGFzUmVzb3VyY2VCdW5kbGUiLCJnZXRSZXNvdXJjZUJ1bmRsZSIsImNvbXBhdGliaWxpdHlBUEkiLCJnZXREYXRhQnlMYW5ndWFnZSIsImhhc0xhbmd1YWdlU29tZVRyYW5zbGF0aW9ucyIsInRvSlNPTiIsInBvc3RQcm9jZXNzb3IiLCJwcm9jZXNzb3JzIiwiYWRkUG9zdFByb2Nlc3NvciIsInRyYW5zbGF0b3IiLCJwcm9jZXNzb3IiLCJjaGVja2VkTG9hZGVkRm9yIiwiVHJhbnNsYXRvciIsInNlcnZpY2VzIiwiY29weSIsImNoYW5nZUxhbmd1YWdlIiwibGFuZ3VhZ2UiLCJleGlzdHMiLCJpbnRlcnBvbGF0aW9uIiwicmVzb2x2ZWQiLCJleHRyYWN0RnJvbUtleSIsIm5zU2VwYXJhdG9yIiwibmFtZXNwYWNlcyIsIndvdWxkQ2hlY2tGb3JOc0luS2V5Iiwic2VlbXNOYXR1cmFsTGFuZ3VhZ2UiLCJ1c2VyRGVmaW5lZEtleVNlcGFyYXRvciIsInVzZXJEZWZpbmVkTnNTZXBhcmF0b3IiLCJwb3NzaWJsZUNoYXJzIiwibWF0Y2hlZCIsImtpIiwic3Vic3RyaW5nIiwibG9va3NMaWtlT2JqZWN0UGF0aCIsImludGVycG9sYXRvciIsIm5lc3RpbmdSZWdleHAiLCJ0cmFuc2xhdGUiLCJsYXN0S2V5Iiwib3ZlcmxvYWRUcmFuc2xhdGlvbk9wdGlvbkhhbmRsZXIiLCJyZXR1cm5EZXRhaWxzIiwibmFtZXNwYWNlIiwiYXBwZW5kTmFtZXNwYWNlVG9DSU1vZGUiLCJ1c2VkS2V5IiwiZXhhY3RVc2VkS2V5IiwidXNlZExuZyIsInVzZWROUyIsInJlc1VzZWRLZXkiLCJyZXNFeGFjdFVzZWRLZXkiLCJyZXNUeXBlIiwiam9pbkFycmF5cyIsImhhbmRsZUFzT2JqZWN0SW5JMThuRm9ybWF0IiwiaTE4bkZvcm1hdCIsImhhbmRsZUFzT2JqZWN0IiwicmV0dXJuT2JqZWN0cyIsInJldHVybmVkT2JqZWN0SGFuZGxlciIsInJlc1R5cGVJc0FycmF5IiwibmV3S2V5VG9Vc2UiLCJkZWVwS2V5IiwiZXh0ZW5kVHJhbnNsYXRpb24iLCJ1c2VkRGVmYXVsdCIsIm5lZWRzUGx1cmFsSGFuZGxpbmciLCJoYXNEZWZhdWx0VmFsdWUiLCJkZWZhdWx0VmFsdWVTdWZmaXgiLCJwbHVyYWxSZXNvbHZlciIsImdldFN1ZmZpeCIsImRlZmF1bHRWYWx1ZVN1ZmZpeE9yZGluYWxGYWxsYmFjayIsIm9yZGluYWwiLCJkZWZhdWx0VmFsdWUiLCJpc1ZhbGlkTG9va3VwIiwicmVzRm9yTWlzc2luZyIsIm1pc3NpbmdLZXlOb1ZhbHVlRmFsbGJhY2tUb0tleSIsInVwZGF0ZU1pc3NpbmciLCJmayIsImxuZ3MiLCJmYWxsYmFja0xuZ3MiLCJsYW5ndWFnZVV0aWxzIiwiZ2V0RmFsbGJhY2tDb2RlcyIsImZhbGxiYWNrTG5nIiwic2F2ZU1pc3NpbmdUbyIsInRvUmVzb2x2ZUhpZXJhcmNoeSIsInNlbmQiLCJzcGVjaWZpY0RlZmF1bHRWYWx1ZSIsImRlZmF1bHRGb3JNaXNzaW5nIiwibWlzc2luZ0tleUhhbmRsZXIiLCJiYWNrZW5kQ29ubmVjdG9yIiwic2F2ZU1pc3NpbmciLCJzYXZlTWlzc2luZ1BsdXJhbHMiLCJnZXRTdWZmaXhlcyIsInN1ZmZpeCIsImFwcGVuZE5hbWVzcGFjZVRvTWlzc2luZ0tleSIsInBhcnNlTWlzc2luZ0tleUhhbmRsZXIiLCJkZWZhdWx0VmFyaWFibGVzIiwic2tpcEludGVycG9sYXRpb24iLCJza2lwT25WYXJpYWJsZXMiLCJuZXN0QmVmIiwibmIiLCJpbnRlcnBvbGF0ZSIsIm5hIiwibmVzdCIsInJlc2V0IiwicG9zdFByb2Nlc3MiLCJwb3N0UHJvY2Vzc29yTmFtZXMiLCJhcHBseVBvc3RQcm9jZXNzb3IiLCJwb3N0UHJvY2Vzc1Bhc3NSZXNvbHZlZCIsImkxOG5SZXNvbHZlZCIsImZvdW5kIiwiZXh0cmFjdGVkIiwiZmFsbGJhY2tOUyIsIm5lZWRzWmVyb1N1ZmZpeExvb2t1cCIsInNob3VsZFVzZUludGxBcGkiLCJuZWVkc0NvbnRleHRIYW5kbGluZyIsImNvZGVzIiwidXRpbHMiLCJoYXNMb2FkZWROYW1lc3BhY2UiLCJmaW5hbEtleXMiLCJhZGRMb29rdXBLZXlzIiwicGx1cmFsU3VmZml4IiwiemVyb1N1ZmZpeCIsInBsdXJhbFNlcGFyYXRvciIsIm9yZGluYWxQcmVmaXgiLCJjb250ZXh0S2V5IiwiY29udGV4dFNlcGFyYXRvciIsInBvc3NpYmxlS2V5IiwicmV0dXJuTnVsbCIsInJldHVybkVtcHR5U3RyaW5nIiwicmVzb3VyY2VTdG9yZSIsIm9wdGlvbiIsImNhcGl0YWxpemUiLCJzdHJpbmciLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsIkxhbmd1YWdlVXRpbCIsInN1cHBvcnRlZExuZ3MiLCJnZXRTY3JpcHRQYXJ0RnJvbUNvZGUiLCJmb3JtYXRMYW5ndWFnZUNvZGUiLCJnZXRMYW5ndWFnZVBhcnRGcm9tQ29kZSIsInNwZWNpYWxDYXNlcyIsImxvd2VyQ2FzZUxuZyIsInBhcnQiLCJjbGVhbkNvZGUiLCJpc1N1cHBvcnRlZENvZGUiLCJsb2FkIiwibm9uRXhwbGljaXRTdXBwb3J0ZWRMbmdzIiwiZ2V0QmVzdE1hdGNoRnJvbUNvZGVzIiwiY2xlYW5lZExuZyIsImxuZ09ubHkiLCJzdXBwb3J0ZWRMbmciLCJmYWxsYmFja3MiLCJkZWZhdWx0IiwiZmFsbGJhY2tDb2RlIiwiZmFsbGJhY2tDb2RlcyIsImFkZENvZGUiLCJmYyIsInNldHMiLCJuciIsIl9ydWxlc1BsdXJhbHNUeXBlcyIsIm5vbkludGxWZXJzaW9ucyIsImludGxWZXJzaW9ucyIsInN1ZmZpeGVzT3JkZXIiLCJ6ZXJvIiwib25lIiwidHdvIiwiZmV3IiwibWFueSIsIm90aGVyIiwiUGx1cmFsUmVzb2x2ZXIiLCJjb21wYXRpYmlsaXR5SlNPTiIsIkludGwiLCJQbHVyYWxSdWxlcyIsInJ1bGVzIiwibnVtYmVycyIsInBsdXJhbHMiLCJjcmVhdGVSdWxlcyIsImFkZFJ1bGUiLCJnZXRSdWxlIiwibmVlZHNQbHVyYWwiLCJydWxlIiwicmVzb2x2ZWRPcHRpb25zIiwicGx1cmFsQ2F0ZWdvcmllcyIsImdldFBsdXJhbEZvcm1zT2ZLZXkiLCJzb3J0IiwicGx1cmFsQ2F0ZWdvcnkxIiwicGx1cmFsQ2F0ZWdvcnkyIiwicGx1cmFsQ2F0ZWdvcnkiLCJwcmVwZW5kIiwibnVtYmVyIiwic2VsZWN0IiwiZ2V0U3VmZml4UmV0cm9Db21wYXRpYmxlIiwiaWR4Iiwibm9BYnMiLCJhYnMiLCJzaW1wbGlmeVBsdXJhbFN1ZmZpeCIsInJldHVyblN1ZmZpeCIsImRlZXBGaW5kV2l0aERlZmF1bHRzIiwiZGVmYXVsdERhdGEiLCJnZXRQYXRoV2l0aERlZmF1bHRzIiwiSW50ZXJwb2xhdG9yIiwiZm9ybWF0IiwiZXNjYXBlVmFsdWUiLCJpT3B0cyIsImVzY2FwZSIsInVzZVJhd1ZhbHVlVG9Fc2NhcGUiLCJwcmVmaXhFc2NhcGVkIiwic3VmZml4RXNjYXBlZCIsImZvcm1hdFNlcGFyYXRvciIsInVuZXNjYXBlUHJlZml4IiwidW5lc2NhcGVTdWZmaXgiLCJuZXN0aW5nUHJlZml4IiwibmVzdGluZ1ByZWZpeEVzY2FwZWQiLCJuZXN0aW5nU3VmZml4IiwibmVzdGluZ1N1ZmZpeEVzY2FwZWQiLCJuZXN0aW5nT3B0aW9uc1NlcGFyYXRvciIsIm1heFJlcGxhY2VzIiwiYWx3YXlzRm9ybWF0IiwicmVzZXRSZWdFeHAiLCJyZWdleHBTdHIiLCJyZWdleHAiLCJyZWdleHBVbmVzY2FwZVN0ciIsInJlZ2V4cFVuZXNjYXBlIiwibmVzdGluZ1JlZ2V4cFN0ciIsInJlcGxhY2VzIiwicmVnZXhTYWZlIiwiaGFuZGxlRm9ybWF0IiwiaW50ZXJwb2xhdGlvbmtleSIsInRyaW0iLCJtaXNzaW5nSW50ZXJwb2xhdGlvbkhhbmRsZXIiLCJyZWdleCIsInNhZmVWYWx1ZSIsInRvZG8iLCJtYXRjaGVkVmFyIiwidGVtcCIsImNsb25lZE9wdGlvbnMiLCJoYW5kbGVIYXNPcHRpb25zIiwiaW5oZXJpdGVkT3B0aW9ucyIsInNlcCIsIm9wdGlvbnNTdHJpbmciLCJtYXRjaGVkU2luZ2xlUXVvdGVzIiwibWF0Y2hlZERvdWJsZVF1b3RlcyIsImZvcm1hdHRlcnMiLCJkb1JlZHVjZSIsImVsZW0iLCJjcmVhdGVDYWNoZWRGb3JtYXR0ZXIiLCJjYWNoZSIsImZvcm1hdHRlciIsIkZvcm1hdHRlciIsImZvcm1hdHMiLCJvcHQiLCJOdW1iZXJGb3JtYXQiLCJjdXJyZW5jeSIsImRhdGV0aW1lIiwiRGF0ZVRpbWVGb3JtYXQiLCJyZWxhdGl2ZXRpbWUiLCJSZWxhdGl2ZVRpbWVGb3JtYXQiLCJyYW5nZSIsIkxpc3RGb3JtYXQiLCJhZGRDYWNoZWQiLCJtZW0iLCJmb3JtYXROYW1lIiwiZm9ybWF0T3B0aW9ucyIsImZvcm1hdFN0ciIsIm9wdFN0ciIsInJlc3QiLCJpc05hTiIsInBhcnNlSW50IiwicGFyc2VGb3JtYXRTdHIiLCJmb3JtYXR0ZWQiLCJ2YWxPcHRpb25zIiwiZm9ybWF0UGFyYW1zIiwiQ29ubmVjdG9yIiwiYmFja2VuZCIsInN0b3JlIiwid2FpdGluZ1JlYWRzIiwibWF4UGFyYWxsZWxSZWFkcyIsInJlYWRpbmdDYWxscyIsIm1heFJldHJpZXMiLCJyZXRyeVRpbWVvdXQiLCJxdWV1ZSIsInF1ZXVlTG9hZCIsImxhbmd1YWdlcyIsImNhbGxiYWNrIiwidG9Mb2FkIiwicGVuZGluZyIsInRvTG9hZExhbmd1YWdlcyIsInRvTG9hZE5hbWVzcGFjZXMiLCJoYXNBbGxOYW1lc3BhY2VzIiwicmVsb2FkIiwicGVuZGluZ0NvdW50IiwibG9hZGVkIiwicHVzaFBhdGgiLCJyZW1vdmVQZW5kaW5nIiwibG9hZGVkS2V5cyIsInJlYWQiLCJmY05hbWUiLCJ0cmllZCIsIndhaXQiLCJyZXNvbHZlciIsImNhdGNoIiwicHJlcGFyZUxvYWRpbmciLCJsb2FkT25lIiwiZmFsbGJhY2tWYWx1ZSIsImlzVXBkYXRlIiwiY2xiIiwib3B0cyIsImluaXRJbW1lZGlhdGUiLCJwcmVsb2FkIiwicGFydGlhbEJ1bmRsZWRMYW5ndWFnZXMiLCJyZXQiLCJ0RGVzY3JpcHRpb24iLCJ0cmFuc2Zvcm1PcHRpb25zIiwiSTE4biIsImluc3QiLCJleHRlcm5hbCIsImlzSW5pdGlhbGl6ZWQiLCJpc0Nsb25lIiwiZGVmT3B0cyIsImNyZWF0ZUNsYXNzT25EZW1hbmQiLCJDbGFzc09yT2JqZWN0IiwibHUiLCJsYW5ndWFnZURldGVjdG9yIiwiZGV0ZWN0aW9uIiwiZGVmZXJyZWQiLCJmaW5pc2giLCJpbml0aWFsaXplZFN0b3JlT25jZSIsImxvYWRSZXNvdXJjZXMiLCJ1c2VkQ2FsbGJhY2siLCJyZXNvbHZlZExhbmd1YWdlIiwic2V0UmVzb2x2ZWRMYW5ndWFnZSIsInJlbG9hZFJlc291cmNlcyIsInVzZSIsImxpIiwibG5nSW5MbmdzIiwiX3RoaXMyIiwiaXNMYW5ndWFnZUNoYW5naW5nVG8iLCJzZXRMbmdQcm9wcyIsInNldExuZyIsImNhY2hlVXNlckxhbmd1YWdlIiwiZGV0ZWN0IiwiZ2V0Rml4ZWRUIiwia2V5UHJlZml4IiwiX3RoaXMzIiwiZml4ZWRUIiwicmVzdWx0S2V5Iiwic2V0RGVmYXVsdE5hbWVzcGFjZSIsImxhc3RMbmciLCJsb2FkTm90UGVuZGluZyIsImxvYWRTdGF0ZSIsInByZWNoZWNrIiwicHJlUmVzdWx0IiwibG9hZE5hbWVzcGFjZXMiLCJsb2FkTGFuZ3VhZ2VzIiwicHJlbG9hZGVkIiwibmV3TG5ncyIsImRpciIsImNsb25lSW5zdGFuY2UiLCJmb3JrUmVzb3VyY2VTdG9yZSIsIm1lcmdlZE9wdGlvbnMiLCJjcmVhdGVJbnN0YW5jZSIsImkxOG4iLCJlbiIsImJwbW5MaXN0IiwiZnIiLCJUcmFuc2xhdGlvblNlcnZpY2UiLCJfdHJhbnNsYXRpb25TZXJ2aWNlIiwibmF2aWdhdG9yIiwiZ2V0VHJhbnNsYXRpb24iLCJnZXRUcmFuc2xhdGlvbkFuZFJlcGxhY2UiLCJyZXBsYWNlbWVudFZhbHVlcyIsInRyYW5zIiwiUGlIZWFkZXIiLCJfJEN0IiwiXyRDaSIsIl8kQVEiLCJyZWNvbm5lY3RlZCIsImRpc2Nvbm5lY3RlZCIsInNldFZhbHVlIiwiZGlzY29ubmVjdCIsInJlY29ubmVjdCIsImRlcmVmIiwiWSIsInBhdXNlIiwicmVzdW1lIiwiXyRDX3QiLCJfJEN3dCIsIl8kQ3EiLCJfJENLIiwiZXQiLCJkaXJlY3RpdmVOYW1lIiwiZnQiLCJyYXciLCJyZXN1bHRUeXBlIiwiQmVoYXZpb3JTdWJqZWN0IiwiX3ZhbHVlIiwiZ2V0VmFsdWUiLCJzdWJzY3JpcHRpb24iLCJQaVJldHJ5RXJyb3JNb2RhbCIsImNsb3NlRXZlbnQiLCJyZXRyeUxpbWl0IiwicmV0cnlDb3VudCIsImNhblJldHJ5IiwiX29uQ2xvc2UiLCJfb25SZXRyeUNsaWNrIiwiZ2V0RXJyb3JNZXNzYWdlIiwiZXJyb3JDb2RlIiwib3BlbiIsImhlYWRlciIsIlBpTGlzdENvbXBvbmVudCIsIl9zaG93U3RhdHVzT3ZlcmxheSIsIl9zaG93RXJyb3JSZXRyeSIsIl9jYW5SZXRyeSIsIl9yZXRyeUNvdW50IiwiX29uQ2VsbENsaWNrZWQiLCJjb2x1bW4iLCJfb3BlblByb2Nlc3MiLCJfb25Jbml0aWFsaXplZCIsIl9vbkVycm9yUmV0cnlNb2RhbENsb3NlIiwiZGVjaXNpb24iLCJfcHJvY2Vzc0xpc3RSZXN1bHQiLCJmZXRjaERhdGEiLCJfcHJvY2Vzc0FwaVNlcnZpY2UiLCJfaGVhZGVycyIsInByb3BlcnR5IiwidGl0bGUiLCJzb3J0YWJsZSIsInNvcnREaXJlY3Rpb24iLCJfc29ydFByb2Nlc3NlcyIsImR0byIsIkRhdGUiLCJsYXN0TW9kaWZpZWQiLCJnZXRUaW1lIiwiX3RhYmxlVGVtcGxhdGUiLCJyb3dEYXRhIiwidmFyaWFudCIsInNob3dIZWFkZXJzIiwiX2Vycm9yTWVzc2FnZSIsIl9pbml0aWFsaXplZFN1YnNjcmlwdGlvbiIsIl9vcGVuUHJvY2Vzc1N1YnNjcmlwdGlvbiIsIl9lcnJvclJldHJ5TW9kYWwiLCJkZWNvcmF0b3JzIiwiZGVzYyIsImRlY29yYXRlIiwiaXQiLCJudCIsImNsYXNzTGlzdCIsImRpcmVjdGl2ZXMiLCJpc0RpcmVjdGl2ZSIsImlzQ0VQb2x5ZmlsbCIsInBvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2siLCJub0NoYW5nZSIsIm5vdGhpbmciLCJub2RlTWFya2VyIiwibWFya2VyUmVnZXgiLCJib3VuZEF0dHJpYnV0ZVN1ZmZpeCIsIm5vZGVzVG9SZW1vdmUiLCJ3YWxrZXIiLCJsYXN0UGFydEluZGV4IiwicGFydEluZGV4Iiwibm9kZSIsInN0cmluZ0ZvclBhcnQiLCJsYXN0QXR0cmlidXRlTmFtZVJlZ2V4IiwiYXR0cmlidXRlTG9va3VwTmFtZSIsImF0dHJpYnV0ZVZhbHVlIiwic3RhdGljcyIsImNyZWF0ZU1hcmtlciIsInByZXZpb3VzU2libGluZyIsImlzVGVtcGxhdGVQYXJ0QWN0aXZlIiwiVGVtcGxhdGVJbnN0YW5jZSIsIl9fcGFydHMiLCJjb21taXQiLCJfY2xvbmUiLCJmcmFnbWVudCIsImNsb25lTm9kZSIsIm5vZGVJbmRleCIsIm5vZGVOYW1lIiwiaGFuZGxlVGV4dEV4cHJlc3Npb24iLCJpbnNlcnRBZnRlck5vZGUiLCJoYW5kbGVBdHRyaWJ1dGVFeHByZXNzaW9ucyIsImFkb3B0Tm9kZSIsInBvbGljeSIsImNvbW1lbnRNYXJrZXIiLCJnZXRIVE1MIiwiaHRtbCIsImlzQ29tbWVudEJpbmRpbmciLCJjb21tZW50T3BlbiIsImxhc3RJbmRleE9mIiwiYXR0cmlidXRlTWF0Y2giLCJzdWJzdHIiLCJnZXRUZW1wbGF0ZUVsZW1lbnQiLCJpc1ByaW1pdGl2ZSIsImlzSXRlcmFibGUiLCJBdHRyaWJ1dGVDb21taXR0ZXIiLCJkaXJ0eSIsIl9jcmVhdGVQYXJ0IiwiQXR0cmlidXRlUGFydCIsIl9nZXRWYWx1ZSIsInRleHQiLCJjb21taXR0ZXIiLCJkaXJlY3RpdmUiLCJfX3BlbmRpbmdWYWx1ZSIsImFwcGVuZEludG8iLCJjb250YWluZXIiLCJyZWYiLCJhcHBlbmRJbnRvUGFydCIsIl9faW5zZXJ0IiwiaW5zZXJ0QWZ0ZXJQYXJ0IiwiX19jb21taXRUZXh0IiwiX19jb21taXRUZW1wbGF0ZVJlc3VsdCIsIl9fY29tbWl0Tm9kZSIsIl9fY29tbWl0SXRlcmFibGUiLCJjbGVhciIsInZhbHVlQXNTdHJpbmciLCJ0ZW1wbGF0ZUZhY3RvcnkiLCJpdGVtUGFydHMiLCJpdGVtUGFydCIsInN0YXJ0IiwiZW5kIiwiQm9vbGVhbkF0dHJpYnV0ZVBhcnQiLCJQcm9wZXJ0eUNvbW1pdHRlciIsInNpbmdsZSIsIlByb3BlcnR5UGFydCIsImV2ZW50T3B0aW9uc1N1cHBvcnRlZCIsIl9lIiwiRXZlbnRQYXJ0IiwiZXZlbnROYW1lIiwiZXZlbnRDb250ZXh0IiwiX19ib3VuZEhhbmRsZUV2ZW50IiwibmV3TGlzdGVuZXIiLCJvbGRMaXN0ZW5lciIsInNob3VsZFJlbW92ZUxpc3RlbmVyIiwic2hvdWxkQWRkTGlzdGVuZXIiLCJfX29wdGlvbnMiLCJnZXRPcHRpb25zIiwidGVtcGxhdGVDYWNoZXMiLCJDYWNoZSIsIl9wYXJlbnQiLCJfY2FjaGUiLCJjb3VudGVyIiwicm91bmQiLCJ0YWdSZWdFeHAiLCJpbmNyZW1lbnRUYWdOYW1lIiwibmV3VGFnTmFtZSIsImlzVGFnUmVnaXN0ZXJlZCIsImNyZWF0ZVVuaXF1ZVRhZyIsInRhZyIsImdsb2JhbFRhZ3NDYWNoZSIsImFkZFRvR2xvYmFsVGFnc0NhY2hlIiwiZ2V0RnJvbUdsb2JhbFRhZ3NDYWNoZSIsImRlZmluZUVsZW1lbnQiLCJkZWZpbmVFbGVtZW50QW5kU3RvcmVJbkNhY2hlIiwidGFnc0NhY2hlIiwiY3VycmVudENsYXNzIiwiZXh0ZW5kc0hUTUxFbGVtZW50Iiwic3RvcmVMYXp5RWxlbWVudEluQ2FjaGUiLCJyZWdpc3RlckVsZW1lbnQiLCJyZSIsImdsb2JhbENhY2hlIiwidHJhbnNmb3JtVGVtcGxhdGUiLCJ0ZW1wbGF0ZUNhY2hlIiwidHJhbnNmb3JtZWRTdHJpbmdzIiwiYWNjIiwibWF0Y2hBbGwiLCJibG9jayIsImlzQ2xvc2luZ1RhZyIsImNvbXBhdGlibGVTaGFkeUNTU1ZlcnNpb24iLCJwcmVwYXJlVGVtcGxhdGVEb20iLCJ0YWdzQ2FjaGVzIiwiZ2V0VGFnc0NhY2hlIiwidHJhbnNmb3JtQXJyYXkiLCJpdGVtcyIsInRyYW5zZm9ybSIsInNjb3BlZEVsZW1lbnRzVGVtcGxhdGVGYWN0b3J5Iiwic2NvcGVOYW1lIiwibmV3VGVtcGxhdGUiLCJjYWNoZUtleSIsImdldFRlbXBsYXRlQ2FjaGVLZXkiLCJzdHJpbmdzQXJyYXkiLCJrZXlTdHJpbmciLCJzaGFkeVRlbXBsYXRlRmFjdG9yeSIsImZpcmUiLCJ0b2tlbnMiLCJ1dCIsInJlbW92ZVByb3BlcnR5Iiwic2V0UHJvcGVydHkiLCJpY29uTG9va3VwIiwicmVuZGVySWNvbiIsInR5cGVBc0h0bWwiLCJmaXhlZFNpemUiLCJjbGFzc05hbWUiLCJpY29uUHJvbWlzZSIsImhlaWdodCIsIndpZHRoIiwiZGlzcGxheSIsImFsaWduSXRlbXMiLCJqdXN0aWZ5SXRlbXMiLCJOZUJ1dHRvbiIsImRpc2FibGVkIiwiYXJpYUxhYmVsIiwib25DbGljayIsImJ0biIsImxlZnRJY29uVHlwZSIsInJpZ2h0SWNvblR5cGUiLCJOZUJ1dHRvblNldCIsInNob3dUb3BEaXZpZGVyIiwic2hvd0JvdHRvbURpdmlkZXIiLCJOZUxhYmVsIiwicmVxdWlyZWQiLCJTcGlubmVyVHlwZSIsIlNwaW5uZXJUaGVtZVR5cGUiLCJsZWZ0IiwicmlnaHQiLCJOZVNwaW5uZXIiLCJtZWRpdW0iLCJ0aGVtZSIsInJlZ3VsYXIiLCJzcGlubmVyIiwic21hbGwiLCJsYXJnZSIsImxpZ2h0IiwiZGVmYXVsdFN0YXR1cyIsIndyYXBwZWQiLCJOZU92ZXJsYXkiLCJOZVN0YXR1c092ZXJsYXkiLCJkZWxheSIsIl9zaG93U2V0VGltZW91dCIsIl9pc1Nob3dPdmVyTGF5IiwiY2hhbmdlZFByb3BzIiwiTmVJY29uIiwiTmVJY29uQnV0dG9uIiwiX29uQ2xpY2siLCJpY29uVHlwZSIsIkljb25zIiwiTW9kYWxTaXplIiwiTmVNb2RhbCIsIl9oYW5kbGVDbG9zZSIsImRpYWxvZyIsIkJhZGdlVmFyaWFudHMiLCJCYWRnZUNvbnRhaW5lcnMiLCJOZUJhZGdlIiwibGFiZWwiLCJzaG93TGVmdEljb24iLCJfZ2V0QmFkZ2VDbGFzc2VzIiwiaXNGaWxsZWQiLCJpc091dGxpbmUiLCJpc0RlZmF1bHQiLCJpc0FjdGl2ZSIsImlzU3VjY2VzcyIsImlzRXJyb3IiLCJpc0luZm8iLCJpc1dhcm5pbmciLCJiYWRnZSIsIl9nZXRCYWRnZUljb25UeXBlIiwiX3JlbmRlckJhZGdlTGVmdEljb24iLCJsZWZ0SWNvbk92ZXJyaWRlIiwiY2xhc3NlcyIsIlZhbGlkYXRpb25UeXBlIiwiVmFsaWRhdGlvbkJhc2VDb21wb25lbnQiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsInZhbGlkYXRpb25TdGF0ZSIsImlzSW52YWxpZCIsIndhcm5pbmciLCJyZW5kZXJXaXRoVmFsaWRhdGlvbiIsImNvbXBvbmVudENvbnRlbnQiLCJpY29uIiwibm9uZSIsInZhbGlkYXRpb25MYXlvdXRTdHlsZXMiLCJ2YWxpZGF0aW9uU3R5bGVzIiwiTmVBY2NvcmRpb24iLCJBbGVydFR5cGUiLCJOZUJhbm5lciIsInZhcmlhbnRUeXBlIiwiY2xvc2FibGUiLCJnZXRUeXBlSWNvbiIsImRhbmdlciIsImJhbm5lciIsIk5lQ2hlY2tib3giLCJzdWJUZXh0IiwidGFiSW5kZXgiLCJzdHlsZXMkMSIsIk5lQ29uZmlnUGFuZWxIZWFkZXIiLCJ0aXRsZVRleHQiLCJzdWJ0aXRsZVRleHQiLCJQYW5lbFNpemUiLCJOZUNvbmZpZ1BhbmVsIiwiX2hpZGVGb290ZXIiLCJmb290ZXIiLCJOZURyb3Bkb3duTWVudSIsImZpeGVkSGVpZ2h0Iiwic2hvd0Zvb3RlckFjdGlvbnMiLCJlbGV2YXRlZCIsIk5lRHJvcGRvd25NZW51SXRlbSIsIl9oYXNTdWJUZXh0U2xvdCIsImlzTXVsdGlTZWxlY3QiLCJfb25TbG90Q2hhbmdlZCIsIl9zdWJUZXh0U2xvdCIsIl9vbktleURvd24iLCJldnQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsInJlbmRlck11bHRpU2VsZWN0IiwicmVuZGVyU2luZ2xlU2VsZWN0IiwiaGFzU3VidGV4dFByb3AiLCJoaWRkZW4iLCJvdCIsInJ0IiwibHQiLCJjdCIsIk5lUGlsbCIsInBpbGwiLCJfY2xhc3MiLCJOZURyb3Bkb3duRmllbGRfMSIsIk5lRHJvcGRvd25GaWVsZCIsImRhdGFMaXN0Iiwib2xkRGF0YUxpc3QiLCJfZGF0YUxpc3QiLCJfbXVsdGlTZWxlY3QiLCJkaXNwbGF5VmFsdWUiLCJhcmlhTGFiZWxsZWRieSIsIl9leHBhbmRlZCIsIl9pbnB1dCIsIl9wcmV2aW91c1ZhbHVlIiwiX3VwZGF0ZURpc3BsYXlUZXh0IiwiX29uRG9jdW1lbnRDbGljayIsIl9vcmRlckl0ZW1zIiwiX29uTW91c2VEb3duIiwiX29uTXVsdGlTZWxlY3RMaXN0SXRlbUNsaWNrZWQiLCJmaW5kSW5kZXgiLCJfb25Ub2dnbGVBbGxDbGlja2VkIiwiaXNTZWxlY3RlZCIsIl9jbGVhclNlbGVjdGlvbiIsIl9vbkxpc3RJdGVtQ2xpY2tlZCIsIl9yZW5kZXJJbnB1dCIsImFjdGl2ZSIsIl9yZW5kZXJQbGFjZWhvbGRlciIsIl9yZW5kZXJQaWxsIiwicGxhY2Vob2xkZXIiLCJjaGVja2VkSXRlbXMiLCJub25jaGVja2VkSXRlbXMiLCJfcmVuZGVyTGlzdEl0ZW1zIiwiZm9ybWF0U3VidGV4dCIsInNpemVGaWxlRm9ybWF0cyIsIk5lRmlsZUNhcmQiLCJmaWxlTmFtZSIsImZpbGVTaXplIiwiaGFuZGxlQ2xpY2siLCJvbkRlbGV0ZSIsInVwbG9hZGVkRmlsZSIsIl9oYW5kbGVDbGljayIsImZpbGVGb3JtYXQiLCJmaWxlc2l6ZSIsInBvdyIsImZsb29yIiwidG9GaXhlZCIsImZpbGVTaXplSUVDIiwiTmVGaWxlRHJvcHpvbmUiLCJzaW5nbGVGaWxlIiwiZmlsZVN0ciIsImhhbmRsZUNoYW5nZSIsIk5lRmlsZVBpY2tlciIsImZpbGVQaWNrZXJDYXJkcyIsIl9maWxlUGlja2VyQ2FyZHMiLCJvbGRWYWx1ZSIsImRyYWdvdmVyIiwiX2RyYWdvdmVyIiwiYWNjZXB0cyIsIl9pbnB1dFJlZiIsInByZXZlbnREZWZhdWx0cyIsIl9oYW5kbGVDaGFuZ2UiLCJmaWxlcyIsImdldEZpbGVzIiwib25Ecm9wIiwiZGF0YVRyYW5zZmVyIiwib3JpZ2luYWxFdmVudCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIm9uRHJhZ092ZXIiLCJvbkRyYWdPdmVyRW5kIiwiZmlsZUlucHV0IiwiY2xpY2siLCJmaWxlQ2FyZHNMaXN0IiwiYnJlYWtNZSIsIm9uQ2hhbmdlIiwicmVuZGVyRm9ybSIsInVwbG9hZEZpbGVzQ29udGFpbmVyIiwiZmlsZUNhcmRzIiwiTmVJbnB1dCIsInJlYWRvbmx5IiwicGFzc3dvcmRXaXRoVmlzaWJpbGl0eUxhYmVsIiwiX2hhbmRsZUlucHV0IiwiX2hhbmRsZUNsaWNrQ2xlYXIiLCJjaGFuZ2VkUHJvcGVydGllcyIsIl90eXBlIiwiX3RvZ2dsZVNob3dQYXNzd29yZCIsImlzQ2hlY2tlZCIsIl9pbnB1dEVsZW1lbnQiLCJlbmFibGVTaG93UGFzc3dvcmQiLCJlc2NhcGVGb3JSZWdFeHAiLCJOZUxvb2t1cEZpZWxkXzEiLCJOZUxvb2t1cEZpZWxkIiwiX2lzTG9hZGluZyIsImV4dGVybmFsTGlzdEZpbHRlciIsIl9maWx0ZXJlZExpc3QiLCJub1Jlc3VsdHNUZXh0IiwidHlwZVRvU2VhcmNoVGV4dCIsInNlYXJjaExvYWRpbmdUZXh0IiwiZHJvcGRvd25WYXJpYW50IiwiX2lnbm9yZUZvY3VzT3V0IiwiX3NlYXJjaFZhbHVlIiwiX2ZpbHRlckxpc3QiLCJlc2NhcGVkU2VhcmNoVmFsdWUiLCJtYXRjaGVyIiwiX29uRHJvcERvd25Nb3VzZURvd24iLCJfb25JbnB1dCIsIl9vbkZvY3VzT3V0IiwiX3JlbmRlcldpdGhIaWdobGlnaHQiLCJfcmVuZGVyRW1wdHlMaXN0IiwiX3JlbmRlckxvYWRpbmdJbmRpY2F0b3IiLCJzcGxpdHMiLCJkaXNwbGF5RWxlbWVudHMiLCJOZVBhbmVsIiwiaGVhZGluZyIsIk5lUHJvZ3Jlc3NCYXIiLCJ0b3BMYWJlbCIsImJvdHRvbUxhYmVsIiwicHJvZ3Jlc3MiLCJ0b2tlbnMkMSIsIk5lUmFkaW9CdXR0b24iLCJzdWJ0ZXh0IiwiZ3JvdXBOYW1lIiwiX2tleWRvd25IYW5kbGVyIiwia2V5ZG93bkhhbmRsZXIiLCJncm91cCIsIk5lUmFkaW9CdXR0b25Hcm91cCIsIm5ld0l0ZW0iLCJnZXRFbGVtZW50QnlJZCIsImZvY3VzIiwicmFkaW9CdXR0b25Hcm91cCIsInZhbHVlT2YiLCJOZVN0ZXAiLCJjb21wbGV0ZWQiLCJwcm9ncmVzc0xpbmVMZWZ0IiwicHJvZ3Jlc3NMaW5lUmlnaHQiLCJwcm9ncmVzc0xpbmVUeXBlIiwiTmVTdGVwcGVyIiwiTmVTd2l0Y2giLCJfY2hlY2tib3hOb2RlIiwiaW52ZXJ0U3RhdGVMYWJlbFBsYWNlbWVudCIsInN0YXRlTGFiZWxWaXNpYmxlIiwiX29uQ2hhbmdlIiwiZGVzY3JpcHRpb24iLCJfc3RhdHVzTGFiZWxEZXNjcmlwdGlvbiIsImxlZnRMYWJlbCIsInJpZ2h0TGFiZWwiLCJzbGlkZXIiLCJOZVRleHRhcmVhIiwicm93cyIsImh0bWxUZW1wbGF0ZSIsIk5lVG9hc3RJdGVtIiwiZGVmYXVsdER1cmF0aW9uIiwiX3Byb2dyZXNzVGltZXIiLCJfcHJvZ3Jlc3MiLCJhbGVydFR5cGUiLCJkdXJhdGlvbiIsImF1dG9DbG9zZSIsIl9oYW5kbGVNb3VzZU92ZXIiLCJfaGFuZGxlTW91c2VPdXQiLCJfdXBkYXRlUHJvZ3Jlc3MiLCJfaGFuZGxlQmFubmVyQWxlcnROZUNsb3NlIiwiX2Nsb3NlIiwibWVzc2FnZUlkIiwiTmVUb2FzdE5vdGlmaWNhdGlvbiIsIl90b2FzdEl0ZW1zIiwicG9zaXRpb24iLCJfaGFuZGxlVG9hc3RJdGVtTmVDbG9zZSIsInRpIiwibmV3VG9hc3RJdGVtcyIsImFsbFRvYXN0c0hpZGRlbiIsInNvbWUiLCJzaG93VG9hc3QiLCJ0b2FzdEl0ZW1Qcm9wcyIsInRvYXN0SXRlbSIsIk5lVG9vbGJhciIsIk5lVG9vbGJhckJ1dHRvbiIsInNob3dEcm9wZG93bk1lbnUiLCJoYXNEcm9wZG93bk1lbnUiLCJidXR0b25DbGlja2VkIiwibGVmdEljb25TaXplIiwicmlnaHRJY29uU2l6ZSIsIl9kcm9wZG93bk1lbnVDb250YWluZXJFbGVtUmVmIiwiX29uRHJvcGRvd25NZW51RWxlbUNoYW5nZSIsIl9zbG90dGVkRHJvcGRvd25NZW51RWxlbXMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJpbm5lcldpZHRoIiwiZG9jdW1lbnRFbGVtZW50IiwiY2xpZW50V2lkdGgiLCJWYXJpYW50VHlwZSIsIlBsYWNlbWVudCIsIk5lVG9vbHRpcCIsIl9zaG93VG9vbFRpcCIsImhpZGVUb29sdGlwIiwic2hvd1Rvb2x0aXAiLCJOZUFjY29yZGlvbkl0ZW0iLCJhY2NvcmRpb25UaXRsZSIsIlRhcmdldFR5cGVzIiwiZGVmYXVsdEhyZWZWYWx1ZSIsImRlZmF1bHRUYXJnZXRWYWx1ZSIsIk5lTGluayIsImhyZWYiLCJsZWZ0SWNvbiIsInJpZ2h0SWNvbiIsImJyb3dzZXJMb2NhbGUiLCJmb3JtYXREYXRlIiwiZGF0ZSIsImRhdGVTdHlsZSIsIlRhYmxlQ29udHJvbHMiLCJyZW5kZXJDZWxsSWNvbiIsImlzQXZhdGFyIiwiZGV0YWlsRGF0YSIsImF2YXRhciIsInJlbmRlckRhdGVUaW1lIiwiZGF0ZUZvcm1hdCIsImRmIiwidGltZVN0eWxlIiwicmVuZGVyRnJpZW5kbHlEYXRlIiwiZGlmZiIsImZyaWVuZGx5RGF0ZVN0eWxlIiwicnRmIiwibnVtZXJpYyIsIm1pbnMiLCJob3VycyIsInRvZGF5RGF0ZSIsInNldEhvdXJzIiwiZGlmZkRheSIsImdldERheSIsImRheXMiLCJjZWlsIiwic2V0VGltZSIsIndlZWtzIiwibGFzdFllYXIiLCJnZXRNb250aCIsInNldE1vbnRoIiwic2V0RnVsbFllYXIiLCJnZXRGdWxsWWVhciIsInRvTG9jYWxlU3RyaW5nIiwibW9udGgiLCJ5ZWFyIiwiZ2V0RnJpZW5kbHlQYXN0RGF0ZSIsInJlbmRlckNoZWNrYm94IiwiY2hhbmdlRXZlbnQiLCJyZW5kZXJSYWRpbyIsInJlbmRlckh5cGVybGluayIsImljb25OYW1lIiwiTmVEYXRhVGFibGUiLCJoZWFkZXJzIiwiX3RhYmxlSGVhZGVycyIsImFsbFNlbGVjdGVkIiwiX3RhYmxlQ29udHJvbHMiLCJyZW5kZXJIZWFkZXJSb3ciLCJyZW5kZXJIZWFkZXJzIiwidGFibGVIZWFkZXJzIiwicmVuZGVySGVhZGVyQ2VsbCIsImNvbmYiLCJoZWFkZXJDb2x1bW4iLCJyZW5kZXJIZWFkZXJDb250ZW50IiwibXlDaGFuZ2VFdmVudCIsImZpcmVTZWxlY3QiLCJyZW5kZXJTb3J0IiwicmVuZGVyVGFibGVSb3dzIiwicmVuZGVyUm93Q29sdW1uIiwicm93IiwidGRzIiwicmVuZGVyQ2VsbENvbnRlbnQiLCJ0aCIsImNlbGxJdGVtVmFsdWUiLCJ0ZXh0UHJvcGVydHkiLCJ1cmxQcm9wIiwidXJsUHJvcGVydHkiLCJ1cmxWYWx1ZSIsImljb25Qcm9wZXJ0eSIsIm15SHlwZXJsaW5rRXZlbnQiLCJmaXJlQ2xpY2siLCJteUNsaWNrRXZlbnQiLCJzZWxlY3RlZFJlY29yZCIsImZpcmVTb3J0Iiwic29ydGVkIiwiY29sdW1uSGVhZGVySXRlbSIsIm5ld1NvcnREaXJlY3Rpb24iLCJjb2x1bW5IZWFkZXIiLCJocyIsIkFwcENvbXBvbmVudCJdLCJzb3VyY2VSb290IjoiIn0=