/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e,t,o={2443:(e,t,o)=>{(function(){"use strict";function e(e){var t=0;return function(){return t<e.length?{done:!1,value:e[t++]}:{done:!0}}}function t(t){var o="undefined"!=typeof Symbol&&Symbol.iterator&&t[Symbol.iterator];return o?o.call(t):{next:e(t)}}function n(e){if(!(e instanceof Array)){e=t(e);for(var o,n=[];!(o=e.next()).done;)n.push(o.value);e=n}return e}var r="function"==typeof Object.create?Object.create:function(e){function t(){}return t.prototype=e,new t};var i,s=function(e){e=["object"==typeof globalThis&&globalThis,e,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof o.g&&o.g];for(var t=0;t<e.length;++t){var n=e[t];if(n&&n.Math==Math)return n}throw Error("Cannot find global object")}(this),a=function(){if("undefined"!=typeof Reflect&&Reflect.construct){if(function(){function e(){}return new e,Reflect.construct(e,[],(function(){})),new e instanceof e}())return Reflect.construct;var e=Reflect.construct;return function(t,o,n){return t=e(t,o),n&&Reflect.setPrototypeOf(t,n.prototype),t}}return function(e,t,o){return void 0===o&&(o=e),o=r(o.prototype||Object.prototype),Function.prototype.apply.call(e,o,t)||o}}();if("function"==typeof Object.setPrototypeOf)i=Object.setPrototypeOf;else{var l;e:{var c={};try{c.__proto__={a:!0},l=c.a;break e}catch(e){}l=!1}i=l?function(e,t){if(e.__proto__=t,e.__proto__!==t)throw new TypeError(e+" is not extensible");return e}:null}var d=i;if(!ShadowRoot.prototype.createElement){var u,h=window.HTMLElement,p=window.customElements.define,f=window.customElements.get,g=window.customElements,A=new WeakMap,v=new WeakMap,b=new WeakMap,m=new WeakMap;window.CustomElementRegistry=function(){this.l=new Map,this.o=new Map,this.i=new Map,this.h=new Map},window.CustomElementRegistry.prototype.define=function(e,o){if(e=e.toLowerCase(),void 0!==this.j(e))throw new DOMException("Failed to execute 'define' on 'CustomElementRegistry': the name \""+e+'" has already been used with this registry');if(void 0!==this.o.get(o))throw new DOMException("Failed to execute 'define' on 'CustomElementRegistry': this constructor has already been used with this registry");var n=o.prototype.attributeChangedCallback,r=new Set(o.observedAttributes||[]);if(C(o,r,n),n={g:o,connectedCallback:o.prototype.connectedCallback,disconnectedCallback:o.prototype.disconnectedCallback,adoptedCallback:o.prototype.adoptedCallback,attributeChangedCallback:n,formAssociated:o.formAssociated,formAssociatedCallback:o.prototype.formAssociatedCallback,formDisabledCallback:o.prototype.formDisabledCallback,formResetCallback:o.prototype.formResetCallback,formStateRestoreCallback:o.prototype.formStateRestoreCallback,observedAttributes:r},this.l.set(e,n),this.o.set(o,n),(r=f.call(g,e))||(r=y(e),p.call(g,e,r)),this===window.customElements&&(b.set(o,n),n.s=r),r=this.h.get(e)){this.h.delete(e);for(var i=(r=t(r)).next();!i.done;i=r.next())i=i.value,v.delete(i),x(i,n,!0)}return void 0!==(n=this.i.get(e))&&(n.resolve(o),this.i.delete(e)),o},window.CustomElementRegistry.prototype.upgrade=function(){_.push(this),g.upgrade.apply(g,arguments),_.pop()},window.CustomElementRegistry.prototype.get=function(e){var t;return null==(t=this.l.get(e))?void 0:t.g},window.CustomElementRegistry.prototype.j=function(e){return this.l.get(e)},window.CustomElementRegistry.prototype.whenDefined=function(e){var t=this.j(e);if(void 0!==t)return Promise.resolve(t.g);var o=this.i.get(e);return void 0===o&&((o={}).promise=new Promise((function(e){return o.resolve=e})),this.i.set(e,o)),o.promise},window.CustomElementRegistry.prototype.m=function(e,t,o){var n=this.h.get(t);n||this.h.set(t,n=new Set),o?n.add(e):n.delete(e)},window.HTMLElement=function(){var e=u;if(e)return u=void 0,e;var t=b.get(this.constructor);if(!t)throw new TypeError("Illegal constructor (custom element class must be registered with global customElements registry to be newable)");return e=Reflect.construct(h,[],t.s),Object.setPrototypeOf(e,this.constructor.prototype),A.set(e,t),e},window.HTMLElement.prototype=h.prototype;var y=function(e){function t(){var t=Reflect.construct(h,[],this.constructor);Object.setPrototypeOf(t,HTMLElement.prototype);e:{var o=t.getRootNode();if(!(o===document||o instanceof ShadowRoot)){if((o=_[_.length-1])instanceof CustomElementRegistry){var n=o;break e}(o=o.getRootNode())===document||o instanceof ShadowRoot||(o=(null==(n=m.get(o))?void 0:n.getRootNode())||document)}n=o.customElements}return(o=(n=n||window.customElements).j(e))?x(t,o):v.set(t,n),t}return s.Object.defineProperty(t,"formAssociated",{configurable:!0,enumerable:!0,get:function(){return!0}}),t.prototype.connectedCallback=function(){var t=A.get(this);t?t.connectedCallback&&t.connectedCallback.apply(this,arguments):v.get(this).m(this,e,!0)},t.prototype.disconnectedCallback=function(){var t=A.get(this);t?t.disconnectedCallback&&t.disconnectedCallback.apply(this,arguments):v.get(this).m(this,e,!1)},t.prototype.adoptedCallback=function(){var e,t;null==(e=A.get(this))||null==(t=e.adoptedCallback)||t.apply(this,arguments)},t.prototype.formAssociatedCallback=function(){var e,t=A.get(this);t&&t.formAssociated&&(null==t||null==(e=t.formAssociatedCallback)||e.apply(this,arguments))},t.prototype.formDisabledCallback=function(){var e,t=A.get(this);null!=t&&t.formAssociated&&(null==t||null==(e=t.formDisabledCallback)||e.apply(this,arguments))},t.prototype.formResetCallback=function(){var e,t=A.get(this);null!=t&&t.formAssociated&&(null==t||null==(e=t.formResetCallback)||e.apply(this,arguments))},t.prototype.formStateRestoreCallback=function(){var e,t=A.get(this);null!=t&&t.formAssociated&&(null==t||null==(e=t.formStateRestoreCallback)||e.apply(this,arguments))},t},C=function(e,t,o){if(0!==t.size&&void 0!==o){var n=e.prototype.setAttribute;n&&(e.prototype.setAttribute=function(e,r){if(e=e.toLowerCase(),t.has(e)){var i=this.getAttribute(e);n.call(this,e,r),o.call(this,e,i,r)}else n.call(this,e,r)});var r=e.prototype.removeAttribute;r&&(e.prototype.removeAttribute=function(e){if(e=e.toLowerCase(),t.has(e)){var n=this.getAttribute(e);r.call(this,e),o.call(this,e,n,null)}else r.call(this,e)});var i=e.prototype.toggleAttribute;i&&(e.prototype.toggleAttribute=function(e){if(e=e.toLowerCase(),t.has(e)){var n=this.getAttribute(e);i.call(this,e);var r=this.getAttribute(e);o.call(this,e,n,r)}else i.call(this,e)})}},w=function(e){var t=Object.getPrototypeOf(e);if(t!==window.HTMLElement)return t===h?Object.setPrototypeOf(e,window.HTMLElement):w(t)},x=function(e,t,o){o=void 0!==o&&o,Object.setPrototypeOf(e,t.g.prototype),A.set(e,t),u=e;try{new t.g}catch(e){w(t.g),new t.g}t.observedAttributes.forEach((function(o){e.hasAttribute(o)&&t.attributeChangedCallback.call(e,o,null,e.getAttribute(o))})),o&&t.connectedCallback&&e.isConnected&&t.connectedCallback.call(e)},k=Element.prototype.attachShadow;Element.prototype.attachShadow=function(e){var t=k.apply(this,arguments);return e.customElements&&(t.customElements=e.customElements),t};var _=[document],$=function(e,t,o){var n=(o?Object.getPrototypeOf(o):e.prototype)[t];e.prototype[t]=function(){_.push(this);var e=n.apply(o||this,arguments);return void 0!==e&&m.set(e,this),_.pop(),e}};$(ShadowRoot,"createElement",document),$(ShadowRoot,"importNode",document),$(Element,"insertAdjacentHTML");var S=function(e){var t=Object.getOwnPropertyDescriptor(e.prototype,"innerHTML");Object.defineProperty(e.prototype,"innerHTML",Object.assign({},t,{set:function(e){_.push(this),t.set.call(this,e),_.pop()}}))};if(S(Element),S(ShadowRoot),Object.defineProperty(window,"customElements",{value:new CustomElementRegistry,configurable:!0,writable:!0}),window.ElementInternals&&window.ElementInternals.prototype.setFormValue){var E=new WeakMap,L=HTMLElement.prototype.attachInternals;HTMLElement.prototype.attachInternals=function(e){for(var t=[],o=0;o<arguments.length;++o)t[o]=arguments[o];return t=L.call.apply(L,[this].concat(n(t))),E.set(t,this),t},["setFormValue","setValidity","checkValidity","reportValidity"].forEach((function(e){var t=window.ElementInternals.prototype,o=t[e];t[e]=function(e){for(var t=[],r=0;r<arguments.length;++r)t[r]=arguments[r];if(r=E.get(this),!0!==A.get(r).formAssociated)throw new DOMException("Failed to execute "+o+" on 'ElementInternals': The target element is not a form-associated custom element.");null==o||o.call.apply(o,[this].concat(n(t)))}}));var O=function(e){var t=a(Array,[].concat(n(e)),this.constructor);return t.h=e,t},N=O,R=Array;if(N.prototype=r(R.prototype),N.prototype.constructor=N,d)d(N,R);else for(var T in R)if("prototype"!=T)if(Object.defineProperties){var D=Object.getOwnPropertyDescriptor(R,T);D&&Object.defineProperty(N,T,D)}else N[T]=R[T];N.u=R.prototype,s.Object.defineProperty(O.prototype,"value",{configurable:!0,enumerable:!0,get:function(){var e;return(null==(e=this.h.find((function(e){return!0===e.checked})))?void 0:e.value)||""}});var P=function(e){var t=this,o=new Map;e.forEach((function(e,n){var r=e.getAttribute("name"),i=o.get(r)||[];t[+n]=e,i.push(e),o.set(r,i)})),this.length=e.length,o.forEach((function(e,o){e&&(t[o]=1===e.length?e[0]:new O(e))}))};P.prototype.namedItem=function(e){return this[e]};var F=Object.getOwnPropertyDescriptor(HTMLFormElement.prototype,"elements");Object.defineProperty(HTMLFormElement.prototype,"elements",{get:function(){for(var e=F.get.call(this,[]),o=[],n=(e=t(e)).next();!n.done;n=e.next()){n=n.value;var r=A.get(n);r&&!0!==r.formAssociated||o.push(n)}return new P(o)}})}}}).call("object"==typeof globalThis?globalThis:window)},9526:(e,t,o)=>{"use strict";o.d(t,{Z:()=>a});var n=o(272),r=o.n(n),i=o(2609),s=o.n(i)()(r());s.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600&family=Open+Sans:ital,wght@0,300;0,400;0,600;0,700;0,800;1,400&display=swap);"]),s.push([e.id,":root{--nx-sand-10: #f7f1dd;--nx-white: #fff;--nx-yellow-60: #e1b200;--nx-yellow-50: #ffcf1a;--nx-yellow-40: #ffd948;--nx-red-60: #b80000;--nx-red-50: #e60000;--nx-red-40: #ff1f1f;--nx-red-10: #ffc7c7;--nx-green-60: #006c2d;--nx-green-50: #008738;--nx-green-40: #00d257;--nx-green-10: #b6ffd4;--nx-orange-60: #f56900;--nx-blue-90: #001f3d;--nx-blue-80: #003870;--nx-blue-70: #0052a3;--nx-blue-60: #006bd6;--nx-blue-50: #0a85ff;--nx-blue-40: #3d9eff;--nx-blue-30: #70b8ff;--nx-blue-20: #a3d1ff;--nx-blue-10: #d6ebff;--nx-blue-5: #f0f7ff;--nx-violet-90: #200c34;--nx-violet-80: #3f1868;--nx-violet-70: #5f249b;--nx-violet-60: #7f30cf;--nx-violet-50: #9f64db;--nx-violet-40: #b283e2;--nx-violet-30: #c5a2e9;--nx-violet-20: #d9c1f1;--nx-violet-10: #ece0f8;--nx-grey-90: #161718;--nx-grey-80: #2c2e30;--nx-grey-70: #414548;--nx-grey-60: #575c61;--nx-grey-50: #6d7379;--nx-grey-40: #898f94;--nx-grey-30: #a7abaf;--nx-grey-20: #c4c7ca;--nx-grey-10: #e2e3e4;--nx-grey-5: #eff0f0;--nx-grey-2: #fafafa;--overlay: rgba(109 115 121 60%);--overlay-loading: rgba(250 250 250 80%);--onlight-hover-background-color: #f4f9ff;--onlight-selected-background-color: #e8f3ff;--globalnav-background-color: var(--nx-blue-80);--globalnav-text-color: var(--nx-white);--sidenav-background-color: var(--nx-grey-5);--body-primary-background-color: var(--nx-grey-2);--body-secondary-background-color: var(--nx-grey-5);--content-background-color: var(--nx-white);--content-extension-background-color: var(--nx-grey-10);--toolbar-background-color: var(--nx-white);--toolbar-text-color: var(--nx-grey-90);--primary-text-color: var(--nx-grey-90);--disabled-text-color: var(--nx-grey-70);--error-text-color: var(--nx-red-50);--destructive-text-color: var(--nx-red-60);--success-text-color: var(--nx-green-50);--header-text-color: var(--nx-orange-60);--subheader-text-color: var(--nx-grey-60);--placeholder-text-color: var(--nx-grey-50);--hyperlink-text-color: var(--nx-blue-60);--hyperlink-disabled-text-color: var(--nx-grey-70);--block-primary-background-color: var(--nx-blue-60);--block-primary-border-color: var(--nx-blue-70);--block-primary-text-color: var(--nx-white);--block-secondary-background-color: hsla(0deg 0% 0% 0%);--block-secondary-border-color: hsla(0deg 0% 0% 0%);--block-secondary-text-color: var(--nx-grey-90);--block-success-background-color: var(--nx-green-50);--block-success-border-color: var(--nx-green-60);--block-success-text-color: var(--nx-white);--block-error-background-color: var(--nx-red-50);--block-error-border-color: var(--nx-red-60);--block-error-text-color: var(--nx-white);--block-warning-background-color: var(--nx-yellow-50);--block-warning-border-color: var(--nx-yellow-60);--block-warning-text-color: var(--nx-grey-90);--button-primary-hover-background-color: #1477db;--button-primary-hover-text-color: #e2eefa;--button-secondary-background-color: var(--nx-white);--button-secondary-border-color: var(--nx-grey-10);--button-secondary-text-color: var(--nx-blue-60);--button-secondary-hover-background-color: var(--onlight-hover-background-color);--button-secondary-selected-background-color: var(--onlight-selected-background-color);--button-secondary-hover-text-color: #2f87df;--button-text-background-color: hsla(0deg 0% 0% 0%);--button-text-border-color: hsla(0deg 0% 0% 0%);--button-text-text-color: var(--nx-blue-60);--button-text-hover-background-color: var(--onlight-hover-background-color);--button-text-hover-text-color: var(--secondary-button-hover-text-color);--button-destructive-background-color: var(--nx-white);--button-destructive-border-color: var(--nx-grey-10);--button-destructive-text-color: var(--nx-red-50);--button-destructive-hover-background-color: var(--onlight-hover-background-color);--button-destructive-hover-text-color: var(--nx-red-60);--button-disabled-background-color: var(--nx-grey-20);--button-disabled-border-color: hsla(0deg 0% 0% 0%);--button-disabled-text-color: var(--nx-grey-70);--divider-line-color: var(--nx-grey-10);--input-background-color: var(--nx-white);--input-border-color: var(--nx-grey-40);--input-text-color: var(--primary-text-color);--input-placeholder-text-color: var(--placeholder-text-color);--input-focus-border-color: var(--nx-blue-60);--input-error-color: var(--nx-red-50);--input-error-text-color: var(--nx-white);--input-warning-color: var(--nx-yellow-50);--input-warning-text-color: var(--primary-text-color);--input-information-color: var(--nx-blue-60);--input-information-text-color: var(--nx-white);--input-disabled-background-color: var(--nx-grey-20);--input-disabled-border-color: hsla(0deg 0% 0% 0%);--input-disabled-text-color: var(--disabled-text-color);--input-xfix-background-color: var(--nx-grey-20);--input-xfix-border-color: var(--nx-grey-40);--input-xfix-text-color: var(--nx-grey-70);--input-pills-background-color: var(--nx-white);--input-pills-border-color: var(--nx-grey-90);--input-pills-text-color: var(--nx-grey-90);--input-block-unselected-background-color: var(--nx-white);--input-block-unselected-border-color: var(--nx-grey-60);--input-block-unselected-disabled-background-color: var(--nx-white);--input-block-unselected-disabled-border-color: var(--nx-grey-40);--input-block-selected-background-color: var(--nx-blue-60);--input-block-selected-border-color: hsla(0deg 0% 0% 0%);--input-block-selected-disabled-background-color: var(--nx-grey-40);--input-block-selected-disabled-border-color: hsla(0deg 0% 0% 0%);--input-block-hover-background-color: var(--onlight-hover-background-color);--list-group-text-color: var(--nx-grey-60);--list-item-hover-background-color: var(--onlight-hover-background-color);--list-item-selected-background-color: var(--onlight-selected-background-color);--list-item-subtext-color: var(--nx-grey-50);--list-action-background-color: var(--onlight-hover-background-color);--list-action-border-color: var(--nx-grey-5);--list-action-text-color: var(--hyperlink-text-color);--global-header-background-color: var(--nx-blue-80)}:root{--nx-font-family-body: Open Sans, helvetica, arial, sans-serif;--nx-font-family-heading: Montserrat, helvetica, arial, sans-serif}:root{--ne-ref-color-violet-20: #D9C1F1;--ne-ref-color-violet-60: #7F30CF;--ne-ref-color-grey-90-20: #16171820;--ne-ref-color-green-40: #00D257;--ne-ref-color-green-50: #008738;--ne-ref-color-green-60: #006c2d;--ne-ref-color-yellow-60: #E1B200;--ne-ref-color-yellow-50: #FFCF1A;--ne-ref-color-yellow-40: #FFD948;--ne-ref-color-yellow-10: #FFF5D1;--ne-ref-color-grey-02: #FAFAFA;--ne-ref-color-grey-05: #EFF0F0;--ne-ref-color-grey-10: #E2E3E4;--ne-ref-color-grey-20: #C4C7CA;--ne-ref-color-grey-30: #A7ABAF;--ne-ref-color-grey40: #898F94;--ne-ref-color-grey-50: #6D7379;--ne-ref-color-grey-60: #575C61;--ne-ref-color-grey-70: #414548;--ne-ref-color-grey-80: #2C2E30;--ne-ref-color-grey-90: #161718;--ne-ref-color-red-10: #FFC7C7;--ne-ref-color-red-20: #FF8F8F;--ne-ref-color-red-30: #FF5757;--ne-ref-color-red-40: #FF1F1F;--ne-ref-color-red-50: #E60000;--ne-ref-color-red-60: #B80000;--ne-ref-color-red-70: #7C0D0E;--ne-ref-color-red-80: #530909;--ne-ref-color-red-90: #290405;--ne-ref-color-blue-05: #F0F7FF;--ne-ref-color-blue-10: #D6EBFF;--ne-ref-color-blue-20: #A3D1FF;--ne-ref-color-blue-30: #70B8FF;--ne-ref-color-blue-40: #3D9EFF;--ne-ref-color-blue-50: #0A85FF;--ne-ref-color-blue-60: #006BD6;--ne-ref-color-blue-70: #0052A3;--ne-ref-color-blue-80: #003870;--ne-ref-color-blue-90: #001F3D;--ne-ref-color-nintex-orange: #F56900;--ne-ref-color-white: #ffffff}:root{--ne-ref-border-radius-circle: 50%;--ne-ref-border-radius-large: 0.5em;--ne-ref-border-radius-medium: .25em;--ne-ref-border-radius-small: 0.125em;--ne-ref-border-radius-none: 0}:root{--ne-ref-spacing-xxx-large: 3em;--ne-ref-spacing-xx-large: 2.5em;--ne-ref-spacing-x-large: 2em;--ne-ref-spacing-large: 1.5em;--ne-ref-spacing-medium: 1em;--ne-ref-spacing-small: 0.75em;--ne-ref-spacing-x-small: 0.5em;--ne-ref-spacing-xx-small: 0.25em;--ne-ref-spacing-xxx-small: 0.125em;--ne-ref-spacing-none: 0}:root{--ne-ref-font-size-09: 1.75em;--ne-ref-font-size-08: 1.5em;--ne-ref-font-size-07: 1.25em;--ne-ref-font-size-06: 1.125em;--ne-ref-font-size-05: 1em;--ne-ref-font-size-04: 0.875em;--ne-ref-font-size-03: 0.8125em;--ne-ref-font-size-02: 0.75em;--ne-ref-font-size-01: 0.625em;--ne-ref-font-size-11: 2.625em;--ne-ref-font-size-10: 2em}:root{--ne-ref-border-width-large: 4px;--ne-ref-border-width-medium: 2px;--ne-ref-border-width-small: 1px}:root{--ne-ref-sizing-09: 2.25em;--ne-ref-sizing-08: 2em;--ne-ref-sizing-07: 1.75em;--ne-ref-sizing-06: 1.5em;--ne-ref-sizing-05: 1.25em;--ne-ref-sizing-04: 1em;--ne-ref-sizing-03: 0.75em;--ne-ref-sizing-02: 0.5em;--ne-ref-sizing-01: 0.25em;--ne-ref-sizing-14: 6em;--ne-ref-sizing-13: 5em;--ne-ref-sizing-12: 4em;--ne-ref-sizing-11: 3em;--ne-ref-sizing-10: 2.5em}:root{--ne-ref-font-weight-bold: Bold;--ne-ref-font-weight-semi-bold: SemiBold;--ne-ref-font-weight-regular: Regular}:root{--ne-ref-font-family-montserrat: Montserrat;--ne-ref-font-family-open-sans: Open Sans}:root{--ne-ref-line-height-expanded: 2em;--ne-ref-line-height-regular: 1.5em;--ne-ref-line-height-condensed: 1.2em}:root{--ne-ref-paragraph-spacing-07: 2.5em;--ne-ref-paragraph-spacing-06: 2.25em;--ne-ref-paragraph-spacing-05: 2em;--ne-ref-paragraph-spacing-04: 1.75em;--ne-ref-paragraph-spacing-03: 1.625em;--ne-ref-paragraph-spacing-02: 1.5em;--ne-ref-paragraph-spacing-01: 1.25em}:root{--ne-ref-letter-spacing-09: 0.21em;--ne-ref-letter-spacing-08: 0.18em;--ne-ref-letter-spacing-07: 0.15em;--ne-ref-letter-spacing-06: 0.135em;--ne-ref-letter-spacing-05: 0.12em;--ne-ref-letter-spacing-04: 0.105em;--ne-ref-letter-spacing-03: 0.0975em;--ne-ref-letter-spacing-02: 0.09em;--ne-ref-letter-spacing-01: 0.075em;--ne-ref-letter-spacing-11: 0.315em;--ne-ref-letter-spacing-10: 0.24em}:root{--ne-ref-text-decoration-underline: underline;--ne-ref-text-decoration-none: none}:root{--ne-ref-shadow-level2: 0px 0px 8px var(--ne-ref-color-grey-90-20);--ne-ref-shadow-level1: 0px 0px 8px var(--ne-ref-color-grey-90-20)}:root{--ne-alias-color-highlight: var(--ne-ref-color-nintex-orange);--ne-alias-color-icon-white: var(--ne-ref-color-white);--ne-alias-color-icon-default: var(--ne-ref-color-grey-90);--ne-alias-color-status-success-light: var(--ne-ref-color-green-40);--ne-alias-color-status-success-default: var(--ne-ref-color-green-50);--ne-alias-color-status-success-dark: var(--ne-ref-color-green-60);--ne-alias-color-status-info-light: var(--ne-ref-color-blue-50);--ne-alias-color-status-info-default: var(--ne-ref-color-blue-60);--ne-alias-color-status-info-dark: var(--ne-ref-color-blue-70);--ne-alias-color-status-active-lighter: var(--ne-ref-color-blue-40);--ne-alias-color-status-active-light: var(--ne-ref-color-blue-50);--ne-alias-color-status-active-default: var(--ne-ref-color-blue-60);--ne-alias-color-status-warning-light: var(--ne-ref-color-yellow-40);--ne-alias-color-status-warning-default: var(--ne-ref-color-yellow-50);--ne-alias-color-status-warning-dark: var(--ne-ref-color-yellow-60);--ne-alias-color-status-error-light: var(--ne-ref-color-red-40);--ne-alias-color-status-error-default: var(--ne-ref-color-red-50);--ne-alias-color-status-error-dark: var(--ne-ref-color-red-60);--ne-alias-color-destructive-light: var(--ne-ref-color-red-40);--ne-alias-color-destructive-default: var(--ne-ref-color-red-60);--ne-alias-color-destructive-dark: var(--ne-ref-color-red-70);--ne-alias-color-state-focus-on-red: var(--ne-ref-color-red-70);--ne-alias-color-state-focus-on-white: var(--ne-ref-color-blue-05);--ne-alias-color-state-hover-on-red: var(--ne-ref-color-red-70);--ne-alias-color-state-hover-on-white: var(--ne-ref-color-blue-05);--ne-alias-color-state-disabled-dark: var(--ne-ref-color-grey-90);--ne-alias-color-state-disabled-default: var(--ne-ref-color-grey-50);--ne-alias-color-state-disabled-light: var(--ne-ref-color-grey-30);--ne-alias-color-accent-light: var(--ne-ref-color-blue-50);--ne-alias-color-accent-default: var(--ne-ref-color-blue-60);--ne-alias-color-accent-dark: var(--ne-ref-color-blue-70);--ne-alias-color-text-light: var(--ne-ref-color-grey-60);--ne-alias-color-text-default: var(--ne-ref-color-grey-90);--ne-alias-color-text-light-text-on-dark-bg: var(--ne-ref-color-white);--ne-alias-color-state-focus-on-blue: var(--ne-alias-color-accent-dark);--ne-alias-color-state-hover-on-blue: var(--ne-alias-color-accent-dark)}:root{--ne-alias-font-family-title: var(--ne-ref-font-family-montserrat);--ne-alias-font-family-body: var(--ne-ref-font-family-open-sans)}:root{--ne-alias-font-size-title: var(--ne-ref-font-size-06);--ne-alias-font-size-subtext: var(--ne-ref-font-size-02);--ne-alias-font-size-body: var(--ne-ref-font-size-04)}:root{--ne-alias-border-width-focus: var(--ne-ref-border-width-large);--ne-alias-border-width-default: var(--ne-ref-border-width-small)}:root{--ne-alias-sizing-icon-xx-large: var(--ne-ref-sizing-11);--ne-alias-sizing-icon-x-large: var(--ne-ref-sizing-08);--ne-alias-sizing-icon-large: var(--ne-ref-sizing-06);--ne-alias-sizing-icon-default: var(--ne-ref-sizing-04);--ne-alias-sizing-icon-small: var(--ne-ref-sizing-02)}:root{--ne-alias-border-focus: var(--ne-ref-color-blue-20);--ne-alias-border-dark-grey: var(--ne-ref-color-grey40);--ne-alias-border-grey: var(--ne-ref-color-grey-10)}\n\n/*# sourceMappingURL=earthling-base.min.css.map */","",{version:3,sources:["file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/typography.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/color.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-color.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-border-radius.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-spacing.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-font-size.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-border-width.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-sizing.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-font-weight.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-font-family.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-line-height.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-paragraph-spacing.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-letter-spacing.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-text-decoration.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-shadow.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-color.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-font-family.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-font-size.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-border-width.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-sizing.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-border.scss","webpack://./../../node_modules/@nintexglobal/earthling-styles/dist/earthling-base.min.css"],names:[],mappings:"AAAQ,MCEN,qBAAA,CACA,gBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,oBAAA,CACA,oBAAA,CACA,oBAAA,CACA,oBAAA,CACA,sBAAA,CACA,sBAAA,CACA,sBAAA,CACA,sBAAA,CACA,uBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,oBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,oBAAA,CACA,oBAAA,CACA,gCAAA,CACA,wCAAA,CAKA,yCAAA,CACA,4CAAA,CAKA,+CAAA,CACA,uCAAA,CAKA,4CAAA,CAKA,iDAAA,CACA,mDAAA,CAKA,2CAAA,CACA,uDAAA,CAKA,2CAAA,CACA,uCAAA,CAKA,uCAAA,CACA,wCAAA,CACA,oCAAA,CACA,0CAAA,CACA,wCAAA,CACA,wCAAA,CACA,yCAAA,CACA,2CAAA,CACA,yCAAA,CACA,kDAAA,CAOA,mDAAA,CACA,+CAAA,CACA,2CAAA,CAKA,uDAAA,CACA,mDAAA,CACA,+CAAA,CAKA,oDAAA,CACA,gDAAA,CACA,2CAAA,CAKA,gDAAA,CACA,4CAAA,CACA,yCAAA,CAKA,qDAAA,CACA,iDAAA,CACA,6CAAA,CAOA,gDAAA,CACA,0CAAA,CAKA,oDAAA,CACA,kDAAA,CACA,gDAAA,CACA,gFAAA,CACA,sFAAA,CACA,4CAAA,CAKA,mDAAA,CACA,+CAAA,CACA,2CAAA,CACA,2EAAA,CACA,wEAAA,CAKA,sDAAA,CACA,oDAAA,CACA,iDAAA,CACA,kFAAA,CACA,uDAAA,CAKA,qDAAA,CACA,mDAAA,CACA,+CAAA,CAKA,uCAAA,CAKA,yCAAA,CACA,uCAAA,CACA,6CAAA,CACA,6DAAA,CACA,6CAAA,CACA,qCAAA,CACA,yCAAA,CACA,0CAAA,CACA,qDAAA,CACA,4CAAA,CACA,+CAAA,CACA,oDAAA,CACA,kDAAA,CACA,uDAAA,CAKA,gDAAA,CACA,4CAAA,CACA,0CAAA,CAKA,+CAAA,CACA,6CAAA,CACA,2CAAA,CAKA,0DAAA,CACA,wDAAA,CACA,mEAAA,CACA,iEAAA,CACA,0DAAA,CACA,wDAAA,CACA,mEAAA,CACA,iEAAA,CACA,2EAAA,CAOA,0CAAA,CACA,yEAAA,CACA,+EAAA,CACA,4CAAA,CACA,qEAAA,CACA,4CAAA,CACA,qDAAA,CAIA,mDAAA,CD9OF,MACE,8DAAA,CACA,kEAAA,CEFF,MACE,iCAAA,CACA,iCAAA,CACA,oCAAA,CACA,gCAAA,CACA,gCAAA,CACA,gCAAA,CACA,iCAAA,CACA,iCAAA,CACA,iCAAA,CACA,iCAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,8BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,8BAAA,CACA,8BAAA,CACA,8BAAA,CACA,8BAAA,CACA,8BAAA,CACA,8BAAA,CACA,8BAAA,CACA,8BAAA,CACA,8BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,qCAAA,CACA,6BAAA,CC1CF,MACE,kCAAA,CACA,mCAAA,CACA,oCAAA,CACA,qCAAA,CACA,8BAAA,CCLF,MACE,+BAAA,CACA,gCAAA,CACA,6BAAA,CACA,6BAAA,CACA,4BAAA,CACA,8BAAA,CACA,+BAAA,CACA,iCAAA,CACA,mCAAA,CACA,wBAAA,CCVF,MACE,6BAAA,CACA,4BAAA,CACA,6BAAA,CACA,8BAAA,CACA,0BAAA,CACA,8BAAA,CACA,+BAAA,CACA,6BAAA,CACA,8BAAA,CACA,8BAAA,CACA,0BAAA,CCXF,MACE,gCAAA,CACA,iCAAA,CACA,gCAAA,CCHF,MACE,0BAAA,CACA,uBAAA,CACA,0BAAA,CACA,yBAAA,CACA,0BAAA,CACA,uBAAA,CACA,0BAAA,CACA,yBAAA,CACA,0BAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,yBAAA,CCdF,MACE,+BAAA,CACA,wCAAA,CACA,qCAAA,CCHF,MACE,2CAAA,CACA,yCAAA,CCFF,MACE,kCAAA,CACA,mCAAA,CACA,qCAAA,CCHF,MACE,oCAAA,CACA,qCAAA,CACA,kCAAA,CACA,qCAAA,CACA,sCAAA,CACA,oCAAA,CACA,qCAAA,CCPF,MACE,kCAAA,CACA,kCAAA,CACA,kCAAA,CACA,mCAAA,CACA,kCAAA,CACA,mCAAA,CACA,oCAAA,CACA,kCAAA,CACA,mCAAA,CACA,mCAAA,CACA,kCAAA,CCXF,MACE,6CAAA,CACA,mCAAA,CCFF,MACE,kEAAA,CACA,kEAAA,CCFF,MACE,6DAAA,CACA,sDAAA,CACA,0DAAA,CACA,mEAAA,CACA,qEAAA,CACA,kEAAA,CACA,+DAAA,CACA,iEAAA,CACA,8DAAA,CACA,mEAAA,CACA,iEAAA,CACA,mEAAA,CACA,oEAAA,CACA,sEAAA,CACA,mEAAA,CACA,+DAAA,CACA,iEAAA,CACA,8DAAA,CACA,8DAAA,CACA,gEAAA,CACA,6DAAA,CACA,+DAAA,CACA,kEAAA,CACA,+DAAA,CACA,kEAAA,CACA,iEAAA,CACA,oEAAA,CACA,kEAAA,CACA,0DAAA,CACA,4DAAA,CACA,yDAAA,CACA,wDAAA,CACA,0DAAA,CACA,sEAAA,CACA,uEAAA,CACA,uEAAA,CCpCF,MACE,kEAAA,CACA,gEAAA,CCFF,MACE,sDAAA,CACA,wDAAA,CACA,qDAAA,CCHF,MACE,+DAAA,CACA,iEAAA,CCFF,MACE,wDAAA,CACA,uDAAA,CACA,qDAAA,CACA,uDAAA,CACA,qDAAA,CCLF,MACE,oDAAA,CACA,uDAAA,CACA,mDAAA;;ACNF,iDAAiD",sourceRoot:""}]);const a=s},2609:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var o="",n=void 0!==t[5];return t[4]&&(o+="@supports (".concat(t[4],") {")),t[2]&&(o+="@media ".concat(t[2]," {")),n&&(o+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),o+=e(t),n&&(o+="}"),t[2]&&(o+="}"),t[4]&&(o+="}"),o})).join("")},t.i=function(e,o,n,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(n)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(s[l]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);n&&s[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),o&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=o):d[2]=o),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},272:e=>{"use strict";e.exports=function(e){var t=e[1],o=e[3];if(!o)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),i="/*# ".concat(r," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},6062:e=>{"use strict";var t=[];function o(e){for(var o=-1,n=0;n<t.length;n++)if(t[n].identifier===e){o=n;break}return o}function n(e,n){for(var i={},s=[],a=0;a<e.length;a++){var l=e[a],c=n.base?l[0]+n.base:l[0],d=i[c]||0,u="".concat(c," ").concat(d);i[c]=d+1;var h=o(u),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==h)t[h].references++,t[h].updater(p);else{var f=r(p,n);n.byIndex=a,t.splice(a,0,{identifier:u,updater:f,references:1})}s.push(u)}return s}function r(e,t){var o=t.domAPI(t);o.update(e);return function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;o.update(e=t)}else o.remove()}}e.exports=function(e,r){var i=n(e=e||[],r=r||{});return function(e){e=e||[];for(var s=0;s<i.length;s++){var a=o(i[s]);t[a].references--}for(var l=n(e,r),c=0;c<i.length;c++){var d=o(i[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}i=l}}},6793:e=>{"use strict";var t={};e.exports=function(e,o){var n=function(e){if(void 0===t[e]){var o=document.querySelector(e);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(e){o=null}t[e]=o}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(o)}},1173:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},7892:(e,t,o)=>{"use strict";e.exports=function(e){var t=o.nc;t&&e.setAttribute("nonce",t)}},4036:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(o){!function(e,t,o){var n="";o.supports&&(n+="@supports (".concat(o.supports,") {")),o.media&&(n+="@media ".concat(o.media," {"));var r=void 0!==o.layer;r&&(n+="@layer".concat(o.layer.length>0?" ".concat(o.layer):""," {")),n+=o.css,r&&(n+="}"),o.media&&(n+="}"),o.supports&&(n+="}");var i=o.sourceMap;i&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,o)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},2464:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},5846:(e,t,o)=>{"use strict";o(2443);const n=new WeakMap;function r(e){return t=>{if(function(e,t){let o=t;for(;o;){if(n.get(o)===e)return!0;o=Object.getPrototypeOf(o)}return!1}(e,t))return t;const o=e(t);return n.set(o,e),o}}var i=o(9793);const s=!!ShadowRoot.prototype.createElement,a=r((e=>class extends e{static get scopedElements(){return{}}static get shadowRootOptions(){return this.__shadowRootOptions}static set shadowRootOptions(e){this.__shadowRootOptions=e}static get elementStyles(){return this.__elementStyles}static set elementStyles(e){this.__elementStyles=e}constructor(...e){super(),this.renderOptions=this.renderOptions||void 0}get registry(){return this.constructor.__registry}set registry(e){this.constructor.__registry=e}createRenderRoot(){const{scopedElements:e,shadowRootOptions:t,elementStyles:o}=this.constructor;if(!this.registry||this.registry===this.constructor.__registry&&!Object.prototype.hasOwnProperty.call(this.constructor,"__registry")){this.registry=s?new CustomElementRegistry:customElements;for(const[t,o]of Object.entries(e))this.defineScopedElement(t,o)}const n={mode:"open",...t,customElements:this.registry},r=this.attachShadow(n);return s&&(this.renderOptions.creationScope=r),r instanceof ShadowRoot&&((0,i.ec)(r,o),this.renderOptions.renderBefore=this.renderOptions.renderBefore||r.firstChild),r}createScopedElement(e){return(s?this.shadowRoot:document).createElement(e)}defineScopedElement(e,t){const o=this.registry.get(e);return o&&!1===s&&o!==t&&console.error([`You are trying to re-register the "${e}" custom element with a different class via ScopedElementsMixin.`,"This is only possible with a CustomElementRegistry.","Your browser does not support this feature so you will need to load a polyfill for it.",'Load "@webcomponents/scoped-custom-element-registry" before you register ANY web component to the global customElements registry.','e.g. add "<script src="/node_modules/@webcomponents/scoped-custom-element-registry/scoped-custom-element-registry.min.js"><\/script>" as your first script tag.',"For more details you can visit https://open-wc.org/docs/development/scoped-elements/"].join("\n")),o?this.registry.get(e):this.registry.define(e,t)}getScopedTagName(e){return this.constructor.getScopedTagName(e)}static getScopedTagName(e){return this.__registry.get(e)?e:void 0}}));var l=o(3192);const c=e=>t=>"function"==typeof t?((e,t)=>(customElements.define(e,t),t))(e,t):((e,t)=>{const{kind:o,elements:n}=t;return{kind:o,elements:n,finisher(t){customElements.define(e,t)}}})(e,t),d=(e,t)=>"method"===t.kind&&t.descriptor&&!("value"in t.descriptor)?{...t,finisher(o){o.createProperty(t.key,e)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:t.key,initializer(){"function"==typeof t.initializer&&(this[t.key]=t.initializer.call(this))},finisher(o){o.createProperty(t.key,e)}},u=(e,t,o)=>{t.constructor.createProperty(o,e)};function h(e){return(t,o)=>void 0!==o?u(e,t,o):d(e,t)}function p(e){return h({...e,state:!0})}const f=({finisher:e,descriptor:t})=>(o,n)=>{var r;if(void 0===n){const n=null!==(r=o.originalKey)&&void 0!==r?r:o.key,i=null!=t?{kind:"method",placement:"prototype",key:n,descriptor:t(o.key)}:{...o,key:n};return null!=e&&(i.finisher=function(t){e(t,n)}),i}{const r=o.constructor;void 0!==t&&Object.defineProperty(o,n,t(n)),null==e||e(r,n)}};var g;const A=null!=(null===(g=window.HTMLSlotElement)||void 0===g?void 0:g.prototype.assignedElements)?(e,t)=>e.assignedElements(t):(e,t)=>e.assignedNodes(t).filter((e=>e.nodeType===Node.ELEMENT_NODE));var v=o(6062),b=o.n(v),m=o(4036),y=o.n(m),C=o(6793),w=o.n(C),x=o(7892),k=o.n(x),_=o(1173),$=o.n(_),S=o(2464),E=o.n(S),L=o(9526),O={};O.styleTagTransform=E(),O.setAttributes=k(),O.insert=w().bind(null,"head"),O.domAPI=y(),O.insertStyleElement=$();b()(L.Z,O);L.Z&&L.Z.locals&&L.Z.locals;const N=l.iv`
  :host {
    all: initial;
  }
`,R=(l.iv`0.75em`,l.iv`1.5em`,l.iv`1.625em`,[N,l.iv`
  :host {
    display: grid;
    grid-template-rows: min-content auto;

    min-height: 100%;
  }
`]),T=[N,l.iv`
  :host {
    display: grid;
  }
  .row {
    padding: 1em;
  }

  .split {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .admin-container {
    display: grid;
    grid-template-rows: auto auto 1fr;
    grid-template-columns: auto auto;
    gap: 1em;
    height: 100%;
    grid-auto-flow: column;
  }
`];function D(e,t,o,n){var r,i=arguments.length,s=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,o,n);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(s=(i<3?r(s):i>3?r(t,o,s):r(t,o))||s);return i>3&&s&&Object.defineProperty(t,o,s),s}const P=l.iv`
  :host {
    all: initial;
  }

  .hidden {
    display: none;
  }
`;var F=o(3311);const B=1,j=2,M=e=>(...t)=>({_$litDirective$:e,values:t});class z{constructor(e){}get _$AU(){return this._$AM._$AU}_$AT(e,t,o){this._$Ct=e,this._$AM=t,this._$Ci=o}_$AS(e,t){return this.update(e,t)}update(e,t){return this.render(...t)}}const V=M(class extends z{constructor(e){var t;if(super(e),e.type!==B||"class"!==e.name||(null===(t=e.strings)||void 0===t?void 0:t.length)>2)throw Error("`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.")}render(e){return" "+Object.keys(e).filter((t=>e[t])).join(" ")+" "}update(e,[t]){var o,n;if(void 0===this.it){this.it=new Set,void 0!==e.strings&&(this.nt=new Set(e.strings.join(" ").split(/\s/).filter((e=>""!==e))));for(const e in t)t[e]&&!(null===(o=this.nt)||void 0===o?void 0:o.has(e))&&this.it.add(e);return this.render(t)}const r=e.element.classList;this.it.forEach((e=>{e in t||(r.remove(e),this.it.delete(e))}));for(const e in t){const o=!!t[e];o===this.it.has(e)||(null===(n=this.nt)||void 0===n?void 0:n.has(e))||(o?(r.add(e),this.it.add(e)):(r.remove(e),this.it.delete(e)))}return F.Jb}}),I=new WeakMap,U=e=>"function"==typeof e&&I.has(e),H="undefined"!=typeof window&&null!=window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,q={},K={},W=`{{lit-${String(Math.random()).slice(2)}}}`,J=`\x3c!--${W}--\x3e`,G=new RegExp(`${W}|${J}`),Y="$lit$";class Z{constructor(e,t){this.parts=[],this.element=t;const o=[],n=[],r=document.createTreeWalker(t.content,133,null,!1);let i=0,s=-1,a=0;const{strings:l,values:{length:c}}=e;for(;a<c;){const e=r.nextNode();if(null!==e){if(s++,1===e.nodeType){if(e.hasAttributes()){const t=e.attributes,{length:o}=t;let n=0;for(let e=0;e<o;e++)Q(t[e].name,Y)&&n++;for(;n-- >0;){const t=l[a],o=te.exec(t)[2],n=o.toLowerCase()+Y,r=e.getAttribute(n);e.removeAttribute(n);const i=r.split(G);this.parts.push({type:"attribute",index:s,name:o,strings:i}),a+=i.length-1}}"TEMPLATE"===e.tagName&&(n.push(e),r.currentNode=e.content)}else if(3===e.nodeType){const t=e.data;if(t.indexOf(W)>=0){const n=e.parentNode,r=t.split(G),i=r.length-1;for(let t=0;t<i;t++){let o,i=r[t];if(""===i)o=ee();else{const e=te.exec(i);null!==e&&Q(e[2],Y)&&(i=i.slice(0,e.index)+e[1]+e[2].slice(0,-5)+e[3]),o=document.createTextNode(i)}n.insertBefore(o,e),this.parts.push({type:"node",index:++s})}""===r[i]?(n.insertBefore(ee(),e),o.push(e)):e.data=r[i],a+=i}}else if(8===e.nodeType)if(e.data===W){const t=e.parentNode;null!==e.previousSibling&&s!==i||(s++,t.insertBefore(ee(),e)),i=s,this.parts.push({type:"node",index:s}),null===e.nextSibling?e.data="":(o.push(e),s--),a++}else{let t=-1;for(;-1!==(t=e.data.indexOf(W,t+1));)this.parts.push({type:"node",index:-1}),a++}}else r.currentNode=n.pop()}for(const e of o)e.parentNode.removeChild(e)}}const Q=(e,t)=>{const o=e.length-t.length;return o>=0&&e.slice(o)===t},X=e=>-1!==e.index,ee=()=>document.createComment(""),te=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;class oe{constructor(e,t,o){this.__parts=[],this.template=e,this.processor=t,this.options=o}update(e){let t=0;for(const o of this.__parts)void 0!==o&&o.setValue(e[t]),t++;for(const e of this.__parts)void 0!==e&&e.commit()}_clone(){const e=H?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),t=[],o=this.template.parts,n=document.createTreeWalker(e,133,null,!1);let r,i=0,s=0,a=n.nextNode();for(;i<o.length;)if(r=o[i],X(r)){for(;s<r.index;)s++,"TEMPLATE"===a.nodeName&&(t.push(a),n.currentNode=a.content),null===(a=n.nextNode())&&(n.currentNode=t.pop(),a=n.nextNode());if("node"===r.type){const e=this.processor.handleTextExpression(this.options);e.insertAfterNode(a.previousSibling),this.__parts.push(e)}else this.__parts.push(...this.processor.handleAttributeExpressions(a,r.name,r.strings,this.options));i++}else this.__parts.push(void 0),i++;return H&&(document.adoptNode(e),customElements.upgrade(e)),e}}const ne=window.trustedTypes&&trustedTypes.createPolicy("lit-html",{createHTML:e=>e}),re=` ${W} `;class ie{constructor(e,t,o,n){this.strings=e,this.values=t,this.type=o,this.processor=n}getHTML(){const e=this.strings.length-1;let t="",o=!1;for(let n=0;n<e;n++){const e=this.strings[n],r=e.lastIndexOf("\x3c!--");o=(r>-1||o)&&-1===e.indexOf("--\x3e",r+1);const i=te.exec(e);t+=null===i?e+(o?re:J):e.substr(0,i.index)+i[1]+i[2]+Y+i[3]+W}return t+=this.strings[e],t}getTemplateElement(){const e=document.createElement("template");let t=this.getHTML();return void 0!==ne&&(t=ne.createHTML(t)),e.innerHTML=t,e}}const se=e=>null===e||!("object"==typeof e||"function"==typeof e),ae=e=>Array.isArray(e)||!(!e||!e[Symbol.iterator]);class le{constructor(e,t,o){this.dirty=!0,this.element=e,this.name=t,this.strings=o,this.parts=[];for(let e=0;e<o.length-1;e++)this.parts[e]=this._createPart()}_createPart(){return new ce(this)}_getValue(){const e=this.strings,t=e.length-1,o=this.parts;if(1===t&&""===e[0]&&""===e[1]){const e=o[0].value;if("symbol"==typeof e)return String(e);if("string"==typeof e||!ae(e))return e}let n="";for(let r=0;r<t;r++){n+=e[r];const t=o[r];if(void 0!==t){const e=t.value;if(se(e)||!ae(e))n+="string"==typeof e?e:String(e);else for(const t of e)n+="string"==typeof t?t:String(t)}}return n+=e[t],n}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class ce{constructor(e){this.value=void 0,this.committer=e}setValue(e){e===q||se(e)&&e===this.value||(this.value=e,U(e)||(this.committer.dirty=!0))}commit(){for(;U(this.value);){const e=this.value;this.value=q,e(this)}this.value!==q&&this.committer.commit()}}class de{constructor(e){this.value=void 0,this.__pendingValue=void 0,this.options=e}appendInto(e){this.startNode=e.appendChild(ee()),this.endNode=e.appendChild(ee())}insertAfterNode(e){this.startNode=e,this.endNode=e.nextSibling}appendIntoPart(e){e.__insert(this.startNode=ee()),e.__insert(this.endNode=ee())}insertAfterPart(e){e.__insert(this.startNode=ee()),this.endNode=e.endNode,e.endNode=this.startNode}setValue(e){this.__pendingValue=e}commit(){if(null===this.startNode.parentNode)return;for(;U(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=q,e(this)}const e=this.__pendingValue;e!==q&&(se(e)?e!==this.value&&this.__commitText(e):e instanceof ie?this.__commitTemplateResult(e):e instanceof Node?this.__commitNode(e):ae(e)?this.__commitIterable(e):e===K?(this.value=K,this.clear()):this.__commitText(e))}__insert(e){this.endNode.parentNode.insertBefore(e,this.endNode)}__commitNode(e){this.value!==e&&(this.clear(),this.__insert(e),this.value=e)}__commitText(e){const t=this.startNode.nextSibling,o="string"==typeof(e=null==e?"":e)?e:String(e);t===this.endNode.previousSibling&&3===t.nodeType?t.data=o:this.__commitNode(document.createTextNode(o)),this.value=e}__commitTemplateResult(e){const t=this.options.templateFactory(e);if(this.value instanceof oe&&this.value.template===t)this.value.update(e.values);else{const o=new oe(t,e.processor,this.options),n=o._clone();o.update(e.values),this.__commitNode(n),this.value=o}}__commitIterable(e){Array.isArray(this.value)||(this.value=[],this.clear());const t=this.value;let o,n=0;for(const r of e)o=t[n],void 0===o&&(o=new de(this.options),t.push(o),0===n?o.appendIntoPart(this):o.insertAfterPart(t[n-1])),o.setValue(r),o.commit(),n++;n<t.length&&(t.length=n,this.clear(o&&o.endNode))}clear(e=this.startNode){((e,t,o=null)=>{for(;t!==o;){const o=t.nextSibling;e.removeChild(t),t=o}})(this.startNode.parentNode,e.nextSibling,this.endNode)}}class ue{constructor(e,t,o){if(this.value=void 0,this.__pendingValue=void 0,2!==o.length||""!==o[0]||""!==o[1])throw new Error("Boolean attributes can only contain a single expression");this.element=e,this.name=t,this.strings=o}setValue(e){this.__pendingValue=e}commit(){for(;U(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=q,e(this)}if(this.__pendingValue===q)return;const e=!!this.__pendingValue;this.value!==e&&(e?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name),this.value=e),this.__pendingValue=q}}class he extends le{constructor(e,t,o){super(e,t,o),this.single=2===o.length&&""===o[0]&&""===o[1]}_createPart(){return new pe(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class pe extends ce{}let fe=!1;(()=>{try{const e={get capture(){return fe=!0,!1}};window.addEventListener("test",e,e),window.removeEventListener("test",e,e)}catch(e){}})();class ge{constructor(e,t,o){this.value=void 0,this.__pendingValue=void 0,this.element=e,this.eventName=t,this.eventContext=o,this.__boundHandleEvent=e=>this.handleEvent(e)}setValue(e){this.__pendingValue=e}commit(){for(;U(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=q,e(this)}if(this.__pendingValue===q)return;const e=this.__pendingValue,t=this.value,o=null==e||null!=t&&(e.capture!==t.capture||e.once!==t.once||e.passive!==t.passive),n=null!=e&&(null==t||o);o&&this.element.removeEventListener(this.eventName,this.__boundHandleEvent,this.__options),n&&(this.__options=Ae(e),this.element.addEventListener(this.eventName,this.__boundHandleEvent,this.__options)),this.value=e,this.__pendingValue=q}handleEvent(e){"function"==typeof this.value?this.value.call(this.eventContext||this.element,e):this.value.handleEvent(e)}}const Ae=e=>e&&(fe?{capture:e.capture,passive:e.passive,once:e.once}:e.capture);new class{handleAttributeExpressions(e,t,o,n){const r=t[0];if("."===r){return new he(e,t.slice(1),o).parts}if("@"===r)return[new ge(e,t.slice(1),n.eventContext)];if("?"===r)return[new ue(e,t.slice(1),o)];return new le(e,t,o).parts}handleTextExpression(e){return new de(e)}};const ve=new Map;new WeakMap;"undefined"!=typeof window&&(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.4.1");class be{constructor(e){this._parent=e,this._cache=new Map}has(e){return!!(this._cache.has(e)||this._parent&&this._parent._cache.has(e))}set(e,t){return this._cache.set(e,t),this}get(e){return this._cache.get(e)||this._parent&&this._parent._cache.get(e)}}let me=Math.round(1e5*Math.random());const ye="-|\\.|[0-9]|[a-z]",Ce=new RegExp(`[a-z](${ye})*-(${ye})*`),we=(e,t)=>{const o=`${e}-${me+=1}`;return((e,t)=>!!t.get(e))(o,t)?we(e,t):o};function xe(e,t=customElements){if(o=e,null===Ce.exec(o))throw new Error("tagName is invalid");var o;return we(e,t)}const ke=new WeakMap,_e=(e,t)=>ke.set(t,e),$e=e=>ke.get(e);const Se=(e,t,o=customElements)=>{_e(e,t),o.define(e,class extends t{})},Ee=(e,t,o)=>{const n=customElements;if(!function(e){let t=e;for(;t;){if(t===window.HTMLElement||"HTMLElement"===t.name)return!0;t=Object.getPrototypeOf(t)}return!1}(t))return((e,t,o)=>{const n=xe(e,t);if(!o)throw new Error("Lazy scoped elements requires the use of tags cache");return o.set(e,n),n})(e,n,o);if(t===customElements.get(e))return _e(e,t),e;const r=xe(e,n);return Se(r,t,n),r};function Le(e,t,o=void 0){return $e(t)||o&&o.get(e)||Ee(e,t,o)}const Oe="-|\\.|[0-9]|[a-z]",Ne=new RegExp(`<\\/?([a-z](${Oe})*-(${Oe})*)`,"g"),Re=new be,Te=(e,t,o,n)=>{const r=e.map((e=>{let o=e;const r=(e=>{const t=[];let o;for(;null!==(o=Ne.exec(e));)t.push(o);return t})(e);for(let e=r.length-1;e>=0;e-=1){const i=r[e],[s,a]=i,l=Le(a,t[a],n),c=i.index+s.length-a.length,d=c+a.length,u=0===s.indexOf("</");o=o.slice(0,c)+(u?l:`${l} data-tag-name="${a}"`)+o.slice(d)}return o}));return o.set(e,r),r};let De=!0;const{ShadyCSS:Pe}=window;(void 0===Pe||void 0===Pe.prepareTemplateDom)&&(De=!1);const Fe=new WeakMap,Be=new WeakMap,je=e=>(Be.has(e)||Be.set(e,new be(Be.get(e.constructor))),Be.get(e)),Me=(e,t,o,n)=>e.map((e=>e instanceof ie?ze(e,t,o,n):Array.isArray(e)?Me(e,t,o,n):e)),ze=(e,t,o,n)=>new ie(function(e,t,o=Re,n){return o.get(e)||Te(e,t,o,n)}(e.strings,t,o,n),Me(e.values,t,o,n),e.type,e.processor),Ve=(e,t,o,n)=>r=>{const i=ze(r,t,o,n);return(e=>t=>{const o=((e,t)=>`${e}--${t}`)(t.type,e);let n=ve.get(o);void 0===n&&(n={stringsArray:new WeakMap,keyString:new Map},ve.set(o,n));let r=n.stringsArray.get(t.strings);if(void 0!==r)return r;const i=t.strings.join(W);if(r=n.keyString.get(i),void 0===r){const o=t.getTemplateElement();De&&Pe.prepareTemplateDom(o,e),r=new Z(t,o),n.keyString.set(i,r)}return n.stringsArray.set(t.strings,r),r})(e)(i)},Ie=r((e=>class extends e{static get scopedElements(){return{}}static render(e,t,o){if(!o||"object"!=typeof o||!o.scopeName)throw new Error("The `scopeName` option is required.");const{scopeName:n,eventContext:r}=o,i=(s=r,Fe.has(s)||Fe.set(s,new be(Fe.get(s.constructor))),Fe.get(s));var s;const a=je(r),{scopedElements:l}=this;return super.render(e,t,{...o,templateFactory:Ve(n,l,i,a)})}defineScopedElement(e,t){return function(e,t,o){const n=o.get(e);n?void 0===customElements.get(n)&&Se(n,t,customElements):o.set(e,Le(e,t,o))}(e,t,je(this))}static getScopedTagName(e){const t=this.scopedElements[e];return t?Le(e,t,je(this)):je(this).get(e)}getScopedTagName(e){const t=this.constructor.scopedElements[e];return t?Le(e,t,je(this)):je(this).get(e)}})),Ue=(e,t,o)=>{const n={bubbles:!0,cancelable:!1,composed:!0,...o},r=new CustomEvent(t,n);return e.dispatchEvent(r),r},He=l.iv`
  * {
  --ne-button-color-background-primary-default: var(--ne-ref-color-blue-60, #006BD6);
  --ne-button-color-background-primary-hover: var(--ne-ref-color-blue-70, #0052A3);
  --ne-button-color-background-primary-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-background-secondary-default: var(--ne-ref-color-white, #ffffff);
  --ne-button-color-background-secondary-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-button-color-background-secondary-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-background-destructive-default: var(--ne-ref-color-red-60, #B80000);
  --ne-button-color-background-destructive-hover: var(--ne-ref-color-red-70, #7C0D0E);
  --ne-button-color-background-destructive-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-background-text-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-button-color-background-text-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-background-inverse-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-button-color-background-inverse-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-border-primary-default: var(--ne-ref-color-blue-70, #0052A3);
  --ne-button-color-border-secondary-default: var(--ne-ref-color-grey-10, #E2E3E4);
  --ne-button-color-border-destructive-default: var(--ne-ref-color-red-70, #7C0D0E);
  --ne-button-color-border-focus: var(--ne-ref-color-blue-20, #A3D1FF);
  --ne-button-color-border-inverse-default: var(--ne-ref-color-white, #ffffff);
  --ne-button-color-border-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-label-primary-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-button-color-label-primary-default: var(--ne-ref-color-white, #ffffff);
  --ne-button-color-label-secondary-default: var(--ne-ref-color-blue-60, #006BD6);
  --ne-button-color-label-secondary-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-button-color-label-destructive-default: var(--ne-ref-color-white, #ffffff);
  --ne-button-color-label-destructive-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-button-color-label-text-default: var(--ne-ref-color-blue-60, #006BD6);
  --ne-button-color-label-text-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-button-color-label-inverse-default: var(--ne-ref-color-white, #ffffff);
  --ne-button-color-label-inverse-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-button-border-radius: var(--ne-ref-border-radius-medium, .25em);
  --ne-button-padding-horizontal: var(--ne-ref-spacing-small, 0.75em);
  --ne-button-padding-vertical: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-button-gap: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-button-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-button-font-size: var(--ne-ref-font-size-04, 0.875em);
  --ne-button-sizing-icon: var(--ne-ref-sizing-04, 1em);
  --ne-button-border-width-default: var(--ne-ref-border-width-small, 1px);
  --ne-button-border-width-focus: var(--ne-ref-border-width-large, 4px);
}
`,qe="important",Ke=" !"+qe,We=M(class extends z{constructor(e){var t;if(super(e),e.type!==B||"style"!==e.name||(null===(t=e.strings)||void 0===t?void 0:t.length)>2)throw Error("The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.")}render(e){return Object.keys(e).reduce(((t,o)=>{const n=e[o];return null==n?t:t+`${o=o.includes("-")?o:o.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g,"-$&").toLowerCase()}:${n};`}),"")}update(e,[t]){const{style:o}=e.element;if(void 0===this.ut){this.ut=new Set;for(const e in t)this.ut.add(e);return this.render(t)}this.ut.forEach((e=>{null==t[e]&&(this.ut.delete(e),e.includes("-")?o.removeProperty(e):o[e]="")}));for(const e in t){const n=t[e];if(null!=n){this.ut.add(e);const t="string"==typeof n&&n.endsWith(Ke);e.includes("-")||t?o.setProperty(e,t?n.slice(0,-11):n,t?qe:""):o[e]=n}}return F.Jb}}),{I:Je}=F._$LH,Ge=(e,t)=>{var o,n;const r=e._$AN;if(void 0===r)return!1;for(const e of r)null===(n=(o=e)._$AO)||void 0===n||n.call(o,t,!1),Ge(e,t);return!0},Ye=e=>{let t,o;do{if(void 0===(t=e._$AM))break;o=t._$AN,o.delete(e),e=t}while(0===(null==o?void 0:o.size))},Ze=e=>{for(let t;t=e._$AM;e=t){let o=t._$AN;if(void 0===o)t._$AN=o=new Set;else if(o.has(e))break;o.add(e),et(t)}};function Qe(e){void 0!==this._$AN?(Ye(this),this._$AM=e,Ze(this)):this._$AM=e}function Xe(e,t=!1,o=0){const n=this._$AH,r=this._$AN;if(void 0!==r&&0!==r.size)if(t)if(Array.isArray(n))for(let e=o;e<n.length;e++)Ge(n[e],!1),Ye(n[e]);else null!=n&&(Ge(n,!1),Ye(n));else Ge(this,e)}const et=e=>{var t,o,n,r;e.type==j&&(null!==(t=(n=e)._$AP)&&void 0!==t||(n._$AP=Xe),null!==(o=(r=e)._$AQ)&&void 0!==o||(r._$AQ=Qe))};class tt extends z{constructor(){super(...arguments),this._$AN=void 0}_$AT(e,t,o){super._$AT(e,t,o),Ze(this),this.isConnected=e._$AU}_$AO(e,t=!0){var o,n;e!==this.isConnected&&(this.isConnected=e,e?null===(o=this.reconnected)||void 0===o||o.call(this):null===(n=this.disconnected)||void 0===n||n.call(this)),t&&(Ge(this,e),Ye(this))}setValue(e){if((e=>void 0===e.strings)(this._$Ct))this._$Ct._$AI(e,this);else{const t=[...this._$Ct._$AH];t[this._$Ci]=e,this._$Ct._$AI(t,this,0)}}disconnected(){}reconnected(){}}class ot{constructor(e){this.G=e}disconnect(){this.G=void 0}reconnect(e){this.G=e}deref(){return this.G}}class nt{constructor(){this.Y=void 0,this.Z=void 0}get(){return this.Y}pause(){var e;null!==(e=this.Y)&&void 0!==e||(this.Y=new Promise((e=>this.Z=e)))}resume(){var e;null===(e=this.Z)||void 0===e||e.call(this),this.Y=this.Z=void 0}}const rt=e=>!(e=>null===e||"object"!=typeof e&&"function"!=typeof e)(e)&&"function"==typeof e.then,it=1073741823;const st=M(class extends tt{constructor(){super(...arguments),this._$C_t=it,this._$Cwt=[],this._$Cq=new ot(this),this._$CK=new nt}render(...e){var t;return null!==(t=e.find((e=>!rt(e))))&&void 0!==t?t:F.Jb}update(e,t){const o=this._$Cwt;let n=o.length;this._$Cwt=t;const r=this._$Cq,i=this._$CK;this.isConnected||this.disconnected();for(let e=0;e<t.length&&!(e>this._$C_t);e++){const s=t[e];if(!rt(s))return this._$C_t=e,s;e<n&&s===o[e]||(this._$C_t=it,n=0,Promise.resolve(s).then((async e=>{for(;i.get();)await i.get();const t=r.deref();if(void 0!==t){const o=t._$Cwt.indexOf(s);o>-1&&o<t._$C_t&&(t._$C_t=o,t.setValue(e))}})))}return F.Jb}disconnected(){this._$Cq.disconnect(),this._$CK.pause()}reconnected(){this._$Cq.reconnect(this),this._$CK.resume()}}),at={_export:()=>o.e(840).then(o.bind(o,8388)).then((e=>e._export)),_import:()=>o.e(840).then(o.bind(o,9699)).then((e=>e._import)),add:()=>o.e(840).then(o.bind(o,7352)).then((e=>e.add)),archive:()=>o.e(840).then(o.bind(o,6939)).then((e=>e.archive)),arrowDown:()=>o.e(840).then(o.bind(o,4783)).then((e=>e.arrowDown)),arrowUp:()=>o.e(840).then(o.bind(o,7404)).then((e=>e.arrowUp)),caretDown:()=>o.e(840).then(o.bind(o,588)).then((e=>e.caretDown)),caretLeft:()=>o.e(840).then(o.bind(o,1746)).then((e=>e.caretLeft)),caretRight:()=>o.e(840).then(o.bind(o,5147)).then((e=>e.caretRight)),caretUp:()=>o.e(840).then(o.bind(o,5245)).then((e=>e.caretUp)),check:()=>o.e(840).then(o.bind(o,3441)).then((e=>e.check)),chevronDown:()=>o.e(840).then(o.bind(o,157)).then((e=>e.chevronDown)),chevronLeft:()=>o.e(840).then(o.bind(o,1316)).then((e=>e.chevronLeft)),chevronLightDown:()=>o.e(840).then(o.bind(o,9683)).then((e=>e.chevronLightDown)),chevronLightLeft:()=>o.e(840).then(o.bind(o,1788)).then((e=>e.chevronLightLeft)),chevronLightRight:()=>o.e(840).then(o.bind(o,7776)).then((e=>e.chevronLightRight)),chevronLightUp:()=>o.e(840).then(o.bind(o,5154)).then((e=>e.chevronLightUp)),chevronRight:()=>o.e(840).then(o.bind(o,1704)).then((e=>e.chevronRight)),chevronUp:()=>o.e(840).then(o.bind(o,5121)).then((e=>e.chevronUp)),closeDefault:()=>o.e(840).then(o.bind(o,4754)).then((e=>e.closeDefault)),dangerExclamation:()=>o.e(840).then(o.bind(o,969)).then((e=>e.dangerExclamation)),dropzone:()=>o.e(840).then(o.bind(o,6941)).then((e=>e.dropzone)),feedback:()=>o.e(840).then(o.bind(o,2253)).then((e=>e.feedback)),file:()=>o.e(840).then(o.bind(o,1601)).then((e=>e.file)),hide:()=>o.e(840).then(o.bind(o,8138)).then((e=>e.hide)),info:()=>o.e(840).then(o.bind(o,770)).then((e=>e.info)),maximise:()=>o.e(840).then(o.bind(o,8297)).then((e=>e.maximise)),meatballs:()=>o.e(840).then(o.bind(o,1307)).then((e=>e.meatballs)),minus:()=>o.e(840).then(o.bind(o,7272)).then((e=>e.minus)),openInNewWindow:()=>o.e(840).then(o.bind(o,1895)).then((e=>e.openInNewWindow)),process:()=>o.e(840).then(o.bind(o,4137)).then((e=>e.process)),processModel:()=>o.e(840).then(o.bind(o,2605)).then((e=>e.processModel)),publish:()=>o.e(840).then(o.bind(o,5233)).then((e=>e.publish)),refresh:()=>o.e(840).then(o.bind(o,1417)).then((e=>e.refresh)),save:()=>o.e(840).then(o.bind(o,3234)).then((e=>e.save)),schedule:()=>o.e(840).then(o.bind(o,7627)).then((e=>e.schedule)),search:()=>o.e(840).then(o.bind(o,5554)).then((e=>e.search)),show:()=>o.e(840).then(o.bind(o,9376)).then((e=>e.show)),success:()=>o.e(840).then(o.bind(o,7528)).then((e=>e.success)),summary:()=>o.e(840).then(o.bind(o,8318)).then((e=>e.summary)),tick:()=>o.e(840).then(o.bind(o,5017)).then((e=>e.tick)),trash:()=>o.e(840).then(o.bind(o,7798)).then((e=>e.trash)),user:()=>o.e(840).then(o.bind(o,8592)).then((e=>e.user)),users:()=>o.e(840).then(o.bind(o,8344)).then((e=>e.users)),versionHistory:()=>o.e(840).then(o.bind(o,6525)).then((e=>e.versionHistory)),warningExclamation:()=>o.e(840).then(o.bind(o,7403)).then((e=>e.warningExclamation))},lt=({type:e,typeAsHtml:t,fixedSize:o,className:n})=>{if(!e&&!t)return l.Ld;if(e&&!(e in at))return console.warn("Icon not found",e),l.Ld;const r=e?at[e]():Promise.resolve(t);return l.dy`
    <div
      aria-hidden="true"
      class=${n||"ne-icon"}
      style=${We({height:o,width:o,display:"grid",alignItems:"center",justifyItems:"center"})}
    >
      ${st(r,l.dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
></svg>`)}
    </div>
  `},ct=[He,l.iv`
  .btn {
    font-family: var(--ne-button-font-family);
    font-size: var(--ne-button-font-size);
    padding: var(--ne-button-padding-vertical)
      var(--ne-button-padding-horizontal) var(--ne-button-padding-vertical)
      var(--ne-button-padding-horizontal);
    gap: var(--ne-button-gap);
    border-radius: var(--ne-button-border-radius);
    outline: none;
    display: grid;
    grid-auto-flow: column;
  }

  .btn:focus {
    outline: 4px solid var(--ne-button-color-border-focus);
  }

  .btn-primary {
    border: 1px solid var(--ne-button-color-border-primary-default);
    color: var(--ne-button-color-label-primary-default);
    background-color: var(--ne-button-color-background-primary-default);
  }

  .btn-primary:hover {
    background-color: var(--ne-button-color-background-primary-hover);
  }

  .btn-primary:disabled {
    border: 1px solid var(--ne-button-color-border-disabled);
    color: var(--ne-button-color-label-primary-disabled);
    background-color: var(--ne-button-color-background-primary-disabled);
  }

  .btn-secondary {
    border: 1px solid var(--ne-button-color-border-secondary-default);
    color: var(--ne-button-color-label-secondary-default);
    background-color: var(--ne-button-color-background-secondary-default);
  }

  .btn-secondary:hover {
    background-color: var(--ne-button-color-background-secondary-hover);
  }

  .btn-secondary:disabled {
    border: 1px solid var(--ne-button-color-border-disabled);
    color: var(--ne-button-color-label-secondary-disabled);
    background-color: var(--ne-button-color-background-secondary-disabled);
  }

  .btn-secondary:focus {
    background-color: var(--ne-button-color-background-secondary-hover);
  }

  .btn-destructive {
    border: 1px solid var(--ne-button-color-border-destructive-default);
    color: var(--ne-button-color-label-destructive-default);
    background-color: var(--ne-button-color-background-destructive-default);
  }

  .btn-destructive:hover {
    background-color: var(--ne-button-color-background-destructive-hover);
  }

  .btn-destructive:disabled {
    border: 1px solid var(--ne-button-color-border-disabled);
    color: var(--ne-button-color-label-destructive-disabled);
    background-color: var(--ne-button-color-background-destructive-disabled);
  }

  .btn-destructive:focus {
    background-color: var(--ne-button-color-background-destructive-hover);
  }

  .btn-text {
    border: 0;
    color: var(--ne-button-color-label-text-default);
    background-color: transparent;
  }

  .btn-text:hover {
    background-color: var(--ne-button-color-background-text-hover);
  }

  .btn-text:disabled {
    border: 0;
    color: var(--ne-button-color-label-text-disabled);
    background-color: var(--ne-button-color-background-text-disabled);
  }

  .btn-text:focus {
    background-color: var(--ne-button-color-background-text-hover);
  }

  .btn-inverse {
    color: var(--ne-button-color-label-inverse-default);
    background-color: transparent;
    border: 1px solid var(--ne-button-color-border-inverse-default);
  }

  .btn-inverse:hover {
    background-color: var(--ne-button-color-background-inverse-hover);
  }

  .btn-inverse:disabled {
    border: 1px solid var(--ne-button-color-border-disabled);
    color: var(--ne-button-color-label-inverse-disabled);
    background-color: var(--ne-button-color-background-inverse-disabled);
  }

  .btn-inverse:focus {
    background-color: var(--ne-button-color-background-inverse-hover);
  }

  .icon-slot {
    min-width: 18px;
    max-width: 18px;
  }
`,P];let dt=class extends(Ie(l.oi)){constructor(){super(...arguments),this.disabled=!1,this.ariaLabel="",this.variant="primary",this.onClick=()=>{Ue(this,"ne-click",{composed:!0,bubbles:!0})}}static get styles(){return ct}render(){return l.dy`
      <button
        id=${this.id}
        type="button"
        ?disabled=${this.disabled}
        @click="${this.onClick}"
        aria-label=${this.ariaLabel||l.Ld}
        class=${V({btn:!0,"btn-primary":"primary"===this.variant,"btn-secondary":"secondary"===this.variant,"btn-destructive":"destructive"===this.variant,"btn-text":"text"===this.variant,"btn-inverse":"inverse"===this.variant})}
      >
        <span class=${void 0!==this.leftIconType?"icon-slot":"hidden"}>
          <slot name="left">${lt({type:this.leftIconType})}</slot>
        </span>
        <slot></slot>
        <span
          class=${void 0!==this.rightIconType?"icon-slot":"hidden"}
        >
          <slot name="right">${lt({type:this.rightIconType})}</slot>
        </span>
      </button>
    `}};D([h({type:Boolean,reflect:!0})],dt.prototype,"disabled",void 0),D([h({attribute:"ne-aria-label",type:String,reflect:!0})],dt.prototype,"ariaLabel",void 0),D([h({type:String,attribute:"left-icon",reflect:!0})],dt.prototype,"leftIconType",void 0),D([h({type:String,attribute:"right-icon",reflect:!0})],dt.prototype,"rightIconType",void 0),D([h({reflect:!0})],dt.prototype,"variant",void 0),dt=D([c("ne-button")],dt);const ut=e=>null!=e?e:F.Ld,ht=l.iv`
  * {
  --ne-label-gap: var(--ne-ref-spacing-none, 0);
  --ne-label-color-title: var(--ne-ref-color-grey-60, #575C61);
  --ne-label-color-asterisk: var(--ne-ref-color-red-60, #B80000);
  --ne-label-font-size: var(--ne-ref-font-size-04, 0.875em);
  --ne-label-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
}
`,pt=[l.iv`
  * {
    color: var(--ne-label-color-title);
    font-family: var(--ne-label-font-family);
    font-size: 1em;
  }

  .outer-label {
    display: flex;
    font-size: var(--ne-label-font-size);
  }

  .required-indicator {
    margin-left: var(--ne-label-gap);
    color: var(--ne-label-color-asterisk);
  }
`,P,ht];let ft=class extends l.oi{constructor(){super(...arguments),this.for="",this.required=!1}static get styles(){return pt}render(){return l.dy`<label
      class="outer-label"
      id=${ut(this.id)}
      for=${ut(this.for)}
    >
      <slot></slot>
      ${this.required?l.dy`<span class="required-indicator">*</span>`:l.Ld}
    </label> `}};D([h({attribute:"for"})],ft.prototype,"for",void 0),D([h({attribute:"required",type:Boolean,reflect:!0})],ft.prototype,"required",void 0),ft=D([c("ne-label")],ft);const gt=l.iv`
  * {
  --ne-button-set-padding-vertical: var(--ne-ref-spacing-medium, 1em);
  --ne-button-set-gap: var(--ne-ref-spacing-medium, 1em);
  --ne-button-set-color-border: var(--ne-ref-color-grey-10, #E2E3E4);
  --ne-button-set-border-width: var(--ne-ref-border-width-small, 1px);
}
`,At=[l.iv`
  :host {
    width: 100%;
  }

  .ne-button-set {
    display: flex;
    flex-flow: row;
    justify-content: flex-start;
    align-items: center;
    align-content: center;
    padding-top: var(--ne-button-set-padding-vertical);
    padding-bottom: var(--ne-button-set-padding-vertical);
    gap: var(--ne-button-set-gap);
    width: 100%;
  }

  .ne-button-set ::slotted(.right-start) {
    margin-left: auto;
  }

  .divider-top {
    border-top: solid;
    border-top-width: var(--ne-button-set-border-width);
    border-top-color: var(--ne-button-set-color-border);
  }

  .divider-bottom {
    border-bottom: solid;
    border-bottom-width: var(--ne-button-set-border-width);
    border-bottom-color: var(--ne-button-set-color-border);
  }
`,P,gt];let vt=class extends(Ie(l.oi)){constructor(){super(...arguments),this.showTopDivider=!1,this.showBottomDivider=!1}static get styles(){return At}render(){return l.dy`<div
      class="${V({"ne-button-set":!0,"divider-top":this.showTopDivider,"divider-bottom":this.showBottomDivider})}"
    >
      <slot></slot>
    </div>`}};D([h({type:Boolean,reflect:!0,attribute:"show-divider-top"})],vt.prototype,"showTopDivider",void 0),D([h({type:Boolean,reflect:!0,attribute:"show-divider-bottom"})],vt.prototype,"showBottomDivider",void 0),vt=D([c("ne-button-set")],vt);const bt=l.iv`
  * {
  --ne-panel-header-font-family: var(--ne-ref-font-family-montserrat, Montserrat);
  --ne-panel-header-font-weight: var(--ne-ref-font-weight-semi-bold, SemiBold);
  --ne-panel-header-font-size: var(--ne-ref-font-size-08, 1.5em);
  --ne-panel-header-title: var(--ne-ref-color-nintex-orange, #F56900);
  --ne-panel-color-border: var(--ne-ref-color-grey-10, #E2E3E4);
  --ne-panel-border-radius: var(--ne-ref-border-radius-medium, .25em);
  --ne-panel-border-width: var(--ne-ref-border-width-small, 1px);
  --ne-panel-padding-horizontal: var(--ne-ref-spacing-medium, 1em);
  --ne-panel-padding-vertical: var(--ne-ref-spacing-medium, 1em);
  --ne-panel-gap-vertical: var(--ne-ref-spacing-medium, 1em);
}
`,mt=[l.iv`
  .panel-container {
    position: relative;
    box-sizing: border-box;
    display: grid;
    border-radius: var(--ne-panel-border-radius);
    border: var(--ne-panel-border-width) solid var(--ne-panel-color-border);
    padding: 0 var(--ne-panel-padding-horizontal)
      var(--ne-panel-padding-vertical) var(--ne-panel-padding-horizontal);
    margin: 0;
    background-color: var(--ne-panel-color-background);
  }

  .panel-header {
    border-bottom: 1px solid var(--ne-panel-color-border);
  }

  .header-label {
    font-family: var(--ne-panel-header-font-family);
    font-weight: var(--ne-panel-header-font-weight);
    font-size: var(--ne-panel-header-font-size);
    color: var(--ne-panel-header-title);
  }

  .panel-content {
    font-size: var(--ne-panel-font-size);
    font-family: var(--ne-panel-font-family);
    padding: var(--ne-panel-padding-vertical) var(--ne-panel-padding-horizontal);
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }
`,P,bt];let yt=class extends(Ie(l.oi)){constructor(){super(...arguments),this.heading=""}static get scopedElements(){return{"ne-button-set":vt}}static get styles(){return mt}render(){return l.dy` <div class="panel-container">
      <span class="panel-header">
        <ne-button-set>
          <label class="header-label">${this.heading}</label>
        </ne-button-set>
      </span>
      <p class="panel-content">
        <slot></slot>
      </p>
    </div>`}};D([h({type:String})],yt.prototype,"heading",void 0),yt=D([c("ne-panel")],yt);const Ct=()=>new wt;class wt{}const xt=new WeakMap,kt=M(class extends tt{render(e){return F.Ld}update(e,[t]){var o;const n=t!==this.G;return n&&void 0!==this.G&&this.ot(void 0),(n||this.rt!==this.lt)&&(this.G=t,this.ct=null===(o=e.options)||void 0===o?void 0:o.host,this.ot(this.lt=e.element)),F.Ld}ot(e){var t;if("function"==typeof this.G){const o=null!==(t=this.ct)&&void 0!==t?t:globalThis;let n=xt.get(o);void 0===n&&(n=new WeakMap,xt.set(o,n)),void 0!==n.get(this.G)&&this.G.call(this.ct,void 0),n.set(this.G,e),void 0!==e&&this.G.call(this.ct,e)}else this.G.value=e}get rt(){var e,t,o;return"function"==typeof this.G?null===(t=xt.get(null!==(e=this.ct)&&void 0!==e?e:globalThis))||void 0===t?void 0:t.get(this.G):null===(o=this.G)||void 0===o?void 0:o.value}disconnected(){this.rt===this.lt&&this.ot(void 0)}reconnected(){this.ot(this.lt)}}),_t=[l.iv`
  * {
  --ne-switch-border-radius: var(--ne-ref-border-radius-xl, 0.75em);
  --ne-switch-color-background-on: var(--ne-ref-color-blue-60, #006BD6);
  --ne-switch-color-background-off: var(--ne-ref-color-grey-60, #575C61);
  --ne-switch-color-background-disabled: var(--ne-ref-color-grey-50, #6D7379);
  --ne-switch-color-handle: var(--ne-ref-color-white, #ffffff);
  --ne-switch-color-icon: var(--ne-ref-color-white, #ffffff);
  --ne-switch-color-border-focus: var(--ne-ref-color-blue-20, #A3D1FF);
  --ne-switch-gap: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-switch-sizing-icon: var(--ne-ref-sizing-04, 1em);
  --ne-switch-sizing-track-height: var(--ne-ref-sizing-06, 1.5em);
  --ne-switch-sizing-track-width: var(--ne-ref-sizing-11, 3em);
  --ne-switch-sizing-handle: var(--ne-ref-sizing-05, 1.25em);
  --ne-switch-border-width-focus: var(--ne-ref-border-width-large, 4px);
}
`,ht,P,l.iv`
  .container {
    display: flex;
    align-items: center;
  }

  .switch {
    position: relative;
    display: inline-block;
    width: var(--ne-switch-sizing-track-width);
    height: var(--ne-switch-sizing-track-height);
  }

  .switch:focus-within {
    outline: var(--ne-switch-border-width-focus) solid
      var(--ne-switch-color-border-focus);
    border-radius: var(--ne-switch-border-radius);
  }

  .slider {
    display: flex;
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: var(--ne-switch-color-background-off);
    transition: 0.4s;
    border-radius: var(--ne-switch-border-radius);
  }

  input {
    opacity: 0;
    width: 0;
    height: 0;
  }

  input:focus + .slider {
    box-shadow: 0 0 1px var(--ne-switch-color-background-on);
  }

  input:checked + .slider {
    background-color: var(--ne-switch-color-background-on);
  }

  .slider::before {
    position: absolute;
    content: '';
    height: var(--ne-switch-sizing-handle);
    width: var(--ne-switch-sizing-handle);
    left: 2px;
    bottom: 2px;
    background-color: var(--ne-switch-color-handle);
    transition: 0.4s;
    border-radius: var(--ne-switch-border-radius);
  }

  .slider.checked::before {
    left: 0;
  }

  input:checked + .slider::before {
    transform: translateX(26px);
  }

  .slider.disabled {
    background-color: var(--ne-switch-color-background-disabled);
  }

  input:checked + .slider.disabled {
    background-color: var(--ne-switch-color-background-disabled);
  }

  .icon {
    color: var(--ne-switch-color-icon);
    align-self: center;
    width: var(--ne-switch-sizing-icon);
    margin: var(--ne-switch-gap);
  }

  .state-label {
    font-family: var(--ne-label-font-family);
    color: var(--ne-label-color-title);
    font-size: var(--ne-label-font-size);
    margin-left: var(--ne-label-gap);
  }

  .state-label.left {
    padding-inline-end: var(--ne-switch-gap);
  }

  .state-label.right {
    padding-inline-start: var(--ne-switch-gap);
  }
`];let $t=class extends l.oi{constructor(){super(...arguments),this._checkboxNode=Ct(),this.checked=!1,this.disabled=!1,this.invertStateLabelPlacement=!1,this.stateLabelVisible=!0,this._onChange=()=>{const{checked:e}=this._checkboxNode.value;this.checked=e,this.disabled||Ue(this,"ne-change",{detail:{checked:e,description:this._statusLabelDescription()}})}}static get styles(){return _t}_statusLabelDescription(){return this.checked?"On":"Off"}render(){const e=this.stateLabelVisible&&this.invertStateLabelPlacement?l.dy`<div class="state-label left">
            ${this._statusLabelDescription()}
          </div>`:null,t=this.stateLabelVisible&&!this.invertStateLabelPlacement?l.dy`<div class="state-label right">
            ${this._statusLabelDescription()}
          </div>`:null;return l.dy`
      <div class="container">
        ${e}
        <label class="switch">
          <input
            id="checkbox"
            type="checkbox"
            aria-label=${this._statusLabelDescription()}
            ${kt(this._checkboxNode)}
            .checked=${this.checked}
            ?disabled=${this.disabled}
            @change=${this._onChange}
          />
          <span
            class=${V({slider:!0,disabled:this.disabled,checked:this.checked})}
          >
            <div class=${this.checked?"icon":"hidden"}>
              ${lt({type:"check"})}
            </div>
          </span>
        </label>
        ${t}
      </div>
    `}};D([h({type:Boolean,reflect:!0})],$t.prototype,"checked",void 0),D([h({type:Boolean,reflect:!0})],$t.prototype,"disabled",void 0),D([h({type:Boolean,reflect:!0})],$t.prototype,"invertStateLabelPlacement",void 0),D([h({type:Boolean,reflect:!0})],$t.prototype,"stateLabelVisible",void 0),$t=D([c("ne-switch")],$t);class St extends z{constructor(e){if(super(e),this.et=F.Ld,e.type!==j)throw Error(this.constructor.directiveName+"() can only be used in child bindings")}render(e){if(e===F.Ld||null==e)return this.ft=void 0,this.et=e;if(e===F.Jb)return e;if("string"!=typeof e)throw Error(this.constructor.directiveName+"() called with a non-string value");if(e===this.et)return this.ft;this.et=e;const t=[e];return t.raw=t,this.ft={_$litType$:this.constructor.resultType,strings:t,values:[]}}}St.directiveName="unsafeHTML",St.resultType=1;const Et=M(St);function Lt(e,t,o){return e?t():null==o?void 0:o()}const Ot=[l.iv`
  * {
  --ne-dropdown-menu-color-elevated-background: var(--ne-ref-color-white, #ffffff);
  --ne-dropdown-menu-color-elevated-border: var(--ne-ref-color-grey-10, #E2E3E4);
  --ne-dropdown-menu-color-flat-background: var(--ne-ref-color-white, #ffffff);
  --ne-dropdown-menu-color-flat-border: var(--ne-ref-color-blue-60, #006BD6);
  --ne-dropdown-menu-border-radius-elevated: var(--ne-ref-border-radius-medium, .25em);
  --ne-dropdown-menu-border-radius-flat-top: var(--ne-ref-border-radius-none, 0);
  --ne-dropdown-menu-border-radius-flat-bottom: var(--ne-ref-border-radius-medium, .25em);
  --ne-dropdown-menu-padding-horizontal: var(--ne-ref-spacing-none, 0);
  --ne-dropdown-menu-padding-vertical: var(--ne-ref-spacing-xx-small, 0.25em);
  --ne-dropdown-menu-border-width: var(--ne-ref-border-width-small, 1px);
  --ne-dropdown-menu-shadow-elevated: 0px 0px 8px var(--ne-ref-color-grey-90-20, #16171820);
}
`,l.iv`
  .dropdown-menu {
    margin: 0;
    padding: var(--ne-dropdown-menu-padding-vertical)
      var(--ne-dropdown-menu-padding-horizontal);
    border-width: var(--ne-dropdown-menu-border-width);
    border-style: solid;
  }

  .dropdown-menu.elevated {
    border-color: var(--ne-dropdown-menu-color-elevated-border);
    border-radius: var(--ne-dropdown-menu-border-radius-elevated);
    background-color: var(--ne-dropdown-menu-color-elevated-background);
    box-shadow: 3px 3px 5px rgb(22 23 24 / 10%);
  }

  .dropdown-menu.flat {
    border-color: var(--ne-dropdown-menu-color-flat-border);
    border-radius: var(--ne-dropdown-menu-border-radius-flat-top)
      var(--ne-dropdown-menu-border-radius-flat-top)
      var(--ne-dropdown-menu-border-radius-flat-bottom)
      var(--ne-dropdown-menu-border-radius-flat-bottom);
    background-color: var(--ne-dropdown-menu-color-flat-background);
  }

  .dropdown-menu .fixed-height {
    /* Shows 6 rows */
    max-height: calc(10 * (1em * 1.2));
    overflow-y: auto;
  }

  .dropdown-menu-footer {
    padding: 0 14px;
  }

  .dropdown-menu ::slotted(li) {
    display: block;
  }
`,P];let Nt=class extends l.oi{constructor(){super(...arguments),this.ariaLabel="",this.variant="elevated",this.fixedHeight=!1,this.showFooterActions=!1}static get styles(){return Ot}render(){return l.dy`<div
      class=${V({"dropdown-menu":!0,elevated:"elevated"===this.variant,flat:"flat"===this.variant})}
      aria-label=${this.ariaLabel||l.Ld}
    >
      <div class=${V({"fixed-height":!0===this.fixedHeight})}>
        <slot></slot>
      </div>
      ${this.showFooterActions?l.dy`<div class="dropdown-menu-footer">
            <slot name="footer-items"></slot>
          </div>`:""}
    </div>`}};D([h({attribute:"ne-aria-label",type:String,reflect:!0})],Nt.prototype,"ariaLabel",void 0),D([h({reflect:!0})],Nt.prototype,"variant",void 0),D([h({type:Boolean,reflect:!0})],Nt.prototype,"fixedHeight",void 0),D([h({type:Boolean})],Nt.prototype,"showFooterActions",void 0),Nt=D([c("ne-dropdown-menu")],Nt);const Rt=[l.iv`
  * {
  --ne-dropdown-menu-item-padding-horizontal: var(--ne-ref-spacing-medium, 1em);
  --ne-dropdown-menu-item-padding-vertical: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-dropdown-menu-item-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-dropdown-menu-item-color-background-default: var(--ne-ref-color-white, #ffffff);
  --ne-dropdown-menu-item-color-background-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-dropdown-menu-item-color-text-default: var(--ne-ref-color-grey-90, #161718);
  --ne-dropdown-menu-item-color-text-disabled: var(--ne-ref-color-grey-50, #6D7379);
  --ne-dropdown-menu-item-color-subtext-default: var(--ne-ref-color-grey-60, #575C61);
  --ne-dropdown-menu-item-color-subtext-disabled: var(--ne-ref-color-grey-50, #6D7379);
  --ne-dropdown-menu-item-color-border-focus: var(--ne-ref-color-blue-20, #A3D1FF);
  --ne-dropdown-menu-item-font-size-subtext: var(--ne-ref-font-size-02, 0.75em);
  --ne-dropdown-menu-item-font-size-option: var(--ne-ref-font-size-04, 0.875em);
  --ne-dropdown-menu-item-border-width-focus: var(--ne-ref-border-width-large, 4px);
}
`,l.iv`
  .dropdown-menu-item {
    position: relative;
    display: flex;
    flex-flow: column nowrap;
    justify-content: flex-start;
    align-items: flex-start;
    align-content: flex-start;
    width: 100%;
    box-sizing: border-box;
    padding: calc(
        var(--ne-dropdown-menu-item-padding-vertical) -
          var(--ne-dropdown-menu-item-border-width-focus)
      )
      calc(
        var(--ne-dropdown-menu-item-padding-horizontal) -
          var(--ne-dropdown-menu-item-border-width-focus)
      );
    border: var(--ne-dropdown-menu-item-border-width-focus) solid
      var(--ne-dropdown-menu-item-color-background-default);
    outline: none;
    background-color: var(--ne-dropdown-menu-item-color-background-default);
    font-family: var(--ne-dropdown-menu-item-font-family);
    font-size: var(--ne-dropdown-menu-item-font-size-option);
    color: var(--ne-dropdown-menu-item-color-text-default);
    text-align: left;
    white-space: nowrap;
  }

  .multi-select {
    display: grid;
    grid-template-columns: auto;
    grid-template-rows: auto auto;
  }

  .multi-select .checkbox {
    grid-area: 1 / 1 / 3 / 2; /* Span 2 rows starting from row 1 */
  }

  .multi-select .text-span {
    grid-area: 1 / 2 / 2 / 3; /* Span 1 row starting from column 2 */
  }

  .multi-select .subtext-span {
    grid-area: 2 / 2 / 3 / 3; /* Span 1 row starting from column 2 */
  }

  .dropdown-menu-item:hover {
    border-color: var(--ne-dropdown-menu-item-color-background-hover);
    background-color: var(--ne-dropdown-menu-item-color-background-hover);
  }

  .dropdown-menu-item:disabled {
    color: var(--ne-dropdown-menu-item-color-text-disabled);
  }

  .dropdown-menu-item:focus,
  .dropdown-menu-item:focus:hover {
    border-color: var(--ne-dropdown-menu-item-color-border-focus);
  }

  .dropdown-menu-item .subtext-span {
    font-size: var(--ne-dropdown-menu-item-font-size-subtext);
    color: var(--ne-dropdown-menu-item-color-subtext-default);
  }

  .dropdown-menu-item:disabled .subtext-span {
    color: var(--ne-dropdown-menu-item-color-subtext-disabled);
  }
`,P];let Tt=class extends l.oi{constructor(){super(...arguments),this._hasSubTextSlot=!1,this.disabled=!1,this.ariaLabel="",this.text="",this.checked=!1,this.isMultiSelect=!1,this._onSlotChanged=()=>{this._subTextSlot&&this._subTextSlot.length>0?this._hasSubTextSlot=!0:this._hasSubTextSlot=!1},this._onClick=()=>{this.disabled||Ue(this,"ne-click",{composed:!0,bubbles:!1})},this._onKeyDown=e=>{switch(e.code){case"Space":case"Enter":case"NumpadEnter":this._onClick(),e.preventDefault(),e.stopPropagation()}},this.renderMultiSelect=()=>l.dy`<div
    class="dropdown-menu-item"
    tabindex="0"
    ?disabled=${this.disabled}
    @keydown=${this._onKeyDown}
    @click=${e=>{e.stopPropagation(),e.preventDefault(),this._onClick()}}
    aria-label=${this.ariaLabel||l.Ld}
  >
    <slot name="multi-select"></slot>
  </div>`,this.renderSingleSelect=()=>{let e=!1;return this.subText&&this.subText.length>0&&(e=!0),l.dy`<button
      class="dropdown-menu-item"
      ?disabled=${this.disabled}
      @click=${e=>{e.stopPropagation(),e.preventDefault(),this._onClick()}}
      aria-label=${this.ariaLabel||l.Ld}
    >
      <span class="text-span"><slot>${this.text}</slot></span>
      <span
        class=${V({"subtext-span":!0,hidden:!this._hasSubTextSlot&&!e})}
        ><slot name="sub-text" @slotchange=${this._onSlotChanged}
          >${this.subText}</slot
        ></span
      >
    </button>`}}static get styles(){return Rt}render(){return l.dy`${this.isMultiSelect?this.renderMultiSelect():this.renderSingleSelect()}`}};D([p()],Tt.prototype,"_hasSubTextSlot",void 0),D([function(e,t,o){let n,r=e;return"object"==typeof e?(r=e.slot,n=e):n={flatten:t},o?function(e){const{slot:t,selector:o}=null!=e?e:{};return f({descriptor:n=>({get(){var n;const r="slot"+(t?`[name=${t}]`:":not([name])"),i=null===(n=this.renderRoot)||void 0===n?void 0:n.querySelector(r),s=null!=i?A(i,e):[];return o?s.filter((e=>e.matches(o))):s},enumerable:!0,configurable:!0})})}({slot:r,flatten:t,selector:o}):f({descriptor:e=>({get(){var e,t;const o="slot"+(r?`[name=${r}]`:":not([name])"),i=null===(e=this.renderRoot)||void 0===e?void 0:e.querySelector(o);return null!==(t=null==i?void 0:i.assignedNodes(n))&&void 0!==t?t:[]},enumerable:!0,configurable:!0})})}({slot:"sub-text",flatten:!0})],Tt.prototype,"_subTextSlot",void 0),D([h({type:Boolean,reflect:!0})],Tt.prototype,"disabled",void 0),D([h({attribute:"ne-aria-label",type:String,reflect:!0})],Tt.prototype,"ariaLabel",void 0),D([h({type:String,attribute:"text"})],Tt.prototype,"text",void 0),D([h({type:String,attribute:"sub-text",reflect:!0})],Tt.prototype,"subText",void 0),D([h({type:Boolean})],Tt.prototype,"checked",void 0),D([h({type:Boolean})],Tt.prototype,"isMultiSelect",void 0),Tt=D([c("ne-dropdown-menu-item")],Tt);const Dt=[P,l.iv`
  :host {
    display: grid;
    color: inherit;
  }
`];let Pt=class extends l.oi{constructor(){super(...arguments),this.fixedSize=""}static get styles(){return Dt}render(){return lt({type:this.type,fixedSize:this.fixedSize})}};D([h({attribute:"type",reflect:!0})],Pt.prototype,"type",void 0),D([h({type:String})],Pt.prototype,"fixedSize",void 0),Pt=D([c("ne-icon")],Pt);const Ft=e=>e.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),Bt=[l.iv`
  * {
  --ne-lookup-field-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-lookup-field-font-size: var(--ne-ref-font-size-04, 0.875em);
  --ne-lookup-field-color-text-placeholder: var(--ne-ref-color-grey-50, #6D7379);
  --ne-lookup-field-color-text-default: var(--ne-ref-color-grey-90, #161718);
  --ne-lookup-field-color-text-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-lookup-field-color-background-default: var(--ne-ref-color-white, #ffffff);
  --ne-lookup-field-color-background-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-lookup-field-color-icon: var(--ne-ref-color-grey-90, #161718);
  --ne-lookup-field-color-border-default: var(--ne-ref-color-grey40, #898F94);
  --ne-lookup-field-color-border-active: var(--ne-ref-color-blue-60, #006BD6);
  --ne-lookup-field-color-border-focus: var(--ne-ref-color-blue-20, #A3D1FF);
  --ne-lookup-field-color-border-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-lookup-field-sizing-icon: var(--ne-ref-sizing-04, 1em);
  --ne-lookup-field-padding-vertical: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-lookup-field-padding-horizontal: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-lookup-field-content-gap: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-lookup-field-border-radius-default: var(--ne-ref-border-radius-medium, .25em);
  --ne-lookup-field-border-radius-active-top: var(--ne-ref-border-radius-medium, .25em);
  --ne-lookup-field-border-radius-active-bottom: var(--ne-ref-border-radius-none, 0);
  --ne-lookup-field-border-width-default: var(--ne-ref-border-width-small, 1px);
  --ne-lookup-field-border-width-focus: var(--ne-ref-border-width-large, 4px);
  --ne-lookup-field-gap: var(--ne-ref-spacing-xx-small, 0.25em);
  --ne-lookup-field-font-weight-highlight: var(--ne-ref-font-weight-bold, Bold);
}
`,P,l.iv`
  .container {
    align-items: center;
    position: relative;
    padding: 0;
    width: 100%;
  }

  .wrapper {
    width: 100%;
  }

  input {
    width: 100%;
    padding: var(--ne-lookup-field-padding-vertical)
      var(--ne-lookup-field-padding-horizontal)
      var(--ne-lookup-field-padding-vertical)
      var(--ne-lookup-field-padding-horizontal);
    gap: var(--ne-lookup-field-content-gap);
    border: var(--ne-lookup-field-border-width-default) solid
      var(--ne-lookup-field-color-border-default);
    border-radius: var(--ne-lookup-field-border-radius-default);
    background-color: var(--ne-lookup-field-color-background-default);
    box-sizing: border-box;
    outline: none;
    flex-grow: 1;
    font-family: var(--ne-lookup-field-font-family);
    font-size: var(--ne-lookup-field-font-size);
    color: var(--ne-lookup-field-color-text-default);
  }

  input.has-icon {
    padding-right: 2em;
  }

  .state-indicator.disabled {
    background-color: var(--ne-lookup-field-color-background-disabled);
  }

  input:focus {
    outline: var(--ne-lookup-field-border-width-focus) solid
      var(--ne-lookup-field-color-border-focus);
    border: 1px solid transparent;
  }

  input.active,
  input.active:focus {
    outline: none;
    border: var(--ne-lookup-field-border-width-default) solid
      var(--ne-lookup-field-color-border-active);
    border-radius: var(--ne-lookup-field-border-radius-active-top)
      var(--ne-lookup-field-border-radius-active-top)
      var(--ne-lookup-field-border-radius-active-bottom)
      var(--ne-lookup-field-border-radius-active-bottom);
  }

  input.disabled {
    background-color: var(--ne-lookup-field-color-background-disabled);
    border-color: var(--ne-lookup-field-color-border-disabled);
    color: var(--ne-lookup-field-color-text-disabled);
  }

  .icon {
    color: var(--ne-lookup-field-color-icon);
    width: var(--ne-lookup-field-sizing-icon);
    position: absolute;
    top: 0;
    right: 0;
    background-color: transparent;
    border: none;
    outline: none;
    padding: var(--ne-lookup-field-padding-vertical)
      var(--ne-lookup-field-padding-horizontal)
      var(--ne-lookup-field-padding-vertical)
      var(--ne-lookup-field-padding-horizontal);
    cursor: unset;
    flex-shrink: 0;
  }

  .emphasis {
    font-weight: var(--ne-lookup-field-font-weight-highlight);
  }

  .empty-list,
  .datalist,
  .loading {
    position: absolute;
    width: 100%;
    z-index: 1;
  }
`];var jt,Mt;let zt=(jt=class extends(Ie(l.oi)){static get scopedElements(){return{"ne-dropdown-menu-item":Tt,"ne-dropdown-menu":Nt,"ne-icon":Pt}}static get styles(){return Bt}set dataList(e){const t=this._dataList;this._isLoading=!1,this._dataList=e,this.externalListFilter&&(this._filteredList=e),this.requestUpdate("dataList",t)}get dataList(){return this._dataList}constructor(){super(),this.value="",this.displayValue="",this.disabled=!1,this.readonly=!1,this.externalListFilter=!1,this.ariaLabel="",this.ariaLabelledby="",this.noResultsText="No matches found",this.typeToSearchText="Type to search",this.searchLoadingText="Loading...",this.dropdownVariant="flat",this._expanded=!1,this._isLoading=!1,this._ignoreFocusOut=!1,this._dataList=[],this._filteredList=[],this._input=Ct(),this._searchValue="",this._previousValue="",this.updated=()=>{this._updateDisplayText()},this._updateDisplayText=()=>{this.value&&""!==this.value?this.dataList&&this.dataList.length>0&&(this.displayValue=this.dataList.find((e=>e.value===this.value))?.text):this.displayValue="",this._input.value&&this.displayValue&&(this._input.value.value=this.displayValue)},this._filterList=()=>{if(!this._searchValue)return void(this._filteredList=[]);const e=Ft(this._searchValue),t=new RegExp(e,"gi");this._filteredList=this.dataList.filter((e=>!!e.text.match(t)))},this._onDocumentClick=()=>{this._expanded&&(this._expanded=!1,this._input.value?.value&&this._previousValue?this._input.value.value=this._previousValue:Ue(this,"ne-change",{composed:!0,bubbles:!0,detail:{value:this.value}}))},this._onDropDownMouseDown=()=>{this._ignoreFocusOut=!0},this._onMouseDown=e=>{this.disabled||this.readonly||(this._expanded=!0,e.stopPropagation())},this._onInput=e=>{this.disabled||this.readonly||(this.value="",this._searchValue=this._input.value?.value,this.displayValue=this._searchValue,this._expanded=!0,this._isLoading=!0,this.externalListFilter||this._filterList(),Ue(this,"ne-input",{detail:{data:e.data,value:this._input.value?.value}}))},this._onFocusOut=()=>{this._ignoreFocusOut||this._onDocumentClick(),this._ignoreFocusOut=!1},this._onListItemClicked=(e,t)=>{this.value=t,this._updateDisplayText(),this._searchValue=this.displayValue,this._previousValue=this.displayValue,Ue(this,"ne-change",{composed:!0,bubbles:!0,detail:{value:this.value}}),this._expanded=!1},this._renderInput=()=>l.dy` <input
    class=${V({"has-icon":void 0!==this.icon,active:this._expanded,disabled:this.disabled})}
    type="text"
    ${kt(this._input)}
    ?readonly=${this.readonly||this.disabled}
    aria-label=${this.ariaLabel||l.Ld}
    aria-labelledby=${this.ariaLabelledby||l.Ld}
    placeholder=${ut(this.placeholder)}
    @keydown=${Mt._onKeyDown}
    @input=${this._onInput}
    @mousedown=${this._onMouseDown}
    @click=${Mt._onClick}
    @focusout=${this._onFocusOut}
  />`,this._renderListItems=()=>l.dy`<div class="datalist">
    <ne-dropdown-menu variant=${this.dropdownVariant}>
      ${this._filteredList.map((e=>l.dy`<ne-dropdown-menu-item
          ne-aria-label=${ut(e.ariaLabel)}
          @ne-click=${t=>this._onListItemClicked(t,e.value)}
          @mousedown=${this._onDropDownMouseDown}
          ><span>${this._renderWithHighlight(e.text)}</span>
          <span slot="sub-text">${e.subText}</span></ne-dropdown-menu-item
        >`))}
    </ne-dropdown-menu>
  </div>`,this._renderEmptyList=()=>l.dy`<div class="empty-list">
    <ne-dropdown-menu variant=${this.dropdownVariant}>
      <ne-dropdown-menu-item disabled=""
        >${Lt(this._searchValue,(()=>this.noResultsText),(()=>this.typeToSearchText))}</ne-dropdown-menu-item
      >
    </ne-dropdown-menu>
  </div>`,this._renderLoadingIndicator=()=>l.dy`<div class="loading">
    <ne-dropdown-menu variant=${this.dropdownVariant}>
      <ne-dropdown-menu-item disabled=""
        >${this.searchLoadingText}</ne-dropdown-menu-item
      >
    </ne-dropdown-menu>
  </div>`,this._renderWithHighlight=e=>{if(!this._searchValue||!e)return e;const t=Ft(this._searchValue),o=new RegExp(t,"gi"),n=e.match(o),r=e.split(o);if(!n||!r)return e;let i="";for(let e=0;e<r.length-1;e++)i+=`${r[e]}<span class="emphasis">${n[e]}</span>`;return i+=`${r[r.length-1]}`,l.dy`${Et(i)}`},this.render=()=>l.dy`<div class="container">
    <div class="state-indicator">
      ${this._renderInput()}
      <div class=${void 0!==this.icon?"icon":"hidden"}>
        <ne-icon .type=${this.icon}></ne-icon>
      </div>
    </div>
    ${Lt(this._expanded&&this._filteredList.length>0,this._renderListItems)}
    ${Lt(this._expanded&&0===this._filteredList.length&&!this._isLoading,this._renderEmptyList)}
    ${Lt(this._expanded&&0===this._filteredList.length&&this._searchValue&&this._isLoading,this._renderLoadingIndicator)}
  </div>`,document.addEventListener("click",this._onDocumentClick)}disconnectedCallback(){super.disconnectedCallback?.(),document.removeEventListener("click",this._onDocumentClick)}},jt._onClick=e=>{e.stopPropagation()},jt._onKeyDown=e=>{e.stopPropagation()},Mt=jt);var Vt,It;D([h({type:String})],zt.prototype,"placeholder",void 0),D([h({type:String,attribute:"value"})],zt.prototype,"value",void 0),D([h({type:String,attribute:"display-value"})],zt.prototype,"displayValue",void 0),D([h({type:Boolean,reflect:!0})],zt.prototype,"disabled",void 0),D([h({type:Boolean,reflect:!0})],zt.prototype,"readonly",void 0),D([h({type:Boolean,attribute:"external-list-filter",reflect:!0})],zt.prototype,"externalListFilter",void 0),D([h({type:String,attribute:"ne-aria-label",reflect:!0})],zt.prototype,"ariaLabel",void 0),D([h({type:String,attribute:"ne-aria-labelledby",reflect:!0})],zt.prototype,"ariaLabelledby",void 0),D([h({type:String,attribute:"icon",reflect:!0})],zt.prototype,"icon",void 0),D([h({type:Array,reflect:!0})],zt.prototype,"dataList",null),D([h({type:String,attribute:"no-results-text",reflect:!0})],zt.prototype,"noResultsText",void 0),D([h({type:String,attribute:"type-to-search-text",reflect:!0})],zt.prototype,"typeToSearchText",void 0),D([h({type:String,attribute:"search-loading-text",reflect:!0})],zt.prototype,"searchLoadingText",void 0),D([h({type:String,attribute:"dropdown-variant"})],zt.prototype,"dropdownVariant",void 0),D([p()],zt.prototype,"_expanded",void 0),zt=Mt=D([c("ne-lookup-field")],zt),function(e){e.delete="DELETE",e.get="GET",e.post="POST",e.put="PUT"}(Vt||(Vt={}));class Ut{constructor(e){this._baseUrl="",this.httpPost=async(e,t,o)=>{const n=o||new Headers;n.append("Content-Type","application/json");const r=await fetch(`${this.baseUrl}${e.startsWith("/")?e:`/${e}`}`,{method:Vt.post,headers:n,body:JSON.stringify(t)});if(r.ok)return r;throw new Error(`Response code: ${r.status} does not indicate a successful operation`)},this.httpGet=async e=>{const t=`${this.baseUrl}${e.startsWith("/")?e:`/${e}`}`,o=await fetch(t,{method:Vt.get});if(o.ok)return o;throw new Error(`Response code: ${o.status} does not indicate a successful operation`)},this.httpDelete=async e=>{const t=await fetch(`${this.baseUrl}${e.startsWith("/")?e:`/${e}`}`,{method:Vt.delete});if(t.ok)return t;throw new Error(`Response code: ${t.status} does not indicate a successful operation`)},this.httpPut=async(e,t,o)=>{const n=o||new Headers;n.append("Content-Type","application/json");const r=await fetch(`${this.baseUrl}${e.startsWith("/")?e:`/${e}`}`,{method:Vt.put,headers:n,body:JSON.stringify(t)});if(r.ok)return r;throw new Error(`Response code: ${r.status} does not indicate a successful operation`)},this._baseUrl=e.endsWith("/")?e:`${e}/`}get baseUrl(){return`${this._baseUrl}modeler/api`}static{this.getInstance=e=>(this._dataService&&this._dataService.baseUrl!==e||(this._dataService=new Ut(e)),this._dataService)}static{this.resetInstance=()=>(this._dataService=new Ut(null),this._dataService)}}class Ht{constructor(e){this._baseUrl="/v1/settings",this.getTenantSetting=async e=>new Promise(((t,o)=>{this._dataService.httpGet(`${this._baseUrl}?Name=${e}`).then((async e=>{let n;try{n=await e.json()}catch(e){console.log("Load process model administration error: ",e),o(e)}t(n)})).catch((e=>{console.log("Load process model administration error: ",e),o(e)}))})),this.udpateTenantSetting=async e=>new Promise(((t,o)=>{this._dataService.httpPut(`${this._baseUrl}`,e.data).then((async e=>{let n;try{n=await e.json()}catch(e){console.log("Load process model administration error: ",e),o(e)}t(n)})).catch((e=>{console.log("Update tenant administration error: ",e),o(e)}))})),this._dataService=Ut.getInstance(e)}static{this.getInstance=e=>(this._processesApiService||(this._processesApiService=new Ht(e)),this._processesApiService)}static{this.resetInstance=()=>(this._processesApiService=new Ht(null),this._processesApiService)}}!function(e){e.isModelerEnabled="ProcessModelEnabled"}(It||(It={}));const qt={type:"logger",log(e){this.output("log",e)},warn(e){this.output("warn",e)},error(e){this.output("error",e)},output(e,t){console&&console[e]&&console[e].apply(console,t)}};class Kt{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.init(e,t)}init(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.prefix=t.prefix||"i18next:",this.logger=e||qt,this.options=t,this.debug=t.debug}log(){for(var e=arguments.length,t=new Array(e),o=0;o<e;o++)t[o]=arguments[o];return this.forward(t,"log","",!0)}warn(){for(var e=arguments.length,t=new Array(e),o=0;o<e;o++)t[o]=arguments[o];return this.forward(t,"warn","",!0)}error(){for(var e=arguments.length,t=new Array(e),o=0;o<e;o++)t[o]=arguments[o];return this.forward(t,"error","")}deprecate(){for(var e=arguments.length,t=new Array(e),o=0;o<e;o++)t[o]=arguments[o];return this.forward(t,"warn","WARNING DEPRECATED: ",!0)}forward(e,t,o,n){return n&&!this.debug?null:("string"==typeof e[0]&&(e[0]=`${o}${this.prefix} ${e[0]}`),this.logger[t](e))}create(e){return new Kt(this.logger,{prefix:`${this.prefix}:${e}:`,...this.options})}clone(e){return(e=e||this.options).prefix=e.prefix||this.prefix,new Kt(this.logger,e)}}var Wt=new Kt;class Jt{constructor(){this.observers={}}on(e,t){return e.split(" ").forEach((e=>{this.observers[e]=this.observers[e]||[],this.observers[e].push(t)})),this}off(e,t){this.observers[e]&&(t?this.observers[e]=this.observers[e].filter((e=>e!==t)):delete this.observers[e])}emit(e){for(var t=arguments.length,o=new Array(t>1?t-1:0),n=1;n<t;n++)o[n-1]=arguments[n];if(this.observers[e]){[].concat(this.observers[e]).forEach((e=>{e(...o)}))}if(this.observers["*"]){[].concat(this.observers["*"]).forEach((t=>{t.apply(t,[e,...o])}))}}}function Gt(){let e,t;const o=new Promise(((o,n)=>{e=o,t=n}));return o.resolve=e,o.reject=t,o}function Yt(e){return null==e?"":""+e}function Zt(e,t,o){function n(e){return e&&e.indexOf("###")>-1?e.replace(/###/g,"."):e}function r(){return!e||"string"==typeof e}const i="string"!=typeof t?[].concat(t):t.split(".");for(;i.length>1;){if(r())return{};const t=n(i.shift());!e[t]&&o&&(e[t]=new o),e=Object.prototype.hasOwnProperty.call(e,t)?e[t]:{}}return r()?{}:{obj:e,k:n(i.shift())}}function Qt(e,t,o){const{obj:n,k:r}=Zt(e,t,Object);n[r]=o}function Xt(e,t){const{obj:o,k:n}=Zt(e,t);if(o)return o[n]}function eo(e,t,o){for(const n in t)"__proto__"!==n&&"constructor"!==n&&(n in e?"string"==typeof e[n]||e[n]instanceof String||"string"==typeof t[n]||t[n]instanceof String?o&&(e[n]=t[n]):eo(e[n],t[n],o):e[n]=t[n]);return e}function to(e){return e.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")}var oo={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;"};function no(e){return"string"==typeof e?e.replace(/[&<>"'\/]/g,(e=>oo[e])):e}const ro=[" ",",","?","!",";"];function io(e,t){let o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:".";if(!e)return;if(e[t])return e[t];const n=t.split(o);let r=e;for(let e=0;e<n.length;++e){if(!r)return;if("string"==typeof r[n[e]]&&e+1<n.length)return;if(void 0===r[n[e]]){let i=2,s=n.slice(e,e+i).join(o),a=r[s];for(;void 0===a&&n.length>e+i;)i++,s=n.slice(e,e+i).join(o),a=r[s];if(void 0===a)return;if(null===a)return null;if(t.endsWith(s)){if("string"==typeof a)return a;if(s&&"string"==typeof a[s])return a[s]}const l=n.slice(e+i).join(o);return l?io(a,l,o):void 0}r=r[n[e]]}return r}function so(e){return e&&e.indexOf("_")>0?e.replace("_","-"):e}class ao extends Jt{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{ns:["translation"],defaultNS:"translation"};super(),this.data=e||{},this.options=t,void 0===this.options.keySeparator&&(this.options.keySeparator="."),void 0===this.options.ignoreJSONStructure&&(this.options.ignoreJSONStructure=!0)}addNamespaces(e){this.options.ns.indexOf(e)<0&&this.options.ns.push(e)}removeNamespaces(e){const t=this.options.ns.indexOf(e);t>-1&&this.options.ns.splice(t,1)}getResource(e,t,o){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};const r=void 0!==n.keySeparator?n.keySeparator:this.options.keySeparator,i=void 0!==n.ignoreJSONStructure?n.ignoreJSONStructure:this.options.ignoreJSONStructure;let s=[e,t];o&&"string"!=typeof o&&(s=s.concat(o)),o&&"string"==typeof o&&(s=s.concat(r?o.split(r):o)),e.indexOf(".")>-1&&(s=e.split("."));const a=Xt(this.data,s);return a||!i||"string"!=typeof o?a:io(this.data&&this.data[e]&&this.data[e][t],o,r)}addResource(e,t,o,n){let r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{silent:!1};const i=void 0!==r.keySeparator?r.keySeparator:this.options.keySeparator;let s=[e,t];o&&(s=s.concat(i?o.split(i):o)),e.indexOf(".")>-1&&(s=e.split("."),n=t,t=s[1]),this.addNamespaces(t),Qt(this.data,s,n),r.silent||this.emit("added",e,t,o,n)}addResources(e,t,o){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{silent:!1};for(const n in o)"string"!=typeof o[n]&&"[object Array]"!==Object.prototype.toString.apply(o[n])||this.addResource(e,t,n,o[n],{silent:!0});n.silent||this.emit("added",e,t,o)}addResourceBundle(e,t,o,n,r){let i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{silent:!1},s=[e,t];e.indexOf(".")>-1&&(s=e.split("."),n=o,o=t,t=s[1]),this.addNamespaces(t);let a=Xt(this.data,s)||{};n?eo(a,o,r):a={...a,...o},Qt(this.data,s,a),i.silent||this.emit("added",e,t,o)}removeResourceBundle(e,t){this.hasResourceBundle(e,t)&&delete this.data[e][t],this.removeNamespaces(t),this.emit("removed",e,t)}hasResourceBundle(e,t){return void 0!==this.getResource(e,t)}getResourceBundle(e,t){return t||(t=this.options.defaultNS),"v1"===this.options.compatibilityAPI?{...this.getResource(e,t)}:this.getResource(e,t)}getDataByLanguage(e){return this.data[e]}hasLanguageSomeTranslations(e){const t=this.getDataByLanguage(e);return!!(t&&Object.keys(t)||[]).find((e=>t[e]&&Object.keys(t[e]).length>0))}toJSON(){return this.data}}var lo={processors:{},addPostProcessor(e){this.processors[e.name]=e},handle(e,t,o,n,r){return e.forEach((e=>{this.processors[e]&&(t=this.processors[e].process(t,o,n,r))})),t}};const co={};class uo extends Jt{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};super(),function(e,t,o){e.forEach((e=>{t[e]&&(o[e]=t[e])}))}(["resourceStore","languageUtils","pluralResolver","interpolator","backendConnector","i18nFormat","utils"],e,this),this.options=t,void 0===this.options.keySeparator&&(this.options.keySeparator="."),this.logger=Wt.create("translator")}changeLanguage(e){e&&(this.language=e)}exists(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}};if(null==e)return!1;const o=this.resolve(e,t);return o&&void 0!==o.res}extractFromKey(e,t){let o=void 0!==t.nsSeparator?t.nsSeparator:this.options.nsSeparator;void 0===o&&(o=":");const n=void 0!==t.keySeparator?t.keySeparator:this.options.keySeparator;let r=t.ns||this.options.defaultNS||[];const i=o&&e.indexOf(o)>-1,s=!(this.options.userDefinedKeySeparator||t.keySeparator||this.options.userDefinedNsSeparator||t.nsSeparator||function(e,t,o){t=t||"",o=o||"";const n=ro.filter((e=>t.indexOf(e)<0&&o.indexOf(e)<0));if(0===n.length)return!0;const r=new RegExp(`(${n.map((e=>"?"===e?"\\?":e)).join("|")})`);let i=!r.test(e);if(!i){const t=e.indexOf(o);t>0&&!r.test(e.substring(0,t))&&(i=!0)}return i}(e,o,n));if(i&&!s){const t=e.match(this.interpolator.nestingRegexp);if(t&&t.length>0)return{key:e,namespaces:r};const i=e.split(o);(o!==n||o===n&&this.options.ns.indexOf(i[0])>-1)&&(r=i.shift()),e=i.join(n)}return"string"==typeof r&&(r=[r]),{key:e,namespaces:r}}translate(e,t,o){if("object"!=typeof t&&this.options.overloadTranslationOptionHandler&&(t=this.options.overloadTranslationOptionHandler(arguments)),"object"==typeof t&&(t={...t}),t||(t={}),null==e)return"";Array.isArray(e)||(e=[String(e)]);const n=void 0!==t.returnDetails?t.returnDetails:this.options.returnDetails,r=void 0!==t.keySeparator?t.keySeparator:this.options.keySeparator,{key:i,namespaces:s}=this.extractFromKey(e[e.length-1],t),a=s[s.length-1],l=t.lng||this.language,c=t.appendNamespaceToCIMode||this.options.appendNamespaceToCIMode;if(l&&"cimode"===l.toLowerCase()){if(c){const e=t.nsSeparator||this.options.nsSeparator;return n?{res:`${a}${e}${i}`,usedKey:i,exactUsedKey:i,usedLng:l,usedNS:a}:`${a}${e}${i}`}return n?{res:i,usedKey:i,exactUsedKey:i,usedLng:l,usedNS:a}:i}const d=this.resolve(e,t);let u=d&&d.res;const h=d&&d.usedKey||i,p=d&&d.exactUsedKey||i,f=Object.prototype.toString.apply(u),g=void 0!==t.joinArrays?t.joinArrays:this.options.joinArrays,A=!this.i18nFormat||this.i18nFormat.handleAsObject;if(A&&u&&("string"!=typeof u&&"boolean"!=typeof u&&"number"!=typeof u)&&["[object Number]","[object Function]","[object RegExp]"].indexOf(f)<0&&("string"!=typeof g||"[object Array]"!==f)){if(!t.returnObjects&&!this.options.returnObjects){this.options.returnedObjectHandler||this.logger.warn("accessing an object - but returnObjects options is not enabled!");const e=this.options.returnedObjectHandler?this.options.returnedObjectHandler(h,u,{...t,ns:s}):`key '${i} (${this.language})' returned an object instead of string.`;return n?(d.res=e,d):e}if(r){const e="[object Array]"===f,o=e?[]:{},n=e?p:h;for(const e in u)if(Object.prototype.hasOwnProperty.call(u,e)){const i=`${n}${r}${e}`;o[e]=this.translate(i,{...t,joinArrays:!1,ns:s}),o[e]===i&&(o[e]=u[e])}u=o}}else if(A&&"string"==typeof g&&"[object Array]"===f)u=u.join(g),u&&(u=this.extendTranslation(u,e,t,o));else{let n=!1,s=!1;const c=void 0!==t.count&&"string"!=typeof t.count,h=uo.hasDefaultValue(t),p=c?this.pluralResolver.getSuffix(l,t.count,t):"",f=t.ordinal&&c?this.pluralResolver.getSuffix(l,t.count,{ordinal:!1}):"",g=t[`defaultValue${p}`]||t[`defaultValue${f}`]||t.defaultValue;!this.isValidLookup(u)&&h&&(n=!0,u=g),this.isValidLookup(u)||(s=!0,u=i);const A=(t.missingKeyNoValueFallbackToKey||this.options.missingKeyNoValueFallbackToKey)&&s?void 0:u,v=h&&g!==u&&this.options.updateMissing;if(s||n||v){if(this.logger.log(v?"updateKey":"missingKey",l,a,i,v?g:u),r){const e=this.resolve(i,{...t,keySeparator:!1});e&&e.res&&this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.")}let e=[];const o=this.languageUtils.getFallbackCodes(this.options.fallbackLng,t.lng||this.language);if("fallback"===this.options.saveMissingTo&&o&&o[0])for(let t=0;t<o.length;t++)e.push(o[t]);else"all"===this.options.saveMissingTo?e=this.languageUtils.toResolveHierarchy(t.lng||this.language):e.push(t.lng||this.language);const n=(e,o,n)=>{const r=h&&n!==u?n:A;this.options.missingKeyHandler?this.options.missingKeyHandler(e,a,o,r,v,t):this.backendConnector&&this.backendConnector.saveMissing&&this.backendConnector.saveMissing(e,a,o,r,v,t),this.emit("missingKey",e,a,o,u)};this.options.saveMissing&&(this.options.saveMissingPlurals&&c?e.forEach((e=>{this.pluralResolver.getSuffixes(e,t).forEach((o=>{n([e],i+o,t[`defaultValue${o}`]||g)}))})):n(e,i,g))}u=this.extendTranslation(u,e,t,d,o),s&&u===i&&this.options.appendNamespaceToMissingKey&&(u=`${a}:${i}`),(s||n)&&this.options.parseMissingKeyHandler&&(u="v1"!==this.options.compatibilityAPI?this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey?`${a}:${i}`:i,n?u:void 0):this.options.parseMissingKeyHandler(u))}return n?(d.res=u,d):u}extendTranslation(e,t,o,n,r){var i=this;if(this.i18nFormat&&this.i18nFormat.parse)e=this.i18nFormat.parse(e,{...this.options.interpolation.defaultVariables,...o},n.usedLng,n.usedNS,n.usedKey,{resolved:n});else if(!o.skipInterpolation){o.interpolation&&this.interpolator.init({...o,interpolation:{...this.options.interpolation,...o.interpolation}});const s="string"==typeof e&&(o&&o.interpolation&&void 0!==o.interpolation.skipOnVariables?o.interpolation.skipOnVariables:this.options.interpolation.skipOnVariables);let a;if(s){const t=e.match(this.interpolator.nestingRegexp);a=t&&t.length}let l=o.replace&&"string"!=typeof o.replace?o.replace:o;if(this.options.interpolation.defaultVariables&&(l={...this.options.interpolation.defaultVariables,...l}),e=this.interpolator.interpolate(e,l,o.lng||this.language,o),s){const t=e.match(this.interpolator.nestingRegexp);a<(t&&t.length)&&(o.nest=!1)}!o.lng&&"v1"!==this.options.compatibilityAPI&&n&&n.res&&(o.lng=n.usedLng),!1!==o.nest&&(e=this.interpolator.nest(e,(function(){for(var e=arguments.length,n=new Array(e),s=0;s<e;s++)n[s]=arguments[s];return r&&r[0]===n[0]&&!o.context?(i.logger.warn(`It seems you are nesting recursively key: ${n[0]} in key: ${t[0]}`),null):i.translate(...n,t)}),o)),o.interpolation&&this.interpolator.reset()}const s=o.postProcess||this.options.postProcess,a="string"==typeof s?[s]:s;return null!=e&&a&&a.length&&!1!==o.applyPostProcessor&&(e=lo.handle(a,e,t,this.options&&this.options.postProcessPassResolved?{i18nResolved:n,...o}:o,this)),e}resolve(e){let t,o,n,r,i,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"string"==typeof e&&(e=[e]),e.forEach((e=>{if(this.isValidLookup(t))return;const a=this.extractFromKey(e,s),l=a.key;o=l;let c=a.namespaces;this.options.fallbackNS&&(c=c.concat(this.options.fallbackNS));const d=void 0!==s.count&&"string"!=typeof s.count,u=d&&!s.ordinal&&0===s.count&&this.pluralResolver.shouldUseIntlApi(),h=void 0!==s.context&&("string"==typeof s.context||"number"==typeof s.context)&&""!==s.context,p=s.lngs?s.lngs:this.languageUtils.toResolveHierarchy(s.lng||this.language,s.fallbackLng);c.forEach((e=>{this.isValidLookup(t)||(i=e,!co[`${p[0]}-${e}`]&&this.utils&&this.utils.hasLoadedNamespace&&!this.utils.hasLoadedNamespace(i)&&(co[`${p[0]}-${e}`]=!0,this.logger.warn(`key "${o}" for languages "${p.join(", ")}" won't get resolved as namespace "${i}" was not yet loaded`,"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!")),p.forEach((o=>{if(this.isValidLookup(t))return;r=o;const i=[l];if(this.i18nFormat&&this.i18nFormat.addLookupKeys)this.i18nFormat.addLookupKeys(i,l,o,e,s);else{let e;d&&(e=this.pluralResolver.getSuffix(o,s.count,s));const t=`${this.options.pluralSeparator}zero`,n=`${this.options.pluralSeparator}ordinal${this.options.pluralSeparator}`;if(d&&(i.push(l+e),s.ordinal&&0===e.indexOf(n)&&i.push(l+e.replace(n,this.options.pluralSeparator)),u&&i.push(l+t)),h){const o=`${l}${this.options.contextSeparator}${s.context}`;i.push(o),d&&(i.push(o+e),s.ordinal&&0===e.indexOf(n)&&i.push(o+e.replace(n,this.options.pluralSeparator)),u&&i.push(o+t))}}let a;for(;a=i.pop();)this.isValidLookup(t)||(n=a,t=this.getResource(o,e,a,s))})))}))})),{res:t,usedKey:o,exactUsedKey:n,usedLng:r,usedNS:i}}isValidLookup(e){return!(void 0===e||!this.options.returnNull&&null===e||!this.options.returnEmptyString&&""===e)}getResource(e,t,o){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return this.i18nFormat&&this.i18nFormat.getResource?this.i18nFormat.getResource(e,t,o,n):this.resourceStore.getResource(e,t,o,n)}static hasDefaultValue(e){const t="defaultValue";for(const o in e)if(Object.prototype.hasOwnProperty.call(e,o)&&t===o.substring(0,12)&&void 0!==e[o])return!0;return!1}}function ho(e){return e.charAt(0).toUpperCase()+e.slice(1)}class po{constructor(e){this.options=e,this.supportedLngs=this.options.supportedLngs||!1,this.logger=Wt.create("languageUtils")}getScriptPartFromCode(e){if(!(e=so(e))||e.indexOf("-")<0)return null;const t=e.split("-");return 2===t.length?null:(t.pop(),"x"===t[t.length-1].toLowerCase()?null:this.formatLanguageCode(t.join("-")))}getLanguagePartFromCode(e){if(!(e=so(e))||e.indexOf("-")<0)return e;const t=e.split("-");return this.formatLanguageCode(t[0])}formatLanguageCode(e){if("string"==typeof e&&e.indexOf("-")>-1){const t=["hans","hant","latn","cyrl","cans","mong","arab"];let o=e.split("-");return this.options.lowerCaseLng?o=o.map((e=>e.toLowerCase())):2===o.length?(o[0]=o[0].toLowerCase(),o[1]=o[1].toUpperCase(),t.indexOf(o[1].toLowerCase())>-1&&(o[1]=ho(o[1].toLowerCase()))):3===o.length&&(o[0]=o[0].toLowerCase(),2===o[1].length&&(o[1]=o[1].toUpperCase()),"sgn"!==o[0]&&2===o[2].length&&(o[2]=o[2].toUpperCase()),t.indexOf(o[1].toLowerCase())>-1&&(o[1]=ho(o[1].toLowerCase())),t.indexOf(o[2].toLowerCase())>-1&&(o[2]=ho(o[2].toLowerCase()))),o.join("-")}return this.options.cleanCode||this.options.lowerCaseLng?e.toLowerCase():e}isSupportedCode(e){return("languageOnly"===this.options.load||this.options.nonExplicitSupportedLngs)&&(e=this.getLanguagePartFromCode(e)),!this.supportedLngs||!this.supportedLngs.length||this.supportedLngs.indexOf(e)>-1}getBestMatchFromCodes(e){if(!e)return null;let t;return e.forEach((e=>{if(t)return;const o=this.formatLanguageCode(e);this.options.supportedLngs&&!this.isSupportedCode(o)||(t=o)})),!t&&this.options.supportedLngs&&e.forEach((e=>{if(t)return;const o=this.getLanguagePartFromCode(e);if(this.isSupportedCode(o))return t=o;t=this.options.supportedLngs.find((e=>e===o?e:e.indexOf("-")<0&&o.indexOf("-")<0?void 0:0===e.indexOf(o)?e:void 0))})),t||(t=this.getFallbackCodes(this.options.fallbackLng)[0]),t}getFallbackCodes(e,t){if(!e)return[];if("function"==typeof e&&(e=e(t)),"string"==typeof e&&(e=[e]),"[object Array]"===Object.prototype.toString.apply(e))return e;if(!t)return e.default||[];let o=e[t];return o||(o=e[this.getScriptPartFromCode(t)]),o||(o=e[this.formatLanguageCode(t)]),o||(o=e[this.getLanguagePartFromCode(t)]),o||(o=e.default),o||[]}toResolveHierarchy(e,t){const o=this.getFallbackCodes(t||this.options.fallbackLng||[],e),n=[],r=e=>{e&&(this.isSupportedCode(e)?n.push(e):this.logger.warn(`rejecting language code not found in supportedLngs: ${e}`))};return"string"==typeof e&&(e.indexOf("-")>-1||e.indexOf("_")>-1)?("languageOnly"!==this.options.load&&r(this.formatLanguageCode(e)),"languageOnly"!==this.options.load&&"currentOnly"!==this.options.load&&r(this.getScriptPartFromCode(e)),"currentOnly"!==this.options.load&&r(this.getLanguagePartFromCode(e))):"string"==typeof e&&r(this.formatLanguageCode(e)),o.forEach((e=>{n.indexOf(e)<0&&r(this.formatLanguageCode(e))})),n}}let fo=[{lngs:["ach","ak","am","arn","br","fil","gun","ln","mfe","mg","mi","oc","pt","pt-BR","tg","tl","ti","tr","uz","wa"],nr:[1,2],fc:1},{lngs:["af","an","ast","az","bg","bn","ca","da","de","dev","el","en","eo","es","et","eu","fi","fo","fur","fy","gl","gu","ha","hi","hu","hy","ia","it","kk","kn","ku","lb","mai","ml","mn","mr","nah","nap","nb","ne","nl","nn","no","nso","pa","pap","pms","ps","pt-PT","rm","sco","se","si","so","son","sq","sv","sw","ta","te","tk","ur","yo"],nr:[1,2],fc:2},{lngs:["ay","bo","cgg","fa","ht","id","ja","jbo","ka","km","ko","ky","lo","ms","sah","su","th","tt","ug","vi","wo","zh"],nr:[1],fc:3},{lngs:["be","bs","cnr","dz","hr","ru","sr","uk"],nr:[1,2,5],fc:4},{lngs:["ar"],nr:[0,1,2,3,11,100],fc:5},{lngs:["cs","sk"],nr:[1,2,5],fc:6},{lngs:["csb","pl"],nr:[1,2,5],fc:7},{lngs:["cy"],nr:[1,2,3,8],fc:8},{lngs:["fr"],nr:[1,2],fc:9},{lngs:["ga"],nr:[1,2,3,7,11],fc:10},{lngs:["gd"],nr:[1,2,3,20],fc:11},{lngs:["is"],nr:[1,2],fc:12},{lngs:["jv"],nr:[0,1],fc:13},{lngs:["kw"],nr:[1,2,3,4],fc:14},{lngs:["lt"],nr:[1,2,10],fc:15},{lngs:["lv"],nr:[1,2,0],fc:16},{lngs:["mk"],nr:[1,2],fc:17},{lngs:["mnk"],nr:[0,1,2],fc:18},{lngs:["mt"],nr:[1,2,11,20],fc:19},{lngs:["or"],nr:[2,1],fc:2},{lngs:["ro"],nr:[1,2,20],fc:20},{lngs:["sl"],nr:[5,1,2,3],fc:21},{lngs:["he","iw"],nr:[1,2,20,21],fc:22}],go={1:function(e){return Number(e>1)},2:function(e){return Number(1!=e)},3:function(e){return 0},4:function(e){return Number(e%10==1&&e%100!=11?0:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?1:2)},5:function(e){return Number(0==e?0:1==e?1:2==e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5)},6:function(e){return Number(1==e?0:e>=2&&e<=4?1:2)},7:function(e){return Number(1==e?0:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?1:2)},8:function(e){return Number(1==e?0:2==e?1:8!=e&&11!=e?2:3)},9:function(e){return Number(e>=2)},10:function(e){return Number(1==e?0:2==e?1:e<7?2:e<11?3:4)},11:function(e){return Number(1==e||11==e?0:2==e||12==e?1:e>2&&e<20?2:3)},12:function(e){return Number(e%10!=1||e%100==11)},13:function(e){return Number(0!==e)},14:function(e){return Number(1==e?0:2==e?1:3==e?2:3)},15:function(e){return Number(e%10==1&&e%100!=11?0:e%10>=2&&(e%100<10||e%100>=20)?1:2)},16:function(e){return Number(e%10==1&&e%100!=11?0:0!==e?1:2)},17:function(e){return Number(1==e||e%10==1&&e%100!=11?0:1)},18:function(e){return Number(0==e?0:1==e?1:2)},19:function(e){return Number(1==e?0:0==e||e%100>1&&e%100<11?1:e%100>10&&e%100<20?2:3)},20:function(e){return Number(1==e?0:0==e||e%100>0&&e%100<20?1:2)},21:function(e){return Number(e%100==1?1:e%100==2?2:e%100==3||e%100==4?3:0)},22:function(e){return Number(1==e?0:2==e?1:(e<0||e>10)&&e%10==0?2:3)}};const Ao=["v1","v2","v3"],vo=["v4"],bo={zero:0,one:1,two:2,few:3,many:4,other:5};class mo{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.languageUtils=e,this.options=t,this.logger=Wt.create("pluralResolver"),this.options.compatibilityJSON&&!vo.includes(this.options.compatibilityJSON)||"undefined"!=typeof Intl&&Intl.PluralRules||(this.options.compatibilityJSON="v3",this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.")),this.rules=function(){const e={};return fo.forEach((t=>{t.lngs.forEach((o=>{e[o]={numbers:t.nr,plurals:go[t.fc]}}))})),e}()}addRule(e,t){this.rules[e]=t}getRule(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(this.shouldUseIntlApi())try{return new Intl.PluralRules(so(e),{type:t.ordinal?"ordinal":"cardinal"})}catch{return}return this.rules[e]||this.rules[this.languageUtils.getLanguagePartFromCode(e)]}needsPlural(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const o=this.getRule(e,t);return this.shouldUseIntlApi()?o&&o.resolvedOptions().pluralCategories.length>1:o&&o.numbers.length>1}getPluralFormsOfKey(e,t){let o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.getSuffixes(e,o).map((e=>`${t}${e}`))}getSuffixes(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const o=this.getRule(e,t);return o?this.shouldUseIntlApi()?o.resolvedOptions().pluralCategories.sort(((e,t)=>bo[e]-bo[t])).map((e=>`${this.options.prepend}${t.ordinal?`ordinal${this.options.prepend}`:""}${e}`)):o.numbers.map((o=>this.getSuffix(e,o,t))):[]}getSuffix(e,t){let o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const n=this.getRule(e,o);return n?this.shouldUseIntlApi()?`${this.options.prepend}${o.ordinal?`ordinal${this.options.prepend}`:""}${n.select(t)}`:this.getSuffixRetroCompatible(n,t):(this.logger.warn(`no plural rule found for: ${e}`),"")}getSuffixRetroCompatible(e,t){const o=e.noAbs?e.plurals(t):e.plurals(Math.abs(t));let n=e.numbers[o];this.options.simplifyPluralSuffix&&2===e.numbers.length&&1===e.numbers[0]&&(2===n?n="plural":1===n&&(n=""));const r=()=>this.options.prepend&&n.toString()?this.options.prepend+n.toString():n.toString();return"v1"===this.options.compatibilityJSON?1===n?"":"number"==typeof n?`_plural_${n.toString()}`:r():"v2"===this.options.compatibilityJSON||this.options.simplifyPluralSuffix&&2===e.numbers.length&&1===e.numbers[0]?r():this.options.prepend&&o.toString()?this.options.prepend+o.toString():o.toString()}shouldUseIntlApi(){return!Ao.includes(this.options.compatibilityJSON)}}function yo(e,t,o){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:".",r=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],i=function(e,t,o){const n=Xt(e,o);return void 0!==n?n:Xt(t,o)}(e,t,o);return!i&&r&&"string"==typeof o&&(i=io(e,o,n),void 0===i&&(i=io(t,o,n))),i}class Co{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.logger=Wt.create("interpolator"),this.options=e,this.format=e.interpolation&&e.interpolation.format||(e=>e),this.init(e)}init(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};e.interpolation||(e.interpolation={escapeValue:!0});const t=e.interpolation;this.escape=void 0!==t.escape?t.escape:no,this.escapeValue=void 0===t.escapeValue||t.escapeValue,this.useRawValueToEscape=void 0!==t.useRawValueToEscape&&t.useRawValueToEscape,this.prefix=t.prefix?to(t.prefix):t.prefixEscaped||"{{",this.suffix=t.suffix?to(t.suffix):t.suffixEscaped||"}}",this.formatSeparator=t.formatSeparator?t.formatSeparator:t.formatSeparator||",",this.unescapePrefix=t.unescapeSuffix?"":t.unescapePrefix||"-",this.unescapeSuffix=this.unescapePrefix?"":t.unescapeSuffix||"",this.nestingPrefix=t.nestingPrefix?to(t.nestingPrefix):t.nestingPrefixEscaped||to("$t("),this.nestingSuffix=t.nestingSuffix?to(t.nestingSuffix):t.nestingSuffixEscaped||to(")"),this.nestingOptionsSeparator=t.nestingOptionsSeparator?t.nestingOptionsSeparator:t.nestingOptionsSeparator||",",this.maxReplaces=t.maxReplaces?t.maxReplaces:1e3,this.alwaysFormat=void 0!==t.alwaysFormat&&t.alwaysFormat,this.resetRegExp()}reset(){this.options&&this.init(this.options)}resetRegExp(){const e=`${this.prefix}(.+?)${this.suffix}`;this.regexp=new RegExp(e,"g");const t=`${this.prefix}${this.unescapePrefix}(.+?)${this.unescapeSuffix}${this.suffix}`;this.regexpUnescape=new RegExp(t,"g");const o=`${this.nestingPrefix}(.+?)${this.nestingSuffix}`;this.nestingRegexp=new RegExp(o,"g")}interpolate(e,t,o,n){let r,i,s;const a=this.options&&this.options.interpolation&&this.options.interpolation.defaultVariables||{};function l(e){return e.replace(/\$/g,"$$$$")}const c=e=>{if(e.indexOf(this.formatSeparator)<0){const r=yo(t,a,e,this.options.keySeparator,this.options.ignoreJSONStructure);return this.alwaysFormat?this.format(r,void 0,o,{...n,...t,interpolationkey:e}):r}const r=e.split(this.formatSeparator),i=r.shift().trim(),s=r.join(this.formatSeparator).trim();return this.format(yo(t,a,i,this.options.keySeparator,this.options.ignoreJSONStructure),s,o,{...n,...t,interpolationkey:i})};this.resetRegExp();const d=n&&n.missingInterpolationHandler||this.options.missingInterpolationHandler,u=n&&n.interpolation&&void 0!==n.interpolation.skipOnVariables?n.interpolation.skipOnVariables:this.options.interpolation.skipOnVariables;return[{regex:this.regexpUnescape,safeValue:e=>l(e)},{regex:this.regexp,safeValue:e=>this.escapeValue?l(this.escape(e)):l(e)}].forEach((t=>{for(s=0;r=t.regex.exec(e);){const o=r[1].trim();if(i=c(o),void 0===i)if("function"==typeof d){const t=d(e,r,n);i="string"==typeof t?t:""}else if(n&&Object.prototype.hasOwnProperty.call(n,o))i="";else{if(u){i=r[0];continue}this.logger.warn(`missed to pass in variable ${o} for interpolating ${e}`),i=""}else"string"==typeof i||this.useRawValueToEscape||(i=Yt(i));const a=t.safeValue(i);if(e=e.replace(r[0],a),u?(t.regex.lastIndex+=i.length,t.regex.lastIndex-=r[0].length):t.regex.lastIndex=0,s++,s>=this.maxReplaces)break}})),e}nest(e,t){let o,n,r,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};function s(e,t){const o=this.nestingOptionsSeparator;if(e.indexOf(o)<0)return e;const n=e.split(new RegExp(`${o}[ ]*{`));let i=`{${n[1]}`;e=n[0],i=this.interpolate(i,r);const s=i.match(/'/g),a=i.match(/"/g);(s&&s.length%2==0&&!a||a.length%2!=0)&&(i=i.replace(/'/g,'"'));try{r=JSON.parse(i),t&&(r={...t,...r})}catch(t){return this.logger.warn(`failed parsing options string in nesting for key ${e}`,t),`${e}${o}${i}`}return delete r.defaultValue,e}for(;o=this.nestingRegexp.exec(e);){let a=[];r={...i},r=r.replace&&"string"!=typeof r.replace?r.replace:r,r.applyPostProcessor=!1,delete r.defaultValue;let l=!1;if(-1!==o[0].indexOf(this.formatSeparator)&&!/{.*}/.test(o[1])){const e=o[1].split(this.formatSeparator).map((e=>e.trim()));o[1]=e.shift(),a=e,l=!0}if(n=t(s.call(this,o[1].trim(),r),r),n&&o[0]===e&&"string"!=typeof n)return n;"string"!=typeof n&&(n=Yt(n)),n||(this.logger.warn(`missed to resolve ${o[1]} for nesting ${e}`),n=""),l&&(n=a.reduce(((e,t)=>this.format(e,t,i.lng,{...i,interpolationkey:o[1].trim()})),n.trim())),e=e.replace(o[0],n),this.regexp.lastIndex=0}return e}}function wo(e){const t={};return function(o,n,r){const i=n+JSON.stringify(r);let s=t[i];return s||(s=e(so(n),r),t[i]=s),s(o)}}class xo{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.logger=Wt.create("formatter"),this.options=e,this.formats={number:wo(((e,t)=>{const o=new Intl.NumberFormat(e,{...t});return e=>o.format(e)})),currency:wo(((e,t)=>{const o=new Intl.NumberFormat(e,{...t,style:"currency"});return e=>o.format(e)})),datetime:wo(((e,t)=>{const o=new Intl.DateTimeFormat(e,{...t});return e=>o.format(e)})),relativetime:wo(((e,t)=>{const o=new Intl.RelativeTimeFormat(e,{...t});return e=>o.format(e,t.range||"day")})),list:wo(((e,t)=>{const o=new Intl.ListFormat(e,{...t});return e=>o.format(e)}))},this.init(e)}init(e){const t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}}).interpolation;this.formatSeparator=t.formatSeparator?t.formatSeparator:t.formatSeparator||","}add(e,t){this.formats[e.toLowerCase().trim()]=t}addCached(e,t){this.formats[e.toLowerCase().trim()]=wo(t)}format(e,t,o){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};const r=t.split(this.formatSeparator).reduce(((e,t)=>{const{formatName:r,formatOptions:i}=function(e){let t=e.toLowerCase().trim();const o={};if(e.indexOf("(")>-1){const n=e.split("(");t=n[0].toLowerCase().trim();const r=n[1].substring(0,n[1].length-1);"currency"===t&&r.indexOf(":")<0?o.currency||(o.currency=r.trim()):"relativetime"===t&&r.indexOf(":")<0?o.range||(o.range=r.trim()):r.split(";").forEach((e=>{if(!e)return;const[t,...n]=e.split(":"),r=n.join(":").trim().replace(/^'+|'+$/g,"");o[t.trim()]||(o[t.trim()]=r),"false"===r&&(o[t.trim()]=!1),"true"===r&&(o[t.trim()]=!0),isNaN(r)||(o[t.trim()]=parseInt(r,10))}))}return{formatName:t,formatOptions:o}}(t);if(this.formats[r]){let t=e;try{const s=n&&n.formatParams&&n.formatParams[n.interpolationkey]||{},a=s.locale||s.lng||n.locale||n.lng||o;t=this.formats[r](e,a,{...i,...n,...s})}catch(e){this.logger.warn(e)}return t}return this.logger.warn(`there was no format function for ${r}`),e}),e);return r}}class ko extends Jt{constructor(e,t,o){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};super(),this.backend=e,this.store=t,this.services=o,this.languageUtils=o.languageUtils,this.options=n,this.logger=Wt.create("backendConnector"),this.waitingReads=[],this.maxParallelReads=n.maxParallelReads||10,this.readingCalls=0,this.maxRetries=n.maxRetries>=0?n.maxRetries:5,this.retryTimeout=n.retryTimeout>=1?n.retryTimeout:350,this.state={},this.queue=[],this.backend&&this.backend.init&&this.backend.init(o,n.backend,n)}queueLoad(e,t,o,n){const r={},i={},s={},a={};return e.forEach((e=>{let n=!0;t.forEach((t=>{const s=`${e}|${t}`;!o.reload&&this.store.hasResourceBundle(e,t)?this.state[s]=2:this.state[s]<0||(1===this.state[s]?void 0===i[s]&&(i[s]=!0):(this.state[s]=1,n=!1,void 0===i[s]&&(i[s]=!0),void 0===r[s]&&(r[s]=!0),void 0===a[t]&&(a[t]=!0)))})),n||(s[e]=!0)})),(Object.keys(r).length||Object.keys(i).length)&&this.queue.push({pending:i,pendingCount:Object.keys(i).length,loaded:{},errors:[],callback:n}),{toLoad:Object.keys(r),pending:Object.keys(i),toLoadLanguages:Object.keys(s),toLoadNamespaces:Object.keys(a)}}loaded(e,t,o){const n=e.split("|"),r=n[0],i=n[1];t&&this.emit("failedLoading",r,i,t),o&&this.store.addResourceBundle(r,i,o),this.state[e]=t?-1:2;const s={};this.queue.forEach((o=>{!function(e,t,o,n){const{obj:r,k:i}=Zt(e,t,Object);r[i]=r[i]||[],n&&(r[i]=r[i].concat(o)),n||r[i].push(o)}(o.loaded,[r],i),function(e,t){void 0!==e.pending[t]&&(delete e.pending[t],e.pendingCount--)}(o,e),t&&o.errors.push(t),0!==o.pendingCount||o.done||(Object.keys(o.loaded).forEach((e=>{s[e]||(s[e]={});const t=o.loaded[e];t.length&&t.forEach((t=>{void 0===s[e][t]&&(s[e][t]=!0)}))})),o.done=!0,o.errors.length?o.callback(o.errors):o.callback())})),this.emit("loaded",s),this.queue=this.queue.filter((e=>!e.done))}read(e,t,o){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:this.retryTimeout,i=arguments.length>5?arguments[5]:void 0;if(!e.length)return i(null,{});if(this.readingCalls>=this.maxParallelReads)return void this.waitingReads.push({lng:e,ns:t,fcName:o,tried:n,wait:r,callback:i});this.readingCalls++;const s=(s,a)=>{if(this.readingCalls--,this.waitingReads.length>0){const e=this.waitingReads.shift();this.read(e.lng,e.ns,e.fcName,e.tried,e.wait,e.callback)}s&&a&&n<this.maxRetries?setTimeout((()=>{this.read.call(this,e,t,o,n+1,2*r,i)}),r):i(s,a)},a=this.backend[o].bind(this.backend);if(2!==a.length)return a(e,t,s);try{const o=a(e,t);o&&"function"==typeof o.then?o.then((e=>s(null,e))).catch(s):s(null,o)}catch(e){s(e)}}prepareLoading(e,t){let o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=arguments.length>3?arguments[3]:void 0;if(!this.backend)return this.logger.warn("No backend was added via i18next.use. Will not load resources."),n&&n();"string"==typeof e&&(e=this.languageUtils.toResolveHierarchy(e)),"string"==typeof t&&(t=[t]);const r=this.queueLoad(e,t,o,n);if(!r.toLoad.length)return r.pending.length||n(),null;r.toLoad.forEach((e=>{this.loadOne(e)}))}load(e,t,o){this.prepareLoading(e,t,{},o)}reload(e,t,o){this.prepareLoading(e,t,{reload:!0},o)}loadOne(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";const o=e.split("|"),n=o[0],r=o[1];this.read(n,r,"read",void 0,void 0,((o,i)=>{o&&this.logger.warn(`${t}loading namespace ${r} for language ${n} failed`,o),!o&&i&&this.logger.log(`${t}loaded namespace ${r} for language ${n}`,i),this.loaded(e,o,i)}))}saveMissing(e,t,o,n,r){let i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{},s=arguments.length>6&&void 0!==arguments[6]?arguments[6]:()=>{};if(this.services.utils&&this.services.utils.hasLoadedNamespace&&!this.services.utils.hasLoadedNamespace(t))this.logger.warn(`did not save key "${o}" as the namespace "${t}" was not yet loaded`,"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");else if(null!=o&&""!==o){if(this.backend&&this.backend.create){const a={...i,isUpdate:r},l=this.backend.create.bind(this.backend);if(l.length<6)try{let r;r=5===l.length?l(e,t,o,n,a):l(e,t,o,n),r&&"function"==typeof r.then?r.then((e=>s(null,e))).catch(s):s(null,r)}catch(e){s(e)}else l(e,t,o,n,s,a)}e&&e[0]&&this.store.addResource(e[0],t,o,n)}}}function _o(){return{debug:!1,initImmediate:!0,ns:["translation"],defaultNS:["translation"],fallbackLng:["dev"],fallbackNS:!1,supportedLngs:!1,nonExplicitSupportedLngs:!1,load:"all",preload:!1,simplifyPluralSuffix:!0,keySeparator:".",nsSeparator:":",pluralSeparator:"_",contextSeparator:"_",partialBundledLanguages:!1,saveMissing:!1,updateMissing:!1,saveMissingTo:"fallback",saveMissingPlurals:!0,missingKeyHandler:!1,missingInterpolationHandler:!1,postProcess:!1,postProcessPassResolved:!1,returnNull:!1,returnEmptyString:!0,returnObjects:!1,joinArrays:!1,returnedObjectHandler:!1,parseMissingKeyHandler:!1,appendNamespaceToMissingKey:!1,appendNamespaceToCIMode:!1,overloadTranslationOptionHandler:function(e){let t={};if("object"==typeof e[1]&&(t=e[1]),"string"==typeof e[1]&&(t.defaultValue=e[1]),"string"==typeof e[2]&&(t.tDescription=e[2]),"object"==typeof e[2]||"object"==typeof e[3]){const o=e[3]||e[2];Object.keys(o).forEach((e=>{t[e]=o[e]}))}return t},interpolation:{escapeValue:!0,format:(e,t,o,n)=>e,prefix:"{{",suffix:"}}",formatSeparator:",",unescapePrefix:"-",nestingPrefix:"$t(",nestingSuffix:")",nestingOptionsSeparator:",",maxReplaces:1e3,skipOnVariables:!0}}}function $o(e){return"string"==typeof e.ns&&(e.ns=[e.ns]),"string"==typeof e.fallbackLng&&(e.fallbackLng=[e.fallbackLng]),"string"==typeof e.fallbackNS&&(e.fallbackNS=[e.fallbackNS]),e.supportedLngs&&e.supportedLngs.indexOf("cimode")<0&&(e.supportedLngs=e.supportedLngs.concat(["cimode"])),e}function So(){}class Eo extends Jt{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0;var o;if(super(),this.options=$o(e),this.services={},this.logger=Wt,this.modules={external:[]},o=this,Object.getOwnPropertyNames(Object.getPrototypeOf(o)).forEach((e=>{"function"==typeof o[e]&&(o[e]=o[e].bind(o))})),t&&!this.isInitialized&&!e.isClone){if(!this.options.initImmediate)return this.init(e,t),this;setTimeout((()=>{this.init(e,t)}),0)}}init(){var e=this;let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=arguments.length>1?arguments[1]:void 0;"function"==typeof t&&(o=t,t={}),!t.defaultNS&&!1!==t.defaultNS&&t.ns&&("string"==typeof t.ns?t.defaultNS=t.ns:t.ns.indexOf("translation")<0&&(t.defaultNS=t.ns[0]));const n=_o();function r(e){return e?"function"==typeof e?new e:e:null}if(this.options={...n,...this.options,...$o(t)},"v1"!==this.options.compatibilityAPI&&(this.options.interpolation={...n.interpolation,...this.options.interpolation}),void 0!==t.keySeparator&&(this.options.userDefinedKeySeparator=t.keySeparator),void 0!==t.nsSeparator&&(this.options.userDefinedNsSeparator=t.nsSeparator),!this.options.isClone){let t;this.modules.logger?Wt.init(r(this.modules.logger),this.options):Wt.init(null,this.options),this.modules.formatter?t=this.modules.formatter:"undefined"!=typeof Intl&&(t=xo);const o=new po(this.options);this.store=new ao(this.options.resources,this.options);const i=this.services;i.logger=Wt,i.resourceStore=this.store,i.languageUtils=o,i.pluralResolver=new mo(o,{prepend:this.options.pluralSeparator,compatibilityJSON:this.options.compatibilityJSON,simplifyPluralSuffix:this.options.simplifyPluralSuffix}),!t||this.options.interpolation.format&&this.options.interpolation.format!==n.interpolation.format||(i.formatter=r(t),i.formatter.init(i,this.options),this.options.interpolation.format=i.formatter.format.bind(i.formatter)),i.interpolator=new Co(this.options),i.utils={hasLoadedNamespace:this.hasLoadedNamespace.bind(this)},i.backendConnector=new ko(r(this.modules.backend),i.resourceStore,i,this.options),i.backendConnector.on("*",(function(t){for(var o=arguments.length,n=new Array(o>1?o-1:0),r=1;r<o;r++)n[r-1]=arguments[r];e.emit(t,...n)})),this.modules.languageDetector&&(i.languageDetector=r(this.modules.languageDetector),i.languageDetector.init&&i.languageDetector.init(i,this.options.detection,this.options)),this.modules.i18nFormat&&(i.i18nFormat=r(this.modules.i18nFormat),i.i18nFormat.init&&i.i18nFormat.init(this)),this.translator=new uo(this.services,this.options),this.translator.on("*",(function(t){for(var o=arguments.length,n=new Array(o>1?o-1:0),r=1;r<o;r++)n[r-1]=arguments[r];e.emit(t,...n)})),this.modules.external.forEach((e=>{e.init&&e.init(this)}))}if(this.format=this.options.interpolation.format,o||(o=So),this.options.fallbackLng&&!this.services.languageDetector&&!this.options.lng){const e=this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);e.length>0&&"dev"!==e[0]&&(this.options.lng=e[0])}this.services.languageDetector||this.options.lng||this.logger.warn("init: no languageDetector is used and no lng is defined");["getResource","hasResourceBundle","getResourceBundle","getDataByLanguage"].forEach((t=>{this[t]=function(){return e.store[t](...arguments)}}));["addResource","addResources","addResourceBundle","removeResourceBundle"].forEach((t=>{this[t]=function(){return e.store[t](...arguments),e}}));const i=Gt(),s=()=>{const e=(e,t)=>{this.isInitialized&&!this.initializedStoreOnce&&this.logger.warn("init: i18next is already initialized. You should call init just once!"),this.isInitialized=!0,this.options.isClone||this.logger.log("initialized",this.options),this.emit("initialized",this.options),i.resolve(t),o(e,t)};if(this.languages&&"v1"!==this.options.compatibilityAPI&&!this.isInitialized)return e(null,this.t.bind(this));this.changeLanguage(this.options.lng,e)};return this.options.resources||!this.options.initImmediate?s():setTimeout(s,0),i}loadResources(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:So;const o="string"==typeof e?e:this.language;if("function"==typeof e&&(t=e),!this.options.resources||this.options.partialBundledLanguages){if(o&&"cimode"===o.toLowerCase())return t();const e=[],n=t=>{if(!t)return;this.services.languageUtils.toResolveHierarchy(t).forEach((t=>{e.indexOf(t)<0&&e.push(t)}))};if(o)n(o);else{this.services.languageUtils.getFallbackCodes(this.options.fallbackLng).forEach((e=>n(e)))}this.options.preload&&this.options.preload.forEach((e=>n(e))),this.services.backendConnector.load(e,this.options.ns,(e=>{e||this.resolvedLanguage||!this.language||this.setResolvedLanguage(this.language),t(e)}))}else t(null)}reloadResources(e,t,o){const n=Gt();return e||(e=this.languages),t||(t=this.options.ns),o||(o=So),this.services.backendConnector.reload(e,t,(e=>{n.resolve(),o(e)})),n}use(e){if(!e)throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");if(!e.type)throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");return"backend"===e.type&&(this.modules.backend=e),("logger"===e.type||e.log&&e.warn&&e.error)&&(this.modules.logger=e),"languageDetector"===e.type&&(this.modules.languageDetector=e),"i18nFormat"===e.type&&(this.modules.i18nFormat=e),"postProcessor"===e.type&&lo.addPostProcessor(e),"formatter"===e.type&&(this.modules.formatter=e),"3rdParty"===e.type&&this.modules.external.push(e),this}setResolvedLanguage(e){if(e&&this.languages&&!(["cimode","dev"].indexOf(e)>-1))for(let e=0;e<this.languages.length;e++){const t=this.languages[e];if(!(["cimode","dev"].indexOf(t)>-1)&&this.store.hasLanguageSomeTranslations(t)){this.resolvedLanguage=t;break}}}changeLanguage(e,t){var o=this;this.isLanguageChangingTo=e;const n=Gt();this.emit("languageChanging",e);const r=e=>{this.language=e,this.languages=this.services.languageUtils.toResolveHierarchy(e),this.resolvedLanguage=void 0,this.setResolvedLanguage(e)},i=(e,i)=>{i?(r(i),this.translator.changeLanguage(i),this.isLanguageChangingTo=void 0,this.emit("languageChanged",i),this.logger.log("languageChanged",i)):this.isLanguageChangingTo=void 0,n.resolve((function(){return o.t(...arguments)})),t&&t(e,(function(){return o.t(...arguments)}))},s=t=>{e||t||!this.services.languageDetector||(t=[]);const o="string"==typeof t?t:this.services.languageUtils.getBestMatchFromCodes(t);o&&(this.language||r(o),this.translator.language||this.translator.changeLanguage(o),this.services.languageDetector&&this.services.languageDetector.cacheUserLanguage&&this.services.languageDetector.cacheUserLanguage(o)),this.loadResources(o,(e=>{i(e,o)}))};return e||!this.services.languageDetector||this.services.languageDetector.async?!e&&this.services.languageDetector&&this.services.languageDetector.async?0===this.services.languageDetector.detect.length?this.services.languageDetector.detect().then(s):this.services.languageDetector.detect(s):s(e):s(this.services.languageDetector.detect()),n}getFixedT(e,t,o){var n=this;const r=function(e,t){let i;if("object"!=typeof t){for(var s=arguments.length,a=new Array(s>2?s-2:0),l=2;l<s;l++)a[l-2]=arguments[l];i=n.options.overloadTranslationOptionHandler([e,t].concat(a))}else i={...t};i.lng=i.lng||r.lng,i.lngs=i.lngs||r.lngs,i.ns=i.ns||r.ns,i.keyPrefix=i.keyPrefix||o||r.keyPrefix;const c=n.options.keySeparator||".";let d;return d=i.keyPrefix&&Array.isArray(e)?e.map((e=>`${i.keyPrefix}${c}${e}`)):i.keyPrefix?`${i.keyPrefix}${c}${e}`:e,n.t(d,i)};return"string"==typeof e?r.lng=e:r.lngs=e,r.ns=t,r.keyPrefix=o,r}t(){return this.translator&&this.translator.translate(...arguments)}exists(){return this.translator&&this.translator.exists(...arguments)}setDefaultNamespace(e){this.options.defaultNS=e}hasLoadedNamespace(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!this.isInitialized)return this.logger.warn("hasLoadedNamespace: i18next was not initialized",this.languages),!1;if(!this.languages||!this.languages.length)return this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty",this.languages),!1;const o=t.lng||this.resolvedLanguage||this.languages[0],n=!!this.options&&this.options.fallbackLng,r=this.languages[this.languages.length-1];if("cimode"===o.toLowerCase())return!0;const i=(e,t)=>{const o=this.services.backendConnector.state[`${e}|${t}`];return-1===o||2===o};if(t.precheck){const e=t.precheck(this,i);if(void 0!==e)return e}return!!this.hasResourceBundle(o,e)||(!(this.services.backendConnector.backend&&(!this.options.resources||this.options.partialBundledLanguages))||!(!i(o,e)||n&&!i(r,e)))}loadNamespaces(e,t){const o=Gt();return this.options.ns?("string"==typeof e&&(e=[e]),e.forEach((e=>{this.options.ns.indexOf(e)<0&&this.options.ns.push(e)})),this.loadResources((e=>{o.resolve(),t&&t(e)})),o):(t&&t(),Promise.resolve())}loadLanguages(e,t){const o=Gt();"string"==typeof e&&(e=[e]);const n=this.options.preload||[],r=e.filter((e=>n.indexOf(e)<0));return r.length?(this.options.preload=n.concat(r),this.loadResources((e=>{o.resolve(),t&&t(e)})),o):(t&&t(),Promise.resolve())}dir(e){if(e||(e=this.resolvedLanguage||(this.languages&&this.languages.length>0?this.languages[0]:this.language)),!e)return"rtl";const t=this.services&&this.services.languageUtils||new po(_o());return["ar","shu","sqr","ssh","xaa","yhd","yud","aao","abh","abv","acm","acq","acw","acx","acy","adf","ads","aeb","aec","afb","ajp","apc","apd","arb","arq","ars","ary","arz","auz","avl","ayh","ayl","ayn","ayp","bbz","pga","he","iw","ps","pbt","pbu","pst","prp","prd","ug","ur","ydd","yds","yih","ji","yi","hbo","men","xmn","fa","jpr","peo","pes","prs","dv","sam","ckb"].indexOf(t.getLanguagePartFromCode(e))>-1||e.toLowerCase().indexOf("-arab")>1?"rtl":"ltr"}static createInstance(){return new Eo(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},arguments.length>1?arguments[1]:void 0)}cloneInstance(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:So;const o=e.forkResourceStore;o&&delete e.forkResourceStore;const n={...this.options,...e,isClone:!0},r=new Eo(n);void 0===e.debug&&void 0===e.prefix||(r.logger=r.logger.clone(e));return["store","services","language"].forEach((e=>{r[e]=this[e]})),r.services={...this.services},r.services.utils={hasLoadedNamespace:r.hasLoadedNamespace.bind(r)},o&&(r.store=new ao(this.store.data,n),r.services.resourceStore=r.store),r.translator=new uo(r.services,n),r.translator.on("*",(function(e){for(var t=arguments.length,o=new Array(t>1?t-1:0),n=1;n<t;n++)o[n-1]=arguments[n];r.emit(e,...o)})),r.init(n,t),r.translator.options=n,r.translator.backendConnector.services.utils={hasLoadedNamespace:r.hasLoadedNamespace.bind(r)},r}toJSON(){return{options:this.options,store:this.store,language:this.language,languages:this.languages,resolvedLanguage:this.resolvedLanguage}}}const Lo=Eo.createInstance();Lo.createInstance=Eo.createInstance;const Oo=Lo.createInstance,No=(Lo.dir,Lo.init,Lo.loadResources,Lo.reloadResources,Lo.use,Lo.changeLanguage,Lo.getFixedT,Lo.t,Lo.exists,Lo.setDefaultNamespace,Lo.hasLoadedNamespace,Lo.loadNamespaces,Lo.loadLanguages,JSON.parse('{"functionality-heading":"FR-Process model functionality","enable-process-text":"FR-Enable process modelling"}')),Ro=Oo({fallbackLng:"en",debug:!0,cleanCode:!0,resources:{en:{bpmnAdministration:JSON.parse('{"functionality-heading":"Process model functionality","enable-process-text":"Enable process modelling"}')},fr:{bpmnAdministration:{}},na:{bpmnAdministration:No}},defaultNS:"bpmnAdministration"});Ro.init();const To=Ro;class Do{static async setLanguage(e){await To.changeLanguage(e)}static getInstance(){return this._translationService||(this._translationService=new Do,To.changeLanguage(navigator.language)),this._translationService}static resetInstance(){return this._translationService=null,this.getInstance()}getTranslation(e){return`${To.t(e)}`}getTranslationAndReplace(e,t){let o=`${To.t(e)}`;return t.forEach(((e,t)=>{o=o.replace(`{${t}}`,e)})),o}}var Po=function(e,t,o,n){var r,i=arguments.length,s=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,o,n);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(s=(i<3?r(s):i>3?r(t,o,s):r(t,o))||s);return i>3&&s&&Object.defineProperty(t,o,s),s};class Fo extends(a(l.oi)){static get scopedElements(){return{"ne-panel":customElements.get("ne-panel"),"ne-switch":customElements.get("ne-switch"),"ne-label":customElements.get("ne-label"),"ne-button":customElements.get("ne-button"),"ne-lookup-field":customElements.get("ne-lookup-field")}}static get styles(){return T}constructor(){super(),this._isEnabled=!1,this._onSwitchToggled=async e=>{const t={data:{name:It.isModelerEnabled,value:e.detail.checked.toString()}},o=await this._adminApiService.udpateTenantSetting(t);this._isEnabled="true"===o.value.toLowerCase()},this.fetchTenantSettings=async()=>{const e=await this._adminApiService.getTenantSetting(It.isModelerEnabled);this._isEnabled="true"===e.value.toLowerCase()},this._translationService=Do.getInstance()}async connectedCallback(){super.connectedCallback&&super.connectedCallback();const e=await this.getAppSetting("baseUrl");this._adminApiService=Ht.getInstance(e),await this.fetchTenantSettings()}render(){return l.dy`<div class="admin-container">
      <ne-panel
        heading=${this._translationService.getTranslation("functionality-heading")}
      >
        <span class="row split">
          <ne-label
            >${this._translationService.getTranslation("enable-process-text")}</ne-label
          >
          <ne-switch
            @ne-change=${this._onSwitchToggled}
            invertStateLabelPlacement="true"
            .checked=${this._isEnabled}
          ></ne-switch>
        </span>
      </ne-panel>
    </div>`}}Po([h()],Fo.prototype,"getAppSetting",void 0),Po([p()],Fo.prototype,"_isEnabled",void 0);var Bo=function(e,t,o,n){var r,i=arguments.length,s=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,o,n);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(s=(i<3?r(s):i>3?r(t,o,s):r(t,o))||s);return i>3&&s&&Object.defineProperty(t,o,s),s};let jo=class extends(a(l.oi)){static get scopedElements(){return{"pi-administration-component":Fo}}static get styles(){return R}render(){return l.dy` <pi-administration-component
      .getAppSetting=${async e=>this.getAppSetting(e)}
    ></pi-administration-component>`}};Bo([h()],jo.prototype,"getAppSetting",void 0),jo=Bo([c("pi-administration")],jo)},9793:(e,t,o)=>{"use strict";o.d(t,{ec:()=>c,i1:()=>d,iv:()=>l});const n=window,r=n.ShadowRoot&&(void 0===n.ShadyCSS||n.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,i=Symbol(),s=new WeakMap;class a{constructor(e,t,o){if(this._$cssResult$=!0,o!==i)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=e,this.t=t}get styleSheet(){let e=this.o;const t=this.t;if(r&&void 0===e){const o=void 0!==t&&1===t.length;o&&(e=s.get(t)),void 0===e&&((this.o=e=new CSSStyleSheet).replaceSync(this.cssText),o&&s.set(t,e))}return e}toString(){return this.cssText}}const l=(e,...t)=>{const o=1===e.length?e[0]:t.reduce(((t,o,n)=>t+(e=>{if(!0===e._$cssResult$)return e.cssText;if("number"==typeof e)return e;throw Error("Value passed to 'css' function must be a 'css' function result: "+e+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(o)+e[n+1]),e[0]);return new a(o,e,i)},c=(e,t)=>{r?e.adoptedStyleSheets=t.map((e=>e instanceof CSSStyleSheet?e:e.styleSheet)):t.forEach((t=>{const o=document.createElement("style"),r=n.litNonce;void 0!==r&&o.setAttribute("nonce",r),o.textContent=t.cssText,e.appendChild(o)}))},d=r?e=>e:e=>e instanceof CSSStyleSheet?(e=>{let t="";for(const o of e.cssRules)t+=o.cssText;return(e=>new a("string"==typeof e?e:e+"",void 0,i))(t)})(e):e},3311:(e,t,o)=>{"use strict";var n;o.d(t,{Jb:()=>$,Ld:()=>S,_$LH:()=>I,dy:()=>_,sY:()=>H});const r=window,i=r.trustedTypes,s=i?i.createPolicy("lit-html",{createHTML:e=>e}):void 0,a="$lit$",l=`lit$${(Math.random()+"").slice(9)}$`,c="?"+l,d=`<${c}>`,u=document,h=()=>u.createComment(""),p=e=>null===e||"object"!=typeof e&&"function"!=typeof e,f=Array.isArray,g=e=>f(e)||"function"==typeof(null==e?void 0:e[Symbol.iterator]),A="[ \t\n\f\r]",v=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,b=/-->/g,m=/>/g,y=RegExp(`>|${A}(?:([^\\s"'>=/]+)(${A}*=${A}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),C=/'/g,w=/"/g,x=/^(?:script|style|textarea|title)$/i,k=e=>(t,...o)=>({_$litType$:e,strings:t,values:o}),_=k(1),$=(k(2),Symbol.for("lit-noChange")),S=Symbol.for("lit-nothing"),E=new WeakMap,L=u.createTreeWalker(u,129,null,!1);function O(e,t){if(!Array.isArray(e)||!e.hasOwnProperty("raw"))throw Error("invalid template strings array");return void 0!==s?s.createHTML(t):t}const N=(e,t)=>{const o=e.length-1,n=[];let r,i=2===t?"<svg>":"",s=v;for(let t=0;t<o;t++){const o=e[t];let c,u,h=-1,p=0;for(;p<o.length&&(s.lastIndex=p,u=s.exec(o),null!==u);)p=s.lastIndex,s===v?"!--"===u[1]?s=b:void 0!==u[1]?s=m:void 0!==u[2]?(x.test(u[2])&&(r=RegExp("</"+u[2],"g")),s=y):void 0!==u[3]&&(s=y):s===y?">"===u[0]?(s=null!=r?r:v,h=-1):void 0===u[1]?h=-2:(h=s.lastIndex-u[2].length,c=u[1],s=void 0===u[3]?y:'"'===u[3]?w:C):s===w||s===C?s=y:s===b||s===m?s=v:(s=y,r=void 0);const f=s===y&&e[t+1].startsWith("/>")?" ":"";i+=s===v?o+d:h>=0?(n.push(c),o.slice(0,h)+a+o.slice(h)+l+f):o+l+(-2===h?(n.push(void 0),t):f)}return[O(e,i+(e[o]||"<?>")+(2===t?"</svg>":"")),n]};class R{constructor({strings:e,_$litType$:t},o){let n;this.parts=[];let r=0,s=0;const d=e.length-1,u=this.parts,[p,f]=N(e,t);if(this.el=R.createElement(p,o),L.currentNode=this.el.content,2===t){const e=this.el.content,t=e.firstChild;t.remove(),e.append(...t.childNodes)}for(;null!==(n=L.nextNode())&&u.length<d;){if(1===n.nodeType){if(n.hasAttributes()){const e=[];for(const t of n.getAttributeNames())if(t.endsWith(a)||t.startsWith(l)){const o=f[s++];if(e.push(t),void 0!==o){const e=n.getAttribute(o.toLowerCase()+a).split(l),t=/([.?@])?(.*)/.exec(o);u.push({type:1,index:r,name:t[2],strings:e,ctor:"."===t[1]?B:"?"===t[1]?M:"@"===t[1]?z:F})}else u.push({type:6,index:r})}for(const t of e)n.removeAttribute(t)}if(x.test(n.tagName)){const e=n.textContent.split(l),t=e.length-1;if(t>0){n.textContent=i?i.emptyScript:"";for(let o=0;o<t;o++)n.append(e[o],h()),L.nextNode(),u.push({type:2,index:++r});n.append(e[t],h())}}}else if(8===n.nodeType)if(n.data===c)u.push({type:2,index:r});else{let e=-1;for(;-1!==(e=n.data.indexOf(l,e+1));)u.push({type:7,index:r}),e+=l.length-1}r++}}static createElement(e,t){const o=u.createElement("template");return o.innerHTML=e,o}}function T(e,t,o=e,n){var r,i,s,a;if(t===$)return t;let l=void 0!==n?null===(r=o._$Co)||void 0===r?void 0:r[n]:o._$Cl;const c=p(t)?void 0:t._$litDirective$;return(null==l?void 0:l.constructor)!==c&&(null===(i=null==l?void 0:l._$AO)||void 0===i||i.call(l,!1),void 0===c?l=void 0:(l=new c(e),l._$AT(e,o,n)),void 0!==n?(null!==(s=(a=o)._$Co)&&void 0!==s?s:a._$Co=[])[n]=l:o._$Cl=l),void 0!==l&&(t=T(e,l._$AS(e,t.values),l,n)),t}class D{constructor(e,t){this._$AV=[],this._$AN=void 0,this._$AD=e,this._$AM=t}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(e){var t;const{el:{content:o},parts:n}=this._$AD,r=(null!==(t=null==e?void 0:e.creationScope)&&void 0!==t?t:u).importNode(o,!0);L.currentNode=r;let i=L.nextNode(),s=0,a=0,l=n[0];for(;void 0!==l;){if(s===l.index){let t;2===l.type?t=new P(i,i.nextSibling,this,e):1===l.type?t=new l.ctor(i,l.name,l.strings,this,e):6===l.type&&(t=new V(i,this,e)),this._$AV.push(t),l=n[++a]}s!==(null==l?void 0:l.index)&&(i=L.nextNode(),s++)}return L.currentNode=u,r}v(e){let t=0;for(const o of this._$AV)void 0!==o&&(void 0!==o.strings?(o._$AI(e,o,t),t+=o.strings.length-2):o._$AI(e[t])),t++}}class P{constructor(e,t,o,n){var r;this.type=2,this._$AH=S,this._$AN=void 0,this._$AA=e,this._$AB=t,this._$AM=o,this.options=n,this._$Cp=null===(r=null==n?void 0:n.isConnected)||void 0===r||r}get _$AU(){var e,t;return null!==(t=null===(e=this._$AM)||void 0===e?void 0:e._$AU)&&void 0!==t?t:this._$Cp}get parentNode(){let e=this._$AA.parentNode;const t=this._$AM;return void 0!==t&&11===(null==e?void 0:e.nodeType)&&(e=t.parentNode),e}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(e,t=this){e=T(this,e,t),p(e)?e===S||null==e||""===e?(this._$AH!==S&&this._$AR(),this._$AH=S):e!==this._$AH&&e!==$&&this._(e):void 0!==e._$litType$?this.g(e):void 0!==e.nodeType?this.$(e):g(e)?this.T(e):this._(e)}k(e){return this._$AA.parentNode.insertBefore(e,this._$AB)}$(e){this._$AH!==e&&(this._$AR(),this._$AH=this.k(e))}_(e){this._$AH!==S&&p(this._$AH)?this._$AA.nextSibling.data=e:this.$(u.createTextNode(e)),this._$AH=e}g(e){var t;const{values:o,_$litType$:n}=e,r="number"==typeof n?this._$AC(e):(void 0===n.el&&(n.el=R.createElement(O(n.h,n.h[0]),this.options)),n);if((null===(t=this._$AH)||void 0===t?void 0:t._$AD)===r)this._$AH.v(o);else{const e=new D(r,this),t=e.u(this.options);e.v(o),this.$(t),this._$AH=e}}_$AC(e){let t=E.get(e.strings);return void 0===t&&E.set(e.strings,t=new R(e)),t}T(e){f(this._$AH)||(this._$AH=[],this._$AR());const t=this._$AH;let o,n=0;for(const r of e)n===t.length?t.push(o=new P(this.k(h()),this.k(h()),this,this.options)):o=t[n],o._$AI(r),n++;n<t.length&&(this._$AR(o&&o._$AB.nextSibling,n),t.length=n)}_$AR(e=this._$AA.nextSibling,t){var o;for(null===(o=this._$AP)||void 0===o||o.call(this,!1,!0,t);e&&e!==this._$AB;){const t=e.nextSibling;e.remove(),e=t}}setConnected(e){var t;void 0===this._$AM&&(this._$Cp=e,null===(t=this._$AP)||void 0===t||t.call(this,e))}}class F{constructor(e,t,o,n,r){this.type=1,this._$AH=S,this._$AN=void 0,this.element=e,this.name=t,this._$AM=n,this.options=r,o.length>2||""!==o[0]||""!==o[1]?(this._$AH=Array(o.length-1).fill(new String),this.strings=o):this._$AH=S}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(e,t=this,o,n){const r=this.strings;let i=!1;if(void 0===r)e=T(this,e,t,0),i=!p(e)||e!==this._$AH&&e!==$,i&&(this._$AH=e);else{const n=e;let s,a;for(e=r[0],s=0;s<r.length-1;s++)a=T(this,n[o+s],t,s),a===$&&(a=this._$AH[s]),i||(i=!p(a)||a!==this._$AH[s]),a===S?e=S:e!==S&&(e+=(null!=a?a:"")+r[s+1]),this._$AH[s]=a}i&&!n&&this.j(e)}j(e){e===S?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=e?e:"")}}class B extends F{constructor(){super(...arguments),this.type=3}j(e){this.element[this.name]=e===S?void 0:e}}const j=i?i.emptyScript:"";class M extends F{constructor(){super(...arguments),this.type=4}j(e){e&&e!==S?this.element.setAttribute(this.name,j):this.element.removeAttribute(this.name)}}class z extends F{constructor(e,t,o,n,r){super(e,t,o,n,r),this.type=5}_$AI(e,t=this){var o;if((e=null!==(o=T(this,e,t,0))&&void 0!==o?o:S)===$)return;const n=this._$AH,r=e===S&&n!==S||e.capture!==n.capture||e.once!==n.once||e.passive!==n.passive,i=e!==S&&(n===S||r);r&&this.element.removeEventListener(this.name,this,n),i&&this.element.addEventListener(this.name,this,e),this._$AH=e}handleEvent(e){var t,o;"function"==typeof this._$AH?this._$AH.call(null!==(o=null===(t=this.options)||void 0===t?void 0:t.host)&&void 0!==o?o:this.element,e):this._$AH.handleEvent(e)}}class V{constructor(e,t,o){this.element=e,this.type=6,this._$AN=void 0,this._$AM=t,this.options=o}get _$AU(){return this._$AM._$AU}_$AI(e){T(this,e)}}const I={O:a,P:l,A:c,C:1,M:N,L:D,D:g,R:T,I:P,V:F,H:M,N:z,U:B,F:V},U=r.litHtmlPolyfillSupport;null==U||U(R,P),(null!==(n=r.litHtmlVersions)&&void 0!==n?n:r.litHtmlVersions=[]).push("2.7.5");const H=(e,t,o)=>{var n,r;const i=null!==(n=null==o?void 0:o.renderBefore)&&void 0!==n?n:t;let s=i._$litPart$;if(void 0===s){const e=null!==(r=null==o?void 0:o.renderBefore)&&void 0!==r?r:null;i._$litPart$=s=new P(t.insertBefore(h(),e),e,void 0,null!=o?o:{})}return s._$AI(e),s}},3192:(e,t,o)=>{"use strict";o.d(t,{oi:()=>v,iv:()=>r.iv,dy:()=>A.dy,Ld:()=>A.Ld});var n,r=o(9793);const i=window,s=i.trustedTypes,a=s?s.emptyScript:"",l=i.reactiveElementPolyfillSupport,c={toAttribute(e,t){switch(t){case Boolean:e=e?a:null;break;case Object:case Array:e=null==e?e:JSON.stringify(e)}return e},fromAttribute(e,t){let o=e;switch(t){case Boolean:o=null!==e;break;case Number:o=null===e?null:Number(e);break;case Object:case Array:try{o=JSON.parse(e)}catch(e){o=null}}return o}},d=(e,t)=>t!==e&&(t==t||e==e),u={attribute:!0,type:String,converter:c,reflect:!1,hasChanged:d},h="finalized";class p extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(e){var t;this.finalize(),(null!==(t=this.h)&&void 0!==t?t:this.h=[]).push(e)}static get observedAttributes(){this.finalize();const e=[];return this.elementProperties.forEach(((t,o)=>{const n=this._$Ep(o,t);void 0!==n&&(this._$Ev.set(n,o),e.push(n))})),e}static createProperty(e,t=u){if(t.state&&(t.attribute=!1),this.finalize(),this.elementProperties.set(e,t),!t.noAccessor&&!this.prototype.hasOwnProperty(e)){const o="symbol"==typeof e?Symbol():"__"+e,n=this.getPropertyDescriptor(e,o,t);void 0!==n&&Object.defineProperty(this.prototype,e,n)}}static getPropertyDescriptor(e,t,o){return{get(){return this[t]},set(n){const r=this[e];this[t]=n,this.requestUpdate(e,r,o)},configurable:!0,enumerable:!0}}static getPropertyOptions(e){return this.elementProperties.get(e)||u}static finalize(){if(this.hasOwnProperty(h))return!1;this[h]=!0;const e=Object.getPrototypeOf(this);if(e.finalize(),void 0!==e.h&&(this.h=[...e.h]),this.elementProperties=new Map(e.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const e=this.properties,t=[...Object.getOwnPropertyNames(e),...Object.getOwnPropertySymbols(e)];for(const o of t)this.createProperty(o,e[o])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(e){const t=[];if(Array.isArray(e)){const o=new Set(e.flat(1/0).reverse());for(const e of o)t.unshift((0,r.i1)(e))}else void 0!==e&&t.push((0,r.i1)(e));return t}static _$Ep(e,t){const o=t.attribute;return!1===o?void 0:"string"==typeof o?o:"string"==typeof e?e.toLowerCase():void 0}u(){var e;this._$E_=new Promise((e=>this.enableUpdating=e)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(e=this.constructor.h)||void 0===e||e.forEach((e=>e(this)))}addController(e){var t,o;(null!==(t=this._$ES)&&void 0!==t?t:this._$ES=[]).push(e),void 0!==this.renderRoot&&this.isConnected&&(null===(o=e.hostConnected)||void 0===o||o.call(e))}removeController(e){var t;null===(t=this._$ES)||void 0===t||t.splice(this._$ES.indexOf(e)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((e,t)=>{this.hasOwnProperty(t)&&(this._$Ei.set(t,this[t]),delete this[t])}))}createRenderRoot(){var e;const t=null!==(e=this.shadowRoot)&&void 0!==e?e:this.attachShadow(this.constructor.shadowRootOptions);return(0,r.ec)(t,this.constructor.elementStyles),t}connectedCallback(){var e;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostConnected)||void 0===t?void 0:t.call(e)}))}enableUpdating(e){}disconnectedCallback(){var e;null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostDisconnected)||void 0===t?void 0:t.call(e)}))}attributeChangedCallback(e,t,o){this._$AK(e,o)}_$EO(e,t,o=u){var n;const r=this.constructor._$Ep(e,o);if(void 0!==r&&!0===o.reflect){const i=(void 0!==(null===(n=o.converter)||void 0===n?void 0:n.toAttribute)?o.converter:c).toAttribute(t,o.type);this._$El=e,null==i?this.removeAttribute(r):this.setAttribute(r,i),this._$El=null}}_$AK(e,t){var o;const n=this.constructor,r=n._$Ev.get(e);if(void 0!==r&&this._$El!==r){const e=n.getPropertyOptions(r),i="function"==typeof e.converter?{fromAttribute:e.converter}:void 0!==(null===(o=e.converter)||void 0===o?void 0:o.fromAttribute)?e.converter:c;this._$El=r,this[r]=i.fromAttribute(t,e.type),this._$El=null}}requestUpdate(e,t,o){let n=!0;void 0!==e&&(((o=o||this.constructor.getPropertyOptions(e)).hasChanged||d)(this[e],t)?(this._$AL.has(e)||this._$AL.set(e,t),!0===o.reflect&&this._$El!==e&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(e,o))):n=!1),!this.isUpdatePending&&n&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(e){Promise.reject(e)}const e=this.scheduleUpdate();return null!=e&&await e,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var e;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((e,t)=>this[t]=e)),this._$Ei=void 0);let t=!1;const o=this._$AL;try{t=this.shouldUpdate(o),t?(this.willUpdate(o),null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostUpdate)||void 0===t?void 0:t.call(e)})),this.update(o)):this._$Ek()}catch(e){throw t=!1,this._$Ek(),e}t&&this._$AE(o)}willUpdate(e){}_$AE(e){var t;null===(t=this._$ES)||void 0===t||t.forEach((e=>{var t;return null===(t=e.hostUpdated)||void 0===t?void 0:t.call(e)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(e)),this.updated(e)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(e){return!0}update(e){void 0!==this._$EC&&(this._$EC.forEach(((e,t)=>this._$EO(t,this[t],e))),this._$EC=void 0),this._$Ek()}updated(e){}firstUpdated(e){}}p[h]=!0,p.elementProperties=new Map,p.elementStyles=[],p.shadowRootOptions={mode:"open"},null==l||l({ReactiveElement:p}),(null!==(n=i.reactiveElementVersions)&&void 0!==n?n:i.reactiveElementVersions=[]).push("1.6.2");var f,g,A=o(3311);class v extends p{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var e,t;const o=super.createRenderRoot();return null!==(e=(t=this.renderOptions).renderBefore)&&void 0!==e||(t.renderBefore=o.firstChild),o}update(e){const t=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(e),this._$Do=(0,A.sY)(t,this.renderRoot,this.renderOptions)}connectedCallback(){var e;super.connectedCallback(),null===(e=this._$Do)||void 0===e||e.setConnected(!0)}disconnectedCallback(){var e;super.disconnectedCallback(),null===(e=this._$Do)||void 0===e||e.setConnected(!1)}render(){return A.Jb}}v.finalized=!0,v._$litElement$=!0,null===(f=globalThis.litElementHydrateSupport)||void 0===f||f.call(globalThis,{LitElement:v});const b=globalThis.litElementPolyfillSupport;null==b||b({LitElement:v});(null!==(g=globalThis.litElementVersions)&&void 0!==g?g:globalThis.litElementVersions=[]).push("3.3.2")}},n={};function r(e){var t=n[e];if(void 0!==t)return t.exports;var i=n[e]={id:e,exports:{}};return o[e](i,i.exports,r),i.exports}r.m=o,r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.f={},r.e=e=>Promise.all(Object.keys(r.f).reduce(((t,o)=>(r.f[o](e,t),t)),[])),r.u=e=>e+".bundle.js",r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="@pi/administration:",r.l=(o,n,i,s)=>{if(e[o])e[o].push(n);else{var a,l;if(void 0!==i)for(var c=document.getElementsByTagName("script"),d=0;d<c.length;d++){var u=c[d];if(u.getAttribute("src")==o||u.getAttribute("data-webpack")==t+i){a=u;break}}a||(l=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,r.nc&&a.setAttribute("nonce",r.nc),a.setAttribute("data-webpack",t+i),a.src=o),e[o]=[n];var h=(t,n)=>{a.onerror=a.onload=null,clearTimeout(p);var r=e[o];if(delete e[o],a.parentNode&&a.parentNode.removeChild(a),r&&r.forEach((e=>e(n))),t)return t(n)},p=setTimeout(h.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=h.bind(null,a.onerror),a.onload=h.bind(null,a.onload),l&&document.head.appendChild(a)}},r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var t=r.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var o=t.getElementsByTagName("script");if(o.length)for(var n=o.length-1;n>-1&&!e;)e=o[n--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),(()=>{var e={179:0};r.f.j=(t,o)=>{var n=r.o(e,t)?e[t]:void 0;if(0!==n)if(n)o.push(n[2]);else{var i=new Promise(((o,r)=>n=e[t]=[o,r]));o.push(n[2]=i);var s=r.p+r.u(t),a=new Error;r.l(s,(o=>{if(r.o(e,t)&&(0!==(n=e[t])&&(e[t]=void 0),n)){var i=o&&("load"===o.type?"missing":o.type),s=o&&o.target&&o.target.src;a.message="Loading chunk "+t+" failed.\n("+i+": "+s+")",a.name="ChunkLoadError",a.type=i,a.request=s,n[1](a)}}),"chunk-"+t,t)}};var t=(t,o)=>{var n,i,[s,a,l]=o,c=0;if(s.some((t=>0!==e[t]))){for(n in a)r.o(a,n)&&(r.m[n]=a[n]);if(l)l(r)}for(t&&t(o);c<s.length;c++)i=s[c],r.o(e,i)&&e[i]&&e[i][0](),e[i]=0},o=self.webpackChunk_pi_administration=self.webpackChunk_pi_administration||[];o.forEach(t.bind(null,0)),o.push=t.bind(null,o.push.bind(o))})(),r.nc=void 0,(()=>{"use strict";r(5846)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,