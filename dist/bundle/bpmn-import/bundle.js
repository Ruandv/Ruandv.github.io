/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e={8388:(e,t,n)=>{n.r(t),n.d(t,{_export:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M9.824 3.514a.48.48 0 0 1-.11-.507.444.444 0 0 1 .417-.29l3.202-.05-.05 3.204a.449.449 0 0 1-.457.446.491.491 0 0 1-.344-.144.454.454 0 0 1-.133-.343l.043-1.497-4.779 4.782a.413.413 0 0 1-.296.116.566.566 0 0 1-.389-.162.494.494 0 0 1-.04-.68l4.778-4.781-1.496.043a.48.48 0 0 1-.346-.137Zm2.285 3.597c.074.29.113.59.118.889A4.228 4.228 0 1 1 8 3.773c.3.002.597.036.889.103v-1.12A5.055 5.055 0 0 0 8 2.666 5.333 5.333 0 1 0 13.333 8a5.052 5.052 0 0 0-.089-.889H12.11Z"
  />
</svg>`},9699:(e,t,n)=>{n.r(t),n.d(t,{_import:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M3.12 3.87A.43.43 0 0 1 3 3.567a.584.584 0 0 1 .167-.402.509.509 0 0 1 .702-.041L8.798 8.05l-.043-1.544a.49.49 0 0 1 .829-.362.458.458 0 0 1 .133.322l.053 3.3-3.306-.053a.464.464 0 0 1-.46-.471.518.518 0 0 1 .148-.355.477.477 0 0 1 .355-.137l1.543.045-4.93-4.924ZM8.5 3a5.435 5.435 0 0 0-2.2.474l.887.887a4.272 4.272 0 0 1 1.313-.22A4.36 4.36 0 1 1 4.141 8.5a4.315 4.315 0 0 1 .47-1.946l-.836-.837a5.44 5.44 0 0 0 .152 5.839A5.5 5.5 0 1 0 8.5 3Z"
  />
</svg>`},7352:(e,t,n)=>{n.r(t),n.d(t,{add:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M10.69 2.388a6.222 6.222 0 1 0 2.917 8.302 6.193 6.193 0 0 0-2.916-8.302Zm.847 6.5H8.889v2.668a.889.889 0 0 1-1.778 0V8.889H4.463a.889.889 0 1 1 0-1.778h2.648V4.463a.889.889 0 1 1 1.778 0v2.648h2.648a.889.889 0 0 1 0 1.778Z"
  />
</svg>`},6939:(e,t,n)=>{n.r(t),n.d(t,{archive:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M12.889 3.556H3.11A.444.444 0 0 0 2.667 4v1.778a.444.444 0 0 0 .444.444h.445V12a.445.445 0 0 0 .444.444h8a.445.445 0 0 0 .444-.444V6.217h.445a.445.445 0 0 0 .444-.445V3.995a.444.444 0 0 0-.444-.44Zm-1.333 7.78a.222.222 0 0 1-.223.221H4.667a.222.222 0 0 1-.223-.222V6.217h7.112v5.118Zm.666-6.892a.222.222 0 0 1 .222.223v.444a.222.222 0 0 1-.222.222H3.778a.222.222 0 0 1-.222-.222v-.444a.222.222 0 0 1 .222-.223h8.444ZM5.333 7.556a.444.444 0 0 1 .445-.445h4.444a.445.445 0 0 1 0 .889H5.778a.444.444 0 0 1-.445-.444Z"
  />
</svg>`},4783:(e,t,n)=>{n.r(t),n.d(t,{arrowDown:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M12.444 9.74a.77.77 0 0 1-.25.566l-4.175 3.916-4.215-3.895a.793.793 0 0 1-.248-.572.807.807 0 0 1 .266-.579c.182-.16.416-.249.658-.25a.857.857 0 0 1 .628.267l1.95 1.938h.053V3.556a.889.889 0 1 1 1.778 0v7.568h.059l1.955-1.915a.95.95 0 0 1 .64-.281.912.912 0 0 1 .606.204.799.799 0 0 1 .295.608Z"
  />
</svg>`},7404:(e,t,n)=>{n.r(t),n.d(t,{arrowUp:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M3.556 7.15a.773.773 0 0 1 .25-.567l4.175-3.916 4.215 3.895a.793.793 0 0 1 .248.572.805.805 0 0 1-.266.579c-.182.16-.416.249-.658.25a.856.856 0 0 1-.628-.267l-1.95-1.938H8.89v7.575a.889.889 0 1 1-1.778 0V5.765h-.059L5.097 7.68a.95.95 0 0 1-.64.28.912.912 0 0 1-.606-.204.8.8 0 0 1-.295-.607Z"
  />
</svg>`},588:(e,t,n)=>{n.r(t),n.d(t,{caretDown:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M8.45 10.555a.553.553 0 0 1-.669 0L5.996 8.612 4.584 7.118a.544.544 0 0 1 .293-.896h6.548a.544.544 0 0 1 .296.896L10.31 8.612l-1.86 1.943Z"
  />
</svg>`},1746:(e,t,n)=>{n.r(t),n.d(t,{caretLeft:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M6.043 8.45a.553.553 0 0 1 0-.669l1.942-1.785 1.494-1.412a.544.544 0 0 1 .896.293v6.548a.544.544 0 0 1-.896.296L7.985 10.31 6.043 8.45Z"
  />
</svg>`},5147:(e,t,n)=>{n.r(t),n.d(t,{caretRight:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M10.262 7.854a.553.553 0 0 1 0 .67L8.32 10.309 6.826 11.72a.544.544 0 0 1-.896-.293V4.88a.544.544 0 0 1 .896-.297L8.32 5.996l1.942 1.858Z"
  />
</svg>`},5245:(e,t,n)=>{n.r(t),n.d(t,{caretUp:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M7.854 6.335a.553.553 0 0 1 .67 0l1.785 1.942 1.412 1.494a.545.545 0 0 1-.293.896H4.88a.544.544 0 0 1-.297-.896l1.413-1.494 1.858-1.942Z"
  />
</svg>`},3441:(e,t,n)=>{n.r(t),n.d(t,{check:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 11 8"
>
  <path
    fill="currentColor"
    d="M9.779 1.997 5.045 7.29a.867.867 0 0 1-1.249 0L.814 4.302a.929.929 0 0 1 0-1.286.866.866 0 0 1 1.25 0L4.421 5.36 8.528.71a.868.868 0 0 1 1.25 0 .932.932 0 0 1 0 1.287Z"
  />
</svg>`},157:(e,t,n)=>{n.r(t),n.d(t,{chevronDown:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M3.92 4.444a1.25 1.25 0 0 1 1.007.509L8 9.103l3.073-4.15a1.256 1.256 0 1 1 2.012 1.502l-4.078 5.511a1.296 1.296 0 0 1-2.012 0l-4.08-5.51a1.262 1.262 0 0 1 .257-1.763c.216-.161.478-.249.748-.249Z"
  />
</svg>`},1316:(e,t,n)=>{n.r(t),n.d(t,{chevronLeft:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M12 4.345a1.25 1.25 0 0 1-.508 1.007l-4.15 3.073 4.15 3.073a1.255 1.255 0 1 1-1.503 2.012L4.48 9.432a1.296 1.296 0 0 1 0-2.012l5.51-4.08a1.262 1.262 0 0 1 1.762.257c.162.216.25.478.25.748Z"
  />
</svg>`},9683:(e,t,n)=>{n.r(t),n.d(t,{chevronLightDown:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M8 10.667a.51.51 0 0 1-.343-.13L2.809 6.092a.42.42 0 0 1 0-.629.516.516 0 0 1 .685 0L8 9.593l4.506-4.13a.516.516 0 0 1 .685 0 .419.419 0 0 1 0 .63l-4.848 4.444a.51.51 0 0 1-.343.13Z"
  />
</svg>`},1788:(e,t,n)=>{n.r(t),n.d(t,{chevronLightLeft:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M5.333 8a.51.51 0 0 1 .13-.343l4.444-4.848a.42.42 0 0 1 .63 0 .517.517 0 0 1 0 .685L6.407 8l4.13 4.506a.516.516 0 0 1 0 .685.42.42 0 0 1-.63 0L5.463 8.343A.51.51 0 0 1 5.333 8Z"
  />
</svg>`},7776:(e,t,n)=>{n.r(t),n.d(t,{chevronLightRight:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M10.667 8a.51.51 0 0 1-.13.343l-4.444 4.848a.42.42 0 0 1-.63 0 .517.517 0 0 1 0-.685L9.593 8l-4.13-4.506a.516.516 0 0 1 0-.685.42.42 0 0 1 .63 0l4.444 4.848a.51.51 0 0 1 .13.343Z"
  />
</svg>`},5154:(e,t,n)=>{n.r(t),n.d(t,{chevronLightUp:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M8 5.333a.51.51 0 0 1 .343.13l4.848 4.444a.42.42 0 0 1 0 .63.517.517 0 0 1-.685 0L8 6.406l-4.506 4.13a.516.516 0 0 1-.685 0 .42.42 0 0 1 0-.629l4.848-4.444A.51.51 0 0 1 8 5.333Z"
  />
</svg>`},1704:(e,t,n)=>{n.r(t),n.d(t,{chevronRight:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M4.02 12.525a1.251 1.251 0 0 1 .508-1.008l4.15-3.072-4.15-3.073A1.256 1.256 0 1 1 6.03 3.359l5.511 4.078a1.296 1.296 0 0 1 0 2.013l-5.51 4.08a1.262 1.262 0 0 1-1.763-.258 1.244 1.244 0 0 1-.249-.747Z"
  />
</svg>`},5121:(e,t,n)=>{n.r(t),n.d(t,{chevronUp:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M12.1 12.425a1.251 1.251 0 0 1-1.008-.508L8.02 7.767l-3.073 4.15a1.257 1.257 0 1 1-2.013-1.502l4.078-5.512a1.296 1.296 0 0 1 2.013 0l4.08 5.512a1.262 1.262 0 0 1-.258 1.761 1.245 1.245 0 0 1-.747.25Z"
  />
</svg>`},4754:(e,t,n)=>{n.r(t),n.d(t,{closeDefault:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M13.028 2.972a.889.889 0 0 1 0 1.256L9.257 8l3.771 3.772a.888.888 0 0 1-1.256 1.256L8 9.257l-3.772 3.771a.888.888 0 0 1-1.256-1.256L6.743 8 2.972 4.228a.889.889 0 0 1 1.256-1.256L8 6.743l3.772-3.771a.889.889 0 0 1 1.256 0Z"
  />
</svg>`},969:(e,t,n)=>{n.r(t),n.d(t,{dangerExclamation:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 18 18"
>
  <path
    fill="currentColor"
    d="M9 16a6.957 6.957 0 0 0 7-7 6.956 6.956 0 0 0-7-7 6.957 6.957 0 0 0-7 7 6.957 6.957 0 0 0 7 7ZM8 5.1a1 1 0 0 1 2 0v3.6c0 .6-.4 1.3-1 1.3s-1-.7-1-1.3V5.1ZM9 11a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Z"
  />
</svg>`},6941:(e,t,n)=>{n.r(t),n.d(t,{dropzone:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M8 4.444a.445.445 0 0 1 .444.401V8.21l.89-.871a.432.432 0 0 1 .577 0c.08.067.13.163.142.266a.514.514 0 0 1-.106.296L8 9.778 6.059 7.844a.378.378 0 0 1-.103-.297.435.435 0 0 1 .72-.267l.888.872V4.845a.444.444 0 0 1 .441-.4H8Z"
  />
  <path
    fill="currentColor"
    d="M13.778 12.444H2.222a.444.444 0 0 1-.423-.58l1.156-3.556A.444.444 0 0 1 3.378 8H5.11a.444.444 0 0 1 0 .889H3.703l-.87 2.667h10.333l-.87-2.667H10.89a.445.445 0 0 1 0-.889h1.733a.444.444 0 0 1 .423.307l1.156 3.555a.445.445 0 0 1-.423.582Z"
  />
</svg>`},2253:(e,t,n)=>{n.r(t),n.d(t,{feedback:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M12.444 3.556H3.556a.889.889 0 0 0-.89.888v5.334a.889.889 0 0 0 .89.889h.888v1.777l1.778-1.777h6.222a.889.889 0 0 0 .89-.89V4.445a.889.889 0 0 0-.89-.888Zm-1.278 5.5H4.834a.39.39 0 0 1 0-.779h6.332a.39.39 0 1 1 0 .779Zm0-1.556H4.834a.39.39 0 0 1 0-.778h6.332a.39.39 0 1 1 0 .778Zm0-1.555H4.834a.39.39 0 0 1 0-.779h6.332a.39.39 0 1 1 0 .779Z"
  />
</svg>`},1601:(e,t,n)=>{n.r(t),n.d(t,{file:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 17 20"
>
  <path
    fill="currentColor"
    d="M11.167.667H1.756A1.26 1.26 0 0 0 .5 1.923v17.6a1.137 1.137 0 0 0 1.137 1.137h13.726a1.137 1.137 0 0 0 1.137-1.13V6L11.167.667Zm0 5.333V2l4 4h-4Z"
  />
</svg>`},8138:(e,t,n)=>{n.r(t),n.d(t,{hide:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="m14.1 7.895.008-.014c.024-.049.044-.089.06-.125l.012-.027.042-.098A6.623 6.623 0 0 0 8.016 3.66a6.768 6.768 0 0 0-2.007.28l-.773-1.272-.662.413.682 1.124A6.844 6.844 0 0 0 1.778 7.63a6.654 6.654 0 0 0 6.228 3.925c.54.002 1.08-.054 1.608-.168l1.182 1.945.663-.412-1.067-1.756a6.642 6.642 0 0 0 3.708-3.27ZM7.378 6.191c.195-.102.41-.158.63-.163A1.548 1.548 0 0 1 9.52 7.606a1.574 1.574 0 0 1-.56 1.2L7.379 6.191Zm.63 4.1a5.422 5.422 0 0 1-4.831-2.659 5.529 5.529 0 0 1 2.747-2.33l.851 1.4a1.593 1.593 0 0 0-.28.904 1.547 1.547 0 0 0 1.51 1.577c.085-.003.17-.014.252-.033l.65 1.067c-.298.046-.6.07-.9.074h.002Z"
  />
</svg>`},770:(e,t,n)=>{n.r(t),n.d(t,{info:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M8 1.778a6.222 6.222 0 1 0 0 12.444A6.222 6.222 0 0 0 8 1.778Zm.889 9.713a.889.889 0 1 1-1.778 0v-3.23c0-.528.36-1.15.889-1.15s.889.622.889 1.156v3.225Zm-.896-5.378a1.227 1.227 0 1 1 0-2.453 1.227 1.227 0 0 1 0 2.453Z"
  />
</svg>`},8297:(e,t,n)=>{n.r(t),n.d(t,{maximise:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <rect
    width="11"
    height="11"
    x="2.5"
    y="2.5"
    fill="transparent"
    stroke="currentColor"
    rx="2.5"
  />
</svg>`},1307:(e,t,n)=>{n.r(t),n.d(t,{meatballs:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <g clip-path="url(#a)">
    <path
      fill="currentColor"
      d="M4 8a2 2 0 1 1-4 0 2 2 0 0 1 4 0Zm4-2a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm6 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Z"
    />
  </g>
  <defs>
    <clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z" /></clipPath>
  </defs>
</svg>`},7272:(e,t,n)=>{n.r(t),n.d(t,{minus:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M3.556 8a.889.889 0 0 1 .888-.889h7.112a.889.889 0 0 1 0 1.778H4.444A.889.889 0 0 1 3.556 8Z"
  />
</svg>`},1895:(e,t,n)=>{n.r(t),n.d(t,{openInNewWindow:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M12.444 6.962v6.371a.889.889 0 0 1-.888.89h-8.89a.889.889 0 0 1-.888-.89v-8.87a.911.911 0 0 1 .91-.907h6.48c.02.029.028.064.05.093l-.796.795H2.667v8.89h8.889V7.85l.888-.888ZM10.09 1.778a.579.579 0 0 0 0 1.155h2.16L6.125 9.058a.578.578 0 0 0 .817.818l6.125-6.125v2.16a.578.578 0 1 0 1.155 0V1.778H10.09Z"
  />
</svg>`},4137:(e,t,n)=>{n.r(t),n.d(t,{process:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="m13.23 7.2-2.652-2.652a.356.356 0 0 0-.255-.104H4a.444.444 0 0 0-.444.445v6.214a.445.445 0 0 0 .444.445h2.568v.008c.028 0 .058-.008.089-.008h3.23c.027 0 .056.006.088.008v-.008h2.914a.445.445 0 0 0 .444-.445V7.445a.355.355 0 0 0-.104-.245Zm-2.563-.089V5.333l1.777 1.778h-1.777Z"
  />
</svg>`},2605:(e,t,n)=>{n.r(t),n.d(t,{processModel:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M14.531 6.562h-1.406V4.218a.469.469 0 0 0-.469-.469H6.732L3.983 1 1 3.983l2.749 2.75v4.517H2.343a.469.469 0 0 0-.47.469v2.812c0 .259.21.469.47.469H7.03c.258 0 .468-.21.468-.469v-1.406h5.157c.259 0 .469-.21.469-.469v-2.344h1.406c.259 0 .469-.21.469-.469V7.031a.469.469 0 0 0-.469-.47ZM2.326 3.983l1.657-1.657 1.658 1.657-1.658 1.658-1.657-1.658Zm4.236 10.08h-3.75v-1.876h3.75v1.875Zm5.625-1.876H7.5v-.468a.469.469 0 0 0-.468-.47H4.687V6.265l1.577-1.577h5.923v1.875H9.843a.469.469 0 0 0-.469.469v2.812c0 .26.21.47.47.47h2.343v1.874Zm1.875-2.813h-3.75V7.5h3.75v1.875Z"
  />
</svg>`},5233:(e,t,n)=>{n.r(t),n.d(t,{publish:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M14.164 7.16c-.023-.179-.065-.352-.104-.527-.02-.095-.038-.192-.064-.285a6.486 6.486 0 0 0-.199-.596l-.061-.153a6.094 6.094 0 0 0-1.318-2A6.23 6.23 0 1 0 8.01 14.221c.48-.001.957-.061 1.422-.178.012 0 .024-.008.036-.011a6.351 6.351 0 0 0 1.244-.465c.039-.019.079-.033.117-.053l-.003-.004a6.209 6.209 0 0 0 2.706-2.703c.023-.045.037-.094.059-.14.117-.24.22-.486.306-.738.02-.06.03-.122.048-.182.079-.252.14-.508.186-.768.054-.323.082-.65.085-.977V8a6.238 6.238 0 0 0-.053-.84Zm-3.506.409a.633.633 0 0 1-.418.151.732.732 0 0 1-.484-.178L8.54 6.338v5.012a.584.584 0 0 1-.616.542.57.57 0 0 1-.603-.542V6.335L6.176 7.54a.599.599 0 0 1-.428.177.607.607 0 0 1-.549-.336.526.526 0 0 1 .113-.6l2.69-2.667 2.689 2.672a.527.527 0 0 1 .16.377.544.544 0 0 1-.193.406Z"
  />
</svg>`},1417:(e,t,n)=>{n.r(t),n.d(t,{refresh:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="m13.313 6.846-.694.047a.376.376 0 0 1-.391-.308 3.97 3.97 0 0 0-1.052-1.979 4.106 4.106 0 0 0-4.217-.973 3.829 3.829 0 0 0-2.33 2.132l.006.01 1.555.146a.158.158 0 0 1 .068.293l-3.204 1.93a.17.17 0 0 1-.149-.007c-.02-.008-.027-.03-.042-.045-.016-.015-.04-.028-.048-.053 0 0-.007 0-.008-.009l-.806-3.458a.16.16 0 0 1 .268-.135l1.009.848a3.36 3.36 0 0 1 .357-.73l.005.006a5.134 5.134 0 0 1 2.782-2.247 5.579 5.579 0 0 1 5.87 1.401 5.377 5.377 0 0 1 1.358 2.71.369.369 0 0 1-.337.42ZM2.821 10.149a5.378 5.378 0 0 0 1.389 2.694 5.58 5.58 0 0 0 5.885 1.331 5.134 5.134 0 0 0 2.756-2.278l.005.006c.147-.23.265-.477.352-.735l1.022.837a.159.159 0 0 0 .268-.139l-.846-3.445-.008-.01c-.008-.024-.032-.034-.05-.052-.016-.018-.023-.037-.041-.045a.179.179 0 0 0-.15-.005l-3.18 1.964a.158.158 0 0 0 .07.292l1.557.128.006.01a3.823 3.823 0 0 1-2.304 2.158 4.106 4.106 0 0 1-4.228-.923 3.966 3.966 0 0 1-1.07-1.964.377.377 0 0 0-.396-.306l-.694.057a.366.366 0 0 0-.343.425Z"
  />
</svg>`},3234:(e,t,n)=>{n.r(t),n.d(t,{save:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M9.778 5.333H8V3.556h1.778v1.777ZM12.8 2.667h-2.133v2.666c0 .295-.258.669-.554.669H5.916a.711.711 0 0 1-.583-.669V2.667H3.2a.533.533 0 0 0-.533.533v9.6a.534.534 0 0 0 .533.538h9.6a.535.535 0 0 0 .533-.538V3.2a.539.539 0 0 0-.533-.533Z"
  />
</svg>`},7627:(e,t,n)=>{n.r(t),n.d(t,{schedule:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M8.25 2a6.25 6.25 0 1 0 6.25 6.25A6.258 6.258 0 0 0 8.25 2Zm0 11.267a5.017 5.017 0 1 1 5.017-5.017 5.023 5.023 0 0 1-5.017 5.017Zm2.045-4.22H7.454V5.764c0-.35-.144-.635-.494-.635s-.496.285-.496.635v4.27h3.83c.35 0 .635-.143.635-.494 0-.35-.284-.495-.634-.495Z"
  />
</svg>`},5554:(e,t,n)=>{n.r(t),n.d(t,{search:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="m13.108 12.017-2.593-2.595a4.32 4.32 0 1 0-1.093 1.093l2.593 2.593a.773.773 0 0 0 1.333-.541.773.773 0 0 0-.242-.55h.002ZM6.974 9.914a2.94 2.94 0 1 1-.002-5.88 2.94 2.94 0 0 1 .002 5.88Z"
  />
</svg>`},9376:(e,t,n)=>{n.r(t),n.d(t,{show:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M8.016 3.556A6.736 6.736 0 0 0 1.778 7.58a6.667 6.667 0 0 0 6.228 3.975 6.64 6.64 0 0 0 6.216-3.975 6.667 6.667 0 0 0-6.206-4.025Zm-.01 6.72a5.41 5.41 0 0 1-4.832-2.695 5.45 5.45 0 0 1 4.842-2.746 5.384 5.384 0 0 1 4.813 2.743 5.387 5.387 0 0 1-4.823 2.699Zm1.327-2.72a1.333 1.333 0 1 1-2.666 0 1.333 1.333 0 0 1 2.666 0Z"
  />
</svg>`},7528:(e,t,n)=>{n.r(t),n.d(t,{success:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M8 1.772a6.222 6.222 0 1 0 6.222 6.222A6.23 6.23 0 0 0 8 1.772Zm3.362 4.726-3.55 3.97a.651.651 0 0 1-.937 0L4.638 8.226a.696.696 0 0 1 0-.965.65.65 0 0 1 .938 0L7.344 9.02l3.08-3.488a.652.652 0 0 1 .938 0 .698.698 0 0 1 0 .966Z"
  />
</svg>`},8318:(e,t,n)=>{n.r(t),n.d(t,{summary:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M4 3h8.889H4Zm1.778 2.667h7.11v.889h-7.11v-.89ZM4 5.667h.889v.889H4v-.89Zm1.778 1.777h5.333v.89H5.778v-.89ZM4 7.444h.899v.89H4v-.89Zm0 1.778h.899v.89H4v-.89ZM4 11h.899v.889H4V11Zm0-8h8.889v1.778H4V3Zm1.778 7.111h7.11v-.889h-7.11v.89Zm0 1.778H12V11H5.778v.889ZM4 12.778h.899v.889H4v-.89Zm1.778.889h4.444v-.89H5.778v.89Z"
  />
</svg>`},5017:(e,t,n)=>{n.r(t),n.d(t,{tick:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M12.779 5.997 8.045 11.29a.865.865 0 0 1-1.249 0L3.814 8.302a.929.929 0 0 1 0-1.286.866.866 0 0 1 1.25 0L7.421 9.36l4.107-4.649a.868.868 0 0 1 1.25 0 .932.932 0 0 1 0 1.287Z"
  />
</svg>`},7798:(e,t,n)=>{n.r(t),n.d(t,{trash:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M12.444 5.769a1.785 1.785 0 0 0-.088-.436h-8.73a1.571 1.571 0 0 0-.068.436v7.862a1.712 1.712 0 0 0 1.52 1.48h5.89a1.664 1.664 0 0 0 1.476-1.48V5.77Zm-6.222 7.564h-.889V7.111c0-.883.89-.883.89 0v6.222Zm4.445 0h-.89V7.111c0-.883.89-.883.89 0v6.222Zm2.05-10.666h-2.05V1.482a.593.593 0 0 0-.593-.593H5.916a.585.585 0 0 0-.583.593v1.185H3.26a.592.592 0 0 0-.593.593v.629a.593.593 0 0 0 .593.593h9.462a.593.593 0 0 0 .593-.593l.018-.63a.608.608 0 0 0-.611-.592h-.005Zm-2.94 0H6.223v-.89h3.556v.89Z"
  />
</svg>`},8592:(e,t,n)=>{n.r(t),n.d(t,{user:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M11.004 14.222H5.01c-3.996 0-1.823-3.745-1.121-4.562a1.78 1.78 0 0 1 .167-.178 1.885 1.885 0 0 1 2.158-.417 4.622 4.622 0 0 0 3.684.066 1.916 1.916 0 0 1 2.21.514c.703.8 2.876 4.561-1.104 4.577ZM8 8a2.667 2.667 0 1 0 0-5.333A2.667 2.667 0 0 0 8 8Z"
  />
</svg>`},8344:(e,t,n)=>{n.r(t),n.d(t,{users:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M7.788 7.474a2.301 2.301 0 0 1-.183-2.986 2.442 2.442 0 0 1 3.855-.05 2.295 2.295 0 0 1-.184 3.074l-.024.025a2.432 2.432 0 0 1-3.452-.05l-.012-.013Zm5.343 2.208-.01-.01a1.86 1.86 0 0 0-1.977-.415 4.59 4.59 0 0 1-3.295-.053 1.844 1.844 0 0 0-1.929.336c-.05.046-.1.093-.147.142-.622.64-2.569 3.651 1 3.651h5.358c3.569 0 1.625-3.011 1-3.651Zm-7.957-.64a3.41 3.41 0 0 1 .183-.178 2.631 2.631 0 0 1 1.982-.676 4.747 4.747 0 0 1-.144-.135 3.134 3.134 0 0 1-.702-1.126 3.391 3.391 0 0 1-2.37-.06 1.363 1.363 0 0 0-1.423.25 2.01 2.01 0 0 0-.108.104c-.462.473-1.899 2.83.739 2.83h1.141c.206-.355.44-.692.702-1.01ZM4.083 5.6a1.796 1.796 0 0 0 2.216.29 3.152 3.152 0 0 1 .63-1.962c.035-.045.075-.089.112-.13a1.689 1.689 0 0 0-.253-.451 1.803 1.803 0 0 0-2.845.037 1.7 1.7 0 0 0 .134 2.207l.006.009Z"
  />
</svg>`},6525:(e,t,n)=>{n.r(t),n.d(t,{versionHistory:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M13.778 8.475a5.778 5.778 0 1 1-6.59-5.684V1.84a.061.061 0 0 1 .1-.048l.99.773 1.03.8a.061.061 0 0 1 0 .096l-1.03.8-.99.774a.061.061 0 0 1-.1-.048V3.953a4.61 4.61 0 1 0 5.093 2.795L8.333 9.52a.58.58 0 0 1-.696-.022L5.135 7.485a.572.572 0 0 1 .3-1.02.58.58 0 0 1 .424.123l2.162 1.74 4.134-2.902.023-.015a.58.58 0 0 1 .848.24c.49.86.75 1.833.752 2.824Z"
  />
</svg>`},7403:(e,t,n)=>{n.r(t),n.d(t,{warningExclamation:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="m14.885 12.625-6.044-11.2A1.037 1.037 0 0 0 7.507.98c-.189.1-.344.255-.444.445l-6.044 11.2a1.09 1.09 0 0 0 .355 1.422c.178.089.267.178.445.178h12.266a1.067 1.067 0 0 0 .978-1.067 1.263 1.263 0 0 0-.178-.533Zm-7.822-8.09a.889.889 0 1 1 1.778 0v3.2c0 .534-.356 1.156-.89 1.156-.532 0-.888-.622-.888-1.155v-3.2Zm.889 7.912a1.333 1.333 0 1 1 1.333-1.334 1.367 1.367 0 0 1-1.333 1.334Z"
  />
</svg>`},9526:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(272),i=n.n(r),o=n(2609),s=n.n(o)()(i());s.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600&family=Open+Sans:ital,wght@0,300;0,400;0,600;0,700;0,800;1,400&display=swap);"]),s.push([e.id,":root{--nx-sand-10: #f7f1dd;--nx-white: #fff;--nx-yellow-60: #e1b200;--nx-yellow-50: #ffcf1a;--nx-yellow-40: #ffd948;--nx-red-60: #b80000;--nx-red-50: #e60000;--nx-red-40: #ff1f1f;--nx-red-10: #ffc7c7;--nx-green-60: #006c2d;--nx-green-50: #008738;--nx-green-40: #00d257;--nx-green-10: #b6ffd4;--nx-orange-60: #f56900;--nx-blue-90: #001f3d;--nx-blue-80: #003870;--nx-blue-70: #0052a3;--nx-blue-60: #006bd6;--nx-blue-50: #0a85ff;--nx-blue-40: #3d9eff;--nx-blue-30: #70b8ff;--nx-blue-20: #a3d1ff;--nx-blue-10: #d6ebff;--nx-blue-5: #f0f7ff;--nx-violet-90: #200c34;--nx-violet-80: #3f1868;--nx-violet-70: #5f249b;--nx-violet-60: #7f30cf;--nx-violet-50: #9f64db;--nx-violet-40: #b283e2;--nx-violet-30: #c5a2e9;--nx-violet-20: #d9c1f1;--nx-violet-10: #ece0f8;--nx-grey-90: #161718;--nx-grey-80: #2c2e30;--nx-grey-70: #414548;--nx-grey-60: #575c61;--nx-grey-50: #6d7379;--nx-grey-40: #898f94;--nx-grey-30: #a7abaf;--nx-grey-20: #c4c7ca;--nx-grey-10: #e2e3e4;--nx-grey-5: #eff0f0;--nx-grey-2: #fafafa;--overlay: rgba(109 115 121 60%);--overlay-loading: rgba(250 250 250 80%);--onlight-hover-background-color: #f4f9ff;--onlight-selected-background-color: #e8f3ff;--globalnav-background-color: var(--nx-blue-80);--globalnav-text-color: var(--nx-white);--sidenav-background-color: var(--nx-grey-5);--body-primary-background-color: var(--nx-grey-2);--body-secondary-background-color: var(--nx-grey-5);--content-background-color: var(--nx-white);--content-extension-background-color: var(--nx-grey-10);--toolbar-background-color: var(--nx-white);--toolbar-text-color: var(--nx-grey-90);--primary-text-color: var(--nx-grey-90);--disabled-text-color: var(--nx-grey-70);--error-text-color: var(--nx-red-50);--destructive-text-color: var(--nx-red-60);--success-text-color: var(--nx-green-50);--header-text-color: var(--nx-orange-60);--subheader-text-color: var(--nx-grey-60);--placeholder-text-color: var(--nx-grey-50);--hyperlink-text-color: var(--nx-blue-60);--hyperlink-disabled-text-color: var(--nx-grey-70);--block-primary-background-color: var(--nx-blue-60);--block-primary-border-color: var(--nx-blue-70);--block-primary-text-color: var(--nx-white);--block-secondary-background-color: hsla(0deg 0% 0% 0%);--block-secondary-border-color: hsla(0deg 0% 0% 0%);--block-secondary-text-color: var(--nx-grey-90);--block-success-background-color: var(--nx-green-50);--block-success-border-color: var(--nx-green-60);--block-success-text-color: var(--nx-white);--block-error-background-color: var(--nx-red-50);--block-error-border-color: var(--nx-red-60);--block-error-text-color: var(--nx-white);--block-warning-background-color: var(--nx-yellow-50);--block-warning-border-color: var(--nx-yellow-60);--block-warning-text-color: var(--nx-grey-90);--button-primary-hover-background-color: #1477db;--button-primary-hover-text-color: #e2eefa;--button-secondary-background-color: var(--nx-white);--button-secondary-border-color: var(--nx-grey-10);--button-secondary-text-color: var(--nx-blue-60);--button-secondary-hover-background-color: var(--onlight-hover-background-color);--button-secondary-selected-background-color: var(--onlight-selected-background-color);--button-secondary-hover-text-color: #2f87df;--button-text-background-color: hsla(0deg 0% 0% 0%);--button-text-border-color: hsla(0deg 0% 0% 0%);--button-text-text-color: var(--nx-blue-60);--button-text-hover-background-color: var(--onlight-hover-background-color);--button-text-hover-text-color: var(--secondary-button-hover-text-color);--button-destructive-background-color: var(--nx-white);--button-destructive-border-color: var(--nx-grey-10);--button-destructive-text-color: var(--nx-red-50);--button-destructive-hover-background-color: var(--onlight-hover-background-color);--button-destructive-hover-text-color: var(--nx-red-60);--button-disabled-background-color: var(--nx-grey-20);--button-disabled-border-color: hsla(0deg 0% 0% 0%);--button-disabled-text-color: var(--nx-grey-70);--divider-line-color: var(--nx-grey-10);--input-background-color: var(--nx-white);--input-border-color: var(--nx-grey-40);--input-text-color: var(--primary-text-color);--input-placeholder-text-color: var(--placeholder-text-color);--input-focus-border-color: var(--nx-blue-60);--input-error-color: var(--nx-red-50);--input-error-text-color: var(--nx-white);--input-warning-color: var(--nx-yellow-50);--input-warning-text-color: var(--primary-text-color);--input-information-color: var(--nx-blue-60);--input-information-text-color: var(--nx-white);--input-disabled-background-color: var(--nx-grey-20);--input-disabled-border-color: hsla(0deg 0% 0% 0%);--input-disabled-text-color: var(--disabled-text-color);--input-xfix-background-color: var(--nx-grey-20);--input-xfix-border-color: var(--nx-grey-40);--input-xfix-text-color: var(--nx-grey-70);--input-pills-background-color: var(--nx-white);--input-pills-border-color: var(--nx-grey-90);--input-pills-text-color: var(--nx-grey-90);--input-block-unselected-background-color: var(--nx-white);--input-block-unselected-border-color: var(--nx-grey-60);--input-block-unselected-disabled-background-color: var(--nx-white);--input-block-unselected-disabled-border-color: var(--nx-grey-40);--input-block-selected-background-color: var(--nx-blue-60);--input-block-selected-border-color: hsla(0deg 0% 0% 0%);--input-block-selected-disabled-background-color: var(--nx-grey-40);--input-block-selected-disabled-border-color: hsla(0deg 0% 0% 0%);--input-block-hover-background-color: var(--onlight-hover-background-color);--list-group-text-color: var(--nx-grey-60);--list-item-hover-background-color: var(--onlight-hover-background-color);--list-item-selected-background-color: var(--onlight-selected-background-color);--list-item-subtext-color: var(--nx-grey-50);--list-action-background-color: var(--onlight-hover-background-color);--list-action-border-color: var(--nx-grey-5);--list-action-text-color: var(--hyperlink-text-color);--global-header-background-color: var(--nx-blue-80)}:root{--nx-font-family-body: Open Sans, helvetica, arial, sans-serif;--nx-font-family-heading: Montserrat, helvetica, arial, sans-serif}:root{--ne-ref-color-violet-20: #D9C1F1;--ne-ref-color-violet-60: #7F30CF;--ne-ref-color-grey-90-20: #16171820;--ne-ref-color-green-40: #00D257;--ne-ref-color-green-50: #008738;--ne-ref-color-green-60: #006c2d;--ne-ref-color-yellow-60: #E1B200;--ne-ref-color-yellow-50: #FFCF1A;--ne-ref-color-yellow-40: #FFD948;--ne-ref-color-yellow-10: #FFF5D1;--ne-ref-color-grey-02: #FAFAFA;--ne-ref-color-grey-05: #EFF0F0;--ne-ref-color-grey-10: #E2E3E4;--ne-ref-color-grey-20: #C4C7CA;--ne-ref-color-grey-30: #A7ABAF;--ne-ref-color-grey40: #898F94;--ne-ref-color-grey-50: #6D7379;--ne-ref-color-grey-60: #575C61;--ne-ref-color-grey-70: #414548;--ne-ref-color-grey-80: #2C2E30;--ne-ref-color-grey-90: #161718;--ne-ref-color-red-10: #FFC7C7;--ne-ref-color-red-20: #FF8F8F;--ne-ref-color-red-30: #FF5757;--ne-ref-color-red-40: #FF1F1F;--ne-ref-color-red-50: #E60000;--ne-ref-color-red-60: #B80000;--ne-ref-color-red-70: #7C0D0E;--ne-ref-color-red-80: #530909;--ne-ref-color-red-90: #290405;--ne-ref-color-blue-05: #F0F7FF;--ne-ref-color-blue-10: #D6EBFF;--ne-ref-color-blue-20: #A3D1FF;--ne-ref-color-blue-30: #70B8FF;--ne-ref-color-blue-40: #3D9EFF;--ne-ref-color-blue-50: #0A85FF;--ne-ref-color-blue-60: #006BD6;--ne-ref-color-blue-70: #0052A3;--ne-ref-color-blue-80: #003870;--ne-ref-color-blue-90: #001F3D;--ne-ref-color-nintex-orange: #F56900;--ne-ref-color-white: #ffffff}:root{--ne-ref-border-radius-circle: 50%;--ne-ref-border-radius-large: 0.5em;--ne-ref-border-radius-medium: .25em;--ne-ref-border-radius-small: 0.125em;--ne-ref-border-radius-none: 0}:root{--ne-ref-spacing-xxx-large: 3em;--ne-ref-spacing-xx-large: 2.5em;--ne-ref-spacing-x-large: 2em;--ne-ref-spacing-large: 1.5em;--ne-ref-spacing-medium: 1em;--ne-ref-spacing-small: 0.75em;--ne-ref-spacing-x-small: 0.5em;--ne-ref-spacing-xx-small: 0.25em;--ne-ref-spacing-xxx-small: 0.125em;--ne-ref-spacing-none: 0}:root{--ne-ref-font-size-09: 1.75em;--ne-ref-font-size-08: 1.5em;--ne-ref-font-size-07: 1.25em;--ne-ref-font-size-06: 1.125em;--ne-ref-font-size-05: 1em;--ne-ref-font-size-04: 0.875em;--ne-ref-font-size-03: 0.8125em;--ne-ref-font-size-02: 0.75em;--ne-ref-font-size-01: 0.625em;--ne-ref-font-size-11: 2.625em;--ne-ref-font-size-10: 2em}:root{--ne-ref-border-width-large: 4px;--ne-ref-border-width-medium: 2px;--ne-ref-border-width-small: 1px}:root{--ne-ref-sizing-09: 2.25em;--ne-ref-sizing-08: 2em;--ne-ref-sizing-07: 1.75em;--ne-ref-sizing-06: 1.5em;--ne-ref-sizing-05: 1.25em;--ne-ref-sizing-04: 1em;--ne-ref-sizing-03: 0.75em;--ne-ref-sizing-02: 0.5em;--ne-ref-sizing-01: 0.25em;--ne-ref-sizing-14: 6em;--ne-ref-sizing-13: 5em;--ne-ref-sizing-12: 4em;--ne-ref-sizing-11: 3em;--ne-ref-sizing-10: 2.5em}:root{--ne-ref-font-weight-bold: Bold;--ne-ref-font-weight-semi-bold: SemiBold;--ne-ref-font-weight-regular: Regular}:root{--ne-ref-font-family-montserrat: Montserrat;--ne-ref-font-family-open-sans: Open Sans}:root{--ne-ref-line-height-expanded: 2em;--ne-ref-line-height-regular: 1.5em;--ne-ref-line-height-condensed: 1.2em}:root{--ne-ref-paragraph-spacing-07: 2.5em;--ne-ref-paragraph-spacing-06: 2.25em;--ne-ref-paragraph-spacing-05: 2em;--ne-ref-paragraph-spacing-04: 1.75em;--ne-ref-paragraph-spacing-03: 1.625em;--ne-ref-paragraph-spacing-02: 1.5em;--ne-ref-paragraph-spacing-01: 1.25em}:root{--ne-ref-letter-spacing-09: 0.21em;--ne-ref-letter-spacing-08: 0.18em;--ne-ref-letter-spacing-07: 0.15em;--ne-ref-letter-spacing-06: 0.135em;--ne-ref-letter-spacing-05: 0.12em;--ne-ref-letter-spacing-04: 0.105em;--ne-ref-letter-spacing-03: 0.0975em;--ne-ref-letter-spacing-02: 0.09em;--ne-ref-letter-spacing-01: 0.075em;--ne-ref-letter-spacing-11: 0.315em;--ne-ref-letter-spacing-10: 0.24em}:root{--ne-ref-text-decoration-underline: underline;--ne-ref-text-decoration-none: none}:root{--ne-ref-shadow-level2: 0px 0px 8px var(--ne-ref-color-grey-90-20);--ne-ref-shadow-level1: 0px 0px 8px var(--ne-ref-color-grey-90-20)}:root{--ne-alias-color-highlight: var(--ne-ref-color-nintex-orange);--ne-alias-color-icon-white: var(--ne-ref-color-white);--ne-alias-color-icon-default: var(--ne-ref-color-grey-90);--ne-alias-color-status-success-light: var(--ne-ref-color-green-40);--ne-alias-color-status-success-default: var(--ne-ref-color-green-50);--ne-alias-color-status-success-dark: var(--ne-ref-color-green-60);--ne-alias-color-status-info-light: var(--ne-ref-color-blue-50);--ne-alias-color-status-info-default: var(--ne-ref-color-blue-60);--ne-alias-color-status-info-dark: var(--ne-ref-color-blue-70);--ne-alias-color-status-active-lighter: var(--ne-ref-color-blue-40);--ne-alias-color-status-active-light: var(--ne-ref-color-blue-50);--ne-alias-color-status-active-default: var(--ne-ref-color-blue-60);--ne-alias-color-status-warning-light: var(--ne-ref-color-yellow-40);--ne-alias-color-status-warning-default: var(--ne-ref-color-yellow-50);--ne-alias-color-status-warning-dark: var(--ne-ref-color-yellow-60);--ne-alias-color-status-error-light: var(--ne-ref-color-red-40);--ne-alias-color-status-error-default: var(--ne-ref-color-red-50);--ne-alias-color-status-error-dark: var(--ne-ref-color-red-60);--ne-alias-color-destructive-light: var(--ne-ref-color-red-40);--ne-alias-color-destructive-default: var(--ne-ref-color-red-60);--ne-alias-color-destructive-dark: var(--ne-ref-color-red-70);--ne-alias-color-state-focus-on-red: var(--ne-ref-color-red-70);--ne-alias-color-state-focus-on-white: var(--ne-ref-color-blue-05);--ne-alias-color-state-hover-on-red: var(--ne-ref-color-red-70);--ne-alias-color-state-hover-on-white: var(--ne-ref-color-blue-05);--ne-alias-color-state-disabled-dark: var(--ne-ref-color-grey-90);--ne-alias-color-state-disabled-default: var(--ne-ref-color-grey-50);--ne-alias-color-state-disabled-light: var(--ne-ref-color-grey-30);--ne-alias-color-accent-light: var(--ne-ref-color-blue-50);--ne-alias-color-accent-default: var(--ne-ref-color-blue-60);--ne-alias-color-accent-dark: var(--ne-ref-color-blue-70);--ne-alias-color-text-light: var(--ne-ref-color-grey-60);--ne-alias-color-text-default: var(--ne-ref-color-grey-90);--ne-alias-color-text-light-text-on-dark-bg: var(--ne-ref-color-white);--ne-alias-color-state-focus-on-blue: var(--ne-alias-color-accent-dark);--ne-alias-color-state-hover-on-blue: var(--ne-alias-color-accent-dark)}:root{--ne-alias-font-family-title: var(--ne-ref-font-family-montserrat);--ne-alias-font-family-body: var(--ne-ref-font-family-open-sans)}:root{--ne-alias-font-size-title: var(--ne-ref-font-size-06);--ne-alias-font-size-subtext: var(--ne-ref-font-size-02);--ne-alias-font-size-body: var(--ne-ref-font-size-04)}:root{--ne-alias-border-width-focus: var(--ne-ref-border-width-large);--ne-alias-border-width-default: var(--ne-ref-border-width-small)}:root{--ne-alias-sizing-icon-xx-large: var(--ne-ref-sizing-11);--ne-alias-sizing-icon-x-large: var(--ne-ref-sizing-08);--ne-alias-sizing-icon-large: var(--ne-ref-sizing-06);--ne-alias-sizing-icon-default: var(--ne-ref-sizing-04);--ne-alias-sizing-icon-small: var(--ne-ref-sizing-02)}:root{--ne-alias-border-focus: var(--ne-ref-color-blue-20);--ne-alias-border-dark-grey: var(--ne-ref-color-grey40);--ne-alias-border-grey: var(--ne-ref-color-grey-10)}\n\n/*# sourceMappingURL=earthling-base.min.css.map */","",{version:3,sources:["file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/typography.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/color.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-color.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-border-radius.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-spacing.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-font-size.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-border-width.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-sizing.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-font-weight.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-font-family.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-line-height.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-paragraph-spacing.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-letter-spacing.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-text-decoration.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-shadow.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-color.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-font-family.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-font-size.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-border-width.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-sizing.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-border.scss","webpack://./../../node_modules/@nintexglobal/earthling-styles/dist/earthling-base.min.css"],names:[],mappings:"AAAQ,MCEN,qBAAA,CACA,gBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,oBAAA,CACA,oBAAA,CACA,oBAAA,CACA,oBAAA,CACA,sBAAA,CACA,sBAAA,CACA,sBAAA,CACA,sBAAA,CACA,uBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,oBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,oBAAA,CACA,oBAAA,CACA,gCAAA,CACA,wCAAA,CAKA,yCAAA,CACA,4CAAA,CAKA,+CAAA,CACA,uCAAA,CAKA,4CAAA,CAKA,iDAAA,CACA,mDAAA,CAKA,2CAAA,CACA,uDAAA,CAKA,2CAAA,CACA,uCAAA,CAKA,uCAAA,CACA,wCAAA,CACA,oCAAA,CACA,0CAAA,CACA,wCAAA,CACA,wCAAA,CACA,yCAAA,CACA,2CAAA,CACA,yCAAA,CACA,kDAAA,CAOA,mDAAA,CACA,+CAAA,CACA,2CAAA,CAKA,uDAAA,CACA,mDAAA,CACA,+CAAA,CAKA,oDAAA,CACA,gDAAA,CACA,2CAAA,CAKA,gDAAA,CACA,4CAAA,CACA,yCAAA,CAKA,qDAAA,CACA,iDAAA,CACA,6CAAA,CAOA,gDAAA,CACA,0CAAA,CAKA,oDAAA,CACA,kDAAA,CACA,gDAAA,CACA,gFAAA,CACA,sFAAA,CACA,4CAAA,CAKA,mDAAA,CACA,+CAAA,CACA,2CAAA,CACA,2EAAA,CACA,wEAAA,CAKA,sDAAA,CACA,oDAAA,CACA,iDAAA,CACA,kFAAA,CACA,uDAAA,CAKA,qDAAA,CACA,mDAAA,CACA,+CAAA,CAKA,uCAAA,CAKA,yCAAA,CACA,uCAAA,CACA,6CAAA,CACA,6DAAA,CACA,6CAAA,CACA,qCAAA,CACA,yCAAA,CACA,0CAAA,CACA,qDAAA,CACA,4CAAA,CACA,+CAAA,CACA,oDAAA,CACA,kDAAA,CACA,uDAAA,CAKA,gDAAA,CACA,4CAAA,CACA,0CAAA,CAKA,+CAAA,CACA,6CAAA,CACA,2CAAA,CAKA,0DAAA,CACA,wDAAA,CACA,mEAAA,CACA,iEAAA,CACA,0DAAA,CACA,wDAAA,CACA,mEAAA,CACA,iEAAA,CACA,2EAAA,CAOA,0CAAA,CACA,yEAAA,CACA,+EAAA,CACA,4CAAA,CACA,qEAAA,CACA,4CAAA,CACA,qDAAA,CAIA,mDAAA,CD9OF,MACE,8DAAA,CACA,kEAAA,CEFF,MACE,iCAAA,CACA,iCAAA,CACA,oCAAA,CACA,gCAAA,CACA,gCAAA,CACA,gCAAA,CACA,iCAAA,CACA,iCAAA,CACA,iCAAA,CACA,iCAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,8BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,8BAAA,CACA,8BAAA,CACA,8BAAA,CACA,8BAAA,CACA,8BAAA,CACA,8BAAA,CACA,8BAAA,CACA,8BAAA,CACA,8BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,qCAAA,CACA,6BAAA,CC1CF,MACE,kCAAA,CACA,mCAAA,CACA,oCAAA,CACA,qCAAA,CACA,8BAAA,CCLF,MACE,+BAAA,CACA,gCAAA,CACA,6BAAA,CACA,6BAAA,CACA,4BAAA,CACA,8BAAA,CACA,+BAAA,CACA,iCAAA,CACA,mCAAA,CACA,wBAAA,CCVF,MACE,6BAAA,CACA,4BAAA,CACA,6BAAA,CACA,8BAAA,CACA,0BAAA,CACA,8BAAA,CACA,+BAAA,CACA,6BAAA,CACA,8BAAA,CACA,8BAAA,CACA,0BAAA,CCXF,MACE,gCAAA,CACA,iCAAA,CACA,gCAAA,CCHF,MACE,0BAAA,CACA,uBAAA,CACA,0BAAA,CACA,yBAAA,CACA,0BAAA,CACA,uBAAA,CACA,0BAAA,CACA,yBAAA,CACA,0BAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,yBAAA,CCdF,MACE,+BAAA,CACA,wCAAA,CACA,qCAAA,CCHF,MACE,2CAAA,CACA,yCAAA,CCFF,MACE,kCAAA,CACA,mCAAA,CACA,qCAAA,CCHF,MACE,oCAAA,CACA,qCAAA,CACA,kCAAA,CACA,qCAAA,CACA,sCAAA,CACA,oCAAA,CACA,qCAAA,CCPF,MACE,kCAAA,CACA,kCAAA,CACA,kCAAA,CACA,mCAAA,CACA,kCAAA,CACA,mCAAA,CACA,oCAAA,CACA,kCAAA,CACA,mCAAA,CACA,mCAAA,CACA,kCAAA,CCXF,MACE,6CAAA,CACA,mCAAA,CCFF,MACE,kEAAA,CACA,kEAAA,CCFF,MACE,6DAAA,CACA,sDAAA,CACA,0DAAA,CACA,mEAAA,CACA,qEAAA,CACA,kEAAA,CACA,+DAAA,CACA,iEAAA,CACA,8DAAA,CACA,mEAAA,CACA,iEAAA,CACA,mEAAA,CACA,oEAAA,CACA,sEAAA,CACA,mEAAA,CACA,+DAAA,CACA,iEAAA,CACA,8DAAA,CACA,8DAAA,CACA,gEAAA,CACA,6DAAA,CACA,+DAAA,CACA,kEAAA,CACA,+DAAA,CACA,kEAAA,CACA,iEAAA,CACA,oEAAA,CACA,kEAAA,CACA,0DAAA,CACA,4DAAA,CACA,yDAAA,CACA,wDAAA,CACA,0DAAA,CACA,sEAAA,CACA,uEAAA,CACA,uEAAA,CCpCF,MACE,kEAAA,CACA,gEAAA,CCFF,MACE,sDAAA,CACA,wDAAA,CACA,qDAAA,CCHF,MACE,+DAAA,CACA,iEAAA,CCFF,MACE,wDAAA,CACA,uDAAA,CACA,qDAAA,CACA,uDAAA,CACA,qDAAA,CCLF,MACE,oDAAA,CACA,uDAAA,CACA,mDAAA;;ACNF,iDAAiD",sourceRoot:""}]);const a=s},2609:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,i,o){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(s[l]=!0)}for(var c=0;c<e.length;c++){var p=[].concat(e[c]);r&&s[p[0]]||(void 0!==o&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=o),n&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=n):p[2]=n),i&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=i):p[4]="".concat(i)),t.push(p))}},t}},272:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},6062:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},s=[],a=0;a<e.length;a++){var l=e[a],c=r.base?l[0]+r.base:l[0],p=o[c]||0,u="".concat(c," ").concat(p);o[c]=p+1;var d=n(u),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==d)t[d].references++,t[d].updater(h);else{var f=i(h,r);r.byIndex=a,t.splice(a,0,{identifier:u,updater:f,references:1})}s.push(u)}return s}function i(e,t){var n=t.domAPI(t);n.update(e);return function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var o=r(e=e||[],i=i||{});return function(e){e=e||[];for(var s=0;s<o.length;s++){var a=n(o[s]);t[a].references--}for(var l=r(e,i),c=0;c<o.length;c++){var p=n(o[c]);0===t[p].references&&(t[p].updater(),t.splice(p,1))}o=l}}},6793:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},1173:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},7892:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},4036:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},2464:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},6063:(e,t,n)=>{var r=n(3192);const i=e=>t=>"function"==typeof t?((e,t)=>(customElements.define(e,t),t))(e,t):((e,t)=>{const{kind:n,elements:r}=t;return{kind:n,elements:r,finisher(t){customElements.define(e,t)}}})(e,t),o=(e,t)=>"method"===t.kind&&t.descriptor&&!("value"in t.descriptor)?{...t,finisher(n){n.createProperty(t.key,e)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:t.key,initializer(){"function"==typeof t.initializer&&(this[t.key]=t.initializer.call(this))},finisher(n){n.createProperty(t.key,e)}};function s(e){return(t,n)=>void 0!==n?((e,t,n)=>{t.constructor.createProperty(n,e)})(e,t,n):o(e,t)}var a;null===(a=window.HTMLSlotElement)||void 0===a||a.prototype.assignedElements;const l=new WeakMap;function c(e){return t=>{if(function(e,t){let n=t;for(;n;){if(l.get(n)===e)return!0;n=Object.getPrototypeOf(n)}return!1}(e,t))return t;const n=e(t);return l.set(n,e),n}}var p=n(9793);const u=!!ShadowRoot.prototype.createElement,d=c((e=>class extends e{static get scopedElements(){return{}}static get shadowRootOptions(){return this.__shadowRootOptions}static set shadowRootOptions(e){this.__shadowRootOptions=e}static get elementStyles(){return this.__elementStyles}static set elementStyles(e){this.__elementStyles=e}constructor(...e){super(),this.renderOptions=this.renderOptions||void 0}get registry(){return this.constructor.__registry}set registry(e){this.constructor.__registry=e}createRenderRoot(){const{scopedElements:e,shadowRootOptions:t,elementStyles:n}=this.constructor;if(!this.registry||this.registry===this.constructor.__registry&&!Object.prototype.hasOwnProperty.call(this.constructor,"__registry")){this.registry=u?new CustomElementRegistry:customElements;for(const[t,n]of Object.entries(e))this.defineScopedElement(t,n)}const r={mode:"open",...t,customElements:this.registry},i=this.attachShadow(r);return u&&(this.renderOptions.creationScope=i),i instanceof ShadowRoot&&((0,p.ec)(i,n),this.renderOptions.renderBefore=this.renderOptions.renderBefore||i.firstChild),i}createScopedElement(e){return(u?this.shadowRoot:document).createElement(e)}defineScopedElement(e,t){const n=this.registry.get(e);return n&&!1===u&&n!==t&&console.error([`You are trying to re-register the "${e}" custom element with a different class via ScopedElementsMixin.`,"This is only possible with a CustomElementRegistry.","Your browser does not support this feature so you will need to load a polyfill for it.",'Load "@webcomponents/scoped-custom-element-registry" before you register ANY web component to the global customElements registry.','e.g. add "<script src="/node_modules/@webcomponents/scoped-custom-element-registry/scoped-custom-element-registry.min.js"><\/script>" as your first script tag.',"For more details you can visit https://open-wc.org/docs/development/scoped-elements/"].join("\n")),n?this.registry.get(e):this.registry.define(e,t)}getScopedTagName(e){return this.constructor.getScopedTagName(e)}static getScopedTagName(e){return this.__registry.get(e)?e:void 0}}));var h=n(6062),f=n.n(h),m=n(4036),g=n.n(m),y=n(6793),v=n.n(y),A=n(7892),b=n.n(A),C=n(1173),x=n.n(C),w=n(2464),k=n.n(w),E=n(9526),S={};S.styleTagTransform=k(),S.setAttributes=b(),S.insert=v().bind(null,"head"),S.domAPI=g(),S.insertStyleElement=x();f()(E.Z,S);E.Z&&E.Z.locals&&E.Z.locals;const _=r.iv`
  :host {
    all: initial;
  }
`,$=(r.iv`0.75em`,r.iv`1em`),R=[_,r.iv`
  :host {
    min-height: 100%;
  }
`];function N(e,t,n,r){var i,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,n,s):i(t,n))||s);return o>3&&s&&Object.defineProperty(t,n,s),s}const P=r.iv`
  :host {
    all: initial;
  }

  .hidden {
    display: none;
  }
`;var M=n(3311);const B=1,O=2,D=e=>(...t)=>({_$litDirective$:e,values:t});class L{constructor(e){}get _$AU(){return this._$AM._$AU}_$AT(e,t,n){this._$Ct=e,this._$AM=t,this._$Ci=n}_$AS(e,t){return this.update(e,t)}update(e,t){return this.render(...t)}}const F=D(class extends L{constructor(e){var t;if(super(e),e.type!==B||"class"!==e.name||(null===(t=e.strings)||void 0===t?void 0:t.length)>2)throw Error("`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.")}render(e){return" "+Object.keys(e).filter((t=>e[t])).join(" ")+" "}update(e,[t]){var n,r;if(void 0===this.it){this.it=new Set,void 0!==e.strings&&(this.nt=new Set(e.strings.join(" ").split(/\s/).filter((e=>""!==e))));for(const e in t)t[e]&&!(null===(n=this.nt)||void 0===n?void 0:n.has(e))&&this.it.add(e);return this.render(t)}const i=e.element.classList;this.it.forEach((e=>{e in t||(i.remove(e),this.it.delete(e))}));for(const e in t){const n=!!t[e];n===this.it.has(e)||(null===(r=this.nt)||void 0===r?void 0:r.has(e))||(n?(i.add(e),this.it.add(e)):(i.remove(e),this.it.delete(e)))}return M.Jb}}),T=new WeakMap,I=e=>"function"==typeof e&&T.has(e),z="undefined"!=typeof window&&null!=window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,j={},V={},H=`{{lit-${String(Math.random()).slice(2)}}}`,U=`\x3c!--${H}--\x3e`,Z=new RegExp(`${H}|${U}`),q="$lit$";class K{constructor(e,t){this.parts=[],this.element=t;const n=[],r=[],i=document.createTreeWalker(t.content,133,null,!1);let o=0,s=-1,a=0;const{strings:l,values:{length:c}}=e;for(;a<c;){const e=i.nextNode();if(null!==e){if(s++,1===e.nodeType){if(e.hasAttributes()){const t=e.attributes,{length:n}=t;let r=0;for(let e=0;e<n;e++)G(t[e].name,q)&&r++;for(;r-- >0;){const t=l[a],n=Y.exec(t)[2],r=n.toLowerCase()+q,i=e.getAttribute(r);e.removeAttribute(r);const o=i.split(Z);this.parts.push({type:"attribute",index:s,name:n,strings:o}),a+=o.length-1}}"TEMPLATE"===e.tagName&&(r.push(e),i.currentNode=e.content)}else if(3===e.nodeType){const t=e.data;if(t.indexOf(H)>=0){const r=e.parentNode,i=t.split(Z),o=i.length-1;for(let t=0;t<o;t++){let n,o=i[t];if(""===o)n=J();else{const e=Y.exec(o);null!==e&&G(e[2],q)&&(o=o.slice(0,e.index)+e[1]+e[2].slice(0,-5)+e[3]),n=document.createTextNode(o)}r.insertBefore(n,e),this.parts.push({type:"node",index:++s})}""===i[o]?(r.insertBefore(J(),e),n.push(e)):e.data=i[o],a+=o}}else if(8===e.nodeType)if(e.data===H){const t=e.parentNode;null!==e.previousSibling&&s!==o||(s++,t.insertBefore(J(),e)),o=s,this.parts.push({type:"node",index:s}),null===e.nextSibling?e.data="":(n.push(e),s--),a++}else{let t=-1;for(;-1!==(t=e.data.indexOf(H,t+1));)this.parts.push({type:"node",index:-1}),a++}}else i.currentNode=r.pop()}for(const e of n)e.parentNode.removeChild(e)}}const G=(e,t)=>{const n=e.length-t.length;return n>=0&&e.slice(n)===t},W=e=>-1!==e.index,J=()=>document.createComment(""),Y=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;class X{constructor(e,t,n){this.__parts=[],this.template=e,this.processor=t,this.options=n}update(e){let t=0;for(const n of this.__parts)void 0!==n&&n.setValue(e[t]),t++;for(const e of this.__parts)void 0!==e&&e.commit()}_clone(){const e=z?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),t=[],n=this.template.parts,r=document.createTreeWalker(e,133,null,!1);let i,o=0,s=0,a=r.nextNode();for(;o<n.length;)if(i=n[o],W(i)){for(;s<i.index;)s++,"TEMPLATE"===a.nodeName&&(t.push(a),r.currentNode=a.content),null===(a=r.nextNode())&&(r.currentNode=t.pop(),a=r.nextNode());if("node"===i.type){const e=this.processor.handleTextExpression(this.options);e.insertAfterNode(a.previousSibling),this.__parts.push(e)}else this.__parts.push(...this.processor.handleAttributeExpressions(a,i.name,i.strings,this.options));o++}else this.__parts.push(void 0),o++;return z&&(document.adoptNode(e),customElements.upgrade(e)),e}}const Q=window.trustedTypes&&trustedTypes.createPolicy("lit-html",{createHTML:e=>e}),ee=` ${H} `;class te{constructor(e,t,n,r){this.strings=e,this.values=t,this.type=n,this.processor=r}getHTML(){const e=this.strings.length-1;let t="",n=!1;for(let r=0;r<e;r++){const e=this.strings[r],i=e.lastIndexOf("\x3c!--");n=(i>-1||n)&&-1===e.indexOf("--\x3e",i+1);const o=Y.exec(e);t+=null===o?e+(n?ee:U):e.substr(0,o.index)+o[1]+o[2]+q+o[3]+H}return t+=this.strings[e],t}getTemplateElement(){const e=document.createElement("template");let t=this.getHTML();return void 0!==Q&&(t=Q.createHTML(t)),e.innerHTML=t,e}}const ne=e=>null===e||!("object"==typeof e||"function"==typeof e),re=e=>Array.isArray(e)||!(!e||!e[Symbol.iterator]);class ie{constructor(e,t,n){this.dirty=!0,this.element=e,this.name=t,this.strings=n,this.parts=[];for(let e=0;e<n.length-1;e++)this.parts[e]=this._createPart()}_createPart(){return new oe(this)}_getValue(){const e=this.strings,t=e.length-1,n=this.parts;if(1===t&&""===e[0]&&""===e[1]){const e=n[0].value;if("symbol"==typeof e)return String(e);if("string"==typeof e||!re(e))return e}let r="";for(let i=0;i<t;i++){r+=e[i];const t=n[i];if(void 0!==t){const e=t.value;if(ne(e)||!re(e))r+="string"==typeof e?e:String(e);else for(const t of e)r+="string"==typeof t?t:String(t)}}return r+=e[t],r}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class oe{constructor(e){this.value=void 0,this.committer=e}setValue(e){e===j||ne(e)&&e===this.value||(this.value=e,I(e)||(this.committer.dirty=!0))}commit(){for(;I(this.value);){const e=this.value;this.value=j,e(this)}this.value!==j&&this.committer.commit()}}class se{constructor(e){this.value=void 0,this.__pendingValue=void 0,this.options=e}appendInto(e){this.startNode=e.appendChild(J()),this.endNode=e.appendChild(J())}insertAfterNode(e){this.startNode=e,this.endNode=e.nextSibling}appendIntoPart(e){e.__insert(this.startNode=J()),e.__insert(this.endNode=J())}insertAfterPart(e){e.__insert(this.startNode=J()),this.endNode=e.endNode,e.endNode=this.startNode}setValue(e){this.__pendingValue=e}commit(){if(null===this.startNode.parentNode)return;for(;I(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=j,e(this)}const e=this.__pendingValue;e!==j&&(ne(e)?e!==this.value&&this.__commitText(e):e instanceof te?this.__commitTemplateResult(e):e instanceof Node?this.__commitNode(e):re(e)?this.__commitIterable(e):e===V?(this.value=V,this.clear()):this.__commitText(e))}__insert(e){this.endNode.parentNode.insertBefore(e,this.endNode)}__commitNode(e){this.value!==e&&(this.clear(),this.__insert(e),this.value=e)}__commitText(e){const t=this.startNode.nextSibling,n="string"==typeof(e=null==e?"":e)?e:String(e);t===this.endNode.previousSibling&&3===t.nodeType?t.data=n:this.__commitNode(document.createTextNode(n)),this.value=e}__commitTemplateResult(e){const t=this.options.templateFactory(e);if(this.value instanceof X&&this.value.template===t)this.value.update(e.values);else{const n=new X(t,e.processor,this.options),r=n._clone();n.update(e.values),this.__commitNode(r),this.value=n}}__commitIterable(e){Array.isArray(this.value)||(this.value=[],this.clear());const t=this.value;let n,r=0;for(const i of e)n=t[r],void 0===n&&(n=new se(this.options),t.push(n),0===r?n.appendIntoPart(this):n.insertAfterPart(t[r-1])),n.setValue(i),n.commit(),r++;r<t.length&&(t.length=r,this.clear(n&&n.endNode))}clear(e=this.startNode){((e,t,n=null)=>{for(;t!==n;){const n=t.nextSibling;e.removeChild(t),t=n}})(this.startNode.parentNode,e.nextSibling,this.endNode)}}class ae{constructor(e,t,n){if(this.value=void 0,this.__pendingValue=void 0,2!==n.length||""!==n[0]||""!==n[1])throw new Error("Boolean attributes can only contain a single expression");this.element=e,this.name=t,this.strings=n}setValue(e){this.__pendingValue=e}commit(){for(;I(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=j,e(this)}if(this.__pendingValue===j)return;const e=!!this.__pendingValue;this.value!==e&&(e?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name),this.value=e),this.__pendingValue=j}}class le extends ie{constructor(e,t,n){super(e,t,n),this.single=2===n.length&&""===n[0]&&""===n[1]}_createPart(){return new ce(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class ce extends oe{}let pe=!1;(()=>{try{const e={get capture(){return pe=!0,!1}};window.addEventListener("test",e,e),window.removeEventListener("test",e,e)}catch(e){}})();class ue{constructor(e,t,n){this.value=void 0,this.__pendingValue=void 0,this.element=e,this.eventName=t,this.eventContext=n,this.__boundHandleEvent=e=>this.handleEvent(e)}setValue(e){this.__pendingValue=e}commit(){for(;I(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=j,e(this)}if(this.__pendingValue===j)return;const e=this.__pendingValue,t=this.value,n=null==e||null!=t&&(e.capture!==t.capture||e.once!==t.once||e.passive!==t.passive),r=null!=e&&(null==t||n);n&&this.element.removeEventListener(this.eventName,this.__boundHandleEvent,this.__options),r&&(this.__options=de(e),this.element.addEventListener(this.eventName,this.__boundHandleEvent,this.__options)),this.value=e,this.__pendingValue=j}handleEvent(e){"function"==typeof this.value?this.value.call(this.eventContext||this.element,e):this.value.handleEvent(e)}}const de=e=>e&&(pe?{capture:e.capture,passive:e.passive,once:e.once}:e.capture);new class{handleAttributeExpressions(e,t,n,r){const i=t[0];if("."===i){return new le(e,t.slice(1),n).parts}if("@"===i)return[new ue(e,t.slice(1),r.eventContext)];if("?"===i)return[new ae(e,t.slice(1),n)];return new ie(e,t,n).parts}handleTextExpression(e){return new se(e)}};const he=new Map;new WeakMap;"undefined"!=typeof window&&(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.4.1");class fe{constructor(e){this._parent=e,this._cache=new Map}has(e){return!!(this._cache.has(e)||this._parent&&this._parent._cache.has(e))}set(e,t){return this._cache.set(e,t),this}get(e){return this._cache.get(e)||this._parent&&this._parent._cache.get(e)}}let me=Math.round(1e5*Math.random());const ge="-|\\.|[0-9]|[a-z]",ye=new RegExp(`[a-z](${ge})*-(${ge})*`),ve=(e,t)=>{const n=`${e}-${me+=1}`;return((e,t)=>!!t.get(e))(n,t)?ve(e,t):n};function Ae(e,t=customElements){if(n=e,null===ye.exec(n))throw new Error("tagName is invalid");var n;return ve(e,t)}const be=new WeakMap,Ce=(e,t)=>be.set(t,e),xe=e=>be.get(e);const we=(e,t,n=customElements)=>{Ce(e,t),n.define(e,class extends t{})},ke=(e,t,n)=>{const r=customElements;if(!function(e){let t=e;for(;t;){if(t===window.HTMLElement||"HTMLElement"===t.name)return!0;t=Object.getPrototypeOf(t)}return!1}(t))return((e,t,n)=>{const r=Ae(e,t);if(!n)throw new Error("Lazy scoped elements requires the use of tags cache");return n.set(e,r),r})(e,r,n);if(t===customElements.get(e))return Ce(e,t),e;const i=Ae(e,r);return we(i,t,r),i};function Ee(e,t,n=void 0){return xe(t)||n&&n.get(e)||ke(e,t,n)}const Se="-|\\.|[0-9]|[a-z]",_e=new RegExp(`<\\/?([a-z](${Se})*-(${Se})*)`,"g"),$e=new fe,Re=(e,t,n,r)=>{const i=e.map((e=>{let n=e;const i=(e=>{const t=[];let n;for(;null!==(n=_e.exec(e));)t.push(n);return t})(e);for(let e=i.length-1;e>=0;e-=1){const o=i[e],[s,a]=o,l=Ee(a,t[a],r),c=o.index+s.length-a.length,p=c+a.length,u=0===s.indexOf("</");n=n.slice(0,c)+(u?l:`${l} data-tag-name="${a}"`)+n.slice(p)}return n}));return n.set(e,i),i};let Ne=!0;const{ShadyCSS:Pe}=window;(void 0===Pe||void 0===Pe.prepareTemplateDom)&&(Ne=!1);const Me=new WeakMap,Be=new WeakMap,Oe=e=>(Be.has(e)||Be.set(e,new fe(Be.get(e.constructor))),Be.get(e)),De=(e,t,n,r)=>e.map((e=>e instanceof te?Le(e,t,n,r):Array.isArray(e)?De(e,t,n,r):e)),Le=(e,t,n,r)=>new te(function(e,t,n=$e,r){return n.get(e)||Re(e,t,n,r)}(e.strings,t,n,r),De(e.values,t,n,r),e.type,e.processor),Fe=(e,t,n,r)=>i=>{const o=Le(i,t,n,r);return(e=>t=>{const n=((e,t)=>`${e}--${t}`)(t.type,e);let r=he.get(n);void 0===r&&(r={stringsArray:new WeakMap,keyString:new Map},he.set(n,r));let i=r.stringsArray.get(t.strings);if(void 0!==i)return i;const o=t.strings.join(H);if(i=r.keyString.get(o),void 0===i){const n=t.getTemplateElement();Ne&&Pe.prepareTemplateDom(n,e),i=new K(t,n),r.keyString.set(o,i)}return r.stringsArray.set(t.strings,i),i})(e)(o)},Te=c((e=>class extends e{static get scopedElements(){return{}}static render(e,t,n){if(!n||"object"!=typeof n||!n.scopeName)throw new Error("The `scopeName` option is required.");const{scopeName:r,eventContext:i}=n,o=(s=i,Me.has(s)||Me.set(s,new fe(Me.get(s.constructor))),Me.get(s));var s;const a=Oe(i),{scopedElements:l}=this;return super.render(e,t,{...n,templateFactory:Fe(r,l,o,a)})}defineScopedElement(e,t){return function(e,t,n){const r=n.get(e);r?void 0===customElements.get(r)&&we(r,t,customElements):n.set(e,Ee(e,t,n))}(e,t,Oe(this))}static getScopedTagName(e){const t=this.scopedElements[e];return t?Ee(e,t,Oe(this)):Oe(this).get(e)}getScopedTagName(e){const t=this.constructor.scopedElements[e];return t?Ee(e,t,Oe(this)):Oe(this).get(e)}})),Ie="closeDefault",ze="dangerExclamation",je="info",Ve="success",He="warningExclamation",Ue="important",Ze=" !"+Ue,qe=D(class extends L{constructor(e){var t;if(super(e),e.type!==B||"style"!==e.name||(null===(t=e.strings)||void 0===t?void 0:t.length)>2)throw Error("The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.")}render(e){return Object.keys(e).reduce(((t,n)=>{const r=e[n];return null==r?t:t+`${n=n.includes("-")?n:n.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g,"-$&").toLowerCase()}:${r};`}),"")}update(e,[t]){const{style:n}=e.element;if(void 0===this.ut){this.ut=new Set;for(const e in t)this.ut.add(e);return this.render(t)}this.ut.forEach((e=>{null==t[e]&&(this.ut.delete(e),e.includes("-")?n.removeProperty(e):n[e]="")}));for(const e in t){const r=t[e];if(null!=r){this.ut.add(e);const t="string"==typeof r&&r.endsWith(Ze);e.includes("-")||t?n.setProperty(e,t?r.slice(0,-11):r,t?Ue:""):n[e]=r}}return M.Jb}}),{I:Ke}=M._$LH,Ge=(e,t)=>{var n,r;const i=e._$AN;if(void 0===i)return!1;for(const e of i)null===(r=(n=e)._$AO)||void 0===r||r.call(n,t,!1),Ge(e,t);return!0},We=e=>{let t,n;do{if(void 0===(t=e._$AM))break;n=t._$AN,n.delete(e),e=t}while(0===(null==n?void 0:n.size))},Je=e=>{for(let t;t=e._$AM;e=t){let n=t._$AN;if(void 0===n)t._$AN=n=new Set;else if(n.has(e))break;n.add(e),Qe(t)}};function Ye(e){void 0!==this._$AN?(We(this),this._$AM=e,Je(this)):this._$AM=e}function Xe(e,t=!1,n=0){const r=this._$AH,i=this._$AN;if(void 0!==i&&0!==i.size)if(t)if(Array.isArray(r))for(let e=n;e<r.length;e++)Ge(r[e],!1),We(r[e]);else null!=r&&(Ge(r,!1),We(r));else Ge(this,e)}const Qe=e=>{var t,n,r,i;e.type==O&&(null!==(t=(r=e)._$AP)&&void 0!==t||(r._$AP=Xe),null!==(n=(i=e)._$AQ)&&void 0!==n||(i._$AQ=Ye))};class et extends L{constructor(){super(...arguments),this._$AN=void 0}_$AT(e,t,n){super._$AT(e,t,n),Je(this),this.isConnected=e._$AU}_$AO(e,t=!0){var n,r;e!==this.isConnected&&(this.isConnected=e,e?null===(n=this.reconnected)||void 0===n||n.call(this):null===(r=this.disconnected)||void 0===r||r.call(this)),t&&(Ge(this,e),We(this))}setValue(e){if((e=>void 0===e.strings)(this._$Ct))this._$Ct._$AI(e,this);else{const t=[...this._$Ct._$AH];t[this._$Ci]=e,this._$Ct._$AI(t,this,0)}}disconnected(){}reconnected(){}}class tt{constructor(e){this.G=e}disconnect(){this.G=void 0}reconnect(e){this.G=e}deref(){return this.G}}class nt{constructor(){this.Y=void 0,this.Z=void 0}get(){return this.Y}pause(){var e;null!==(e=this.Y)&&void 0!==e||(this.Y=new Promise((e=>this.Z=e)))}resume(){var e;null===(e=this.Z)||void 0===e||e.call(this),this.Y=this.Z=void 0}}const rt=e=>!(e=>null===e||"object"!=typeof e&&"function"!=typeof e)(e)&&"function"==typeof e.then,it=1073741823;const ot=D(class extends et{constructor(){super(...arguments),this._$C_t=it,this._$Cwt=[],this._$Cq=new tt(this),this._$CK=new nt}render(...e){var t;return null!==(t=e.find((e=>!rt(e))))&&void 0!==t?t:M.Jb}update(e,t){const n=this._$Cwt;let r=n.length;this._$Cwt=t;const i=this._$Cq,o=this._$CK;this.isConnected||this.disconnected();for(let e=0;e<t.length&&!(e>this._$C_t);e++){const s=t[e];if(!rt(s))return this._$C_t=e,s;e<r&&s===n[e]||(this._$C_t=it,r=0,Promise.resolve(s).then((async e=>{for(;o.get();)await o.get();const t=i.deref();if(void 0!==t){const n=t._$Cwt.indexOf(s);n>-1&&n<t._$C_t&&(t._$C_t=n,t.setValue(e))}})))}return M.Jb}disconnected(){this._$Cq.disconnect(),this._$CK.pause()}reconnected(){this._$Cq.reconnect(this),this._$CK.resume()}}),st={_export:()=>Promise.resolve().then(n.bind(n,8388)).then((e=>e._export)),_import:()=>Promise.resolve().then(n.bind(n,9699)).then((e=>e._import)),add:()=>Promise.resolve().then(n.bind(n,7352)).then((e=>e.add)),archive:()=>Promise.resolve().then(n.bind(n,6939)).then((e=>e.archive)),arrowDown:()=>Promise.resolve().then(n.bind(n,4783)).then((e=>e.arrowDown)),arrowUp:()=>Promise.resolve().then(n.bind(n,7404)).then((e=>e.arrowUp)),caretDown:()=>Promise.resolve().then(n.bind(n,588)).then((e=>e.caretDown)),caretLeft:()=>Promise.resolve().then(n.bind(n,1746)).then((e=>e.caretLeft)),caretRight:()=>Promise.resolve().then(n.bind(n,5147)).then((e=>e.caretRight)),caretUp:()=>Promise.resolve().then(n.bind(n,5245)).then((e=>e.caretUp)),check:()=>Promise.resolve().then(n.bind(n,3441)).then((e=>e.check)),chevronDown:()=>Promise.resolve().then(n.bind(n,157)).then((e=>e.chevronDown)),chevronLeft:()=>Promise.resolve().then(n.bind(n,1316)).then((e=>e.chevronLeft)),chevronLightDown:()=>Promise.resolve().then(n.bind(n,9683)).then((e=>e.chevronLightDown)),chevronLightLeft:()=>Promise.resolve().then(n.bind(n,1788)).then((e=>e.chevronLightLeft)),chevronLightRight:()=>Promise.resolve().then(n.bind(n,7776)).then((e=>e.chevronLightRight)),chevronLightUp:()=>Promise.resolve().then(n.bind(n,5154)).then((e=>e.chevronLightUp)),chevronRight:()=>Promise.resolve().then(n.bind(n,1704)).then((e=>e.chevronRight)),chevronUp:()=>Promise.resolve().then(n.bind(n,5121)).then((e=>e.chevronUp)),closeDefault:()=>Promise.resolve().then(n.bind(n,4754)).then((e=>e.closeDefault)),dangerExclamation:()=>Promise.resolve().then(n.bind(n,969)).then((e=>e.dangerExclamation)),dropzone:()=>Promise.resolve().then(n.bind(n,6941)).then((e=>e.dropzone)),feedback:()=>Promise.resolve().then(n.bind(n,2253)).then((e=>e.feedback)),file:()=>Promise.resolve().then(n.bind(n,1601)).then((e=>e.file)),hide:()=>Promise.resolve().then(n.bind(n,8138)).then((e=>e.hide)),info:()=>Promise.resolve().then(n.bind(n,770)).then((e=>e.info)),maximise:()=>Promise.resolve().then(n.bind(n,8297)).then((e=>e.maximise)),meatballs:()=>Promise.resolve().then(n.bind(n,1307)).then((e=>e.meatballs)),minus:()=>Promise.resolve().then(n.bind(n,7272)).then((e=>e.minus)),openInNewWindow:()=>Promise.resolve().then(n.bind(n,1895)).then((e=>e.openInNewWindow)),process:()=>Promise.resolve().then(n.bind(n,4137)).then((e=>e.process)),processModel:()=>Promise.resolve().then(n.bind(n,2605)).then((e=>e.processModel)),publish:()=>Promise.resolve().then(n.bind(n,5233)).then((e=>e.publish)),refresh:()=>Promise.resolve().then(n.bind(n,1417)).then((e=>e.refresh)),save:()=>Promise.resolve().then(n.bind(n,3234)).then((e=>e.save)),schedule:()=>Promise.resolve().then(n.bind(n,7627)).then((e=>e.schedule)),search:()=>Promise.resolve().then(n.bind(n,5554)).then((e=>e.search)),show:()=>Promise.resolve().then(n.bind(n,9376)).then((e=>e.show)),success:()=>Promise.resolve().then(n.bind(n,7528)).then((e=>e.success)),summary:()=>Promise.resolve().then(n.bind(n,8318)).then((e=>e.summary)),tick:()=>Promise.resolve().then(n.bind(n,5017)).then((e=>e.tick)),trash:()=>Promise.resolve().then(n.bind(n,7798)).then((e=>e.trash)),user:()=>Promise.resolve().then(n.bind(n,8592)).then((e=>e.user)),users:()=>Promise.resolve().then(n.bind(n,8344)).then((e=>e.users)),versionHistory:()=>Promise.resolve().then(n.bind(n,6525)).then((e=>e.versionHistory)),warningExclamation:()=>Promise.resolve().then(n.bind(n,7403)).then((e=>e.warningExclamation))},at=({type:e,typeAsHtml:t,fixedSize:n,className:i})=>{if(!e&&!t)return r.Ld;if(e&&!(e in st))return console.warn("Icon not found",e),r.Ld;const o=e?st[e]():Promise.resolve(t);return r.dy`
    <div
      aria-hidden="true"
      class=${i||"ne-icon"}
      style=${qe({height:n,width:n,display:"grid",alignItems:"center",justifyItems:"center"})}
    >
      ${ot(o,r.dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
></svg>`)}
    </div>
  `},lt=[P,r.iv`
  :host {
    display: grid;
    color: inherit;
  }
`];let ct=class extends r.oi{constructor(){super(...arguments),this.fixedSize=""}static get styles(){return lt}render(){return at({type:this.type,fixedSize:this.fixedSize})}};N([s({attribute:"type",reflect:!0})],ct.prototype,"type",void 0),N([s({type:String})],ct.prototype,"fixedSize",void 0),ct=N([i("ne-icon")],ct);const pt=(e,t,n)=>{const r={bubbles:!0,cancelable:!1,composed:!0,...n},i=new CustomEvent(t,r);return e.dispatchEvent(i),i};var ut;!function(e){e.info="info",e.success="success",e.danger="danger",e.warning="warning"}(ut||(ut={}));const dt=r.iv`
  * {
  --ne-banner-sizing-icon: var(--ne-ref-sizing-04, 1em);
  --ne-banner-color-background-success: var(--ne-ref-color-green-50, #008738);
  --ne-banner-color-background-info: var(--ne-ref-color-blue-60, #006BD6);
  --ne-banner-color-background-danger: var(--ne-ref-color-red-50, #E60000);
  --ne-banner-color-background-warning: var(--ne-ref-color-yellow-50, #FFCF1A);
  --ne-banner-color-label-default: var(--ne-ref-color-white, #ffffff);
  --ne-banner-color-label-warning: var(--ne-ref-color-grey-90, #161718);
  --ne-banner-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-banner-font-size: var(--ne-ref-font-size-04, 0.875em);
  --ne-banner-shadow: 0px 0px 8px var(--ne-ref-color-grey-90-20, #16171820);
  --ne-banner-gap: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-banner-padding-horizontal: var(--ne-ref-spacing-medium, 1em);
  --ne-banner-padding-vertical: var(--ne-ref-spacing-x-small, 0.5em);
}
`,ht=[r.iv`
  :host {
    width: 100%;
  }

  .banner {
    position: relative;
    display: flex;
    flex-flow: row nowrap;
    justify-content: flex-start;
    align-items: top;
    align-content: center;
    padding: var(--ne-banner-padding-horizontal) var(--ne-banner-padding-vertical);
    box-sizing: border-box;
    box-shadow: var(--ne-banner-shadow)
    border: none;
    border-radius: var(--ne-banner-border-radius-default);
    align-items: flex-start
  }

  .info {
    background-color: var(--ne-banner-color-background-info);
    color: var(--ne-banner-color-label-default);
  }

  .success {
    background-color: var(--ne-banner-color-background-success);
    color: var(--ne-banner-color-label-default);
  }

  .danger {
    background-color: var(--ne-banner-color-background-danger);
    color: var(--ne-banner-color-label-default);
  }

  .warning {
    background-color: var(--ne-banner-color-background-warning);
    color: var(--ne-banner-color-label-warning);
  }

  .content {
    flex-grow: 1;
    word-wrap: break-word;
    font-family: var(--ne-banner-font-family);
    font-size: var(--ne-banner-font-size);
  }

  .banner.closable .content {
    padding-right: 0;
  }

  .icon {
    flex-shrink: 0;
    display: grid;
    box-sizing: border-box;
    background-color: transparent;
    padding-top: var(--ne-ref-spacing-xxx-small);

  }

  .type-icon {
    min-width: var(--ne-banner-sizing-icon);
    height: var(--ne-banner-sizing-icon);
    margin: 0 var(--ne-banner-gap);
  }

  .close-button {
    display: flex;
    flex-flow: row nowrap;
    justify-content: center;
    align-items: center;
    align-content: center;
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    border: none;
    border-radius: var(--ne-button-border-radius);
    min-width: var(--ne-banner-sizing-icon);
    outline: none;
    background-color: transparent;
    cursor: pointer;
  }
  
  .close-button * {
    cursor: pointer;
  }
`,P,dt];let ft=class extends(Te(r.oi)){constructor(){super(...arguments),this.variantType=ut.info,this.closable=!1,this._onClose=()=>{pt(this,"ne-close",{})},this.getTypeIcon=()=>{let e;switch(this.variantType){case ut.info:e=je;break;case ut.success:e=Ve;break;case ut.danger:e=ze;break;case ut.warning:e=He}return r.dy`<ne-icon type=${e}></ne-icon>`}}static get styles(){return ht}static get scopedElements(){return{"ne-icon":ct}}render(){return r.dy`<div
      role="alert"
      class="${F({banner:!0,[this.variantType]:!0,closable:this.closable})}"
    >
      <span class="icon type-icon">${this.getTypeIcon()}</span>
      <div class="content"><slot></slot></div>
      ${this.closable?r.dy`<button
            id="close-button"
            class="close-button"
            @click="${this._onClose}"
            aria-label="close"
          >
            <span
              class="${F({icon:!0,"type-icon":!0,[this.variantType]:!0})}"
              ><ne-icon type=${Ie}></ne-icon
            ></span>
          </button>`:""}
    </div>`}};N([s({type:String,attribute:"type",reflect:!0})],ft.prototype,"variantType",void 0),N([s({type:Boolean,reflect:!0})],ft.prototype,"closable",void 0),ft=N([i("ne-banner")],ft);const mt=[r.iv`
  * {
  --ne-button-color-background-primary-default: var(--ne-ref-color-blue-60, #006BD6);
  --ne-button-color-background-primary-hover: var(--ne-ref-color-blue-70, #0052A3);
  --ne-button-color-background-primary-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-background-secondary-default: var(--ne-ref-color-white, #ffffff);
  --ne-button-color-background-secondary-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-button-color-background-secondary-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-background-destructive-default: var(--ne-ref-color-red-60, #B80000);
  --ne-button-color-background-destructive-hover: var(--ne-ref-color-red-70, #7C0D0E);
  --ne-button-color-background-destructive-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-background-text-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-button-color-background-text-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-background-inverse-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-button-color-background-inverse-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-border-primary-default: var(--ne-ref-color-blue-70, #0052A3);
  --ne-button-color-border-secondary-default: var(--ne-ref-color-grey-10, #E2E3E4);
  --ne-button-color-border-destructive-default: var(--ne-ref-color-red-70, #7C0D0E);
  --ne-button-color-border-focus: var(--ne-ref-color-blue-20, #A3D1FF);
  --ne-button-color-border-inverse-default: var(--ne-ref-color-white, #ffffff);
  --ne-button-color-border-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-label-primary-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-button-color-label-primary-default: var(--ne-ref-color-white, #ffffff);
  --ne-button-color-label-secondary-default: var(--ne-ref-color-blue-60, #006BD6);
  --ne-button-color-label-secondary-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-button-color-label-destructive-default: var(--ne-ref-color-white, #ffffff);
  --ne-button-color-label-destructive-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-button-color-label-text-default: var(--ne-ref-color-blue-60, #006BD6);
  --ne-button-color-label-text-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-button-color-label-inverse-default: var(--ne-ref-color-white, #ffffff);
  --ne-button-color-label-inverse-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-button-border-radius: var(--ne-ref-border-radius-medium, .25em);
  --ne-button-padding-horizontal: var(--ne-ref-spacing-small, 0.75em);
  --ne-button-padding-vertical: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-button-gap: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-button-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-button-font-size: var(--ne-ref-font-size-04, 0.875em);
  --ne-button-sizing-icon: var(--ne-ref-sizing-04, 1em);
  --ne-button-border-width-default: var(--ne-ref-border-width-small, 1px);
  --ne-button-border-width-focus: var(--ne-ref-border-width-large, 4px);
}
`,r.iv`
  .btn {
    font-family: var(--ne-button-font-family);
    font-size: var(--ne-button-font-size);
    padding: var(--ne-button-padding-vertical)
      var(--ne-button-padding-horizontal) var(--ne-button-padding-vertical)
      var(--ne-button-padding-horizontal);
    gap: var(--ne-button-gap);
    border-radius: var(--ne-button-border-radius);
    outline: none;
    display: grid;
    grid-auto-flow: column;
  }

  .btn:focus {
    outline: 4px solid var(--ne-button-color-border-focus);
  }

  .btn-primary {
    border: 1px solid var(--ne-button-color-border-primary-default);
    color: var(--ne-button-color-label-primary-default);
    background-color: var(--ne-button-color-background-primary-default);
  }

  .btn-primary:hover {
    background-color: var(--ne-button-color-background-primary-hover);
  }

  .btn-primary:disabled {
    border: 1px solid var(--ne-button-color-border-disabled);
    color: var(--ne-button-color-label-primary-disabled);
    background-color: var(--ne-button-color-background-primary-disabled);
  }

  .btn-secondary {
    border: 1px solid var(--ne-button-color-border-secondary-default);
    color: var(--ne-button-color-label-secondary-default);
    background-color: var(--ne-button-color-background-secondary-default);
  }

  .btn-secondary:hover {
    background-color: var(--ne-button-color-background-secondary-hover);
  }

  .btn-secondary:disabled {
    border: 1px solid var(--ne-button-color-border-disabled);
    color: var(--ne-button-color-label-secondary-disabled);
    background-color: var(--ne-button-color-background-secondary-disabled);
  }

  .btn-secondary:focus {
    background-color: var(--ne-button-color-background-secondary-hover);
  }

  .btn-destructive {
    border: 1px solid var(--ne-button-color-border-destructive-default);
    color: var(--ne-button-color-label-destructive-default);
    background-color: var(--ne-button-color-background-destructive-default);
  }

  .btn-destructive:hover {
    background-color: var(--ne-button-color-background-destructive-hover);
  }

  .btn-destructive:disabled {
    border: 1px solid var(--ne-button-color-border-disabled);
    color: var(--ne-button-color-label-destructive-disabled);
    background-color: var(--ne-button-color-background-destructive-disabled);
  }

  .btn-destructive:focus {
    background-color: var(--ne-button-color-background-destructive-hover);
  }

  .btn-text {
    border: 0;
    color: var(--ne-button-color-label-text-default);
    background-color: transparent;
  }

  .btn-text:hover {
    background-color: var(--ne-button-color-background-text-hover);
  }

  .btn-text:disabled {
    border: 0;
    color: var(--ne-button-color-label-text-disabled);
    background-color: var(--ne-button-color-background-text-disabled);
  }

  .btn-text:focus {
    background-color: var(--ne-button-color-background-text-hover);
  }

  .btn-inverse {
    color: var(--ne-button-color-label-inverse-default);
    background-color: transparent;
    border: 1px solid var(--ne-button-color-border-inverse-default);
  }

  .btn-inverse:hover {
    background-color: var(--ne-button-color-background-inverse-hover);
  }

  .btn-inverse:disabled {
    border: 1px solid var(--ne-button-color-border-disabled);
    color: var(--ne-button-color-label-inverse-disabled);
    background-color: var(--ne-button-color-background-inverse-disabled);
  }

  .btn-inverse:focus {
    background-color: var(--ne-button-color-background-inverse-hover);
  }

  .icon-slot {
    min-width: 18px;
    max-width: 18px;
  }
`,P];let gt=class extends(Te(r.oi)){constructor(){super(...arguments),this.disabled=!1,this.ariaLabel="",this.variant="primary",this.onClick=()=>{pt(this,"ne-click",{composed:!0,bubbles:!0})}}static get styles(){return mt}render(){return r.dy`
      <button
        id=${this.id}
        type="button"
        ?disabled=${this.disabled}
        @click="${this.onClick}"
        aria-label=${this.ariaLabel||r.Ld}
        class=${F({btn:!0,"btn-primary":"primary"===this.variant,"btn-secondary":"secondary"===this.variant,"btn-destructive":"destructive"===this.variant,"btn-text":"text"===this.variant,"btn-inverse":"inverse"===this.variant})}
      >
        <span class=${void 0!==this.leftIconType?"icon-slot":"hidden"}>
          <slot name="left">${at({type:this.leftIconType})}</slot>
        </span>
        <slot></slot>
        <span
          class=${void 0!==this.rightIconType?"icon-slot":"hidden"}
        >
          <slot name="right">${at({type:this.rightIconType})}</slot>
        </span>
      </button>
    `}};N([s({type:Boolean,reflect:!0})],gt.prototype,"disabled",void 0),N([s({attribute:"ne-aria-label",type:String,reflect:!0})],gt.prototype,"ariaLabel",void 0),N([s({type:String,attribute:"left-icon",reflect:!0})],gt.prototype,"leftIconType",void 0),N([s({type:String,attribute:"right-icon",reflect:!0})],gt.prototype,"rightIconType",void 0),N([s({reflect:!0})],gt.prototype,"variant",void 0),gt=N([i("ne-button")],gt);const yt=r.iv`
  * {
  --ne-button-set-padding-vertical: var(--ne-ref-spacing-medium, 1em);
  --ne-button-set-gap: var(--ne-ref-spacing-medium, 1em);
  --ne-button-set-color-border: var(--ne-ref-color-grey-10, #E2E3E4);
  --ne-button-set-border-width: var(--ne-ref-border-width-small, 1px);
}
`,vt=[r.iv`
  :host {
    width: 100%;
  }

  .ne-button-set {
    display: flex;
    flex-flow: row;
    justify-content: flex-start;
    align-items: center;
    align-content: center;
    padding-top: var(--ne-button-set-padding-vertical);
    padding-bottom: var(--ne-button-set-padding-vertical);
    gap: var(--ne-button-set-gap);
    width: 100%;
  }

  .ne-button-set ::slotted(.right-start) {
    margin-left: auto;
  }

  .divider-top {
    border-top: solid;
    border-top-width: var(--ne-button-set-border-width);
    border-top-color: var(--ne-button-set-color-border);
  }

  .divider-bottom {
    border-bottom: solid;
    border-bottom-width: var(--ne-button-set-border-width);
    border-bottom-color: var(--ne-button-set-color-border);
  }
`,P,yt];let At=class extends(Te(r.oi)){constructor(){super(...arguments),this.showTopDivider=!1,this.showBottomDivider=!1}static get styles(){return vt}render(){return r.dy`<div
      class="${F({"ne-button-set":!0,"divider-top":this.showTopDivider,"divider-bottom":this.showBottomDivider})}"
    >
      <slot></slot>
    </div>`}};N([s({type:Boolean,reflect:!0,attribute:"show-divider-top"})],At.prototype,"showTopDivider",void 0),N([s({type:Boolean,reflect:!0,attribute:"show-divider-bottom"})],At.prototype,"showBottomDivider",void 0),At=N([i("ne-button-set")],At);const bt=[r.iv`
  * {
  --ne-dropdown-menu-color-elevated-background: var(--ne-ref-color-white, #ffffff);
  --ne-dropdown-menu-color-elevated-border: var(--ne-ref-color-grey-10, #E2E3E4);
  --ne-dropdown-menu-color-flat-background: var(--ne-ref-color-white, #ffffff);
  --ne-dropdown-menu-color-flat-border: var(--ne-ref-color-blue-60, #006BD6);
  --ne-dropdown-menu-border-radius-elevated: var(--ne-ref-border-radius-medium, .25em);
  --ne-dropdown-menu-border-radius-flat-top: var(--ne-ref-border-radius-none, 0);
  --ne-dropdown-menu-border-radius-flat-bottom: var(--ne-ref-border-radius-medium, .25em);
  --ne-dropdown-menu-padding-horizontal: var(--ne-ref-spacing-none, 0);
  --ne-dropdown-menu-padding-vertical: var(--ne-ref-spacing-xx-small, 0.25em);
  --ne-dropdown-menu-border-width: var(--ne-ref-border-width-small, 1px);
  --ne-dropdown-menu-shadow-elevated: 0px 0px 8px var(--ne-ref-color-grey-90-20, #16171820);
}
`,r.iv`
  .dropdown-menu {
    margin: 0;
    padding: var(--ne-dropdown-menu-padding-vertical)
      var(--ne-dropdown-menu-padding-horizontal);
    border-width: var(--ne-dropdown-menu-border-width);
    border-style: solid;
  }

  .dropdown-menu.elevated {
    border-color: var(--ne-dropdown-menu-color-elevated-border);
    border-radius: var(--ne-dropdown-menu-border-radius-elevated);
    background-color: var(--ne-dropdown-menu-color-elevated-background);
    box-shadow: 3px 3px 5px rgb(22 23 24 / 10%);
  }

  .dropdown-menu.flat {
    border-color: var(--ne-dropdown-menu-color-flat-border);
    border-radius: var(--ne-dropdown-menu-border-radius-flat-top)
      var(--ne-dropdown-menu-border-radius-flat-top)
      var(--ne-dropdown-menu-border-radius-flat-bottom)
      var(--ne-dropdown-menu-border-radius-flat-bottom);
    background-color: var(--ne-dropdown-menu-color-flat-background);
  }

  .dropdown-menu .fixed-height {
    /* Shows 6 rows */
    max-height: calc(10 * (1em * 1.2));
    overflow-y: auto;
  }

  .dropdown-menu-footer {
    padding: 0 14px;
  }

  .dropdown-menu ::slotted(li) {
    display: block;
  }
`,P];let Ct=class extends r.oi{constructor(){super(...arguments),this.ariaLabel="",this.variant="elevated",this.fixedHeight=!1,this.showFooterActions=!1}static get styles(){return bt}render(){return r.dy`<div
      class=${F({"dropdown-menu":!0,elevated:"elevated"===this.variant,flat:"flat"===this.variant})}
      aria-label=${this.ariaLabel||r.Ld}
    >
      <div class=${F({"fixed-height":!0===this.fixedHeight})}>
        <slot></slot>
      </div>
      ${this.showFooterActions?r.dy`<div class="dropdown-menu-footer">
            <slot name="footer-items"></slot>
          </div>`:""}
    </div>`}};N([s({attribute:"ne-aria-label",type:String,reflect:!0})],Ct.prototype,"ariaLabel",void 0),N([s({reflect:!0})],Ct.prototype,"variant",void 0),N([s({type:Boolean,reflect:!0})],Ct.prototype,"fixedHeight",void 0),N([s({type:Boolean})],Ct.prototype,"showFooterActions",void 0),Ct=N([i("ne-dropdown-menu")],Ct);const xt=e=>null!=e?e:M.Ld;class wt{}const kt=new WeakMap,Et=D(class extends et{render(e){return M.Ld}update(e,[t]){var n;const r=t!==this.G;return r&&void 0!==this.G&&this.ot(void 0),(r||this.rt!==this.lt)&&(this.G=t,this.ct=null===(n=e.options)||void 0===n?void 0:n.host,this.ot(this.lt=e.element)),M.Ld}ot(e){var t;if("function"==typeof this.G){const n=null!==(t=this.ct)&&void 0!==t?t:globalThis;let r=kt.get(n);void 0===r&&(r=new WeakMap,kt.set(n,r)),void 0!==r.get(this.G)&&this.G.call(this.ct,void 0),r.set(this.G,e),void 0!==e&&this.G.call(this.ct,e)}else this.G.value=e}get rt(){var e,t,n;return"function"==typeof this.G?null===(t=kt.get(null!==(e=this.ct)&&void 0!==e?e:globalThis))||void 0===t?void 0:t.get(this.G):null===(n=this.G)||void 0===n?void 0:n.value}disconnected(){this.rt===this.lt&&this.ot(void 0)}reconnected(){this.ot(this.lt)}});var St=n(6941),_t=n(7798),$t=n(1601);const Rt=r.iv`
  * {
  --ne-file-picker-card-padding-horizontal: var(--ne-ref-spacing-medium, 1em);
  --ne-file-picker-card-padding-vertical: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-file-picker-card-gap: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-file-picker-card-sizing-icon: var(--ne-ref-sizing-06, 1.5em);
  --ne-file-picker-card-color-background: var(--ne-ref-color-white, #ffffff);
  --ne-file-picker-card-color-border: var(--ne-ref-color-grey-10, #E2E3E4);
  --ne-file-picker-card-color-text-file-name: var(--ne-ref-color-grey-90, #161718);
  --ne-file-picker-card-color-text-subtext: var(--ne-ref-color-grey-60, #575C61);
  --ne-file-picker-card-border-width: var(--ne-ref-border-width-small, 1px);
  --ne-file-picker-card-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-file-picker-card-font-size-file-name: var(--ne-ref-font-size-04, 0.875em);
  --ne-file-picker-card-font-size-subtext: var(--ne-ref-font-size-02, 0.75em);
  --ne-file-picker-card-border-radius: var(--ne-ref-border-radius-medium, .25em);
  --ne-file-picker-card-line-height: var(--ne-ref-line-height-condensed, 1.25em);
}
`,Nt=[r.iv`
  .file-card-area {
    position: relative;
    box-sizing: border-box;
    display: grid;
    border: var(--ne-file-picker-card-border-width) solid
      var(--ne-file-picker-card-color-border);
    border-radius: var(--ne-file-picker-card-border-radius);
    padding: var(--ne-file-picker-card-padding-vertical)
      var(--ne-file-picker-card-padding-horizontal);
    background-color: var(--ne-file-picker-card-color-background);
  }

  .content {
    align-self: stretch;
    display: flex;
    gap: var(--ne-file-picker-card-gap);
    align-items: start;
    justify-content: center;
    font-family: var(--ne-file-picker-card-font-family);
    font-size: var(--ne-file-picker-card-font-size-file-name);
    color: var(--ne-file-picker-color-label);
  }

  .text-content {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    line-height: var(--ne-file-picker-card-line-height);
  }

  .file-icon {
    width: var(--ne-file-picker-card-sizing-icon);
    height: var(--ne-file-picker-card-sizing-icon);
    padding: 1px calc(var(--ne-file-picker-card-gap) / 2);
  }

  .delete-button {
    display: flex;
    height: fit-content;
    width: fit-content;
    align-items: center;
    justify-content: center;
    margin: 0 auto;
    cursor: pointer;
  }

  .btn {
    background-color: inherit;
    border: none;
    font-size: var(--ne-file-picker-card-sizing-icon);
    cursor: inherit;
  }

  ne-icon {
    display: inline-block;
    color: var(--ne-file-picker-card-color-text-file-name);
  }

  .delete-icon {
    cursor: pointer;
    width: 12px;
    height: 16px;
  }

  .sub-text {
    display: inline-flex;
    font-size: var(--ne-file-picker-card-font-size-subtext);
    color: var(--ne-file-picker-card-color-text-subtext);
    gap: calc(var(--ne-file-picker-card-gap) * 2);
  }
`,P,Rt],Pt=" file",Mt=["B","KB","MB","GB","TB"];let Bt=class extends r.oi{constructor(){super(...arguments),this.fileName="",this.fileSize=0,this.handleClick=e=>{if(pt(this,"ne-click",{composed:!0,bubbles:!0}),this.onDelete)this.onDelete(e,this.id);else{const e=document.querySelector("ne-file-card");e?.style?.setProperty("display","none")}}}static get styles(){return Nt}_handleClick(e){this.handleClick(e)}render(){let e=`${this.fileName.slice(this.fileName.lastIndexOf(".")+1,this.fileName.length)}`;const t=e.length+5>10?this.fileName:this.fileName.split(`.${e}`)[0];e=e.length+5>10?"Document":e.toUpperCase()+Pt;const n=(e=>{const t=0===e?0:Math.floor(Math.log(e)/Math.log(1024));return`${(e/1024**t).toFixed(2)} ${Mt[t]}`})(this.fileSize);return r.dy` <div class="file-card-area">
      <div class="content">
        <div class="file-icon">
          ${at({typeAsHtml:$t.file})}
        </div>
        <div class="text-content">
          <label class="file-card-label">${t}</label>
          <div class="sub-text">
            <label class="file-fileFormat">${e}</label>
            <label class="file-size">${n}</label>
          </div>
        </div>
        <div class="delete-button">
          <button
            class="btn"
            @click=${this._handleClick}
            id="${this.id}-delete button"
            aria-label="delete button"
          >
            ${at({typeAsHtml:_t.trash,className:"delete-icon"})}
          </button>
        </div>
      </div>
    </div>`}};N([s({type:String,reflect:!0})],Bt.prototype,"fileName",void 0),N([s({type:Number,reflect:!0})],Bt.prototype,"fileSize",void 0),N([s()],Bt.prototype,"onDelete",void 0),Bt=N([i("ne-file-card")],Bt);const Ot=r.iv`
  * {
  --ne-file-picker-sizing-icon: var(--ne-ref-sizing-08, 2em);
  --ne-file-picker-sizing-height: var(--ne-ref-sizing-14, 6em);
  --ne-file-picker-message-padding: var(--ne-ref-spacing-medium, 1em);
  --ne-file-picker-message-gap: var(--ne-ref-spacing-medium, 1em);
  --ne-file-picker-padding: var(--ne-ref-spacing-medium, 1em);
  --ne-file-picker-color-background-default: var(--ne-ref-color-white, #ffffff);
  --ne-file-picker-color-background-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-file-picker-color-label: var(--ne-ref-color-grey-60, #575C61);
  --ne-file-picker-color-border-default: var(--ne-ref-color-grey40, #898F94);
  --ne-file-picker-color-border-warning: var(--ne-ref-color-yellow-50, #FFCF1A);
  --ne-file-picker-color-border-error: var(--ne-ref-color-red-50, #E60000);
  --ne-file-picker-border-width: var(--ne-ref-border-width-small, 1px);
  --ne-file-picker-border-radius: var(--ne-ref-border-radius-medium, .25em);
  --ne-file-picker-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-file-picker-font-size: var(--ne-ref-font-size-04, 0.875em);
  --ne-file-picker-gap: var(--ne-ref-spacing-medium, 1em);
}
`,Dt=[r.iv`
  .drag-file-area {
    position: relative;
    box-sizing: border-box;
    border: var(--ne-file-picker-border-width) dashed
      var(--ne-file-picker-color-border-default);
    overflow: hidden;
    border-radius: var(--ne-file-picker-border-radius);
    padding: calc(var(--ne-file-picker-padding) / 2);
    min-height: 96px;
  }

  .drag-file-area.dragging-over-area {
    background-color: var(--ne-file-picker-color-background-hover);
    height: 96px;
    display: grid;
    padding: 0 calc(var(--ne-file-picker-padding) / 2);
  }

  .form-container {
    position: relative;
    box-sizing: border-box;
    display: grid;
    width: 100%;
    height: 100%;
  }

  .file-picker-container {
    align-self: stretch;
    display: flex;
    text-align: center;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    margin: calc(var(--ne-file-picker-padding) / 2);
  }

  .upload-files-container {
    position: relative;
    display: grid;
    width: 100%;
    flex-direction: column;
    gap: var(--ne-file-picker-padding);
  }

  .file-picker-container .upload-files-container ne-file-card:last-child {
    margin-bottom: var(--ne-file-picker-padding);
  }

  .file-picker-message {
    width: fit-content;
    height: fit-content;
    padding: var(--ne-file-picker-message-padding);
    display: inline-flex;
    gap: var(--ne-file-picker-message-gap);
    align-items: center;
    justify-content: center;
    font-family: var(--ne-file-picker-font-family);
    font-size: var(--ne-file-picker-font-size);
    color: var(--ne-file-picker-color-label);
  }

  #default-file-input {
    opacity: 0;
    display: none;
    position: absolute;
    z-index: -1;
    left: 0;
    top: 0;
    width: 0;
    height: 0;
    visibility: hidden;
  }
`,P,Ot],Lt=[r.iv`
  .file-picker-container {
    position: inherit;
    align-self: stretch;
    display: flex;
    text-align: center;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    margin: calc(var(--ne-file-picker-padding) / 2);
  }

  .file-picker-message {
    width: fit-content;
    height: fit-content;
    padding: var(--ne-file-picker-message-padding);
    display: inline-flex;
    gap: var(--ne-file-picker-message-gap);
    align-items: center;
    justify-content: center;
    font-family: var(--ne-file-picker-font-family);
    font-size: var(--ne-file-picker-font-size);
    color: var(--ne-file-picker-color-label);
  }

  #default-file-input {
    opacity: 0;
    position: absolute;
    z-index: -1;
    left: 0;
    top: 0;
    width: 0;
    height: 0;
  }

  .dropzone-icon-container {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: var(--ne-file-picker-sizing-icon);
    height: var(--ne-file-picker-sizing-icon);
  }

  .dropzone-icon-container svg {
    width: 100%;
    height: var(--ne-file-picker-sizing-icon);
  }
`,P,Ot];let Ft=class extends r.oi{static get styles(){return Lt}static get properties(){return{singleFile:{type:Boolean}}}constructor(){super(),this.singleFile=!1,this.singleFile=!1}render(){const e=this.singleFile?"file":"files";return r.dy` <div class="file-picker-container">
      <div class="file-picker-message">
        <div class="dropzone-icon-container dropzone-icon">
          ${at({typeAsHtml:St.dropzone})}
        </div>
        <label
          draggable="true"
          id="${this.id}-dropzone-label"
          for="default-file-input"
          aria-label="Drag ${e} here"
        >
          Drag ${e} here...
        </label>
        <slot>
          <input
            tabindex="-1"
            @input="${this.handleChange}"
            type="file"
            id="default-file-input"
            ?multiple="${!this.singleFile}"
          />
        </slot>
      </div>
    </div>`}};N([s()],Ft.prototype,"handleChange",void 0),N([s({type:Boolean})],Ft.prototype,"singleFile",void 0),Ft=N([i("ne-file-dropzone")],Ft);let Tt=class extends(Te(r.oi)){static get scopedElements(){return{"ne-file-dropzone":Ft,"ne-button":gt,"ne-file-card":Bt}}get filePickerCards(){return this._filePickerCards}set filePickerCards(e){const t=this._filePickerCards;this._filePickerCards=e,this.requestUpdate("filePickerCards",t)}get dragover(){return this._dragover}set dragover(e){const t=this._dragover;this._dragover=e,this.requestUpdate("dragover",t)}static get styles(){return Dt}static get properties(){return{filePickerCards:{type:Array},singleFile:{type:Boolean},dragover:{type:Boolean},accepts:{type:String}}}constructor(){super(),this.singleFile=!1,this._filePickerCards=[],this._dragover=!1,this._inputRef=new wt,this.preventDefaults=e=>{pt(this,"ne-change",{composed:!0,bubbles:!0}),e.preventDefault(),e.stopPropagation()},this.handleClick=()=>{pt(this,"ne-click",{composed:!0,bubbles:!0})},this._handleChange=async e=>{const t=e?.target?.files;await this.getFiles(t)},this.onDrop=async e=>{if(e&&"drop"===e.type&&e.dataTransfer){const{files:t}=e.dataTransfer;await this.getFiles(t)}pt(this,"ne-drop",{composed:!0,bubbles:!0,detail:{value:e.target.value,data:e.target.files,originalEvent:e}}),e.stopImmediatePropagation(),e.preventDefault(),this.dragover=!1},this.onDragOver=()=>{this.dragover=!0},this.onDragOverEnd=()=>{this.dragover=!1},this.filePickerCards=[],this.dragover=!1}connectedCallback(){super.connectedCallback(),["dragover","dragleave","drop"].forEach((e=>{this.addEventListener(e,this.preventDefaults,!1)})),["dragenter","dragover"].forEach((e=>{this.addEventListener(e,this.onDragOver,!1)})),["dragleave","drop"].forEach((e=>{this.addEventListener(e,this.onDragOverEnd,!1)})),this.addEventListener("drop",this.onDrop,!1)}disconnectedCallback(){["dragover","dragleave","drop"].forEach((e=>{this.removeEventListener(e,this.preventDefaults,!1)})),["dragenter","dragover"].forEach((e=>{this.removeEventListener(e,this.onDragOver,!1)})),["dragleave","drop"].forEach((e=>{this.removeEventListener(e,this.onDragOverEnd,!1)})),this.removeEventListener("drop",this.onDrop,!1),super.disconnectedCallback()}_handleClick(){const e=this._inputRef.value;e?.click(),this.handleClick()}async getFiles(e){if(e){const t=this.filePickerCards;let n=0;this.filePickerCards.length>0&&(n=this.filePickerCards.length);let r=!1;Array.from(e).forEach(((i,o)=>{if(!r){const s=i;t.push({id:String(0!==n?o+n:o),fileName:s.name,fileSize:s.size}),this.singleFile&&e.length>1&&(r=!0)}})),this.filePickerCards=t,this.onChange&&this.onChange(e)}this.requestUpdate()}async onDelete(e,t,n){pt(this,"ne-click",{composed:!0,bubbles:!0}),this.filePickerCards=n.filter((e=>e.id!==t)),this.onChange&&this.onChange(this.filePickerCards),this.requestUpdate()}renderForm(e){const t=this.singleFile?"file":"files";return this.dragover?r.dy` <div class="file-picker-container">
      <ne-file-dropzone
        id="${this.id}-dropzone"
        ?singleFile="${this.singleFile}"
        .handleChange="${this._handleChange}"
      ></ne-file-dropzone>
    </div>`:r.dy` <form class="form-container" enctype="multipart/form-data">
        <div class="file-picker-container">
          ${e}
          <div class="file-picker-message">
            <input
              ${Et(this._inputRef)}
              @input="${this._handleChange}"
              type="file"
              ?multiple="${!this.singleFile}"
              tabindex="-1"
              id="default-file-input"
              name="select-file-input"
              accept="${this.accepts}"
            />
            <label
              draggable="true"
              id="Select ${t}"
              for="${this.id}-button"
              aria-label="Drag ${t} here"
            >
              Drag ${t} here or
            </label>
            <ne-button
              id="${this.id}-button"
              variant="secondary"
              @click=${this._handleClick}
              ne-aria-label="Select ${t}"
              tabindex="0"
              >Select ${t}
            </ne-button>
          </div>
        </div>
      </form>`}render(){const e=[],t=[];if(this.filePickerCards){for(const t of this.filePickerCards)e.push(r.dy` <ne-file-card
          .id=${t.id}
          .fileName=${t.fileName}
          .fileSize="${xt(t.fileSize)}"
          .onDelete="${(e,t)=>this.onDelete(e,t,this.filePickerCards)}"
        ></ne-file-card>`);e&&t.push(r.dy` <div class="upload-files-container">${e}</div>`)}return this.singleFile&&1===e.length?r.dy`${t}`:r.dy`
          <div
            class=${F({"drag-file-area":!0,"dragging-over-area":this.dragover})}
          >
            ${this.renderForm(t)}
          </div>
        `}};N([s()],Tt.prototype,"onChange",void 0),N([s({type:Boolean})],Tt.prototype,"singleFile",void 0),N([s({type:String})],Tt.prototype,"accepts",void 0),N([s({type:Array,reflect:!0})],Tt.prototype,"filePickerCards",null),Tt=N([i("ne-file-picker")],Tt);const It=r.iv`
  * {
  --ne-label-gap: var(--ne-ref-spacing-none, 0);
  --ne-label-color-title: var(--ne-ref-color-grey-60, #575C61);
  --ne-label-color-asterisk: var(--ne-ref-color-red-60, #B80000);
  --ne-label-font-size: var(--ne-ref-font-size-04, 0.875em);
  --ne-label-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
}
`,zt=[r.iv`
  * {
    color: var(--ne-label-color-title);
    font-family: var(--ne-label-font-family);
    font-size: 1em;
  }

  .outer-label {
    display: flex;
    font-size: var(--ne-label-font-size);
  }

  .required-indicator {
    margin-left: var(--ne-label-gap);
    color: var(--ne-label-color-asterisk);
  }
`,P,It];let jt=class extends r.oi{constructor(){super(...arguments),this.for="",this.required=!1}static get styles(){return zt}render(){return r.dy`<label
      class="outer-label"
      id=${xt(this.id)}
      for=${xt(this.for)}
    >
      <slot></slot>
      ${this.required?r.dy`<span class="required-indicator">*</span>`:r.Ld}
    </label> `}};N([s({attribute:"for"})],jt.prototype,"for",void 0),N([s({attribute:"required",type:Boolean,reflect:!0})],jt.prototype,"required",void 0),jt=N([i("ne-label")],jt);const Vt=[_,r.iv`
  .container {
    width: 100%;
    height: 100%;
  }

  #buttons-row {
    width: 100%;
    bottom: 0;
    display: grid;
    direction: rtl;
    grid-template-columns: fit-content(5em) fit-content(5em);
    gap: ${$};
    border-top: solid var(--ne-alias-border-width-default)
      var(--ne-alias-border-grey);
    margin: ${$} 0;
    padding-top: ${$};
  }
`];var Ht=function(e,t){return Ht=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},Ht(e,t)};function Ut(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}Ht(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}Object.create;function Zt(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function qt(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s}function Kt(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))}Object.create;"function"==typeof SuppressedError&&SuppressedError;function Gt(e){return"function"==typeof e}function Wt(e){var t=e((function(e){Error.call(e),e.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}var Jt=Wt((function(e){return function(t){e(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}));function Yt(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var Xt=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}var t;return e.prototype.unsubscribe=function(){var e,t,n,r,i;if(!this.closed){this.closed=!0;var o=this._parentage;if(o)if(this._parentage=null,Array.isArray(o))try{for(var s=Zt(o),a=s.next();!a.done;a=s.next()){a.value.remove(this)}}catch(t){e={error:t}}finally{try{a&&!a.done&&(t=s.return)&&t.call(s)}finally{if(e)throw e.error}}else o.remove(this);var l=this.initialTeardown;if(Gt(l))try{l()}catch(e){i=e instanceof Jt?e.errors:[e]}var c=this._finalizers;if(c){this._finalizers=null;try{for(var p=Zt(c),u=p.next();!u.done;u=p.next()){var d=u.value;try{tn(d)}catch(e){i=null!=i?i:[],e instanceof Jt?i=Kt(Kt([],qt(i)),qt(e.errors)):i.push(e)}}}catch(e){n={error:e}}finally{try{u&&!u.done&&(r=p.return)&&r.call(p)}finally{if(n)throw n.error}}}if(i)throw new Jt(i)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)tn(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&Yt(t,e)},e.prototype.remove=function(t){var n=this._finalizers;n&&Yt(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e}(),Qt=Xt.EMPTY;function en(e){return e instanceof Xt||e&&"closed"in e&&Gt(e.remove)&&Gt(e.add)&&Gt(e.unsubscribe)}function tn(e){Gt(e)?e():e.unsubscribe()}var nn={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},rn={setTimeout:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=rn.delegate;return(null==i?void 0:i.setTimeout)?i.setTimeout.apply(i,Kt([e,t],qt(n))):setTimeout.apply(void 0,Kt([e,t],qt(n)))},clearTimeout:function(e){var t=rn.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function on(){}var sn=an("C",void 0,void 0);function an(e,t,n){return{kind:e,value:t,error:n}}var ln=null;function cn(e){if(nn.useDeprecatedSynchronousErrorHandling){var t=!ln;if(t&&(ln={errorThrown:!1,error:null}),e(),t){var n=ln,r=n.errorThrown,i=n.error;if(ln=null,r)throw i}}else e()}var pn=function(e){function t(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,en(t)&&t.add(n)):n.destination=yn,n}return Ut(t,e),t.create=function(e,t,n){return new fn(e,t,n)},t.prototype.next=function(e){this.isStopped?gn(function(e){return an("N",e,void 0)}(e),this):this._next(e)},t.prototype.error=function(e){this.isStopped?gn(function(e){return an("E",void 0,e)}(e),this):(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped?gn(sn,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(Xt),un=Function.prototype.bind;function dn(e,t){return un.call(e,t)}var hn=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){mn(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){mn(e)}else mn(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){mn(e)}},e}(),fn=function(e){function t(t,n,r){var i,o,s=e.call(this)||this;Gt(t)||!t?i={next:null!=t?t:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:s&&nn.useDeprecatedNextContext?((o=Object.create(t)).unsubscribe=function(){return s.unsubscribe()},i={next:t.next&&dn(t.next,o),error:t.error&&dn(t.error,o),complete:t.complete&&dn(t.complete,o)}):i=t;return s.destination=new hn(i),s}return Ut(t,e),t}(pn);function mn(e){var t;nn.useDeprecatedSynchronousErrorHandling?(t=e,nn.useDeprecatedSynchronousErrorHandling&&ln&&(ln.errorThrown=!0,ln.error=t)):function(e){rn.setTimeout((function(){var t=nn.onUnhandledError;if(!t)throw e;t(e)}))}(e)}function gn(e,t){var n=nn.onStoppedNotification;n&&rn.setTimeout((function(){return n(e,t)}))}var yn={closed:!0,next:on,error:function(e){throw e},complete:on},vn="function"==typeof Symbol&&Symbol.observable||"@@observable";function An(e){return e}function bn(e){return 0===e.length?An:1===e.length?e[0]:function(t){return e.reduce((function(e,t){return t(e)}),t)}}var Cn=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var r,i=this,o=(r=e)&&r instanceof pn||function(e){return e&&Gt(e.next)&&Gt(e.error)&&Gt(e.complete)}(r)&&en(r)?e:new fn(e,t,n);return cn((function(){var e=i,t=e.operator,n=e.source;o.add(t?t.call(o,n):n?i._subscribe(o):i._trySubscribe(o))})),o},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=xn(t))((function(t,r){var i=new fn({next:function(t){try{e(t)}catch(e){r(e),i.unsubscribe()}},error:r,complete:t});n.subscribe(i)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[vn]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return bn(e)(this)},e.prototype.toPromise=function(e){var t=this;return new(e=xn(e))((function(e,n){var r;t.subscribe((function(e){return r=e}),(function(e){return n(e)}),(function(){return e(r)}))}))},e.create=function(t){return new e(t)},e}();function xn(e){var t;return null!==(t=null!=e?e:nn.Promise)&&void 0!==t?t:Promise}var wn=Wt((function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),kn=function(e){function t(){var t=e.call(this)||this;return t.closed=!1,t.currentObservers=null,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return Ut(t,e),t.prototype.lift=function(e){var t=new En(this,this);return t.operator=e,t},t.prototype._throwIfClosed=function(){if(this.closed)throw new wn},t.prototype.next=function(e){var t=this;cn((function(){var n,r;if(t._throwIfClosed(),!t.isStopped){t.currentObservers||(t.currentObservers=Array.from(t.observers));try{for(var i=Zt(t.currentObservers),o=i.next();!o.done;o=i.next()){o.value.next(e)}}catch(e){n={error:e}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}}}))},t.prototype.error=function(e){var t=this;cn((function(){if(t._throwIfClosed(),!t.isStopped){t.hasError=t.isStopped=!0,t.thrownError=e;for(var n=t.observers;n.length;)n.shift().error(e)}}))},t.prototype.complete=function(){var e=this;cn((function(){if(e._throwIfClosed(),!e.isStopped){e.isStopped=!0;for(var t=e.observers;t.length;)t.shift().complete()}}))},t.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(t.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),t.prototype._trySubscribe=function(t){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},t.prototype._innerSubscribe=function(e){var t=this,n=this,r=n.hasError,i=n.isStopped,o=n.observers;return r||i?Qt:(this.currentObservers=null,o.push(e),new Xt((function(){t.currentObservers=null,Yt(o,e)})))},t.prototype._checkFinalizedStatuses=function(e){var t=this,n=t.hasError,r=t.thrownError,i=t.isStopped;n?e.error(r):i&&e.complete()},t.prototype.asObservable=function(){var e=new Cn;return e.source=this,e},t.create=function(e,t){return new En(e,t)},t}(Cn),En=function(e){function t(t,n){var r=e.call(this)||this;return r.destination=t,r.source=n,r}return Ut(t,e),t.prototype.next=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.next)||void 0===n||n.call(t,e)},t.prototype.error=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.error)||void 0===n||n.call(t,e)},t.prototype.complete=function(){var e,t;null===(t=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===t||t.call(e)},t.prototype._subscribe=function(e){var t,n;return null!==(n=null===(t=this.source)||void 0===t?void 0:t.subscribe(e))&&void 0!==n?n:Qt},t}(kn);class Sn{constructor(){this.triggerImportModuleSelected=e=>{this.importModuleSelectedSubject.next({importModule:e})},this.triggerImportCompleted=e=>{this.importCompleteSubject.next({content:e})},this.triggerCanceled=()=>{this.cancelSubject.next()},this.triggerError=(e,t)=>{console.error("Error:",e,t),this.errorSubject.next({message:e,error:t})},this.importModuleSelectedSubject=new kn,this.importCompleteSubject=new kn,this.cancelSubject=new kn,this.errorSubject=new kn}static getInstance(){return this._eventService||(this._eventService=new Sn),this._eventService}static resetInstance(){return this._eventService=null,this.getInstance()}static{this.fireExternal=(e,t,n)=>{const r={bubbles:!0,cancelable:!1,composed:!0,...n},i=new CustomEvent(t,r);return e.dispatchEvent(i),i}}}var _n=function(e,t,n,r){var i,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,n,s):i(t,n))||s);return o>3&&s&&Object.defineProperty(t,n,s),s};let $n=class extends(d(r.oi)){static get scopedElements(){return{"ne-dropdown-menu":customElements.get("ne-dropdown-menu"),"ne-dropdown-menu-item":customElements.get("ne-dropdown-menu-item"),"ne-button":customElements.get("ne-button"),"ne-label":customElements.get("ne-label")}}static get styles(){return Vt}constructor(){super(),this._setSelected=e=>{this._selected=e},this._onNextClick=()=>{this._selected&&this._eventService.triggerImportModuleSelected(this._selected)},this._onCancelClick=()=>{this._selected=null,this._eventService.triggerCanceled()},this._eventService=Sn.getInstance()}render(){return r.dy`<div class="container">
      ${this.importModules?r.dy`<ne-dropdown-menu variant="elevated">
            ${this.importModules.map((e=>r.dy`<ne-dropdown-menu-item
                  .text=${e.displayName}
                  @ne-click="${()=>this._setSelected(e)}"
                ></ne-dropdown-menu-item>`))}
          </ne-dropdown-menu>`:r.dy`<ne-label class="noimports-label"
            >No import(s) available</ne-label
          >`}
      <div id="buttons-row">
        <ne-button variant="secondary" @ne-click=${this._onCancelClick}
          >Cancel</ne-button
        >
        <ne-button
          variant="primary"
          .disabled=${!this._selected}
          @ne-click=${this._onNextClick}
          >Next</ne-button
        >
      </div>
    </div>`}};_n([s({type:Array})],$n.prototype,"importModules",void 0),_n([s()],$n.prototype,"_selected",void 0),$n=_n([i("pi-import-list")],$n);const Rn=Object.prototype.toString,Nn=Object.prototype.hasOwnProperty;function Pn(e){return void 0===e}function Mn(e){return null==e}function Bn(e){return"[object Array]"===Rn.call(e)}function On(e){return"[object Object]"===Rn.call(e)}function Dn(e){const t=Rn.call(e);return"[object Function]"===t||"[object AsyncFunction]"===t||"[object GeneratorFunction]"===t||"[object AsyncGeneratorFunction]"===t||"[object Proxy]"===t}function Ln(e){return"[object String]"===Rn.call(e)}function Fn(e,t){return Nn.call(e,t)}function Tn(e,t){const n=jn(t);let r;return zn(e,(function(e,t){if(n(e,t))return r=e,!1})),r}function In(e,t){const n=jn(t);let r=[];return zn(e,(function(e,t){n(e,t)&&r.push(e)})),r}function zn(e,t){let n,r;if(Pn(e))return;const i=Bn(e)?Hn:Vn;for(let o in e)if(Fn(e,o)&&(n=e[o],r=t(n,i(o)),!1===r))return n}function jn(e){return Dn(e)?e:t=>t===e}function Vn(e){return e}function Hn(e){return Number(e)}function Un(e,t){return e.bind(t)}function Zn(e,...t){return Object.assign(e,...t)}function qn(){}function Kn(e,t){this.model=e,this.properties=t}qn.prototype.get=function(e){return this.$model.properties.get(this,e)},qn.prototype.set=function(e,t){this.$model.properties.set(this,e,t)},Kn.prototype.createType=function(e){var t=this.model,n=this.properties,r=Object.create(qn.prototype);zn(e.properties,(function(e){e.isMany||void 0===e.default||(r[e.name]=e.default)})),n.defineModel(r,t),n.defineDescriptor(r,e);var i=e.ns.name;function o(e){n.define(this,"$type",{value:i,enumerable:!0}),n.define(this,"$attrs",{value:{}}),n.define(this,"$parent",{writable:!0}),zn(e,Un((function(e,t){this.set(t,e)}),this))}return o.prototype=r,o.hasType=r.$instanceOf=this.model.hasType,n.defineModel(o,t),n.defineDescriptor(o,e),o};var Gn={String:!0,Boolean:!0,Integer:!0,Real:!0,Element:!0},Wn={String:function(e){return e},Boolean:function(e){return"true"===e},Integer:function(e){return parseInt(e,10)},Real:function(e){return parseFloat(e)}};function Jn(e,t){var n=Wn[e];return n?n(t):t}function Yn(e){return!!Gn[e]}function Xn(e){return!!Wn[e]}function Qn(e,t){var n,r,i=e.split(/:/);if(1===i.length)n=e,r=t;else{if(2!==i.length)throw new Error("expected <prefix:localName> or <localName>, got "+e);n=i[1],r=i[0]}return{name:e=(r?r+":":"")+n,prefix:r,localName:n}}function er(e){this.ns=e,this.name=e.name,this.allTypes=[],this.allTypesByName={},this.properties=[],this.propertiesByName={}}function tr(e,t){this.packageMap={},this.typeMap={},this.packages=[],this.properties=t,zn(e,Un(this.registerPackage,this))}function nr(e,t,n){var r=t[n];if(r in e)throw new Error("package with "+n+" <"+r+"> already defined")}function rr(e){this.model=e}function ir(e,t,n){Object.defineProperty(e,t.name,{enumerable:!t.isReference,writable:!0,value:n,configurable:!0})}function or(e){return e.replace(/^:/,"")}function sr(e,t={}){this.properties=new rr(this),this.factory=new Kn(this,this.properties),this.registry=new tr(e,this.properties),this.typeCache={},this.config=t}er.prototype.build=function(){return function(e,t){let n={},r=Object(e);return zn(t,(function(t){t in r&&(n[t]=e[t])})),n}(this,["ns","name","allTypes","allTypesByName","properties","propertiesByName","bodyProperty","idProperty"])},er.prototype.addProperty=function(e,t,n){"boolean"==typeof t&&(n=t,t=void 0),this.addNamedProperty(e,!1!==n);var r=this.properties;void 0!==t?r.splice(t,0,e):r.push(e)},er.prototype.replaceProperty=function(e,t,n){var r=e.ns,i=this.properties,o=this.propertiesByName,s=e.name!==t.name;if(e.isId){if(!t.isId)throw new Error("property <"+t.ns.name+"> must be id property to refine <"+e.ns.name+">");this.setIdProperty(t,!1)}if(e.isBody){if(!t.isBody)throw new Error("property <"+t.ns.name+"> must be body property to refine <"+e.ns.name+">");this.setBodyProperty(t,!1)}var a=i.indexOf(e);if(-1===a)throw new Error("property <"+r.name+"> not found in property list");i.splice(a,1),this.addProperty(t,n?void 0:a,s),o[r.name]=o[r.localName]=t},er.prototype.redefineProperty=function(e,t,n){var r=e.ns.prefix,i=t.split("#"),o=Qn(i[0],r),s=Qn(i[1],o.prefix).name,a=this.propertiesByName[s];if(!a)throw new Error("refined property <"+s+"> not found");this.replaceProperty(a,e,n),delete e.redefines},er.prototype.addNamedProperty=function(e,t){var n=e.ns,r=this.propertiesByName;t&&(this.assertNotDefined(e,n.name),this.assertNotDefined(e,n.localName)),r[n.name]=r[n.localName]=e},er.prototype.removeNamedProperty=function(e){var t=e.ns,n=this.propertiesByName;delete n[t.name],delete n[t.localName]},er.prototype.setBodyProperty=function(e,t){if(t&&this.bodyProperty)throw new Error("body property defined multiple times (<"+this.bodyProperty.ns.name+">, <"+e.ns.name+">)");this.bodyProperty=e},er.prototype.setIdProperty=function(e,t){if(t&&this.idProperty)throw new Error("id property defined multiple times (<"+this.idProperty.ns.name+">, <"+e.ns.name+">)");this.idProperty=e},er.prototype.assertNotTrait=function(e){if((e.extends||[]).length)throw new Error(`cannot create <${e.name}> extending <${e.extends}>`)},er.prototype.assertNotDefined=function(e,t){var n=e.name,r=this.propertiesByName[n];if(r)throw new Error("property <"+n+"> already defined; override of <"+r.definedBy.ns.name+"#"+r.ns.name+"> by <"+e.definedBy.ns.name+"#"+e.ns.name+"> not allowed without redefines")},er.prototype.hasProperty=function(e){return this.propertiesByName[e]},er.prototype.addTrait=function(e,t){t&&this.assertNotTrait(e);var n=this.allTypesByName,r=this.allTypes,i=e.name;i in n||(zn(e.properties,Un((function(n){n=Zn({},n,{name:n.ns.localName,inherited:t}),Object.defineProperty(n,"definedBy",{value:e});var r=n.replaces,i=n.redefines;r||i?this.redefineProperty(n,r||i,r):(n.isBody&&this.setBodyProperty(n),n.isId&&this.setIdProperty(n),this.addProperty(n))}),this)),r.push(e),n[i]=e)},tr.prototype.getPackage=function(e){return this.packageMap[e]},tr.prototype.getPackages=function(){return this.packages},tr.prototype.registerPackage=function(e){e=Zn({},e);var t=this.packageMap;nr(t,e,"prefix"),nr(t,e,"uri"),zn(e.types,Un((function(t){this.registerType(t,e)}),this)),t[e.uri]=t[e.prefix]=e,this.packages.push(e)},tr.prototype.registerType=function(e,t){var n=Qn((e=Zn({},e,{superClass:(e.superClass||[]).slice(),extends:(e.extends||[]).slice(),properties:(e.properties||[]).slice(),meta:Zn(e.meta||{})})).name,t.prefix),r=n.name,i={};zn(e.properties,Un((function(e){var t=Qn(e.name,n.prefix),r=t.name;Yn(e.type)||(e.type=Qn(e.type,t.prefix).name),Zn(e,{ns:t,name:r}),i[r]=e}),this)),Zn(e,{ns:n,name:r,propertiesByName:i}),zn(e.extends,Un((function(e){var t=Qn(e,n.prefix),i=this.typeMap[t.name];i.traits=i.traits||[],i.traits.push(r)}),this)),this.definePackage(e,t),this.typeMap[r]=e},tr.prototype.mapTypes=function(e,t,n){var r=Yn(e.name)?{name:e.name}:this.typeMap[e.name],i=this;function o(n,r){var o=Qn(n,Yn(n)?"":e.prefix);i.mapTypes(o,t,r)}function s(e){return o(e,!0)}if(!r)throw new Error("unknown type <"+e.name+">");zn(r.superClass,n?s:function(e){return o(e,!1)}),t(r,!n),zn(r.traits,s)},tr.prototype.getEffectiveDescriptor=function(e){var t=Qn(e),n=new er(t);this.mapTypes(t,(function(e,t){n.addTrait(e,t)}));var r=n.build();return this.definePackage(r,r.allTypes[r.allTypes.length-1].$pkg),r},tr.prototype.definePackage=function(e,t){this.properties.define(e,"$pkg",{value:t})},rr.prototype.set=function(e,t,n){if(!Ln(t)||!t.length)throw new TypeError("property name must be a non-empty string");var r=this.getProperty(e,t),i=r&&r.name;void 0===n?r?delete e[i]:delete e.$attrs[or(t)]:r?i in e?e[i]=n:ir(e,r,n):e.$attrs[or(t)]=n},rr.prototype.get=function(e,t){var n=this.getProperty(e,t);if(!n)return e.$attrs[or(t)];var r=n.name;return!e[r]&&n.isMany&&ir(e,n,[]),e[r]},rr.prototype.define=function(e,t,n){if(!n.writable){var r=n.value;delete(n=Zn({},n,{get:function(){return r}})).value}Object.defineProperty(e,t,n)},rr.prototype.defineDescriptor=function(e,t){this.define(e,"$descriptor",{value:t})},rr.prototype.defineModel=function(e,t){this.define(e,"$model",{value:t})},rr.prototype.getProperty=function(e,t){var n=this.model,r=n.getPropertyDescriptor(e,t);if(r)return r;if(t.includes(":"))return null;const i=n.config.strict;if(void 0!==i){const n=new TypeError(`unknown property <${t}> on <${e.$type}>`);if(i)throw n;"undefined"!=typeof console&&console.warn(n)}return null},sr.prototype.create=function(e,t){var n=this.getType(e);if(!n)throw new Error("unknown type <"+e+">");return new n(t)},sr.prototype.getType=function(e){var t=this.typeCache,n=Ln(e)?e:e.ns.name,r=t[n];return r||(e=this.registry.getEffectiveDescriptor(n),r=t[n]=this.factory.createType(e)),r},sr.prototype.createAny=function(e,t,n){var r=Qn(e),i={$type:e,$instanceOf:function(e){return e===this.$type},get:function(e){return this[e]},set:function(e,t){!function(e,t,n){let r=e;zn(t,(function(e,i){if("number"!=typeof e&&"string"!=typeof e)throw new Error("illegal key type: "+typeof e+". Key should be of type number or string.");if("constructor"===e)throw new Error("illegal key: constructor");if("__proto__"===e)throw new Error("illegal key: __proto__");let o=t[i+1],s=r[e];void 0!==o&&Mn(s)&&(s=r[e]=isNaN(+o)?{}:[]),Pn(o)?Pn(n)?delete r[e]:r[e]=n:r=s}))}(this,[e],t)}},o={name:e,isGeneric:!0,ns:{prefix:r.prefix,localName:r.localName,uri:t}};return this.properties.defineDescriptor(i,o),this.properties.defineModel(i,this),this.properties.define(i,"get",{enumerable:!1,writable:!0}),this.properties.define(i,"set",{enumerable:!1,writable:!0}),this.properties.define(i,"$parent",{enumerable:!1,writable:!0}),this.properties.define(i,"$instanceOf",{enumerable:!1,writable:!0}),zn(n,(function(e,t){On(e)&&void 0!==e.value?i[e.name]=e.value:i[t]=e})),i},sr.prototype.getPackage=function(e){return this.registry.getPackage(e)},sr.prototype.getPackages=function(){return this.registry.getPackages()},sr.prototype.getElementDescriptor=function(e){return e.$descriptor},sr.prototype.hasType=function(e,t){return void 0===t&&(t=e,e=this),t in e.$model.getElementDescriptor(e).allTypesByName},sr.prototype.getPropertyDescriptor=function(e,t){return this.getElementDescriptor(e).propertiesByName[t]},sr.prototype.getTypeDescriptor=function(e){return this.registry.typeMap[e]};var ar=String.fromCharCode,lr=Object.prototype.hasOwnProperty,cr=/&#(\d+);|&#x([0-9a-f]+);|&(\w+);/gi,pr={amp:"&",apos:"'",gt:">",lt:"<",quot:'"'};function ur(e,t,n,r){return r?lr.call(pr,r)?pr[r]:"&"+r+";":ar(t||parseInt(n,16))}function dr(e){return e.length>3&&-1!==e.indexOf("&")?e.replace(cr,ur):e}Object.keys(pr).forEach((function(e){pr[e.toUpperCase()]=pr[e]}));var hr="xsi:type",fr="non-whitespace outside of root node";function mr(e){return new Error(e)}function gr(e){return"missing namespace for prefix <"+e+">"}function yr(e){return{get:e,enumerable:!0}}function vr(e){var t,n={};for(t in e)n[t]=e[t];return n}function Ar(e){return e+"$uri"}function br(){return{line:0,column:0}}function Cr(e){throw e}function xr(e){if(!this)return new xr(e);var t,n,r,i,o,s,a,l,c,p=e&&e.proxy,u=Cr,d=br,h=!1,f=!1,m=null,g=!1;function y(e){e instanceof Error||(e=mr(e)),m=e,u(e,d)}function v(e){o&&(e instanceof Error||(e=mr(e)),o(e,d))}this.on=function(e,c){if("function"!=typeof c)throw mr("required args <name, cb>");switch(e){case"openTag":n=c;break;case"text":t=c;break;case"closeTag":r=c;break;case"error":u=c;break;case"warn":o=c;break;case"cdata":i=c;break;case"attention":l=c;break;case"question":a=c;break;case"comment":s=c;break;default:throw mr("unsupported event: "+e)}return this},this.ns=function(e){if(void 0===e&&(e={}),"object"!=typeof e)throw mr("required args <nsMap={}>");var t,n={};for(t in e)n[t]=e[t];return n["http://www.w3.org/2001/XMLSchema-instance"]="xsi",f=!0,c=n,this},this.parse=function(e){if("string"!=typeof e)throw mr("required args <xml=string>");return m=null,function(e){var o,u,m,A,b,C,x,w,k,E,S,_=f?[]:null,$=f?function(e){var t,n,r={};for(t in e)r[n=e[t]]=n,r[Ar(n)]=t;return r}(c):null,R=[],N=0,P=!1,M=!1,B=0,O=0,D="",L=0;function F(){if(null!==S)return S;var e,t,n,r,i,o,s,a,l,p,u,d=f&&$.xmlns,m=f&&h?[]:null,g=L,y=D,A=y.length,b={},C={};e:for(;g<A;g++)if(l=!1,!(32===(p=y.charCodeAt(g))||p<14&&p>8)){for((p<65||p>122||p>90&&p<97)&&95!==p&&58!==p&&(v("illegal first char attribute name"),l=!0),u=g+1;u<A;u++)if(!((p=y.charCodeAt(u))>96&&p<123||p>64&&p<91||p>47&&p<59||46===p||45===p||95===p)){if(32===p||p<14&&p>8){v("missing attribute value"),g=u;continue e}if(61===p)break;v("illegal attribute name char"),l=!0}if("xmlns:xmlns"===(a=y.substring(g,u))&&(v("illegal declaration of xmlns"),l=!0),34===(p=y.charCodeAt(u+1)))-1===(u=y.indexOf('"',g=u+2))&&-1!==(u=y.indexOf("'",g))&&(v("attribute value quote missmatch"),l=!0);else if(39===p)-1===(u=y.indexOf("'",g=u+2))&&-1!==(u=y.indexOf('"',g))&&(v("attribute value quote missmatch"),l=!0);else for(v("missing attribute value quotes"),l=!0,u+=1;u<A&&!(32===(p=y.charCodeAt(u+1))||p<14&&p>8);u++);for(-1===u&&(v("missing closing quotes"),u=A,l=!0),l||(o=y.substring(g,u)),g=u;u+1<A&&!(32===(p=y.charCodeAt(u+1))||p<14&&p>8);u++)g===u&&(v("illegal character after attribute end"),l=!0);if(g=u+1,!l)if(a in C)v("attribute <"+a+"> already defined");else if(C[a]=!0,f)if(h){if(null!==(i="xmlns"===a?"xmlns":120===a.charCodeAt(0)&&"xmlns:"===a.substr(0,6)?a.substr(6):null)){if(e=dr(o),t=Ar(i),!(s=c[e])){if("xmlns"===i||t in $&&$[t]!==e)do{s="ns"+N++}while(void 0!==$[s]);else s=i;c[e]=s}$[i]!==s&&(r||($=vr($),r=!0),$[i]=s,"xmlns"===i&&($[Ar(s)]=e,d=s),$[t]=e),b[a]=o;continue}m.push(a,o)}else-1!==(p=a.indexOf(":"))?(n=$[a.substring(0,p)])?((a=d===n?a.substr(p+1):n+a.substr(p))===hr&&(-1!==(p=o.indexOf(":"))?(n=o.substring(0,p),o=(n=$[n]||n)+o.substring(p)):o=d+":"+o),b[a]=o):v(gr(a.substring(0,p))):b[a]=o;else b[a]=o}if(h)for(g=0,A=m.length;g<A;g++){if(a=m[g++],o=m[g],-1!==(p=a.indexOf(":"))){if(!(n=$[a.substring(0,p)])){v(gr(a.substring(0,p)));continue}(a=d===n?a.substr(p+1):n+a.substr(p))===hr&&(-1!==(p=o.indexOf(":"))?(n=o.substring(0,p),o=(n=$[n]||n)+o.substring(p)):o=d+":"+o)}b[a]=o}return S=b}function T(){for(var t,n,r=/(\r\n|\r|\n)/g,i=0,o=0,s=0,a=O;B>=s&&(t=r.exec(e))&&!((a=t[0].length+t.index)>B);)i+=1,s=a;return-1==B?(o=a,n=e.substring(O)):0===O?n=e.substring(O,B):(o=B-s,n=-1==O?e.substring(B):e.substring(B,O+1)),{data:n,line:i,column:o}}d=T,p&&(E=Object.create({},{name:yr((function(){return w})),originalName:yr((function(){return k})),attrs:yr(F),ns:yr((function(){return $}))}));for(;-1!==O;){if(-1===(B=60===e.charCodeAt(O)?O:e.indexOf("<",O)))return R.length?y("unexpected end of file"):0===O?y("missing start tag"):void(O<e.length&&e.substring(O).trim()&&v(fr));if(O!==B)if(R.length){if(t&&(t(e.substring(O,B),dr,d),g))return}else if(e.substring(O,B).trim()&&(v(fr),g))return;if(33===(b=e.charCodeAt(B+1))){if(91===(A=e.charCodeAt(B+2))&&"CDATA["===e.substr(B+3,6)){if(-1===(O=e.indexOf("]]>",B)))return y("unclosed cdata");if(i&&(i(e.substring(B+9,O),d),g))return;O+=3;continue}if(45===A&&45===e.charCodeAt(B+3)){if(-1===(O=e.indexOf("--\x3e",B)))return y("unclosed comment");if(s&&(s(e.substring(B+4,O),dr,d),g))return;O+=3;continue}}if(63!==b){for(u=B+1;;u++){if(C=e.charCodeAt(u),isNaN(C))return O=-1,y("unclosed tag");if(34===C)u=-1!==(A=e.indexOf('"',u+1))?A:u;else if(39===C)u=-1!==(A=e.indexOf("'",u+1))?A:u;else if(62===C){O=u;break}}if(33!==b){if(S={},47===b){if(P=!1,M=!0,!R.length)return y("missing open tag");if(u=w=R.pop(),A=B+2+u.length,e.substring(B+2,A)!==u)return y("closing tag mismatch");for(;A<O;A++)if(!(32===(b=e.charCodeAt(A))||b>8&&b<14))return y("close tag")}else{if(47===e.charCodeAt(O-1)?(u=w=e.substring(B+1,O-1),P=!0,M=!0):(u=w=e.substring(B+1,O),P=!0,M=!1),!(b>96&&b<123||b>64&&b<91||95===b||58===b))return y("illegal first char nodeName");for(A=1,m=u.length;A<m;A++)if(!((b=u.charCodeAt(A))>96&&b<123||b>64&&b<91||b>47&&b<59||45===b||95===b||46==b)){if(32===b||b<14&&b>8){w=u.substring(0,A),S=null;break}return y("invalid nodeName")}M||R.push(w)}if(f){if(o=$,P&&(M||_.push(o),null===S&&(h=-1!==u.indexOf("xmlns",A))&&(L=A,D=u,F(),h=!1)),k=w,-1!==(b=w.indexOf(":"))){if(!(x=$[w.substring(0,b)]))return y("missing namespace on <"+k+">");w=w.substr(b+1)}else x=$.xmlns;x&&(w=x+":"+w)}if(P&&(L=A,D=u,n&&(p?n(E,dr,M,d):n(w,F,dr,M,d),g)))return;if(M){if(r&&(r(p?E:w,dr,P,d),g))return;f&&($=P?o:_.pop())}O+=1}else{if(l&&(l(e.substring(B,O+1),dr,d),g))return;O+=1}}else{if(-1===(O=e.indexOf("?>",B)))return y("unclosed question");if(a&&(a(e.substring(B,O+2),d),g))return;O+=2}}}(e),d=br,g=!1,m},this.stop=function(){g=!0}}function wr(e){return e.xml&&"lowerCase"===e.xml.tagAlias}var kr={xsi:"http://www.w3.org/2001/XMLSchema-instance",xml:"http://www.w3.org/XML/1998/namespace"},Er="xsi:type";function Sr(e){return e.xml&&e.xml.serialize}function _r(e){return Sr(e)===Er}function $r(e,t){return wr(t)?e.prefix+":"+((n=e.localName).charAt(0).toUpperCase()+n.slice(1)):e.name;var n}function Rr(e){return new Error(e)}function Nr(e){return e.$descriptor}function Pr(e){Zn(this,e),this.elementsById={},this.references=[],this.warnings=[],this.addReference=function(e){this.references.push(e)},this.addElement=function(e){if(!e)throw Rr("expected element");var t,n=this.elementsById,r=Nr(e).idProperty;if(r&&(t=e.get(r.name))){if(!/^([a-z][\w-.]*:)?[a-z_][\w-.]*$/i.test(t))throw new Error("illegal ID <"+t+">");if(n[t])throw Rr("duplicate ID <"+t+">");n[t]=e}},this.addWarning=function(e){this.warnings.push(e)}}function Mr(){}function Br(){}function Or(){}function Dr(e,t){this.property=e,this.context=t}function Lr(e,t){this.element=t,this.propertyDesc=e}function Fr(){}function Tr(e,t,n){this.model=e,this.type=e.getType(t),this.context=n}function Ir(e,t,n){Tr.call(this,e,t,n)}function zr(e,t,n){this.model=e,this.context=n}function jr(e){e instanceof sr&&(e={model:e}),Zn(this,{lax:!1},e)}Mr.prototype.handleEnd=function(){},Mr.prototype.handleText=function(){},Mr.prototype.handleNode=function(){},Br.prototype=Object.create(Mr.prototype),Br.prototype.handleNode=function(){return this},Or.prototype=Object.create(Mr.prototype),Or.prototype.handleText=function(e){this.body=(this.body||"")+e},Dr.prototype=Object.create(Or.prototype),Dr.prototype.handleNode=function(e){if(this.element)throw Rr("expected no sub nodes");return this.element=this.createReference(e),this},Dr.prototype.handleEnd=function(){this.element.id=this.body},Dr.prototype.createReference=function(e){return{property:this.property.ns.name,id:""}},Lr.prototype=Object.create(Or.prototype),Lr.prototype.handleEnd=function(){var e=this.body||"",t=this.element,n=this.propertyDesc;e=Jn(n.type,e),n.isMany?t.get(n.name).push(e):t.set(n.name,e)},Fr.prototype=Object.create(Or.prototype),Fr.prototype.handleNode=function(e){var t=this,n=this.element;return n?t=this.handleChild(e):(n=this.element=this.createElement(e),this.context.addElement(n)),t},Tr.prototype=Object.create(Fr.prototype),Tr.prototype.addReference=function(e){this.context.addReference(e)},Tr.prototype.handleText=function(e){if(!Nr(this.element).bodyProperty)throw Rr("unexpected body text <"+e+">");Or.prototype.handleText.call(this,e)},Tr.prototype.handleEnd=function(){var e=this.body,t=this.element,n=Nr(t).bodyProperty;n&&void 0!==e&&(e=Jn(n.type,e),t.set(n.name,e))},Tr.prototype.createElement=function(e){var t,n=e.attributes,r=this.type,i=Nr(r),o=this.context,s=new r({}),a=this.model;return zn(n,(function(e,n){var r=i.propertiesByName[n];r&&r.isReference?r.isMany?zn(e.split(" "),(function(e){o.addReference({element:s,property:r.ns.name,id:e})})):o.addReference({element:s,property:r.ns.name,id:e}):(r?e=Jn(r.type,e):"xmlns"!==n&&(t=Qn(n,i.ns.prefix),a.getPackage(t.prefix)&&o.addWarning({message:"unknown attribute <"+n+">",element:s,property:n,value:e})),s.set(n,e))})),s},Tr.prototype.getPropertyForNode=function(e){var t,n,r=Qn(e.name),i=this.type,o=this.model,s=Nr(i),a=r.name,l=s.propertiesByName[a];if(l&&!l.isAttr)return _r(l)&&(t=e.attributes[Er])?(t=function(e,t){var n=Qn(e);return function(e,t){var n=e.name,r=e.localName,i=t.xml&&t.xml.typePrefix;return i&&0===r.indexOf(i)?e.prefix+":"+r.slice(i.length):n}(n,t.getPackage(n.prefix))}(t,o),Zn({},l,{effectiveType:Nr(n=o.getType(t)).name})):l;var c=o.getPackage(r.prefix);if(c){if(t=$r(r,c),n=o.getType(t),l=Tn(s.properties,(function(e){return!e.isVirtual&&!e.isReference&&!e.isAttribute&&n.hasType(e.type)})),l)return Zn({},l,{effectiveType:Nr(n).name})}else if(l=Tn(s.properties,(function(e){return!e.isReference&&!e.isAttribute&&"Element"===e.type})),l)return l;throw Rr("unrecognized element <"+r.name+">")},Tr.prototype.toString=function(){return"ElementDescriptor["+Nr(this.type).name+"]"},Tr.prototype.valueHandler=function(e,t){return new Lr(e,t)},Tr.prototype.referenceHandler=function(e){return new Dr(e,this.context)},Tr.prototype.handler=function(e){return"Element"===e?new zr(this.model,e,this.context):new Tr(this.model,e,this.context)},Tr.prototype.handleChild=function(e){var t,n,r,i;if(t=this.getPropertyForNode(e),r=this.element,Xn(n=t.effectiveType||t.type))return this.valueHandler(t,r);var o=(i=t.isReference?this.referenceHandler(t).handleNode(e):this.handler(n).handleNode(e)).element;return void 0!==o&&(t.isMany?r.get(t.name).push(o):r.set(t.name,o),t.isReference?(Zn(o,{element:r}),this.context.addReference(o)):o.$parent=r),i},Ir.prototype=Object.create(Tr.prototype),Ir.prototype.createElement=function(e){var t=e.name,n=Qn(t),r=this.model,i=this.type,o=r.getPackage(n.prefix),s=o&&$r(n,o)||t;if(!i.hasType(s))throw Rr("unexpected element <"+e.originalName+">");return Tr.prototype.createElement.call(this,e)},zr.prototype=Object.create(Fr.prototype),zr.prototype.createElement=function(e){var t=e.name,n=Qn(t).prefix,r=e.ns[n+"$uri"],i=e.attributes;return this.model.createAny(t,r,i)},zr.prototype.handleChild=function(e){var t=new zr(this.model,"Element",this.context).handleNode(e),n=this.element,r=t.element;return void 0!==r&&((n.$children=n.$children||[]).push(r),r.$parent=n),t},zr.prototype.handleEnd=function(){this.body&&(this.element.$body=this.body)},jr.prototype.fromXML=function(e,t,n){var r=t.rootHandler;t instanceof Tr?(r=t,t={}):"string"==typeof t?(r=this.handler(t),t={}):"string"==typeof r&&(r=this.handler(r));var i=this.model,o=this.lax,s=new Pr(Zn({},t,{rootHandler:r})),a=new xr({proxy:!0}),l=function(){var e=[];return Object.defineProperty(e,"peek",{value:function(){return this[this.length-1]}}),e}();function c(e,t,n){var r=t(),i=r.line,o=r.column,a=r.data;"<"===a.charAt(0)&&-1!==a.indexOf(" ")&&(a=a.slice(0,a.indexOf(" "))+">");var l="unparsable content "+(a?a+" ":"")+"detected\n\tline: "+i+"\n\tcolumn: "+o+"\n\tnested error: "+e.message;if(n)return s.addWarning({message:l,error:e}),!0;throw Rr(l)}function p(e,t){return c(e,t,!0)}r.context=s,l.push(r);var u=/^<\?xml /i,d=/ encoding="([^"]+)"/i,h=/^utf-8$/i;function f(e,t){try{l.peek().handleText(e)}catch(e){p(e,t)}}var m=i.getPackages().reduce((function(e,t){return e[t.uri]=t.prefix,e}),{"http://www.w3.org/XML/1998/namespace":"xml"});return a.ns(m).on("openTag",(function(e,t,n,r){var i=e.attrs||{},s=Object.keys(i).reduce((function(e,n){var r=t(i[n]);return e[n]=r,e}),{});!function(e,t){var n=l.peek();try{l.push(n.handleNode(e))}catch(e){c(e,t,o)&&l.push(new Br)}}({name:e.name,originalName:e.originalName,attributes:s,ns:e.ns},r)})).on("question",(function(e){if(u.test(e)){var t=d.exec(e),n=t&&t[1];n&&!h.test(n)&&s.addWarning({message:"unsupported document encoding <"+n+">, falling back to UTF-8"})}})).on("closeTag",(function(){l.pop().handleEnd()})).on("cdata",f).on("text",(function(e,t,n){!function(e,t){e.trim()&&f(e,t)}(t(e),n)})).on("error",c).on("warn",p),new Promise((function(t,n){var i;try{a.parse(e),function(){var e,t,n=s.elementsById,r=s.references;for(e=0;t=r[e];e++){var i=t.element,o=n[t.id],a=Nr(i).propertiesByName[t.property];if(o||s.addWarning({message:"unresolved reference <"+t.id+">",element:t.element,property:t.property,value:t.id}),a.isMany){var l=i.get(a.name),c=l.indexOf(t);-1===c&&(c=l.length),o?l[c]=o:l.splice(c,1)}else i.set(a.name,o)}}()}catch(e){i=e}var o=r.element;i||o||(i=Rr("failed to parse document as <"+r.type.$descriptor.name+">"));var l=s.warnings,c=s.references,p=s.elementsById;return i?(i.warnings=l,n(i)):t({rootElement:o,elementsById:p,references:c,warnings:l})}))},jr.prototype.handler=function(e){return new Ir(this.model,e)};var Vr=/<|>|'|"|&|\n\r|\n/g,Hr=/<|>|&/g;function Ur(e){var t={},n={},r={},i=[],o=[];this.byUri=function(t){return n[t]||e&&e.byUri(t)},this.add=function(e,t){n[e.uri]=e,t?i.push(e):o.push(e),this.mapPrefix(e.prefix,e.uri)},this.uriByPrefix=function(e){return t[e||"xmlns"]},this.mapPrefix=function(e,n){t[e||"xmlns"]=n},this.getNSKey=function(e){return void 0!==e.prefix?e.uri+"|"+e.prefix:e.uri},this.logUsed=function(t){var n=t.uri,i=this.getNSKey(t);r[i]=this.byUri(n),e&&e.logUsed(t)},this.getUsed=function(e){var t=this;return[].concat(i,o).filter((function(e){var n=t.getNSKey(e);return r[n]}))}}function Zr(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}function qr(e){return Ln(e)?e:(e.prefix?e.prefix+":":"")+e.localName}var Kr={"\n":"#10","\n\r":"#10",'"':"#34","'":"#39","<":"#60",">":"#62","&":"#38"},Gr={"<":"lt",">":"gt","&":"amp"};function Wr(e,t,n){return(e=Ln(e)?e:""+e).replace(t,(function(e){return"&"+n[e]+";"}))}function Jr(e){this.tagName=e}function Yr(){}function Xr(e){this.tagName=e}function Qr(e,t){this.body=[],this.attrs=[],this.parent=e,this.propertyDescriptor=t}function ei(e,t){Qr.call(this,e,t)}function ti(){this.value="",this.write=function(e){this.value+=e}}function ni(e,t){var n=[""];this.append=function(t){return e.write(t),this},this.appendNewLine=function(){return t&&e.write("\n"),this},this.appendIndent=function(){return t&&e.write(n.join("  ")),this},this.indent=function(){return n.push(""),this},this.unindent=function(){return n.pop(),this}}function ri(e){return e=Zn({format:!1,preamble:!0},e||{}),{toXML:function(t,n){var r=n||new ti,i=new ni(r,e.format);if(e.preamble&&i.append('<?xml version="1.0" encoding="UTF-8"?>\n'),(new Qr).build(t).serializeTo(i),!n)return r.value}}}function ii(e,t){sr.call(this,e,t)}Jr.prototype.build=function(e){return this.element=e,this},Jr.prototype.serializeTo=function(e){e.appendIndent().append("<"+this.tagName+">"+this.element.id+"</"+this.tagName+">").appendNewLine()},Yr.prototype.serializeValue=Yr.prototype.serializeTo=function(e){e.append(this.escape?Wr(this.value,Hr,Gr):this.value)},Yr.prototype.build=function(e,t){return this.value=t,"String"===e.type&&-1!==t.search(Hr)&&(this.escape=!0),this},Zr(Xr,Yr),Xr.prototype.serializeTo=function(e){e.appendIndent().append("<"+this.tagName+">"),this.serializeValue(e),e.append("</"+this.tagName+">").appendNewLine()},Qr.prototype.build=function(e){this.element=e;var t,n,r=e.$descriptor,i=this.propertyDescriptor,o=r.isGeneric;return t=o?this.parseGeneric(e):this.parseNsAttributes(e),this.ns=i?this.nsPropertyTagName(i):this.nsTagName(r),this.tagName=this.addTagName(this.ns),o||(n=function(e){return In(e.$descriptor.properties,(function(t){var n=t.name;if(t.isVirtual)return!1;if(!Fn(e,n))return!1;var r=e[n];return r!==t.default&&null!==r&&(!t.isMany||r.length)}))}(e),this.parseAttributes(In(n,(function(e){return e.isAttr}))),this.parseContainments(function(e){return In(e,(function(e){return!e.isAttr}))}(n))),this.parseGenericAttributes(e,t),this},Qr.prototype.nsTagName=function(e){return function(e,t){return t.isGeneric?Zn({localName:t.ns.localName},e):Zn({localName:(n=t.ns.localName,r=t.$pkg,wr(r)?(i=n).charAt(0).toLowerCase()+i.slice(1):n)},e);var n,r,i}(this.logNamespaceUsed(e.ns),e)},Qr.prototype.nsPropertyTagName=function(e){return function(e,t){return Zn({localName:t.ns.localName},e)}(this.logNamespaceUsed(e.ns),e)},Qr.prototype.isLocalNs=function(e){return e.uri===this.ns.uri},Qr.prototype.nsAttributeName=function(e){var t;if(t=Ln(e)?Qn(e):e.ns,e.inherited)return{localName:t.localName};var n=this.logNamespaceUsed(t);return this.getNamespaces().logUsed(n),this.isLocalNs(n)?{localName:t.localName}:Zn({localName:t.localName},n)},Qr.prototype.parseGeneric=function(e){var t=this,n=this.body,r=[];return zn(e,(function(i,o){"$body"===o?n.push((new Yr).build({type:"String"},i)):"$children"===o?zn(i,(function(e){n.push(new Qr(t).build(e))})):0!==o.indexOf("$")&&t.parseNsAttribute(e,o,i)&&r.push({name:o,value:i})})),r},Qr.prototype.parseNsAttribute=function(e,t,n){var r,i=e.$model,o=Qn(t);if("xmlns"===o.prefix&&(r={prefix:o.localName,uri:n}),o.prefix||"xmlns"!==o.localName||(r={uri:n}),!r)return{name:t,value:n};if(i&&i.getPackage(n))this.logNamespace(r,!0,!0);else{var s=this.logNamespaceUsed(r,!0);this.getNamespaces().logUsed(s)}},Qr.prototype.parseNsAttributes=function(e,t){var n=this,r=e.$attrs,i=[];return zn(r,(function(t,r){var o=n.parseNsAttribute(e,r,t);o&&i.push(o)})),i},Qr.prototype.parseGenericAttributes=function(e,t){var n=this;zn(t,(function(t){if(t.name!==Er)try{n.addAttribute(n.nsAttributeName(t.name),t.value)}catch(n){console.warn("missing namespace information for ",t.name,"=",t.value,"on",e,n)}}))},Qr.prototype.parseContainments=function(e){var t=this,n=this.body,r=this.element;zn(e,(function(e){var i=r.get(e.name),o=e.isReference;if(e.isMany||(i=[i]),e.isBody)n.push((new Yr).build(e,i[0]));else if(Xn(e.type))zn(i,(function(r){n.push(new Xr(t.addTagName(t.nsPropertyTagName(e))).build(e,r))}));else if(o)zn(i,(function(r){n.push(new Jr(t.addTagName(t.nsPropertyTagName(e))).build(r))}));else{var s=_r(e),a=function(e){return"property"===Sr(e)}(e);zn(i,(function(r){var i;i=s?new ei(t,e):a?new Qr(t,e):new Qr(t),n.push(i.build(r))}))}}))},Qr.prototype.getNamespaces=function(e){var t,n=this.namespaces,r=this.parent;return n||(t=r&&r.getNamespaces(),e||!t?this.namespaces=n=new Ur(t):n=t),n},Qr.prototype.logNamespace=function(e,t,n){var r=this.getNamespaces(n),i=e.uri,o=e.prefix;return r.byUri(i)&&!n||r.add(e,t),r.mapPrefix(o,i),e},Qr.prototype.logNamespaceUsed=function(e,t){var n,r,i,o=this.element.$model,s=this.getNamespaces(t),a=e.prefix,l=e.uri;if(!a&&!l)return{localName:e.localName};if(i=kr[a]||o&&(o.getPackage(a)||{}).uri,!(l=l||i||s.uriByPrefix(a)))throw new Error("no namespace uri given for prefix <"+a+">");if(!(e=s.byUri(l))){for(n=a,r=1;s.uriByPrefix(n);)n=a+"_"+r++;e=this.logNamespace({prefix:n,uri:l},i===l)}return a&&s.mapPrefix(a,l),e},Qr.prototype.parseAttributes=function(e){var t=this,n=this.element;zn(e,(function(e){var r=n.get(e.name);if(e.isReference)if(e.isMany){var i=[];zn(r,(function(e){i.push(e.id)})),r=i.join(" ")}else r=r.id;t.addAttribute(t.nsAttributeName(e),r)}))},Qr.prototype.addTagName=function(e){var t=this.logNamespaceUsed(e);return this.getNamespaces().logUsed(t),qr(e)},Qr.prototype.addAttribute=function(e,t){var n=this.attrs;Ln(t)&&(t=Wr(t,Vr,Kr));var r=function(e,t){const n=jn(t);let r=Bn(e)?-1:void 0;return zn(e,(function(e,t){if(n(e,t))return r=t,!1})),r}(n,(function(t){return t.name.localName===e.localName&&t.name.uri===e.uri&&t.name.prefix===e.prefix})),i={name:e,value:t};-1!==r?n.splice(r,1,i):n.push(i)},Qr.prototype.serializeAttributes=function(e){var t=this.attrs,n=this.namespaces;n&&(t=function(e){return e.getUsed().filter((function(e){return"xml"!==e.prefix})).map((function(e){return{name:"xmlns"+(e.prefix?":"+e.prefix:""),value:e.uri}}))}(n).concat(t)),zn(t,(function(t){e.append(" ").append(qr(t.name)).append('="').append(t.value).append('"')}))},Qr.prototype.serializeTo=function(e){var t=this.body[0],n=t&&t.constructor!==Yr;e.appendIndent().append("<"+this.tagName),this.serializeAttributes(e),e.append(t?">":" />"),t&&(n&&e.appendNewLine().indent(),zn(this.body,(function(t){t.serializeTo(e)})),n&&e.unindent().appendIndent(),e.append("</"+this.tagName+">")),e.appendNewLine()},Zr(ei,Qr),ei.prototype.parseNsAttributes=function(e){var t=Qr.prototype.parseNsAttributes.call(this,e),n=e.$descriptor;if(n.name===this.propertyDescriptor.type)return t;var r=this.typeNs=this.nsTagName(n);this.getNamespaces().logUsed(this.typeNs);var i=e.$model.getPackage(r.uri),o=i.xml&&i.xml.typePrefix||"";return this.addAttribute(this.nsAttributeName(Er),(r.prefix?r.prefix+":":"")+o+n.ns.localName),t},ei.prototype.isLocalNs=function(e){return e.uri===(this.typeNs||this.ns).uri},ii.prototype=Object.create(sr.prototype),ii.prototype.fromXML=function(e,t,n){Ln(t)||(n=t,t="bpmn:Definitions");var r=new jr(Zn({model:this,lax:!0},n)),i=r.handler(t);return r.fromXML(e,i)},ii.prototype.toXML=function(e,t){var n=new ri(t);return new Promise((function(t,r){try{return t({xml:n.toXML(e)})}catch(e){return r(e)}}))};var oi={bpmn:{name:"BPMN20",uri:"http://www.omg.org/spec/BPMN/20100524/MODEL",prefix:"bpmn",associations:[],types:[{name:"Interface",superClass:["RootElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"operations",type:"Operation",isMany:!0},{name:"implementationRef",isAttr:!0,type:"String"}]},{name:"Operation",superClass:["BaseElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"inMessageRef",type:"Message",isReference:!0},{name:"outMessageRef",type:"Message",isReference:!0},{name:"errorRef",type:"Error",isMany:!0,isReference:!0},{name:"implementationRef",isAttr:!0,type:"String"}]},{name:"EndPoint",superClass:["RootElement"]},{name:"Auditing",superClass:["BaseElement"]},{name:"GlobalTask",superClass:["CallableElement"],properties:[{name:"resources",type:"ResourceRole",isMany:!0}]},{name:"Monitoring",superClass:["BaseElement"]},{name:"Performer",superClass:["ResourceRole"]},{name:"Process",superClass:["FlowElementsContainer","CallableElement"],properties:[{name:"processType",type:"ProcessType",isAttr:!0},{name:"isClosed",isAttr:!0,type:"Boolean"},{name:"auditing",type:"Auditing"},{name:"monitoring",type:"Monitoring"},{name:"properties",type:"Property",isMany:!0},{name:"laneSets",isMany:!0,replaces:"FlowElementsContainer#laneSets",type:"LaneSet"},{name:"flowElements",isMany:!0,replaces:"FlowElementsContainer#flowElements",type:"FlowElement"},{name:"artifacts",type:"Artifact",isMany:!0},{name:"resources",type:"ResourceRole",isMany:!0},{name:"correlationSubscriptions",type:"CorrelationSubscription",isMany:!0},{name:"supports",type:"Process",isMany:!0,isReference:!0},{name:"definitionalCollaborationRef",type:"Collaboration",isAttr:!0,isReference:!0},{name:"isExecutable",isAttr:!0,type:"Boolean"}]},{name:"LaneSet",superClass:["BaseElement"],properties:[{name:"lanes",type:"Lane",isMany:!0},{name:"name",isAttr:!0,type:"String"}]},{name:"Lane",superClass:["BaseElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"partitionElementRef",type:"BaseElement",isAttr:!0,isReference:!0},{name:"partitionElement",type:"BaseElement"},{name:"flowNodeRef",type:"FlowNode",isMany:!0,isReference:!0},{name:"childLaneSet",type:"LaneSet",xml:{serialize:"xsi:type"}}]},{name:"GlobalManualTask",superClass:["GlobalTask"]},{name:"ManualTask",superClass:["Task"]},{name:"UserTask",superClass:["Task"],properties:[{name:"renderings",type:"Rendering",isMany:!0},{name:"implementation",isAttr:!0,type:"String"}]},{name:"Rendering",superClass:["BaseElement"]},{name:"HumanPerformer",superClass:["Performer"]},{name:"PotentialOwner",superClass:["HumanPerformer"]},{name:"GlobalUserTask",superClass:["GlobalTask"],properties:[{name:"implementation",isAttr:!0,type:"String"},{name:"renderings",type:"Rendering",isMany:!0}]},{name:"Gateway",isAbstract:!0,superClass:["FlowNode"],properties:[{name:"gatewayDirection",type:"GatewayDirection",default:"Unspecified",isAttr:!0}]},{name:"EventBasedGateway",superClass:["Gateway"],properties:[{name:"instantiate",default:!1,isAttr:!0,type:"Boolean"},{name:"eventGatewayType",type:"EventBasedGatewayType",isAttr:!0,default:"Exclusive"}]},{name:"ComplexGateway",superClass:["Gateway"],properties:[{name:"activationCondition",type:"Expression",xml:{serialize:"xsi:type"}},{name:"default",type:"SequenceFlow",isAttr:!0,isReference:!0}]},{name:"ExclusiveGateway",superClass:["Gateway"],properties:[{name:"default",type:"SequenceFlow",isAttr:!0,isReference:!0}]},{name:"InclusiveGateway",superClass:["Gateway"],properties:[{name:"default",type:"SequenceFlow",isAttr:!0,isReference:!0}]},{name:"ParallelGateway",superClass:["Gateway"]},{name:"RootElement",isAbstract:!0,superClass:["BaseElement"]},{name:"Relationship",superClass:["BaseElement"],properties:[{name:"type",isAttr:!0,type:"String"},{name:"direction",type:"RelationshipDirection",isAttr:!0},{name:"source",isMany:!0,isReference:!0,type:"Element"},{name:"target",isMany:!0,isReference:!0,type:"Element"}]},{name:"BaseElement",isAbstract:!0,properties:[{name:"id",isAttr:!0,type:"String",isId:!0},{name:"documentation",type:"Documentation",isMany:!0},{name:"extensionDefinitions",type:"ExtensionDefinition",isMany:!0,isReference:!0},{name:"extensionElements",type:"ExtensionElements"}]},{name:"Extension",properties:[{name:"mustUnderstand",default:!1,isAttr:!0,type:"Boolean"},{name:"definition",type:"ExtensionDefinition",isAttr:!0,isReference:!0}]},{name:"ExtensionDefinition",properties:[{name:"name",isAttr:!0,type:"String"},{name:"extensionAttributeDefinitions",type:"ExtensionAttributeDefinition",isMany:!0}]},{name:"ExtensionAttributeDefinition",properties:[{name:"name",isAttr:!0,type:"String"},{name:"type",isAttr:!0,type:"String"},{name:"isReference",default:!1,isAttr:!0,type:"Boolean"},{name:"extensionDefinition",type:"ExtensionDefinition",isAttr:!0,isReference:!0}]},{name:"ExtensionElements",properties:[{name:"valueRef",isAttr:!0,isReference:!0,type:"Element"},{name:"values",type:"Element",isMany:!0},{name:"extensionAttributeDefinition",type:"ExtensionAttributeDefinition",isAttr:!0,isReference:!0}]},{name:"Documentation",superClass:["BaseElement"],properties:[{name:"text",type:"String",isBody:!0},{name:"textFormat",default:"text/plain",isAttr:!0,type:"String"}]},{name:"Event",isAbstract:!0,superClass:["FlowNode","InteractionNode"],properties:[{name:"properties",type:"Property",isMany:!0}]},{name:"IntermediateCatchEvent",superClass:["CatchEvent"]},{name:"IntermediateThrowEvent",superClass:["ThrowEvent"]},{name:"EndEvent",superClass:["ThrowEvent"]},{name:"StartEvent",superClass:["CatchEvent"],properties:[{name:"isInterrupting",default:!0,isAttr:!0,type:"Boolean"}]},{name:"ThrowEvent",isAbstract:!0,superClass:["Event"],properties:[{name:"dataInputs",type:"DataInput",isMany:!0},{name:"dataInputAssociations",type:"DataInputAssociation",isMany:!0},{name:"inputSet",type:"InputSet"},{name:"eventDefinitions",type:"EventDefinition",isMany:!0},{name:"eventDefinitionRef",type:"EventDefinition",isMany:!0,isReference:!0}]},{name:"CatchEvent",isAbstract:!0,superClass:["Event"],properties:[{name:"parallelMultiple",isAttr:!0,type:"Boolean",default:!1},{name:"dataOutputs",type:"DataOutput",isMany:!0},{name:"dataOutputAssociations",type:"DataOutputAssociation",isMany:!0},{name:"outputSet",type:"OutputSet"},{name:"eventDefinitions",type:"EventDefinition",isMany:!0},{name:"eventDefinitionRef",type:"EventDefinition",isMany:!0,isReference:!0}]},{name:"BoundaryEvent",superClass:["CatchEvent"],properties:[{name:"cancelActivity",default:!0,isAttr:!0,type:"Boolean"},{name:"attachedToRef",type:"Activity",isAttr:!0,isReference:!0}]},{name:"EventDefinition",isAbstract:!0,superClass:["RootElement"]},{name:"CancelEventDefinition",superClass:["EventDefinition"]},{name:"ErrorEventDefinition",superClass:["EventDefinition"],properties:[{name:"errorRef",type:"Error",isAttr:!0,isReference:!0}]},{name:"TerminateEventDefinition",superClass:["EventDefinition"]},{name:"EscalationEventDefinition",superClass:["EventDefinition"],properties:[{name:"escalationRef",type:"Escalation",isAttr:!0,isReference:!0}]},{name:"Escalation",properties:[{name:"structureRef",type:"ItemDefinition",isAttr:!0,isReference:!0},{name:"name",isAttr:!0,type:"String"},{name:"escalationCode",isAttr:!0,type:"String"}],superClass:["RootElement"]},{name:"CompensateEventDefinition",superClass:["EventDefinition"],properties:[{name:"waitForCompletion",isAttr:!0,type:"Boolean",default:!0},{name:"activityRef",type:"Activity",isAttr:!0,isReference:!0}]},{name:"TimerEventDefinition",superClass:["EventDefinition"],properties:[{name:"timeDate",type:"Expression",xml:{serialize:"xsi:type"}},{name:"timeCycle",type:"Expression",xml:{serialize:"xsi:type"}},{name:"timeDuration",type:"Expression",xml:{serialize:"xsi:type"}}]},{name:"LinkEventDefinition",superClass:["EventDefinition"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"target",type:"LinkEventDefinition",isReference:!0},{name:"source",type:"LinkEventDefinition",isMany:!0,isReference:!0}]},{name:"MessageEventDefinition",superClass:["EventDefinition"],properties:[{name:"messageRef",type:"Message",isAttr:!0,isReference:!0},{name:"operationRef",type:"Operation",isAttr:!0,isReference:!0}]},{name:"ConditionalEventDefinition",superClass:["EventDefinition"],properties:[{name:"condition",type:"Expression",xml:{serialize:"xsi:type"}}]},{name:"SignalEventDefinition",superClass:["EventDefinition"],properties:[{name:"signalRef",type:"Signal",isAttr:!0,isReference:!0}]},{name:"Signal",superClass:["RootElement"],properties:[{name:"structureRef",type:"ItemDefinition",isAttr:!0,isReference:!0},{name:"name",isAttr:!0,type:"String"}]},{name:"ImplicitThrowEvent",superClass:["ThrowEvent"]},{name:"DataState",superClass:["BaseElement"],properties:[{name:"name",isAttr:!0,type:"String"}]},{name:"ItemAwareElement",superClass:["BaseElement"],properties:[{name:"itemSubjectRef",type:"ItemDefinition",isAttr:!0,isReference:!0},{name:"dataState",type:"DataState"}]},{name:"DataAssociation",superClass:["BaseElement"],properties:[{name:"sourceRef",type:"ItemAwareElement",isMany:!0,isReference:!0},{name:"targetRef",type:"ItemAwareElement",isReference:!0},{name:"transformation",type:"FormalExpression",xml:{serialize:"property"}},{name:"assignment",type:"Assignment",isMany:!0}]},{name:"DataInput",superClass:["ItemAwareElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"isCollection",default:!1,isAttr:!0,type:"Boolean"},{name:"inputSetRef",type:"InputSet",isMany:!0,isVirtual:!0,isReference:!0},{name:"inputSetWithOptional",type:"InputSet",isMany:!0,isVirtual:!0,isReference:!0},{name:"inputSetWithWhileExecuting",type:"InputSet",isMany:!0,isVirtual:!0,isReference:!0}]},{name:"DataOutput",superClass:["ItemAwareElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"isCollection",default:!1,isAttr:!0,type:"Boolean"},{name:"outputSetRef",type:"OutputSet",isMany:!0,isVirtual:!0,isReference:!0},{name:"outputSetWithOptional",type:"OutputSet",isMany:!0,isVirtual:!0,isReference:!0},{name:"outputSetWithWhileExecuting",type:"OutputSet",isMany:!0,isVirtual:!0,isReference:!0}]},{name:"InputSet",superClass:["BaseElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"dataInputRefs",type:"DataInput",isMany:!0,isReference:!0},{name:"optionalInputRefs",type:"DataInput",isMany:!0,isReference:!0},{name:"whileExecutingInputRefs",type:"DataInput",isMany:!0,isReference:!0},{name:"outputSetRefs",type:"OutputSet",isMany:!0,isReference:!0}]},{name:"OutputSet",superClass:["BaseElement"],properties:[{name:"dataOutputRefs",type:"DataOutput",isMany:!0,isReference:!0},{name:"name",isAttr:!0,type:"String"},{name:"inputSetRefs",type:"InputSet",isMany:!0,isReference:!0},{name:"optionalOutputRefs",type:"DataOutput",isMany:!0,isReference:!0},{name:"whileExecutingOutputRefs",type:"DataOutput",isMany:!0,isReference:!0}]},{name:"Property",superClass:["ItemAwareElement"],properties:[{name:"name",isAttr:!0,type:"String"}]},{name:"DataInputAssociation",superClass:["DataAssociation"]},{name:"DataOutputAssociation",superClass:["DataAssociation"]},{name:"InputOutputSpecification",superClass:["BaseElement"],properties:[{name:"dataInputs",type:"DataInput",isMany:!0},{name:"dataOutputs",type:"DataOutput",isMany:!0},{name:"inputSets",type:"InputSet",isMany:!0},{name:"outputSets",type:"OutputSet",isMany:!0}]},{name:"DataObject",superClass:["FlowElement","ItemAwareElement"],properties:[{name:"isCollection",default:!1,isAttr:!0,type:"Boolean"}]},{name:"InputOutputBinding",properties:[{name:"inputDataRef",type:"InputSet",isAttr:!0,isReference:!0},{name:"outputDataRef",type:"OutputSet",isAttr:!0,isReference:!0},{name:"operationRef",type:"Operation",isAttr:!0,isReference:!0}]},{name:"Assignment",superClass:["BaseElement"],properties:[{name:"from",type:"Expression",xml:{serialize:"xsi:type"}},{name:"to",type:"Expression",xml:{serialize:"xsi:type"}}]},{name:"DataStore",superClass:["RootElement","ItemAwareElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"capacity",isAttr:!0,type:"Integer"},{name:"isUnlimited",default:!0,isAttr:!0,type:"Boolean"}]},{name:"DataStoreReference",superClass:["ItemAwareElement","FlowElement"],properties:[{name:"dataStoreRef",type:"DataStore",isAttr:!0,isReference:!0}]},{name:"DataObjectReference",superClass:["ItemAwareElement","FlowElement"],properties:[{name:"dataObjectRef",type:"DataObject",isAttr:!0,isReference:!0}]},{name:"ConversationLink",superClass:["BaseElement"],properties:[{name:"sourceRef",type:"InteractionNode",isAttr:!0,isReference:!0},{name:"targetRef",type:"InteractionNode",isAttr:!0,isReference:!0},{name:"name",isAttr:!0,type:"String"}]},{name:"ConversationAssociation",superClass:["BaseElement"],properties:[{name:"innerConversationNodeRef",type:"ConversationNode",isAttr:!0,isReference:!0},{name:"outerConversationNodeRef",type:"ConversationNode",isAttr:!0,isReference:!0}]},{name:"CallConversation",superClass:["ConversationNode"],properties:[{name:"calledCollaborationRef",type:"Collaboration",isAttr:!0,isReference:!0},{name:"participantAssociations",type:"ParticipantAssociation",isMany:!0}]},{name:"Conversation",superClass:["ConversationNode"]},{name:"SubConversation",superClass:["ConversationNode"],properties:[{name:"conversationNodes",type:"ConversationNode",isMany:!0}]},{name:"ConversationNode",isAbstract:!0,superClass:["InteractionNode","BaseElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"participantRef",type:"Participant",isMany:!0,isReference:!0},{name:"messageFlowRefs",type:"MessageFlow",isMany:!0,isReference:!0},{name:"correlationKeys",type:"CorrelationKey",isMany:!0}]},{name:"GlobalConversation",superClass:["Collaboration"]},{name:"PartnerEntity",superClass:["RootElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"participantRef",type:"Participant",isMany:!0,isReference:!0}]},{name:"PartnerRole",superClass:["RootElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"participantRef",type:"Participant",isMany:!0,isReference:!0}]},{name:"CorrelationProperty",superClass:["RootElement"],properties:[{name:"correlationPropertyRetrievalExpression",type:"CorrelationPropertyRetrievalExpression",isMany:!0},{name:"name",isAttr:!0,type:"String"},{name:"type",type:"ItemDefinition",isAttr:!0,isReference:!0}]},{name:"Error",superClass:["RootElement"],properties:[{name:"structureRef",type:"ItemDefinition",isAttr:!0,isReference:!0},{name:"name",isAttr:!0,type:"String"},{name:"errorCode",isAttr:!0,type:"String"}]},{name:"CorrelationKey",superClass:["BaseElement"],properties:[{name:"correlationPropertyRef",type:"CorrelationProperty",isMany:!0,isReference:!0},{name:"name",isAttr:!0,type:"String"}]},{name:"Expression",superClass:["BaseElement"],isAbstract:!1,properties:[{name:"body",isBody:!0,type:"String"}]},{name:"FormalExpression",superClass:["Expression"],properties:[{name:"language",isAttr:!0,type:"String"},{name:"evaluatesToTypeRef",type:"ItemDefinition",isAttr:!0,isReference:!0}]},{name:"Message",superClass:["RootElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"itemRef",type:"ItemDefinition",isAttr:!0,isReference:!0}]},{name:"ItemDefinition",superClass:["RootElement"],properties:[{name:"itemKind",type:"ItemKind",isAttr:!0},{name:"structureRef",isAttr:!0,type:"String"},{name:"isCollection",default:!1,isAttr:!0,type:"Boolean"},{name:"import",type:"Import",isAttr:!0,isReference:!0}]},{name:"FlowElement",isAbstract:!0,superClass:["BaseElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"auditing",type:"Auditing"},{name:"monitoring",type:"Monitoring"},{name:"categoryValueRef",type:"CategoryValue",isMany:!0,isReference:!0}]},{name:"SequenceFlow",superClass:["FlowElement"],properties:[{name:"isImmediate",isAttr:!0,type:"Boolean"},{name:"conditionExpression",type:"Expression",xml:{serialize:"xsi:type"}},{name:"sourceRef",type:"FlowNode",isAttr:!0,isReference:!0},{name:"targetRef",type:"FlowNode",isAttr:!0,isReference:!0}]},{name:"FlowElementsContainer",isAbstract:!0,superClass:["BaseElement"],properties:[{name:"laneSets",type:"LaneSet",isMany:!0},{name:"flowElements",type:"FlowElement",isMany:!0}]},{name:"CallableElement",isAbstract:!0,superClass:["RootElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"ioSpecification",type:"InputOutputSpecification",xml:{serialize:"property"}},{name:"supportedInterfaceRef",type:"Interface",isMany:!0,isReference:!0},{name:"ioBinding",type:"InputOutputBinding",isMany:!0,xml:{serialize:"property"}}]},{name:"FlowNode",isAbstract:!0,superClass:["FlowElement"],properties:[{name:"incoming",type:"SequenceFlow",isMany:!0,isReference:!0},{name:"outgoing",type:"SequenceFlow",isMany:!0,isReference:!0},{name:"lanes",type:"Lane",isMany:!0,isVirtual:!0,isReference:!0}]},{name:"CorrelationPropertyRetrievalExpression",superClass:["BaseElement"],properties:[{name:"messagePath",type:"FormalExpression"},{name:"messageRef",type:"Message",isAttr:!0,isReference:!0}]},{name:"CorrelationPropertyBinding",superClass:["BaseElement"],properties:[{name:"dataPath",type:"FormalExpression"},{name:"correlationPropertyRef",type:"CorrelationProperty",isAttr:!0,isReference:!0}]},{name:"Resource",superClass:["RootElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"resourceParameters",type:"ResourceParameter",isMany:!0}]},{name:"ResourceParameter",superClass:["BaseElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"isRequired",isAttr:!0,type:"Boolean"},{name:"type",type:"ItemDefinition",isAttr:!0,isReference:!0}]},{name:"CorrelationSubscription",superClass:["BaseElement"],properties:[{name:"correlationKeyRef",type:"CorrelationKey",isAttr:!0,isReference:!0},{name:"correlationPropertyBinding",type:"CorrelationPropertyBinding",isMany:!0}]},{name:"MessageFlow",superClass:["BaseElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"sourceRef",type:"InteractionNode",isAttr:!0,isReference:!0},{name:"targetRef",type:"InteractionNode",isAttr:!0,isReference:!0},{name:"messageRef",type:"Message",isAttr:!0,isReference:!0}]},{name:"MessageFlowAssociation",superClass:["BaseElement"],properties:[{name:"innerMessageFlowRef",type:"MessageFlow",isAttr:!0,isReference:!0},{name:"outerMessageFlowRef",type:"MessageFlow",isAttr:!0,isReference:!0}]},{name:"InteractionNode",isAbstract:!0,properties:[{name:"incomingConversationLinks",type:"ConversationLink",isMany:!0,isVirtual:!0,isReference:!0},{name:"outgoingConversationLinks",type:"ConversationLink",isMany:!0,isVirtual:!0,isReference:!0}]},{name:"Participant",superClass:["InteractionNode","BaseElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"interfaceRef",type:"Interface",isMany:!0,isReference:!0},{name:"participantMultiplicity",type:"ParticipantMultiplicity"},{name:"endPointRefs",type:"EndPoint",isMany:!0,isReference:!0},{name:"processRef",type:"Process",isAttr:!0,isReference:!0}]},{name:"ParticipantAssociation",superClass:["BaseElement"],properties:[{name:"innerParticipantRef",type:"Participant",isAttr:!0,isReference:!0},{name:"outerParticipantRef",type:"Participant",isAttr:!0,isReference:!0}]},{name:"ParticipantMultiplicity",properties:[{name:"minimum",default:0,isAttr:!0,type:"Integer"},{name:"maximum",default:1,isAttr:!0,type:"Integer"}],superClass:["BaseElement"]},{name:"Collaboration",superClass:["RootElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"isClosed",isAttr:!0,type:"Boolean"},{name:"participants",type:"Participant",isMany:!0},{name:"messageFlows",type:"MessageFlow",isMany:!0},{name:"artifacts",type:"Artifact",isMany:!0},{name:"conversations",type:"ConversationNode",isMany:!0},{name:"conversationAssociations",type:"ConversationAssociation"},{name:"participantAssociations",type:"ParticipantAssociation",isMany:!0},{name:"messageFlowAssociations",type:"MessageFlowAssociation",isMany:!0},{name:"correlationKeys",type:"CorrelationKey",isMany:!0},{name:"choreographyRef",type:"Choreography",isMany:!0,isReference:!0},{name:"conversationLinks",type:"ConversationLink",isMany:!0}]},{name:"ChoreographyActivity",isAbstract:!0,superClass:["FlowNode"],properties:[{name:"participantRef",type:"Participant",isMany:!0,isReference:!0},{name:"initiatingParticipantRef",type:"Participant",isAttr:!0,isReference:!0},{name:"correlationKeys",type:"CorrelationKey",isMany:!0},{name:"loopType",type:"ChoreographyLoopType",default:"None",isAttr:!0}]},{name:"CallChoreography",superClass:["ChoreographyActivity"],properties:[{name:"calledChoreographyRef",type:"Choreography",isAttr:!0,isReference:!0},{name:"participantAssociations",type:"ParticipantAssociation",isMany:!0}]},{name:"SubChoreography",superClass:["ChoreographyActivity","FlowElementsContainer"],properties:[{name:"artifacts",type:"Artifact",isMany:!0}]},{name:"ChoreographyTask",superClass:["ChoreographyActivity"],properties:[{name:"messageFlowRef",type:"MessageFlow",isMany:!0,isReference:!0}]},{name:"Choreography",superClass:["Collaboration","FlowElementsContainer"]},{name:"GlobalChoreographyTask",superClass:["Choreography"],properties:[{name:"initiatingParticipantRef",type:"Participant",isAttr:!0,isReference:!0}]},{name:"TextAnnotation",superClass:["Artifact"],properties:[{name:"text",type:"String"},{name:"textFormat",default:"text/plain",isAttr:!0,type:"String"}]},{name:"Group",superClass:["Artifact"],properties:[{name:"categoryValueRef",type:"CategoryValue",isAttr:!0,isReference:!0}]},{name:"Association",superClass:["Artifact"],properties:[{name:"associationDirection",type:"AssociationDirection",isAttr:!0},{name:"sourceRef",type:"BaseElement",isAttr:!0,isReference:!0},{name:"targetRef",type:"BaseElement",isAttr:!0,isReference:!0}]},{name:"Category",superClass:["RootElement"],properties:[{name:"categoryValue",type:"CategoryValue",isMany:!0},{name:"name",isAttr:!0,type:"String"}]},{name:"Artifact",isAbstract:!0,superClass:["BaseElement"]},{name:"CategoryValue",superClass:["BaseElement"],properties:[{name:"categorizedFlowElements",type:"FlowElement",isMany:!0,isVirtual:!0,isReference:!0},{name:"value",isAttr:!0,type:"String"}]},{name:"Activity",isAbstract:!0,superClass:["FlowNode"],properties:[{name:"isForCompensation",default:!1,isAttr:!0,type:"Boolean"},{name:"default",type:"SequenceFlow",isAttr:!0,isReference:!0},{name:"ioSpecification",type:"InputOutputSpecification",xml:{serialize:"property"}},{name:"boundaryEventRefs",type:"BoundaryEvent",isMany:!0,isReference:!0},{name:"properties",type:"Property",isMany:!0},{name:"dataInputAssociations",type:"DataInputAssociation",isMany:!0},{name:"dataOutputAssociations",type:"DataOutputAssociation",isMany:!0},{name:"startQuantity",default:1,isAttr:!0,type:"Integer"},{name:"resources",type:"ResourceRole",isMany:!0},{name:"completionQuantity",default:1,isAttr:!0,type:"Integer"},{name:"loopCharacteristics",type:"LoopCharacteristics"}]},{name:"ServiceTask",superClass:["Task"],properties:[{name:"implementation",isAttr:!0,type:"String"},{name:"operationRef",type:"Operation",isAttr:!0,isReference:!0}]},{name:"SubProcess",superClass:["Activity","FlowElementsContainer","InteractionNode"],properties:[{name:"triggeredByEvent",default:!1,isAttr:!0,type:"Boolean"},{name:"artifacts",type:"Artifact",isMany:!0}]},{name:"LoopCharacteristics",isAbstract:!0,superClass:["BaseElement"]},{name:"MultiInstanceLoopCharacteristics",superClass:["LoopCharacteristics"],properties:[{name:"isSequential",default:!1,isAttr:!0,type:"Boolean"},{name:"behavior",type:"MultiInstanceBehavior",default:"All",isAttr:!0},{name:"loopCardinality",type:"Expression",xml:{serialize:"xsi:type"}},{name:"loopDataInputRef",type:"ItemAwareElement",isReference:!0},{name:"loopDataOutputRef",type:"ItemAwareElement",isReference:!0},{name:"inputDataItem",type:"DataInput",xml:{serialize:"property"}},{name:"outputDataItem",type:"DataOutput",xml:{serialize:"property"}},{name:"complexBehaviorDefinition",type:"ComplexBehaviorDefinition",isMany:!0},{name:"completionCondition",type:"Expression",xml:{serialize:"xsi:type"}},{name:"oneBehaviorEventRef",type:"EventDefinition",isAttr:!0,isReference:!0},{name:"noneBehaviorEventRef",type:"EventDefinition",isAttr:!0,isReference:!0}]},{name:"StandardLoopCharacteristics",superClass:["LoopCharacteristics"],properties:[{name:"testBefore",default:!1,isAttr:!0,type:"Boolean"},{name:"loopCondition",type:"Expression",xml:{serialize:"xsi:type"}},{name:"loopMaximum",type:"Integer",isAttr:!0}]},{name:"CallActivity",superClass:["Activity","InteractionNode"],properties:[{name:"calledElement",type:"String",isAttr:!0}]},{name:"Task",superClass:["Activity","InteractionNode"]},{name:"SendTask",superClass:["Task"],properties:[{name:"implementation",isAttr:!0,type:"String"},{name:"operationRef",type:"Operation",isAttr:!0,isReference:!0},{name:"messageRef",type:"Message",isAttr:!0,isReference:!0}]},{name:"ReceiveTask",superClass:["Task"],properties:[{name:"implementation",isAttr:!0,type:"String"},{name:"instantiate",default:!1,isAttr:!0,type:"Boolean"},{name:"operationRef",type:"Operation",isAttr:!0,isReference:!0},{name:"messageRef",type:"Message",isAttr:!0,isReference:!0}]},{name:"ScriptTask",superClass:["Task"],properties:[{name:"scriptFormat",isAttr:!0,type:"String"},{name:"script",type:"String"}]},{name:"BusinessRuleTask",superClass:["Task"],properties:[{name:"implementation",isAttr:!0,type:"String"}]},{name:"AdHocSubProcess",superClass:["SubProcess"],properties:[{name:"completionCondition",type:"Expression",xml:{serialize:"xsi:type"}},{name:"ordering",type:"AdHocOrdering",isAttr:!0},{name:"cancelRemainingInstances",default:!0,isAttr:!0,type:"Boolean"}]},{name:"Transaction",superClass:["SubProcess"],properties:[{name:"protocol",isAttr:!0,type:"String"},{name:"method",isAttr:!0,type:"String"}]},{name:"GlobalScriptTask",superClass:["GlobalTask"],properties:[{name:"scriptLanguage",isAttr:!0,type:"String"},{name:"script",isAttr:!0,type:"String"}]},{name:"GlobalBusinessRuleTask",superClass:["GlobalTask"],properties:[{name:"implementation",isAttr:!0,type:"String"}]},{name:"ComplexBehaviorDefinition",superClass:["BaseElement"],properties:[{name:"condition",type:"FormalExpression"},{name:"event",type:"ImplicitThrowEvent"}]},{name:"ResourceRole",superClass:["BaseElement"],properties:[{name:"resourceRef",type:"Resource",isReference:!0},{name:"resourceParameterBindings",type:"ResourceParameterBinding",isMany:!0},{name:"resourceAssignmentExpression",type:"ResourceAssignmentExpression"},{name:"name",isAttr:!0,type:"String"}]},{name:"ResourceParameterBinding",properties:[{name:"expression",type:"Expression",xml:{serialize:"xsi:type"}},{name:"parameterRef",type:"ResourceParameter",isAttr:!0,isReference:!0}],superClass:["BaseElement"]},{name:"ResourceAssignmentExpression",properties:[{name:"expression",type:"Expression",xml:{serialize:"xsi:type"}}],superClass:["BaseElement"]},{name:"Import",properties:[{name:"importType",isAttr:!0,type:"String"},{name:"location",isAttr:!0,type:"String"},{name:"namespace",isAttr:!0,type:"String"}]},{name:"Definitions",superClass:["BaseElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"targetNamespace",isAttr:!0,type:"String"},{name:"expressionLanguage",default:"http://www.w3.org/1999/XPath",isAttr:!0,type:"String"},{name:"typeLanguage",default:"http://www.w3.org/2001/XMLSchema",isAttr:!0,type:"String"},{name:"imports",type:"Import",isMany:!0},{name:"extensions",type:"Extension",isMany:!0},{name:"rootElements",type:"RootElement",isMany:!0},{name:"diagrams",isMany:!0,type:"bpmndi:BPMNDiagram"},{name:"exporter",isAttr:!0,type:"String"},{name:"relationships",type:"Relationship",isMany:!0},{name:"exporterVersion",isAttr:!0,type:"String"}]}],enumerations:[{name:"ProcessType",literalValues:[{name:"None"},{name:"Public"},{name:"Private"}]},{name:"GatewayDirection",literalValues:[{name:"Unspecified"},{name:"Converging"},{name:"Diverging"},{name:"Mixed"}]},{name:"EventBasedGatewayType",literalValues:[{name:"Parallel"},{name:"Exclusive"}]},{name:"RelationshipDirection",literalValues:[{name:"None"},{name:"Forward"},{name:"Backward"},{name:"Both"}]},{name:"ItemKind",literalValues:[{name:"Physical"},{name:"Information"}]},{name:"ChoreographyLoopType",literalValues:[{name:"None"},{name:"Standard"},{name:"MultiInstanceSequential"},{name:"MultiInstanceParallel"}]},{name:"AssociationDirection",literalValues:[{name:"None"},{name:"One"},{name:"Both"}]},{name:"MultiInstanceBehavior",literalValues:[{name:"None"},{name:"One"},{name:"All"},{name:"Complex"}]},{name:"AdHocOrdering",literalValues:[{name:"Parallel"},{name:"Sequential"}]}],xml:{tagAlias:"lowerCase",typePrefix:"t"}},bpmndi:{name:"BPMNDI",uri:"http://www.omg.org/spec/BPMN/20100524/DI",prefix:"bpmndi",types:[{name:"BPMNDiagram",properties:[{name:"plane",type:"BPMNPlane",redefines:"di:Diagram#rootElement"},{name:"labelStyle",type:"BPMNLabelStyle",isMany:!0}],superClass:["di:Diagram"]},{name:"BPMNPlane",properties:[{name:"bpmnElement",isAttr:!0,isReference:!0,type:"bpmn:BaseElement",redefines:"di:DiagramElement#modelElement"}],superClass:["di:Plane"]},{name:"BPMNShape",properties:[{name:"bpmnElement",isAttr:!0,isReference:!0,type:"bpmn:BaseElement",redefines:"di:DiagramElement#modelElement"},{name:"isHorizontal",isAttr:!0,type:"Boolean"},{name:"isExpanded",isAttr:!0,type:"Boolean"},{name:"isMarkerVisible",isAttr:!0,type:"Boolean"},{name:"label",type:"BPMNLabel"},{name:"isMessageVisible",isAttr:!0,type:"Boolean"},{name:"participantBandKind",type:"ParticipantBandKind",isAttr:!0},{name:"choreographyActivityShape",type:"BPMNShape",isAttr:!0,isReference:!0}],superClass:["di:LabeledShape"]},{name:"BPMNEdge",properties:[{name:"label",type:"BPMNLabel"},{name:"bpmnElement",isAttr:!0,isReference:!0,type:"bpmn:BaseElement",redefines:"di:DiagramElement#modelElement"},{name:"sourceElement",isAttr:!0,isReference:!0,type:"di:DiagramElement",redefines:"di:Edge#source"},{name:"targetElement",isAttr:!0,isReference:!0,type:"di:DiagramElement",redefines:"di:Edge#target"},{name:"messageVisibleKind",type:"MessageVisibleKind",isAttr:!0,default:"initiating"}],superClass:["di:LabeledEdge"]},{name:"BPMNLabel",properties:[{name:"labelStyle",type:"BPMNLabelStyle",isAttr:!0,isReference:!0,redefines:"di:DiagramElement#style"}],superClass:["di:Label"]},{name:"BPMNLabelStyle",properties:[{name:"font",type:"dc:Font"}],superClass:["di:Style"]}],enumerations:[{name:"ParticipantBandKind",literalValues:[{name:"top_initiating"},{name:"middle_initiating"},{name:"bottom_initiating"},{name:"top_non_initiating"},{name:"middle_non_initiating"},{name:"bottom_non_initiating"}]},{name:"MessageVisibleKind",literalValues:[{name:"initiating"},{name:"non_initiating"}]}],associations:[]},dc:{name:"DC",uri:"http://www.omg.org/spec/DD/20100524/DC",prefix:"dc",types:[{name:"Boolean"},{name:"Integer"},{name:"Real"},{name:"String"},{name:"Font",properties:[{name:"name",type:"String",isAttr:!0},{name:"size",type:"Real",isAttr:!0},{name:"isBold",type:"Boolean",isAttr:!0},{name:"isItalic",type:"Boolean",isAttr:!0},{name:"isUnderline",type:"Boolean",isAttr:!0},{name:"isStrikeThrough",type:"Boolean",isAttr:!0}]},{name:"Point",properties:[{name:"x",type:"Real",default:"0",isAttr:!0},{name:"y",type:"Real",default:"0",isAttr:!0}]},{name:"Bounds",properties:[{name:"x",type:"Real",default:"0",isAttr:!0},{name:"y",type:"Real",default:"0",isAttr:!0},{name:"width",type:"Real",isAttr:!0},{name:"height",type:"Real",isAttr:!0}]}],associations:[]},di:{name:"DI",uri:"http://www.omg.org/spec/DD/20100524/DI",prefix:"di",types:[{name:"DiagramElement",isAbstract:!0,properties:[{name:"id",isAttr:!0,isId:!0,type:"String"},{name:"extension",type:"Extension"},{name:"owningDiagram",type:"Diagram",isReadOnly:!0,isVirtual:!0,isReference:!0},{name:"owningElement",type:"DiagramElement",isReadOnly:!0,isVirtual:!0,isReference:!0},{name:"modelElement",isReadOnly:!0,isVirtual:!0,isReference:!0,type:"Element"},{name:"style",type:"Style",isReadOnly:!0,isVirtual:!0,isReference:!0},{name:"ownedElement",type:"DiagramElement",isReadOnly:!0,isMany:!0,isVirtual:!0}]},{name:"Node",isAbstract:!0,superClass:["DiagramElement"]},{name:"Edge",isAbstract:!0,superClass:["DiagramElement"],properties:[{name:"source",type:"DiagramElement",isReadOnly:!0,isVirtual:!0,isReference:!0},{name:"target",type:"DiagramElement",isReadOnly:!0,isVirtual:!0,isReference:!0},{name:"waypoint",isUnique:!1,isMany:!0,type:"dc:Point",xml:{serialize:"xsi:type"}}]},{name:"Diagram",isAbstract:!0,properties:[{name:"id",isAttr:!0,isId:!0,type:"String"},{name:"rootElement",type:"DiagramElement",isReadOnly:!0,isVirtual:!0},{name:"name",isAttr:!0,type:"String"},{name:"documentation",isAttr:!0,type:"String"},{name:"resolution",isAttr:!0,type:"Real"},{name:"ownedStyle",type:"Style",isReadOnly:!0,isMany:!0,isVirtual:!0}]},{name:"Shape",isAbstract:!0,superClass:["Node"],properties:[{name:"bounds",type:"dc:Bounds"}]},{name:"Plane",isAbstract:!0,superClass:["Node"],properties:[{name:"planeElement",type:"DiagramElement",subsettedProperty:"DiagramElement-ownedElement",isMany:!0}]},{name:"LabeledEdge",isAbstract:!0,superClass:["Edge"],properties:[{name:"ownedLabel",type:"Label",isReadOnly:!0,subsettedProperty:"DiagramElement-ownedElement",isMany:!0,isVirtual:!0}]},{name:"LabeledShape",isAbstract:!0,superClass:["Shape"],properties:[{name:"ownedLabel",type:"Label",isReadOnly:!0,subsettedProperty:"DiagramElement-ownedElement",isMany:!0,isVirtual:!0}]},{name:"Label",isAbstract:!0,superClass:["Node"],properties:[{name:"bounds",type:"dc:Bounds"}]},{name:"Style",isAbstract:!0,properties:[{name:"id",isAttr:!0,isId:!0,type:"String"}]},{name:"Extension",properties:[{name:"values",isMany:!0,type:"Element"}]}],associations:[],xml:{tagAlias:"lowerCase"}},bioc:{name:"bpmn.io colors for BPMN",uri:"http://bpmn.io/schema/bpmn/biocolor/1.0",prefix:"bioc",types:[{name:"ColoredShape",extends:["bpmndi:BPMNShape"],properties:[{name:"stroke",isAttr:!0,type:"String"},{name:"fill",isAttr:!0,type:"String"}]},{name:"ColoredEdge",extends:["bpmndi:BPMNEdge"],properties:[{name:"stroke",isAttr:!0,type:"String"},{name:"fill",isAttr:!0,type:"String"}]}],enumerations:[],associations:[]},color:{name:"BPMN in Color",uri:"http://www.omg.org/spec/BPMN/non-normative/color/1.0",prefix:"color",types:[{name:"ColoredLabel",extends:["bpmndi:BPMNLabel"],properties:[{name:"color",isAttr:!0,type:"String"}]},{name:"ColoredShape",extends:["bpmndi:BPMNShape"],properties:[{name:"background-color",isAttr:!0,type:"String"},{name:"border-color",isAttr:!0,type:"String"}]},{name:"ColoredEdge",extends:["bpmndi:BPMNEdge"],properties:[{name:"border-color",isAttr:!0,type:"String"}]}],enumerations:[],associations:[]}};function si(e,t){return new ii(Zn({},oi,e),t)}class ai{async validate(e){try{const t=await(new si).fromXML(e);return ai.createValidationResult(!0,t)}catch(e){return console.error("BPMN XML validation failed: ",e),ai.createValidationResult(!1,null)}}static getInstance(){return this._validationService||(this._validationService=new ai),this._validationService}static resetInstance(){return this._validationService=null,this.getInstance()}static createValidationResult(e,t){return{valid:e,definitions:t}}}const li=[_,r.iv`
  .container {
    display: flex;
    flex-direction: column;
    height: 100%;
  }

  .content-picker {
    height: 100%;
  }

  .content-label {
    padding-left: 8px;
    padding-top: 24px;
    padding-bottom: 24px;
    font-family: 'Open Sans';
    font-weight: 400;
    font-size: 14px;
  }
`],ci={type:"logger",log(e){this.output("log",e)},warn(e){this.output("warn",e)},error(e){this.output("error",e)},output(e,t){console&&console[e]&&console[e].apply(console,t)}};class pi{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.init(e,t)}init(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.prefix=t.prefix||"i18next:",this.logger=e||ci,this.options=t,this.debug=t.debug}log(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"log","",!0)}warn(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"warn","",!0)}error(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"error","")}deprecate(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"warn","WARNING DEPRECATED: ",!0)}forward(e,t,n,r){return r&&!this.debug?null:("string"==typeof e[0]&&(e[0]=`${n}${this.prefix} ${e[0]}`),this.logger[t](e))}create(e){return new pi(this.logger,{prefix:`${this.prefix}:${e}:`,...this.options})}clone(e){return(e=e||this.options).prefix=e.prefix||this.prefix,new pi(this.logger,e)}}var ui=new pi;class di{constructor(){this.observers={}}on(e,t){return e.split(" ").forEach((e=>{this.observers[e]=this.observers[e]||[],this.observers[e].push(t)})),this}off(e,t){this.observers[e]&&(t?this.observers[e]=this.observers[e].filter((e=>e!==t)):delete this.observers[e])}emit(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];if(this.observers[e]){[].concat(this.observers[e]).forEach((e=>{e(...n)}))}if(this.observers["*"]){[].concat(this.observers["*"]).forEach((t=>{t.apply(t,[e,...n])}))}}}function hi(){let e,t;const n=new Promise(((n,r)=>{e=n,t=r}));return n.resolve=e,n.reject=t,n}function fi(e){return null==e?"":""+e}function mi(e,t,n){function r(e){return e&&e.indexOf("###")>-1?e.replace(/###/g,"."):e}function i(){return!e||"string"==typeof e}const o="string"!=typeof t?[].concat(t):t.split(".");for(;o.length>1;){if(i())return{};const t=r(o.shift());!e[t]&&n&&(e[t]=new n),e=Object.prototype.hasOwnProperty.call(e,t)?e[t]:{}}return i()?{}:{obj:e,k:r(o.shift())}}function gi(e,t,n){const{obj:r,k:i}=mi(e,t,Object);r[i]=n}function yi(e,t){const{obj:n,k:r}=mi(e,t);if(n)return n[r]}function vi(e,t,n){for(const r in t)"__proto__"!==r&&"constructor"!==r&&(r in e?"string"==typeof e[r]||e[r]instanceof String||"string"==typeof t[r]||t[r]instanceof String?n&&(e[r]=t[r]):vi(e[r],t[r],n):e[r]=t[r]);return e}function Ai(e){return e.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")}var bi={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;"};function Ci(e){return"string"==typeof e?e.replace(/[&<>"'\/]/g,(e=>bi[e])):e}const xi=[" ",",","?","!",";"];function wi(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:".";if(!e)return;if(e[t])return e[t];const r=t.split(n);let i=e;for(let e=0;e<r.length;++e){if(!i)return;if("string"==typeof i[r[e]]&&e+1<r.length)return;if(void 0===i[r[e]]){let o=2,s=r.slice(e,e+o).join(n),a=i[s];for(;void 0===a&&r.length>e+o;)o++,s=r.slice(e,e+o).join(n),a=i[s];if(void 0===a)return;if(null===a)return null;if(t.endsWith(s)){if("string"==typeof a)return a;if(s&&"string"==typeof a[s])return a[s]}const l=r.slice(e+o).join(n);return l?wi(a,l,n):void 0}i=i[r[e]]}return i}function ki(e){return e&&e.indexOf("_")>0?e.replace("_","-"):e}class Ei extends di{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{ns:["translation"],defaultNS:"translation"};super(),this.data=e||{},this.options=t,void 0===this.options.keySeparator&&(this.options.keySeparator="."),void 0===this.options.ignoreJSONStructure&&(this.options.ignoreJSONStructure=!0)}addNamespaces(e){this.options.ns.indexOf(e)<0&&this.options.ns.push(e)}removeNamespaces(e){const t=this.options.ns.indexOf(e);t>-1&&this.options.ns.splice(t,1)}getResource(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};const i=void 0!==r.keySeparator?r.keySeparator:this.options.keySeparator,o=void 0!==r.ignoreJSONStructure?r.ignoreJSONStructure:this.options.ignoreJSONStructure;let s=[e,t];n&&"string"!=typeof n&&(s=s.concat(n)),n&&"string"==typeof n&&(s=s.concat(i?n.split(i):n)),e.indexOf(".")>-1&&(s=e.split("."));const a=yi(this.data,s);return a||!o||"string"!=typeof n?a:wi(this.data&&this.data[e]&&this.data[e][t],n,i)}addResource(e,t,n,r){let i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{silent:!1};const o=void 0!==i.keySeparator?i.keySeparator:this.options.keySeparator;let s=[e,t];n&&(s=s.concat(o?n.split(o):n)),e.indexOf(".")>-1&&(s=e.split("."),r=t,t=s[1]),this.addNamespaces(t),gi(this.data,s,r),i.silent||this.emit("added",e,t,n,r)}addResources(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{silent:!1};for(const r in n)"string"!=typeof n[r]&&"[object Array]"!==Object.prototype.toString.apply(n[r])||this.addResource(e,t,r,n[r],{silent:!0});r.silent||this.emit("added",e,t,n)}addResourceBundle(e,t,n,r,i){let o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{silent:!1},s=[e,t];e.indexOf(".")>-1&&(s=e.split("."),r=n,n=t,t=s[1]),this.addNamespaces(t);let a=yi(this.data,s)||{};r?vi(a,n,i):a={...a,...n},gi(this.data,s,a),o.silent||this.emit("added",e,t,n)}removeResourceBundle(e,t){this.hasResourceBundle(e,t)&&delete this.data[e][t],this.removeNamespaces(t),this.emit("removed",e,t)}hasResourceBundle(e,t){return void 0!==this.getResource(e,t)}getResourceBundle(e,t){return t||(t=this.options.defaultNS),"v1"===this.options.compatibilityAPI?{...this.getResource(e,t)}:this.getResource(e,t)}getDataByLanguage(e){return this.data[e]}hasLanguageSomeTranslations(e){const t=this.getDataByLanguage(e);return!!(t&&Object.keys(t)||[]).find((e=>t[e]&&Object.keys(t[e]).length>0))}toJSON(){return this.data}}var Si={processors:{},addPostProcessor(e){this.processors[e.name]=e},handle(e,t,n,r,i){return e.forEach((e=>{this.processors[e]&&(t=this.processors[e].process(t,n,r,i))})),t}};const _i={};class $i extends di{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};super(),function(e,t,n){e.forEach((e=>{t[e]&&(n[e]=t[e])}))}(["resourceStore","languageUtils","pluralResolver","interpolator","backendConnector","i18nFormat","utils"],e,this),this.options=t,void 0===this.options.keySeparator&&(this.options.keySeparator="."),this.logger=ui.create("translator")}changeLanguage(e){e&&(this.language=e)}exists(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}};if(null==e)return!1;const n=this.resolve(e,t);return n&&void 0!==n.res}extractFromKey(e,t){let n=void 0!==t.nsSeparator?t.nsSeparator:this.options.nsSeparator;void 0===n&&(n=":");const r=void 0!==t.keySeparator?t.keySeparator:this.options.keySeparator;let i=t.ns||this.options.defaultNS||[];const o=n&&e.indexOf(n)>-1,s=!(this.options.userDefinedKeySeparator||t.keySeparator||this.options.userDefinedNsSeparator||t.nsSeparator||function(e,t,n){t=t||"",n=n||"";const r=xi.filter((e=>t.indexOf(e)<0&&n.indexOf(e)<0));if(0===r.length)return!0;const i=new RegExp(`(${r.map((e=>"?"===e?"\\?":e)).join("|")})`);let o=!i.test(e);if(!o){const t=e.indexOf(n);t>0&&!i.test(e.substring(0,t))&&(o=!0)}return o}(e,n,r));if(o&&!s){const t=e.match(this.interpolator.nestingRegexp);if(t&&t.length>0)return{key:e,namespaces:i};const o=e.split(n);(n!==r||n===r&&this.options.ns.indexOf(o[0])>-1)&&(i=o.shift()),e=o.join(r)}return"string"==typeof i&&(i=[i]),{key:e,namespaces:i}}translate(e,t,n){if("object"!=typeof t&&this.options.overloadTranslationOptionHandler&&(t=this.options.overloadTranslationOptionHandler(arguments)),"object"==typeof t&&(t={...t}),t||(t={}),null==e)return"";Array.isArray(e)||(e=[String(e)]);const r=void 0!==t.returnDetails?t.returnDetails:this.options.returnDetails,i=void 0!==t.keySeparator?t.keySeparator:this.options.keySeparator,{key:o,namespaces:s}=this.extractFromKey(e[e.length-1],t),a=s[s.length-1],l=t.lng||this.language,c=t.appendNamespaceToCIMode||this.options.appendNamespaceToCIMode;if(l&&"cimode"===l.toLowerCase()){if(c){const e=t.nsSeparator||this.options.nsSeparator;return r?{res:`${a}${e}${o}`,usedKey:o,exactUsedKey:o,usedLng:l,usedNS:a}:`${a}${e}${o}`}return r?{res:o,usedKey:o,exactUsedKey:o,usedLng:l,usedNS:a}:o}const p=this.resolve(e,t);let u=p&&p.res;const d=p&&p.usedKey||o,h=p&&p.exactUsedKey||o,f=Object.prototype.toString.apply(u),m=void 0!==t.joinArrays?t.joinArrays:this.options.joinArrays,g=!this.i18nFormat||this.i18nFormat.handleAsObject;if(g&&u&&("string"!=typeof u&&"boolean"!=typeof u&&"number"!=typeof u)&&["[object Number]","[object Function]","[object RegExp]"].indexOf(f)<0&&("string"!=typeof m||"[object Array]"!==f)){if(!t.returnObjects&&!this.options.returnObjects){this.options.returnedObjectHandler||this.logger.warn("accessing an object - but returnObjects options is not enabled!");const e=this.options.returnedObjectHandler?this.options.returnedObjectHandler(d,u,{...t,ns:s}):`key '${o} (${this.language})' returned an object instead of string.`;return r?(p.res=e,p):e}if(i){const e="[object Array]"===f,n=e?[]:{},r=e?h:d;for(const e in u)if(Object.prototype.hasOwnProperty.call(u,e)){const o=`${r}${i}${e}`;n[e]=this.translate(o,{...t,joinArrays:!1,ns:s}),n[e]===o&&(n[e]=u[e])}u=n}}else if(g&&"string"==typeof m&&"[object Array]"===f)u=u.join(m),u&&(u=this.extendTranslation(u,e,t,n));else{let r=!1,s=!1;const c=void 0!==t.count&&"string"!=typeof t.count,d=$i.hasDefaultValue(t),h=c?this.pluralResolver.getSuffix(l,t.count,t):"",f=t.ordinal&&c?this.pluralResolver.getSuffix(l,t.count,{ordinal:!1}):"",m=t[`defaultValue${h}`]||t[`defaultValue${f}`]||t.defaultValue;!this.isValidLookup(u)&&d&&(r=!0,u=m),this.isValidLookup(u)||(s=!0,u=o);const g=(t.missingKeyNoValueFallbackToKey||this.options.missingKeyNoValueFallbackToKey)&&s?void 0:u,y=d&&m!==u&&this.options.updateMissing;if(s||r||y){if(this.logger.log(y?"updateKey":"missingKey",l,a,o,y?m:u),i){const e=this.resolve(o,{...t,keySeparator:!1});e&&e.res&&this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.")}let e=[];const n=this.languageUtils.getFallbackCodes(this.options.fallbackLng,t.lng||this.language);if("fallback"===this.options.saveMissingTo&&n&&n[0])for(let t=0;t<n.length;t++)e.push(n[t]);else"all"===this.options.saveMissingTo?e=this.languageUtils.toResolveHierarchy(t.lng||this.language):e.push(t.lng||this.language);const r=(e,n,r)=>{const i=d&&r!==u?r:g;this.options.missingKeyHandler?this.options.missingKeyHandler(e,a,n,i,y,t):this.backendConnector&&this.backendConnector.saveMissing&&this.backendConnector.saveMissing(e,a,n,i,y,t),this.emit("missingKey",e,a,n,u)};this.options.saveMissing&&(this.options.saveMissingPlurals&&c?e.forEach((e=>{this.pluralResolver.getSuffixes(e,t).forEach((n=>{r([e],o+n,t[`defaultValue${n}`]||m)}))})):r(e,o,m))}u=this.extendTranslation(u,e,t,p,n),s&&u===o&&this.options.appendNamespaceToMissingKey&&(u=`${a}:${o}`),(s||r)&&this.options.parseMissingKeyHandler&&(u="v1"!==this.options.compatibilityAPI?this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey?`${a}:${o}`:o,r?u:void 0):this.options.parseMissingKeyHandler(u))}return r?(p.res=u,p):u}extendTranslation(e,t,n,r,i){var o=this;if(this.i18nFormat&&this.i18nFormat.parse)e=this.i18nFormat.parse(e,{...this.options.interpolation.defaultVariables,...n},r.usedLng,r.usedNS,r.usedKey,{resolved:r});else if(!n.skipInterpolation){n.interpolation&&this.interpolator.init({...n,interpolation:{...this.options.interpolation,...n.interpolation}});const s="string"==typeof e&&(n&&n.interpolation&&void 0!==n.interpolation.skipOnVariables?n.interpolation.skipOnVariables:this.options.interpolation.skipOnVariables);let a;if(s){const t=e.match(this.interpolator.nestingRegexp);a=t&&t.length}let l=n.replace&&"string"!=typeof n.replace?n.replace:n;if(this.options.interpolation.defaultVariables&&(l={...this.options.interpolation.defaultVariables,...l}),e=this.interpolator.interpolate(e,l,n.lng||this.language,n),s){const t=e.match(this.interpolator.nestingRegexp);a<(t&&t.length)&&(n.nest=!1)}!n.lng&&"v1"!==this.options.compatibilityAPI&&r&&r.res&&(n.lng=r.usedLng),!1!==n.nest&&(e=this.interpolator.nest(e,(function(){for(var e=arguments.length,r=new Array(e),s=0;s<e;s++)r[s]=arguments[s];return i&&i[0]===r[0]&&!n.context?(o.logger.warn(`It seems you are nesting recursively key: ${r[0]} in key: ${t[0]}`),null):o.translate(...r,t)}),n)),n.interpolation&&this.interpolator.reset()}const s=n.postProcess||this.options.postProcess,a="string"==typeof s?[s]:s;return null!=e&&a&&a.length&&!1!==n.applyPostProcessor&&(e=Si.handle(a,e,t,this.options&&this.options.postProcessPassResolved?{i18nResolved:r,...n}:n,this)),e}resolve(e){let t,n,r,i,o,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"string"==typeof e&&(e=[e]),e.forEach((e=>{if(this.isValidLookup(t))return;const a=this.extractFromKey(e,s),l=a.key;n=l;let c=a.namespaces;this.options.fallbackNS&&(c=c.concat(this.options.fallbackNS));const p=void 0!==s.count&&"string"!=typeof s.count,u=p&&!s.ordinal&&0===s.count&&this.pluralResolver.shouldUseIntlApi(),d=void 0!==s.context&&("string"==typeof s.context||"number"==typeof s.context)&&""!==s.context,h=s.lngs?s.lngs:this.languageUtils.toResolveHierarchy(s.lng||this.language,s.fallbackLng);c.forEach((e=>{this.isValidLookup(t)||(o=e,!_i[`${h[0]}-${e}`]&&this.utils&&this.utils.hasLoadedNamespace&&!this.utils.hasLoadedNamespace(o)&&(_i[`${h[0]}-${e}`]=!0,this.logger.warn(`key "${n}" for languages "${h.join(", ")}" won't get resolved as namespace "${o}" was not yet loaded`,"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!")),h.forEach((n=>{if(this.isValidLookup(t))return;i=n;const o=[l];if(this.i18nFormat&&this.i18nFormat.addLookupKeys)this.i18nFormat.addLookupKeys(o,l,n,e,s);else{let e;p&&(e=this.pluralResolver.getSuffix(n,s.count,s));const t=`${this.options.pluralSeparator}zero`,r=`${this.options.pluralSeparator}ordinal${this.options.pluralSeparator}`;if(p&&(o.push(l+e),s.ordinal&&0===e.indexOf(r)&&o.push(l+e.replace(r,this.options.pluralSeparator)),u&&o.push(l+t)),d){const n=`${l}${this.options.contextSeparator}${s.context}`;o.push(n),p&&(o.push(n+e),s.ordinal&&0===e.indexOf(r)&&o.push(n+e.replace(r,this.options.pluralSeparator)),u&&o.push(n+t))}}let a;for(;a=o.pop();)this.isValidLookup(t)||(r=a,t=this.getResource(n,e,a,s))})))}))})),{res:t,usedKey:n,exactUsedKey:r,usedLng:i,usedNS:o}}isValidLookup(e){return!(void 0===e||!this.options.returnNull&&null===e||!this.options.returnEmptyString&&""===e)}getResource(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return this.i18nFormat&&this.i18nFormat.getResource?this.i18nFormat.getResource(e,t,n,r):this.resourceStore.getResource(e,t,n,r)}static hasDefaultValue(e){const t="defaultValue";for(const n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&t===n.substring(0,12)&&void 0!==e[n])return!0;return!1}}function Ri(e){return e.charAt(0).toUpperCase()+e.slice(1)}class Ni{constructor(e){this.options=e,this.supportedLngs=this.options.supportedLngs||!1,this.logger=ui.create("languageUtils")}getScriptPartFromCode(e){if(!(e=ki(e))||e.indexOf("-")<0)return null;const t=e.split("-");return 2===t.length?null:(t.pop(),"x"===t[t.length-1].toLowerCase()?null:this.formatLanguageCode(t.join("-")))}getLanguagePartFromCode(e){if(!(e=ki(e))||e.indexOf("-")<0)return e;const t=e.split("-");return this.formatLanguageCode(t[0])}formatLanguageCode(e){if("string"==typeof e&&e.indexOf("-")>-1){const t=["hans","hant","latn","cyrl","cans","mong","arab"];let n=e.split("-");return this.options.lowerCaseLng?n=n.map((e=>e.toLowerCase())):2===n.length?(n[0]=n[0].toLowerCase(),n[1]=n[1].toUpperCase(),t.indexOf(n[1].toLowerCase())>-1&&(n[1]=Ri(n[1].toLowerCase()))):3===n.length&&(n[0]=n[0].toLowerCase(),2===n[1].length&&(n[1]=n[1].toUpperCase()),"sgn"!==n[0]&&2===n[2].length&&(n[2]=n[2].toUpperCase()),t.indexOf(n[1].toLowerCase())>-1&&(n[1]=Ri(n[1].toLowerCase())),t.indexOf(n[2].toLowerCase())>-1&&(n[2]=Ri(n[2].toLowerCase()))),n.join("-")}return this.options.cleanCode||this.options.lowerCaseLng?e.toLowerCase():e}isSupportedCode(e){return("languageOnly"===this.options.load||this.options.nonExplicitSupportedLngs)&&(e=this.getLanguagePartFromCode(e)),!this.supportedLngs||!this.supportedLngs.length||this.supportedLngs.indexOf(e)>-1}getBestMatchFromCodes(e){if(!e)return null;let t;return e.forEach((e=>{if(t)return;const n=this.formatLanguageCode(e);this.options.supportedLngs&&!this.isSupportedCode(n)||(t=n)})),!t&&this.options.supportedLngs&&e.forEach((e=>{if(t)return;const n=this.getLanguagePartFromCode(e);if(this.isSupportedCode(n))return t=n;t=this.options.supportedLngs.find((e=>e===n?e:e.indexOf("-")<0&&n.indexOf("-")<0?void 0:0===e.indexOf(n)?e:void 0))})),t||(t=this.getFallbackCodes(this.options.fallbackLng)[0]),t}getFallbackCodes(e,t){if(!e)return[];if("function"==typeof e&&(e=e(t)),"string"==typeof e&&(e=[e]),"[object Array]"===Object.prototype.toString.apply(e))return e;if(!t)return e.default||[];let n=e[t];return n||(n=e[this.getScriptPartFromCode(t)]),n||(n=e[this.formatLanguageCode(t)]),n||(n=e[this.getLanguagePartFromCode(t)]),n||(n=e.default),n||[]}toResolveHierarchy(e,t){const n=this.getFallbackCodes(t||this.options.fallbackLng||[],e),r=[],i=e=>{e&&(this.isSupportedCode(e)?r.push(e):this.logger.warn(`rejecting language code not found in supportedLngs: ${e}`))};return"string"==typeof e&&(e.indexOf("-")>-1||e.indexOf("_")>-1)?("languageOnly"!==this.options.load&&i(this.formatLanguageCode(e)),"languageOnly"!==this.options.load&&"currentOnly"!==this.options.load&&i(this.getScriptPartFromCode(e)),"currentOnly"!==this.options.load&&i(this.getLanguagePartFromCode(e))):"string"==typeof e&&i(this.formatLanguageCode(e)),n.forEach((e=>{r.indexOf(e)<0&&i(this.formatLanguageCode(e))})),r}}let Pi=[{lngs:["ach","ak","am","arn","br","fil","gun","ln","mfe","mg","mi","oc","pt","pt-BR","tg","tl","ti","tr","uz","wa"],nr:[1,2],fc:1},{lngs:["af","an","ast","az","bg","bn","ca","da","de","dev","el","en","eo","es","et","eu","fi","fo","fur","fy","gl","gu","ha","hi","hu","hy","ia","it","kk","kn","ku","lb","mai","ml","mn","mr","nah","nap","nb","ne","nl","nn","no","nso","pa","pap","pms","ps","pt-PT","rm","sco","se","si","so","son","sq","sv","sw","ta","te","tk","ur","yo"],nr:[1,2],fc:2},{lngs:["ay","bo","cgg","fa","ht","id","ja","jbo","ka","km","ko","ky","lo","ms","sah","su","th","tt","ug","vi","wo","zh"],nr:[1],fc:3},{lngs:["be","bs","cnr","dz","hr","ru","sr","uk"],nr:[1,2,5],fc:4},{lngs:["ar"],nr:[0,1,2,3,11,100],fc:5},{lngs:["cs","sk"],nr:[1,2,5],fc:6},{lngs:["csb","pl"],nr:[1,2,5],fc:7},{lngs:["cy"],nr:[1,2,3,8],fc:8},{lngs:["fr"],nr:[1,2],fc:9},{lngs:["ga"],nr:[1,2,3,7,11],fc:10},{lngs:["gd"],nr:[1,2,3,20],fc:11},{lngs:["is"],nr:[1,2],fc:12},{lngs:["jv"],nr:[0,1],fc:13},{lngs:["kw"],nr:[1,2,3,4],fc:14},{lngs:["lt"],nr:[1,2,10],fc:15},{lngs:["lv"],nr:[1,2,0],fc:16},{lngs:["mk"],nr:[1,2],fc:17},{lngs:["mnk"],nr:[0,1,2],fc:18},{lngs:["mt"],nr:[1,2,11,20],fc:19},{lngs:["or"],nr:[2,1],fc:2},{lngs:["ro"],nr:[1,2,20],fc:20},{lngs:["sl"],nr:[5,1,2,3],fc:21},{lngs:["he","iw"],nr:[1,2,20,21],fc:22}],Mi={1:function(e){return Number(e>1)},2:function(e){return Number(1!=e)},3:function(e){return 0},4:function(e){return Number(e%10==1&&e%100!=11?0:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?1:2)},5:function(e){return Number(0==e?0:1==e?1:2==e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5)},6:function(e){return Number(1==e?0:e>=2&&e<=4?1:2)},7:function(e){return Number(1==e?0:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?1:2)},8:function(e){return Number(1==e?0:2==e?1:8!=e&&11!=e?2:3)},9:function(e){return Number(e>=2)},10:function(e){return Number(1==e?0:2==e?1:e<7?2:e<11?3:4)},11:function(e){return Number(1==e||11==e?0:2==e||12==e?1:e>2&&e<20?2:3)},12:function(e){return Number(e%10!=1||e%100==11)},13:function(e){return Number(0!==e)},14:function(e){return Number(1==e?0:2==e?1:3==e?2:3)},15:function(e){return Number(e%10==1&&e%100!=11?0:e%10>=2&&(e%100<10||e%100>=20)?1:2)},16:function(e){return Number(e%10==1&&e%100!=11?0:0!==e?1:2)},17:function(e){return Number(1==e||e%10==1&&e%100!=11?0:1)},18:function(e){return Number(0==e?0:1==e?1:2)},19:function(e){return Number(1==e?0:0==e||e%100>1&&e%100<11?1:e%100>10&&e%100<20?2:3)},20:function(e){return Number(1==e?0:0==e||e%100>0&&e%100<20?1:2)},21:function(e){return Number(e%100==1?1:e%100==2?2:e%100==3||e%100==4?3:0)},22:function(e){return Number(1==e?0:2==e?1:(e<0||e>10)&&e%10==0?2:3)}};const Bi=["v1","v2","v3"],Oi=["v4"],Di={zero:0,one:1,two:2,few:3,many:4,other:5};class Li{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.languageUtils=e,this.options=t,this.logger=ui.create("pluralResolver"),this.options.compatibilityJSON&&!Oi.includes(this.options.compatibilityJSON)||"undefined"!=typeof Intl&&Intl.PluralRules||(this.options.compatibilityJSON="v3",this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.")),this.rules=function(){const e={};return Pi.forEach((t=>{t.lngs.forEach((n=>{e[n]={numbers:t.nr,plurals:Mi[t.fc]}}))})),e}()}addRule(e,t){this.rules[e]=t}getRule(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(this.shouldUseIntlApi())try{return new Intl.PluralRules(ki(e),{type:t.ordinal?"ordinal":"cardinal"})}catch{return}return this.rules[e]||this.rules[this.languageUtils.getLanguagePartFromCode(e)]}needsPlural(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const n=this.getRule(e,t);return this.shouldUseIntlApi()?n&&n.resolvedOptions().pluralCategories.length>1:n&&n.numbers.length>1}getPluralFormsOfKey(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.getSuffixes(e,n).map((e=>`${t}${e}`))}getSuffixes(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const n=this.getRule(e,t);return n?this.shouldUseIntlApi()?n.resolvedOptions().pluralCategories.sort(((e,t)=>Di[e]-Di[t])).map((e=>`${this.options.prepend}${t.ordinal?`ordinal${this.options.prepend}`:""}${e}`)):n.numbers.map((n=>this.getSuffix(e,n,t))):[]}getSuffix(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const r=this.getRule(e,n);return r?this.shouldUseIntlApi()?`${this.options.prepend}${n.ordinal?`ordinal${this.options.prepend}`:""}${r.select(t)}`:this.getSuffixRetroCompatible(r,t):(this.logger.warn(`no plural rule found for: ${e}`),"")}getSuffixRetroCompatible(e,t){const n=e.noAbs?e.plurals(t):e.plurals(Math.abs(t));let r=e.numbers[n];this.options.simplifyPluralSuffix&&2===e.numbers.length&&1===e.numbers[0]&&(2===r?r="plural":1===r&&(r=""));const i=()=>this.options.prepend&&r.toString()?this.options.prepend+r.toString():r.toString();return"v1"===this.options.compatibilityJSON?1===r?"":"number"==typeof r?`_plural_${r.toString()}`:i():"v2"===this.options.compatibilityJSON||this.options.simplifyPluralSuffix&&2===e.numbers.length&&1===e.numbers[0]?i():this.options.prepend&&n.toString()?this.options.prepend+n.toString():n.toString()}shouldUseIntlApi(){return!Bi.includes(this.options.compatibilityJSON)}}function Fi(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:".",i=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],o=function(e,t,n){const r=yi(e,n);return void 0!==r?r:yi(t,n)}(e,t,n);return!o&&i&&"string"==typeof n&&(o=wi(e,n,r),void 0===o&&(o=wi(t,n,r))),o}class Ti{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.logger=ui.create("interpolator"),this.options=e,this.format=e.interpolation&&e.interpolation.format||(e=>e),this.init(e)}init(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};e.interpolation||(e.interpolation={escapeValue:!0});const t=e.interpolation;this.escape=void 0!==t.escape?t.escape:Ci,this.escapeValue=void 0===t.escapeValue||t.escapeValue,this.useRawValueToEscape=void 0!==t.useRawValueToEscape&&t.useRawValueToEscape,this.prefix=t.prefix?Ai(t.prefix):t.prefixEscaped||"{{",this.suffix=t.suffix?Ai(t.suffix):t.suffixEscaped||"}}",this.formatSeparator=t.formatSeparator?t.formatSeparator:t.formatSeparator||",",this.unescapePrefix=t.unescapeSuffix?"":t.unescapePrefix||"-",this.unescapeSuffix=this.unescapePrefix?"":t.unescapeSuffix||"",this.nestingPrefix=t.nestingPrefix?Ai(t.nestingPrefix):t.nestingPrefixEscaped||Ai("$t("),this.nestingSuffix=t.nestingSuffix?Ai(t.nestingSuffix):t.nestingSuffixEscaped||Ai(")"),this.nestingOptionsSeparator=t.nestingOptionsSeparator?t.nestingOptionsSeparator:t.nestingOptionsSeparator||",",this.maxReplaces=t.maxReplaces?t.maxReplaces:1e3,this.alwaysFormat=void 0!==t.alwaysFormat&&t.alwaysFormat,this.resetRegExp()}reset(){this.options&&this.init(this.options)}resetRegExp(){const e=`${this.prefix}(.+?)${this.suffix}`;this.regexp=new RegExp(e,"g");const t=`${this.prefix}${this.unescapePrefix}(.+?)${this.unescapeSuffix}${this.suffix}`;this.regexpUnescape=new RegExp(t,"g");const n=`${this.nestingPrefix}(.+?)${this.nestingSuffix}`;this.nestingRegexp=new RegExp(n,"g")}interpolate(e,t,n,r){let i,o,s;const a=this.options&&this.options.interpolation&&this.options.interpolation.defaultVariables||{};function l(e){return e.replace(/\$/g,"$$$$")}const c=e=>{if(e.indexOf(this.formatSeparator)<0){const i=Fi(t,a,e,this.options.keySeparator,this.options.ignoreJSONStructure);return this.alwaysFormat?this.format(i,void 0,n,{...r,...t,interpolationkey:e}):i}const i=e.split(this.formatSeparator),o=i.shift().trim(),s=i.join(this.formatSeparator).trim();return this.format(Fi(t,a,o,this.options.keySeparator,this.options.ignoreJSONStructure),s,n,{...r,...t,interpolationkey:o})};this.resetRegExp();const p=r&&r.missingInterpolationHandler||this.options.missingInterpolationHandler,u=r&&r.interpolation&&void 0!==r.interpolation.skipOnVariables?r.interpolation.skipOnVariables:this.options.interpolation.skipOnVariables;return[{regex:this.regexpUnescape,safeValue:e=>l(e)},{regex:this.regexp,safeValue:e=>this.escapeValue?l(this.escape(e)):l(e)}].forEach((t=>{for(s=0;i=t.regex.exec(e);){const n=i[1].trim();if(o=c(n),void 0===o)if("function"==typeof p){const t=p(e,i,r);o="string"==typeof t?t:""}else if(r&&Object.prototype.hasOwnProperty.call(r,n))o="";else{if(u){o=i[0];continue}this.logger.warn(`missed to pass in variable ${n} for interpolating ${e}`),o=""}else"string"==typeof o||this.useRawValueToEscape||(o=fi(o));const a=t.safeValue(o);if(e=e.replace(i[0],a),u?(t.regex.lastIndex+=o.length,t.regex.lastIndex-=i[0].length):t.regex.lastIndex=0,s++,s>=this.maxReplaces)break}})),e}nest(e,t){let n,r,i,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};function s(e,t){const n=this.nestingOptionsSeparator;if(e.indexOf(n)<0)return e;const r=e.split(new RegExp(`${n}[ ]*{`));let o=`{${r[1]}`;e=r[0],o=this.interpolate(o,i);const s=o.match(/'/g),a=o.match(/"/g);(s&&s.length%2==0&&!a||a.length%2!=0)&&(o=o.replace(/'/g,'"'));try{i=JSON.parse(o),t&&(i={...t,...i})}catch(t){return this.logger.warn(`failed parsing options string in nesting for key ${e}`,t),`${e}${n}${o}`}return delete i.defaultValue,e}for(;n=this.nestingRegexp.exec(e);){let a=[];i={...o},i=i.replace&&"string"!=typeof i.replace?i.replace:i,i.applyPostProcessor=!1,delete i.defaultValue;let l=!1;if(-1!==n[0].indexOf(this.formatSeparator)&&!/{.*}/.test(n[1])){const e=n[1].split(this.formatSeparator).map((e=>e.trim()));n[1]=e.shift(),a=e,l=!0}if(r=t(s.call(this,n[1].trim(),i),i),r&&n[0]===e&&"string"!=typeof r)return r;"string"!=typeof r&&(r=fi(r)),r||(this.logger.warn(`missed to resolve ${n[1]} for nesting ${e}`),r=""),l&&(r=a.reduce(((e,t)=>this.format(e,t,o.lng,{...o,interpolationkey:n[1].trim()})),r.trim())),e=e.replace(n[0],r),this.regexp.lastIndex=0}return e}}function Ii(e){const t={};return function(n,r,i){const o=r+JSON.stringify(i);let s=t[o];return s||(s=e(ki(r),i),t[o]=s),s(n)}}class zi{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.logger=ui.create("formatter"),this.options=e,this.formats={number:Ii(((e,t)=>{const n=new Intl.NumberFormat(e,{...t});return e=>n.format(e)})),currency:Ii(((e,t)=>{const n=new Intl.NumberFormat(e,{...t,style:"currency"});return e=>n.format(e)})),datetime:Ii(((e,t)=>{const n=new Intl.DateTimeFormat(e,{...t});return e=>n.format(e)})),relativetime:Ii(((e,t)=>{const n=new Intl.RelativeTimeFormat(e,{...t});return e=>n.format(e,t.range||"day")})),list:Ii(((e,t)=>{const n=new Intl.ListFormat(e,{...t});return e=>n.format(e)}))},this.init(e)}init(e){const t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}}).interpolation;this.formatSeparator=t.formatSeparator?t.formatSeparator:t.formatSeparator||","}add(e,t){this.formats[e.toLowerCase().trim()]=t}addCached(e,t){this.formats[e.toLowerCase().trim()]=Ii(t)}format(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};const i=t.split(this.formatSeparator).reduce(((e,t)=>{const{formatName:i,formatOptions:o}=function(e){let t=e.toLowerCase().trim();const n={};if(e.indexOf("(")>-1){const r=e.split("(");t=r[0].toLowerCase().trim();const i=r[1].substring(0,r[1].length-1);"currency"===t&&i.indexOf(":")<0?n.currency||(n.currency=i.trim()):"relativetime"===t&&i.indexOf(":")<0?n.range||(n.range=i.trim()):i.split(";").forEach((e=>{if(!e)return;const[t,...r]=e.split(":"),i=r.join(":").trim().replace(/^'+|'+$/g,"");n[t.trim()]||(n[t.trim()]=i),"false"===i&&(n[t.trim()]=!1),"true"===i&&(n[t.trim()]=!0),isNaN(i)||(n[t.trim()]=parseInt(i,10))}))}return{formatName:t,formatOptions:n}}(t);if(this.formats[i]){let t=e;try{const s=r&&r.formatParams&&r.formatParams[r.interpolationkey]||{},a=s.locale||s.lng||r.locale||r.lng||n;t=this.formats[i](e,a,{...o,...r,...s})}catch(e){this.logger.warn(e)}return t}return this.logger.warn(`there was no format function for ${i}`),e}),e);return i}}class ji extends di{constructor(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};super(),this.backend=e,this.store=t,this.services=n,this.languageUtils=n.languageUtils,this.options=r,this.logger=ui.create("backendConnector"),this.waitingReads=[],this.maxParallelReads=r.maxParallelReads||10,this.readingCalls=0,this.maxRetries=r.maxRetries>=0?r.maxRetries:5,this.retryTimeout=r.retryTimeout>=1?r.retryTimeout:350,this.state={},this.queue=[],this.backend&&this.backend.init&&this.backend.init(n,r.backend,r)}queueLoad(e,t,n,r){const i={},o={},s={},a={};return e.forEach((e=>{let r=!0;t.forEach((t=>{const s=`${e}|${t}`;!n.reload&&this.store.hasResourceBundle(e,t)?this.state[s]=2:this.state[s]<0||(1===this.state[s]?void 0===o[s]&&(o[s]=!0):(this.state[s]=1,r=!1,void 0===o[s]&&(o[s]=!0),void 0===i[s]&&(i[s]=!0),void 0===a[t]&&(a[t]=!0)))})),r||(s[e]=!0)})),(Object.keys(i).length||Object.keys(o).length)&&this.queue.push({pending:o,pendingCount:Object.keys(o).length,loaded:{},errors:[],callback:r}),{toLoad:Object.keys(i),pending:Object.keys(o),toLoadLanguages:Object.keys(s),toLoadNamespaces:Object.keys(a)}}loaded(e,t,n){const r=e.split("|"),i=r[0],o=r[1];t&&this.emit("failedLoading",i,o,t),n&&this.store.addResourceBundle(i,o,n),this.state[e]=t?-1:2;const s={};this.queue.forEach((n=>{!function(e,t,n,r){const{obj:i,k:o}=mi(e,t,Object);i[o]=i[o]||[],r&&(i[o]=i[o].concat(n)),r||i[o].push(n)}(n.loaded,[i],o),function(e,t){void 0!==e.pending[t]&&(delete e.pending[t],e.pendingCount--)}(n,e),t&&n.errors.push(t),0!==n.pendingCount||n.done||(Object.keys(n.loaded).forEach((e=>{s[e]||(s[e]={});const t=n.loaded[e];t.length&&t.forEach((t=>{void 0===s[e][t]&&(s[e][t]=!0)}))})),n.done=!0,n.errors.length?n.callback(n.errors):n.callback())})),this.emit("loaded",s),this.queue=this.queue.filter((e=>!e.done))}read(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:this.retryTimeout,o=arguments.length>5?arguments[5]:void 0;if(!e.length)return o(null,{});if(this.readingCalls>=this.maxParallelReads)return void this.waitingReads.push({lng:e,ns:t,fcName:n,tried:r,wait:i,callback:o});this.readingCalls++;const s=(s,a)=>{if(this.readingCalls--,this.waitingReads.length>0){const e=this.waitingReads.shift();this.read(e.lng,e.ns,e.fcName,e.tried,e.wait,e.callback)}s&&a&&r<this.maxRetries?setTimeout((()=>{this.read.call(this,e,t,n,r+1,2*i,o)}),i):o(s,a)},a=this.backend[n].bind(this.backend);if(2!==a.length)return a(e,t,s);try{const n=a(e,t);n&&"function"==typeof n.then?n.then((e=>s(null,e))).catch(s):s(null,n)}catch(e){s(e)}}prepareLoading(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3?arguments[3]:void 0;if(!this.backend)return this.logger.warn("No backend was added via i18next.use. Will not load resources."),r&&r();"string"==typeof e&&(e=this.languageUtils.toResolveHierarchy(e)),"string"==typeof t&&(t=[t]);const i=this.queueLoad(e,t,n,r);if(!i.toLoad.length)return i.pending.length||r(),null;i.toLoad.forEach((e=>{this.loadOne(e)}))}load(e,t,n){this.prepareLoading(e,t,{},n)}reload(e,t,n){this.prepareLoading(e,t,{reload:!0},n)}loadOne(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";const n=e.split("|"),r=n[0],i=n[1];this.read(r,i,"read",void 0,void 0,((n,o)=>{n&&this.logger.warn(`${t}loading namespace ${i} for language ${r} failed`,n),!n&&o&&this.logger.log(`${t}loaded namespace ${i} for language ${r}`,o),this.loaded(e,n,o)}))}saveMissing(e,t,n,r,i){let o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{},s=arguments.length>6&&void 0!==arguments[6]?arguments[6]:()=>{};if(this.services.utils&&this.services.utils.hasLoadedNamespace&&!this.services.utils.hasLoadedNamespace(t))this.logger.warn(`did not save key "${n}" as the namespace "${t}" was not yet loaded`,"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");else if(null!=n&&""!==n){if(this.backend&&this.backend.create){const a={...o,isUpdate:i},l=this.backend.create.bind(this.backend);if(l.length<6)try{let i;i=5===l.length?l(e,t,n,r,a):l(e,t,n,r),i&&"function"==typeof i.then?i.then((e=>s(null,e))).catch(s):s(null,i)}catch(e){s(e)}else l(e,t,n,r,s,a)}e&&e[0]&&this.store.addResource(e[0],t,n,r)}}}function Vi(){return{debug:!1,initImmediate:!0,ns:["translation"],defaultNS:["translation"],fallbackLng:["dev"],fallbackNS:!1,supportedLngs:!1,nonExplicitSupportedLngs:!1,load:"all",preload:!1,simplifyPluralSuffix:!0,keySeparator:".",nsSeparator:":",pluralSeparator:"_",contextSeparator:"_",partialBundledLanguages:!1,saveMissing:!1,updateMissing:!1,saveMissingTo:"fallback",saveMissingPlurals:!0,missingKeyHandler:!1,missingInterpolationHandler:!1,postProcess:!1,postProcessPassResolved:!1,returnNull:!1,returnEmptyString:!0,returnObjects:!1,joinArrays:!1,returnedObjectHandler:!1,parseMissingKeyHandler:!1,appendNamespaceToMissingKey:!1,appendNamespaceToCIMode:!1,overloadTranslationOptionHandler:function(e){let t={};if("object"==typeof e[1]&&(t=e[1]),"string"==typeof e[1]&&(t.defaultValue=e[1]),"string"==typeof e[2]&&(t.tDescription=e[2]),"object"==typeof e[2]||"object"==typeof e[3]){const n=e[3]||e[2];Object.keys(n).forEach((e=>{t[e]=n[e]}))}return t},interpolation:{escapeValue:!0,format:(e,t,n,r)=>e,prefix:"{{",suffix:"}}",formatSeparator:",",unescapePrefix:"-",nestingPrefix:"$t(",nestingSuffix:")",nestingOptionsSeparator:",",maxReplaces:1e3,skipOnVariables:!0}}}function Hi(e){return"string"==typeof e.ns&&(e.ns=[e.ns]),"string"==typeof e.fallbackLng&&(e.fallbackLng=[e.fallbackLng]),"string"==typeof e.fallbackNS&&(e.fallbackNS=[e.fallbackNS]),e.supportedLngs&&e.supportedLngs.indexOf("cimode")<0&&(e.supportedLngs=e.supportedLngs.concat(["cimode"])),e}function Ui(){}class Zi extends di{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0;var n;if(super(),this.options=Hi(e),this.services={},this.logger=ui,this.modules={external:[]},n=this,Object.getOwnPropertyNames(Object.getPrototypeOf(n)).forEach((e=>{"function"==typeof n[e]&&(n[e]=n[e].bind(n))})),t&&!this.isInitialized&&!e.isClone){if(!this.options.initImmediate)return this.init(e,t),this;setTimeout((()=>{this.init(e,t)}),0)}}init(){var e=this;let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;"function"==typeof t&&(n=t,t={}),!t.defaultNS&&!1!==t.defaultNS&&t.ns&&("string"==typeof t.ns?t.defaultNS=t.ns:t.ns.indexOf("translation")<0&&(t.defaultNS=t.ns[0]));const r=Vi();function i(e){return e?"function"==typeof e?new e:e:null}if(this.options={...r,...this.options,...Hi(t)},"v1"!==this.options.compatibilityAPI&&(this.options.interpolation={...r.interpolation,...this.options.interpolation}),void 0!==t.keySeparator&&(this.options.userDefinedKeySeparator=t.keySeparator),void 0!==t.nsSeparator&&(this.options.userDefinedNsSeparator=t.nsSeparator),!this.options.isClone){let t;this.modules.logger?ui.init(i(this.modules.logger),this.options):ui.init(null,this.options),this.modules.formatter?t=this.modules.formatter:"undefined"!=typeof Intl&&(t=zi);const n=new Ni(this.options);this.store=new Ei(this.options.resources,this.options);const o=this.services;o.logger=ui,o.resourceStore=this.store,o.languageUtils=n,o.pluralResolver=new Li(n,{prepend:this.options.pluralSeparator,compatibilityJSON:this.options.compatibilityJSON,simplifyPluralSuffix:this.options.simplifyPluralSuffix}),!t||this.options.interpolation.format&&this.options.interpolation.format!==r.interpolation.format||(o.formatter=i(t),o.formatter.init(o,this.options),this.options.interpolation.format=o.formatter.format.bind(o.formatter)),o.interpolator=new Ti(this.options),o.utils={hasLoadedNamespace:this.hasLoadedNamespace.bind(this)},o.backendConnector=new ji(i(this.modules.backend),o.resourceStore,o,this.options),o.backendConnector.on("*",(function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];e.emit(t,...r)})),this.modules.languageDetector&&(o.languageDetector=i(this.modules.languageDetector),o.languageDetector.init&&o.languageDetector.init(o,this.options.detection,this.options)),this.modules.i18nFormat&&(o.i18nFormat=i(this.modules.i18nFormat),o.i18nFormat.init&&o.i18nFormat.init(this)),this.translator=new $i(this.services,this.options),this.translator.on("*",(function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];e.emit(t,...r)})),this.modules.external.forEach((e=>{e.init&&e.init(this)}))}if(this.format=this.options.interpolation.format,n||(n=Ui),this.options.fallbackLng&&!this.services.languageDetector&&!this.options.lng){const e=this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);e.length>0&&"dev"!==e[0]&&(this.options.lng=e[0])}this.services.languageDetector||this.options.lng||this.logger.warn("init: no languageDetector is used and no lng is defined");["getResource","hasResourceBundle","getResourceBundle","getDataByLanguage"].forEach((t=>{this[t]=function(){return e.store[t](...arguments)}}));["addResource","addResources","addResourceBundle","removeResourceBundle"].forEach((t=>{this[t]=function(){return e.store[t](...arguments),e}}));const o=hi(),s=()=>{const e=(e,t)=>{this.isInitialized&&!this.initializedStoreOnce&&this.logger.warn("init: i18next is already initialized. You should call init just once!"),this.isInitialized=!0,this.options.isClone||this.logger.log("initialized",this.options),this.emit("initialized",this.options),o.resolve(t),n(e,t)};if(this.languages&&"v1"!==this.options.compatibilityAPI&&!this.isInitialized)return e(null,this.t.bind(this));this.changeLanguage(this.options.lng,e)};return this.options.resources||!this.options.initImmediate?s():setTimeout(s,0),o}loadResources(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Ui;const n="string"==typeof e?e:this.language;if("function"==typeof e&&(t=e),!this.options.resources||this.options.partialBundledLanguages){if(n&&"cimode"===n.toLowerCase())return t();const e=[],r=t=>{if(!t)return;this.services.languageUtils.toResolveHierarchy(t).forEach((t=>{e.indexOf(t)<0&&e.push(t)}))};if(n)r(n);else{this.services.languageUtils.getFallbackCodes(this.options.fallbackLng).forEach((e=>r(e)))}this.options.preload&&this.options.preload.forEach((e=>r(e))),this.services.backendConnector.load(e,this.options.ns,(e=>{e||this.resolvedLanguage||!this.language||this.setResolvedLanguage(this.language),t(e)}))}else t(null)}reloadResources(e,t,n){const r=hi();return e||(e=this.languages),t||(t=this.options.ns),n||(n=Ui),this.services.backendConnector.reload(e,t,(e=>{r.resolve(),n(e)})),r}use(e){if(!e)throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");if(!e.type)throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");return"backend"===e.type&&(this.modules.backend=e),("logger"===e.type||e.log&&e.warn&&e.error)&&(this.modules.logger=e),"languageDetector"===e.type&&(this.modules.languageDetector=e),"i18nFormat"===e.type&&(this.modules.i18nFormat=e),"postProcessor"===e.type&&Si.addPostProcessor(e),"formatter"===e.type&&(this.modules.formatter=e),"3rdParty"===e.type&&this.modules.external.push(e),this}setResolvedLanguage(e){if(e&&this.languages&&!(["cimode","dev"].indexOf(e)>-1))for(let e=0;e<this.languages.length;e++){const t=this.languages[e];if(!(["cimode","dev"].indexOf(t)>-1)&&this.store.hasLanguageSomeTranslations(t)){this.resolvedLanguage=t;break}}}changeLanguage(e,t){var n=this;this.isLanguageChangingTo=e;const r=hi();this.emit("languageChanging",e);const i=e=>{this.language=e,this.languages=this.services.languageUtils.toResolveHierarchy(e),this.resolvedLanguage=void 0,this.setResolvedLanguage(e)},o=(e,o)=>{o?(i(o),this.translator.changeLanguage(o),this.isLanguageChangingTo=void 0,this.emit("languageChanged",o),this.logger.log("languageChanged",o)):this.isLanguageChangingTo=void 0,r.resolve((function(){return n.t(...arguments)})),t&&t(e,(function(){return n.t(...arguments)}))},s=t=>{e||t||!this.services.languageDetector||(t=[]);const n="string"==typeof t?t:this.services.languageUtils.getBestMatchFromCodes(t);n&&(this.language||i(n),this.translator.language||this.translator.changeLanguage(n),this.services.languageDetector&&this.services.languageDetector.cacheUserLanguage&&this.services.languageDetector.cacheUserLanguage(n)),this.loadResources(n,(e=>{o(e,n)}))};return e||!this.services.languageDetector||this.services.languageDetector.async?!e&&this.services.languageDetector&&this.services.languageDetector.async?0===this.services.languageDetector.detect.length?this.services.languageDetector.detect().then(s):this.services.languageDetector.detect(s):s(e):s(this.services.languageDetector.detect()),r}getFixedT(e,t,n){var r=this;const i=function(e,t){let o;if("object"!=typeof t){for(var s=arguments.length,a=new Array(s>2?s-2:0),l=2;l<s;l++)a[l-2]=arguments[l];o=r.options.overloadTranslationOptionHandler([e,t].concat(a))}else o={...t};o.lng=o.lng||i.lng,o.lngs=o.lngs||i.lngs,o.ns=o.ns||i.ns,o.keyPrefix=o.keyPrefix||n||i.keyPrefix;const c=r.options.keySeparator||".";let p;return p=o.keyPrefix&&Array.isArray(e)?e.map((e=>`${o.keyPrefix}${c}${e}`)):o.keyPrefix?`${o.keyPrefix}${c}${e}`:e,r.t(p,o)};return"string"==typeof e?i.lng=e:i.lngs=e,i.ns=t,i.keyPrefix=n,i}t(){return this.translator&&this.translator.translate(...arguments)}exists(){return this.translator&&this.translator.exists(...arguments)}setDefaultNamespace(e){this.options.defaultNS=e}hasLoadedNamespace(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!this.isInitialized)return this.logger.warn("hasLoadedNamespace: i18next was not initialized",this.languages),!1;if(!this.languages||!this.languages.length)return this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty",this.languages),!1;const n=t.lng||this.resolvedLanguage||this.languages[0],r=!!this.options&&this.options.fallbackLng,i=this.languages[this.languages.length-1];if("cimode"===n.toLowerCase())return!0;const o=(e,t)=>{const n=this.services.backendConnector.state[`${e}|${t}`];return-1===n||2===n};if(t.precheck){const e=t.precheck(this,o);if(void 0!==e)return e}return!!this.hasResourceBundle(n,e)||(!(this.services.backendConnector.backend&&(!this.options.resources||this.options.partialBundledLanguages))||!(!o(n,e)||r&&!o(i,e)))}loadNamespaces(e,t){const n=hi();return this.options.ns?("string"==typeof e&&(e=[e]),e.forEach((e=>{this.options.ns.indexOf(e)<0&&this.options.ns.push(e)})),this.loadResources((e=>{n.resolve(),t&&t(e)})),n):(t&&t(),Promise.resolve())}loadLanguages(e,t){const n=hi();"string"==typeof e&&(e=[e]);const r=this.options.preload||[],i=e.filter((e=>r.indexOf(e)<0));return i.length?(this.options.preload=r.concat(i),this.loadResources((e=>{n.resolve(),t&&t(e)})),n):(t&&t(),Promise.resolve())}dir(e){if(e||(e=this.resolvedLanguage||(this.languages&&this.languages.length>0?this.languages[0]:this.language)),!e)return"rtl";const t=this.services&&this.services.languageUtils||new Ni(Vi());return["ar","shu","sqr","ssh","xaa","yhd","yud","aao","abh","abv","acm","acq","acw","acx","acy","adf","ads","aeb","aec","afb","ajp","apc","apd","arb","arq","ars","ary","arz","auz","avl","ayh","ayl","ayn","ayp","bbz","pga","he","iw","ps","pbt","pbu","pst","prp","prd","ug","ur","ydd","yds","yih","ji","yi","hbo","men","xmn","fa","jpr","peo","pes","prs","dv","sam","ckb"].indexOf(t.getLanguagePartFromCode(e))>-1||e.toLowerCase().indexOf("-arab")>1?"rtl":"ltr"}static createInstance(){return new Zi(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},arguments.length>1?arguments[1]:void 0)}cloneInstance(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Ui;const n=e.forkResourceStore;n&&delete e.forkResourceStore;const r={...this.options,...e,isClone:!0},i=new Zi(r);void 0===e.debug&&void 0===e.prefix||(i.logger=i.logger.clone(e));return["store","services","language"].forEach((e=>{i[e]=this[e]})),i.services={...this.services},i.services.utils={hasLoadedNamespace:i.hasLoadedNamespace.bind(i)},n&&(i.store=new Ei(this.store.data,r),i.services.resourceStore=i.store),i.translator=new $i(i.services,r),i.translator.on("*",(function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];i.emit(e,...n)})),i.init(r,t),i.translator.options=r,i.translator.backendConnector.services.utils={hasLoadedNamespace:i.hasLoadedNamespace.bind(i)},i}toJSON(){return{options:this.options,store:this.store,language:this.language,languages:this.languages,resolvedLanguage:this.resolvedLanguage}}}const qi=Zi.createInstance();qi.createInstance=Zi.createInstance;const Ki=qi.createInstance,Gi=(qi.dir,qi.init,qi.loadResources,qi.reloadResources,qi.use,qi.changeLanguage,qi.getFixedT,qi.t,qi.exists,qi.setDefaultNamespace,qi.hasLoadedNamespace,qi.loadNamespaces,qi.loadLanguages,JSON.parse('{"importFromPc":"FR-Import a BPMN 2.0 file from your computer.","cancel":"FR-Cancel","import":"FR-Import"}')),Wi=Ki({fallbackLng:"en",debug:!0,cleanCode:!0,resources:{en:{bpmnImport:JSON.parse('{"importFromPc":"Import a BPMN 2.0 file from your computer.","cancel":"Cancel","import":"Import"}')},fr:{bpmnImport:{}},na:{bpmnImport:Gi}},defaultNS:"bpmnImport"});Wi.init();const Ji=Wi;class Yi{static async setLanguage(e){await Ji.changeLanguage(e)}static getInstance(){return this._translationService||(this._translationService=new Yi,Ji.changeLanguage(navigator.language)),this._translationService}static resetInstance(){return this._translationService=null,this.getInstance()}getTranslation(e){return`${Ji.t(e)}`}getTranslationAndReplace(e,t){let n=`${Ji.t(e)}`;return t.forEach(((e,t)=>{n=n.replace(`{${t}}`,e)})),n}}var Xi=function(e,t,n,r){var i,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,n,s):i(t,n))||s);return o>3&&s&&Object.defineProperty(t,n,s),s};let Qi=class extends(d(r.oi)){static get scopedElements(){return{"ne-file-picker":customElements.get("ne-file-picker"),"ne-button-set":customElements.get("ne-button-set"),"ne-button":customElements.get("ne-button"),"ne-banner":customElements.get("ne-banner")}}static get styles(){return li}constructor(){super(),this._onCancelClick=()=>{this._content=null,this._eventService.triggerCanceled()},this._onImportClick=()=>{this._eventService.triggerImportCompleted(this._content)},this._validationFailedBanner=()=>this._validationFailedReason?r.dy`<ne-banner type="danger">
        ${this._validationFailedReason}
      </ne-banner>`:r.dy``,this._validationService=ai.getInstance(),this._eventService=Sn.getInstance(),this._translationService=Yi.getInstance()}_onChange(e){if(e instanceof FileList&&1===e?.length){const t=e[0],n=new FileReader;n.readAsText(t),n.onload=e=>{const n="string"==typeof e.target.result?e.target.result:Buffer.from(e.target.result).toString();this._validationService.validate(n).then((e=>{e.valid?(this._content=n,this._validationFailedReason=null):(this._content=null,this._validationFailedReason=`[${t.name}] is not a supported file type. Please select a BPMN 2.0 file.`)})).catch((e=>{this._content=null,this._eventService.triggerError("Unexpected error during validation. See error property for details.",e)}))}}else this._content=null,this._validationFailedReason=null}render(){return r.dy`
      <div class="container">
        <ne-label class="content-label"
          >${this._translationService.getTranslation("importFromPc")}</ne-label
        >
        <div class="content-picker">
          <ne-file-picker
            .singleFile=${!0}
            .onChange=${e=>this._onChange(e)}
            .accepts=${".bpmn, .xml"}
          >
          </ne-file-picker>
          ${this._validationFailedBanner()}
        </div>
        <ne-button-set show-divider-top="true">
          <ne-button
            class="right-start"
            variant="secondary"
            @ne-click="${this._onCancelClick}"
          >
            ${this._translationService.getTranslation("cancel")}
          </ne-button>
          <ne-button
            variant="primary"
            @ne-click="${this._onImportClick}"
            .disabled=${!this._content}
          >
            ${this._translationService.getTranslation("import")}
          </ne-button>
        </ne-button-set>
      </div>
    `}};Xi([s()],Qi.prototype,"_content",void 0),Xi([s()],Qi.prototype,"_validationFailedReason",void 0),Qi=Xi([i("pi-import-from-file")],Qi);var eo=function(e,t,n,r){var i,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,n,s):i(t,n))||s);return o>3&&s&&Object.defineProperty(t,n,s),s};let to=class extends(d(r.oi)){static get scopedElements(){return{"pi-import-list":customElements.get("pi-import-list"),"pi-import-from-file":customElements.get("pi-import-from-file"),"ne-label":customElements.get("ne-label")}}static get styles(){return R}constructor(){super(),this._onImportModuleSelected=e=>{this._selectedModule=e.importModule},this._onCompleted=e=>{this._validationService.validate(e.content).then((t=>{t.valid?Sn.fireExternal(this,"pi-onImportComplete",{detail:e,composed:!0,bubbles:!0}):this._eventService.triggerError("Validation Failed. Content is not valid")})).catch((e=>{this._eventService.triggerError("Unexpected error during validation. See error property for details.",e)}))},this._onError=e=>{Sn.fireExternal(this,"pi-onImportError",{detail:e,composed:!0,bubbles:!0})},this._onCancel=()=>{this._selectedModule=null,Sn.fireExternal(this,"pi-onImportCancel",{composed:!0,bubbles:!0})},this._eventService=Sn.resetInstance(),this._validationService=ai.resetInstance()}_getImportModulesInfo(){return[{displayName:"My Computer",template:r.dy`<pi-import-from-file></pi-import-from-file>`}]}connectedCallback(){super.connectedCallback&&super.connectedCallback(),this._eventService.importModuleSelectedSubject.subscribe({next:this._onImportModuleSelected}),this._eventService.importCompleteSubject.subscribe({next:this._onCompleted}),this._eventService.errorSubject.subscribe({next:this._onError}),this._eventService.cancelSubject.subscribe({next:this._onCancel})}disconnectedCallback(){super.disconnectedCallback&&super.disconnectedCallback()}render(){if(!this._selectedModule){const e=this._getImportModulesInfo();if(0===e.length)return r.dy`<ne-label>No Imports</ne-label>`;if(1!==e.length)return r.dy`<pi-import-list .importModules=${e}></pi-import-list>`;[this._selectedModule]=e}return this._selectedModule.template}};eo([s()],to.prototype,"_selectedModule",void 0),to=eo([i("pi-bpmn-import")],to)},9793:(e,t,n)=>{n.d(t,{ec:()=>c,i1:()=>p,iv:()=>l});const r=window,i=r.ShadowRoot&&(void 0===r.ShadyCSS||r.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,o=Symbol(),s=new WeakMap;class a{constructor(e,t,n){if(this._$cssResult$=!0,n!==o)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=e,this.t=t}get styleSheet(){let e=this.o;const t=this.t;if(i&&void 0===e){const n=void 0!==t&&1===t.length;n&&(e=s.get(t)),void 0===e&&((this.o=e=new CSSStyleSheet).replaceSync(this.cssText),n&&s.set(t,e))}return e}toString(){return this.cssText}}const l=(e,...t)=>{const n=1===e.length?e[0]:t.reduce(((t,n,r)=>t+(e=>{if(!0===e._$cssResult$)return e.cssText;if("number"==typeof e)return e;throw Error("Value passed to 'css' function must be a 'css' function result: "+e+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(n)+e[r+1]),e[0]);return new a(n,e,o)},c=(e,t)=>{i?e.adoptedStyleSheets=t.map((e=>e instanceof CSSStyleSheet?e:e.styleSheet)):t.forEach((t=>{const n=document.createElement("style"),i=r.litNonce;void 0!==i&&n.setAttribute("nonce",i),n.textContent=t.cssText,e.appendChild(n)}))},p=i?e=>e:e=>e instanceof CSSStyleSheet?(e=>{let t="";for(const n of e.cssRules)t+=n.cssText;return(e=>new a("string"==typeof e?e:e+"",void 0,o))(t)})(e):e},3311:(e,t,n)=>{var r;n.d(t,{Jb:()=>S,Ld:()=>_,_$LH:()=>V,dy:()=>E,sY:()=>U});const i=window,o=i.trustedTypes,s=o?o.createPolicy("lit-html",{createHTML:e=>e}):void 0,a="$lit$",l=`lit$${(Math.random()+"").slice(9)}$`,c="?"+l,p=`<${c}>`,u=document,d=()=>u.createComment(""),h=e=>null===e||"object"!=typeof e&&"function"!=typeof e,f=Array.isArray,m=e=>f(e)||"function"==typeof(null==e?void 0:e[Symbol.iterator]),g="[ \t\n\f\r]",y=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,v=/-->/g,A=/>/g,b=RegExp(`>|${g}(?:([^\\s"'>=/]+)(${g}*=${g}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),C=/'/g,x=/"/g,w=/^(?:script|style|textarea|title)$/i,k=e=>(t,...n)=>({_$litType$:e,strings:t,values:n}),E=k(1),S=(k(2),Symbol.for("lit-noChange")),_=Symbol.for("lit-nothing"),$=new WeakMap,R=u.createTreeWalker(u,129,null,!1);function N(e,t){if(!Array.isArray(e)||!e.hasOwnProperty("raw"))throw Error("invalid template strings array");return void 0!==s?s.createHTML(t):t}const P=(e,t)=>{const n=e.length-1,r=[];let i,o=2===t?"<svg>":"",s=y;for(let t=0;t<n;t++){const n=e[t];let c,u,d=-1,h=0;for(;h<n.length&&(s.lastIndex=h,u=s.exec(n),null!==u);)h=s.lastIndex,s===y?"!--"===u[1]?s=v:void 0!==u[1]?s=A:void 0!==u[2]?(w.test(u[2])&&(i=RegExp("</"+u[2],"g")),s=b):void 0!==u[3]&&(s=b):s===b?">"===u[0]?(s=null!=i?i:y,d=-1):void 0===u[1]?d=-2:(d=s.lastIndex-u[2].length,c=u[1],s=void 0===u[3]?b:'"'===u[3]?x:C):s===x||s===C?s=b:s===v||s===A?s=y:(s=b,i=void 0);const f=s===b&&e[t+1].startsWith("/>")?" ":"";o+=s===y?n+p:d>=0?(r.push(c),n.slice(0,d)+a+n.slice(d)+l+f):n+l+(-2===d?(r.push(void 0),t):f)}return[N(e,o+(e[n]||"<?>")+(2===t?"</svg>":"")),r]};class M{constructor({strings:e,_$litType$:t},n){let r;this.parts=[];let i=0,s=0;const p=e.length-1,u=this.parts,[h,f]=P(e,t);if(this.el=M.createElement(h,n),R.currentNode=this.el.content,2===t){const e=this.el.content,t=e.firstChild;t.remove(),e.append(...t.childNodes)}for(;null!==(r=R.nextNode())&&u.length<p;){if(1===r.nodeType){if(r.hasAttributes()){const e=[];for(const t of r.getAttributeNames())if(t.endsWith(a)||t.startsWith(l)){const n=f[s++];if(e.push(t),void 0!==n){const e=r.getAttribute(n.toLowerCase()+a).split(l),t=/([.?@])?(.*)/.exec(n);u.push({type:1,index:i,name:t[2],strings:e,ctor:"."===t[1]?F:"?"===t[1]?I:"@"===t[1]?z:L})}else u.push({type:6,index:i})}for(const t of e)r.removeAttribute(t)}if(w.test(r.tagName)){const e=r.textContent.split(l),t=e.length-1;if(t>0){r.textContent=o?o.emptyScript:"";for(let n=0;n<t;n++)r.append(e[n],d()),R.nextNode(),u.push({type:2,index:++i});r.append(e[t],d())}}}else if(8===r.nodeType)if(r.data===c)u.push({type:2,index:i});else{let e=-1;for(;-1!==(e=r.data.indexOf(l,e+1));)u.push({type:7,index:i}),e+=l.length-1}i++}}static createElement(e,t){const n=u.createElement("template");return n.innerHTML=e,n}}function B(e,t,n=e,r){var i,o,s,a;if(t===S)return t;let l=void 0!==r?null===(i=n._$Co)||void 0===i?void 0:i[r]:n._$Cl;const c=h(t)?void 0:t._$litDirective$;return(null==l?void 0:l.constructor)!==c&&(null===(o=null==l?void 0:l._$AO)||void 0===o||o.call(l,!1),void 0===c?l=void 0:(l=new c(e),l._$AT(e,n,r)),void 0!==r?(null!==(s=(a=n)._$Co)&&void 0!==s?s:a._$Co=[])[r]=l:n._$Cl=l),void 0!==l&&(t=B(e,l._$AS(e,t.values),l,r)),t}class O{constructor(e,t){this._$AV=[],this._$AN=void 0,this._$AD=e,this._$AM=t}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(e){var t;const{el:{content:n},parts:r}=this._$AD,i=(null!==(t=null==e?void 0:e.creationScope)&&void 0!==t?t:u).importNode(n,!0);R.currentNode=i;let o=R.nextNode(),s=0,a=0,l=r[0];for(;void 0!==l;){if(s===l.index){let t;2===l.type?t=new D(o,o.nextSibling,this,e):1===l.type?t=new l.ctor(o,l.name,l.strings,this,e):6===l.type&&(t=new j(o,this,e)),this._$AV.push(t),l=r[++a]}s!==(null==l?void 0:l.index)&&(o=R.nextNode(),s++)}return R.currentNode=u,i}v(e){let t=0;for(const n of this._$AV)void 0!==n&&(void 0!==n.strings?(n._$AI(e,n,t),t+=n.strings.length-2):n._$AI(e[t])),t++}}class D{constructor(e,t,n,r){var i;this.type=2,this._$AH=_,this._$AN=void 0,this._$AA=e,this._$AB=t,this._$AM=n,this.options=r,this._$Cp=null===(i=null==r?void 0:r.isConnected)||void 0===i||i}get _$AU(){var e,t;return null!==(t=null===(e=this._$AM)||void 0===e?void 0:e._$AU)&&void 0!==t?t:this._$Cp}get parentNode(){let e=this._$AA.parentNode;const t=this._$AM;return void 0!==t&&11===(null==e?void 0:e.nodeType)&&(e=t.parentNode),e}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(e,t=this){e=B(this,e,t),h(e)?e===_||null==e||""===e?(this._$AH!==_&&this._$AR(),this._$AH=_):e!==this._$AH&&e!==S&&this._(e):void 0!==e._$litType$?this.g(e):void 0!==e.nodeType?this.$(e):m(e)?this.T(e):this._(e)}k(e){return this._$AA.parentNode.insertBefore(e,this._$AB)}$(e){this._$AH!==e&&(this._$AR(),this._$AH=this.k(e))}_(e){this._$AH!==_&&h(this._$AH)?this._$AA.nextSibling.data=e:this.$(u.createTextNode(e)),this._$AH=e}g(e){var t;const{values:n,_$litType$:r}=e,i="number"==typeof r?this._$AC(e):(void 0===r.el&&(r.el=M.createElement(N(r.h,r.h[0]),this.options)),r);if((null===(t=this._$AH)||void 0===t?void 0:t._$AD)===i)this._$AH.v(n);else{const e=new O(i,this),t=e.u(this.options);e.v(n),this.$(t),this._$AH=e}}_$AC(e){let t=$.get(e.strings);return void 0===t&&$.set(e.strings,t=new M(e)),t}T(e){f(this._$AH)||(this._$AH=[],this._$AR());const t=this._$AH;let n,r=0;for(const i of e)r===t.length?t.push(n=new D(this.k(d()),this.k(d()),this,this.options)):n=t[r],n._$AI(i),r++;r<t.length&&(this._$AR(n&&n._$AB.nextSibling,r),t.length=r)}_$AR(e=this._$AA.nextSibling,t){var n;for(null===(n=this._$AP)||void 0===n||n.call(this,!1,!0,t);e&&e!==this._$AB;){const t=e.nextSibling;e.remove(),e=t}}setConnected(e){var t;void 0===this._$AM&&(this._$Cp=e,null===(t=this._$AP)||void 0===t||t.call(this,e))}}class L{constructor(e,t,n,r,i){this.type=1,this._$AH=_,this._$AN=void 0,this.element=e,this.name=t,this._$AM=r,this.options=i,n.length>2||""!==n[0]||""!==n[1]?(this._$AH=Array(n.length-1).fill(new String),this.strings=n):this._$AH=_}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(e,t=this,n,r){const i=this.strings;let o=!1;if(void 0===i)e=B(this,e,t,0),o=!h(e)||e!==this._$AH&&e!==S,o&&(this._$AH=e);else{const r=e;let s,a;for(e=i[0],s=0;s<i.length-1;s++)a=B(this,r[n+s],t,s),a===S&&(a=this._$AH[s]),o||(o=!h(a)||a!==this._$AH[s]),a===_?e=_:e!==_&&(e+=(null!=a?a:"")+i[s+1]),this._$AH[s]=a}o&&!r&&this.j(e)}j(e){e===_?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=e?e:"")}}class F extends L{constructor(){super(...arguments),this.type=3}j(e){this.element[this.name]=e===_?void 0:e}}const T=o?o.emptyScript:"";class I extends L{constructor(){super(...arguments),this.type=4}j(e){e&&e!==_?this.element.setAttribute(this.name,T):this.element.removeAttribute(this.name)}}class z extends L{constructor(e,t,n,r,i){super(e,t,n,r,i),this.type=5}_$AI(e,t=this){var n;if((e=null!==(n=B(this,e,t,0))&&void 0!==n?n:_)===S)return;const r=this._$AH,i=e===_&&r!==_||e.capture!==r.capture||e.once!==r.once||e.passive!==r.passive,o=e!==_&&(r===_||i);i&&this.element.removeEventListener(this.name,this,r),o&&this.element.addEventListener(this.name,this,e),this._$AH=e}handleEvent(e){var t,n;"function"==typeof this._$AH?this._$AH.call(null!==(n=null===(t=this.options)||void 0===t?void 0:t.host)&&void 0!==n?n:this.element,e):this._$AH.handleEvent(e)}}class j{constructor(e,t,n){this.element=e,this.type=6,this._$AN=void 0,this._$AM=t,this.options=n}get _$AU(){return this._$AM._$AU}_$AI(e){B(this,e)}}const V={O:a,P:l,A:c,C:1,M:P,L:O,D:m,R:B,I:D,V:L,H:I,N:z,U:F,F:j},H=i.litHtmlPolyfillSupport;null==H||H(M,D),(null!==(r=i.litHtmlVersions)&&void 0!==r?r:i.litHtmlVersions=[]).push("2.7.5");const U=(e,t,n)=>{var r,i;const o=null!==(r=null==n?void 0:n.renderBefore)&&void 0!==r?r:t;let s=o._$litPart$;if(void 0===s){const e=null!==(i=null==n?void 0:n.renderBefore)&&void 0!==i?i:null;o._$litPart$=s=new D(t.insertBefore(d(),e),e,void 0,null!=n?n:{})}return s._$AI(e),s}},3192:(e,t,n)=>{n.d(t,{oi:()=>y,iv:()=>i.iv,dy:()=>g.dy,Ld:()=>g.Ld});var r,i=n(9793);const o=window,s=o.trustedTypes,a=s?s.emptyScript:"",l=o.reactiveElementPolyfillSupport,c={toAttribute(e,t){switch(t){case Boolean:e=e?a:null;break;case Object:case Array:e=null==e?e:JSON.stringify(e)}return e},fromAttribute(e,t){let n=e;switch(t){case Boolean:n=null!==e;break;case Number:n=null===e?null:Number(e);break;case Object:case Array:try{n=JSON.parse(e)}catch(e){n=null}}return n}},p=(e,t)=>t!==e&&(t==t||e==e),u={attribute:!0,type:String,converter:c,reflect:!1,hasChanged:p},d="finalized";class h extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(e){var t;this.finalize(),(null!==(t=this.h)&&void 0!==t?t:this.h=[]).push(e)}static get observedAttributes(){this.finalize();const e=[];return this.elementProperties.forEach(((t,n)=>{const r=this._$Ep(n,t);void 0!==r&&(this._$Ev.set(r,n),e.push(r))})),e}static createProperty(e,t=u){if(t.state&&(t.attribute=!1),this.finalize(),this.elementProperties.set(e,t),!t.noAccessor&&!this.prototype.hasOwnProperty(e)){const n="symbol"==typeof e?Symbol():"__"+e,r=this.getPropertyDescriptor(e,n,t);void 0!==r&&Object.defineProperty(this.prototype,e,r)}}static getPropertyDescriptor(e,t,n){return{get(){return this[t]},set(r){const i=this[e];this[t]=r,this.requestUpdate(e,i,n)},configurable:!0,enumerable:!0}}static getPropertyOptions(e){return this.elementProperties.get(e)||u}static finalize(){if(this.hasOwnProperty(d))return!1;this[d]=!0;const e=Object.getPrototypeOf(this);if(e.finalize(),void 0!==e.h&&(this.h=[...e.h]),this.elementProperties=new Map(e.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const e=this.properties,t=[...Object.getOwnPropertyNames(e),...Object.getOwnPropertySymbols(e)];for(const n of t)this.createProperty(n,e[n])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(e){const t=[];if(Array.isArray(e)){const n=new Set(e.flat(1/0).reverse());for(const e of n)t.unshift((0,i.i1)(e))}else void 0!==e&&t.push((0,i.i1)(e));return t}static _$Ep(e,t){const n=t.attribute;return!1===n?void 0:"string"==typeof n?n:"string"==typeof e?e.toLowerCase():void 0}u(){var e;this._$E_=new Promise((e=>this.enableUpdating=e)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(e=this.constructor.h)||void 0===e||e.forEach((e=>e(this)))}addController(e){var t,n;(null!==(t=this._$ES)&&void 0!==t?t:this._$ES=[]).push(e),void 0!==this.renderRoot&&this.isConnected&&(null===(n=e.hostConnected)||void 0===n||n.call(e))}removeController(e){var t;null===(t=this._$ES)||void 0===t||t.splice(this._$ES.indexOf(e)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((e,t)=>{this.hasOwnProperty(t)&&(this._$Ei.set(t,this[t]),delete this[t])}))}createRenderRoot(){var e;const t=null!==(e=this.shadowRoot)&&void 0!==e?e:this.attachShadow(this.constructor.shadowRootOptions);return(0,i.ec)(t,this.constructor.elementStyles),t}connectedCallback(){var e;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostConnected)||void 0===t?void 0:t.call(e)}))}enableUpdating(e){}disconnectedCallback(){var e;null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostDisconnected)||void 0===t?void 0:t.call(e)}))}attributeChangedCallback(e,t,n){this._$AK(e,n)}_$EO(e,t,n=u){var r;const i=this.constructor._$Ep(e,n);if(void 0!==i&&!0===n.reflect){const o=(void 0!==(null===(r=n.converter)||void 0===r?void 0:r.toAttribute)?n.converter:c).toAttribute(t,n.type);this._$El=e,null==o?this.removeAttribute(i):this.setAttribute(i,o),this._$El=null}}_$AK(e,t){var n;const r=this.constructor,i=r._$Ev.get(e);if(void 0!==i&&this._$El!==i){const e=r.getPropertyOptions(i),o="function"==typeof e.converter?{fromAttribute:e.converter}:void 0!==(null===(n=e.converter)||void 0===n?void 0:n.fromAttribute)?e.converter:c;this._$El=i,this[i]=o.fromAttribute(t,e.type),this._$El=null}}requestUpdate(e,t,n){let r=!0;void 0!==e&&(((n=n||this.constructor.getPropertyOptions(e)).hasChanged||p)(this[e],t)?(this._$AL.has(e)||this._$AL.set(e,t),!0===n.reflect&&this._$El!==e&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(e,n))):r=!1),!this.isUpdatePending&&r&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(e){Promise.reject(e)}const e=this.scheduleUpdate();return null!=e&&await e,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var e;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((e,t)=>this[t]=e)),this._$Ei=void 0);let t=!1;const n=this._$AL;try{t=this.shouldUpdate(n),t?(this.willUpdate(n),null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostUpdate)||void 0===t?void 0:t.call(e)})),this.update(n)):this._$Ek()}catch(e){throw t=!1,this._$Ek(),e}t&&this._$AE(n)}willUpdate(e){}_$AE(e){var t;null===(t=this._$ES)||void 0===t||t.forEach((e=>{var t;return null===(t=e.hostUpdated)||void 0===t?void 0:t.call(e)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(e)),this.updated(e)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(e){return!0}update(e){void 0!==this._$EC&&(this._$EC.forEach(((e,t)=>this._$EO(t,this[t],e))),this._$EC=void 0),this._$Ek()}updated(e){}firstUpdated(e){}}h[d]=!0,h.elementProperties=new Map,h.elementStyles=[],h.shadowRootOptions={mode:"open"},null==l||l({ReactiveElement:h}),(null!==(r=o.reactiveElementVersions)&&void 0!==r?r:o.reactiveElementVersions=[]).push("1.6.2");var f,m,g=n(3311);class y extends h{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var e,t;const n=super.createRenderRoot();return null!==(e=(t=this.renderOptions).renderBefore)&&void 0!==e||(t.renderBefore=n.firstChild),n}update(e){const t=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(e),this._$Do=(0,g.sY)(t,this.renderRoot,this.renderOptions)}connectedCallback(){var e;super.connectedCallback(),null===(e=this._$Do)||void 0===e||e.setConnected(!0)}disconnectedCallback(){var e;super.disconnectedCallback(),null===(e=this._$Do)||void 0===e||e.setConnected(!1)}render(){return g.Jb}}y.finalized=!0,y._$litElement$=!0,null===(f=globalThis.litElementHydrateSupport)||void 0===f||f.call(globalThis,{LitElement:y});const v=globalThis.litElementPolyfillSupport;null==v||v({LitElement:y});(null!==(m=globalThis.litElementVersions)&&void 0!==m?m:globalThis.litElementVersions=[]).push("3.3.2")}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.m=e,n.c=t,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{n.S={};var e={},t={};n.I=(r,i)=>{i||(i=[]);var o=t[r];if(o||(o=t[r]={}),!(i.indexOf(o)>=0)){if(i.push(o),e[r])return e[r];n.o(n.S,r)||(n.S[r]={});n.S[r];var s=[];return s.length?e[r]=Promise.all(s).then((()=>e[r]=1)):e[r]=1}}})(),n.nc=void 0;n(6063)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,