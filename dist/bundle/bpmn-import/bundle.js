/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e,t,n={6941:(e,t,n)=>{n.r(t),n.d(t,{dropzone:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M8 4.444a.445.445 0 0 1 .444.401V8.21l.89-.871a.432.432 0 0 1 .577 0c.08.067.13.163.142.266a.514.514 0 0 1-.106.296L8 9.778 6.059 7.844a.378.378 0 0 1-.103-.297.435.435 0 0 1 .72-.267l.888.872V4.845a.444.444 0 0 1 .441-.4H8Z"
  />
  <path
    fill="currentColor"
    d="M13.778 12.444H2.222a.444.444 0 0 1-.423-.58l1.156-3.556A.444.444 0 0 1 3.378 8H5.11a.444.444 0 0 1 0 .889H3.703l-.87 2.667h10.333l-.87-2.667H10.89a.445.445 0 0 1 0-.889h1.733a.444.444 0 0 1 .423.307l1.156 3.555a.445.445 0 0 1-.423.582Z"
  />
</svg>`},4514:(e,t,n)=>{n.r(t),n.d(t,{file:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M9.778 1.778H3.504a.84.84 0 0 0-.837.837v11.733a.758.758 0 0 0 .758.759h9.15a.759.759 0 0 0 .758-.754v-9.02L9.778 1.778Zm0 3.555V2.667l2.666 2.666H9.778Z"
  />
</svg>`},7798:(e,t,n)=>{n.r(t),n.d(t,{trash:()=>r});const r=n(3192).dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
>
  <path
    fill="currentColor"
    d="M12.444 5.769a1.785 1.785 0 0 0-.088-.436h-8.73a1.571 1.571 0 0 0-.068.436v7.862a1.712 1.712 0 0 0 1.52 1.48h5.89a1.664 1.664 0 0 0 1.476-1.48V5.77Zm-6.222 7.564h-.889V7.111c0-.883.89-.883.89 0v6.222Zm4.445 0h-.89V7.111c0-.883.89-.883.89 0v6.222Zm2.05-10.666h-2.05V1.482a.593.593 0 0 0-.593-.593H5.916a.585.585 0 0 0-.583.593v1.185H3.26a.592.592 0 0 0-.593.593v.629a.593.593 0 0 0 .593.593h9.462a.593.593 0 0 0 .593-.593l.018-.63a.608.608 0 0 0-.611-.592h-.005Zm-2.94 0H6.223v-.89h3.556v.89Z"
  />
</svg>`},9526:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(272),i=n.n(r),o=n(2609),s=n.n(o)()(i());s.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600&family=Open+Sans:ital,wght@0,300;0,400;0,600;0,700;0,800;1,400&display=swap);"]),s.push([e.id,":root{--nx-sand-10: #f7f1dd;--nx-white: #fff;--nx-yellow-60: #e1b200;--nx-yellow-50: #ffcf1a;--nx-yellow-40: #ffd948;--nx-red-60: #b80000;--nx-red-50: #e60000;--nx-red-40: #ff1f1f;--nx-red-10: #ffc7c7;--nx-green-60: #006c2d;--nx-green-50: #008738;--nx-green-40: #00d257;--nx-green-10: #b6ffd4;--nx-orange-60: #f56900;--nx-blue-90: #001f3d;--nx-blue-80: #003870;--nx-blue-70: #0052a3;--nx-blue-60: #006bd6;--nx-blue-50: #0a85ff;--nx-blue-40: #3d9eff;--nx-blue-30: #70b8ff;--nx-blue-20: #a3d1ff;--nx-blue-10: #d6ebff;--nx-blue-5: #f0f7ff;--nx-violet-90: #200c34;--nx-violet-80: #3f1868;--nx-violet-70: #5f249b;--nx-violet-60: #7f30cf;--nx-violet-50: #9f64db;--nx-violet-40: #b283e2;--nx-violet-30: #c5a2e9;--nx-violet-20: #d9c1f1;--nx-violet-10: #ece0f8;--nx-grey-90: #161718;--nx-grey-80: #2c2e30;--nx-grey-70: #414548;--nx-grey-60: #575c61;--nx-grey-50: #6d7379;--nx-grey-40: #898f94;--nx-grey-30: #a7abaf;--nx-grey-20: #c4c7ca;--nx-grey-10: #e2e3e4;--nx-grey-5: #eff0f0;--nx-grey-2: #fafafa;--overlay: rgba(109 115 121 60%);--overlay-loading: rgba(250 250 250 80%);--onlight-hover-background-color: #f4f9ff;--onlight-selected-background-color: #e8f3ff;--globalnav-background-color: var(--nx-blue-80);--globalnav-text-color: var(--nx-white);--sidenav-background-color: var(--nx-grey-5);--body-primary-background-color: var(--nx-grey-2);--body-secondary-background-color: var(--nx-grey-5);--content-background-color: var(--nx-white);--content-extension-background-color: var(--nx-grey-10);--toolbar-background-color: var(--nx-white);--toolbar-text-color: var(--nx-grey-90);--primary-text-color: var(--nx-grey-90);--disabled-text-color: var(--nx-grey-70);--error-text-color: var(--nx-red-50);--destructive-text-color: var(--nx-red-60);--success-text-color: var(--nx-green-50);--header-text-color: var(--nx-orange-60);--subheader-text-color: var(--nx-grey-60);--placeholder-text-color: var(--nx-grey-50);--hyperlink-text-color: var(--nx-blue-60);--hyperlink-disabled-text-color: var(--nx-grey-70);--block-primary-background-color: var(--nx-blue-60);--block-primary-border-color: var(--nx-blue-70);--block-primary-text-color: var(--nx-white);--block-secondary-background-color: hsla(0deg 0% 0% 0%);--block-secondary-border-color: hsla(0deg 0% 0% 0%);--block-secondary-text-color: var(--nx-grey-90);--block-success-background-color: var(--nx-green-50);--block-success-border-color: var(--nx-green-60);--block-success-text-color: var(--nx-white);--block-error-background-color: var(--nx-red-50);--block-error-border-color: var(--nx-red-60);--block-error-text-color: var(--nx-white);--block-warning-background-color: var(--nx-yellow-50);--block-warning-border-color: var(--nx-yellow-60);--block-warning-text-color: var(--nx-grey-90);--button-primary-hover-background-color: #1477db;--button-primary-hover-text-color: #e2eefa;--button-secondary-background-color: var(--nx-white);--button-secondary-border-color: var(--nx-grey-10);--button-secondary-text-color: var(--nx-blue-60);--button-secondary-hover-background-color: var(--onlight-hover-background-color);--button-secondary-selected-background-color: var(--onlight-selected-background-color);--button-secondary-hover-text-color: #2f87df;--button-text-background-color: hsla(0deg 0% 0% 0%);--button-text-border-color: hsla(0deg 0% 0% 0%);--button-text-text-color: var(--nx-blue-60);--button-text-hover-background-color: var(--onlight-hover-background-color);--button-text-hover-text-color: var(--secondary-button-hover-text-color);--button-destructive-background-color: var(--nx-white);--button-destructive-border-color: var(--nx-grey-10);--button-destructive-text-color: var(--nx-red-50);--button-destructive-hover-background-color: var(--onlight-hover-background-color);--button-destructive-hover-text-color: var(--nx-red-60);--button-disabled-background-color: var(--nx-grey-20);--button-disabled-border-color: hsla(0deg 0% 0% 0%);--button-disabled-text-color: var(--nx-grey-70);--divider-line-color: var(--nx-grey-10);--input-background-color: var(--nx-white);--input-border-color: var(--nx-grey-40);--input-text-color: var(--primary-text-color);--input-placeholder-text-color: var(--placeholder-text-color);--input-focus-border-color: var(--nx-blue-60);--input-error-color: var(--nx-red-50);--input-error-text-color: var(--nx-white);--input-warning-color: var(--nx-yellow-50);--input-warning-text-color: var(--primary-text-color);--input-information-color: var(--nx-blue-60);--input-information-text-color: var(--nx-white);--input-disabled-background-color: var(--nx-grey-20);--input-disabled-border-color: hsla(0deg 0% 0% 0%);--input-disabled-text-color: var(--disabled-text-color);--input-xfix-background-color: var(--nx-grey-20);--input-xfix-border-color: var(--nx-grey-40);--input-xfix-text-color: var(--nx-grey-70);--input-pills-background-color: var(--nx-white);--input-pills-border-color: var(--nx-grey-90);--input-pills-text-color: var(--nx-grey-90);--input-block-unselected-background-color: var(--nx-white);--input-block-unselected-border-color: var(--nx-grey-60);--input-block-unselected-disabled-background-color: var(--nx-white);--input-block-unselected-disabled-border-color: var(--nx-grey-40);--input-block-selected-background-color: var(--nx-blue-60);--input-block-selected-border-color: hsla(0deg 0% 0% 0%);--input-block-selected-disabled-background-color: var(--nx-grey-40);--input-block-selected-disabled-border-color: hsla(0deg 0% 0% 0%);--input-block-hover-background-color: var(--onlight-hover-background-color);--list-group-text-color: var(--nx-grey-60);--list-item-hover-background-color: var(--onlight-hover-background-color);--list-item-selected-background-color: var(--onlight-selected-background-color);--list-item-subtext-color: var(--nx-grey-50);--list-action-background-color: var(--onlight-hover-background-color);--list-action-border-color: var(--nx-grey-5);--list-action-text-color: var(--hyperlink-text-color);--global-header-background-color: var(--nx-blue-80)}:root{--nx-font-family-body: Open Sans, helvetica, arial, sans-serif;--nx-font-family-heading: Montserrat, helvetica, arial, sans-serif}:root{--ne-ref-color-violet-20: #D9C1F1;--ne-ref-color-violet-60: #7F30CF;--ne-ref-color-grey-90-20: #16171820;--ne-ref-color-green-40: #00D257;--ne-ref-color-green-50: #008738;--ne-ref-color-green-60: #006c2d;--ne-ref-color-yellow-60: #E1B200;--ne-ref-color-yellow-50: #FFCF1A;--ne-ref-color-yellow-40: #FFD948;--ne-ref-color-yellow-10: #FFF5D1;--ne-ref-color-grey-02: #FAFAFA;--ne-ref-color-grey-05: #EFF0F0;--ne-ref-color-grey-10: #E2E3E4;--ne-ref-color-grey-20: #C4C7CA;--ne-ref-color-grey-30: #A7ABAF;--ne-ref-color-grey40: #898F94;--ne-ref-color-grey-50: #6D7379;--ne-ref-color-grey-60: #575C61;--ne-ref-color-grey-70: #414548;--ne-ref-color-grey-80: #2C2E30;--ne-ref-color-grey-90: #161718;--ne-ref-color-red-10: #FFC7C7;--ne-ref-color-red-20: #FF8F8F;--ne-ref-color-red-30: #FF5757;--ne-ref-color-red-40: #FF1F1F;--ne-ref-color-red-50: #E60000;--ne-ref-color-red-60: #B80000;--ne-ref-color-red-70: #7C0D0E;--ne-ref-color-red-80: #530909;--ne-ref-color-red-90: #290405;--ne-ref-color-blue-05: #F0F7FF;--ne-ref-color-blue-10: #D6EBFF;--ne-ref-color-blue-20: #A3D1FF;--ne-ref-color-blue-30: #70B8FF;--ne-ref-color-blue-40: #3D9EFF;--ne-ref-color-blue-50: #0A85FF;--ne-ref-color-blue-60: #006BD6;--ne-ref-color-blue-70: #0052A3;--ne-ref-color-blue-80: #003870;--ne-ref-color-blue-90: #001F3D;--ne-ref-color-nintex-orange: #F56900;--ne-ref-color-white: #ffffff}:root{--ne-ref-border-radius-circle: 50%;--ne-ref-border-radius-large: 0.5em;--ne-ref-border-radius-medium: .25em;--ne-ref-border-radius-small: 0.125em;--ne-ref-border-radius-none: 0}:root{--ne-ref-spacing-xxx-large: 3em;--ne-ref-spacing-xx-large: 2.5em;--ne-ref-spacing-x-large: 2em;--ne-ref-spacing-large: 1.5em;--ne-ref-spacing-medium: 1em;--ne-ref-spacing-small: 0.75em;--ne-ref-spacing-x-small: 0.5em;--ne-ref-spacing-xx-small: 0.25em;--ne-ref-spacing-xxx-small: 0.125em;--ne-ref-spacing-none: 0}:root{--ne-ref-font-size-09: 1.75em;--ne-ref-font-size-08: 1.5em;--ne-ref-font-size-07: 1.25em;--ne-ref-font-size-06: 1.125em;--ne-ref-font-size-05: 1em;--ne-ref-font-size-04: 0.875em;--ne-ref-font-size-03: 0.8125em;--ne-ref-font-size-02: 0.75em;--ne-ref-font-size-01: 0.625em;--ne-ref-font-size-11: 2.625em;--ne-ref-font-size-10: 2em}:root{--ne-ref-border-width-large: 4px;--ne-ref-border-width-medium: 2px;--ne-ref-border-width-small: 1px}:root{--ne-ref-sizing-09: 2.25em;--ne-ref-sizing-08: 2em;--ne-ref-sizing-07: 1.75em;--ne-ref-sizing-06: 1.5em;--ne-ref-sizing-05: 1.25em;--ne-ref-sizing-04: 1em;--ne-ref-sizing-03: 0.75em;--ne-ref-sizing-02: 0.5em;--ne-ref-sizing-01: 0.25em;--ne-ref-sizing-14: 6em;--ne-ref-sizing-13: 5em;--ne-ref-sizing-12: 4em;--ne-ref-sizing-11: 3em;--ne-ref-sizing-10: 2.5em}:root{--ne-ref-font-weight-bold: Bold;--ne-ref-font-weight-semi-bold: SemiBold;--ne-ref-font-weight-regular: Regular}:root{--ne-ref-font-family-montserrat: Montserrat;--ne-ref-font-family-open-sans: Open Sans}:root{--ne-ref-line-height-expanded: 2em;--ne-ref-line-height-regular: 1.5em;--ne-ref-line-height-condensed: 1.2em}:root{--ne-ref-paragraph-spacing-07: 2.5em;--ne-ref-paragraph-spacing-06: 2.25em;--ne-ref-paragraph-spacing-05: 2em;--ne-ref-paragraph-spacing-04: 1.75em;--ne-ref-paragraph-spacing-03: 1.625em;--ne-ref-paragraph-spacing-02: 1.5em;--ne-ref-paragraph-spacing-01: 1.25em}:root{--ne-ref-letter-spacing-09: 0.21em;--ne-ref-letter-spacing-08: 0.18em;--ne-ref-letter-spacing-07: 0.15em;--ne-ref-letter-spacing-06: 0.135em;--ne-ref-letter-spacing-05: 0.12em;--ne-ref-letter-spacing-04: 0.105em;--ne-ref-letter-spacing-03: 0.0975em;--ne-ref-letter-spacing-02: 0.09em;--ne-ref-letter-spacing-01: 0.075em;--ne-ref-letter-spacing-11: 0.315em;--ne-ref-letter-spacing-10: 0.24em}:root{--ne-ref-text-decoration-underline: underline;--ne-ref-text-decoration-none: none}:root{--ne-ref-shadow-level2: 0px 0px 8px var(--ne-ref-color-grey-90-20);--ne-ref-shadow-level1: 0px 0px 8px var(--ne-ref-color-grey-90-20)}:root{--ne-alias-color-highlight: var(--ne-ref-color-nintex-orange);--ne-alias-color-icon-white: var(--ne-ref-color-white);--ne-alias-color-icon-default: var(--ne-ref-color-grey-90);--ne-alias-color-status-success-light: var(--ne-ref-color-green-40);--ne-alias-color-status-success-default: var(--ne-ref-color-green-50);--ne-alias-color-status-success-dark: var(--ne-ref-color-green-60);--ne-alias-color-status-info-light: var(--ne-ref-color-blue-50);--ne-alias-color-status-info-default: var(--ne-ref-color-blue-60);--ne-alias-color-status-info-dark: var(--ne-ref-color-blue-70);--ne-alias-color-status-active-lighter: var(--ne-ref-color-blue-40);--ne-alias-color-status-active-light: var(--ne-ref-color-blue-50);--ne-alias-color-status-active-default: var(--ne-ref-color-blue-60);--ne-alias-color-status-warning-light: var(--ne-ref-color-yellow-40);--ne-alias-color-status-warning-default: var(--ne-ref-color-yellow-50);--ne-alias-color-status-warning-dark: var(--ne-ref-color-yellow-60);--ne-alias-color-status-error-light: var(--ne-ref-color-red-40);--ne-alias-color-status-error-default: var(--ne-ref-color-red-50);--ne-alias-color-status-error-dark: var(--ne-ref-color-red-60);--ne-alias-color-destructive-light: var(--ne-ref-color-red-40);--ne-alias-color-destructive-default: var(--ne-ref-color-red-60);--ne-alias-color-destructive-dark: var(--ne-ref-color-red-70);--ne-alias-color-state-focus-on-red: var(--ne-ref-color-red-70);--ne-alias-color-state-focus-on-white: var(--ne-ref-color-blue-05);--ne-alias-color-state-hover-on-red: var(--ne-ref-color-red-70);--ne-alias-color-state-hover-on-white: var(--ne-ref-color-blue-05);--ne-alias-color-state-disabled-dark: var(--ne-ref-color-grey-90);--ne-alias-color-state-disabled-default: var(--ne-ref-color-grey-50);--ne-alias-color-state-disabled-light: var(--ne-ref-color-grey-30);--ne-alias-color-accent-light: var(--ne-ref-color-blue-50);--ne-alias-color-accent-default: var(--ne-ref-color-blue-60);--ne-alias-color-accent-dark: var(--ne-ref-color-blue-70);--ne-alias-color-text-light: var(--ne-ref-color-grey-60);--ne-alias-color-text-default: var(--ne-ref-color-grey-90);--ne-alias-color-text-light-text-on-dark-bg: var(--ne-ref-color-white);--ne-alias-color-state-focus-on-blue: var(--ne-alias-color-accent-dark);--ne-alias-color-state-hover-on-blue: var(--ne-alias-color-accent-dark)}:root{--ne-alias-font-family-title: var(--ne-ref-font-family-montserrat);--ne-alias-font-family-body: var(--ne-ref-font-family-open-sans)}:root{--ne-alias-font-size-title: var(--ne-ref-font-size-06);--ne-alias-font-size-subtext: var(--ne-ref-font-size-02);--ne-alias-font-size-body: var(--ne-ref-font-size-04)}:root{--ne-alias-border-width-focus: var(--ne-ref-border-width-large);--ne-alias-border-width-default: var(--ne-ref-border-width-small)}:root{--ne-alias-sizing-icon-xx-large: var(--ne-ref-sizing-11);--ne-alias-sizing-icon-x-large: var(--ne-ref-sizing-08);--ne-alias-sizing-icon-large: var(--ne-ref-sizing-06);--ne-alias-sizing-icon-default: var(--ne-ref-sizing-04);--ne-alias-sizing-icon-small: var(--ne-ref-sizing-02)}:root{--ne-alias-border-focus: var(--ne-ref-color-blue-20);--ne-alias-border-dark-grey: var(--ne-ref-color-grey40);--ne-alias-border-grey: var(--ne-ref-color-grey-10)}\n\n/*# sourceMappingURL=earthling-base.min.css.map */","",{version:3,sources:["file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/typography.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/color.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-color.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-border-radius.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-spacing.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-font-size.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-border-width.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-sizing.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-font-weight.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-font-family.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-line-height.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-paragraph-spacing.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-letter-spacing.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-text-decoration.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/ref-shadow.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-color.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-font-family.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-font-size.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-border-width.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-sizing.scss","file:///home/runner/work/earthling-design-system/earthling-design-system/packages/styles/src/scss/tokens/alias-border.scss","webpack://./../../node_modules/@nintexglobal/earthling-styles/dist/earthling-base.min.css"],names:[],mappings:"AAAQ,MCEN,qBAAA,CACA,gBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,oBAAA,CACA,oBAAA,CACA,oBAAA,CACA,oBAAA,CACA,sBAAA,CACA,sBAAA,CACA,sBAAA,CACA,sBAAA,CACA,uBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,oBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,qBAAA,CACA,oBAAA,CACA,oBAAA,CACA,gCAAA,CACA,wCAAA,CAKA,yCAAA,CACA,4CAAA,CAKA,+CAAA,CACA,uCAAA,CAKA,4CAAA,CAKA,iDAAA,CACA,mDAAA,CAKA,2CAAA,CACA,uDAAA,CAKA,2CAAA,CACA,uCAAA,CAKA,uCAAA,CACA,wCAAA,CACA,oCAAA,CACA,0CAAA,CACA,wCAAA,CACA,wCAAA,CACA,yCAAA,CACA,2CAAA,CACA,yCAAA,CACA,kDAAA,CAOA,mDAAA,CACA,+CAAA,CACA,2CAAA,CAKA,uDAAA,CACA,mDAAA,CACA,+CAAA,CAKA,oDAAA,CACA,gDAAA,CACA,2CAAA,CAKA,gDAAA,CACA,4CAAA,CACA,yCAAA,CAKA,qDAAA,CACA,iDAAA,CACA,6CAAA,CAOA,gDAAA,CACA,0CAAA,CAKA,oDAAA,CACA,kDAAA,CACA,gDAAA,CACA,gFAAA,CACA,sFAAA,CACA,4CAAA,CAKA,mDAAA,CACA,+CAAA,CACA,2CAAA,CACA,2EAAA,CACA,wEAAA,CAKA,sDAAA,CACA,oDAAA,CACA,iDAAA,CACA,kFAAA,CACA,uDAAA,CAKA,qDAAA,CACA,mDAAA,CACA,+CAAA,CAKA,uCAAA,CAKA,yCAAA,CACA,uCAAA,CACA,6CAAA,CACA,6DAAA,CACA,6CAAA,CACA,qCAAA,CACA,yCAAA,CACA,0CAAA,CACA,qDAAA,CACA,4CAAA,CACA,+CAAA,CACA,oDAAA,CACA,kDAAA,CACA,uDAAA,CAKA,gDAAA,CACA,4CAAA,CACA,0CAAA,CAKA,+CAAA,CACA,6CAAA,CACA,2CAAA,CAKA,0DAAA,CACA,wDAAA,CACA,mEAAA,CACA,iEAAA,CACA,0DAAA,CACA,wDAAA,CACA,mEAAA,CACA,iEAAA,CACA,2EAAA,CAOA,0CAAA,CACA,yEAAA,CACA,+EAAA,CACA,4CAAA,CACA,qEAAA,CACA,4CAAA,CACA,qDAAA,CAIA,mDAAA,CD9OF,MACE,8DAAA,CACA,kEAAA,CEFF,MACE,iCAAA,CACA,iCAAA,CACA,oCAAA,CACA,gCAAA,CACA,gCAAA,CACA,gCAAA,CACA,iCAAA,CACA,iCAAA,CACA,iCAAA,CACA,iCAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,8BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,8BAAA,CACA,8BAAA,CACA,8BAAA,CACA,8BAAA,CACA,8BAAA,CACA,8BAAA,CACA,8BAAA,CACA,8BAAA,CACA,8BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,+BAAA,CACA,qCAAA,CACA,6BAAA,CC1CF,MACE,kCAAA,CACA,mCAAA,CACA,oCAAA,CACA,qCAAA,CACA,8BAAA,CCLF,MACE,+BAAA,CACA,gCAAA,CACA,6BAAA,CACA,6BAAA,CACA,4BAAA,CACA,8BAAA,CACA,+BAAA,CACA,iCAAA,CACA,mCAAA,CACA,wBAAA,CCVF,MACE,6BAAA,CACA,4BAAA,CACA,6BAAA,CACA,8BAAA,CACA,0BAAA,CACA,8BAAA,CACA,+BAAA,CACA,6BAAA,CACA,8BAAA,CACA,8BAAA,CACA,0BAAA,CCXF,MACE,gCAAA,CACA,iCAAA,CACA,gCAAA,CCHF,MACE,0BAAA,CACA,uBAAA,CACA,0BAAA,CACA,yBAAA,CACA,0BAAA,CACA,uBAAA,CACA,0BAAA,CACA,yBAAA,CACA,0BAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,uBAAA,CACA,yBAAA,CCdF,MACE,+BAAA,CACA,wCAAA,CACA,qCAAA,CCHF,MACE,2CAAA,CACA,yCAAA,CCFF,MACE,kCAAA,CACA,mCAAA,CACA,qCAAA,CCHF,MACE,oCAAA,CACA,qCAAA,CACA,kCAAA,CACA,qCAAA,CACA,sCAAA,CACA,oCAAA,CACA,qCAAA,CCPF,MACE,kCAAA,CACA,kCAAA,CACA,kCAAA,CACA,mCAAA,CACA,kCAAA,CACA,mCAAA,CACA,oCAAA,CACA,kCAAA,CACA,mCAAA,CACA,mCAAA,CACA,kCAAA,CCXF,MACE,6CAAA,CACA,mCAAA,CCFF,MACE,kEAAA,CACA,kEAAA,CCFF,MACE,6DAAA,CACA,sDAAA,CACA,0DAAA,CACA,mEAAA,CACA,qEAAA,CACA,kEAAA,CACA,+DAAA,CACA,iEAAA,CACA,8DAAA,CACA,mEAAA,CACA,iEAAA,CACA,mEAAA,CACA,oEAAA,CACA,sEAAA,CACA,mEAAA,CACA,+DAAA,CACA,iEAAA,CACA,8DAAA,CACA,8DAAA,CACA,gEAAA,CACA,6DAAA,CACA,+DAAA,CACA,kEAAA,CACA,+DAAA,CACA,kEAAA,CACA,iEAAA,CACA,oEAAA,CACA,kEAAA,CACA,0DAAA,CACA,4DAAA,CACA,yDAAA,CACA,wDAAA,CACA,0DAAA,CACA,sEAAA,CACA,uEAAA,CACA,uEAAA,CCpCF,MACE,kEAAA,CACA,gEAAA,CCFF,MACE,sDAAA,CACA,wDAAA,CACA,qDAAA,CCHF,MACE,+DAAA,CACA,iEAAA,CCFF,MACE,wDAAA,CACA,uDAAA,CACA,qDAAA,CACA,uDAAA,CACA,qDAAA,CCLF,MACE,oDAAA,CACA,uDAAA,CACA,mDAAA;;ACNF,iDAAiD",sourceRoot:""}]);const a=s},2609:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,i,o){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(s[l]=!0)}for(var c=0;c<e.length;c++){var p=[].concat(e[c]);r&&s[p[0]]||(void 0!==o&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=o),n&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=n):p[2]=n),i&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=i):p[4]="".concat(i)),t.push(p))}},t}},272:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},6062:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},s=[],a=0;a<e.length;a++){var l=e[a],c=r.base?l[0]+r.base:l[0],p=o[c]||0,u="".concat(c," ").concat(p);o[c]=p+1;var d=n(u),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==d)t[d].references++,t[d].updater(f);else{var h=i(f,r);r.byIndex=a,t.splice(a,0,{identifier:u,updater:h,references:1})}s.push(u)}return s}function i(e,t){var n=t.domAPI(t);n.update(e);return function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var o=r(e=e||[],i=i||{});return function(e){e=e||[];for(var s=0;s<o.length;s++){var a=n(o[s]);t[a].references--}for(var l=r(e,i),c=0;c<o.length;c++){var p=n(o[c]);0===t[p].references&&(t[p].updater(),t.splice(p,1))}o=l}}},6793:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},1173:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},7892:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},4036:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},2464:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},2826:(e,t,n)=>{var r=n(3192);const i=e=>t=>"function"==typeof t?((e,t)=>(customElements.define(e,t),t))(e,t):((e,t)=>{const{kind:n,elements:r}=t;return{kind:n,elements:r,finisher(t){customElements.define(e,t)}}})(e,t),o=(e,t)=>"method"===t.kind&&t.descriptor&&!("value"in t.descriptor)?{...t,finisher(n){n.createProperty(t.key,e)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:t.key,initializer(){"function"==typeof t.initializer&&(this[t.key]=t.initializer.call(this))},finisher(n){n.createProperty(t.key,e)}};function s(e){return(t,n)=>void 0!==n?((e,t,n)=>{t.constructor.createProperty(n,e)})(e,t,n):o(e,t)}var a;null===(a=window.HTMLSlotElement)||void 0===a||a.prototype.assignedElements;const l=new WeakMap;function c(e){return t=>{if(function(e,t){let n=t;for(;n;){if(l.get(n)===e)return!0;n=Object.getPrototypeOf(n)}return!1}(e,t))return t;const n=e(t);return l.set(n,e),n}}var p=n(9793);const u=!!ShadowRoot.prototype.createElement,d=c((e=>class extends e{static get scopedElements(){return{}}static get shadowRootOptions(){return this.__shadowRootOptions}static set shadowRootOptions(e){this.__shadowRootOptions=e}static get elementStyles(){return this.__elementStyles}static set elementStyles(e){this.__elementStyles=e}constructor(...e){super(),this.renderOptions=this.renderOptions||void 0}get registry(){return this.constructor.__registry}set registry(e){this.constructor.__registry=e}createRenderRoot(){const{scopedElements:e,shadowRootOptions:t,elementStyles:n}=this.constructor;if(!this.registry||this.registry===this.constructor.__registry&&!Object.prototype.hasOwnProperty.call(this.constructor,"__registry")){this.registry=u?new CustomElementRegistry:customElements;for(const[t,n]of Object.entries(e))this.defineScopedElement(t,n)}const r={mode:"open",...t,customElements:this.registry},i=this.attachShadow(r);return u&&(this.renderOptions.creationScope=i),i instanceof ShadowRoot&&((0,p.ec)(i,n),this.renderOptions.renderBefore=this.renderOptions.renderBefore||i.firstChild),i}createScopedElement(e){return(u?this.shadowRoot:document).createElement(e)}defineScopedElement(e,t){const n=this.registry.get(e);return n&&!1===u&&n!==t&&console.error([`You are trying to re-register the "${e}" custom element with a different class via ScopedElementsMixin.`,"This is only possible with a CustomElementRegistry.","Your browser does not support this feature so you will need to load a polyfill for it.",'Load "@webcomponents/scoped-custom-element-registry" before you register ANY web component to the global customElements registry.','e.g. add "<script src="/node_modules/@webcomponents/scoped-custom-element-registry/scoped-custom-element-registry.min.js"><\/script>" as your first script tag.',"For more details you can visit https://open-wc.org/docs/development/scoped-elements/"].join("\n")),n?this.registry.get(e):this.registry.define(e,t)}getScopedTagName(e){return e}static getScopedTagName(e){return e}}));var f=n(6062),h=n.n(f),m=n(4036),A=n.n(m),y=n(6793),g=n.n(y),v=n(7892),b=n.n(v),C=n(1173),x=n.n(C),w=n(2464),E=n.n(w),k=n(9526),_={};_.styleTagTransform=E(),_.setAttributes=b(),_.insert=g().bind(null,"head"),_.domAPI=A(),_.insertStyleElement=x();h()(k.Z,_);k.Z&&k.Z.locals&&k.Z.locals;const S=r.iv`
  :host {
    all: initial;
  }
`,R=(r.iv`0.75em`,r.iv`1em`),$=[S,r.iv`
  :host {
    display: grid;
    min-height: 100%;
  }
`];function B(e,t,n,r){var i,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,n,s):i(t,n))||s);return o>3&&s&&Object.defineProperty(t,n,s),s}const M=r.iv`
  :host {
    all: initial;
  }

  .hidden {
    display: none;
  }
`;var N=n(3311);const D=1,P=2,O=e=>(...t)=>({_$litDirective$:e,values:t});class T{constructor(e){}get _$AU(){return this._$AM._$AU}_$AT(e,t,n){this._$Ct=e,this._$AM=t,this._$Ci=n}_$AS(e,t){return this.update(e,t)}update(e,t){return this.render(...t)}}const F=O(class extends T{constructor(e){var t;if(super(e),e.type!==D||"class"!==e.name||(null===(t=e.strings)||void 0===t?void 0:t.length)>2)throw Error("`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.")}render(e){return" "+Object.keys(e).filter((t=>e[t])).join(" ")+" "}update(e,[t]){var n,r;if(void 0===this.nt){this.nt=new Set,void 0!==e.strings&&(this.st=new Set(e.strings.join(" ").split(/\s/).filter((e=>""!==e))));for(const e in t)t[e]&&!(null===(n=this.st)||void 0===n?void 0:n.has(e))&&this.nt.add(e);return this.render(t)}const i=e.element.classList;this.nt.forEach((e=>{e in t||(i.remove(e),this.nt.delete(e))}));for(const e in t){const n=!!t[e];n===this.nt.has(e)||(null===(r=this.st)||void 0===r?void 0:r.has(e))||(n?(i.add(e),this.nt.add(e)):(i.remove(e),this.nt.delete(e)))}return N.Jb}}),I=new WeakMap,z=e=>"function"==typeof e&&I.has(e),L="undefined"!=typeof window&&null!=window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,j={},V={},U=`{{lit-${String(Math.random()).slice(2)}}}`,H=`\x3c!--${U}--\x3e`,q=new RegExp(`${U}|${H}`),K="$lit$";class G{constructor(e,t){this.parts=[],this.element=t;const n=[],r=[],i=document.createTreeWalker(t.content,133,null,!1);let o=0,s=-1,a=0;const{strings:l,values:{length:c}}=e;for(;a<c;){const e=i.nextNode();if(null!==e){if(s++,1===e.nodeType){if(e.hasAttributes()){const t=e.attributes,{length:n}=t;let r=0;for(let e=0;e<n;e++)W(t[e].name,K)&&r++;for(;r-- >0;){const t=l[a],n=X.exec(t)[2],r=n.toLowerCase()+K,i=e.getAttribute(r);e.removeAttribute(r);const o=i.split(q);this.parts.push({type:"attribute",index:s,name:n,strings:o}),a+=o.length-1}}"TEMPLATE"===e.tagName&&(r.push(e),i.currentNode=e.content)}else if(3===e.nodeType){const t=e.data;if(t.indexOf(U)>=0){const r=e.parentNode,i=t.split(q),o=i.length-1;for(let t=0;t<o;t++){let n,o=i[t];if(""===o)n=Z();else{const e=X.exec(o);null!==e&&W(e[2],K)&&(o=o.slice(0,e.index)+e[1]+e[2].slice(0,-K.length)+e[3]),n=document.createTextNode(o)}r.insertBefore(n,e),this.parts.push({type:"node",index:++s})}""===i[o]?(r.insertBefore(Z(),e),n.push(e)):e.data=i[o],a+=o}}else if(8===e.nodeType)if(e.data===U){const t=e.parentNode;null!==e.previousSibling&&s!==o||(s++,t.insertBefore(Z(),e)),o=s,this.parts.push({type:"node",index:s}),null===e.nextSibling?e.data="":(n.push(e),s--),a++}else{let t=-1;for(;-1!==(t=e.data.indexOf(U,t+1));)this.parts.push({type:"node",index:-1}),a++}}else i.currentNode=r.pop()}for(const e of n)e.parentNode.removeChild(e)}}const W=(e,t)=>{const n=e.length-t.length;return n>=0&&e.slice(n)===t},Y=e=>-1!==e.index,Z=()=>document.createComment(""),X=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;class J{constructor(e,t,n){this.__parts=[],this.template=e,this.processor=t,this.options=n}update(e){let t=0;for(const n of this.__parts)void 0!==n&&n.setValue(e[t]),t++;for(const e of this.__parts)void 0!==e&&e.commit()}_clone(){const e=L?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),t=[],n=this.template.parts,r=document.createTreeWalker(e,133,null,!1);let i,o=0,s=0,a=r.nextNode();for(;o<n.length;)if(i=n[o],Y(i)){for(;s<i.index;)s++,"TEMPLATE"===a.nodeName&&(t.push(a),r.currentNode=a.content),null===(a=r.nextNode())&&(r.currentNode=t.pop(),a=r.nextNode());if("node"===i.type){const e=this.processor.handleTextExpression(this.options);e.insertAfterNode(a.previousSibling),this.__parts.push(e)}else this.__parts.push(...this.processor.handleAttributeExpressions(a,i.name,i.strings,this.options));o++}else this.__parts.push(void 0),o++;return L&&(document.adoptNode(e),customElements.upgrade(e)),e}}const Q=window.trustedTypes&&trustedTypes.createPolicy("lit-html",{createHTML:e=>e}),ee=` ${U} `;class te{constructor(e,t,n,r){this.strings=e,this.values=t,this.type=n,this.processor=r}getHTML(){const e=this.strings.length-1;let t="",n=!1;for(let r=0;r<e;r++){const e=this.strings[r],i=e.lastIndexOf("\x3c!--");n=(i>-1||n)&&-1===e.indexOf("--\x3e",i+1);const o=X.exec(e);t+=null===o?e+(n?ee:H):e.substr(0,o.index)+o[1]+o[2]+K+o[3]+U}return t+=this.strings[e],t}getTemplateElement(){const e=document.createElement("template");let t=this.getHTML();return void 0!==Q&&(t=Q.createHTML(t)),e.innerHTML=t,e}}const ne=e=>null===e||!("object"==typeof e||"function"==typeof e),re=e=>Array.isArray(e)||!(!e||!e[Symbol.iterator]);class ie{constructor(e,t,n){this.dirty=!0,this.element=e,this.name=t,this.strings=n,this.parts=[];for(let e=0;e<n.length-1;e++)this.parts[e]=this._createPart()}_createPart(){return new oe(this)}_getValue(){const e=this.strings,t=e.length-1,n=this.parts;if(1===t&&""===e[0]&&""===e[1]){const e=n[0].value;if("symbol"==typeof e)return String(e);if("string"==typeof e||!re(e))return e}let r="";for(let i=0;i<t;i++){r+=e[i];const t=n[i];if(void 0!==t){const e=t.value;if(ne(e)||!re(e))r+="string"==typeof e?e:String(e);else for(const t of e)r+="string"==typeof t?t:String(t)}}return r+=e[t],r}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class oe{constructor(e){this.value=void 0,this.committer=e}setValue(e){e===j||ne(e)&&e===this.value||(this.value=e,z(e)||(this.committer.dirty=!0))}commit(){for(;z(this.value);){const e=this.value;this.value=j,e(this)}this.value!==j&&this.committer.commit()}}class se{constructor(e){this.value=void 0,this.__pendingValue=void 0,this.options=e}appendInto(e){this.startNode=e.appendChild(Z()),this.endNode=e.appendChild(Z())}insertAfterNode(e){this.startNode=e,this.endNode=e.nextSibling}appendIntoPart(e){e.__insert(this.startNode=Z()),e.__insert(this.endNode=Z())}insertAfterPart(e){e.__insert(this.startNode=Z()),this.endNode=e.endNode,e.endNode=this.startNode}setValue(e){this.__pendingValue=e}commit(){if(null===this.startNode.parentNode)return;for(;z(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=j,e(this)}const e=this.__pendingValue;e!==j&&(ne(e)?e!==this.value&&this.__commitText(e):e instanceof te?this.__commitTemplateResult(e):e instanceof Node?this.__commitNode(e):re(e)?this.__commitIterable(e):e===V?(this.value=V,this.clear()):this.__commitText(e))}__insert(e){this.endNode.parentNode.insertBefore(e,this.endNode)}__commitNode(e){this.value!==e&&(this.clear(),this.__insert(e),this.value=e)}__commitText(e){const t=this.startNode.nextSibling,n="string"==typeof(e=null==e?"":e)?e:String(e);t===this.endNode.previousSibling&&3===t.nodeType?t.data=n:this.__commitNode(document.createTextNode(n)),this.value=e}__commitTemplateResult(e){const t=this.options.templateFactory(e);if(this.value instanceof J&&this.value.template===t)this.value.update(e.values);else{const n=new J(t,e.processor,this.options),r=n._clone();n.update(e.values),this.__commitNode(r),this.value=n}}__commitIterable(e){Array.isArray(this.value)||(this.value=[],this.clear());const t=this.value;let n,r=0;for(const i of e)n=t[r],void 0===n&&(n=new se(this.options),t.push(n),0===r?n.appendIntoPart(this):n.insertAfterPart(t[r-1])),n.setValue(i),n.commit(),r++;r<t.length&&(t.length=r,this.clear(n&&n.endNode))}clear(e=this.startNode){((e,t,n=null)=>{for(;t!==n;){const n=t.nextSibling;e.removeChild(t),t=n}})(this.startNode.parentNode,e.nextSibling,this.endNode)}}class ae{constructor(e,t,n){if(this.value=void 0,this.__pendingValue=void 0,2!==n.length||""!==n[0]||""!==n[1])throw new Error("Boolean attributes can only contain a single expression");this.element=e,this.name=t,this.strings=n}setValue(e){this.__pendingValue=e}commit(){for(;z(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=j,e(this)}if(this.__pendingValue===j)return;const e=!!this.__pendingValue;this.value!==e&&(e?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name),this.value=e),this.__pendingValue=j}}class le extends ie{constructor(e,t,n){super(e,t,n),this.single=2===n.length&&""===n[0]&&""===n[1]}_createPart(){return new ce(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class ce extends oe{}let pe=!1;(()=>{try{const e={get capture(){return pe=!0,!1}};window.addEventListener("test",e,e),window.removeEventListener("test",e,e)}catch(e){}})();class ue{constructor(e,t,n){this.value=void 0,this.__pendingValue=void 0,this.element=e,this.eventName=t,this.eventContext=n,this.__boundHandleEvent=e=>this.handleEvent(e)}setValue(e){this.__pendingValue=e}commit(){for(;z(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=j,e(this)}if(this.__pendingValue===j)return;const e=this.__pendingValue,t=this.value,n=null==e||null!=t&&(e.capture!==t.capture||e.once!==t.once||e.passive!==t.passive),r=null!=e&&(null==t||n);n&&this.element.removeEventListener(this.eventName,this.__boundHandleEvent,this.__options),r&&(this.__options=de(e),this.element.addEventListener(this.eventName,this.__boundHandleEvent,this.__options)),this.value=e,this.__pendingValue=j}handleEvent(e){"function"==typeof this.value?this.value.call(this.eventContext||this.element,e):this.value.handleEvent(e)}}const de=e=>e&&(pe?{capture:e.capture,passive:e.passive,once:e.once}:e.capture);new class{handleAttributeExpressions(e,t,n,r){const i=t[0];if("."===i){return new le(e,t.slice(1),n).parts}if("@"===i)return[new ue(e,t.slice(1),r.eventContext)];if("?"===i)return[new ae(e,t.slice(1),n)];return new ie(e,t,n).parts}handleTextExpression(e){return new se(e)}};const fe=new Map;new WeakMap;"undefined"!=typeof window&&(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.4.1");class he{constructor(e){this._parent=e,this._cache=new Map}has(e){return!!(this._cache.has(e)||this._parent&&this._parent._cache.has(e))}set(e,t){return this._cache.set(e,t),this}get(e){return this._cache.get(e)||this._parent&&this._parent._cache.get(e)}}let me=Math.round(1e5*Math.random());const Ae="-|\\.|[0-9]|[a-z]",ye=new RegExp(`[a-z](${Ae})*-(${Ae})*`),ge=(e,t)=>{const n=`${e}-${me+=1}`;return((e,t)=>!!t.get(e))(n,t)?ge(e,t):n};function ve(e,t=customElements){if(n=e,null===ye.exec(n))throw new Error("tagName is invalid");var n;return ge(e,t)}const be=new WeakMap,Ce=(e,t)=>be.set(t,e),xe=e=>be.get(e);const we=(e,t,n=customElements)=>{Ce(e,t),n.define(e,class extends t{})},Ee=(e,t,n)=>{const r=customElements;if(!function(e){let t=e;for(;t;){if(t===window.HTMLElement||"HTMLElement"===t.name)return!0;t=Object.getPrototypeOf(t)}return!1}(t))return((e,t,n)=>{const r=ve(e,t);if(!n)throw new Error("Lazy scoped elements requires the use of tags cache");return n.set(e,r),r})(e,r,n);if(t===customElements.get(e))return Ce(e,t),e;const i=ve(e,r);return we(i,t,r),i};function ke(e,t,n=undefined){return xe(t)||n&&n.get(e)||Ee(e,t,n)}const _e="-|\\.|[0-9]|[a-z]",Se=new RegExp(`<\\/?([a-z](${_e})*-(${_e})*)`,"g"),Re=new he,$e=(e,t,n,r)=>{const i=e.map((e=>{let n=e;const i=(e=>{const t=[];let n;for(;null!==(n=Se.exec(e));)t.push(n);return t})(e);for(let e=i.length-1;e>=0;e-=1){const o=i[e],[s,a]=o,l=ke(a,t[a],r),c=o.index+s.length-a.length,p=c+a.length,u=0===s.indexOf("</");n=n.slice(0,c)+(u?l:`${l} data-tag-name="${a}"`)+n.slice(p)}return n}));return n.set(e,i),i};let Be=!0;const{ShadyCSS:Me}=window;(void 0===Me||void 0===Me.prepareTemplateDom)&&(Be=!1);const Ne=new WeakMap,De=new WeakMap,Pe=e=>(De.has(e)||De.set(e,new he(De.get(e.constructor))),De.get(e)),Oe=(e,t,n,r)=>e.map((e=>e instanceof te?Te(e,t,n,r):Array.isArray(e)?Oe(e,t,n,r):e)),Te=(e,t,n,r)=>new te(function(e,t,n=Re,r){return n.get(e)||$e(e,t,n,r)}(e.strings,t,n,r),Oe(e.values,t,n,r),e.type,e.processor),Fe=(e,t,n,r)=>i=>{const o=Te(i,t,n,r);return(e=>t=>{const n=((e,t)=>`${e}--${t}`)(t.type,e);let r=fe.get(n);void 0===r&&(r={stringsArray:new WeakMap,keyString:new Map},fe.set(n,r));let i=r.stringsArray.get(t.strings);if(void 0!==i)return i;const o=t.strings.join(U);if(i=r.keyString.get(o),void 0===i){const n=t.getTemplateElement();Be&&Me.prepareTemplateDom(n,e),i=new G(t,n),r.keyString.set(o,i)}return r.stringsArray.set(t.strings,i),i})(e)(o)},Ie=c((e=>class extends e{static get scopedElements(){return{}}static render(e,t,n){if(!n||"object"!=typeof n||!n.scopeName)throw new Error("The `scopeName` option is required.");const{scopeName:r,eventContext:i}=n,o=(s=i,Ne.has(s)||Ne.set(s,new he(Ne.get(s.constructor))),Ne.get(s));var s;const a=Pe(i),{scopedElements:l}=this;return super.render(e,t,{...n,templateFactory:Fe(r,l,o,a)})}defineScopedElement(e,t){return function(e,t,n){const r=n.get(e);r?void 0===customElements.get(r)&&we(r,t,customElements):n.set(e,ke(e,t,n))}(e,t,Pe(this))}static getScopedTagName(e){const t=this.scopedElements[e];return t?ke(e,t,Pe(this)):Pe(this).get(e)}getScopedTagName(e){const t=this.constructor.scopedElements[e];return t?ke(e,t,Pe(this)):Pe(this).get(e)}})),ze=(e,t,n)=>{const r={bubbles:!0,cancelable:!1,composed:!0,...n},i=new CustomEvent(t,r);return e.dispatchEvent(i),i},Le=r.iv`
  * {
  --ne-button-color-background-primary-default: var(--ne-ref-color-blue-60, #006BD6);
  --ne-button-color-background-primary-hover: var(--ne-ref-color-blue-70, #0052A3);
  --ne-button-color-background-primary-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-background-secondary-default: var(--ne-ref-color-white, #ffffff);
  --ne-button-color-background-secondary-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-button-color-background-secondary-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-background-destructive-default: var(--ne-ref-color-red-60, #B80000);
  --ne-button-color-background-destructive-hover: var(--ne-ref-color-red-70, #7C0D0E);
  --ne-button-color-background-destructive-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-background-text-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-button-color-background-text-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-background-inverse-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-button-color-background-inverse-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-border-primary-default: var(--ne-ref-color-blue-70, #0052A3);
  --ne-button-color-border-secondary-default: var(--ne-ref-color-grey-10, #E2E3E4);
  --ne-button-color-border-destructive-default: var(--ne-ref-color-red-70, #7C0D0E);
  --ne-button-color-border-focus: var(--ne-ref-color-blue-20, #A3D1FF);
  --ne-button-color-border-inverse-default: var(--ne-ref-color-white, #ffffff);
  --ne-button-color-border-disabled: var(--ne-ref-color-grey-30, #A7ABAF);
  --ne-button-color-label-primary-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-button-color-label-primary-default: var(--ne-ref-color-white, #ffffff);
  --ne-button-color-label-secondary-default: var(--ne-ref-color-blue-60, #006BD6);
  --ne-button-color-label-secondary-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-button-color-label-destructive-default: var(--ne-ref-color-white, #ffffff);
  --ne-button-color-label-destructive-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-button-color-label-text-default: var(--ne-ref-color-blue-60, #006BD6);
  --ne-button-color-label-text-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-button-color-label-inverse-default: var(--ne-ref-color-white, #ffffff);
  --ne-button-color-label-inverse-disabled: var(--ne-ref-color-grey-90, #161718);
  --ne-button-border-radius: var(--ne-ref-border-radius-medium, .25em);
  --ne-button-padding-horizontal: var(--ne-ref-spacing-small, 0.75em);
  --ne-button-padding-vertical: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-button-gap: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-button-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-button-font-size: var(--ne-ref-font-size-04, 0.875em);
  --ne-button-sizing-icon: var(--ne-ref-sizing-04, 1em);
  --ne-button-border-width-default: var(--ne-ref-border-width-small, 1px);
  --ne-button-border-width-focus: var(--ne-ref-border-width-large, 4px);
}
`,je=O(class extends T{constructor(e){var t;if(super(e),e.type!==D||"style"!==e.name||(null===(t=e.strings)||void 0===t?void 0:t.length)>2)throw Error("The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.")}render(e){return Object.keys(e).reduce(((t,n)=>{const r=e[n];return null==r?t:t+`${n=n.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g,"-$&").toLowerCase()}:${r};`}),"")}update(e,[t]){const{style:n}=e.element;if(void 0===this.vt){this.vt=new Set;for(const e in t)this.vt.add(e);return this.render(t)}this.vt.forEach((e=>{null==t[e]&&(this.vt.delete(e),e.includes("-")?n.removeProperty(e):n[e]="")}));for(const e in t){const r=t[e];null!=r&&(this.vt.add(e),e.includes("-")?n.setProperty(e,r):n[e]=r)}return N.Jb}}),{I:Ve}=N.Al,Ue=(e,t)=>{var n,r;const i=e._$AN;if(void 0===i)return!1;for(const e of i)null===(r=(n=e)._$AO)||void 0===r||r.call(n,t,!1),Ue(e,t);return!0},He=e=>{let t,n;do{if(void 0===(t=e._$AM))break;n=t._$AN,n.delete(e),e=t}while(0===(null==n?void 0:n.size))},qe=e=>{for(let t;t=e._$AM;e=t){let n=t._$AN;if(void 0===n)t._$AN=n=new Set;else if(n.has(e))break;n.add(e),We(t)}};function Ke(e){void 0!==this._$AN?(He(this),this._$AM=e,qe(this)):this._$AM=e}function Ge(e,t=!1,n=0){const r=this._$AH,i=this._$AN;if(void 0!==i&&0!==i.size)if(t)if(Array.isArray(r))for(let e=n;e<r.length;e++)Ue(r[e],!1),He(r[e]);else null!=r&&(Ue(r,!1),He(r));else Ue(this,e)}const We=e=>{var t,n,r,i;e.type==P&&(null!==(t=(r=e)._$AP)&&void 0!==t||(r._$AP=Ge),null!==(n=(i=e)._$AQ)&&void 0!==n||(i._$AQ=Ke))};class Ye extends T{constructor(){super(...arguments),this._$AN=void 0}_$AT(e,t,n){super._$AT(e,t,n),qe(this),this.isConnected=e._$AU}_$AO(e,t=!0){var n,r;e!==this.isConnected&&(this.isConnected=e,e?null===(n=this.reconnected)||void 0===n||n.call(this):null===(r=this.disconnected)||void 0===r||r.call(this)),t&&(Ue(this,e),He(this))}setValue(e){if((e=>void 0===e.strings)(this._$Ct))this._$Ct._$AI(e,this);else{const t=[...this._$Ct._$AH];t[this._$Ci]=e,this._$Ct._$AI(t,this,0)}}disconnected(){}reconnected(){}}class Ze{constructor(e){this.Y=e}disconnect(){this.Y=void 0}reconnect(e){this.Y=e}deref(){return this.Y}}class Xe{constructor(){this.Z=void 0,this.q=void 0}get(){return this.Z}pause(){var e;null!==(e=this.Z)&&void 0!==e||(this.Z=new Promise((e=>this.q=e)))}resume(){var e;null===(e=this.q)||void 0===e||e.call(this),this.Z=this.q=void 0}}const Je=e=>!(e=>null===e||"object"!=typeof e&&"function"!=typeof e)(e)&&"function"==typeof e.then,Qe=1073741823;const et=O(class extends Ye{constructor(){super(...arguments),this._$Cwt=Qe,this._$Cyt=[],this._$CK=new Ze(this),this._$CX=new Xe}render(...e){var t;return null!==(t=e.find((e=>!Je(e))))&&void 0!==t?t:N.Jb}update(e,t){const n=this._$Cyt;let r=n.length;this._$Cyt=t;const i=this._$CK,o=this._$CX;this.isConnected||this.disconnected();for(let e=0;e<t.length&&!(e>this._$Cwt);e++){const s=t[e];if(!Je(s))return this._$Cwt=e,s;e<r&&s===n[e]||(this._$Cwt=Qe,r=0,Promise.resolve(s).then((async e=>{for(;o.get();)await o.get();const t=i.deref();if(void 0!==t){const n=t._$Cyt.indexOf(s);n>-1&&n<t._$Cwt&&(t._$Cwt=n,t.setValue(e))}})))}return N.Jb}disconnected(){this._$CK.disconnect(),this._$CX.pause()}reconnected(){this._$CK.reconnect(this),this._$CX.resume()}}),tt={_export:()=>n.e(388).then(n.bind(n,8388)).then((e=>e._export)),_import:()=>n.e(699).then(n.bind(n,9699)).then((e=>e._import)),add:()=>n.e(352).then(n.bind(n,7352)).then((e=>e.add)),archive:()=>n.e(939).then(n.bind(n,6939)).then((e=>e.archive)),arrowDown:()=>n.e(783).then(n.bind(n,4783)).then((e=>e.arrowDown)),arrowUp:()=>n.e(404).then(n.bind(n,7404)).then((e=>e.arrowUp)),caretDown:()=>n.e(588).then(n.bind(n,588)).then((e=>e.caretDown)),caretLeft:()=>n.e(746).then(n.bind(n,1746)).then((e=>e.caretLeft)),caretRight:()=>n.e(147).then(n.bind(n,5147)).then((e=>e.caretRight)),caretUp:()=>n.e(245).then(n.bind(n,5245)).then((e=>e.caretUp)),check:()=>n.e(441).then(n.bind(n,3441)).then((e=>e.check)),chevronDown:()=>n.e(157).then(n.bind(n,157)).then((e=>e.chevronDown)),chevronLeft:()=>n.e(316).then(n.bind(n,1316)).then((e=>e.chevronLeft)),chevronLightDown:()=>n.e(683).then(n.bind(n,9683)).then((e=>e.chevronLightDown)),chevronLightLeft:()=>n.e(788).then(n.bind(n,1788)).then((e=>e.chevronLightLeft)),chevronLightRight:()=>n.e(776).then(n.bind(n,7776)).then((e=>e.chevronLightRight)),chevronLightUp:()=>n.e(154).then(n.bind(n,5154)).then((e=>e.chevronLightUp)),chevronRight:()=>n.e(704).then(n.bind(n,1704)).then((e=>e.chevronRight)),chevronUp:()=>n.e(121).then(n.bind(n,5121)).then((e=>e.chevronUp)),closeDefault:()=>n.e(754).then(n.bind(n,4754)).then((e=>e.closeDefault)),dangerExclamation:()=>n.e(969).then(n.bind(n,969)).then((e=>e.dangerExclamation)),dropzone:()=>Promise.resolve().then(n.bind(n,6941)).then((e=>e.dropzone)),feedback:()=>n.e(253).then(n.bind(n,2253)).then((e=>e.feedback)),file:()=>Promise.resolve().then(n.bind(n,4514)).then((e=>e.file)),hide:()=>n.e(138).then(n.bind(n,8138)).then((e=>e.hide)),info:()=>n.e(770).then(n.bind(n,770)).then((e=>e.info)),maximise:()=>n.e(297).then(n.bind(n,8297)).then((e=>e.maximise)),meatballs:()=>n.e(307).then(n.bind(n,1307)).then((e=>e.meatballs)),minus:()=>n.e(272).then(n.bind(n,7272)).then((e=>e.minus)),openInNewWindow:()=>n.e(895).then(n.bind(n,1895)).then((e=>e.openInNewWindow)),process:()=>n.e(137).then(n.bind(n,4137)).then((e=>e.process)),processModel:()=>n.e(605).then(n.bind(n,2605)).then((e=>e.processModel)),publish:()=>n.e(233).then(n.bind(n,5233)).then((e=>e.publish)),save:()=>n.e(234).then(n.bind(n,3234)).then((e=>e.save)),search:()=>n.e(554).then(n.bind(n,5554)).then((e=>e.search)),show:()=>n.e(376).then(n.bind(n,9376)).then((e=>e.show)),success:()=>n.e(528).then(n.bind(n,7528)).then((e=>e.success)),summary:()=>n.e(318).then(n.bind(n,8318)).then((e=>e.summary)),tick:()=>n.e(17).then(n.bind(n,5017)).then((e=>e.tick)),trash:()=>Promise.resolve().then(n.bind(n,7798)).then((e=>e.trash)),user:()=>n.e(592).then(n.bind(n,8592)).then((e=>e.user)),users:()=>n.e(344).then(n.bind(n,8344)).then((e=>e.users)),versionHistory:()=>n.e(525).then(n.bind(n,6525)).then((e=>e.versionHistory)),warningExclamation:()=>n.e(403).then(n.bind(n,7403)).then((e=>e.warningExclamation))},nt=({type:e,typeAsHtml:t,fixedSize:n,className:i})=>{if(!e&&!t)return r.Ld;if(e&&!(e in tt))return console.warn("Icon not found",e),r.Ld;const o=e?tt[e]():Promise.resolve(t);return r.dy`
    <div
      aria-hidden="true"
      class=${i||"ne-icon"}
      style=${je({height:n,width:n,display:"grid",alignItems:"center",justifyItems:"center"})}
    >
      ${et(o,r.dy`<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 16 16"
></svg>`)}
    </div>
  `},rt=[Le,r.iv`
  .btn {
    font-family: var(--ne-button-font-family);
    font-size: var(--ne-button-font-size);
    padding: var(--ne-button-padding-vertical)
      var(--ne-button-padding-horizontal) var(--ne-button-padding-vertical)
      var(--ne-button-padding-horizontal);
    gap: var(--ne-button-gap);
    border-radius: var(--ne-button-border-radius);
    outline: none;
    display: grid;
    grid-auto-flow: column;
  }

  .btn:focus {
    outline: 4px solid var(--ne-button-color-border-focus);
  }

  .btn-primary {
    border: 1px solid var(--ne-button-color-border-primary-default);
    color: var(--ne-button-color-label-primary-default);
    background-color: var(--ne-button-color-background-primary-default);
  }

  .btn-primary:hover {
    background-color: var(--ne-button-color-background-primary-hover);
  }

  .btn-primary:disabled {
    border: 1px solid var(--ne-button-color-border-disabled);
    color: var(--ne-button-color-label-primary-disabled);
    background-color: var(--ne-button-color-background-primary-disabled);
  }

  .btn-secondary {
    border: 1px solid var(--ne-button-color-border-secondary-default);
    color: var(--ne-button-color-label-secondary-default);
    background-color: var(--ne-button-color-background-secondary-default);
  }

  .btn-secondary:hover {
    background-color: var(--ne-button-color-background-secondary-hover);
  }

  .btn-secondary:disabled {
    border: 1px solid var(--ne-button-color-border-disabled);
    color: var(--ne-button-color-label-secondary-disabled);
    background-color: var(--ne-button-color-background-secondary-disabled);
  }

  .btn-secondary:focus {
    background-color: var(--ne-button-color-background-secondary-hover);
  }

  .btn-destructive {
    border: 1px solid var(--ne-button-color-border-destructive-default);
    color: var(--ne-button-color-label-destructive-default);
    background-color: var(--ne-button-color-background-destructive-default);
  }

  .btn-destructive:hover {
    background-color: var(--ne-button-color-background-destructive-hover);
  }

  .btn-destructive:disabled {
    border: 1px solid var(--ne-button-color-border-disabled);
    color: var(--ne-button-color-label-destructive-disabled);
    background-color: var(--ne-button-color-background-destructive-disabled);
  }

  .btn-destructive:focus {
    background-color: var(--ne-button-color-background-destructive-hover);
  }

  .btn-text {
    border: 0;
    color: var(--ne-button-color-label-text-default);
    background-color: transparent;
  }

  .btn-text:hover {
    background-color: var(--ne-button-color-background-text-hover);
  }

  .btn-text:disabled {
    border: 0;
    color: var(--ne-button-color-label-text-disabled);
    background-color: var(--ne-button-color-background-text-disabled);
  }

  .btn-text:focus {
    background-color: var(--ne-button-color-background-text-hover);
  }

  .btn-inverse {
    color: var(--ne-button-color-label-inverse-default);
    background-color: transparent;
    border: 1px solid var(--ne-button-color-border-inverse-default);
  }

  .btn-inverse:hover {
    background-color: var(--ne-button-color-background-inverse-hover);
  }

  .btn-inverse:disabled {
    border: 1px solid var(--ne-button-color-border-disabled);
    color: var(--ne-button-color-label-inverse-disabled);
    background-color: var(--ne-button-color-background-inverse-disabled);
  }

  .btn-inverse:focus {
    background-color: var(--ne-button-color-background-inverse-hover);
  }

  .icon-slot {
    min-width: 18px;
    max-width: 18px;
  }
`,M];let it=class extends(Ie(r.oi)){constructor(){super(...arguments),this.disabled=!1,this.ariaLabel="",this.variant="primary",this.onClick=()=>{ze(this,"ne-click",{composed:!0,bubbles:!0})}}static get styles(){return rt}render(){return r.dy`
      <button
        id=${this.id}
        type="button"
        ?disabled=${this.disabled}
        @click="${this.onClick}"
        aria-label=${this.ariaLabel||r.Ld}
        class=${F({btn:!0,"btn-primary":"primary"===this.variant,"btn-secondary":"secondary"===this.variant,"btn-destructive":"destructive"===this.variant,"btn-text":"text"===this.variant,"btn-inverse":"inverse"===this.variant})}
      >
        <span class=${void 0!==this.leftIconType?"icon-slot":"hidden"}>
          <slot name="left">${nt({type:this.leftIconType})}</slot>
        </span>
        <slot></slot>
        <span
          class=${void 0!==this.rightIconType?"icon-slot":"hidden"}
        >
          <slot name="right">${nt({type:this.rightIconType})}</slot>
        </span>
      </button>
    `}};B([s({type:Boolean,reflect:!0})],it.prototype,"disabled",void 0),B([s({attribute:"ne-aria-label",type:String,reflect:!0})],it.prototype,"ariaLabel",void 0),B([s({type:String,attribute:"left-icon",reflect:!0})],it.prototype,"leftIconType",void 0),B([s({type:String,attribute:"right-icon",reflect:!0})],it.prototype,"rightIconType",void 0),B([s({reflect:!0})],it.prototype,"variant",void 0),it=B([i("ne-button")],it);const ot=[r.iv`
  * {
  --ne-dropdown-menu-color-elevated-background: var(--ne-ref-color-white, #ffffff);
  --ne-dropdown-menu-color-elevated-border: var(--ne-ref-color-grey-10, #E2E3E4);
  --ne-dropdown-menu-color-flat-background: var(--ne-ref-color-white, #ffffff);
  --ne-dropdown-menu-color-flat-border: var(--ne-ref-color-blue-60, #006BD6);
  --ne-dropdown-menu-border-radius-elevated: var(--ne-ref-border-radius-medium, .25em);
  --ne-dropdown-menu-border-radius-flat-top: var(--ne-ref-border-radius-none, 0);
  --ne-dropdown-menu-border-radius-flat-bottom: var(--ne-ref-border-radius-medium, .25em);
  --ne-dropdown-menu-padding-horizontal: var(--ne-ref-spacing-none, 0);
  --ne-dropdown-menu-padding-vertical: var(--ne-ref-spacing-xx-small, 0.25em);
  --ne-dropdown-menu-border-width: var(--ne-ref-border-width-small, 1px);
  --ne-dropdown-menu-shadow-elevated: var(--ne-dropdown-menu-shadow-elevated);
}
`,r.iv`
  .dropdown-menu {
    margin: 0;
    padding: var(--ne-dropdown-menu-padding-vertical)
      var(--ne-dropdown-menu-padding-horizontal);
    border-width: var(--ne-dropdown-menu-border-width);
    border-style: solid;
  }

  .dropdown-menu.elevated {
    border-color: var(--ne-dropdown-menu-color-elevated-border);
    border-radius: var(--ne-dropdown-menu-border-radius-elevated);
    background-color: var(--ne-dropdown-menu-color-elevated-background);
    box-shadow: 3px 3px 5px rgb(22 23 24 / 10%);
  }

  .dropdown-menu.flat {
    border-color: var(--ne-dropdown-menu-color-flat-border);
    border-radius: var(--ne-dropdown-menu-border-radius-flat-top)
      var(--ne-dropdown-menu-border-radius-flat-top)
      var(--ne-dropdown-menu-border-radius-flat-bottom)
      var(--ne-dropdown-menu-border-radius-flat-bottom);
    background-color: var(--ne-dropdown-menu-color-flat-background);
  }

  .dropdown-menu.fixed-height {
    /* Shows 6 rows */
    max-height: calc(10 * (1em * 1.2));
    overflow-y: auto;
  }

  .dropdown-menu ::slotted(li) {
    display: block;
  }
`,M];let st=class extends r.oi{constructor(){super(...arguments),this.ariaLabel="",this.variant="elevated",this.fixedHeight=!1}static get styles(){return ot}render(){return r.dy` <div
      class=${F({"dropdown-menu":!0,elevated:"elevated"===this.variant,flat:"flat"===this.variant,"fixed-height":this.fixedHeight})}
      aria-label=${this.ariaLabel||r.Ld}
    >
      <slot></slot>
    </div>`}};B([s({attribute:"ne-aria-label",type:String,reflect:!0})],st.prototype,"ariaLabel",void 0),B([s({reflect:!0})],st.prototype,"variant",void 0),B([s({reflect:!0})],st.prototype,"fixedHeight",void 0),st=B([i("ne-dropdown-menu")],st);const at=e=>null!=e?e:N.Ld;class lt{}const ct=new WeakMap,pt=O(class extends Ye{render(e){return N.Ld}update(e,[t]){var n;const r=t!==this.Y;return r&&void 0!==this.Y&&this.rt(void 0),(r||this.lt!==this.ct)&&(this.Y=t,this.dt=null===(n=e.options)||void 0===n?void 0:n.host,this.rt(this.ct=e.element)),N.Ld}rt(e){var t;if("function"==typeof this.Y){const n=null!==(t=this.dt)&&void 0!==t?t:globalThis;let r=ct.get(n);void 0===r&&(r=new WeakMap,ct.set(n,r)),void 0!==r.get(this.Y)&&this.Y.call(this.dt,void 0),r.set(this.Y,e),void 0!==e&&this.Y.call(this.dt,e)}else this.Y.value=e}get lt(){var e,t,n;return"function"==typeof this.Y?null===(t=ct.get(null!==(e=this.dt)&&void 0!==e?e:globalThis))||void 0===t?void 0:t.get(this.Y):null===(n=this.Y)||void 0===n?void 0:n.value}disconnected(){this.lt===this.ct&&this.rt(void 0)}reconnected(){this.rt(this.ct)}});var ut=n(6941),dt=n(7798),ft=n(4514);const ht=r.iv`
  * {
  --ne-file-picker-card-padding-horizontal: var(--ne-ref-spacing-medium, 1em);
  --ne-file-picker-card-padding-vertical: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-file-picker-card-gap: var(--ne-ref-spacing-x-small, 0.5em);
  --ne-file-picker-card-sizing-icon: var(--ne-ref-sizing-06, 1.5em);
  --ne-file-picker-card-color-background: var(--ne-ref-color-white, #ffffff);
  --ne-file-picker-card-color-border: var(--ne-ref-color-grey-10, #E2E3E4);
  --ne-file-picker-card-color-text-file-name: var(--ne-ref-color-grey-90, #161718);
  --ne-file-picker-card-color-text-subtext: var(--ne-ref-color-grey-60, #575C61);
  --ne-file-picker-card-border-width: var(--ne-ref-border-width-small, 1px);
  --ne-file-picker-card-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-file-picker-card-font-size-file-name: var(--ne-ref-font-size-04, 0.875em);
  --ne-file-picker-card-font-size-subtext: var(--ne-ref-font-size-02, 0.75em);
  --ne-file-picker-card-border-radius: var(--ne-ref-border-radius-medium, .25em);
}
`,mt=[r.iv`
  .file-card-area {
    position: relative;
    box-sizing: border-box;
    display: grid;
    border: var(--ne-file-picker-card-border-width) solid
      var(--ne-file-picker-card-color-border);
    border-radius: var(--ne-file-picker-card-border-radius);
    padding: var(--ne-file-picker-card-padding-vertical)
      var(--ne-file-picker-card-padding-horizontal);
    margin: 0;
    background-color: var(--ne-file-picker-card-color-background);
  }

  .content {
    align-self: stretch;
    display: flex;
    gap: var(--ne-file-picker-card-gap);
    align-items: center;
    justify-content: center;
    font-family: var(--ne-file-picker-card-font-family);
    font-size: var(--ne-file-picker-card-font-size-file-name);
    color: var(--ne-file-picker-color-label);
  }

  .text-content {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    line-height: var(--ne-file-picker-card-line-height);
  }

  .file-icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: var(--ne-file-picker-card-sizing-icon);
    height: var(--ne-file-picker-card-sizing-icon);
    margin: calc(var(--ne-file-picker-card-gap) / 2);
  }

  .delete-button {
    display: flex;
    height: fit-content;
    width: fit-content;
    align-items: center;
    justify-content: center;
    margin: 0 auto;
    cursor: pointer;
  }

  .btn {
    background-color: inherit;
    border: none;
    font-size: var(--ne-file-picker-card-sizing-icon);
    cursor: inherit;
  }

  ne-icon {
    display: inline-block;
    color: var(--ne-file-picker-card-color-text-file-name);
  }

  .delete-icon {
    cursor: pointer;
    width: 12px;
    height: 16px;
  }

  .file-icon-svg {
    width: 100%;
    height: 100%;
  }

  .sub-text {
    font-size: var(--ne-file-picker-card-font-size-subtext);
    color: var(--ne-file-picker-card-color-text-subtext);
  }
`,M,ht];let At=class extends r.oi{constructor(){super(...arguments),this.fileName="",this.format="Document",this.subtext="",this.handleClick=e=>{if(ze(this,"ne-click",{composed:!0,bubbles:!0}),this.onDelete)this.onDelete(e,this.id);else{const e=document.querySelector("ne-file-card");e?.style?.setProperty("display","none")}}}static get styles(){return mt}_handleClick(e){this.handleClick(e)}render(){let e=`${this.fileName.split(".")[this.fileName.split(".").length-1]}`;const t=e.length+" file".length>10?this.fileName:this.fileName.split(`.${e}`)[0];return e=e.length+" file".length>10?"Document":`${e.toUpperCase()} file   ${this.subtext}`,r.dy` <div class="file-card-area">
      <div class="content">
        <div class="file-icon">
          ${nt({typeAsHtml:ft.file,className:"file-icon-svg"})}
        </div>
        <div class="text-content">
          <label class="file-card-label">${t}</label>
          ${this.subtext?r.dy`<label class="sub-text">${e}</label>`:r.Ld}
        </div>
        <div class="delete-button">
          <button
            class="btn"
            @click=${this._handleClick}
            id="${this.id}-delete button"
            aria-label="delete button"
          >
            ${nt({typeAsHtml:dt.trash,className:"delete-icon"})}
          </button>
        </div>
      </div>
    </div>`}};B([s({type:String,reflect:!0})],At.prototype,"fileName",void 0),B([s({type:String})],At.prototype,"format",void 0),B([s({type:String,reflect:!0})],At.prototype,"subtext",void 0),B([s()],At.prototype,"onDelete",void 0),At=B([i("ne-file-card")],At);const yt=r.iv`
  * {
  --ne-file-picker-sizing-icon: var(--ne-ref-sizing-08, 2em);
  --ne-file-picker-sizing-height: var(--ne-ref-sizing-14, 6em);
  --ne-file-picker-message-padding: var(--ne-ref-spacing-medium, 1em);
  --ne-file-picker-message-gap: var(--ne-ref-spacing-medium, 1em);
  --ne-file-picker-padding: var(--ne-ref-spacing-medium, 1em);
  --ne-file-picker-color-background-default: var(--ne-ref-color-white, #ffffff);
  --ne-file-picker-color-background-hover: var(--ne-ref-color-blue-05, #F0F7FF);
  --ne-file-picker-color-label: var(--ne-ref-color-grey-60, #575C61);
  --ne-file-picker-color-border-default: var(--ne-ref-color-grey40, #898F94);
  --ne-file-picker-color-border-warning: var(--ne-ref-color-yellow-50, #FFCF1A);
  --ne-file-picker-color-border-error: var(--ne-ref-color-red-50, #E60000);
  --ne-file-picker-border-width: var(--ne-ref-border-width-small, 1px);
  --ne-file-picker-border-radius: var(--ne-ref-border-radius-medium, .25em);
  --ne-file-picker-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
  --ne-file-picker-font-size: var(--ne-ref-font-size-04, 0.875em);
  --ne-file-picker-gap: var(--ne-ref-spacing-medium, 1em);
}
`,gt=[r.iv`
  .drag-file-area {
    position: relative;
    box-sizing: border-box;
    border: var(--ne-file-picker-border-width) dashed
      var(--ne-file-picker-color-border);
    overflow: hidden;
    border-radius: var(--ne-file-picker-border-radius);
    padding: calc(var(--ne-file-picker-padding) / 2);
    min-height: 96px;
  }

  .drag-file-area.dragging-over-area {
    background-color: var(--ne-file-picker-color-background-hover);
    height: 96px;
    display: grid;
    padding: 0 calc(var(--ne-file-picker-padding) / 2);
  }

  .form-container {
    position: relative;
    box-sizing: border-box;
    display: grid;
    width: 100%;
    height: 100%;
  }

  .file-picker-container {
    align-self: stretch;
    display: flex;
    text-align: center;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    margin: calc(var(--ne-file-picker-padding) / 2);
  }

  .upload-files-container {
    position: relative;
    display: grid;
    width: 100%;
    flex-direction: column;
    gap: var(--ne-file-picker-padding);
  }

  .file-picker-container .upload-files-container ne-file-card:last-child {
    margin-bottom: var(--ne-file-picker-padding);
  }

  .file-picker-message {
    width: fit-content;
    height: fit-content;
    padding: var(--ne-file-picker-message-padding);
    display: inline-flex;
    gap: var(--ne-file-picker-message-gap);
    align-items: center;
    justify-content: center;
    font-family: var(--ne-file-picker-font-family);
    font-size: var(--ne-file-picker-font-size);
    color: var(--ne-file-picker-color-label);
  }

  #default-file-input {
    opacity: 0;
    display: none;
    position: absolute;
    z-index: -1;
    left: 0;
    top: 0;
    width: 0;
    height: 0;
    visibility: hidden;
  }
`,M,yt],vt=[r.iv`
  .file-picker-container {
    position: inherit;
    align-self: stretch;
    display: flex;
    text-align: center;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    margin: calc(var(--ne-file-picker-padding) / 2);
  }

  .file-picker-message {
    width: fit-content;
    height: fit-content;
    padding: var(--ne-file-picker-message-padding);
    display: inline-flex;
    gap: var(--ne-file-picker-message-gap);
    align-items: center;
    justify-content: center;
    font-family: var(--ne-file-picker-font-family);
    font-size: var(--ne-file-picker-font-size);
    color: var(--ne-file-picker-color-label);
  }

  #default-file-input {
    opacity: 0;
    position: absolute;
    z-index: -1;
    left: 0;
    top: 0;
    width: 0;
    height: 0;
  }

  .dropzone-icon-container {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: var(--ne-file-picker-sizing-icon);
    height: var(--ne-file-picker-sizing-icon);
  }

  .dropzone-icon-container svg {
    width: 100%;
    height: var(--ne-file-picker-sizing-icon);
  }
`,M,yt];let bt=class extends r.oi{static get styles(){return vt}static get properties(){return{singleFile:{type:Boolean}}}constructor(){super(),this.singleFile=!1,this.singleFile=!1}render(){const e=this.singleFile?"file":"files";return r.dy` <div class="file-picker-container">
      <div class="file-picker-message">
        <div class="dropzone-icon-container dropzone-icon">
          ${nt({typeAsHtml:ut.dropzone})}
        </div>
        <label
          draggable="true"
          id="${this.id}-dropzone-label"
          for="default-file-input"
          aria-label="Drag ${e} here"
        >
          Drag ${e} here...
        </label>
        <slot>
          <input
            tabindex="-1"
            @input="${this.handleChange}"
            type="file"
            id="default-file-input"
            ?multiple="${!this.singleFile}"
          />
        </slot>
      </div>
    </div>`}};B([s()],bt.prototype,"handleChange",void 0),B([s({type:Boolean})],bt.prototype,"singleFile",void 0),bt=B([i("ne-file-dropzone")],bt);let Ct=class extends(Ie(r.oi)){static get scopedElements(){return{"ne-file-dropzone":bt,"ne-button":it,"ne-file-card":At}}get filePickerCards(){return this._filePickerCards}set filePickerCards(e){const t=this._filePickerCards;this._filePickerCards=e,this.requestUpdate("filePickerCards",t)}get dragover(){return this._dragover}set dragover(e){const t=this._dragover;this._dragover=e,this.requestUpdate("dragover",t)}static get styles(){return gt}static get properties(){return{filePickerCards:{type:Array},singleFile:{type:Boolean},dragover:{type:Boolean}}}constructor(){super(),this.singleFile=!1,this._filePickerCards=[],this._dragover=!1,this._inputRef=new lt,this.preventDefaults=e=>{ze(this,"ne-change",{composed:!0,bubbles:!0}),e.preventDefault(),e.stopPropagation()},this.handleClick=()=>{ze(this,"ne-click",{composed:!0,bubbles:!0})},this.fileSizeIEC=e=>{const t=0===e.size?0:Math.floor(Math.log(e.size)/Math.log(1024));return`${(e.size/1024**t).toFixed(2)} ${["B","KB","MB","GB","TB"][t]}`},this._handleChange=async e=>{const t=e?.target?.files;await this.getFiles(t)},this.onDrop=async e=>{if(e&&"drop"===e.type&&e.dataTransfer){const{files:t}=e.dataTransfer;await this.getFiles(t)}ze(this,"ne-drop",{composed:!0,bubbles:!0,detail:{value:e.target.value,data:e.target.files,originalEvent:e}}),e.stopImmediatePropagation(),e.preventDefault(),this.dragover=!1},this.onDragOver=()=>{this.dragover=!0},this.onDragOverEnd=()=>{this.dragover=!1},this.filePickerCards=[],this.dragover=!1}connectedCallback(){super.connectedCallback(),["dragover","dragleave","drop"].forEach((e=>{this.addEventListener(e,this.preventDefaults,!1)})),["dragenter","dragover"].forEach((e=>{this.addEventListener(e,this.onDragOver,!1)})),["dragleave","drop"].forEach((e=>{this.addEventListener(e,this.onDragOverEnd,!1)})),this.addEventListener("drop",this.onDrop,!1)}disconnectedCallback(){["dragover","dragleave","drop"].forEach((e=>{this.removeEventListener(e,this.preventDefaults,!1)})),["dragenter","dragover"].forEach((e=>{this.removeEventListener(e,this.onDragOver,!1)})),["dragleave","drop"].forEach((e=>{this.removeEventListener(e,this.onDragOverEnd,!1)})),this.removeEventListener("drop",this.onDrop,!1),super.disconnectedCallback()}_handleClick(){const e=this._inputRef.value;e?.click(),this.handleClick()}async getFiles(e){if(e){const t=this.filePickerCards;let n=0;this.filePickerCards.length>0&&(n=this.filePickerCards.length);let r=!1;Array.from(e).forEach(((i,o)=>{if(!r){const s=i,a=this.fileSizeIEC(s);t.push({id:String(0!==n?o+n:o),fileName:s.name,subtext:a}),this.singleFile&&e.length>1&&(r=!0)}})),this.filePickerCards=t,this.onChange&&this.onChange(e)}this.requestUpdate()}async onDelete(e,t,n){ze(this,"ne-click",{composed:!0,bubbles:!0}),this.filePickerCards=n.filter((e=>e.id!==t)),this.onChange&&this.onChange(this.filePickerCards),this.requestUpdate()}renderForm(e){const t=this.singleFile?"file":"files";return this.dragover?r.dy` <div class="file-picker-container">
      <ne-file-dropzone
        id="${this.id}-dropzone"
        ?singleFile="${this.singleFile}"
        .handleChange="${this._handleChange}"
      ></ne-file-dropzone>
    </div>`:r.dy` <form class="form-container" enctype="multipart/form-data">
        <div class="file-picker-container">
          ${e}
          <div class="file-picker-message">
            <input
              ${pt(this._inputRef)}
              @input="${this._handleChange}"
              type="file"
              ?multiple="${!this.singleFile}"
              tabindex="-1"
              id="default-file-input"
              name="select-file-input"
            />
            <label
              draggable="true"
              id="Select ${t}"
              for="${this.id}-button"
              aria-label="Drag ${t} here"
            >
              Drag ${t} here or
            </label>
            <ne-button
              id="${this.id}-button"
              variant="secondary"
              @click=${this._handleClick}
              ne-aria-label="Select ${t}"
              tabindex="0"
              >Select ${t}
            </ne-button>
          </div>
        </div>
      </form>`}render(){const e=[],t=[];if(this.filePickerCards){for(const t of this.filePickerCards)e.push(r.dy` <ne-file-card
          .id=${t.id}
          .fileName=${t.fileName}
          .subtext="${at(t.subtext)}"
          .onDelete="${(e,t)=>this.onDelete(e,t,this.filePickerCards)}"
        ></ne-file-card>`);e&&t.push(r.dy` <div class="upload-files-container">${e}</div>`)}return this.singleFile&&1===e.length?r.dy`${t}`:r.dy`
          <div
            class=${F({"drag-file-area":!0,"dragging-over-area":this.dragover})}
          >
            ${this.renderForm(t)}
          </div>
        `}};function xt(e,t,n,r){var i,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,n,s):i(t,n))||s);return o>3&&s&&Object.defineProperty(t,n,s),s}B([s()],Ct.prototype,"onChange",void 0),B([s({type:Boolean})],Ct.prototype,"singleFile",void 0),B([s({type:Array,reflect:!0})],Ct.prototype,"filePickerCards",null),Ct=B([i("ne-file-picker")],Ct);const wt=r.iv`
  :host {
    all: initial;
  }

  .hidden {
    display: none;
  }
`,Et=r.iv`
  * {
  --ne-label-gap: var(--ne-ref-spacing-none, 0);
  --ne-label-color-title: var(--ne-ref-color-grey-60, #575C61);
  --ne-label-color-asterisk: var(--ne-ref-color-red-60, #B80000);
  --ne-label-font-size: var(--ne-ref-font-size-04, 0.875em);
  --ne-label-font-family: var(--ne-ref-font-family-open-sans, Open Sans);
}
`,kt=[r.iv`
  * {
    color: var(--ne-label-color-title);
    font-family: var(--ne-label-font-family);
    font-size: 1em;
  }

  .outer-label {
    display: flex;
    font-size: var(--ne-label-font-size);
  }

  .required-indicator {
    margin-left: var(--ne-label-gap);
    color: var(--ne-label-color-asterisk);
  }
`,wt,Et];let _t=class extends r.oi{constructor(){super(...arguments),this.for="",this.required=!1}static get styles(){return kt}render(){return r.dy`<label
      class="outer-label"
      id=${at(this.id)}
      for=${at(this.for)}
    >
      <slot></slot>
      ${this.required?r.dy`<span class="required-indicator">*</span>`:r.Ld}
    </label> `}};xt([s({attribute:"for"})],_t.prototype,"for",void 0),xt([s({attribute:"required",type:Boolean,reflect:!0})],_t.prototype,"required",void 0),_t=xt([i("ne-label")],_t);const St=[S,r.iv`
  .container {
    width: 100%;
    height: 100%;
  }

  #buttons-row {
    width: 100%;
    bottom: 0;
    display: grid;
    direction: rtl;
    grid-template-columns: fit-content(5em) fit-content(5em);
    gap: ${R};
    border-top: solid var(--ne-alias-border-width-default)
      var(--ne-alias-border-grey);
    margin: ${R} 0;
    padding-top: ${R};
  }
`];var Rt=function(e,t){return Rt=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},Rt(e,t)};function $t(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}Rt(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}Object.create;function Bt(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function Mt(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s}function Nt(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))}Object.create;function Dt(e){return"function"==typeof e}function Pt(e){var t=e((function(e){Error.call(e),e.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}var Ot=Pt((function(e){return function(t){e(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}));function Tt(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var Ft=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}var t;return e.prototype.unsubscribe=function(){var e,t,n,r,i;if(!this.closed){this.closed=!0;var o=this._parentage;if(o)if(this._parentage=null,Array.isArray(o))try{for(var s=Bt(o),a=s.next();!a.done;a=s.next()){a.value.remove(this)}}catch(t){e={error:t}}finally{try{a&&!a.done&&(t=s.return)&&t.call(s)}finally{if(e)throw e.error}}else o.remove(this);var l=this.initialTeardown;if(Dt(l))try{l()}catch(e){i=e instanceof Ot?e.errors:[e]}var c=this._finalizers;if(c){this._finalizers=null;try{for(var p=Bt(c),u=p.next();!u.done;u=p.next()){var d=u.value;try{Lt(d)}catch(e){i=null!=i?i:[],e instanceof Ot?i=Nt(Nt([],Mt(i)),Mt(e.errors)):i.push(e)}}}catch(e){n={error:e}}finally{try{u&&!u.done&&(r=p.return)&&r.call(p)}finally{if(n)throw n.error}}}if(i)throw new Ot(i)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)Lt(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&Tt(t,e)},e.prototype.remove=function(t){var n=this._finalizers;n&&Tt(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e}(),It=Ft.EMPTY;function zt(e){return e instanceof Ft||e&&"closed"in e&&Dt(e.remove)&&Dt(e.add)&&Dt(e.unsubscribe)}function Lt(e){Dt(e)?e():e.unsubscribe()}var jt={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},Vt={setTimeout:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=Vt.delegate;return(null==i?void 0:i.setTimeout)?i.setTimeout.apply(i,Nt([e,t],Mt(n))):setTimeout.apply(void 0,Nt([e,t],Mt(n)))},clearTimeout:function(e){var t=Vt.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function Ut(){}var Ht=qt("C",void 0,void 0);function qt(e,t,n){return{kind:e,value:t,error:n}}var Kt=null;function Gt(e){if(jt.useDeprecatedSynchronousErrorHandling){var t=!Kt;if(t&&(Kt={errorThrown:!1,error:null}),e(),t){var n=Kt,r=n.errorThrown,i=n.error;if(Kt=null,r)throw i}}else e()}var Wt=function(e){function t(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,zt(t)&&t.add(n)):n.destination=tn,n}return $t(t,e),t.create=function(e,t,n){return new Jt(e,t,n)},t.prototype.next=function(e){this.isStopped?en(function(e){return qt("N",e,void 0)}(e),this):this._next(e)},t.prototype.error=function(e){this.isStopped?en(function(e){return qt("E",void 0,e)}(e),this):(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped?en(Ht,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(Ft),Yt=Function.prototype.bind;function Zt(e,t){return Yt.call(e,t)}var Xt=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){Qt(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){Qt(e)}else Qt(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){Qt(e)}},e}(),Jt=function(e){function t(t,n,r){var i,o,s=e.call(this)||this;Dt(t)||!t?i={next:null!=t?t:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:s&&jt.useDeprecatedNextContext?((o=Object.create(t)).unsubscribe=function(){return s.unsubscribe()},i={next:t.next&&Zt(t.next,o),error:t.error&&Zt(t.error,o),complete:t.complete&&Zt(t.complete,o)}):i=t;return s.destination=new Xt(i),s}return $t(t,e),t}(Wt);function Qt(e){var t;jt.useDeprecatedSynchronousErrorHandling?(t=e,jt.useDeprecatedSynchronousErrorHandling&&Kt&&(Kt.errorThrown=!0,Kt.error=t)):function(e){Vt.setTimeout((function(){var t=jt.onUnhandledError;if(!t)throw e;t(e)}))}(e)}function en(e,t){var n=jt.onStoppedNotification;n&&Vt.setTimeout((function(){return n(e,t)}))}var tn={closed:!0,next:Ut,error:function(e){throw e},complete:Ut},nn="function"==typeof Symbol&&Symbol.observable||"@@observable";function rn(e){return e}function on(e){return 0===e.length?rn:1===e.length?e[0]:function(t){return e.reduce((function(e,t){return t(e)}),t)}}var sn=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var r,i=this,o=(r=e)&&r instanceof Wt||function(e){return e&&Dt(e.next)&&Dt(e.error)&&Dt(e.complete)}(r)&&zt(r)?e:new Jt(e,t,n);return Gt((function(){var e=i,t=e.operator,n=e.source;o.add(t?t.call(o,n):n?i._subscribe(o):i._trySubscribe(o))})),o},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=an(t))((function(t,r){var i=new Jt({next:function(t){try{e(t)}catch(e){r(e),i.unsubscribe()}},error:r,complete:t});n.subscribe(i)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[nn]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return on(e)(this)},e.prototype.toPromise=function(e){var t=this;return new(e=an(e))((function(e,n){var r;t.subscribe((function(e){return r=e}),(function(e){return n(e)}),(function(){return e(r)}))}))},e.create=function(t){return new e(t)},e}();function an(e){var t;return null!==(t=null!=e?e:jt.Promise)&&void 0!==t?t:Promise}var ln=Pt((function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),cn=function(e){function t(){var t=e.call(this)||this;return t.closed=!1,t.currentObservers=null,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return $t(t,e),t.prototype.lift=function(e){var t=new pn(this,this);return t.operator=e,t},t.prototype._throwIfClosed=function(){if(this.closed)throw new ln},t.prototype.next=function(e){var t=this;Gt((function(){var n,r;if(t._throwIfClosed(),!t.isStopped){t.currentObservers||(t.currentObservers=Array.from(t.observers));try{for(var i=Bt(t.currentObservers),o=i.next();!o.done;o=i.next()){o.value.next(e)}}catch(e){n={error:e}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}}}))},t.prototype.error=function(e){var t=this;Gt((function(){if(t._throwIfClosed(),!t.isStopped){t.hasError=t.isStopped=!0,t.thrownError=e;for(var n=t.observers;n.length;)n.shift().error(e)}}))},t.prototype.complete=function(){var e=this;Gt((function(){if(e._throwIfClosed(),!e.isStopped){e.isStopped=!0;for(var t=e.observers;t.length;)t.shift().complete()}}))},t.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(t.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),t.prototype._trySubscribe=function(t){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},t.prototype._innerSubscribe=function(e){var t=this,n=this,r=n.hasError,i=n.isStopped,o=n.observers;return r||i?It:(this.currentObservers=null,o.push(e),new Ft((function(){t.currentObservers=null,Tt(o,e)})))},t.prototype._checkFinalizedStatuses=function(e){var t=this,n=t.hasError,r=t.thrownError,i=t.isStopped;n?e.error(r):i&&e.complete()},t.prototype.asObservable=function(){var e=new sn;return e.source=this,e},t.create=function(e,t){return new pn(e,t)},t}(sn),pn=function(e){function t(t,n){var r=e.call(this)||this;return r.destination=t,r.source=n,r}return $t(t,e),t.prototype.next=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.next)||void 0===n||n.call(t,e)},t.prototype.error=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.error)||void 0===n||n.call(t,e)},t.prototype.complete=function(){var e,t;null===(t=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===t||t.call(e)},t.prototype._subscribe=function(e){var t,n;return null!==(n=null===(t=this.source)||void 0===t?void 0:t.subscribe(e))&&void 0!==n?n:It},t}(cn);class un{constructor(){this.triggerImportModuleSelected=e=>{this.importModuleSelectedSubject.next({importModule:e})},this.triggerImportCompleted=e=>{this.importCompleteSubject.next({content:e})},this.triggerCanceled=()=>{this.cancelSubject.next()},this.triggerError=(e,t)=>{console.error("Error:",e,t),this.errorSubject.next({message:e,error:t})},this.importModuleSelectedSubject=new cn,this.importCompleteSubject=new cn,this.cancelSubject=new cn,this.errorSubject=new cn}static getInstance(){return this._eventService||(this._eventService=new un),this._eventService}static resetInstance(){return this._eventService=null,this.getInstance()}static{this.fireExternal=(e,t,n)=>{const r={bubbles:!0,cancelable:!1,composed:!0,...n},i=new CustomEvent(t,r);return e.dispatchEvent(i),i}}}var dn=function(e,t,n,r){var i,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,n,s):i(t,n))||s);return o>3&&s&&Object.defineProperty(t,n,s),s};let fn=class extends(d(r.oi)){static get scopedElements(){return{"ne-dropdown-menu":customElements.get("ne-dropdown-menu"),"ne-dropdown-menu-item":customElements.get("ne-dropdown-menu-item"),"ne-button":customElements.get("ne-button"),"ne-label":customElements.get("ne-label")}}static get styles(){return St}constructor(){super(),this._setSelected=e=>{this._selected=e},this._onNextClick=()=>{this._selected&&this._eventService.triggerImportModuleSelected(this._selected)},this._onCancelClick=()=>{this._selected=null,this._eventService.triggerCanceled()},this._eventService=un.getInstance()}render(){return r.dy`<div class="container">
      ${this.importModules?r.dy`<ne-dropdown-menu variant="elevated">
            ${this.importModules.map((e=>r.dy`<ne-dropdown-menu-item
                  .text=${e.displayName}
                  @ne-click="${()=>this._setSelected(e)}"
                ></ne-dropdown-menu-item>`))}
          </ne-dropdown-menu>`:r.dy`<ne-label class="noimports-label"
            >No import(s) available</ne-label
          >`}
      <div id="buttons-row">
        <ne-button variant="secondary" @ne-click=${this._onCancelClick}
          >Cancel</ne-button
        >
        <ne-button
          variant="primary"
          .disabled=${!this._selected}
          @ne-click=${this._onNextClick}
          >Next</ne-button
        >
      </div>
    </div>`}};dn([s({type:Array})],fn.prototype,"importModules",void 0),dn([s()],fn.prototype,"_selected",void 0),fn=dn([i("pi-import-list")],fn);const hn=Object.prototype.toString,mn=Object.prototype.hasOwnProperty;function An(e){return void 0===e}function yn(e){return"[object Array]"===hn.call(e)}function gn(e){return"[object Object]"===hn.call(e)}function vn(e){const t=hn.call(e);return"[object Function]"===t||"[object AsyncFunction]"===t||"[object GeneratorFunction]"===t||"[object AsyncGeneratorFunction]"===t||"[object Proxy]"===t}function bn(e){return"[object String]"===hn.call(e)}function Cn(e,t){return mn.call(e,t)}function xn(e,t){let n;return t=kn(t),En(e,(function(e,r){if(t(e,r))return n=e,!1})),n}function wn(e,t){let n=[];return En(e,(function(e,r){t(e,r)&&n.push(e)})),n}function En(e,t){let n,r;if(An(e))return;const i=yn(e)?Sn:_n;for(let o in e)if(Cn(e,o)&&(n=e[o],r=t(n,i(o)),!1===r))return n}function kn(e){return vn(e)?e:t=>t===e}function _n(e){return e}function Sn(e){return Number(e)}function Rn(e,t){return e.bind(t)}function $n(e,...t){return Object.assign(e,...t)}function Bn(){}function Mn(e,t){this.model=e,this.properties=t}Bn.prototype.get=function(e){return this.$model.properties.get(this,e)},Bn.prototype.set=function(e,t){this.$model.properties.set(this,e,t)},Mn.prototype.createType=function(e){var t=this.model,n=this.properties,r=Object.create(Bn.prototype);En(e.properties,(function(e){e.isMany||void 0===e.default||(r[e.name]=e.default)})),n.defineModel(r,t),n.defineDescriptor(r,e);var i=e.ns.name;function o(e){n.define(this,"$type",{value:i,enumerable:!0}),n.define(this,"$attrs",{value:{}}),n.define(this,"$parent",{writable:!0}),En(e,Rn((function(e,t){this.set(t,e)}),this))}return o.prototype=r,o.hasType=r.$instanceOf=this.model.hasType,n.defineModel(o,t),n.defineDescriptor(o,e),o};var Nn={String:!0,Boolean:!0,Integer:!0,Real:!0,Element:!0},Dn={String:function(e){return e},Boolean:function(e){return"true"===e},Integer:function(e){return parseInt(e,10)},Real:function(e){return parseFloat(e)}};function Pn(e,t){var n=Dn[e];return n?n(t):t}function On(e){return!!Nn[e]}function Tn(e){return!!Dn[e]}function Fn(e,t){var n,r,i=e.split(/:/);if(1===i.length)n=e,r=t;else{if(2!==i.length)throw new Error("expected <prefix:localName> or <localName>, got "+e);n=i[1],r=i[0]}return{name:e=(r?r+":":"")+n,prefix:r,localName:n}}function In(e){this.ns=e,this.name=e.name,this.allTypes=[],this.allTypesByName={},this.properties=[],this.propertiesByName={}}function zn(e,t){this.packageMap={},this.typeMap={},this.packages=[],this.properties=t,En(e,Rn(this.registerPackage,this))}function Ln(e,t,n){var r=t[n];if(r in e)throw new Error("package with "+n+" <"+r+"> already defined")}function jn(e){this.model=e}function Vn(e,t,n){Object.defineProperty(e,t.name,{enumerable:!t.isReference,writable:!0,value:n,configurable:!0})}function Un(e){return e.replace(/^:/,"")}function Hn(e,t={}){this.properties=new jn(this),this.factory=new Mn(this,this.properties),this.registry=new zn(e,this.properties),this.typeCache={},this.config=t}In.prototype.build=function(){return function(e,t){let n={},r=Object(e);return En(t,(function(t){t in r&&(n[t]=e[t])})),n}(this,["ns","name","allTypes","allTypesByName","properties","propertiesByName","bodyProperty","idProperty"])},In.prototype.addProperty=function(e,t,n){"boolean"==typeof t&&(n=t,t=void 0),this.addNamedProperty(e,!1!==n);var r=this.properties;void 0!==t?r.splice(t,0,e):r.push(e)},In.prototype.replaceProperty=function(e,t,n){var r=e.ns,i=this.properties,o=this.propertiesByName,s=e.name!==t.name;if(e.isId){if(!t.isId)throw new Error("property <"+t.ns.name+"> must be id property to refine <"+e.ns.name+">");this.setIdProperty(t,!1)}if(e.isBody){if(!t.isBody)throw new Error("property <"+t.ns.name+"> must be body property to refine <"+e.ns.name+">");this.setBodyProperty(t,!1)}var a=i.indexOf(e);if(-1===a)throw new Error("property <"+r.name+"> not found in property list");i.splice(a,1),this.addProperty(t,n?void 0:a,s),o[r.name]=o[r.localName]=t},In.prototype.redefineProperty=function(e,t,n){var r=e.ns.prefix,i=t.split("#"),o=Fn(i[0],r),s=Fn(i[1],o.prefix).name,a=this.propertiesByName[s];if(!a)throw new Error("refined property <"+s+"> not found");this.replaceProperty(a,e,n),delete e.redefines},In.prototype.addNamedProperty=function(e,t){var n=e.ns,r=this.propertiesByName;t&&(this.assertNotDefined(e,n.name),this.assertNotDefined(e,n.localName)),r[n.name]=r[n.localName]=e},In.prototype.removeNamedProperty=function(e){var t=e.ns,n=this.propertiesByName;delete n[t.name],delete n[t.localName]},In.prototype.setBodyProperty=function(e,t){if(t&&this.bodyProperty)throw new Error("body property defined multiple times (<"+this.bodyProperty.ns.name+">, <"+e.ns.name+">)");this.bodyProperty=e},In.prototype.setIdProperty=function(e,t){if(t&&this.idProperty)throw new Error("id property defined multiple times (<"+this.idProperty.ns.name+">, <"+e.ns.name+">)");this.idProperty=e},In.prototype.assertNotTrait=function(e){if((e.extends||[]).length)throw new Error(`cannot create <${e.name}> extending <${e.extends}>`)},In.prototype.assertNotDefined=function(e,t){var n=e.name,r=this.propertiesByName[n];if(r)throw new Error("property <"+n+"> already defined; override of <"+r.definedBy.ns.name+"#"+r.ns.name+"> by <"+e.definedBy.ns.name+"#"+e.ns.name+"> not allowed without redefines")},In.prototype.hasProperty=function(e){return this.propertiesByName[e]},In.prototype.addTrait=function(e,t){t&&this.assertNotTrait(e);var n=this.allTypesByName,r=this.allTypes,i=e.name;i in n||(En(e.properties,Rn((function(n){n=$n({},n,{name:n.ns.localName,inherited:t}),Object.defineProperty(n,"definedBy",{value:e});var r=n.replaces,i=n.redefines;r||i?this.redefineProperty(n,r||i,r):(n.isBody&&this.setBodyProperty(n),n.isId&&this.setIdProperty(n),this.addProperty(n))}),this)),r.push(e),n[i]=e)},zn.prototype.getPackage=function(e){return this.packageMap[e]},zn.prototype.getPackages=function(){return this.packages},zn.prototype.registerPackage=function(e){e=$n({},e);var t=this.packageMap;Ln(t,e,"prefix"),Ln(t,e,"uri"),En(e.types,Rn((function(t){this.registerType(t,e)}),this)),t[e.uri]=t[e.prefix]=e,this.packages.push(e)},zn.prototype.registerType=function(e,t){var n=Fn((e=$n({},e,{superClass:(e.superClass||[]).slice(),extends:(e.extends||[]).slice(),properties:(e.properties||[]).slice(),meta:$n(e.meta||{})})).name,t.prefix),r=n.name,i={};En(e.properties,Rn((function(e){var t=Fn(e.name,n.prefix),r=t.name;On(e.type)||(e.type=Fn(e.type,t.prefix).name),$n(e,{ns:t,name:r}),i[r]=e}),this)),$n(e,{ns:n,name:r,propertiesByName:i}),En(e.extends,Rn((function(e){var t=Fn(e,n.prefix),i=this.typeMap[t.name];i.traits=i.traits||[],i.traits.push(r)}),this)),this.definePackage(e,t),this.typeMap[r]=e},zn.prototype.mapTypes=function(e,t,n){var r=On(e.name)?{name:e.name}:this.typeMap[e.name],i=this;function o(n,r){var o=Fn(n,On(n)?"":e.prefix);i.mapTypes(o,t,r)}function s(e){return o(e,!0)}if(!r)throw new Error("unknown type <"+e.name+">");En(r.superClass,n?s:function(e){return o(e,!1)}),t(r,!n),En(r.traits,s)},zn.prototype.getEffectiveDescriptor=function(e){var t=Fn(e),n=new In(t);this.mapTypes(t,(function(e,t){n.addTrait(e,t)}));var r=n.build();return this.definePackage(r,r.allTypes[r.allTypes.length-1].$pkg),r},zn.prototype.definePackage=function(e,t){this.properties.define(e,"$pkg",{value:t})},jn.prototype.set=function(e,t,n){if(!bn(t)||!t.length)throw new TypeError("property name must be a non-empty string");var r=this.getProperty(e,t),i=r&&r.name;void 0===n?r?delete e[i]:delete e.$attrs[Un(t)]:r?i in e?e[i]=n:Vn(e,r,n):e.$attrs[Un(t)]=n},jn.prototype.get=function(e,t){var n=this.getProperty(e,t);if(!n)return e.$attrs[Un(t)];var r=n.name;return!e[r]&&n.isMany&&Vn(e,n,[]),e[r]},jn.prototype.define=function(e,t,n){if(!n.writable){var r=n.value;delete(n=$n({},n,{get:function(){return r}})).value}Object.defineProperty(e,t,n)},jn.prototype.defineDescriptor=function(e,t){this.define(e,"$descriptor",{value:t})},jn.prototype.defineModel=function(e,t){this.define(e,"$model",{value:t})},jn.prototype.getProperty=function(e,t){var n=this.model,r=n.getPropertyDescriptor(e,t);if(r)return r;if(t.includes(":"))return null;const i=n.config.strict;if(void 0!==i){const n=new TypeError(`unknown property <${t}> on <${e.$type}>`);if(i)throw n;"undefined"!=typeof console&&console.warn(n)}return null},Hn.prototype.create=function(e,t){var n=this.getType(e);if(!n)throw new Error("unknown type <"+e+">");return new n(t)},Hn.prototype.getType=function(e){var t=this.typeCache,n=bn(e)?e:e.ns.name,r=t[n];return r||(e=this.registry.getEffectiveDescriptor(n),r=t[n]=this.factory.createType(e)),r},Hn.prototype.createAny=function(e,t,n){var r=Fn(e),i={$type:e,$instanceOf:function(e){return e===this.$type}},o={name:e,isGeneric:!0,ns:{prefix:r.prefix,localName:r.localName,uri:t}};return this.properties.defineDescriptor(i,o),this.properties.defineModel(i,this),this.properties.define(i,"$parent",{enumerable:!1,writable:!0}),this.properties.define(i,"$instanceOf",{enumerable:!1,writable:!0}),En(n,(function(e,t){gn(e)&&void 0!==e.value?i[e.name]=e.value:i[t]=e})),i},Hn.prototype.getPackage=function(e){return this.registry.getPackage(e)},Hn.prototype.getPackages=function(){return this.registry.getPackages()},Hn.prototype.getElementDescriptor=function(e){return e.$descriptor},Hn.prototype.hasType=function(e,t){return void 0===t&&(t=e,e=this),t in e.$model.getElementDescriptor(e).allTypesByName},Hn.prototype.getPropertyDescriptor=function(e,t){return this.getElementDescriptor(e).propertiesByName[t]},Hn.prototype.getTypeDescriptor=function(e){return this.registry.typeMap[e]};var qn=String.fromCharCode,Kn=Object.prototype.hasOwnProperty,Gn=/&#(\d+);|&#x([0-9a-f]+);|&(\w+);/gi,Wn={amp:"&",apos:"'",gt:">",lt:"<",quot:'"'};function Yn(e,t,n,r){return r?Kn.call(Wn,r)?Wn[r]:"&"+r+";":qn(t||parseInt(n,16))}function Zn(e){return e.length>3&&-1!==e.indexOf("&")?e.replace(Gn,Yn):e}Object.keys(Wn).forEach((function(e){Wn[e.toUpperCase()]=Wn[e]}));var Xn="xsi:type",Jn="non-whitespace outside of root node";function Qn(e){return new Error(e)}function er(e){return"missing namespace for prefix <"+e+">"}function tr(e){return{get:e,enumerable:!0}}function nr(e){var t,n={};for(t in e)n[t]=e[t];return n}function rr(e){return e+"$uri"}function ir(){return{line:0,column:0}}function or(e){throw e}function sr(e){if(!this)return new sr(e);var t,n,r,i,o,s,a,l,c,p=e&&e.proxy,u=or,d=ir,f=!1,h=!1,m=null,A=!1;function y(e){e instanceof Error||(e=Qn(e)),m=e,u(e,d)}function g(e){o&&(e instanceof Error||(e=Qn(e)),o(e,d))}this.on=function(e,c){if("function"!=typeof c)throw Qn("required args <name, cb>");switch(e){case"openTag":n=c;break;case"text":t=c;break;case"closeTag":r=c;break;case"error":u=c;break;case"warn":o=c;break;case"cdata":i=c;break;case"attention":l=c;break;case"question":a=c;break;case"comment":s=c;break;default:throw Qn("unsupported event: "+e)}return this},this.ns=function(e){if(void 0===e&&(e={}),"object"!=typeof e)throw Qn("required args <nsMap={}>");var t,n={};for(t in e)n[t]=e[t];return n["http://www.w3.org/2001/XMLSchema-instance"]="xsi",h=!0,c=n,this},this.parse=function(e){if("string"!=typeof e)throw Qn("required args <xml=string>");return m=null,function(e){var o,u,m,v,b,C,x,w,E,k,_,S=h?[]:null,R=h?function(e){var t,n,r={};for(t in e)r[n=e[t]]=n,r[rr(n)]=t;return r}(c):null,$=[],B=0,M=!1,N=!1,D=0,P=0,O="",T=0;function F(){if(null!==_)return _;var e,t,n,r,i,o,s,a,l,p,u,d=h&&R.xmlns,m=h&&f?[]:null,A=T,y=O,v=y.length,b={},C={};e:for(;A<v;A++)if(l=!1,!(32===(p=y.charCodeAt(A))||p<14&&p>8)){for((p<65||p>122||p>90&&p<97)&&95!==p&&58!==p&&(g("illegal first char attribute name"),l=!0),u=A+1;u<v;u++)if(!((p=y.charCodeAt(u))>96&&p<123||p>64&&p<91||p>47&&p<59||46===p||45===p||95===p)){if(32===p||p<14&&p>8){g("missing attribute value"),A=u;continue e}if(61===p)break;g("illegal attribute name char"),l=!0}if("xmlns:xmlns"===(a=y.substring(A,u))&&(g("illegal declaration of xmlns"),l=!0),34===(p=y.charCodeAt(u+1)))-1===(u=y.indexOf('"',A=u+2))&&-1!==(u=y.indexOf("'",A))&&(g("attribute value quote missmatch"),l=!0);else if(39===p)-1===(u=y.indexOf("'",A=u+2))&&-1!==(u=y.indexOf('"',A))&&(g("attribute value quote missmatch"),l=!0);else for(g("missing attribute value quotes"),l=!0,u+=1;u<v&&!(32===(p=y.charCodeAt(u+1))||p<14&&p>8);u++);for(-1===u&&(g("missing closing quotes"),u=v,l=!0),l||(o=y.substring(A,u)),A=u;u+1<v&&!(32===(p=y.charCodeAt(u+1))||p<14&&p>8);u++)A===u&&(g("illegal character after attribute end"),l=!0);if(A=u+1,!l)if(a in C)g("attribute <"+a+"> already defined");else if(C[a]=!0,h)if(f){if(null!==(i="xmlns"===a?"xmlns":120===a.charCodeAt(0)&&"xmlns:"===a.substr(0,6)?a.substr(6):null)){if(e=Zn(o),t=rr(i),!(s=c[e])){if("xmlns"===i||t in R&&R[t]!==e)do{s="ns"+B++}while(void 0!==R[s]);else s=i;c[e]=s}R[i]!==s&&(r||(R=nr(R),r=!0),R[i]=s,"xmlns"===i&&(R[rr(s)]=e,d=s),R[t]=e),b[a]=o;continue}m.push(a,o)}else-1!==(p=a.indexOf(":"))?(n=R[a.substring(0,p)])?((a=d===n?a.substr(p+1):n+a.substr(p))===Xn&&(-1!==(p=o.indexOf(":"))?(n=o.substring(0,p),o=(n=R[n]||n)+o.substring(p)):o=d+":"+o),b[a]=o):g(er(a.substring(0,p))):b[a]=o;else b[a]=o}if(f)for(A=0,v=m.length;A<v;A++){if(a=m[A++],o=m[A],-1!==(p=a.indexOf(":"))){if(!(n=R[a.substring(0,p)])){g(er(a.substring(0,p)));continue}(a=d===n?a.substr(p+1):n+a.substr(p))===Xn&&(-1!==(p=o.indexOf(":"))?(n=o.substring(0,p),o=(n=R[n]||n)+o.substring(p)):o=d+":"+o)}b[a]=o}return _=b}function I(){for(var t,n,r=/(\r\n|\r|\n)/g,i=0,o=0,s=0,a=P;D>=s&&(t=r.exec(e))&&!((a=t[0].length+t.index)>D);)i+=1,s=a;return-1==D?(o=a,n=e.substring(P)):0===P?n=e.substring(P,D):(o=D-s,n=-1==P?e.substring(D):e.substring(D,P+1)),{data:n,line:i,column:o}}d=I,p&&(k=Object.create({},{name:tr((function(){return w})),originalName:tr((function(){return E})),attrs:tr(F),ns:tr((function(){return R}))}));for(;-1!==P;){if(-1===(D=60===e.charCodeAt(P)?P:e.indexOf("<",P)))return $.length?y("unexpected end of file"):0===P?y("missing start tag"):void(P<e.length&&e.substring(P).trim()&&g(Jn));if(P!==D)if($.length){if(t&&(t(e.substring(P,D),Zn,d),A))return}else if(e.substring(P,D).trim()&&(g(Jn),A))return;if(33===(b=e.charCodeAt(D+1))){if(91===(v=e.charCodeAt(D+2))&&"CDATA["===e.substr(D+3,6)){if(-1===(P=e.indexOf("]]>",D)))return y("unclosed cdata");if(i&&(i(e.substring(D+9,P),d),A))return;P+=3;continue}if(45===v&&45===e.charCodeAt(D+3)){if(-1===(P=e.indexOf("--\x3e",D)))return y("unclosed comment");if(s&&(s(e.substring(D+4,P),Zn,d),A))return;P+=3;continue}}if(63!==b){for(u=D+1;;u++){if(C=e.charCodeAt(u),isNaN(C))return P=-1,y("unclosed tag");if(34===C)u=-1!==(v=e.indexOf('"',u+1))?v:u;else if(39===C)u=-1!==(v=e.indexOf("'",u+1))?v:u;else if(62===C){P=u;break}}if(33!==b){if(_={},47===b){if(M=!1,N=!0,!$.length)return y("missing open tag");if(u=w=$.pop(),v=D+2+u.length,e.substring(D+2,v)!==u)return y("closing tag mismatch");for(;v<P;v++)if(!(32===(b=e.charCodeAt(v))||b>8&&b<14))return y("close tag")}else{if(47===e.charCodeAt(P-1)?(u=w=e.substring(D+1,P-1),M=!0,N=!0):(u=w=e.substring(D+1,P),M=!0,N=!1),!(b>96&&b<123||b>64&&b<91||95===b||58===b))return y("illegal first char nodeName");for(v=1,m=u.length;v<m;v++)if(!((b=u.charCodeAt(v))>96&&b<123||b>64&&b<91||b>47&&b<59||45===b||95===b||46==b)){if(32===b||b<14&&b>8){w=u.substring(0,v),_=null;break}return y("invalid nodeName")}N||$.push(w)}if(h){if(o=R,M&&(N||S.push(o),null===_&&(f=-1!==u.indexOf("xmlns",v))&&(T=v,O=u,F(),f=!1)),E=w,-1!==(b=w.indexOf(":"))){if(!(x=R[w.substring(0,b)]))return y("missing namespace on <"+E+">");w=w.substr(b+1)}else x=R.xmlns;x&&(w=x+":"+w)}if(M&&(T=v,O=u,n&&(p?n(k,Zn,N,d):n(w,F,Zn,N,d),A)))return;if(N){if(r&&(r(p?k:w,Zn,M,d),A))return;h&&(R=M?o:S.pop())}P+=1}else{if(l&&(l(e.substring(D,P+1),Zn,d),A))return;P+=1}}else{if(-1===(P=e.indexOf("?>",D)))return y("unclosed question");if(a&&(a(e.substring(D,P+2),d),A))return;P+=2}}}(e),d=ir,A=!1,m},this.stop=function(){A=!0}}function ar(e){return e.xml&&"lowerCase"===e.xml.tagAlias}var lr={xsi:"http://www.w3.org/2001/XMLSchema-instance",xml:"http://www.w3.org/XML/1998/namespace"},cr="xsi:type";function pr(e){return e.xml&&e.xml.serialize}function ur(e){return pr(e)===cr}function dr(e,t){return ar(t)?e.prefix+":"+((n=e.localName).charAt(0).toUpperCase()+n.slice(1)):e.name;var n}function fr(e){return new Error(e)}function hr(e){return e.$descriptor}function mr(e){$n(this,e),this.elementsById={},this.references=[],this.warnings=[],this.addReference=function(e){this.references.push(e)},this.addElement=function(e){if(!e)throw fr("expected element");var t,n=this.elementsById,r=hr(e).idProperty;if(r&&(t=e.get(r.name))){if(!/^([a-z][\w-.]*:)?[a-z_][\w-.]*$/i.test(t))throw new Error("illegal ID <"+t+">");if(n[t])throw fr("duplicate ID <"+t+">");n[t]=e}},this.addWarning=function(e){this.warnings.push(e)}}function Ar(){}function yr(){}function gr(){}function vr(e,t){this.property=e,this.context=t}function br(e,t){this.element=t,this.propertyDesc=e}function Cr(){}function xr(e,t,n){this.model=e,this.type=e.getType(t),this.context=n}function wr(e,t,n){xr.call(this,e,t,n)}function Er(e,t,n){this.model=e,this.context=n}function kr(e){e instanceof Hn&&(e={model:e}),$n(this,{lax:!1},e)}Ar.prototype.handleEnd=function(){},Ar.prototype.handleText=function(){},Ar.prototype.handleNode=function(){},yr.prototype=Object.create(Ar.prototype),yr.prototype.handleNode=function(){return this},gr.prototype=Object.create(Ar.prototype),gr.prototype.handleText=function(e){this.body=(this.body||"")+e},vr.prototype=Object.create(gr.prototype),vr.prototype.handleNode=function(e){if(this.element)throw fr("expected no sub nodes");return this.element=this.createReference(e),this},vr.prototype.handleEnd=function(){this.element.id=this.body},vr.prototype.createReference=function(e){return{property:this.property.ns.name,id:""}},br.prototype=Object.create(gr.prototype),br.prototype.handleEnd=function(){var e=this.body||"",t=this.element,n=this.propertyDesc;e=Pn(n.type,e),n.isMany?t.get(n.name).push(e):t.set(n.name,e)},Cr.prototype=Object.create(gr.prototype),Cr.prototype.handleNode=function(e){var t=this,n=this.element;return n?t=this.handleChild(e):(n=this.element=this.createElement(e),this.context.addElement(n)),t},xr.prototype=Object.create(Cr.prototype),xr.prototype.addReference=function(e){this.context.addReference(e)},xr.prototype.handleText=function(e){if(!hr(this.element).bodyProperty)throw fr("unexpected body text <"+e+">");gr.prototype.handleText.call(this,e)},xr.prototype.handleEnd=function(){var e=this.body,t=this.element,n=hr(t).bodyProperty;n&&void 0!==e&&(e=Pn(n.type,e),t.set(n.name,e))},xr.prototype.createElement=function(e){var t,n=e.attributes,r=this.type,i=hr(r),o=this.context,s=new r({}),a=this.model;return En(n,(function(e,n){var r=i.propertiesByName[n];r&&r.isReference?r.isMany?En(e.split(" "),(function(e){o.addReference({element:s,property:r.ns.name,id:e})})):o.addReference({element:s,property:r.ns.name,id:e}):(r?e=Pn(r.type,e):"xmlns"!==n&&(t=Fn(n,i.ns.prefix),a.getPackage(t.prefix)&&o.addWarning({message:"unknown attribute <"+n+">",element:s,property:n,value:e})),s.set(n,e))})),s},xr.prototype.getPropertyForNode=function(e){var t,n,r=Fn(e.name),i=this.type,o=this.model,s=hr(i),a=r.name,l=s.propertiesByName[a];if(l&&!l.isAttr)return ur(l)&&(t=e.attributes[cr])?(t=function(e,t){var n=Fn(e);return function(e,t){var n=e.name,r=e.localName,i=t.xml&&t.xml.typePrefix;return i&&0===r.indexOf(i)?e.prefix+":"+r.slice(i.length):n}(n,t.getPackage(n.prefix))}(t,o),$n({},l,{effectiveType:hr(n=o.getType(t)).name})):l;var c=o.getPackage(r.prefix);if(c){if(t=dr(r,c),n=o.getType(t),l=xn(s.properties,(function(e){return!e.isVirtual&&!e.isReference&&!e.isAttribute&&n.hasType(e.type)})),l)return $n({},l,{effectiveType:hr(n).name})}else if(l=xn(s.properties,(function(e){return!e.isReference&&!e.isAttribute&&"Element"===e.type})),l)return l;throw fr("unrecognized element <"+r.name+">")},xr.prototype.toString=function(){return"ElementDescriptor["+hr(this.type).name+"]"},xr.prototype.valueHandler=function(e,t){return new br(e,t)},xr.prototype.referenceHandler=function(e){return new vr(e,this.context)},xr.prototype.handler=function(e){return"Element"===e?new Er(this.model,e,this.context):new xr(this.model,e,this.context)},xr.prototype.handleChild=function(e){var t,n,r,i;if(t=this.getPropertyForNode(e),r=this.element,Tn(n=t.effectiveType||t.type))return this.valueHandler(t,r);var o=(i=t.isReference?this.referenceHandler(t).handleNode(e):this.handler(n).handleNode(e)).element;return void 0!==o&&(t.isMany?r.get(t.name).push(o):r.set(t.name,o),t.isReference?($n(o,{element:r}),this.context.addReference(o)):o.$parent=r),i},wr.prototype=Object.create(xr.prototype),wr.prototype.createElement=function(e){var t=e.name,n=Fn(t),r=this.model,i=this.type,o=r.getPackage(n.prefix),s=o&&dr(n,o)||t;if(!i.hasType(s))throw fr("unexpected element <"+e.originalName+">");return xr.prototype.createElement.call(this,e)},Er.prototype=Object.create(Cr.prototype),Er.prototype.createElement=function(e){var t=e.name,n=Fn(t).prefix,r=e.ns[n+"$uri"],i=e.attributes;return this.model.createAny(t,r,i)},Er.prototype.handleChild=function(e){var t=new Er(this.model,"Element",this.context).handleNode(e),n=this.element,r=t.element;return void 0!==r&&((n.$children=n.$children||[]).push(r),r.$parent=n),t},Er.prototype.handleEnd=function(){this.body&&(this.element.$body=this.body)},kr.prototype.fromXML=function(e,t,n){var r=t.rootHandler;t instanceof xr?(r=t,t={}):"string"==typeof t?(r=this.handler(t),t={}):"string"==typeof r&&(r=this.handler(r));var i=this.model,o=this.lax,s=new mr($n({},t,{rootHandler:r})),a=new sr({proxy:!0}),l=function(){var e=[];return Object.defineProperty(e,"peek",{value:function(){return this[this.length-1]}}),e}();function c(e,t,n){var r=t(),i=r.line,o=r.column,a=r.data;"<"===a.charAt(0)&&-1!==a.indexOf(" ")&&(a=a.slice(0,a.indexOf(" "))+">");var l="unparsable content "+(a?a+" ":"")+"detected\n\tline: "+i+"\n\tcolumn: "+o+"\n\tnested error: "+e.message;if(n)return s.addWarning({message:l,error:e}),!0;throw fr(l)}function p(e,t){return c(e,t,!0)}r.context=s,l.push(r);var u=/^<\?xml /i,d=/ encoding="([^"]+)"/i,f=/^utf-8$/i;function h(e,t){try{l.peek().handleText(e)}catch(e){p(e,t)}}var m=i.getPackages().reduce((function(e,t){return e[t.uri]=t.prefix,e}),{"http://www.w3.org/XML/1998/namespace":"xml"});return a.ns(m).on("openTag",(function(e,t,n,r){var i=e.attrs||{},s=Object.keys(i).reduce((function(e,n){var r=t(i[n]);return e[n]=r,e}),{});!function(e,t){var n=l.peek();try{l.push(n.handleNode(e))}catch(e){c(e,t,o)&&l.push(new yr)}}({name:e.name,originalName:e.originalName,attributes:s,ns:e.ns},r)})).on("question",(function(e){if(u.test(e)){var t=d.exec(e),n=t&&t[1];n&&!f.test(n)&&s.addWarning({message:"unsupported document encoding <"+n+">, falling back to UTF-8"})}})).on("closeTag",(function(){l.pop().handleEnd()})).on("cdata",h).on("text",(function(e,t,n){!function(e,t){e.trim()&&h(e,t)}(t(e),n)})).on("error",c).on("warn",p),new Promise((function(t,n){var i;try{a.parse(e),function(){var e,t,n=s.elementsById,r=s.references;for(e=0;t=r[e];e++){var i=t.element,o=n[t.id],a=hr(i).propertiesByName[t.property];if(o||s.addWarning({message:"unresolved reference <"+t.id+">",element:t.element,property:t.property,value:t.id}),a.isMany){var l=i.get(a.name),c=l.indexOf(t);-1===c&&(c=l.length),o?l[c]=o:l.splice(c,1)}else i.set(a.name,o)}}()}catch(e){i=e}var o=r.element;i||o||(i=fr("failed to parse document as <"+r.type.$descriptor.name+">"));var l=s.warnings,c=s.references,p=s.elementsById;return i?(i.warnings=l,n(i)):t({rootElement:o,elementsById:p,references:c,warnings:l})}))},kr.prototype.handler=function(e){return new wr(this.model,e)};var _r=/<|>|'|"|&|\n\r|\n/g,Sr=/<|>|&/g;function Rr(e){var t={},n={},r={},i=[],o=[];this.byUri=function(t){return n[t]||e&&e.byUri(t)},this.add=function(e,t){n[e.uri]=e,t?i.push(e):o.push(e),this.mapPrefix(e.prefix,e.uri)},this.uriByPrefix=function(e){return t[e||"xmlns"]},this.mapPrefix=function(e,n){t[e||"xmlns"]=n},this.getNSKey=function(e){return void 0!==e.prefix?e.uri+"|"+e.prefix:e.uri},this.logUsed=function(t){var n=t.uri,i=this.getNSKey(t);r[i]=this.byUri(n),e&&e.logUsed(t)},this.getUsed=function(e){var t=this;return[].concat(i,o).filter((function(e){var n=t.getNSKey(e);return r[n]}))}}function $r(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}function Br(e){return bn(e)?e:(e.prefix?e.prefix+":":"")+e.localName}var Mr={"\n":"#10","\n\r":"#10",'"':"#34","'":"#39","<":"#60",">":"#62","&":"#38"},Nr={"<":"lt",">":"gt","&":"amp"};function Dr(e,t,n){return(e=bn(e)?e:""+e).replace(t,(function(e){return"&"+n[e]+";"}))}function Pr(e){this.tagName=e}function Or(){}function Tr(e){this.tagName=e}function Fr(e,t){this.body=[],this.attrs=[],this.parent=e,this.propertyDescriptor=t}function Ir(e,t){Fr.call(this,e,t)}function zr(){this.value="",this.write=function(e){this.value+=e}}function Lr(e,t){var n=[""];this.append=function(t){return e.write(t),this},this.appendNewLine=function(){return t&&e.write("\n"),this},this.appendIndent=function(){return t&&e.write(n.join("  ")),this},this.indent=function(){return n.push(""),this},this.unindent=function(){return n.pop(),this}}function jr(e){return e=$n({format:!1,preamble:!0},e||{}),{toXML:function(t,n){var r=n||new zr,i=new Lr(r,e.format);if(e.preamble&&i.append('<?xml version="1.0" encoding="UTF-8"?>\n'),(new Fr).build(t).serializeTo(i),!n)return r.value}}}function Vr(e,t){Hn.call(this,e,t)}Pr.prototype.build=function(e){return this.element=e,this},Pr.prototype.serializeTo=function(e){e.appendIndent().append("<"+this.tagName+">"+this.element.id+"</"+this.tagName+">").appendNewLine()},Or.prototype.serializeValue=Or.prototype.serializeTo=function(e){e.append(this.escape?Dr(this.value,Sr,Nr):this.value)},Or.prototype.build=function(e,t){return this.value=t,"String"===e.type&&-1!==t.search(Sr)&&(this.escape=!0),this},$r(Tr,Or),Tr.prototype.serializeTo=function(e){e.appendIndent().append("<"+this.tagName+">"),this.serializeValue(e),e.append("</"+this.tagName+">").appendNewLine()},Fr.prototype.build=function(e){this.element=e;var t,n,r=e.$descriptor,i=this.propertyDescriptor,o=r.isGeneric;return t=o?this.parseGeneric(e):this.parseNsAttributes(e),this.ns=i?this.nsPropertyTagName(i):this.nsTagName(r),this.tagName=this.addTagName(this.ns),o||(n=function(e){return wn(e.$descriptor.properties,(function(t){var n=t.name;if(t.isVirtual)return!1;if(!Cn(e,n))return!1;var r=e[n];return r!==t.default&&null!==r&&(!t.isMany||r.length)}))}(e),this.parseAttributes(wn(n,(function(e){return e.isAttr}))),this.parseContainments(function(e){return wn(e,(function(e){return!e.isAttr}))}(n))),this.parseGenericAttributes(e,t),this},Fr.prototype.nsTagName=function(e){return function(e,t){return t.isGeneric?$n({localName:t.ns.localName},e):$n({localName:(n=t.ns.localName,r=t.$pkg,ar(r)?(i=n).charAt(0).toLowerCase()+i.slice(1):n)},e);var n,r,i}(this.logNamespaceUsed(e.ns),e)},Fr.prototype.nsPropertyTagName=function(e){return function(e,t){return $n({localName:t.ns.localName},e)}(this.logNamespaceUsed(e.ns),e)},Fr.prototype.isLocalNs=function(e){return e.uri===this.ns.uri},Fr.prototype.nsAttributeName=function(e){var t;if(t=bn(e)?Fn(e):e.ns,e.inherited)return{localName:t.localName};var n=this.logNamespaceUsed(t);return this.getNamespaces().logUsed(n),this.isLocalNs(n)?{localName:t.localName}:$n({localName:t.localName},n)},Fr.prototype.parseGeneric=function(e){var t=this,n=this.body,r=[];return En(e,(function(i,o){"$body"===o?n.push((new Or).build({type:"String"},i)):"$children"===o?En(i,(function(e){n.push(new Fr(t).build(e))})):0!==o.indexOf("$")&&t.parseNsAttribute(e,o,i)&&r.push({name:o,value:i})})),r},Fr.prototype.parseNsAttribute=function(e,t,n){var r,i=e.$model,o=Fn(t);if("xmlns"===o.prefix&&(r={prefix:o.localName,uri:n}),o.prefix||"xmlns"!==o.localName||(r={uri:n}),!r)return{name:t,value:n};if(i&&i.getPackage(n))this.logNamespace(r,!0,!0);else{var s=this.logNamespaceUsed(r,!0);this.getNamespaces().logUsed(s)}},Fr.prototype.parseNsAttributes=function(e,t){var n=this,r=e.$attrs,i=[];return En(r,(function(t,r){var o=n.parseNsAttribute(e,r,t);o&&i.push(o)})),i},Fr.prototype.parseGenericAttributes=function(e,t){var n=this;En(t,(function(t){if(t.name!==cr)try{n.addAttribute(n.nsAttributeName(t.name),t.value)}catch(n){console.warn("missing namespace information for ",t.name,"=",t.value,"on",e,n)}}))},Fr.prototype.parseContainments=function(e){var t=this,n=this.body,r=this.element;En(e,(function(e){var i=r.get(e.name),o=e.isReference;if(e.isMany||(i=[i]),e.isBody)n.push((new Or).build(e,i[0]));else if(Tn(e.type))En(i,(function(r){n.push(new Tr(t.addTagName(t.nsPropertyTagName(e))).build(e,r))}));else if(o)En(i,(function(r){n.push(new Pr(t.addTagName(t.nsPropertyTagName(e))).build(r))}));else{var s=ur(e),a=function(e){return"property"===pr(e)}(e);En(i,(function(r){var i;i=s?new Ir(t,e):a?new Fr(t,e):new Fr(t),n.push(i.build(r))}))}}))},Fr.prototype.getNamespaces=function(e){var t,n=this.namespaces,r=this.parent;return n||(t=r&&r.getNamespaces(),e||!t?this.namespaces=n=new Rr(t):n=t),n},Fr.prototype.logNamespace=function(e,t,n){var r=this.getNamespaces(n),i=e.uri,o=e.prefix;return r.byUri(i)&&!n||r.add(e,t),r.mapPrefix(o,i),e},Fr.prototype.logNamespaceUsed=function(e,t){var n,r,i,o=this.element.$model,s=this.getNamespaces(t),a=e.prefix,l=e.uri;if(!a&&!l)return{localName:e.localName};if(i=lr[a]||o&&(o.getPackage(a)||{}).uri,!(l=l||i||s.uriByPrefix(a)))throw new Error("no namespace uri given for prefix <"+a+">");if(!(e=s.byUri(l))){for(n=a,r=1;s.uriByPrefix(n);)n=a+"_"+r++;e=this.logNamespace({prefix:n,uri:l},i===l)}return a&&s.mapPrefix(a,l),e},Fr.prototype.parseAttributes=function(e){var t=this,n=this.element;En(e,(function(e){var r=n.get(e.name);if(e.isReference)if(e.isMany){var i=[];En(r,(function(e){i.push(e.id)})),r=i.join(" ")}else r=r.id;t.addAttribute(t.nsAttributeName(e),r)}))},Fr.prototype.addTagName=function(e){var t=this.logNamespaceUsed(e);return this.getNamespaces().logUsed(t),Br(e)},Fr.prototype.addAttribute=function(e,t){var n=this.attrs;bn(t)&&(t=Dr(t,_r,Mr));var r=function(e,t){t=kn(t);let n=yn(e)?-1:void 0;return En(e,(function(e,r){if(t(e,r))return n=r,!1})),n}(n,(function(t){return t.name.localName===e.localName&&t.name.uri===e.uri&&t.name.prefix===e.prefix})),i={name:e,value:t};-1!==r?n.splice(r,1,i):n.push(i)},Fr.prototype.serializeAttributes=function(e){var t=this.attrs,n=this.namespaces;n&&(t=function(e){return e.getUsed().filter((function(e){return"xml"!==e.prefix})).map((function(e){return{name:"xmlns"+(e.prefix?":"+e.prefix:""),value:e.uri}}))}(n).concat(t)),En(t,(function(t){e.append(" ").append(Br(t.name)).append('="').append(t.value).append('"')}))},Fr.prototype.serializeTo=function(e){var t=this.body[0],n=t&&t.constructor!==Or;e.appendIndent().append("<"+this.tagName),this.serializeAttributes(e),e.append(t?">":" />"),t&&(n&&e.appendNewLine().indent(),En(this.body,(function(t){t.serializeTo(e)})),n&&e.unindent().appendIndent(),e.append("</"+this.tagName+">")),e.appendNewLine()},$r(Ir,Fr),Ir.prototype.parseNsAttributes=function(e){var t=Fr.prototype.parseNsAttributes.call(this,e),n=e.$descriptor;if(n.name===this.propertyDescriptor.type)return t;var r=this.typeNs=this.nsTagName(n);this.getNamespaces().logUsed(this.typeNs);var i=e.$model.getPackage(r.uri),o=i.xml&&i.xml.typePrefix||"";return this.addAttribute(this.nsAttributeName(cr),(r.prefix?r.prefix+":":"")+o+n.ns.localName),t},Ir.prototype.isLocalNs=function(e){return e.uri===(this.typeNs||this.ns).uri},Vr.prototype=Object.create(Hn.prototype),Vr.prototype.fromXML=function(e,t,n){bn(t)||(n=t,t="bpmn:Definitions");var r=new kr($n({model:this,lax:!0},n)),i=r.handler(t);return r.fromXML(e,i)},Vr.prototype.toXML=function(e,t){var n=new jr(t);return new Promise((function(t,r){try{return t({xml:n.toXML(e)})}catch(e){return r(e)}}))};var Ur={bpmn:{name:"BPMN20",uri:"http://www.omg.org/spec/BPMN/20100524/MODEL",prefix:"bpmn",associations:[],types:[{name:"Interface",superClass:["RootElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"operations",type:"Operation",isMany:!0},{name:"implementationRef",isAttr:!0,type:"String"}]},{name:"Operation",superClass:["BaseElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"inMessageRef",type:"Message",isReference:!0},{name:"outMessageRef",type:"Message",isReference:!0},{name:"errorRef",type:"Error",isMany:!0,isReference:!0},{name:"implementationRef",isAttr:!0,type:"String"}]},{name:"EndPoint",superClass:["RootElement"]},{name:"Auditing",superClass:["BaseElement"]},{name:"GlobalTask",superClass:["CallableElement"],properties:[{name:"resources",type:"ResourceRole",isMany:!0}]},{name:"Monitoring",superClass:["BaseElement"]},{name:"Performer",superClass:["ResourceRole"]},{name:"Process",superClass:["FlowElementsContainer","CallableElement"],properties:[{name:"processType",type:"ProcessType",isAttr:!0},{name:"isClosed",isAttr:!0,type:"Boolean"},{name:"auditing",type:"Auditing"},{name:"monitoring",type:"Monitoring"},{name:"properties",type:"Property",isMany:!0},{name:"laneSets",isMany:!0,replaces:"FlowElementsContainer#laneSets",type:"LaneSet"},{name:"flowElements",isMany:!0,replaces:"FlowElementsContainer#flowElements",type:"FlowElement"},{name:"artifacts",type:"Artifact",isMany:!0},{name:"resources",type:"ResourceRole",isMany:!0},{name:"correlationSubscriptions",type:"CorrelationSubscription",isMany:!0},{name:"supports",type:"Process",isMany:!0,isReference:!0},{name:"definitionalCollaborationRef",type:"Collaboration",isAttr:!0,isReference:!0},{name:"isExecutable",isAttr:!0,type:"Boolean"}]},{name:"LaneSet",superClass:["BaseElement"],properties:[{name:"lanes",type:"Lane",isMany:!0},{name:"name",isAttr:!0,type:"String"}]},{name:"Lane",superClass:["BaseElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"partitionElementRef",type:"BaseElement",isAttr:!0,isReference:!0},{name:"partitionElement",type:"BaseElement"},{name:"flowNodeRef",type:"FlowNode",isMany:!0,isReference:!0},{name:"childLaneSet",type:"LaneSet",xml:{serialize:"xsi:type"}}]},{name:"GlobalManualTask",superClass:["GlobalTask"]},{name:"ManualTask",superClass:["Task"]},{name:"UserTask",superClass:["Task"],properties:[{name:"renderings",type:"Rendering",isMany:!0},{name:"implementation",isAttr:!0,type:"String"}]},{name:"Rendering",superClass:["BaseElement"]},{name:"HumanPerformer",superClass:["Performer"]},{name:"PotentialOwner",superClass:["HumanPerformer"]},{name:"GlobalUserTask",superClass:["GlobalTask"],properties:[{name:"implementation",isAttr:!0,type:"String"},{name:"renderings",type:"Rendering",isMany:!0}]},{name:"Gateway",isAbstract:!0,superClass:["FlowNode"],properties:[{name:"gatewayDirection",type:"GatewayDirection",default:"Unspecified",isAttr:!0}]},{name:"EventBasedGateway",superClass:["Gateway"],properties:[{name:"instantiate",default:!1,isAttr:!0,type:"Boolean"},{name:"eventGatewayType",type:"EventBasedGatewayType",isAttr:!0,default:"Exclusive"}]},{name:"ComplexGateway",superClass:["Gateway"],properties:[{name:"activationCondition",type:"Expression",xml:{serialize:"xsi:type"}},{name:"default",type:"SequenceFlow",isAttr:!0,isReference:!0}]},{name:"ExclusiveGateway",superClass:["Gateway"],properties:[{name:"default",type:"SequenceFlow",isAttr:!0,isReference:!0}]},{name:"InclusiveGateway",superClass:["Gateway"],properties:[{name:"default",type:"SequenceFlow",isAttr:!0,isReference:!0}]},{name:"ParallelGateway",superClass:["Gateway"]},{name:"RootElement",isAbstract:!0,superClass:["BaseElement"]},{name:"Relationship",superClass:["BaseElement"],properties:[{name:"type",isAttr:!0,type:"String"},{name:"direction",type:"RelationshipDirection",isAttr:!0},{name:"source",isMany:!0,isReference:!0,type:"Element"},{name:"target",isMany:!0,isReference:!0,type:"Element"}]},{name:"BaseElement",isAbstract:!0,properties:[{name:"id",isAttr:!0,type:"String",isId:!0},{name:"documentation",type:"Documentation",isMany:!0},{name:"extensionDefinitions",type:"ExtensionDefinition",isMany:!0,isReference:!0},{name:"extensionElements",type:"ExtensionElements"}]},{name:"Extension",properties:[{name:"mustUnderstand",default:!1,isAttr:!0,type:"Boolean"},{name:"definition",type:"ExtensionDefinition",isAttr:!0,isReference:!0}]},{name:"ExtensionDefinition",properties:[{name:"name",isAttr:!0,type:"String"},{name:"extensionAttributeDefinitions",type:"ExtensionAttributeDefinition",isMany:!0}]},{name:"ExtensionAttributeDefinition",properties:[{name:"name",isAttr:!0,type:"String"},{name:"type",isAttr:!0,type:"String"},{name:"isReference",default:!1,isAttr:!0,type:"Boolean"},{name:"extensionDefinition",type:"ExtensionDefinition",isAttr:!0,isReference:!0}]},{name:"ExtensionElements",properties:[{name:"valueRef",isAttr:!0,isReference:!0,type:"Element"},{name:"values",type:"Element",isMany:!0},{name:"extensionAttributeDefinition",type:"ExtensionAttributeDefinition",isAttr:!0,isReference:!0}]},{name:"Documentation",superClass:["BaseElement"],properties:[{name:"text",type:"String",isBody:!0},{name:"textFormat",default:"text/plain",isAttr:!0,type:"String"}]},{name:"Event",isAbstract:!0,superClass:["FlowNode","InteractionNode"],properties:[{name:"properties",type:"Property",isMany:!0}]},{name:"IntermediateCatchEvent",superClass:["CatchEvent"]},{name:"IntermediateThrowEvent",superClass:["ThrowEvent"]},{name:"EndEvent",superClass:["ThrowEvent"]},{name:"StartEvent",superClass:["CatchEvent"],properties:[{name:"isInterrupting",default:!0,isAttr:!0,type:"Boolean"}]},{name:"ThrowEvent",isAbstract:!0,superClass:["Event"],properties:[{name:"dataInputs",type:"DataInput",isMany:!0},{name:"dataInputAssociations",type:"DataInputAssociation",isMany:!0},{name:"inputSet",type:"InputSet"},{name:"eventDefinitions",type:"EventDefinition",isMany:!0},{name:"eventDefinitionRef",type:"EventDefinition",isMany:!0,isReference:!0}]},{name:"CatchEvent",isAbstract:!0,superClass:["Event"],properties:[{name:"parallelMultiple",isAttr:!0,type:"Boolean",default:!1},{name:"dataOutputs",type:"DataOutput",isMany:!0},{name:"dataOutputAssociations",type:"DataOutputAssociation",isMany:!0},{name:"outputSet",type:"OutputSet"},{name:"eventDefinitions",type:"EventDefinition",isMany:!0},{name:"eventDefinitionRef",type:"EventDefinition",isMany:!0,isReference:!0}]},{name:"BoundaryEvent",superClass:["CatchEvent"],properties:[{name:"cancelActivity",default:!0,isAttr:!0,type:"Boolean"},{name:"attachedToRef",type:"Activity",isAttr:!0,isReference:!0}]},{name:"EventDefinition",isAbstract:!0,superClass:["RootElement"]},{name:"CancelEventDefinition",superClass:["EventDefinition"]},{name:"ErrorEventDefinition",superClass:["EventDefinition"],properties:[{name:"errorRef",type:"Error",isAttr:!0,isReference:!0}]},{name:"TerminateEventDefinition",superClass:["EventDefinition"]},{name:"EscalationEventDefinition",superClass:["EventDefinition"],properties:[{name:"escalationRef",type:"Escalation",isAttr:!0,isReference:!0}]},{name:"Escalation",properties:[{name:"structureRef",type:"ItemDefinition",isAttr:!0,isReference:!0},{name:"name",isAttr:!0,type:"String"},{name:"escalationCode",isAttr:!0,type:"String"}],superClass:["RootElement"]},{name:"CompensateEventDefinition",superClass:["EventDefinition"],properties:[{name:"waitForCompletion",isAttr:!0,type:"Boolean",default:!0},{name:"activityRef",type:"Activity",isAttr:!0,isReference:!0}]},{name:"TimerEventDefinition",superClass:["EventDefinition"],properties:[{name:"timeDate",type:"Expression",xml:{serialize:"xsi:type"}},{name:"timeCycle",type:"Expression",xml:{serialize:"xsi:type"}},{name:"timeDuration",type:"Expression",xml:{serialize:"xsi:type"}}]},{name:"LinkEventDefinition",superClass:["EventDefinition"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"target",type:"LinkEventDefinition",isReference:!0},{name:"source",type:"LinkEventDefinition",isMany:!0,isReference:!0}]},{name:"MessageEventDefinition",superClass:["EventDefinition"],properties:[{name:"messageRef",type:"Message",isAttr:!0,isReference:!0},{name:"operationRef",type:"Operation",isAttr:!0,isReference:!0}]},{name:"ConditionalEventDefinition",superClass:["EventDefinition"],properties:[{name:"condition",type:"Expression",xml:{serialize:"xsi:type"}}]},{name:"SignalEventDefinition",superClass:["EventDefinition"],properties:[{name:"signalRef",type:"Signal",isAttr:!0,isReference:!0}]},{name:"Signal",superClass:["RootElement"],properties:[{name:"structureRef",type:"ItemDefinition",isAttr:!0,isReference:!0},{name:"name",isAttr:!0,type:"String"}]},{name:"ImplicitThrowEvent",superClass:["ThrowEvent"]},{name:"DataState",superClass:["BaseElement"],properties:[{name:"name",isAttr:!0,type:"String"}]},{name:"ItemAwareElement",superClass:["BaseElement"],properties:[{name:"itemSubjectRef",type:"ItemDefinition",isAttr:!0,isReference:!0},{name:"dataState",type:"DataState"}]},{name:"DataAssociation",superClass:["BaseElement"],properties:[{name:"sourceRef",type:"ItemAwareElement",isMany:!0,isReference:!0},{name:"targetRef",type:"ItemAwareElement",isReference:!0},{name:"transformation",type:"FormalExpression",xml:{serialize:"property"}},{name:"assignment",type:"Assignment",isMany:!0}]},{name:"DataInput",superClass:["ItemAwareElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"isCollection",default:!1,isAttr:!0,type:"Boolean"},{name:"inputSetRef",type:"InputSet",isMany:!0,isVirtual:!0,isReference:!0},{name:"inputSetWithOptional",type:"InputSet",isMany:!0,isVirtual:!0,isReference:!0},{name:"inputSetWithWhileExecuting",type:"InputSet",isMany:!0,isVirtual:!0,isReference:!0}]},{name:"DataOutput",superClass:["ItemAwareElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"isCollection",default:!1,isAttr:!0,type:"Boolean"},{name:"outputSetRef",type:"OutputSet",isMany:!0,isVirtual:!0,isReference:!0},{name:"outputSetWithOptional",type:"OutputSet",isMany:!0,isVirtual:!0,isReference:!0},{name:"outputSetWithWhileExecuting",type:"OutputSet",isMany:!0,isVirtual:!0,isReference:!0}]},{name:"InputSet",superClass:["BaseElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"dataInputRefs",type:"DataInput",isMany:!0,isReference:!0},{name:"optionalInputRefs",type:"DataInput",isMany:!0,isReference:!0},{name:"whileExecutingInputRefs",type:"DataInput",isMany:!0,isReference:!0},{name:"outputSetRefs",type:"OutputSet",isMany:!0,isReference:!0}]},{name:"OutputSet",superClass:["BaseElement"],properties:[{name:"dataOutputRefs",type:"DataOutput",isMany:!0,isReference:!0},{name:"name",isAttr:!0,type:"String"},{name:"inputSetRefs",type:"InputSet",isMany:!0,isReference:!0},{name:"optionalOutputRefs",type:"DataOutput",isMany:!0,isReference:!0},{name:"whileExecutingOutputRefs",type:"DataOutput",isMany:!0,isReference:!0}]},{name:"Property",superClass:["ItemAwareElement"],properties:[{name:"name",isAttr:!0,type:"String"}]},{name:"DataInputAssociation",superClass:["DataAssociation"]},{name:"DataOutputAssociation",superClass:["DataAssociation"]},{name:"InputOutputSpecification",superClass:["BaseElement"],properties:[{name:"dataInputs",type:"DataInput",isMany:!0},{name:"dataOutputs",type:"DataOutput",isMany:!0},{name:"inputSets",type:"InputSet",isMany:!0},{name:"outputSets",type:"OutputSet",isMany:!0}]},{name:"DataObject",superClass:["FlowElement","ItemAwareElement"],properties:[{name:"isCollection",default:!1,isAttr:!0,type:"Boolean"}]},{name:"InputOutputBinding",properties:[{name:"inputDataRef",type:"InputSet",isAttr:!0,isReference:!0},{name:"outputDataRef",type:"OutputSet",isAttr:!0,isReference:!0},{name:"operationRef",type:"Operation",isAttr:!0,isReference:!0}]},{name:"Assignment",superClass:["BaseElement"],properties:[{name:"from",type:"Expression",xml:{serialize:"xsi:type"}},{name:"to",type:"Expression",xml:{serialize:"xsi:type"}}]},{name:"DataStore",superClass:["RootElement","ItemAwareElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"capacity",isAttr:!0,type:"Integer"},{name:"isUnlimited",default:!0,isAttr:!0,type:"Boolean"}]},{name:"DataStoreReference",superClass:["ItemAwareElement","FlowElement"],properties:[{name:"dataStoreRef",type:"DataStore",isAttr:!0,isReference:!0}]},{name:"DataObjectReference",superClass:["ItemAwareElement","FlowElement"],properties:[{name:"dataObjectRef",type:"DataObject",isAttr:!0,isReference:!0}]},{name:"ConversationLink",superClass:["BaseElement"],properties:[{name:"sourceRef",type:"InteractionNode",isAttr:!0,isReference:!0},{name:"targetRef",type:"InteractionNode",isAttr:!0,isReference:!0},{name:"name",isAttr:!0,type:"String"}]},{name:"ConversationAssociation",superClass:["BaseElement"],properties:[{name:"innerConversationNodeRef",type:"ConversationNode",isAttr:!0,isReference:!0},{name:"outerConversationNodeRef",type:"ConversationNode",isAttr:!0,isReference:!0}]},{name:"CallConversation",superClass:["ConversationNode"],properties:[{name:"calledCollaborationRef",type:"Collaboration",isAttr:!0,isReference:!0},{name:"participantAssociations",type:"ParticipantAssociation",isMany:!0}]},{name:"Conversation",superClass:["ConversationNode"]},{name:"SubConversation",superClass:["ConversationNode"],properties:[{name:"conversationNodes",type:"ConversationNode",isMany:!0}]},{name:"ConversationNode",isAbstract:!0,superClass:["InteractionNode","BaseElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"participantRef",type:"Participant",isMany:!0,isReference:!0},{name:"messageFlowRefs",type:"MessageFlow",isMany:!0,isReference:!0},{name:"correlationKeys",type:"CorrelationKey",isMany:!0}]},{name:"GlobalConversation",superClass:["Collaboration"]},{name:"PartnerEntity",superClass:["RootElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"participantRef",type:"Participant",isMany:!0,isReference:!0}]},{name:"PartnerRole",superClass:["RootElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"participantRef",type:"Participant",isMany:!0,isReference:!0}]},{name:"CorrelationProperty",superClass:["RootElement"],properties:[{name:"correlationPropertyRetrievalExpression",type:"CorrelationPropertyRetrievalExpression",isMany:!0},{name:"name",isAttr:!0,type:"String"},{name:"type",type:"ItemDefinition",isAttr:!0,isReference:!0}]},{name:"Error",superClass:["RootElement"],properties:[{name:"structureRef",type:"ItemDefinition",isAttr:!0,isReference:!0},{name:"name",isAttr:!0,type:"String"},{name:"errorCode",isAttr:!0,type:"String"}]},{name:"CorrelationKey",superClass:["BaseElement"],properties:[{name:"correlationPropertyRef",type:"CorrelationProperty",isMany:!0,isReference:!0},{name:"name",isAttr:!0,type:"String"}]},{name:"Expression",superClass:["BaseElement"],isAbstract:!1,properties:[{name:"body",isBody:!0,type:"String"}]},{name:"FormalExpression",superClass:["Expression"],properties:[{name:"language",isAttr:!0,type:"String"},{name:"evaluatesToTypeRef",type:"ItemDefinition",isAttr:!0,isReference:!0}]},{name:"Message",superClass:["RootElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"itemRef",type:"ItemDefinition",isAttr:!0,isReference:!0}]},{name:"ItemDefinition",superClass:["RootElement"],properties:[{name:"itemKind",type:"ItemKind",isAttr:!0},{name:"structureRef",isAttr:!0,type:"String"},{name:"isCollection",default:!1,isAttr:!0,type:"Boolean"},{name:"import",type:"Import",isAttr:!0,isReference:!0}]},{name:"FlowElement",isAbstract:!0,superClass:["BaseElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"auditing",type:"Auditing"},{name:"monitoring",type:"Monitoring"},{name:"categoryValueRef",type:"CategoryValue",isMany:!0,isReference:!0}]},{name:"SequenceFlow",superClass:["FlowElement"],properties:[{name:"isImmediate",isAttr:!0,type:"Boolean"},{name:"conditionExpression",type:"Expression",xml:{serialize:"xsi:type"}},{name:"sourceRef",type:"FlowNode",isAttr:!0,isReference:!0},{name:"targetRef",type:"FlowNode",isAttr:!0,isReference:!0}]},{name:"FlowElementsContainer",isAbstract:!0,superClass:["BaseElement"],properties:[{name:"laneSets",type:"LaneSet",isMany:!0},{name:"flowElements",type:"FlowElement",isMany:!0}]},{name:"CallableElement",isAbstract:!0,superClass:["RootElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"ioSpecification",type:"InputOutputSpecification",xml:{serialize:"property"}},{name:"supportedInterfaceRef",type:"Interface",isMany:!0,isReference:!0},{name:"ioBinding",type:"InputOutputBinding",isMany:!0,xml:{serialize:"property"}}]},{name:"FlowNode",isAbstract:!0,superClass:["FlowElement"],properties:[{name:"incoming",type:"SequenceFlow",isMany:!0,isReference:!0},{name:"outgoing",type:"SequenceFlow",isMany:!0,isReference:!0},{name:"lanes",type:"Lane",isMany:!0,isVirtual:!0,isReference:!0}]},{name:"CorrelationPropertyRetrievalExpression",superClass:["BaseElement"],properties:[{name:"messagePath",type:"FormalExpression"},{name:"messageRef",type:"Message",isAttr:!0,isReference:!0}]},{name:"CorrelationPropertyBinding",superClass:["BaseElement"],properties:[{name:"dataPath",type:"FormalExpression"},{name:"correlationPropertyRef",type:"CorrelationProperty",isAttr:!0,isReference:!0}]},{name:"Resource",superClass:["RootElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"resourceParameters",type:"ResourceParameter",isMany:!0}]},{name:"ResourceParameter",superClass:["BaseElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"isRequired",isAttr:!0,type:"Boolean"},{name:"type",type:"ItemDefinition",isAttr:!0,isReference:!0}]},{name:"CorrelationSubscription",superClass:["BaseElement"],properties:[{name:"correlationKeyRef",type:"CorrelationKey",isAttr:!0,isReference:!0},{name:"correlationPropertyBinding",type:"CorrelationPropertyBinding",isMany:!0}]},{name:"MessageFlow",superClass:["BaseElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"sourceRef",type:"InteractionNode",isAttr:!0,isReference:!0},{name:"targetRef",type:"InteractionNode",isAttr:!0,isReference:!0},{name:"messageRef",type:"Message",isAttr:!0,isReference:!0}]},{name:"MessageFlowAssociation",superClass:["BaseElement"],properties:[{name:"innerMessageFlowRef",type:"MessageFlow",isAttr:!0,isReference:!0},{name:"outerMessageFlowRef",type:"MessageFlow",isAttr:!0,isReference:!0}]},{name:"InteractionNode",isAbstract:!0,properties:[{name:"incomingConversationLinks",type:"ConversationLink",isMany:!0,isVirtual:!0,isReference:!0},{name:"outgoingConversationLinks",type:"ConversationLink",isMany:!0,isVirtual:!0,isReference:!0}]},{name:"Participant",superClass:["InteractionNode","BaseElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"interfaceRef",type:"Interface",isMany:!0,isReference:!0},{name:"participantMultiplicity",type:"ParticipantMultiplicity"},{name:"endPointRefs",type:"EndPoint",isMany:!0,isReference:!0},{name:"processRef",type:"Process",isAttr:!0,isReference:!0}]},{name:"ParticipantAssociation",superClass:["BaseElement"],properties:[{name:"innerParticipantRef",type:"Participant",isAttr:!0,isReference:!0},{name:"outerParticipantRef",type:"Participant",isAttr:!0,isReference:!0}]},{name:"ParticipantMultiplicity",properties:[{name:"minimum",default:0,isAttr:!0,type:"Integer"},{name:"maximum",default:1,isAttr:!0,type:"Integer"}],superClass:["BaseElement"]},{name:"Collaboration",superClass:["RootElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"isClosed",isAttr:!0,type:"Boolean"},{name:"participants",type:"Participant",isMany:!0},{name:"messageFlows",type:"MessageFlow",isMany:!0},{name:"artifacts",type:"Artifact",isMany:!0},{name:"conversations",type:"ConversationNode",isMany:!0},{name:"conversationAssociations",type:"ConversationAssociation"},{name:"participantAssociations",type:"ParticipantAssociation",isMany:!0},{name:"messageFlowAssociations",type:"MessageFlowAssociation",isMany:!0},{name:"correlationKeys",type:"CorrelationKey",isMany:!0},{name:"choreographyRef",type:"Choreography",isMany:!0,isReference:!0},{name:"conversationLinks",type:"ConversationLink",isMany:!0}]},{name:"ChoreographyActivity",isAbstract:!0,superClass:["FlowNode"],properties:[{name:"participantRef",type:"Participant",isMany:!0,isReference:!0},{name:"initiatingParticipantRef",type:"Participant",isAttr:!0,isReference:!0},{name:"correlationKeys",type:"CorrelationKey",isMany:!0},{name:"loopType",type:"ChoreographyLoopType",default:"None",isAttr:!0}]},{name:"CallChoreography",superClass:["ChoreographyActivity"],properties:[{name:"calledChoreographyRef",type:"Choreography",isAttr:!0,isReference:!0},{name:"participantAssociations",type:"ParticipantAssociation",isMany:!0}]},{name:"SubChoreography",superClass:["ChoreographyActivity","FlowElementsContainer"],properties:[{name:"artifacts",type:"Artifact",isMany:!0}]},{name:"ChoreographyTask",superClass:["ChoreographyActivity"],properties:[{name:"messageFlowRef",type:"MessageFlow",isMany:!0,isReference:!0}]},{name:"Choreography",superClass:["Collaboration","FlowElementsContainer"]},{name:"GlobalChoreographyTask",superClass:["Choreography"],properties:[{name:"initiatingParticipantRef",type:"Participant",isAttr:!0,isReference:!0}]},{name:"TextAnnotation",superClass:["Artifact"],properties:[{name:"text",type:"String"},{name:"textFormat",default:"text/plain",isAttr:!0,type:"String"}]},{name:"Group",superClass:["Artifact"],properties:[{name:"categoryValueRef",type:"CategoryValue",isAttr:!0,isReference:!0}]},{name:"Association",superClass:["Artifact"],properties:[{name:"associationDirection",type:"AssociationDirection",isAttr:!0},{name:"sourceRef",type:"BaseElement",isAttr:!0,isReference:!0},{name:"targetRef",type:"BaseElement",isAttr:!0,isReference:!0}]},{name:"Category",superClass:["RootElement"],properties:[{name:"categoryValue",type:"CategoryValue",isMany:!0},{name:"name",isAttr:!0,type:"String"}]},{name:"Artifact",isAbstract:!0,superClass:["BaseElement"]},{name:"CategoryValue",superClass:["BaseElement"],properties:[{name:"categorizedFlowElements",type:"FlowElement",isMany:!0,isVirtual:!0,isReference:!0},{name:"value",isAttr:!0,type:"String"}]},{name:"Activity",isAbstract:!0,superClass:["FlowNode"],properties:[{name:"isForCompensation",default:!1,isAttr:!0,type:"Boolean"},{name:"default",type:"SequenceFlow",isAttr:!0,isReference:!0},{name:"ioSpecification",type:"InputOutputSpecification",xml:{serialize:"property"}},{name:"boundaryEventRefs",type:"BoundaryEvent",isMany:!0,isReference:!0},{name:"properties",type:"Property",isMany:!0},{name:"dataInputAssociations",type:"DataInputAssociation",isMany:!0},{name:"dataOutputAssociations",type:"DataOutputAssociation",isMany:!0},{name:"startQuantity",default:1,isAttr:!0,type:"Integer"},{name:"resources",type:"ResourceRole",isMany:!0},{name:"completionQuantity",default:1,isAttr:!0,type:"Integer"},{name:"loopCharacteristics",type:"LoopCharacteristics"}]},{name:"ServiceTask",superClass:["Task"],properties:[{name:"implementation",isAttr:!0,type:"String"},{name:"operationRef",type:"Operation",isAttr:!0,isReference:!0}]},{name:"SubProcess",superClass:["Activity","FlowElementsContainer","InteractionNode"],properties:[{name:"triggeredByEvent",default:!1,isAttr:!0,type:"Boolean"},{name:"artifacts",type:"Artifact",isMany:!0}]},{name:"LoopCharacteristics",isAbstract:!0,superClass:["BaseElement"]},{name:"MultiInstanceLoopCharacteristics",superClass:["LoopCharacteristics"],properties:[{name:"isSequential",default:!1,isAttr:!0,type:"Boolean"},{name:"behavior",type:"MultiInstanceBehavior",default:"All",isAttr:!0},{name:"loopCardinality",type:"Expression",xml:{serialize:"xsi:type"}},{name:"loopDataInputRef",type:"ItemAwareElement",isReference:!0},{name:"loopDataOutputRef",type:"ItemAwareElement",isReference:!0},{name:"inputDataItem",type:"DataInput",xml:{serialize:"property"}},{name:"outputDataItem",type:"DataOutput",xml:{serialize:"property"}},{name:"complexBehaviorDefinition",type:"ComplexBehaviorDefinition",isMany:!0},{name:"completionCondition",type:"Expression",xml:{serialize:"xsi:type"}},{name:"oneBehaviorEventRef",type:"EventDefinition",isAttr:!0,isReference:!0},{name:"noneBehaviorEventRef",type:"EventDefinition",isAttr:!0,isReference:!0}]},{name:"StandardLoopCharacteristics",superClass:["LoopCharacteristics"],properties:[{name:"testBefore",default:!1,isAttr:!0,type:"Boolean"},{name:"loopCondition",type:"Expression",xml:{serialize:"xsi:type"}},{name:"loopMaximum",type:"Integer",isAttr:!0}]},{name:"CallActivity",superClass:["Activity","InteractionNode"],properties:[{name:"calledElement",type:"String",isAttr:!0}]},{name:"Task",superClass:["Activity","InteractionNode"]},{name:"SendTask",superClass:["Task"],properties:[{name:"implementation",isAttr:!0,type:"String"},{name:"operationRef",type:"Operation",isAttr:!0,isReference:!0},{name:"messageRef",type:"Message",isAttr:!0,isReference:!0}]},{name:"ReceiveTask",superClass:["Task"],properties:[{name:"implementation",isAttr:!0,type:"String"},{name:"instantiate",default:!1,isAttr:!0,type:"Boolean"},{name:"operationRef",type:"Operation",isAttr:!0,isReference:!0},{name:"messageRef",type:"Message",isAttr:!0,isReference:!0}]},{name:"ScriptTask",superClass:["Task"],properties:[{name:"scriptFormat",isAttr:!0,type:"String"},{name:"script",type:"String"}]},{name:"BusinessRuleTask",superClass:["Task"],properties:[{name:"implementation",isAttr:!0,type:"String"}]},{name:"AdHocSubProcess",superClass:["SubProcess"],properties:[{name:"completionCondition",type:"Expression",xml:{serialize:"xsi:type"}},{name:"ordering",type:"AdHocOrdering",isAttr:!0},{name:"cancelRemainingInstances",default:!0,isAttr:!0,type:"Boolean"}]},{name:"Transaction",superClass:["SubProcess"],properties:[{name:"protocol",isAttr:!0,type:"String"},{name:"method",isAttr:!0,type:"String"}]},{name:"GlobalScriptTask",superClass:["GlobalTask"],properties:[{name:"scriptLanguage",isAttr:!0,type:"String"},{name:"script",isAttr:!0,type:"String"}]},{name:"GlobalBusinessRuleTask",superClass:["GlobalTask"],properties:[{name:"implementation",isAttr:!0,type:"String"}]},{name:"ComplexBehaviorDefinition",superClass:["BaseElement"],properties:[{name:"condition",type:"FormalExpression"},{name:"event",type:"ImplicitThrowEvent"}]},{name:"ResourceRole",superClass:["BaseElement"],properties:[{name:"resourceRef",type:"Resource",isReference:!0},{name:"resourceParameterBindings",type:"ResourceParameterBinding",isMany:!0},{name:"resourceAssignmentExpression",type:"ResourceAssignmentExpression"},{name:"name",isAttr:!0,type:"String"}]},{name:"ResourceParameterBinding",properties:[{name:"expression",type:"Expression",xml:{serialize:"xsi:type"}},{name:"parameterRef",type:"ResourceParameter",isAttr:!0,isReference:!0}],superClass:["BaseElement"]},{name:"ResourceAssignmentExpression",properties:[{name:"expression",type:"Expression",xml:{serialize:"xsi:type"}}],superClass:["BaseElement"]},{name:"Import",properties:[{name:"importType",isAttr:!0,type:"String"},{name:"location",isAttr:!0,type:"String"},{name:"namespace",isAttr:!0,type:"String"}]},{name:"Definitions",superClass:["BaseElement"],properties:[{name:"name",isAttr:!0,type:"String"},{name:"targetNamespace",isAttr:!0,type:"String"},{name:"expressionLanguage",default:"http://www.w3.org/1999/XPath",isAttr:!0,type:"String"},{name:"typeLanguage",default:"http://www.w3.org/2001/XMLSchema",isAttr:!0,type:"String"},{name:"imports",type:"Import",isMany:!0},{name:"extensions",type:"Extension",isMany:!0},{name:"rootElements",type:"RootElement",isMany:!0},{name:"diagrams",isMany:!0,type:"bpmndi:BPMNDiagram"},{name:"exporter",isAttr:!0,type:"String"},{name:"relationships",type:"Relationship",isMany:!0},{name:"exporterVersion",isAttr:!0,type:"String"}]}],enumerations:[{name:"ProcessType",literalValues:[{name:"None"},{name:"Public"},{name:"Private"}]},{name:"GatewayDirection",literalValues:[{name:"Unspecified"},{name:"Converging"},{name:"Diverging"},{name:"Mixed"}]},{name:"EventBasedGatewayType",literalValues:[{name:"Parallel"},{name:"Exclusive"}]},{name:"RelationshipDirection",literalValues:[{name:"None"},{name:"Forward"},{name:"Backward"},{name:"Both"}]},{name:"ItemKind",literalValues:[{name:"Physical"},{name:"Information"}]},{name:"ChoreographyLoopType",literalValues:[{name:"None"},{name:"Standard"},{name:"MultiInstanceSequential"},{name:"MultiInstanceParallel"}]},{name:"AssociationDirection",literalValues:[{name:"None"},{name:"One"},{name:"Both"}]},{name:"MultiInstanceBehavior",literalValues:[{name:"None"},{name:"One"},{name:"All"},{name:"Complex"}]},{name:"AdHocOrdering",literalValues:[{name:"Parallel"},{name:"Sequential"}]}],xml:{tagAlias:"lowerCase",typePrefix:"t"}},bpmndi:{name:"BPMNDI",uri:"http://www.omg.org/spec/BPMN/20100524/DI",prefix:"bpmndi",types:[{name:"BPMNDiagram",properties:[{name:"plane",type:"BPMNPlane",redefines:"di:Diagram#rootElement"},{name:"labelStyle",type:"BPMNLabelStyle",isMany:!0}],superClass:["di:Diagram"]},{name:"BPMNPlane",properties:[{name:"bpmnElement",isAttr:!0,isReference:!0,type:"bpmn:BaseElement",redefines:"di:DiagramElement#modelElement"}],superClass:["di:Plane"]},{name:"BPMNShape",properties:[{name:"bpmnElement",isAttr:!0,isReference:!0,type:"bpmn:BaseElement",redefines:"di:DiagramElement#modelElement"},{name:"isHorizontal",isAttr:!0,type:"Boolean"},{name:"isExpanded",isAttr:!0,type:"Boolean"},{name:"isMarkerVisible",isAttr:!0,type:"Boolean"},{name:"label",type:"BPMNLabel"},{name:"isMessageVisible",isAttr:!0,type:"Boolean"},{name:"participantBandKind",type:"ParticipantBandKind",isAttr:!0},{name:"choreographyActivityShape",type:"BPMNShape",isAttr:!0,isReference:!0}],superClass:["di:LabeledShape"]},{name:"BPMNEdge",properties:[{name:"label",type:"BPMNLabel"},{name:"bpmnElement",isAttr:!0,isReference:!0,type:"bpmn:BaseElement",redefines:"di:DiagramElement#modelElement"},{name:"sourceElement",isAttr:!0,isReference:!0,type:"di:DiagramElement",redefines:"di:Edge#source"},{name:"targetElement",isAttr:!0,isReference:!0,type:"di:DiagramElement",redefines:"di:Edge#target"},{name:"messageVisibleKind",type:"MessageVisibleKind",isAttr:!0,default:"initiating"}],superClass:["di:LabeledEdge"]},{name:"BPMNLabel",properties:[{name:"labelStyle",type:"BPMNLabelStyle",isAttr:!0,isReference:!0,redefines:"di:DiagramElement#style"}],superClass:["di:Label"]},{name:"BPMNLabelStyle",properties:[{name:"font",type:"dc:Font"}],superClass:["di:Style"]}],enumerations:[{name:"ParticipantBandKind",literalValues:[{name:"top_initiating"},{name:"middle_initiating"},{name:"bottom_initiating"},{name:"top_non_initiating"},{name:"middle_non_initiating"},{name:"bottom_non_initiating"}]},{name:"MessageVisibleKind",literalValues:[{name:"initiating"},{name:"non_initiating"}]}],associations:[]},dc:{name:"DC",uri:"http://www.omg.org/spec/DD/20100524/DC",prefix:"dc",types:[{name:"Boolean"},{name:"Integer"},{name:"Real"},{name:"String"},{name:"Font",properties:[{name:"name",type:"String",isAttr:!0},{name:"size",type:"Real",isAttr:!0},{name:"isBold",type:"Boolean",isAttr:!0},{name:"isItalic",type:"Boolean",isAttr:!0},{name:"isUnderline",type:"Boolean",isAttr:!0},{name:"isStrikeThrough",type:"Boolean",isAttr:!0}]},{name:"Point",properties:[{name:"x",type:"Real",default:"0",isAttr:!0},{name:"y",type:"Real",default:"0",isAttr:!0}]},{name:"Bounds",properties:[{name:"x",type:"Real",default:"0",isAttr:!0},{name:"y",type:"Real",default:"0",isAttr:!0},{name:"width",type:"Real",isAttr:!0},{name:"height",type:"Real",isAttr:!0}]}],associations:[]},di:{name:"DI",uri:"http://www.omg.org/spec/DD/20100524/DI",prefix:"di",types:[{name:"DiagramElement",isAbstract:!0,properties:[{name:"id",isAttr:!0,isId:!0,type:"String"},{name:"extension",type:"Extension"},{name:"owningDiagram",type:"Diagram",isReadOnly:!0,isVirtual:!0,isReference:!0},{name:"owningElement",type:"DiagramElement",isReadOnly:!0,isVirtual:!0,isReference:!0},{name:"modelElement",isReadOnly:!0,isVirtual:!0,isReference:!0,type:"Element"},{name:"style",type:"Style",isReadOnly:!0,isVirtual:!0,isReference:!0},{name:"ownedElement",type:"DiagramElement",isReadOnly:!0,isMany:!0,isVirtual:!0}]},{name:"Node",isAbstract:!0,superClass:["DiagramElement"]},{name:"Edge",isAbstract:!0,superClass:["DiagramElement"],properties:[{name:"source",type:"DiagramElement",isReadOnly:!0,isVirtual:!0,isReference:!0},{name:"target",type:"DiagramElement",isReadOnly:!0,isVirtual:!0,isReference:!0},{name:"waypoint",isUnique:!1,isMany:!0,type:"dc:Point",xml:{serialize:"xsi:type"}}]},{name:"Diagram",isAbstract:!0,properties:[{name:"id",isAttr:!0,isId:!0,type:"String"},{name:"rootElement",type:"DiagramElement",isReadOnly:!0,isVirtual:!0},{name:"name",isAttr:!0,type:"String"},{name:"documentation",isAttr:!0,type:"String"},{name:"resolution",isAttr:!0,type:"Real"},{name:"ownedStyle",type:"Style",isReadOnly:!0,isMany:!0,isVirtual:!0}]},{name:"Shape",isAbstract:!0,superClass:["Node"],properties:[{name:"bounds",type:"dc:Bounds"}]},{name:"Plane",isAbstract:!0,superClass:["Node"],properties:[{name:"planeElement",type:"DiagramElement",subsettedProperty:"DiagramElement-ownedElement",isMany:!0}]},{name:"LabeledEdge",isAbstract:!0,superClass:["Edge"],properties:[{name:"ownedLabel",type:"Label",isReadOnly:!0,subsettedProperty:"DiagramElement-ownedElement",isMany:!0,isVirtual:!0}]},{name:"LabeledShape",isAbstract:!0,superClass:["Shape"],properties:[{name:"ownedLabel",type:"Label",isReadOnly:!0,subsettedProperty:"DiagramElement-ownedElement",isMany:!0,isVirtual:!0}]},{name:"Label",isAbstract:!0,superClass:["Node"],properties:[{name:"bounds",type:"dc:Bounds"}]},{name:"Style",isAbstract:!0,properties:[{name:"id",isAttr:!0,isId:!0,type:"String"}]},{name:"Extension",properties:[{name:"values",isMany:!0,type:"Element"}]}],associations:[],xml:{tagAlias:"lowerCase"}},bioc:{name:"bpmn.io colors for BPMN",uri:"http://bpmn.io/schema/bpmn/biocolor/1.0",prefix:"bioc",types:[{name:"ColoredShape",extends:["bpmndi:BPMNShape"],properties:[{name:"stroke",isAttr:!0,type:"String"},{name:"fill",isAttr:!0,type:"String"}]},{name:"ColoredEdge",extends:["bpmndi:BPMNEdge"],properties:[{name:"stroke",isAttr:!0,type:"String"},{name:"fill",isAttr:!0,type:"String"}]}],enumerations:[],associations:[]},color:{name:"BPMN in Color",uri:"http://www.omg.org/spec/BPMN/non-normative/color/1.0",prefix:"color",types:[{name:"ColoredLabel",extends:["bpmndi:BPMNLabel"],properties:[{name:"color",isAttr:!0,type:"String"}]},{name:"ColoredShape",extends:["bpmndi:BPMNShape"],properties:[{name:"background-color",isAttr:!0,type:"String"},{name:"border-color",isAttr:!0,type:"String"}]},{name:"ColoredEdge",extends:["bpmndi:BPMNEdge"],properties:[{name:"border-color",isAttr:!0,type:"String"}]}],enumerations:[],associations:[]}};function Hr(e,t){return new Vr($n({},Ur,e),t)}class qr{async validate(e){try{const t=await(new Hr).fromXML(e);return qr.createValidationResult(!0,t)}catch(e){return console.error("BPMN XML validation failed: ",e),qr.createValidationResult(!1,null)}}static getInstance(){return this._validationService||(this._validationService=new qr),this._validationService}static resetInstance(){return this._validationService=null,this.getInstance()}static createValidationResult(e,t){return{valid:e,definitions:t}}}const Kr=[S,r.iv`
  .container {
    width: 100%;
    height: 100%;
  }

  #buttons-row {
    width: 100%;
    bottom: 0;
    display: grid;
    direction: rtl;
    grid-template-columns: fit-content(5em) fit-content(5em);
    gap: ${R};
    border-top: solid var(--ne-alias-border-width-default)
      var(--ne-alias-border-grey);
    margin: ${R} 0;
    padding-top: ${R};
  }
`];var Gr=function(e,t,n,r){var i,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,n,s):i(t,n))||s);return o>3&&s&&Object.defineProperty(t,n,s),s};let Wr=class extends(d(r.oi)){static get scopedElements(){return{"ne-file-picker":customElements.get("ne-file-picker"),"ne-button":customElements.get("ne-button")}}static get styles(){return Kr}constructor(){super(),this._onCancelClick=()=>{this._content=null,this._eventService.triggerCanceled()},this._onImportClick=()=>{this._eventService.triggerImportCompleted(this._content)},this._validationService=qr.getInstance(),this._eventService=un.getInstance()}_onChange(e){if(e instanceof FileList&&1===e?.length){const t=e[0],n=new FileReader;n.readAsText(t),n.onload=e=>{const n="string"==typeof e.target.result?e.target.result:Buffer.from(e.target.result).toString();this._validationService.validate(n).then((e=>{e.valid?this._content=n:(this._content=null,this._eventService.triggerError(`[${t.name}] is not a supported file type. Please select a bpmn 2.0 file.`))})).catch((e=>{this._content=null,this._eventService.triggerError("Unexpected error during validation. See error property for details.",e)}))}}else this._content=null}render(){return r.dy`<div class="container">
      <ne-file-picker
        .singleFile=${!0}
        .onChange=${e=>this._onChange(e)}
      ></ne-file-picker>
      <div id="buttons-row">
        <ne-button
          variant="primary"
          @ne-click="${this._onImportClick}"
          .disabled=${!this._content}
          >Import</ne-button
        >
        <ne-button variant="secondary" @ne-click="${this._onCancelClick}"
          >Cancel</ne-button
        >
      </div>
    </div>`}};Gr([s()],Wr.prototype,"_content",void 0),Wr=Gr([i("pi-import-from-file")],Wr);var Yr=function(e,t,n,r){var i,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,n,s):i(t,n))||s);return o>3&&s&&Object.defineProperty(t,n,s),s};let Zr=class extends(d(r.oi)){static get scopedElements(){return{"pi-import-list":customElements.get("pi-import-list"),"pi-import-from-file":customElements.get("pi-import-from-file"),"ne-label":customElements.get("ne-label")}}static get styles(){return $}constructor(){super(),this._onImportModuleSelected=e=>{this._selectedModule=e.importModule},this._onCompleted=e=>{this._validationService.validate(e.content).then((t=>{t.valid?un.fireExternal(this,"pi-onImportComplete",{detail:e,composed:!0,bubbles:!0}):this._eventService.triggerError("Validation Failed. Content is not valid")})).catch((e=>{this._eventService.triggerError("Unexpected error during validation. See error property for details.",e)}))},this._onError=e=>{un.fireExternal(this,"pi-onImportError",{detail:e,composed:!0,bubbles:!0})},this._onCancel=()=>{this._selectedModule=null,un.fireExternal(this,"pi-onImportCancel",{composed:!0,bubbles:!0})},this._eventService=un.resetInstance(),this._validationService=qr.resetInstance()}_getImportModulesInfo(){return[{displayName:"My Computer",template:r.dy`<pi-import-from-file></pi-import-from-file>`}]}connectedCallback(){super.connectedCallback&&super.connectedCallback(),this._eventService.importModuleSelectedSubject.subscribe({next:this._onImportModuleSelected}),this._eventService.importCompleteSubject.subscribe({next:this._onCompleted}),this._eventService.errorSubject.subscribe({next:this._onError}),this._eventService.cancelSubject.subscribe({next:this._onCancel})}disconnectedCallback(){super.disconnectedCallback&&super.disconnectedCallback()}render(){if(!this._selectedModule){const e=this._getImportModulesInfo();if(0===e.length)return r.dy`<ne-label>No Imports</ne-label>`;if(1!==e.length)return r.dy`<pi-import-list .importModules=${e}></pi-import-list>`;[this._selectedModule]=e}return this._selectedModule.template}};Yr([s()],Zr.prototype,"_selectedModule",void 0),Zr=Yr([i("pi-bpmn-import")],Zr)},9793:(e,t,n)=>{n.d(t,{ec:()=>c,i1:()=>p,iv:()=>l});const r=window,i=r.ShadowRoot&&(void 0===r.ShadyCSS||r.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,o=Symbol(),s=new WeakMap;class a{constructor(e,t,n){if(this._$cssResult$=!0,n!==o)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=e,this.t=t}get styleSheet(){let e=this.o;const t=this.t;if(i&&void 0===e){const n=void 0!==t&&1===t.length;n&&(e=s.get(t)),void 0===e&&((this.o=e=new CSSStyleSheet).replaceSync(this.cssText),n&&s.set(t,e))}return e}toString(){return this.cssText}}const l=(e,...t)=>{const n=1===e.length?e[0]:t.reduce(((t,n,r)=>t+(e=>{if(!0===e._$cssResult$)return e.cssText;if("number"==typeof e)return e;throw Error("Value passed to 'css' function must be a 'css' function result: "+e+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(n)+e[r+1]),e[0]);return new a(n,e,o)},c=(e,t)=>{i?e.adoptedStyleSheets=t.map((e=>e instanceof CSSStyleSheet?e:e.styleSheet)):t.forEach((t=>{const n=document.createElement("style"),i=r.litNonce;void 0!==i&&n.setAttribute("nonce",i),n.textContent=t.cssText,e.appendChild(n)}))},p=i?e=>e:e=>e instanceof CSSStyleSheet?(e=>{let t="";for(const n of e.cssRules)t+=n.cssText;return(e=>new a("string"==typeof e?e:e+"",void 0,o))(t)})(e):e},3311:(e,t,n)=>{var r;n.d(t,{Al:()=>j,Jb:()=>_,Ld:()=>S,dy:()=>k,sY:()=>U});const i=window,o=i.trustedTypes,s=o?o.createPolicy("lit-html",{createHTML:e=>e}):void 0,a="$lit$",l=`lit$${(Math.random()+"").slice(9)}$`,c="?"+l,p=`<${c}>`,u=document,d=()=>u.createComment(""),f=e=>null===e||"object"!=typeof e&&"function"!=typeof e,h=Array.isArray,m=e=>h(e)||"function"==typeof(null==e?void 0:e[Symbol.iterator]),A="[ \t\n\f\r]",y=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,g=/-->/g,v=/>/g,b=RegExp(`>|${A}(?:([^\\s"'>=/]+)(${A}*=${A}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),C=/'/g,x=/"/g,w=/^(?:script|style|textarea|title)$/i,E=e=>(t,...n)=>({_$litType$:e,strings:t,values:n}),k=E(1),_=(E(2),Symbol.for("lit-noChange")),S=Symbol.for("lit-nothing"),R=new WeakMap,$=u.createTreeWalker(u,129,null,!1),B=(e,t)=>{const n=e.length-1,r=[];let i,o=2===t?"<svg>":"",c=y;for(let t=0;t<n;t++){const n=e[t];let s,u,d=-1,f=0;for(;f<n.length&&(c.lastIndex=f,u=c.exec(n),null!==u);)f=c.lastIndex,c===y?"!--"===u[1]?c=g:void 0!==u[1]?c=v:void 0!==u[2]?(w.test(u[2])&&(i=RegExp("</"+u[2],"g")),c=b):void 0!==u[3]&&(c=b):c===b?">"===u[0]?(c=null!=i?i:y,d=-1):void 0===u[1]?d=-2:(d=c.lastIndex-u[2].length,s=u[1],c=void 0===u[3]?b:'"'===u[3]?x:C):c===x||c===C?c=b:c===g||c===v?c=y:(c=b,i=void 0);const h=c===b&&e[t+1].startsWith("/>")?" ":"";o+=c===y?n+p:d>=0?(r.push(s),n.slice(0,d)+a+n.slice(d)+l+h):n+l+(-2===d?(r.push(void 0),t):h)}const u=o+(e[n]||"<?>")+(2===t?"</svg>":"");if(!Array.isArray(e)||!e.hasOwnProperty("raw"))throw Error("invalid template strings array");return[void 0!==s?s.createHTML(u):u,r]};class M{constructor({strings:e,_$litType$:t},n){let r;this.parts=[];let i=0,s=0;const p=e.length-1,u=this.parts,[f,h]=B(e,t);if(this.el=M.createElement(f,n),$.currentNode=this.el.content,2===t){const e=this.el.content,t=e.firstChild;t.remove(),e.append(...t.childNodes)}for(;null!==(r=$.nextNode())&&u.length<p;){if(1===r.nodeType){if(r.hasAttributes()){const e=[];for(const t of r.getAttributeNames())if(t.endsWith(a)||t.startsWith(l)){const n=h[s++];if(e.push(t),void 0!==n){const e=r.getAttribute(n.toLowerCase()+a).split(l),t=/([.?@])?(.*)/.exec(n);u.push({type:1,index:i,name:t[2],strings:e,ctor:"."===t[1]?T:"?"===t[1]?I:"@"===t[1]?z:O})}else u.push({type:6,index:i})}for(const t of e)r.removeAttribute(t)}if(w.test(r.tagName)){const e=r.textContent.split(l),t=e.length-1;if(t>0){r.textContent=o?o.emptyScript:"";for(let n=0;n<t;n++)r.append(e[n],d()),$.nextNode(),u.push({type:2,index:++i});r.append(e[t],d())}}}else if(8===r.nodeType)if(r.data===c)u.push({type:2,index:i});else{let e=-1;for(;-1!==(e=r.data.indexOf(l,e+1));)u.push({type:7,index:i}),e+=l.length-1}i++}}static createElement(e,t){const n=u.createElement("template");return n.innerHTML=e,n}}function N(e,t,n=e,r){var i,o,s,a;if(t===_)return t;let l=void 0!==r?null===(i=n._$Co)||void 0===i?void 0:i[r]:n._$Cl;const c=f(t)?void 0:t._$litDirective$;return(null==l?void 0:l.constructor)!==c&&(null===(o=null==l?void 0:l._$AO)||void 0===o||o.call(l,!1),void 0===c?l=void 0:(l=new c(e),l._$AT(e,n,r)),void 0!==r?(null!==(s=(a=n)._$Co)&&void 0!==s?s:a._$Co=[])[r]=l:n._$Cl=l),void 0!==l&&(t=N(e,l._$AS(e,t.values),l,r)),t}class D{constructor(e,t){this.u=[],this._$AN=void 0,this._$AD=e,this._$AM=t}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}v(e){var t;const{el:{content:n},parts:r}=this._$AD,i=(null!==(t=null==e?void 0:e.creationScope)&&void 0!==t?t:u).importNode(n,!0);$.currentNode=i;let o=$.nextNode(),s=0,a=0,l=r[0];for(;void 0!==l;){if(s===l.index){let t;2===l.type?t=new P(o,o.nextSibling,this,e):1===l.type?t=new l.ctor(o,l.name,l.strings,this,e):6===l.type&&(t=new L(o,this,e)),this.u.push(t),l=r[++a]}s!==(null==l?void 0:l.index)&&(o=$.nextNode(),s++)}return i}p(e){let t=0;for(const n of this.u)void 0!==n&&(void 0!==n.strings?(n._$AI(e,n,t),t+=n.strings.length-2):n._$AI(e[t])),t++}}class P{constructor(e,t,n,r){var i;this.type=2,this._$AH=S,this._$AN=void 0,this._$AA=e,this._$AB=t,this._$AM=n,this.options=r,this._$Cm=null===(i=null==r?void 0:r.isConnected)||void 0===i||i}get _$AU(){var e,t;return null!==(t=null===(e=this._$AM)||void 0===e?void 0:e._$AU)&&void 0!==t?t:this._$Cm}get parentNode(){let e=this._$AA.parentNode;const t=this._$AM;return void 0!==t&&11===(null==e?void 0:e.nodeType)&&(e=t.parentNode),e}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(e,t=this){e=N(this,e,t),f(e)?e===S||null==e||""===e?(this._$AH!==S&&this._$AR(),this._$AH=S):e!==this._$AH&&e!==_&&this.g(e):void 0!==e._$litType$?this.$(e):void 0!==e.nodeType?this.T(e):m(e)?this.k(e):this.g(e)}S(e){return this._$AA.parentNode.insertBefore(e,this._$AB)}T(e){this._$AH!==e&&(this._$AR(),this._$AH=this.S(e))}g(e){this._$AH!==S&&f(this._$AH)?this._$AA.nextSibling.data=e:this.T(u.createTextNode(e)),this._$AH=e}$(e){var t;const{values:n,_$litType$:r}=e,i="number"==typeof r?this._$AC(e):(void 0===r.el&&(r.el=M.createElement(r.h,this.options)),r);if((null===(t=this._$AH)||void 0===t?void 0:t._$AD)===i)this._$AH.p(n);else{const e=new D(i,this),t=e.v(this.options);e.p(n),this.T(t),this._$AH=e}}_$AC(e){let t=R.get(e.strings);return void 0===t&&R.set(e.strings,t=new M(e)),t}k(e){h(this._$AH)||(this._$AH=[],this._$AR());const t=this._$AH;let n,r=0;for(const i of e)r===t.length?t.push(n=new P(this.S(d()),this.S(d()),this,this.options)):n=t[r],n._$AI(i),r++;r<t.length&&(this._$AR(n&&n._$AB.nextSibling,r),t.length=r)}_$AR(e=this._$AA.nextSibling,t){var n;for(null===(n=this._$AP)||void 0===n||n.call(this,!1,!0,t);e&&e!==this._$AB;){const t=e.nextSibling;e.remove(),e=t}}setConnected(e){var t;void 0===this._$AM&&(this._$Cm=e,null===(t=this._$AP)||void 0===t||t.call(this,e))}}class O{constructor(e,t,n,r,i){this.type=1,this._$AH=S,this._$AN=void 0,this.element=e,this.name=t,this._$AM=r,this.options=i,n.length>2||""!==n[0]||""!==n[1]?(this._$AH=Array(n.length-1).fill(new String),this.strings=n):this._$AH=S}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(e,t=this,n,r){const i=this.strings;let o=!1;if(void 0===i)e=N(this,e,t,0),o=!f(e)||e!==this._$AH&&e!==_,o&&(this._$AH=e);else{const r=e;let s,a;for(e=i[0],s=0;s<i.length-1;s++)a=N(this,r[n+s],t,s),a===_&&(a=this._$AH[s]),o||(o=!f(a)||a!==this._$AH[s]),a===S?e=S:e!==S&&(e+=(null!=a?a:"")+i[s+1]),this._$AH[s]=a}o&&!r&&this.j(e)}j(e){e===S?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=e?e:"")}}class T extends O{constructor(){super(...arguments),this.type=3}j(e){this.element[this.name]=e===S?void 0:e}}const F=o?o.emptyScript:"";class I extends O{constructor(){super(...arguments),this.type=4}j(e){e&&e!==S?this.element.setAttribute(this.name,F):this.element.removeAttribute(this.name)}}class z extends O{constructor(e,t,n,r,i){super(e,t,n,r,i),this.type=5}_$AI(e,t=this){var n;if((e=null!==(n=N(this,e,t,0))&&void 0!==n?n:S)===_)return;const r=this._$AH,i=e===S&&r!==S||e.capture!==r.capture||e.once!==r.once||e.passive!==r.passive,o=e!==S&&(r===S||i);i&&this.element.removeEventListener(this.name,this,r),o&&this.element.addEventListener(this.name,this,e),this._$AH=e}handleEvent(e){var t,n;"function"==typeof this._$AH?this._$AH.call(null!==(n=null===(t=this.options)||void 0===t?void 0:t.host)&&void 0!==n?n:this.element,e):this._$AH.handleEvent(e)}}class L{constructor(e,t,n){this.element=e,this.type=6,this._$AN=void 0,this._$AM=t,this.options=n}get _$AU(){return this._$AM._$AU}_$AI(e){N(this,e)}}const j={P:a,A:l,M:c,C:1,L:B,D,R:m,V:N,I:P,H:O,N:I,U:z,F:T,B:L},V=i.litHtmlPolyfillSupport;null==V||V(M,P),(null!==(r=i.litHtmlVersions)&&void 0!==r?r:i.litHtmlVersions=[]).push("2.7.0");const U=(e,t,n)=>{var r,i;const o=null!==(r=null==n?void 0:n.renderBefore)&&void 0!==r?r:t;let s=o._$litPart$;if(void 0===s){const e=null!==(i=null==n?void 0:n.renderBefore)&&void 0!==i?i:null;o._$litPart$=s=new P(t.insertBefore(d(),e),e,void 0,null!=n?n:{})}return s._$AI(e),s}},3192:(e,t,n)=>{n.d(t,{oi:()=>A,iv:()=>i.iv,dy:()=>m.dy,Ld:()=>m.Ld});var r,i=n(9793);const o=window,s=o.trustedTypes,a=s?s.emptyScript:"",l=o.reactiveElementPolyfillSupport,c={toAttribute(e,t){switch(t){case Boolean:e=e?a:null;break;case Object:case Array:e=null==e?e:JSON.stringify(e)}return e},fromAttribute(e,t){let n=e;switch(t){case Boolean:n=null!==e;break;case Number:n=null===e?null:Number(e);break;case Object:case Array:try{n=JSON.parse(e)}catch(e){n=null}}return n}},p=(e,t)=>t!==e&&(t==t||e==e),u={attribute:!0,type:String,converter:c,reflect:!1,hasChanged:p};class d extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(e){var t;this.finalize(),(null!==(t=this.h)&&void 0!==t?t:this.h=[]).push(e)}static get observedAttributes(){this.finalize();const e=[];return this.elementProperties.forEach(((t,n)=>{const r=this._$Ep(n,t);void 0!==r&&(this._$Ev.set(r,n),e.push(r))})),e}static createProperty(e,t=u){if(t.state&&(t.attribute=!1),this.finalize(),this.elementProperties.set(e,t),!t.noAccessor&&!this.prototype.hasOwnProperty(e)){const n="symbol"==typeof e?Symbol():"__"+e,r=this.getPropertyDescriptor(e,n,t);void 0!==r&&Object.defineProperty(this.prototype,e,r)}}static getPropertyDescriptor(e,t,n){return{get(){return this[t]},set(r){const i=this[e];this[t]=r,this.requestUpdate(e,i,n)},configurable:!0,enumerable:!0}}static getPropertyOptions(e){return this.elementProperties.get(e)||u}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const e=Object.getPrototypeOf(this);if(e.finalize(),void 0!==e.h&&(this.h=[...e.h]),this.elementProperties=new Map(e.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const e=this.properties,t=[...Object.getOwnPropertyNames(e),...Object.getOwnPropertySymbols(e)];for(const n of t)this.createProperty(n,e[n])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(e){const t=[];if(Array.isArray(e)){const n=new Set(e.flat(1/0).reverse());for(const e of n)t.unshift((0,i.i1)(e))}else void 0!==e&&t.push((0,i.i1)(e));return t}static _$Ep(e,t){const n=t.attribute;return!1===n?void 0:"string"==typeof n?n:"string"==typeof e?e.toLowerCase():void 0}u(){var e;this._$E_=new Promise((e=>this.enableUpdating=e)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(e=this.constructor.h)||void 0===e||e.forEach((e=>e(this)))}addController(e){var t,n;(null!==(t=this._$ES)&&void 0!==t?t:this._$ES=[]).push(e),void 0!==this.renderRoot&&this.isConnected&&(null===(n=e.hostConnected)||void 0===n||n.call(e))}removeController(e){var t;null===(t=this._$ES)||void 0===t||t.splice(this._$ES.indexOf(e)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((e,t)=>{this.hasOwnProperty(t)&&(this._$Ei.set(t,this[t]),delete this[t])}))}createRenderRoot(){var e;const t=null!==(e=this.shadowRoot)&&void 0!==e?e:this.attachShadow(this.constructor.shadowRootOptions);return(0,i.ec)(t,this.constructor.elementStyles),t}connectedCallback(){var e;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostConnected)||void 0===t?void 0:t.call(e)}))}enableUpdating(e){}disconnectedCallback(){var e;null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostDisconnected)||void 0===t?void 0:t.call(e)}))}attributeChangedCallback(e,t,n){this._$AK(e,n)}_$EO(e,t,n=u){var r;const i=this.constructor._$Ep(e,n);if(void 0!==i&&!0===n.reflect){const o=(void 0!==(null===(r=n.converter)||void 0===r?void 0:r.toAttribute)?n.converter:c).toAttribute(t,n.type);this._$El=e,null==o?this.removeAttribute(i):this.setAttribute(i,o),this._$El=null}}_$AK(e,t){var n;const r=this.constructor,i=r._$Ev.get(e);if(void 0!==i&&this._$El!==i){const e=r.getPropertyOptions(i),o="function"==typeof e.converter?{fromAttribute:e.converter}:void 0!==(null===(n=e.converter)||void 0===n?void 0:n.fromAttribute)?e.converter:c;this._$El=i,this[i]=o.fromAttribute(t,e.type),this._$El=null}}requestUpdate(e,t,n){let r=!0;void 0!==e&&(((n=n||this.constructor.getPropertyOptions(e)).hasChanged||p)(this[e],t)?(this._$AL.has(e)||this._$AL.set(e,t),!0===n.reflect&&this._$El!==e&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(e,n))):r=!1),!this.isUpdatePending&&r&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(e){Promise.reject(e)}const e=this.scheduleUpdate();return null!=e&&await e,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var e;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((e,t)=>this[t]=e)),this._$Ei=void 0);let t=!1;const n=this._$AL;try{t=this.shouldUpdate(n),t?(this.willUpdate(n),null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostUpdate)||void 0===t?void 0:t.call(e)})),this.update(n)):this._$Ek()}catch(e){throw t=!1,this._$Ek(),e}t&&this._$AE(n)}willUpdate(e){}_$AE(e){var t;null===(t=this._$ES)||void 0===t||t.forEach((e=>{var t;return null===(t=e.hostUpdated)||void 0===t?void 0:t.call(e)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(e)),this.updated(e)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(e){return!0}update(e){void 0!==this._$EC&&(this._$EC.forEach(((e,t)=>this._$EO(t,this[t],e))),this._$EC=void 0),this._$Ek()}updated(e){}firstUpdated(e){}}d.finalized=!0,d.elementProperties=new Map,d.elementStyles=[],d.shadowRootOptions={mode:"open"},null==l||l({ReactiveElement:d}),(null!==(r=o.reactiveElementVersions)&&void 0!==r?r:o.reactiveElementVersions=[]).push("1.6.1");var f,h,m=n(3311);class A extends d{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var e,t;const n=super.createRenderRoot();return null!==(e=(t=this.renderOptions).renderBefore)&&void 0!==e||(t.renderBefore=n.firstChild),n}update(e){const t=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(e),this._$Do=(0,m.sY)(t,this.renderRoot,this.renderOptions)}connectedCallback(){var e;super.connectedCallback(),null===(e=this._$Do)||void 0===e||e.setConnected(!0)}disconnectedCallback(){var e;super.disconnectedCallback(),null===(e=this._$Do)||void 0===e||e.setConnected(!1)}render(){return m.Jb}}A.finalized=!0,A._$litElement$=!0,null===(f=globalThis.litElementHydrateSupport)||void 0===f||f.call(globalThis,{LitElement:A});const y=globalThis.litElementPolyfillSupport;null==y||y({LitElement:A});(null!==(h=globalThis.litElementVersions)&&void 0!==h?h:globalThis.litElementVersions=[]).push("3.3.0")}},r={};function i(e){var t=r[e];if(void 0!==t)return t.exports;var o=r[e]={id:e,exports:{}};return n[e](o,o.exports,i),o.exports}i.m=n,i.c=r,i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.f={},i.e=e=>Promise.all(Object.keys(i.f).reduce(((t,n)=>(i.f[n](e,t),t)),[])),i.u=e=>e+".bundle.js",i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="@pi/bpmn-import:",i.l=(n,r,o,s)=>{if(e[n])e[n].push(r);else{var a,l;if(void 0!==o)for(var c=document.getElementsByTagName("script"),p=0;p<c.length;p++){var u=c[p];if(u.getAttribute("src")==n||u.getAttribute("data-webpack")==t+o){a=u;break}}a||(l=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,i.nc&&a.setAttribute("nonce",i.nc),a.setAttribute("data-webpack",t+o),a.src=n),e[n]=[r];var d=(t,r)=>{a.onerror=a.onload=null,clearTimeout(f);var i=e[n];if(delete e[n],a.parentNode&&a.parentNode.removeChild(a),i&&i.forEach((e=>e(r))),t)return t(r)},f=setTimeout(d.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=d.bind(null,a.onerror),a.onload=d.bind(null,a.onload),l&&document.head.appendChild(a)}},i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{i.S={};var e={},t={};i.I=(n,r)=>{r||(r=[]);var o=t[n];if(o||(o=t[n]={}),!(r.indexOf(o)>=0)){if(r.push(o),e[n])return e[n];i.o(i.S,n)||(i.S[n]={});i.S[n];var s=[];return s.length?e[n]=Promise.all(s).then((()=>e[n]=1)):e[n]=1}}})(),i.p="",(()=>{var e={179:0};i.f.j=(t,n)=>{var r=i.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var o=new Promise(((n,i)=>r=e[t]=[n,i]));n.push(r[2]=o);var s=i.p+i.u(t),a=new Error;i.l(s,(n=>{if(i.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var o=n&&("load"===n.type?"missing":n.type),s=n&&n.target&&n.target.src;a.message="Loading chunk "+t+" failed.\n("+o+": "+s+")",a.name="ChunkLoadError",a.type=o,a.request=s,r[1](a)}}),"chunk-"+t,t)}};var t=(t,n)=>{var r,o,[s,a,l]=n,c=0;if(s.some((t=>0!==e[t]))){for(r in a)i.o(a,r)&&(i.m[r]=a[r]);if(l)l(i)}for(t&&t(n);c<s.length;c++)o=s[c],i.o(e,o)&&e[o]&&e[o][0](),e[o]=0},n=self.webpackChunk_pi_bpmn_import=self.webpackChunk_pi_bpmn_import||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),i.nc=void 0;i(2826)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,